// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_cpp_vm_Gc
#include <cpp/vm/Gc.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_nme_app_Application
#include <nme/app/Application.h>
#endif
#ifndef INCLUDED_nme_app_FrameTimer
#include <nme/app/FrameTimer.h>
#endif
#ifndef INCLUDED_nme_app_IAppEventHandler
#include <nme/app/IAppEventHandler.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
#ifndef INCLUDED_nme_app_Window
#include <nme/app/Window.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_MovieClip
#include <nme/display/MovieClip.h>
#endif
#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
#ifndef INCLUDED_nme_display_Stage
#include <nme/display/Stage.h>
#endif
#ifndef INCLUDED_nme_display_StageAlign
#include <nme/display/StageAlign.h>
#endif
#ifndef INCLUDED_nme_display_StageDisplayState
#include <nme/display/StageDisplayState.h>
#endif
#ifndef INCLUDED_nme_display_StageQuality
#include <nme/display/StageQuality.h>
#endif
#ifndef INCLUDED_nme_display_StageScaleMode
#include <nme/display/StageScaleMode.h>
#endif
#ifndef INCLUDED_nme_display_TouchInfo
#include <nme/display/TouchInfo.h>
#endif
#ifndef INCLUDED_nme_events_AppLinkEvent
#include <nme/events/AppLinkEvent.h>
#endif
#ifndef INCLUDED_nme_events_DropEvent
#include <nme/events/DropEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_FocusEvent
#include <nme/events/FocusEvent.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_JoystickEvent
#include <nme/events/JoystickEvent.h>
#endif
#ifndef INCLUDED_nme_events_KeyboardEvent
#include <nme/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_nme_events_MouseEvent
#include <nme/events/MouseEvent.h>
#endif
#ifndef INCLUDED_nme_events_MoveEvent
#include <nme/events/MoveEvent.h>
#endif
#ifndef INCLUDED_nme_events_StageVideoAvailabilityEvent
#include <nme/events/StageVideoAvailabilityEvent.h>
#endif
#ifndef INCLUDED_nme_events_SystemEvent
#include <nme/events/SystemEvent.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif
#ifndef INCLUDED_nme_events_TouchEvent
#include <nme/events/TouchEvent.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif
#ifndef INCLUDED_nme_media_SoundChannel
#include <nme/media/SoundChannel.h>
#endif
#ifndef INCLUDED_nme_media_StageVideo
#include <nme/media/StageVideo.h>
#endif
#ifndef INCLUDED_nme_net_URLLoader
#include <nme/net/URLLoader.h>
#endif
#ifndef INCLUDED_nme_text_TextField
#include <nme/text/TextField.h>
#endif
#ifndef INCLUDED_nme_ui_GameInput
#include <nme/ui/GameInput.h>
#endif
#ifndef INCLUDED_sys_thread_Lock
#include <sys/thread/Lock.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_164_new,"nme.display.Stage","new",0x82730a3c,"nme.display.Stage.new","nme/display/Stage.hx",164,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_216_dispose,"nme.display.Stage","dispose",0xbc23d87b,"nme.display.Stage.dispose","nme/display/Stage.hx",216,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_236_invalidate,"nme.display.Stage","invalidate",0x79ae131f,"nme.display.Stage.invalidate","nme/display/Stage.hx",236,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_243_isDisplayListDirty,"nme.display.Stage","isDisplayListDirty",0x0002d5e0,"nme.display.Stage.isDisplayListDirty","nme/display/Stage.hx",243,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_248_get_onQuit,"nme.display.Stage","get_onQuit",0xd09fb1fb,"nme.display.Stage.get_onQuit","nme/display/Stage.hx",248,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_249_set_onQuit,"nme.display.Stage","set_onQuit",0xd41d506f,"nme.display.Stage.set_onQuit","nme/display/Stage.hx",249,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_252_addEventListener,"nme.display.Stage","addEventListener",0x2c68d871,"nme.display.Stage.addEventListener","nme/display/Stage.hx",252,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_259_nmeCheckFocusInOuts,"nme.display.Stage","nmeCheckFocusInOuts",0x15cb75fc,"nme.display.Stage.nmeCheckFocusInOuts","nme/display/Stage.hx",259,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_288_nmeCheckInOuts,"nme.display.Stage","nmeCheckInOuts",0xba834390,"nme.display.Stage.nmeCheckInOuts","nme/display/Stage.hx",288,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_340_addPrerenderListener,"nme.display.Stage","addPrerenderListener",0x404cec90,"nme.display.Stage.addPrerenderListener","nme/display/Stage.hx",340,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_348_removePrerenderListener,"nme.display.Stage","removePrerenderListener",0x02448c45,"nme.display.Stage.removePrerenderListener","nme/display/Stage.hx",348,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_356_onText,"nme.display.Stage","onText",0x89592d10,"nme.display.Stage.onText","nme/display/Stage.hx",356,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_386_onKey,"nme.display.Stage","onKey",0xe62f869c,"nme.display.Stage.onKey","nme/display/Stage.hx",386,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_434_onMouse,"nme.display.Stage","onMouse",0xa37a0c62,"nme.display.Stage.onMouse","nme/display/Stage.hx",434,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_527_onUnhandledException,"nme.display.Stage","onUnhandledException",0x0bdff8ef,"nme.display.Stage.onUnhandledException","nme/display/Stage.hx",527,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_539_onTouch,"nme.display.Stage","onTouch",0xab480dfc,"nme.display.Stage.onTouch","nme/display/Stage.hx",539,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_559_onResize,"nme.display.Stage","onResize",0xa3bdd917,"nme.display.Stage.onResize","nme/display/Stage.hx",559,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_565_onRender,"nme.display.Stage","onRender",0xa06bea79,"nme.display.Stage.onRender","nme/display/Stage.hx",565,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_671_onDisplayObjectFocus,"nme.display.Stage","onDisplayObjectFocus",0x060d951a,"nme.display.Stage.onDisplayObjectFocus","nme/display/Stage.hx",671,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_699_onInputFocus,"nme.display.Stage","onInputFocus",0xf1b87411,"nme.display.Stage.onInputFocus","nme/display/Stage.hx",699,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_706_onRotateRequest,"nme.display.Stage","onRotateRequest",0x145a0d71,"nme.display.Stage.onRotateRequest","nme/display/Stage.hx",706,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_710_onChange,"nme.display.Stage","onChange",0x52b51093,"nme.display.Stage.onChange","nme/display/Stage.hx",710,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_717_onScroll,"nme.display.Stage","onScroll",0xe2a75730,"nme.display.Stage.onScroll","nme/display/Stage.hx",717,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_725_onWindowClose,"nme.display.Stage","onWindowClose",0xe0046fa5,"nme.display.Stage.onWindowClose","nme/display/Stage.hx",725,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_731_onDrop,"nme.display.Stage","onDrop",0x7ecf9892,"nme.display.Stage.onDrop","nme/display/Stage.hx",731,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_768_onDpiChanged,"nme.display.Stage","onDpiChanged",0xe577b7ba,"nme.display.Stage.onDpiChanged","nme/display/Stage.hx",768,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_773_onActive,"nme.display.Stage","onActive",0xb188c0e9,"nme.display.Stage.onActive","nme/display/Stage.hx",773,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_788_onWindowMoved,"nme.display.Stage","onWindowMoved",0xa4072420,"nme.display.Stage.onWindowMoved","nme/display/Stage.hx",788,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_793_onWindowEnter,"nme.display.Stage","onWindowEnter",0x0827c505,"nme.display.Stage.onWindowEnter","nme/display/Stage.hx",793,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_798_onWindowLeave,"nme.display.Stage","onWindowLeave",0x09f48ce4,"nme.display.Stage.onWindowLeave","nme/display/Stage.hx",798,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_803_axismap,"nme.display.Stage","axismap",0x7eb62077,"nme.display.Stage.axismap","nme/display/Stage.hx",803,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_815_buttonmap,"nme.display.Stage","buttonmap",0xb75cf2c6,"nme.display.Stage.buttonmap","nme/display/Stage.hx",815,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_831_onJoystick,"nme.display.Stage","onJoystick",0x6c2cae9f,"nme.display.Stage.onJoystick","nme/display/Stage.hx",831,0x3f854bb6)
static const Float _hx_array_data_df227c4a_39[] = {
	0.0,0.0,0.0,0.0,0.0,0.0,
};
static const Float _hx_array_data_df227c4a_40[] = {
	0.0,0.0,0.0,0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_914_onSysMessage,"nme.display.Stage","onSysMessage",0x9d8e68dd,"nme.display.Stage.onSysMessage","nme/display/Stage.hx",914,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_920_onAppLink,"nme.display.Stage","onAppLink",0x77f464b8,"nme.display.Stage.onAppLink","nme/display/Stage.hx",920,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_927_onContextLost,"nme.display.Stage","onContextLost",0xcb8a5170,"nme.display.Stage.onContextLost","nme/display/Stage.hx",927,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_937_nmeDrag,"nme.display.Stage","nmeDrag",0xc8b8a236,"nme.display.Stage.nmeDrag","nme/display/Stage.hx",937,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_976_set_opaqueBackground,"nme.display.Stage","set_opaqueBackground",0x3edbc350,"nme.display.Stage.set_opaqueBackground","nme/display/Stage.hx",976,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_987_set_color,"nme.display.Stage","set_color",0xd898c0a2,"nme.display.Stage.set_color","nme/display/Stage.hx",987,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_994_get_color,"nme.display.Stage","get_color",0xf547d496,"nme.display.Stage.get_color","nme/display/Stage.hx",994,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1001_get_current,"nme.display.Stage","get_current",0x92d4722c,"nme.display.Stage.get_current","nme/display/Stage.hx",1001,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1010_get_captureMouse,"nme.display.Stage","get_captureMouse",0xe124c8ec,"nme.display.Stage.get_captureMouse","nme/display/Stage.hx",1010,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1011_set_captureMouse,"nme.display.Stage","set_captureMouse",0x3766b660,"nme.display.Stage.set_captureMouse","nme/display/Stage.hx",1011,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1016_nmeOnTouch,"nme.display.Stage","nmeOnTouch",0x6bf6151e,"nme.display.Stage.nmeOnTouch","nme/display/Stage.hx",1016,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1058_onPoll,"nme.display.Stage","onPoll",0x86bbdea2,"nme.display.Stage.onPoll","nme/display/Stage.hx",1058,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1065_getNextWake,"nme.display.Stage","getNextWake",0x61a93b49,"nme.display.Stage.getNextWake","nme/display/Stage.hx",1065,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1082_nmeStartDrag,"nme.display.Stage","nmeStartDrag",0x303d3ff4,"nme.display.Stage.nmeStartDrag","nme/display/Stage.hx",1082,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1107_nmeStopDrag,"nme.display.Stage","nmeStopDrag",0x28583058,"nme.display.Stage.nmeStopDrag","nme/display/Stage.hx",1107,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1113_setPreemtiveGcFrequency,"nme.display.Stage","setPreemtiveGcFrequency",0xb518050f,"nme.display.Stage.setPreemtiveGcFrequency","nme/display/Stage.hx",1113,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1125_setPreemtiveGcFrequency,"nme.display.Stage","setPreemtiveGcFrequency",0xb518050f,"nme.display.Stage.setPreemtiveGcFrequency","nme/display/Stage.hx",1125,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1136_setSmartPreemtiveGc,"nme.display.Stage","setSmartPreemtiveGc",0xcc4d6ec0,"nme.display.Stage.setSmartPreemtiveGc","nme/display/Stage.hx",1136,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1150_showCursor,"nme.display.Stage","showCursor",0x9ae12d57,"nme.display.Stage.showCursor","nme/display/Stage.hx",1150,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1155_get_focus,"nme.display.Stage","get_focus",0xaf74c30b,"nme.display.Stage.get_focus","nme/display/Stage.hx",1155,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1162_set_focus,"nme.display.Stage","set_focus",0x92c5af17,"nme.display.Stage.set_focus","nme/display/Stage.hx",1162,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1171_set_frameRate,"nme.display.Stage","set_frameRate",0x83736c6c,"nme.display.Stage.set_frameRate","nme/display/Stage.hx",1171,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1178_get_frameRate,"nme.display.Stage","get_frameRate",0x3e6d8a60,"nme.display.Stage.get_frameRate","nme/display/Stage.hx",1178,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1183_get_stage,"nme.display.Stage","get_stage",0x2ef6cdf1,"nme.display.Stage.get_stage","nme/display/Stage.hx",1183,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1187_get_safeRect,"nme.display.Stage","get_safeRect",0xe5757fbe,"nme.display.Stage.get_safeRect","nme/display/Stage.hx",1187,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1197_setMouseFilter,"nme.display.Stage","setMouseFilter",0x46a72adf,"nme.display.Stage.setMouseFilter","nme/display/Stage.hx",1197,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1202_resize,"nme.display.Stage","resize",0xa250b198,"nme.display.Stage.resize","nme/display/Stage.hx",1202,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1204_get_stageFocusRect,"nme.display.Stage","get_stageFocusRect",0xaf67f0eb,"nme.display.Stage.get_stageFocusRect","nme/display/Stage.hx",1204,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1206_set_stageFocusRect,"nme.display.Stage","set_stageFocusRect",0x8c17235f,"nme.display.Stage.set_stageFocusRect","nme/display/Stage.hx",1206,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1210_get_active,"nme.display.Stage","get_active",0xf951ab33,"nme.display.Stage.get_active","nme/display/Stage.hx",1210,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1211_get_align,"nme.display.Stage","get_align",0xcc7cb9f8,"nme.display.Stage.get_align","nme/display/Stage.hx",1211,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1212_set_align,"nme.display.Stage","set_align",0xafcda604,"nme.display.Stage.set_align","nme/display/Stage.hx",1212,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1213_get_displayState,"nme.display.Stage","get_displayState",0xd008059c,"nme.display.Stage.get_displayState","nme/display/Stage.hx",1213,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1214_set_displayState,"nme.display.Stage","set_displayState",0x2649f310,"nme.display.Stage.set_displayState","nme/display/Stage.hx",1214,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1215_get_dpiScale,"nme.display.Stage","get_dpiScale",0xdc58089a,"nme.display.Stage.get_dpiScale","nme/display/Stage.hx",1215,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1216_get_quality,"nme.display.Stage","get_quality",0x0b3cdab2,"nme.display.Stage.get_quality","nme/display/Stage.hx",1216,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1217_set_quality,"nme.display.Stage","set_quality",0x15a9e1be,"nme.display.Stage.set_quality","nme/display/Stage.hx",1217,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1218_get_scaleMode,"nme.display.Stage","get_scaleMode",0x311c53c0,"nme.display.Stage.get_scaleMode","nme/display/Stage.hx",1218,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1219_set_scaleMode,"nme.display.Stage","set_scaleMode",0x762235cc,"nme.display.Stage.set_scaleMode","nme/display/Stage.hx",1219,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1220_get_stageHeight,"nme.display.Stage","get_stageHeight",0xd823d4b8,"nme.display.Stage.get_stageHeight","nme/display/Stage.hx",1220,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1221_get_stageWidth,"nme.display.Stage","get_stageWidth",0xb7d42e55,"nme.display.Stage.get_stageWidth","nme/display/Stage.hx",1221,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1222_get_isOpenGL,"nme.display.Stage","get_isOpenGL",0xc5c842a6,"nme.display.Stage.get_isOpenGL","nme/display/Stage.hx",1222,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1223_get_renderRequest,"nme.display.Stage","get_renderRequest",0xb010a0cc,"nme.display.Stage.get_renderRequest","nme/display/Stage.hx",1223,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1224_set_renderRequest,"nme.display.Stage","set_renderRequest",0xd37e78d8,"nme.display.Stage.set_renderRequest","nme/display/Stage.hx",1224,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_227___default_getOrientation,"nme.display.Stage","__default_getOrientation",0x93636e9c,"nme.display.Stage.__default_getOrientation","nme/display/Stage.hx",227,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_232___default_getNormalOrientation,"nme.display.Stage","__default_getNormalOrientation",0xeccb68b5,"nme.display.Stage.__default_getNormalOrientation","nme/display/Stage.hx",232,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1141_setFixedOrientation,"nme.display.Stage","setFixedOrientation",0x89bae75a,"nme.display.Stage.setFixedOrientation","nme/display/Stage.hx",1141,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_1146___default_shouldRotateInterface,"nme.display.Stage","__default_shouldRotateInterface",0x2e110869,"nme.display.Stage.__default_shouldRotateInterface","nme/display/Stage.hx",1146,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_63_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",63,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_65_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",65,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_66_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",66,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_67_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",67,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_68_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",68,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_69_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",69,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_70_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",70,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_73_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",73,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_74_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",74,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_75_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",75,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_77_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",77,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_110_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",110,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_117_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",117,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_118_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",118,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_119_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",119,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_120_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",120,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_121_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",121,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_122_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",122,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_123_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",123,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_124_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",124,0x3f854bb6)
static const ::String _hx_array_data_df227c4a_110[] = {
	HX_("mouseOut",69,e7,1d,a4),HX_("mouseOver",19,4a,0d,f6),HX_("rollOut",11,f9,11,5d),HX_("rollOver",71,ab,a8,12),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_125_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",125,0x3f854bb6)
static const ::String _hx_array_data_df227c4a_112[] = {
	HX_("touchOut",0f,62,11,00),HX_("touchOver",b3,20,25,0f),HX_("touchRollOut",12,0f,74,87),HX_("touchRollOver",50,d6,19,fe),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_126_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",126,0x3f854bb6)
static const ::String _hx_array_data_df227c4a_114[] = {
	HX_("click",48,7c,5e,48),HX_("middleClick",b3,e4,e5,43),HX_("rightClick",cc,62,23,4b),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_127_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",127,0x3f854bb6)
static const ::String _hx_array_data_df227c4a_116[] = {
	HX_("mouseDown",27,b1,c2,ee),HX_("middleMouseDown",12,2b,fe,01),HX_("rightMouseDown",ab,29,d7,cd),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_128_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",128,0x3f854bb6)
static const ::String _hx_array_data_df227c4a_118[] = {
	HX_("mouseUp",e0,f3,72,c0),HX_("middleMouseUp",0b,8d,f5,3a),HX_("rightMouseUp",64,83,21,ab),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b38ee1e8d562c8_130_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/display/Stage.hx",130,0x3f854bb6)
HX_LOCAL_STACK_FRAME(_hx_pos_e1d35cef0b3a7c0f_9_boot,"nme.display.Stage","boot",0x9a4eead6,"nme.display.Stage.boot","nme/PrimeLoader.hx",9,0xcf416155)
namespace nme{
namespace display{

void Stage_obj::__construct( ::nme::app::Window inWindow){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_164_new)
HXLINE( 169)		this->nmeEnterFrameEvent =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("enterFrame",f5,03,50,02),null(),null());
HXLINE( 170)		this->nmeRenderEvent =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("render",56,6b,29,05),null(),null());
HXLINE( 172)		this->nmeIsMainStage = ::nme::display::Stage_obj::firstStage;
HXLINE( 173)		::nme::display::Stage_obj::firstStage = false;
HXLINE( 174)		this->window = inWindow;
HXLINE( 175)		this->invalid = false;
HXLINE( 176)		super::__construct(this->window->nmeStageHandle,HX_("Stage",9e,da,38,17));
HXLINE( 178)		this->nmeMouseOverObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 179)		this->nmeFocusOverObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 180)		this->pauseWhenDeactivated = true;
HXLINE( 182)		this->window->stage = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 183)		if (::hx::IsNull( this->window->appEventHandler )) {
HXLINE( 185)			if (this->nmeIsMainStage) {
HXLINE( 186)				::nme::app::Application_obj::addPollClient(::hx::ObjectPtr<OBJ_>(this),null());
            			}
HXLINE( 187)			this->window->appEventHandler = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 188)			this->nmeFrameTimer =  ::nme::app::FrameTimer_obj::__alloc( HX_CTX ,this->window,::nme::app::Application_obj::initFrameRate);
            		}
HXLINE( 190)		if (!(this->nmeIsMainStage)) {
HXLINE( 191)			this->onCloseRequest = this->window->close_dyn();
            		}
HXLINE( 193)		this->nmeLastRender = ( (Float)(0) );
HXLINE( 194)		this->nmeLastDown = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 195)		this->nmeLastClickTime = ((Float)0.0);
HXLINE( 196)		this->nmeTouchInfo =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 197)		this->nmeJoyAxisData = ::Array_obj< ::Dynamic>::__new();
HXLINE( 203)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 203)		_hx_array_set_size_exact(this1,1);
HXDLIN( 203)		this->stageVideos = this1;
HXLINE( 204)		this->stageVideos[0] =  ::nme::media::StageVideo_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 207)		this->nmePreemptiveGcFreq = 0;
HXLINE( 208)		this->nmePreemptiveGcSince = 0;
HXLINE( 209)		this->nmeLastCurrentMemory = 0;
HXLINE( 210)		this->nmeLastPreempt = false;
HXLINE( 211)		this->nmeFrameMemIndex = 0;
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		if (inClassId<=(int)0x0ff07575) {
			if (inClassId<=(int)0x048b25c1) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x048b25c1;
			} else {
				return inClassId==(int)0x0ff07575;
			}
		} else {
			return inClassId==(int)0x169017a6;
		}
	} else {
		return inClassId==(int)0x5b647d22 || inClassId==(int)0x5e732244;
	}
}

static ::nme::app::IPollClient_obj _hx_nme_display_Stage__hx_nme_app_IPollClient= {
	( void (::hx::Object::*)(Float))&::nme::display::Stage_obj::onPoll,
	( Float (::hx::Object::*)(Float,Float))&::nme::display::Stage_obj::getNextWake,
};

static ::nme::app::IAppEventHandler_obj _hx_nme_display_Stage__hx_nme_app_IAppEventHandler= {
	( void (::hx::Object::*)(bool))&::nme::display::Stage_obj::onRender,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >,::String))&::nme::display::Stage_obj::onText,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >,::String))&::nme::display::Stage_obj::onKey,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >,::String,bool))&::nme::display::Stage_obj::onMouse,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >,::String))&::nme::display::Stage_obj::onTouch,
	( void (::hx::Object::*)(int,int))&::nme::display::Stage_obj::onResize,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onDisplayObjectFocus,
	( void (::hx::Object::*)(bool))&::nme::display::Stage_obj::onInputFocus,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onChange,
	( void (::hx::Object::*)(bool))&::nme::display::Stage_obj::onActive,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >,::String))&::nme::display::Stage_obj::onJoystick,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onSysMessage,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onAppLink,
	( void (::hx::Object::*)())&::nme::display::Stage_obj::onContextLost,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onScroll,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onDpiChanged,
	( void (::hx::Object::*)(::cpp::Pointer<  nme::Event >))&::nme::display::Stage_obj::onDrop,
	( void (::hx::Object::*)( ::Dynamic,::Array< ::Dynamic>))&::nme::display::Stage_obj::onUnhandledException,
	( void (::hx::Object::*)())&::nme::display::Stage_obj::onWindowClose,
	( void (::hx::Object::*)(int,int))&::nme::display::Stage_obj::onWindowMoved,
	( void (::hx::Object::*)())&::nme::display::Stage_obj::onWindowLeave,
	( void (::hx::Object::*)())&::nme::display::Stage_obj::onWindowEnter,
};

void *Stage_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x83491b18: return &_hx_nme_display_Stage__hx_nme_app_IPollClient;
		case (int)0x00a6b123: return &_hx_nme_display_Stage__hx_nme_app_IAppEventHandler;
	}
	return super::_hx_getInterface(inHash);
}

void Stage_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_216_dispose)
HXLINE( 217)		if (::hx::IsNotNull( this->nmeFrameTimer )) {
HXLINE( 219)			this->nmeFrameTimer->destory();
HXLINE( 220)			this->nmeFrameTimer = null();
            		}
HXLINE( 222)		this->super::dispose();
            	}


void Stage_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_236_invalidate)
HXLINE( 237)		this->invalid = true;
HXLINE( 238)		if (::hx::IsNotNull( this->nmeFrameTimer )) {
HXLINE( 239)			this->nmeFrameTimer->invalidate();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,invalidate,(void))

bool Stage_obj::isDisplayListDirty(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_243_isDisplayListDirty)
HXLINE( 244)		bool result = ::nme::display::Stage_obj::nme_stage_check_cache(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 245)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,isDisplayListDirty,return )

 ::Dynamic Stage_obj::get_onQuit(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_248_get_onQuit)
HXDLIN( 248)		return ::nme::app::Application_obj::onQuit;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_onQuit,return )

 ::Dynamic Stage_obj::set_onQuit( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_249_set_onQuit)
HXDLIN( 249)		::nme::app::Application_obj::onQuit = val;
HXDLIN( 249)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_onQuit,return )

void Stage_obj::addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  __o_useCapture,::hx::Null< int >  __o_priority,::hx::Null< bool >  __o_useWeakReference){
            		bool useCapture = __o_useCapture.Default(false);
            		int priority = __o_priority.Default(0);
            		bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_252_addEventListener)
HXLINE( 253)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
HXLINE( 254)		if ((type == HX_("stageVideoAvailability",58,09,7a,7e))) {
HXLINE( 255)			this->dispatchEvent( ::nme::events::StageVideoAvailabilityEvent_obj::__alloc( HX_CTX ,HX_("stageVideoAvailability",58,09,7a,7e),false,false,HX_("available",c9,59,83,77)));
            		}
            	}


void Stage_obj::nmeCheckFocusInOuts(::cpp::Pointer<  nme::Event > inEvent,::Array< ::Dynamic> inStack){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_259_nmeCheckFocusInOuts)
HXLINE( 261)		int new_n = inStack->length;
HXLINE( 262)		 ::nme::display::InteractiveObject new_obj;
HXDLIN( 262)		if ((new_n > 0)) {
HXLINE( 262)			new_obj = inStack->__get((new_n - 1)).StaticCast<  ::nme::display::InteractiveObject >();
            		}
            		else {
HXLINE( 262)			new_obj = null();
            		}
HXLINE( 263)		int old_n = this->nmeFocusOverObjects->length;
HXLINE( 264)		 ::nme::display::InteractiveObject old_obj;
HXDLIN( 264)		if ((old_n > 0)) {
HXLINE( 264)			old_obj = this->nmeFocusOverObjects->__get((old_n - 1)).StaticCast<  ::nme::display::InteractiveObject >();
            		}
            		else {
HXLINE( 264)			old_obj = null();
            		}
HXLINE( 266)		if (::hx::IsInstanceNotEq( new_obj,old_obj )) {
HXLINE( 268)			if (::hx::IsNotNull( old_obj )) {
HXLINE( 270)				bool focusOut = (inEvent->get_ref().flags > 0);
HXDLIN( 270)				 ::nme::events::FocusEvent focusOut1 =  ::nme::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusOut",96,6f,5e,11),true,false,new_obj,focusOut,inEvent->get_ref().code,null());
HXLINE( 271)				focusOut1->set_target(old_obj);
HXLINE( 272)				old_obj->nmeFireEvent(focusOut1);
            			}
HXLINE( 275)			if (::hx::IsNotNull( new_obj )) {
HXLINE( 277)				bool focusIn = (inEvent->get_ref().flags > 0);
HXDLIN( 277)				 ::nme::events::FocusEvent focusIn1 =  ::nme::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusIn",dd,45,83,41),true,false,old_obj,focusIn,inEvent->get_ref().code,null());
HXLINE( 279)				focusIn1->set_target(new_obj);
HXLINE( 280)				new_obj->nmeFireEvent(focusIn1);
            			}
HXLINE( 283)			this->nmeFocusOverObjects = inStack;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,nmeCheckFocusInOuts,(void))

bool Stage_obj::nmeCheckInOuts( ::nme::events::MouseEvent inEvent,::Array< ::Dynamic> inStack, ::nme::display::TouchInfo touchInfo){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_288_nmeCheckInOuts)
HXLINE( 289)		::Array< ::Dynamic> prev;
HXDLIN( 289)		if (::hx::IsNull( touchInfo )) {
HXLINE( 289)			prev = this->nmeMouseOverObjects;
            		}
            		else {
HXLINE( 289)			prev = touchInfo->touchOverObjects;
            		}
HXLINE( 290)		::Array< ::String > events;
HXDLIN( 290)		if (::hx::IsNull( touchInfo )) {
HXLINE( 290)			events = ::nme::display::Stage_obj::nmeMouseChanges;
            		}
            		else {
HXLINE( 290)			events = ::nme::display::Stage_obj::nmeTouchChanges;
            		}
HXLINE( 292)		int new_n = inStack->length;
HXLINE( 293)		 ::nme::display::InteractiveObject new_obj;
HXDLIN( 293)		if ((new_n > 0)) {
HXLINE( 293)			new_obj = inStack->__get((new_n - 1)).StaticCast<  ::nme::display::InteractiveObject >();
            		}
            		else {
HXLINE( 293)			new_obj = null();
            		}
HXLINE( 294)		int old_n = prev->length;
HXLINE( 295)		 ::nme::display::InteractiveObject old_obj;
HXDLIN( 295)		if ((old_n > 0)) {
HXLINE( 295)			old_obj = prev->__get((old_n - 1)).StaticCast<  ::nme::display::InteractiveObject >();
            		}
            		else {
HXLINE( 295)			old_obj = null();
            		}
HXLINE( 297)		if (::hx::IsInstanceNotEq( new_obj,old_obj )) {
HXLINE( 300)			if (::hx::IsNotNull( old_obj )) {
HXLINE( 301)				old_obj->nmeFireEvent(inEvent->nmeCreateSimilar(events->__get(0),new_obj,old_obj));
            			}
HXLINE( 303)			if (::hx::IsNotNull( new_obj )) {
HXLINE( 304)				new_obj->nmeFireEvent(inEvent->nmeCreateSimilar(events->__get(1),old_obj,null()));
            			}
HXLINE( 307)			int common = 0;
HXLINE( 308)			while(true){
HXLINE( 308)				bool _hx_tmp;
HXDLIN( 308)				bool _hx_tmp1;
HXDLIN( 308)				if ((common < new_n)) {
HXLINE( 308)					_hx_tmp1 = (common < old_n);
            				}
            				else {
HXLINE( 308)					_hx_tmp1 = false;
            				}
HXDLIN( 308)				if (_hx_tmp1) {
HXLINE( 308)					_hx_tmp = ::hx::IsInstanceEq( inStack->__get(common).StaticCast<  ::nme::display::InteractiveObject >(),prev->__get(common).StaticCast<  ::nme::display::InteractiveObject >() );
            				}
            				else {
HXLINE( 308)					_hx_tmp = false;
            				}
HXDLIN( 308)				if (!(_hx_tmp)) {
HXLINE( 308)					goto _hx_goto_8;
            				}
HXLINE( 309)				common = (common + 1);
            			}
            			_hx_goto_8:;
HXLINE( 311)			 ::nme::events::MouseEvent rollOut = inEvent->nmeCreateSimilar(events->__get(2),new_obj,old_obj);
HXLINE( 312)			int i = (old_n - 1);
HXLINE( 313)			while((i >= common)){
HXLINE( 315)				prev->__get(i).StaticCast<  ::nme::display::InteractiveObject >()->nmeDispatchEvent(rollOut);
HXLINE( 316)				i = (i - 1);
            			}
HXLINE( 319)			 ::nme::events::MouseEvent rollOver = inEvent->nmeCreateSimilar(events->__get(3),old_obj,null());
HXLINE( 320)			int i1 = (new_n - 1);
HXLINE( 321)			while((i1 >= common)){
HXLINE( 323)				inStack->__get(i1).StaticCast<  ::nme::display::InteractiveObject >()->nmeDispatchEvent(rollOver);
HXLINE( 324)				i1 = (i1 - 1);
            			}
HXLINE( 327)			if (::hx::IsNull( touchInfo )) {
HXLINE( 328)				this->nmeMouseOverObjects = inStack;
            			}
            			else {
HXLINE( 330)				touchInfo->touchOverObjects = inStack;
            			}
HXLINE( 332)			return false;
            		}
HXLINE( 335)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,nmeCheckInOuts,return )

void Stage_obj::addPrerenderListener( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_340_addPrerenderListener)
HXDLIN( 340)		if (::hx::IsNull( this->nmePrenderListeners )) {
HXLINE( 341)			this->nmePrenderListeners = ::Array_obj< ::Dynamic>::__new(1)->init(0,listener);
            		}
            		else {
HXLINE( 343)			this->nmePrenderListeners->push(listener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,addPrerenderListener,(void))

void Stage_obj::removePrerenderListener( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_348_removePrerenderListener)
HXDLIN( 348)		bool _hx_tmp;
HXDLIN( 348)		bool _hx_tmp1;
HXDLIN( 348)		if (::hx::IsNotNull( this->nmePrenderListeners )) {
HXDLIN( 348)			_hx_tmp1 = this->nmePrenderListeners->remove(listener);
            		}
            		else {
HXDLIN( 348)			_hx_tmp1 = false;
            		}
HXDLIN( 348)		if (_hx_tmp1) {
HXDLIN( 348)			_hx_tmp = (this->nmePrenderListeners->length == 0);
            		}
            		else {
HXDLIN( 348)			_hx_tmp = false;
            		}
HXDLIN( 348)		if (_hx_tmp) {
HXLINE( 349)			this->nmePrenderListeners = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,removePrerenderListener,(void))

void Stage_obj::onText(::cpp::Pointer<  nme::Event > inEvent,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_356_onText)
HXLINE( 357)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 359)		bool _hx_tmp;
HXDLIN( 359)		if (::hx::IsNotNull( obj )) {
HXLINE( 359)			_hx_tmp = ::Std_obj::isOfType(obj,::hx::ClassOf< ::nme::text::TextField >());
            		}
            		else {
HXLINE( 359)			_hx_tmp = false;
            		}
HXDLIN( 359)		if (_hx_tmp) {
HXLINE( 361)			::String text = null();
HXLINE( 362)			if ((inEvent->get_ref().code > 0)) {
HXLINE( 365)				text = ::String::fromCharCode(inEvent->get_ref().code);
            			}
            			else {
HXLINE( 374)				text = (String(inEvent->get_ref().utf8Text,inEvent->get_ref().utf8Length).dup());
            			}
HXLINE( 376)			 ::nme::events::TextEvent evt =  ::nme::events::TextEvent_obj::__alloc( HX_CTX ,type,true,true,text);
HXLINE( 377)			evt->set_target(obj);
HXLINE( 378)			obj->nmeFireEvent(evt);
HXLINE( 380)			if (evt->nmeGetIsCancelled()) {
HXLINE( 381)				inEvent->get_ref().result = 1;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onText,(void))

void Stage_obj::onKey(::cpp::Pointer<  nme::Event > inEvent,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_386_onKey)
HXLINE( 387)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 388)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 390)		if (::hx::IsNotNull( obj )) {
HXLINE( 391)			obj->nmeGetInteractiveObjectStack(stack);
            		}
HXLINE( 393)		if ((stack->length > 0)) {
HXLINE( 395)			int value = inEvent->get_ref().value;
HXLINE( 400)			 ::nme::display::InteractiveObject obj1 = stack->__get(0).StaticCast<  ::nme::display::InteractiveObject >();
HXLINE( 401)			int flags = inEvent->get_ref().flags;
HXLINE( 402)			int evt = inEvent->get_ref().code;
HXLINE( 403)			int evt1;
HXDLIN( 403)			if (((flags & ::nme::display::Stage_obj::efLocationRight) == 0)) {
HXLINE( 403)				evt1 = 1;
            			}
            			else {
HXLINE( 403)				evt1 = 0;
            			}
HXLINE( 402)			 ::nme::events::KeyboardEvent evt2 =  ::nme::events::KeyboardEvent_obj::__alloc( HX_CTX ,type,true,true,evt,value,evt1,((flags & ::nme::display::Stage_obj::efCtrlDown) != 0),((flags & ::nme::display::Stage_obj::efAltDown) != 0),((flags & ::nme::display::Stage_obj::efShiftDown) != 0),((flags & ::nme::display::Stage_obj::efCtrlDown) != 0),((flags & ::nme::display::Stage_obj::efCommandDown) != 0));
HXLINE( 409)			obj1->nmeFireEvent(evt2);
HXLINE( 411)			if (evt2->nmeGetIsCancelled()) {
HXLINE( 412)				inEvent->get_ref().result = 1;
            			}
HXLINE( 415)			bool _hx_tmp;
HXDLIN( 415)			if ((inEvent->get_ref().result != -1)) {
HXLINE( 415)				_hx_tmp = (type == HX_("keyDown",a1,69,47,9c));
            			}
            			else {
HXLINE( 415)				_hx_tmp = false;
            			}
HXDLIN( 415)			if (_hx_tmp) {
HXLINE( 420)				bool _hx_tmp1;
HXDLIN( 420)				if (((flags & ::nme::display::Stage_obj::efAltDown) > 0)) {
HXLINE( 420)					_hx_tmp1 = (inEvent->get_ref().code == 13);
            				}
            				else {
HXLINE( 420)					_hx_tmp1 = false;
            				}
HXDLIN( 420)				if (_hx_tmp1) {
HXLINE( 423)					if (::hx::IsPointerEq( this->get_displayState(),::nme::display::StageDisplayState_obj::NORMAL_dyn() )) {
HXLINE( 424)						this->set_displayState(::nme::display::StageDisplayState_obj::FULL_SCREEN_INTERACTIVE_dyn());
            					}
            					else {
HXLINE( 426)						this->set_displayState(::nme::display::StageDisplayState_obj::NORMAL_dyn());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onKey,(void))

void Stage_obj::onMouse(::cpp::Pointer<  nme::Event > inEvent,::String inType,bool inFromMouse){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_434_onMouse)
HXLINE( 435)		::String type = inType;
HXLINE( 436)		int button = inEvent->get_ref().value;
HXLINE( 438)		if (!(inFromMouse)) {
HXLINE( 439)			button = 0;
            		}
HXLINE( 441)		int wheel = 0;
HXLINE( 443)		if ((inType == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 445)			if ((button > 2)) {
HXLINE( 446)				return;
            			}
HXLINE( 447)			type = ::nme::display::Stage_obj::sDownEvents->__get(button);
            		}
            		else {
HXLINE( 450)			if ((inType == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE( 452)				if ((button > 2)) {
HXLINE( 454)					type = HX_("mouseWheel",36,28,87,e7);
HXLINE( 455)					if ((button == 3)) {
HXLINE( 455)						wheel = 1;
            					}
            					else {
HXLINE( 455)						wheel = -1;
            					}
            				}
            				else {
HXLINE( 459)					type = ::nme::display::Stage_obj::sUpEvents->__get(button);
            				}
            			}
            		}
HXLINE( 462)		if (::hx::IsNotNull( this->nmeDragObject )) {
HXLINE( 463)			int _hx_tmp = inEvent->get_ref().x;
HXDLIN( 463)			this->nmeDrag( ::nme::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,inEvent->get_ref().y));
            		}
HXLINE( 465)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 466)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 468)		if (::hx::IsNotNull( obj )) {
HXLINE( 469)			obj->nmeGetInteractiveObjectStack(stack);
            		}
HXLINE( 471)		 ::nme::geom::Point local = null();
HXLINE( 472)		 ::nme::events::MouseEvent evt = null();
HXLINE( 473)		bool cancelClick = false;
HXLINE( 474)		if ((stack->length > 0)) {
HXLINE( 476)			 ::nme::display::InteractiveObject obj1 = stack->__get(0).StaticCast<  ::nme::display::InteractiveObject >();
HXLINE( 477)			stack->reverse();
HXLINE( 478)			int local1 = inEvent->get_ref().x;
HXDLIN( 478)			local = obj1->globalToLocal( ::nme::geom::Point_obj::__alloc( HX_CTX ,local1,inEvent->get_ref().y));
HXLINE( 479)			evt = ::nme::events::MouseEvent_obj::nmeCreate(type,inEvent,local,obj1);
HXLINE( 480)			evt->delta = wheel;
HXLINE( 481)			if (inFromMouse) {
HXLINE( 482)				this->nmeCheckInOuts(evt,stack,null());
            			}
HXLINE( 483)			obj1->nmeFireEvent(evt);
HXLINE( 484)			cancelClick = evt->cancelClick;
            		}
            		else {
HXLINE( 489)			int local2 = inEvent->get_ref().x;
HXDLIN( 489)			local =  ::nme::geom::Point_obj::__alloc( HX_CTX ,local2,inEvent->get_ref().y);
HXLINE( 490)			evt = ::nme::events::MouseEvent_obj::nmeCreate(type,inEvent,local,null());
HXLINE( 491)			evt->delta = wheel;
HXLINE( 492)			if (inFromMouse) {
HXLINE( 493)				this->nmeCheckInOuts(evt,stack,null());
            			}
            		}
HXLINE( 496)		 ::nme::display::InteractiveObject click_obj;
HXDLIN( 496)		if ((stack->length > 0)) {
HXLINE( 496)			click_obj = stack->__get((stack->length - 1)).StaticCast<  ::nme::display::InteractiveObject >();
            		}
            		else {
HXLINE( 496)			click_obj = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 497)		bool _hx_tmp1;
HXDLIN( 497)		if ((inType == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 497)			_hx_tmp1 = (button < 3);
            		}
            		else {
HXLINE( 497)			_hx_tmp1 = false;
            		}
HXDLIN( 497)		if (_hx_tmp1) {
HXLINE( 499)			 ::nme::display::InteractiveObject _hx_tmp2;
HXDLIN( 499)			if (evt->clickCancelled) {
HXLINE( 499)				_hx_tmp2 = null();
            			}
            			else {
HXLINE( 499)				_hx_tmp2 = click_obj;
            			}
HXDLIN( 499)			this->nmeLastDown[button] = _hx_tmp2;
            		}
            		else {
HXLINE( 501)			bool _hx_tmp3;
HXDLIN( 501)			if ((inType == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE( 501)				_hx_tmp3 = (button < 3);
            			}
            			else {
HXLINE( 501)				_hx_tmp3 = false;
            			}
HXDLIN( 501)			if (_hx_tmp3) {
HXLINE( 503)				bool _hx_tmp4;
HXDLIN( 503)				if (::hx::IsInstanceEq( click_obj,this->nmeLastDown->__get(button).StaticCast<  ::nme::display::InteractiveObject >() )) {
HXLINE( 503)					_hx_tmp4 = !(cancelClick);
            				}
            				else {
HXLINE( 503)					_hx_tmp4 = false;
            				}
HXDLIN( 503)				if (_hx_tmp4) {
HXLINE( 505)					 ::nme::events::MouseEvent evt1 = ::nme::events::MouseEvent_obj::nmeCreate(::nme::display::Stage_obj::sClickEvents->__get(button),inEvent,local,click_obj);
HXLINE( 506)					click_obj->nmeFireEvent(evt1);
HXLINE( 508)					bool _hx_tmp5;
HXDLIN( 508)					if ((button == 0)) {
HXLINE( 508)						_hx_tmp5 = click_obj->doubleClickEnabled;
            					}
            					else {
HXLINE( 508)						_hx_tmp5 = false;
            					}
HXDLIN( 508)					if (_hx_tmp5) {
HXLINE( 510)						Float now = inEvent->get_ref().pollTime;
HXLINE( 511)						if (((now - this->nmeLastClickTime) < ((Float)0.25))) {
HXLINE( 513)							 ::nme::events::MouseEvent evt2 = ::nme::events::MouseEvent_obj::nmeCreate(HX_("doubleClick",77,03,76,cd),inEvent,local,click_obj);
HXLINE( 514)							click_obj->nmeFireEvent(evt2);
            						}
HXLINE( 517)						this->nmeLastClickTime = now;
            					}
            				}
HXLINE( 521)				this->nmeLastDown[button] = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouse,(void))

void Stage_obj::onUnhandledException( ::Dynamic exception,::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_527_onUnhandledException)
HXDLIN( 527)		if (::hx::IsNotNull( this->exceptionHandler )) {
HXLINE( 528)			this->exceptionHandler(exception,stack);
            		}
            		else {
HXLINE( 531)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 531)			::String _hx_tmp1 = ((HX_("Exception: ",95,cc,ac,54) + ::Std_obj::string(exception)) + HX_("\n",0a,00,00,00));
HXDLIN( 531)			::String _hx_tmp2 = (_hx_tmp1 + ::haxe::_CallStack::CallStack_Impl__obj::toString(stack));
HXDLIN( 531)			_hx_tmp(_hx_tmp2,::hx::SourceInfo(HX_("nme/display/Stage.hx",b6,4b,85,3f),531,HX_("nme.display.Stage",4a,7c,22,df),HX_("onUnhandledException",4b,0a,ce,d2)));
HXLINE( 532)			::haxe::Log_obj::trace(HX_("\n\n\n===Terminating===\n.",56,fa,3c,80),::hx::SourceInfo(HX_("nme/display/Stage.hx",b6,4b,85,3f),532,HX_("nme.display.Stage",4a,7c,22,df),HX_("onUnhandledException",4b,0a,ce,d2)));
HXLINE( 533)			HX_STACK_DO_THROW((HX_("Unhandled exception:",a8,2b,da,98) + ::Std_obj::string(exception)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onUnhandledException,(void))

void Stage_obj::onTouch(::cpp::Pointer<  nme::Event > inEvent,::String inType){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_539_onTouch)
HXLINE( 540)		if ((inType == HX_("touchTap",e4,1b,15,00))) {
HXLINE( 541)			return;
            		}
HXLINE( 543)		if ((inType == HX_("touchBegin",ea,cd,e6,a9))) {
HXLINE( 545)			 ::nme::display::TouchInfo touchInfo =  ::nme::display::TouchInfo_obj::__alloc( HX_CTX );
HXLINE( 546)			{
HXLINE( 546)				::Dynamic this1 = this->nmeTouchInfo;
HXDLIN( 546)				( ( ::haxe::ds::IntMap)(this1) )->set(inEvent->get_ref().value,touchInfo);
            			}
HXLINE( 547)			this->nmeOnTouch(inEvent,HX_("touchBegin",ea,cd,e6,a9),touchInfo);
HXLINE( 548)			return;
            		}
HXLINE( 551)		::Dynamic this2 = this->nmeTouchInfo;
HXDLIN( 551)		 ::nme::display::TouchInfo touchInfo1 = ( ( ::nme::display::TouchInfo)(( ( ::haxe::ds::IntMap)(this2) )->get(inEvent->get_ref().value)) );
HXLINE( 552)		this->nmeOnTouch(inEvent,inType,touchInfo1);
HXLINE( 554)		if ((inType == HX_("touchEnd",5c,c5,09,00))) {
HXLINE( 555)			::Dynamic this3 = this->nmeTouchInfo;
HXDLIN( 555)			( ( ::haxe::ds::IntMap)(this3) )->remove(inEvent->get_ref().value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onTouch,(void))

void Stage_obj::onResize(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_559_onResize)
HXLINE( 560)		 ::nme::events::Event evt =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),null(),null());
HXLINE( 561)		this->nmeDispatchEvent(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onResize,(void))

void Stage_obj::onRender(bool inFrameDue){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_565_onRender)
HXLINE( 571)		if (inFrameDue) {
HXLINE( 572)			this->nmeBroadcast(this->nmeEnterFrameEvent);
            		}
HXLINE( 574)		if (this->invalid) {
HXLINE( 576)			this->invalid = false;
HXLINE( 577)			this->nmeBroadcast(this->nmeRenderEvent);
            		}
HXLINE( 580)		if (::hx::IsNotNull( this->nmePrenderListeners )) {
HXLINE( 581)			int _g = 0;
HXDLIN( 581)			::Array< ::Dynamic> _g1 = this->nmePrenderListeners;
HXDLIN( 581)			while((_g < _g1->length)){
HXLINE( 581)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 581)				_g = (_g + 1);
HXLINE( 582)				listener();
            			}
            		}
HXLINE( 585)		bool rendered = false;
HXLINE( 586)		bool _hx_tmp;
HXDLIN( 586)		if (::hx::IsNotNull( this->nmeCollectionAgency )) {
HXLINE( 586)			_hx_tmp = (this->nmePreemptiveGcFreq != 0);
            		}
            		else {
HXLINE( 586)			_hx_tmp = false;
            		}
HXDLIN( 586)		if (_hx_tmp) {
HXLINE( 588)			this->nmePreemptiveGcSince++;
HXLINE( 589)			bool preempt = (this->nmePreemptiveGcSince >= this->nmePreemptiveGcFreq);
HXLINE( 593)			if ((this->nmePreemptiveGcFreq < 0)) {
HXLINE( 595)				if (::hx::IsNull( this->nmeFrameAlloc )) {
HXLINE( 596)					this->nmeFrameAlloc = ::Array_obj< int >::__new(0);
            				}
HXLINE( 598)				int current = ::cpp::vm::Gc_obj::memInfo(2);
HXLINE( 599)				if ((this->nmeLastCurrentMemory > 0)) {
HXLINE( 601)					int frameAlloc = (current - this->nmeLastCurrentMemory);
HXLINE( 602)					if ((frameAlloc >= 0)) {
HXLINE( 604)						this->nmeFrameAlloc[this->nmeFrameMemIndex++] = frameAlloc;
HXLINE( 605)						if ((this->nmeFrameMemIndex > 10)) {
HXLINE( 606)							this->nmeFrameMemIndex = 0;
            						}
            					}
            					else {
HXLINE( 608)						bool _hx_tmp1 = !(this->nmeLastPreempt);
            					}
            				}
HXLINE( 613)				this->nmeLastCurrentMemory = current;
HXLINE( 615)				if ((this->nmeFrameAlloc->length > 0)) {
HXLINE( 617)					int sum = 0;
HXLINE( 618)					{
HXLINE( 618)						int _g2 = 0;
HXDLIN( 618)						::Array< int > _g3 = this->nmeFrameAlloc;
HXDLIN( 618)						while((_g2 < _g3->length)){
HXLINE( 618)							int f = _g3->__get(_g2);
HXDLIN( 618)							_g2 = (_g2 + 1);
HXLINE( 619)							sum = (sum + f);
            						}
            					}
HXLINE( 621)					int reserved = ::cpp::vm::Gc_obj::memInfo(1);
HXLINE( 622)					preempt = ((((( (Float)(sum) ) * ((Float)1.2)) / ( (Float)(this->nmeFrameAlloc->length) )) + current) > reserved);
            				}
            				else {
HXLINE( 625)					preempt = false;
            				}
            			}
HXLINE( 629)			this->nmeLastPreempt = preempt;
HXLINE( 630)			if (preempt) {
HXLINE( 633)				this->nmePreemptiveGcSince = 0;
HXLINE( 634)				rendered = true;
HXLINE( 635)				::nme::display::Stage_obj::nme_set_render_gc_free(true);
HXLINE( 636)				__hxcpp_enter_gc_free_zone();
HXLINE( 637)				this->nmeCollectionLock->release();
HXLINE( 642)				::nme::display::Stage_obj::nme_render_stage(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 647)				__hxcpp_exit_gc_free_zone();
HXLINE( 648)				::nme::display::Stage_obj::nme_set_render_gc_free(false);
            			}
            		}
HXLINE( 655)		if (!(rendered)) {
HXLINE( 662)			::nme::display::Stage_obj::nme_render_stage(::hx::DynamicPtr(this->nmeHandle));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onRender,(void))

void Stage_obj::onDisplayObjectFocus(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_671_onDisplayObjectFocus)
HXLINE( 672)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 673)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 675)		if (::hx::IsNotNull( obj )) {
HXLINE( 676)			obj->nmeGetInteractiveObjectStack(stack);
            		}
HXLINE( 678)		bool _hx_tmp;
HXDLIN( 678)		if ((stack->length > 0)) {
HXLINE( 678)			if ((inEvent->get_ref().value != 1)) {
HXLINE( 678)				_hx_tmp = (inEvent->get_ref().value == 2);
            			}
            			else {
HXLINE( 678)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 678)			_hx_tmp = false;
            		}
HXDLIN( 678)		if (_hx_tmp) {
HXLINE( 680)			 ::nme::display::InteractiveObject obj1 = stack->__get(0).StaticCast<  ::nme::display::InteractiveObject >();
HXLINE( 682)			::String evt;
HXDLIN( 682)			if ((inEvent->get_ref().value == 1)) {
HXLINE( 682)				evt = HX_("mouseFocusChange",43,f1,81,96);
            			}
            			else {
HXLINE( 682)				evt = HX_("keyFocusChange",09,9c,8e,e5);
            			}
HXLINE( 683)			 ::nme::display::InteractiveObject evt1;
HXDLIN( 683)			if ((this->nmeFocusOverObjects->length == 0)) {
HXLINE( 683)				evt1 = null();
            			}
            			else {
HXLINE( 683)				evt1 = this->nmeFocusOverObjects->__get(0).StaticCast<  ::nme::display::InteractiveObject >();
            			}
HXLINE( 684)			bool evt2 = (inEvent->get_ref().flags > 0);
HXLINE( 681)			 ::nme::events::FocusEvent evt3 =  ::nme::events::FocusEvent_obj::__alloc( HX_CTX ,evt,true,true,evt1,evt2,inEvent->get_ref().code,null());
HXLINE( 685)			obj1->nmeFireEvent(evt3);
HXLINE( 687)			if (evt3->nmeGetIsCancelled()) {
HXLINE( 689)				inEvent->get_ref().result = 1;
HXLINE( 690)				return;
            			}
            		}
HXLINE( 693)		stack->reverse();
HXLINE( 695)		this->nmeCheckFocusInOuts(inEvent,stack);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onDisplayObjectFocus,(void))

void Stage_obj::onInputFocus(bool acquired){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_699_onInputFocus)
HXLINE( 700)		::String evt;
HXDLIN( 700)		if (acquired) {
HXLINE( 700)			evt = HX_("focusIn",dd,45,83,41);
            		}
            		else {
HXLINE( 700)			evt = HX_("focusOut",96,6f,5e,11);
            		}
HXDLIN( 700)		 ::nme::events::Event evt1 =  ::nme::events::Event_obj::__alloc( HX_CTX ,evt,null(),null());
HXLINE( 701)		this->nmeDispatchEvent(evt1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onInputFocus,(void))

bool Stage_obj::onRotateRequest(int inDirection){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_706_onRotateRequest)
HXDLIN( 706)		return ( (bool)(::nme::display::Stage_obj::shouldRotateInterface(inDirection)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onRotateRequest,return )

void Stage_obj::onChange(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_710_onChange)
HXLINE( 711)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 712)		if (::hx::IsNotNull( obj )) {
HXLINE( 713)			obj->nmeFireEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onChange,(void))

void Stage_obj::onScroll(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_717_onScroll)
HXLINE( 718)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 719)		if (::hx::IsNotNull( obj )) {
HXLINE( 720)			obj->nmeFireEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onScroll,(void))

void Stage_obj::onWindowClose(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_725_onWindowClose)
HXDLIN( 725)		if (::hx::IsNotNull( this->onCloseRequest )) {
HXLINE( 726)			this->onCloseRequest();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onWindowClose,(void))

void Stage_obj::onDrop(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_731_onDrop)
HXDLIN( 731)		if ((inEvent->get_ref().type == 37)) {
HXLINE( 733)			this->nmeDropItems = ::Array_obj< ::String >::__new(0);
            		}
            		else {
HXLINE( 735)			if ((inEvent->get_ref().type == 39)) {
HXLINE( 737)				if (::hx::IsNotNull( this->nmeDropItems )) {
HXLINE( 739)					::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 740)					 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE( 742)					if (::hx::IsNotNull( obj )) {
HXLINE( 743)						obj->nmeGetInteractiveObjectStack(stack);
            					}
HXLINE( 745)					 ::nme::geom::Point local = null();
HXLINE( 746)					if ((stack->length > 0)) {
HXLINE( 748)						 ::nme::display::InteractiveObject obj1 = stack->__get(0).StaticCast<  ::nme::display::InteractiveObject >();
HXLINE( 749)						stack->reverse();
HXLINE( 750)						int local1 = inEvent->get_ref().x;
HXDLIN( 750)						local = obj1->globalToLocal( ::nme::geom::Point_obj::__alloc( HX_CTX ,local1,inEvent->get_ref().y));
HXLINE( 752)						 ::nme::events::DropEvent evt = ::nme::events::DropEvent_obj::nmeCreate(::nme::events::DropEvent_obj::DROP_FILES,inEvent,local,obj1,this->nmeDropItems);
HXLINE( 753)						evt->items = this->nmeDropItems;
HXLINE( 754)						obj1->nmeFireEvent(evt);
            					}
HXLINE( 756)					this->nmeDropItems = null();
            				}
            			}
            			else {
HXLINE( 759)				if ((inEvent->get_ref().type == 38)) {
HXLINE( 761)					if (::hx::IsNotNull( this->nmeDropItems )) {
HXLINE( 762)						::Array< ::String > _hx_tmp = this->nmeDropItems;
HXDLIN( 762)						_hx_tmp->push((String(inEvent->get_ref().utf8Text,inEvent->get_ref().utf8Length).dup()));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onDrop,(void))

void Stage_obj::onDpiChanged(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_768_onDpiChanged)
HXDLIN( 768)		this->nmeDispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("dpiChanged",17,6b,83,76),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onDpiChanged,(void))

void Stage_obj::onActive(bool inActive){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_773_onActive)
HXDLIN( 773)		if ((inActive != this->get_active())) {
HXLINE( 775)			this->window->active = inActive;
HXLINE( 776)			if (!(this->get_active())) {
HXLINE( 777)				this->nmeLastRender = ::haxe::Timer_obj::stamp();
            			}
HXLINE( 779)			::String evt;
HXDLIN( 779)			if (inActive) {
HXLINE( 779)				evt = HX_("activate",b3,1b,ac,e5);
            			}
            			else {
HXLINE( 779)				evt = HX_("deactivate",34,5c,01,3c);
            			}
HXDLIN( 779)			 ::nme::events::Event evt1 =  ::nme::events::Event_obj::__alloc( HX_CTX ,evt,null(),null());
HXLINE( 780)			this->nmeBroadcast(evt1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onActive,(void))

void Stage_obj::onWindowMoved(int inX,int inY){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_788_onWindowMoved)
HXDLIN( 788)		this->nmeBroadcast( ::nme::events::MoveEvent_obj::__alloc( HX_CTX ,::nme::events::MoveEvent_obj::WINDOW_MOVED,null(),null(),inX,inY));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onWindowMoved,(void))

void Stage_obj::onWindowEnter(){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_793_onWindowEnter)
HXDLIN( 793)		this->nmeBroadcast( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("mouseEnter",b3,60,53,8e),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onWindowEnter,(void))

void Stage_obj::onWindowLeave(){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_798_onWindowLeave)
HXDLIN( 798)		this->nmeBroadcast( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("mouseLeave",92,28,20,90),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onWindowLeave,(void))

int Stage_obj::axismap(int code){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_803_axismap)
HXLINE( 805)		switch((int)(code)){
            			case (int)2: {
HXLINE( 808)				code = 3;
            			}
            			break;
            			case (int)3: {
HXLINE( 807)				code = 4;
            			}
            			break;
            			case (int)4: {
HXLINE( 809)				code = 2;
            			}
            			break;
            		}
HXLINE( 812)		return code;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,axismap,return )

int Stage_obj::buttonmap(int code){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_815_buttonmap)
HXLINE( 817)		switch((int)(code)){
            			case (int)4: {
HXLINE( 820)				code = 6;
            			}
            			break;
            			case (int)6: {
HXLINE( 823)				code = 7;
            			}
            			break;
            			case (int)7: {
HXLINE( 824)				code = 8;
            			}
            			break;
            			case (int)8: {
HXLINE( 821)				code = 9;
            			}
            			break;
            			case (int)9: {
HXLINE( 819)				code = 4;
            			}
            			break;
            			case (int)10: {
HXLINE( 822)				code = 5;
            			}
            			break;
            		}
HXLINE( 827)		return code;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,buttonmap,return )

void Stage_obj::onJoystick(::cpp::Pointer<  nme::Event > inEvent,::String inType){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_831_onJoystick)
HXLINE( 832)		::Array< Float > data = null();
HXLINE( 833)		int user = inEvent->get_ref().value;
HXLINE( 834)		bool isGamePad = (inEvent->get_ref().y > 0);
HXLINE( 835)		if ((inEvent->get_ref().flags > 0)) {
HXLINE( 838)			if ((inEvent->get_ref().flags == 1)) {
HXLINE( 840)				if (::hx::IsNull( this->nmeJoyAxisData->__get(user).StaticCast< ::Array< Float > >() )) {
HXLINE( 841)					this->nmeJoyAxisData[user] = ::Array_obj< Float >::fromData( _hx_array_data_df227c4a_39,6);
            				}
HXLINE( 843)				data = this->nmeJoyAxisData->__get(user).StaticCast< ::Array< Float > >();
HXLINE( 844)				data[inEvent->get_ref().code] = inEvent->get_ref().scaleX;
HXLINE( 845)				data[(inEvent->get_ref().code + 1)] = inEvent->get_ref().scaleY;
            			}
            			else {
HXLINE( 847)				if ((inEvent->get_ref().flags == 3)) {
HXLINE( 850)					if (::hx::IsNull( this->nmeJoyAxisData->__get(user).StaticCast< ::Array< Float > >() )) {
HXLINE( 851)						this->nmeJoyAxisData[user] = ::Array_obj< Float >::fromData( _hx_array_data_df227c4a_40,6);
            					}
HXLINE( 853)					data = this->nmeJoyAxisData->__get(user).StaticCast< ::Array< Float > >();
HXLINE( 854)					int code = inEvent->get_ref().code;
HXDLIN( 854)					switch((int)(code)){
            						case (int)2: {
HXLINE( 854)							code = 3;
            						}
            						break;
            						case (int)3: {
HXLINE( 854)							code = 4;
            						}
            						break;
            						case (int)4: {
HXLINE( 854)							code = 2;
            						}
            						break;
            					}
HXDLIN( 854)					data[code] = inEvent->get_ref().scaleX;
HXLINE( 855)					int code1 = (inEvent->get_ref().code + 1);
HXDLIN( 855)					switch((int)(code1)){
            						case (int)2: {
HXLINE( 855)							code1 = 3;
            						}
            						break;
            						case (int)3: {
HXLINE( 855)							code1 = 4;
            						}
            						break;
            						case (int)4: {
HXLINE( 855)							code1 = 2;
            						}
            						break;
            					}
HXDLIN( 855)					data[code1] = inEvent->get_ref().scaleY;
            				}
            				else {
HXLINE( 857)					if ((inEvent->get_ref().flags == 2)) {
HXLINE( 859)						if (::hx::IsNotNull( this->nmeJoyAxisData->__get(user).StaticCast< ::Array< Float > >() )) {
HXLINE( 860)							int _g = 0;
HXDLIN( 860)							::Array< Float > _g1 = this->nmeJoyAxisData->__get(user).StaticCast< ::Array< Float > >();
HXDLIN( 860)							while((_g < _g1->length)){
HXLINE( 860)								Float d = _g1->__get(_g);
HXDLIN( 860)								_g = (_g + 1);
HXLINE( 861)								d = ((Float)0.0);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 865)		bool _hx_tmp;
HXDLIN( 865)		if (isGamePad) {
HXLINE( 865)			_hx_tmp = ::StringTools_obj::startsWith(inType,HX_("button",f2,61,e0,d9));
            		}
            		else {
HXLINE( 865)			_hx_tmp = false;
            		}
HXDLIN( 865)		if (_hx_tmp) {
HXLINE( 868)			int evt = inEvent->get_ref().id;
HXDLIN( 868)			int code2 = inEvent->get_ref().code;
HXDLIN( 868)			switch((int)(code2)){
            				case (int)4: {
HXLINE( 868)					code2 = 6;
            				}
            				break;
            				case (int)6: {
HXLINE( 868)					code2 = 7;
            				}
            				break;
            				case (int)7: {
HXLINE( 868)					code2 = 8;
            				}
            				break;
            				case (int)8: {
HXLINE( 868)					code2 = 9;
            				}
            				break;
            				case (int)9: {
HXLINE( 868)					code2 = 4;
            				}
            				break;
            				case (int)10: {
HXLINE( 868)					code2 = 5;
            				}
            				break;
            			}
HXLINE( 869)			int evt1 = inEvent->get_ref().value;
HXDLIN( 869)			Float evt2 = inEvent->get_ref().scaleX;
HXLINE( 868)			 ::nme::events::JoystickEvent evt3 =  ::nme::events::JoystickEvent_obj::__alloc( HX_CTX ,inType,false,false,evt,code2,evt1,evt2,inEvent->get_ref().scaleY,data,isGamePad);
HXLINE( 870)			this->nmeDispatchEvent(evt3);
            		}
            		else {
HXLINE( 875)			int evt4 = inEvent->get_ref().id;
HXDLIN( 875)			int evt5 = inEvent->get_ref().code;
HXLINE( 876)			int evt6 = inEvent->get_ref().value;
HXDLIN( 876)			Float evt7 = inEvent->get_ref().scaleX;
HXLINE( 875)			 ::nme::events::JoystickEvent evt8 =  ::nme::events::JoystickEvent_obj::__alloc( HX_CTX ,inType,false,false,evt4,evt5,evt6,evt7,inEvent->get_ref().scaleY,data,isGamePad);
HXLINE( 877)			this->nmeDispatchEvent(evt8);
            		}
HXLINE( 880)		if (::nme::ui::GameInput_obj::hasInstances()) {
HXLINE( 882)			if ((inType == HX_("deviceAdded",4a,08,84,0b))) {
HXLINE( 884)				::nme::ui::GameInput_obj::nmeGamepadConnect(user);
            			}
            			else {
HXLINE( 886)				if ((inType == HX_("deviceRemoved",aa,c9,5b,59))) {
HXLINE( 888)					::nme::ui::GameInput_obj::nmeGamepadDisconnect(user);
            				}
            				else {
HXLINE( 890)					if ((inType == HX_("axisMove",52,90,f4,8f))) {
HXLINE( 892)						int _hx_tmp1 = inEvent->get_ref().code;
HXDLIN( 892)						::nme::ui::GameInput_obj::nmeGamepadAxisMove(user,_hx_tmp1,inEvent->get_ref().scaleX);
HXLINE( 893)						int _hx_tmp2 = (inEvent->get_ref().code + 1);
HXDLIN( 893)						::nme::ui::GameInput_obj::nmeGamepadAxisMove(user,_hx_tmp2,inEvent->get_ref().scaleY);
            					}
            					else {
HXLINE( 895)						if ((inType == HX_("buttonDown",74,67,64,ac))) {
HXLINE( 897)							::nme::ui::GameInput_obj::nmeGamepadButton(user,inEvent->get_ref().code,1);
            						}
            						else {
HXLINE( 899)							if ((inType == HX_("buttonUp",ed,8c,32,5c))) {
HXLINE( 901)								::nme::ui::GameInput_obj::nmeGamepadButton(user,inEvent->get_ref().code,0);
            							}
            							else {
HXLINE( 903)								if ((inType == HX_("hatMove",0c,98,0b,ab))) {
HXLINE( 905)									int _hx_tmp3;
HXDLIN( 905)									if ((inEvent->get_ref().scaleY > ((Float)0.0))) {
HXLINE( 905)										_hx_tmp3 = 1;
            									}
            									else {
HXLINE( 905)										_hx_tmp3 = 0;
            									}
HXDLIN( 905)									::nme::ui::GameInput_obj::nmeGamepadButton(user,11,_hx_tmp3);
HXLINE( 906)									int _hx_tmp4;
HXDLIN( 906)									if ((inEvent->get_ref().scaleY < ((Float)0.0))) {
HXLINE( 906)										_hx_tmp4 = 1;
            									}
            									else {
HXLINE( 906)										_hx_tmp4 = 0;
            									}
HXDLIN( 906)									::nme::ui::GameInput_obj::nmeGamepadButton(user,12,_hx_tmp4);
HXLINE( 907)									int _hx_tmp5;
HXDLIN( 907)									if ((inEvent->get_ref().scaleX < ((Float)0.0))) {
HXLINE( 907)										_hx_tmp5 = 1;
            									}
            									else {
HXLINE( 907)										_hx_tmp5 = 0;
            									}
HXDLIN( 907)									::nme::ui::GameInput_obj::nmeGamepadButton(user,13,_hx_tmp5);
HXLINE( 908)									int _hx_tmp6;
HXDLIN( 908)									if ((inEvent->get_ref().scaleX > ((Float)0.0))) {
HXLINE( 908)										_hx_tmp6 = 1;
            									}
            									else {
HXLINE( 908)										_hx_tmp6 = 0;
            									}
HXDLIN( 908)									::nme::ui::GameInput_obj::nmeGamepadButton(user,14,_hx_tmp6);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystick,(void))

void Stage_obj::onSysMessage(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_914_onSysMessage)
HXLINE( 915)		 ::nme::events::SystemEvent evt =  ::nme::events::SystemEvent_obj::__alloc( HX_CTX ,HX_("system",ef,96,e2,f2),false,false,inEvent->get_ref().value);
HXLINE( 916)		this->nmeDispatchEvent(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onSysMessage,(void))

void Stage_obj::onAppLink(::cpp::Pointer<  nme::Event > inEvent){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_920_onAppLink)
HXLINE( 921)		 ::nme::events::AppLinkEvent evt =  ::nme::events::AppLinkEvent_obj::__alloc( HX_CTX ,::nme::events::AppLinkEvent_obj::APP_LINK,false,false);
HXLINE( 922)		evt->url = (String(inEvent->get_ref().utf8Text,inEvent->get_ref().utf8Length).dup());
HXLINE( 923)		this->nmeDispatchEvent(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onAppLink,(void))

void Stage_obj::onContextLost(){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_927_onContextLost)
HXLINE( 928)		 ::nme::events::Event evt =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("context3DLost",64,e2,62,9b),null(),null());
HXLINE( 929)		this->nmeBroadcast(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onContextLost,(void))

void Stage_obj::nmeDrag( ::nme::geom::Point inMouse){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_937_nmeDrag)
HXLINE( 938)		 ::nme::display::DisplayObjectContainer p = this->nmeDragObject->get_parent();
HXLINE( 939)		if (::hx::IsNotNull( p )) {
HXLINE( 940)			inMouse = p->globalToLocal(inMouse);
            		}
HXLINE( 942)		Float x = (inMouse->x + this->nmeDragOffsetX);
HXLINE( 943)		Float y = (inMouse->y + this->nmeDragOffsetY);
HXLINE( 945)		if (::hx::IsNotNull( this->nmeDragBounds )) {
HXLINE( 947)			if ((x < this->nmeDragBounds->x)) {
HXLINE( 947)				x = this->nmeDragBounds->x;
            			}
            			else {
HXLINE( 948)				if ((x > this->nmeDragBounds->get_right())) {
HXLINE( 948)					x = this->nmeDragBounds->get_right();
            				}
            			}
HXLINE( 950)			if ((y < this->nmeDragBounds->y)) {
HXLINE( 950)				y = this->nmeDragBounds->y;
            			}
            			else {
HXLINE( 951)				if ((y > this->nmeDragBounds->get_bottom())) {
HXLINE( 951)					y = this->nmeDragBounds->get_bottom();
            				}
            			}
            		}
HXLINE( 954)		this->nmeDragObject->set_x(x);
HXLINE( 955)		this->nmeDragObject->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,nmeDrag,(void))

 ::Dynamic Stage_obj::set_opaqueBackground( ::Dynamic inBG){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_976_set_opaqueBackground)
HXLINE( 977)		this->window->setBackground(inBG);
HXLINE( 978)		if (::hx::IsNull( inBG )) {
HXLINE( 979)			::nme::display::DisplayObject_obj::nme_display_object_set_bg(::hx::DynamicPtr(this->nmeHandle),0);
            		}
            		else {
HXLINE( 981)			::nme::display::DisplayObject_obj::nme_display_object_set_bg(::hx::DynamicPtr(this->nmeHandle),(( (int)(inBG) ) | -16777216));
            		}
HXLINE( 983)		return inBG;
            	}


int Stage_obj::set_color(int inColor){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_987_set_color)
HXLINE( 988)		this->set_opaqueBackground(inColor);
HXLINE( 989)		return inColor;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

int Stage_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_994_get_color)
HXLINE( 995)		 ::Dynamic col = this->get_opaqueBackground();
HXLINE( 996)		if (::hx::IsNull( col )) {
HXLINE( 996)			return 0;
            		}
            		else {
HXLINE( 996)			return ( (int)(col) );
            		}
HXDLIN( 996)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_color,return )

 ::nme::display::MovieClip Stage_obj::get_current(){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1001_get_current)
HXLINE(1002)		if (::hx::IsNull( this->nmeCurrent )) {
HXLINE(1004)			this->nmeCurrent =  ::nme::display::MovieClip_obj::__alloc( HX_CTX );
HXLINE(1005)			this->addChild(this->nmeCurrent);
            		}
HXLINE(1007)		return this->nmeCurrent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_current,return )

bool Stage_obj::get_captureMouse(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1010_get_captureMouse)
HXDLIN(1010)		return ::nme::display::Stage_obj::nme_stage_get_capture_mouse(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_captureMouse,return )

bool Stage_obj::set_captureMouse(bool val){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1011_set_captureMouse)
HXDLIN(1011)		return ::nme::display::Stage_obj::nme_stage_set_capture_mouse(::hx::DynamicPtr(this->nmeHandle),val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_captureMouse,return )

void Stage_obj::nmeOnTouch(::cpp::Pointer<  nme::Event > inEvent,::String inType, ::nme::display::TouchInfo touchInfo){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1016_nmeOnTouch)
HXLINE(1017)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1018)		 ::nme::display::DisplayObject obj = this->nmeFindByID(inEvent->get_ref().id);
HXLINE(1020)		if (::hx::IsNotNull( obj )) {
HXLINE(1021)			obj->nmeGetInteractiveObjectStack(stack);
            		}
HXLINE(1023)		if ((stack->length > 0)) {
HXLINE(1025)			 ::nme::display::InteractiveObject obj1 = stack->__get(0).StaticCast<  ::nme::display::InteractiveObject >();
HXLINE(1026)			stack->reverse();
HXLINE(1027)			int local = inEvent->get_ref().x;
HXDLIN(1027)			 ::nme::geom::Point local1 = obj1->globalToLocal( ::nme::geom::Point_obj::__alloc( HX_CTX ,local,inEvent->get_ref().y));
HXLINE(1028)			Float evt = inEvent->get_ref().scaleX;
HXDLIN(1028)			 ::nme::events::TouchEvent evt1 = ::nme::events::TouchEvent_obj::nmeCreate(inType,inEvent,local1,obj1,evt,inEvent->get_ref().scaleY);
HXLINE(1029)			evt1->touchPointID = inEvent->get_ref().value;
HXLINE(1030)			evt1->isPrimaryTouchPoint = ((inEvent->get_ref().flags & 32768) > 0);
HXLINE(1032)			this->nmeCheckInOuts(evt1,stack,touchInfo);
HXLINE(1033)			obj1->nmeFireEvent(evt1);
HXLINE(1035)			bool _hx_tmp;
HXDLIN(1035)			if (evt1->isPrimaryTouchPoint) {
HXLINE(1035)				_hx_tmp = (inType == HX_("touchMove",70,72,cd,0d));
            			}
            			else {
HXLINE(1035)				_hx_tmp = false;
            			}
HXDLIN(1035)			if (_hx_tmp) {
HXLINE(1037)				if (::hx::IsNotNull( this->nmeDragObject )) {
HXLINE(1038)					int _hx_tmp1 = inEvent->get_ref().x;
HXDLIN(1038)					this->nmeDrag( ::nme::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,inEvent->get_ref().y));
            				}
HXLINE(1040)				 ::nme::events::MouseEvent evt2 = ::nme::events::MouseEvent_obj::nmeCreate(HX_("mouseMove",d6,9b,b5,f4),inEvent,local1,obj1);
HXLINE(1041)				obj1->nmeFireEvent(evt2);
            			}
            		}
            		else {
HXLINE(1047)			int evt3 = inEvent->get_ref().x;
HXDLIN(1047)			 ::nme::geom::Point evt4 =  ::nme::geom::Point_obj::__alloc( HX_CTX ,evt3,inEvent->get_ref().y);
HXDLIN(1047)			Float evt5 = inEvent->get_ref().scaleX;
HXDLIN(1047)			 ::nme::events::TouchEvent evt6 = ::nme::events::TouchEvent_obj::nmeCreate(inType,inEvent,evt4,null(),evt5,inEvent->get_ref().scaleY);
HXLINE(1048)			evt6->touchPointID = inEvent->get_ref().value;
HXLINE(1049)			evt6->isPrimaryTouchPoint = ((inEvent->get_ref().flags & 32768) > 0);
HXLINE(1051)			this->nmeCheckInOuts(evt6,stack,touchInfo);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,nmeOnTouch,(void))

void Stage_obj::onPoll(Float inTimestamp){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1058_onPoll)
HXLINE(1060)		::nme::media::SoundChannel_obj::nmePollComplete();
HXLINE(1061)		::nme::net::URLLoader_obj::nmePollData();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onPoll,(void))

Float Stage_obj::getNextWake(Float inDefaultWake,Float inTimestamp){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1065_getNextWake)
HXLINE(1066)		Float wake = inDefaultWake;
HXLINE(1068)		bool _hx_tmp;
HXDLIN(1068)		if ((wake > ((Float)0.001))) {
HXLINE(1068)			_hx_tmp = (::nme::media::SoundChannel_obj::nmeDynamicSoundCount > 0);
            		}
            		else {
HXLINE(1068)			_hx_tmp = false;
            		}
HXDLIN(1068)		if (_hx_tmp) {
HXLINE(1069)			wake = ((Float)0.001);
            		}
HXLINE(1071)		bool _hx_tmp1;
HXDLIN(1071)		if ((wake > ((Float)0.02))) {
HXLINE(1071)			if (!(::nme::media::SoundChannel_obj::nmeCompletePending())) {
HXLINE(1071)				_hx_tmp1 = ::nme::net::URLLoader_obj::nmeLoadPending();
            			}
            			else {
HXLINE(1071)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(1071)			_hx_tmp1 = false;
            		}
HXDLIN(1071)		if (_hx_tmp1) {
HXLINE(1073)			bool wake1;
HXDLIN(1073)			if (!(this->get_active())) {
HXLINE(1073)				wake1 = !(this->pauseWhenDeactivated);
            			}
            			else {
HXLINE(1073)				wake1 = true;
            			}
HXDLIN(1073)			if (wake1) {
HXLINE(1073)				wake = ((Float)0.020);
            			}
            			else {
HXLINE(1073)				wake = ((Float)0.500);
            			}
            		}
HXLINE(1076)		return wake;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,getNextWake,return )

void Stage_obj::nmeStartDrag( ::nme::display::Sprite sprite,bool lockCenter, ::nme::geom::Rectangle bounds){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1082_nmeStartDrag)
HXLINE(1083)		 ::nme::geom::Rectangle _hx_tmp;
HXDLIN(1083)		if (::hx::IsNull( bounds )) {
HXLINE(1083)			_hx_tmp = null();
            		}
            		else {
HXLINE(1083)			_hx_tmp = bounds->clone();
            		}
HXDLIN(1083)		this->nmeDragBounds = _hx_tmp;
HXLINE(1084)		this->nmeDragObject = sprite;
HXLINE(1086)		if (::hx::IsNotNull( this->nmeDragObject )) {
HXLINE(1088)			if (lockCenter) {
HXLINE(1090)				this->nmeDragOffsetX = (-(this->nmeDragObject->get_width()) / ( (Float)(2) ));
HXLINE(1091)				this->nmeDragOffsetY = (-(this->nmeDragObject->get_height()) / ( (Float)(2) ));
            			}
            			else {
HXLINE(1095)				Float mouse = this->get_mouseX();
HXDLIN(1095)				 ::nme::geom::Point mouse1 =  ::nme::geom::Point_obj::__alloc( HX_CTX ,mouse,this->get_mouseY());
HXLINE(1096)				 ::nme::display::DisplayObjectContainer p = this->nmeDragObject->get_parent();
HXLINE(1097)				if (::hx::IsNotNull( p )) {
HXLINE(1098)					mouse1 = p->globalToLocal(mouse1);
            				}
HXLINE(1100)				Float _hx_tmp1 = this->nmeDragObject->get_x();
HXDLIN(1100)				this->nmeDragOffsetX = (_hx_tmp1 - mouse1->x);
HXLINE(1101)				Float _hx_tmp2 = this->nmeDragObject->get_y();
HXDLIN(1101)				this->nmeDragOffsetY = (_hx_tmp2 - mouse1->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,nmeStartDrag,(void))

void Stage_obj::nmeStopDrag( ::nme::display::Sprite sprite){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1107_nmeStopDrag)
HXLINE(1108)		this->nmeDragBounds = null();
HXLINE(1109)		this->nmeDragObject = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,nmeStopDrag,(void))

void Stage_obj::setPreemtiveGcFrequency(int inFrames){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1113_setPreemtiveGcFrequency)
HXDLIN(1113)		 ::nme::display::Stage _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1119)		this->nmePreemptiveGcSince = 0;
HXLINE(1120)		this->nmePreemptiveGcFreq = inFrames;
HXLINE(1121)		bool _hx_tmp;
HXDLIN(1121)		if (::hx::IsNull( this->nmeCollectionLock )) {
HXLINE(1121)			_hx_tmp = (inFrames != 0);
            		}
            		else {
HXLINE(1121)			_hx_tmp = false;
            		}
HXDLIN(1121)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::nme::display::Stage,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1125_setPreemtiveGcFrequency)
HXLINE(1125)				while(true){
HXLINE(1127)					_gthis->nmeCollectionLock->wait(null());
HXLINE(1128)					__hxcpp_collect(false);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(1123)			this->nmeCollectionLock =  ::sys::thread::Lock_obj::__alloc( HX_CTX );
HXLINE(1124)			this->nmeCollectionAgency = ::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0(_gthis)),false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setPreemtiveGcFrequency,(void))

void Stage_obj::setSmartPreemtiveGc(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1136_setSmartPreemtiveGc)
HXDLIN(1136)		this->setPreemtiveGcFrequency(-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,setSmartPreemtiveGc,(void))

void Stage_obj::showCursor(bool inShow){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1150_showCursor)
HXDLIN(1150)		::nme::display::Stage_obj::nme_stage_show_cursor(::hx::DynamicPtr(this->nmeHandle),inShow);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,showCursor,(void))

 ::nme::display::InteractiveObject Stage_obj::get_focus(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1155_get_focus)
HXLINE(1156)		int id = ::nme::display::Stage_obj::nme_stage_get_focus_id(::hx::DynamicPtr(this->nmeHandle));
HXLINE(1157)		 ::nme::display::DisplayObject obj = this->nmeFindByID(id);
HXLINE(1158)		return ( ( ::nme::display::InteractiveObject)(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focus,return )

 ::nme::display::InteractiveObject Stage_obj::set_focus( ::nme::display::InteractiveObject inObject){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1162_set_focus)
HXLINE(1163)		if (::hx::IsNull( inObject )) {
HXLINE(1164)			::nme::display::Stage_obj::nme_stage_set_focus(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(null()));
            		}
            		else {
HXLINE(1166)			::nme::display::Stage_obj::nme_stage_set_focus(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(inObject->nmeHandle));
            		}
HXLINE(1167)		return inObject;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focus,return )

Float Stage_obj::set_frameRate(Float inRate){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1171_set_frameRate)
HXLINE(1172)		if (::hx::IsNotNull( this->nmeFrameTimer )) {
HXLINE(1174)			this->nmeFrameTimer->set_fps(inRate);
            		}
HXLINE(1176)		return inRate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_frameRate,return )

Float Stage_obj::get_frameRate(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1178_get_frameRate)
HXDLIN(1178)		if (::hx::IsNull( this->nmeFrameTimer )) {
HXDLIN(1178)			return ( (Float)(0) );
            		}
            		else {
HXDLIN(1178)			return this->nmeFrameTimer->fps;
            		}
HXDLIN(1178)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_frameRate,return )

 ::nme::display::Stage Stage_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1183_get_stage)
HXDLIN(1183)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


 ::nme::geom::Rectangle Stage_obj::get_safeRect(){
            	HX_GC_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1187_get_safeRect)
HXLINE(1188)		 ::nme::geom::Rectangle rect =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1189)		::nme::display::Stage_obj::nme_stage_get_safe_rect(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect));
HXLINE(1190)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_safeRect,return )

void Stage_obj::setMouseFilter( ::Dynamic inHandler){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1197_setMouseFilter)
HXDLIN(1197)		::nme::display::Stage_obj::nme_set_stage_mouse_handler_native(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(inHandler));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setMouseFilter,(void))

void Stage_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1202_resize)
HXDLIN(1202)		this->window->resize(width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,resize,(void))

bool Stage_obj::get_stageFocusRect(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1204_get_stageFocusRect)
HXDLIN(1204)		return ::nme::display::Stage_obj::nme_stage_get_focus_rect(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageFocusRect,return )

bool Stage_obj::set_stageFocusRect(bool inVal){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1206_set_stageFocusRect)
HXLINE(1207)		::nme::display::Stage_obj::nme_stage_set_focus_rect(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE(1208)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_stageFocusRect,return )

bool Stage_obj::get_active(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1210_get_active)
HXDLIN(1210)		return this->window->active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_active,return )

 ::nme::display::StageAlign Stage_obj::get_align(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1211_get_align)
HXDLIN(1211)		return this->window->get_align();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_align,return )

 ::nme::display::StageAlign Stage_obj::set_align( ::nme::display::StageAlign inMode){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1212_set_align)
HXDLIN(1212)		return this->window->set_align(inMode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_align,return )

 ::nme::display::StageDisplayState Stage_obj::get_displayState(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1213_get_displayState)
HXDLIN(1213)		return this->window->get_displayState();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_displayState,return )

 ::nme::display::StageDisplayState Stage_obj::set_displayState( ::nme::display::StageDisplayState inState){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1214_set_displayState)
HXDLIN(1214)		return this->window->set_displayState(inState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_displayState,return )

Float Stage_obj::get_dpiScale(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1215_get_dpiScale)
HXDLIN(1215)		return this->window->get_dpiScale();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_dpiScale,return )

 ::nme::display::StageQuality Stage_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1216_get_quality)
HXDLIN(1216)		return this->window->get_quality();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_quality,return )

 ::nme::display::StageQuality Stage_obj::set_quality( ::nme::display::StageQuality inQuality){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1217_set_quality)
HXDLIN(1217)		return this->window->set_quality(inQuality);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_quality,return )

 ::nme::display::StageScaleMode Stage_obj::get_scaleMode(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1218_get_scaleMode)
HXDLIN(1218)		return this->window->get_scaleMode();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_scaleMode,return )

 ::nme::display::StageScaleMode Stage_obj::set_scaleMode( ::nme::display::StageScaleMode inMode){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1219_set_scaleMode)
HXDLIN(1219)		return this->window->set_scaleMode(inMode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_scaleMode,return )

int Stage_obj::get_stageHeight(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1220_get_stageHeight)
HXDLIN(1220)		return this->window->get_height();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageHeight,return )

int Stage_obj::get_stageWidth(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1221_get_stageWidth)
HXDLIN(1221)		return this->window->get_width();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageWidth,return )

bool Stage_obj::get_isOpenGL(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1222_get_isOpenGL)
HXDLIN(1222)		return this->window->get_isOpenGL();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_isOpenGL,return )

 ::Dynamic Stage_obj::get_renderRequest(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1223_get_renderRequest)
HXDLIN(1223)		return this->window->renderRequest;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_renderRequest,return )

 ::Dynamic Stage_obj::set_renderRequest( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1224_set_renderRequest)
HXDLIN(1224)		return (this->window->renderRequest = f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_renderRequest,return )

Float Stage_obj::nmeEarlyWakeup;

int Stage_obj::OrientationPortrait;

int Stage_obj::OrientationPortraitUpsideDown;

int Stage_obj::OrientationLandscapeRight;

int Stage_obj::OrientationLandscapeLeft;

int Stage_obj::OrientationFaceUp;

int Stage_obj::OrientationFaceDown;

int Stage_obj::OrientationPortraitAny;

int Stage_obj::OrientationLandscapeAny;

int Stage_obj::OrientationAny;

int Stage_obj::OrientationUseFunction;

bool Stage_obj::firstStage;

int Stage_obj::efLeftDown;

int Stage_obj::efShiftDown;

int Stage_obj::efCtrlDown;

int Stage_obj::efAltDown;

int Stage_obj::efCommandDown;

int Stage_obj::efLocationRight;

int Stage_obj::efNoNativeClick;

::Array< ::String > Stage_obj::nmeMouseChanges;

::Array< ::String > Stage_obj::nmeTouchChanges;

::Array< ::String > Stage_obj::sClickEvents;

::Array< ::String > Stage_obj::sDownEvents;

::Array< ::String > Stage_obj::sUpEvents;

bool Stage_obj::nmeQuitting;

HX_BEGIN_DEFAULT_FUNC(__default_getOrientation,Stage_obj)
int _hx_run(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_227___default_getOrientation)
HXDLIN( 227)		return ::nme::display::Stage_obj::nme_stage_get_orientation();
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

::Dynamic Stage_obj::getOrientation;

HX_BEGIN_DEFAULT_FUNC(__default_getNormalOrientation,Stage_obj)
int _hx_run(){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_232___default_getNormalOrientation)
HXDLIN( 232)		return ::nme::display::Stage_obj::nme_stage_get_normal_orientation();
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

::Dynamic Stage_obj::getNormalOrientation;

void Stage_obj::setFixedOrientation(int inOrientation){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1141_setFixedOrientation)
HXDLIN(1141)		::nme::app::Application_obj::setFixedOrientation(inOrientation);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setFixedOrientation,(void))

HX_BEGIN_DEFAULT_FUNC(__default_shouldRotateInterface,Stage_obj)
bool _hx_run(int inOrientation){
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_1146___default_shouldRotateInterface)
HXDLIN(1146)		return true;
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Stage_obj::shouldRotateInterface;

::cpp::Function< void  ( ::hx::Object *) > Stage_obj::nme_render_stage;

::cpp::Function< void  (bool) > Stage_obj::nme_set_render_gc_free;

::cpp::Function< int  ( ::hx::Object *) > Stage_obj::nme_stage_get_focus_id;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > Stage_obj::nme_stage_set_focus;

::cpp::Function< bool  ( ::hx::Object *) > Stage_obj::nme_stage_get_focus_rect;

::cpp::Function< void  ( ::hx::Object *,bool) > Stage_obj::nme_stage_set_focus_rect;

::cpp::Function< void  ( ::hx::Object *,int,int) > Stage_obj::nme_stage_resize_window;

::cpp::Function< void  ( ::hx::Object *,bool) > Stage_obj::nme_stage_show_cursor;

::cpp::Function< bool  ( ::hx::Object *) > Stage_obj::nme_stage_get_capture_mouse;

::cpp::Function< bool  ( ::hx::Object *,bool) > Stage_obj::nme_stage_set_capture_mouse;

::cpp::Function< int  () > Stage_obj::nme_stage_get_orientation;

::cpp::Function< int  () > Stage_obj::nme_stage_get_normal_orientation;

::cpp::Function< bool  ( ::hx::Object *) > Stage_obj::nme_stage_check_cache;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > Stage_obj::nme_stage_get_safe_rect;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > Stage_obj::nme_set_stage_mouse_handler_native;


::hx::ObjectPtr< Stage_obj > Stage_obj::__new( ::nme::app::Window inWindow) {
	::hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(inWindow);
	return __this;
}

::hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::app::Window inWindow) {
	Stage_obj *__this = (Stage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "nme.display.Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(inWindow);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(onCloseRequest,"onCloseRequest");
	HX_MARK_MEMBER_NAME(exceptionHandler,"exceptionHandler");
	HX_MARK_MEMBER_NAME(pauseWhenDeactivated,"pauseWhenDeactivated");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_MEMBER_NAME(safeRect,"safeRect");
	HX_MARK_MEMBER_NAME(invalid,"invalid");
	HX_MARK_MEMBER_NAME(stageVideos,"stageVideos");
	HX_MARK_MEMBER_NAME(nmeJoyAxisData,"nmeJoyAxisData");
	HX_MARK_MEMBER_NAME(nmeDragBounds,"nmeDragBounds");
	HX_MARK_MEMBER_NAME(nmeDragObject,"nmeDragObject");
	HX_MARK_MEMBER_NAME(nmeDragOffsetX,"nmeDragOffsetX");
	HX_MARK_MEMBER_NAME(nmeDragOffsetY,"nmeDragOffsetY");
	HX_MARK_MEMBER_NAME(nmeFocusOverObjects,"nmeFocusOverObjects");
	HX_MARK_MEMBER_NAME(nmeFramePeriod,"nmeFramePeriod");
	HX_MARK_MEMBER_NAME(nmeLastClickTime,"nmeLastClickTime");
	HX_MARK_MEMBER_NAME(nmeLastDown,"nmeLastDown");
	HX_MARK_MEMBER_NAME(nmeLastRender,"nmeLastRender");
	HX_MARK_MEMBER_NAME(nmeMouseOverObjects,"nmeMouseOverObjects");
	HX_MARK_MEMBER_NAME(nmeTouchInfo,"nmeTouchInfo");
	HX_MARK_MEMBER_NAME(nmeFrameTimer,"nmeFrameTimer");
	HX_MARK_MEMBER_NAME(nmeEnterFrameEvent,"nmeEnterFrameEvent");
	HX_MARK_MEMBER_NAME(nmeRenderEvent,"nmeRenderEvent");
	HX_MARK_MEMBER_NAME(nmeDropItems,"nmeDropItems");
	HX_MARK_MEMBER_NAME(nmeCurrent,"nmeCurrent");
	HX_MARK_MEMBER_NAME(nmePrenderListeners,"nmePrenderListeners");
	HX_MARK_MEMBER_NAME(nmeIsMainStage,"nmeIsMainStage");
	HX_MARK_MEMBER_NAME(nmePreemptiveGcFreq,"nmePreemptiveGcFreq");
	HX_MARK_MEMBER_NAME(nmePreemptiveGcSince,"nmePreemptiveGcSince");
	HX_MARK_MEMBER_NAME(nmeCollectionLock,"nmeCollectionLock");
	HX_MARK_MEMBER_NAME(nmeCollectionAgency,"nmeCollectionAgency");
	HX_MARK_MEMBER_NAME(nmeFrameAlloc,"nmeFrameAlloc");
	HX_MARK_MEMBER_NAME(nmeLastCurrentMemory,"nmeLastCurrentMemory");
	HX_MARK_MEMBER_NAME(nmeLastPreempt,"nmeLastPreempt");
	HX_MARK_MEMBER_NAME(nmeFrameMemIndex,"nmeFrameMemIndex");
	 ::nme::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(onCloseRequest,"onCloseRequest");
	HX_VISIT_MEMBER_NAME(exceptionHandler,"exceptionHandler");
	HX_VISIT_MEMBER_NAME(pauseWhenDeactivated,"pauseWhenDeactivated");
	HX_VISIT_MEMBER_NAME(current,"current");
	HX_VISIT_MEMBER_NAME(safeRect,"safeRect");
	HX_VISIT_MEMBER_NAME(invalid,"invalid");
	HX_VISIT_MEMBER_NAME(stageVideos,"stageVideos");
	HX_VISIT_MEMBER_NAME(nmeJoyAxisData,"nmeJoyAxisData");
	HX_VISIT_MEMBER_NAME(nmeDragBounds,"nmeDragBounds");
	HX_VISIT_MEMBER_NAME(nmeDragObject,"nmeDragObject");
	HX_VISIT_MEMBER_NAME(nmeDragOffsetX,"nmeDragOffsetX");
	HX_VISIT_MEMBER_NAME(nmeDragOffsetY,"nmeDragOffsetY");
	HX_VISIT_MEMBER_NAME(nmeFocusOverObjects,"nmeFocusOverObjects");
	HX_VISIT_MEMBER_NAME(nmeFramePeriod,"nmeFramePeriod");
	HX_VISIT_MEMBER_NAME(nmeLastClickTime,"nmeLastClickTime");
	HX_VISIT_MEMBER_NAME(nmeLastDown,"nmeLastDown");
	HX_VISIT_MEMBER_NAME(nmeLastRender,"nmeLastRender");
	HX_VISIT_MEMBER_NAME(nmeMouseOverObjects,"nmeMouseOverObjects");
	HX_VISIT_MEMBER_NAME(nmeTouchInfo,"nmeTouchInfo");
	HX_VISIT_MEMBER_NAME(nmeFrameTimer,"nmeFrameTimer");
	HX_VISIT_MEMBER_NAME(nmeEnterFrameEvent,"nmeEnterFrameEvent");
	HX_VISIT_MEMBER_NAME(nmeRenderEvent,"nmeRenderEvent");
	HX_VISIT_MEMBER_NAME(nmeDropItems,"nmeDropItems");
	HX_VISIT_MEMBER_NAME(nmeCurrent,"nmeCurrent");
	HX_VISIT_MEMBER_NAME(nmePrenderListeners,"nmePrenderListeners");
	HX_VISIT_MEMBER_NAME(nmeIsMainStage,"nmeIsMainStage");
	HX_VISIT_MEMBER_NAME(nmePreemptiveGcFreq,"nmePreemptiveGcFreq");
	HX_VISIT_MEMBER_NAME(nmePreemptiveGcSince,"nmePreemptiveGcSince");
	HX_VISIT_MEMBER_NAME(nmeCollectionLock,"nmeCollectionLock");
	HX_VISIT_MEMBER_NAME(nmeCollectionAgency,"nmeCollectionAgency");
	HX_VISIT_MEMBER_NAME(nmeFrameAlloc,"nmeFrameAlloc");
	HX_VISIT_MEMBER_NAME(nmeLastCurrentMemory,"nmeLastCurrentMemory");
	HX_VISIT_MEMBER_NAME(nmeLastPreempt,"nmeLastPreempt");
	HX_VISIT_MEMBER_NAME(nmeFrameMemIndex,"nmeFrameMemIndex");
	 ::nme::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Stage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_align() ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_focus() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"onKey") ) { return ::hx::Val( onKey_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"active") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_active() ); }
		if (HX_FIELD_EQ(inName,"onQuit") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_onQuit() ); }
		if (HX_FIELD_EQ(inName,"onText") ) { return ::hx::Val( onText_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDrop") ) { return ::hx::Val( onDrop_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPoll") ) { return ::hx::Val( onPoll_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"current") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_current() : current ); }
		if (HX_FIELD_EQ(inName,"invalid") ) { return ::hx::Val( invalid ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouse") ) { return ::hx::Val( onMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouch") ) { return ::hx::Val( onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"axismap") ) { return ::hx::Val( axismap_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeDrag") ) { return ::hx::Val( nmeDrag_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dpiScale") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_dpiScale() ); }
		if (HX_FIELD_EQ(inName,"isOpenGL") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_isOpenGL() ); }
		if (HX_FIELD_EQ(inName,"safeRect") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_safeRect() : safeRect ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRender") ) { return ::hx::Val( onRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"onScroll") ) { return ::hx::Val( onScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"onActive") ) { return ::hx::Val( onActive_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_frameRate() ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_scaleMode() ); }
		if (HX_FIELD_EQ(inName,"buttonmap") ) { return ::hx::Val( buttonmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"onAppLink") ) { return ::hx::Val( onAppLink_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return ::hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_focus") ) { return ::hx::Val( get_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return ::hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stage") ) { return ::hx::Val( get_stage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_align") ) { return ::hx::Val( get_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_align") ) { return ::hx::Val( set_align_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_stageWidth() ); }
		if (HX_FIELD_EQ(inName,"nmeCurrent") ) { return ::hx::Val( nmeCurrent ); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return ::hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onQuit") ) { return ::hx::Val( get_onQuit_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onQuit") ) { return ::hx::Val( set_onQuit_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystick") ) { return ::hx::Val( onJoystick_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeOnTouch") ) { return ::hx::Val( nmeOnTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"showCursor") ) { return ::hx::Val( showCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_active") ) { return ::hx::Val( get_active_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_stageHeight() ); }
		if (HX_FIELD_EQ(inName,"stageVideos") ) { return ::hx::Val( stageVideos ); }
		if (HX_FIELD_EQ(inName,"nmeLastDown") ) { return ::hx::Val( nmeLastDown ); }
		if (HX_FIELD_EQ(inName,"get_current") ) { return ::hx::Val( get_current_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNextWake") ) { return ::hx::Val( getNextWake_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeStopDrag") ) { return ::hx::Val( nmeStopDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_quality") ) { return ::hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return ::hx::Val( set_quality_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_displayState() ); }
		if (HX_FIELD_EQ(inName,"captureMouse") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_captureMouse() ); }
		if (HX_FIELD_EQ(inName,"nmeTouchInfo") ) { return ::hx::Val( nmeTouchInfo ); }
		if (HX_FIELD_EQ(inName,"nmeDropItems") ) { return ::hx::Val( nmeDropItems ); }
		if (HX_FIELD_EQ(inName,"onInputFocus") ) { return ::hx::Val( onInputFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDpiChanged") ) { return ::hx::Val( onDpiChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSysMessage") ) { return ::hx::Val( onSysMessage_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeStartDrag") ) { return ::hx::Val( nmeStartDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_safeRect") ) { return ::hx::Val( get_safeRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dpiScale") ) { return ::hx::Val( get_dpiScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isOpenGL") ) { return ::hx::Val( get_isOpenGL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderRequest") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_renderRequest() ); }
		if (HX_FIELD_EQ(inName,"nmeDragBounds") ) { return ::hx::Val( nmeDragBounds ); }
		if (HX_FIELD_EQ(inName,"nmeDragObject") ) { return ::hx::Val( nmeDragObject ); }
		if (HX_FIELD_EQ(inName,"nmeLastRender") ) { return ::hx::Val( nmeLastRender ); }
		if (HX_FIELD_EQ(inName,"nmeFrameTimer") ) { return ::hx::Val( nmeFrameTimer ); }
		if (HX_FIELD_EQ(inName,"nmeFrameAlloc") ) { return ::hx::Val( nmeFrameAlloc ); }
		if (HX_FIELD_EQ(inName,"onWindowClose") ) { return ::hx::Val( onWindowClose_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowMoved") ) { return ::hx::Val( onWindowMoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowEnter") ) { return ::hx::Val( onWindowEnter_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowLeave") ) { return ::hx::Val( onWindowLeave_dyn() ); }
		if (HX_FIELD_EQ(inName,"onContextLost") ) { return ::hx::Val( onContextLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return ::hx::Val( set_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frameRate") ) { return ::hx::Val( get_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleMode") ) { return ::hx::Val( get_scaleMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { return ::hx::Val( set_scaleMode_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onCloseRequest") ) { return ::hx::Val( onCloseRequest ); }
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_stageFocusRect() ); }
		if (HX_FIELD_EQ(inName,"nmeJoyAxisData") ) { return ::hx::Val( nmeJoyAxisData ); }
		if (HX_FIELD_EQ(inName,"nmeDragOffsetX") ) { return ::hx::Val( nmeDragOffsetX ); }
		if (HX_FIELD_EQ(inName,"nmeDragOffsetY") ) { return ::hx::Val( nmeDragOffsetY ); }
		if (HX_FIELD_EQ(inName,"nmeFramePeriod") ) { return ::hx::Val( nmeFramePeriod ); }
		if (HX_FIELD_EQ(inName,"nmeRenderEvent") ) { return ::hx::Val( nmeRenderEvent ); }
		if (HX_FIELD_EQ(inName,"nmeIsMainStage") ) { return ::hx::Val( nmeIsMainStage ); }
		if (HX_FIELD_EQ(inName,"nmeLastPreempt") ) { return ::hx::Val( nmeLastPreempt ); }
		if (HX_FIELD_EQ(inName,"nmeCheckInOuts") ) { return ::hx::Val( nmeCheckInOuts_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMouseFilter") ) { return ::hx::Val( setMouseFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stageWidth") ) { return ::hx::Val( get_stageWidth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onRotateRequest") ) { return ::hx::Val( onRotateRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stageHeight") ) { return ::hx::Val( get_stageHeight_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"exceptionHandler") ) { return ::hx::Val( exceptionHandler ); }
		if (HX_FIELD_EQ(inName,"nmeLastClickTime") ) { return ::hx::Val( nmeLastClickTime ); }
		if (HX_FIELD_EQ(inName,"nmeFrameMemIndex") ) { return ::hx::Val( nmeFrameMemIndex ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return ::hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_captureMouse") ) { return ::hx::Val( get_captureMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_captureMouse") ) { return ::hx::Val( set_captureMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return ::hx::Val( get_displayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return ::hx::Val( set_displayState_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeCollectionLock") ) { return ::hx::Val( nmeCollectionLock ); }
		if (HX_FIELD_EQ(inName,"get_renderRequest") ) { return ::hx::Val( get_renderRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_renderRequest") ) { return ::hx::Val( set_renderRequest_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeEnterFrameEvent") ) { return ::hx::Val( nmeEnterFrameEvent ); }
		if (HX_FIELD_EQ(inName,"isDisplayListDirty") ) { return ::hx::Val( isDisplayListDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stageFocusRect") ) { return ::hx::Val( get_stageFocusRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stageFocusRect") ) { return ::hx::Val( set_stageFocusRect_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nmeFocusOverObjects") ) { return ::hx::Val( nmeFocusOverObjects ); }
		if (HX_FIELD_EQ(inName,"nmeMouseOverObjects") ) { return ::hx::Val( nmeMouseOverObjects ); }
		if (HX_FIELD_EQ(inName,"nmePrenderListeners") ) { return ::hx::Val( nmePrenderListeners ); }
		if (HX_FIELD_EQ(inName,"nmePreemptiveGcFreq") ) { return ::hx::Val( nmePreemptiveGcFreq ); }
		if (HX_FIELD_EQ(inName,"nmeCollectionAgency") ) { return ::hx::Val( nmeCollectionAgency ); }
		if (HX_FIELD_EQ(inName,"nmeCheckFocusInOuts") ) { return ::hx::Val( nmeCheckFocusInOuts_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSmartPreemtiveGc") ) { return ::hx::Val( setSmartPreemtiveGc_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pauseWhenDeactivated") ) { return ::hx::Val( pauseWhenDeactivated ); }
		if (HX_FIELD_EQ(inName,"nmePreemptiveGcSince") ) { return ::hx::Val( nmePreemptiveGcSince ); }
		if (HX_FIELD_EQ(inName,"nmeLastCurrentMemory") ) { return ::hx::Val( nmeLastCurrentMemory ); }
		if (HX_FIELD_EQ(inName,"addPrerenderListener") ) { return ::hx::Val( addPrerenderListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUnhandledException") ) { return ::hx::Val( onUnhandledException_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDisplayObjectFocus") ) { return ::hx::Val( onDisplayObjectFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_opaqueBackground") ) { return ::hx::Val( set_opaqueBackground_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"removePrerenderListener") ) { return ::hx::Val( removePrerenderListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPreemtiveGcFrequency") ) { return ::hx::Val( setPreemtiveGcFrequency_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Stage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"efAltDown") ) { outValue = ( efAltDown ); return true; }
		if (HX_FIELD_EQ(inName,"sUpEvents") ) { outValue = ( sUpEvents ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstStage") ) { outValue = ( firstStage ); return true; }
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { outValue = ( efLeftDown ); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { outValue = ( efCtrlDown ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { outValue = ( efShiftDown ); return true; }
		if (HX_FIELD_EQ(inName,"sDownEvents") ) { outValue = ( sDownEvents ); return true; }
		if (HX_FIELD_EQ(inName,"nmeQuitting") ) { outValue = ( nmeQuitting ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sClickEvents") ) { outValue = ( sClickEvents ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { outValue = ( efCommandDown ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeEarlyWakeup") ) { outValue = ( nmeEarlyWakeup ); return true; }
		if (HX_FIELD_EQ(inName,"getOrientation") ) { outValue = ( getOrientation ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"efLocationRight") ) { outValue = ( efLocationRight ); return true; }
		if (HX_FIELD_EQ(inName,"efNoNativeClick") ) { outValue = ( efNoNativeClick ); return true; }
		if (HX_FIELD_EQ(inName,"nmeMouseChanges") ) { outValue = ( nmeMouseChanges ); return true; }
		if (HX_FIELD_EQ(inName,"nmeTouchChanges") ) { outValue = ( nmeTouchChanges ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nme_render_stage") ) { outValue = ( nme_render_stage ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setFixedOrientation") ) { outValue = setFixedOrientation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_focus") ) { outValue = ( nme_stage_set_focus ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getNormalOrientation") ) { outValue = ( getNormalOrientation ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"shouldRotateInterface") ) { outValue = ( shouldRotateInterface ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_show_cursor") ) { outValue = ( nme_stage_show_cursor ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_check_cache") ) { outValue = ( nme_stage_check_cache ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_set_render_gc_free") ) { outValue = ( nme_set_render_gc_free ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_focus_id") ) { outValue = ( nme_stage_get_focus_id ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_stage_resize_window") ) { outValue = ( nme_stage_resize_window ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_safe_rect") ) { outValue = ( nme_stage_get_safe_rect ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_stage_get_focus_rect") ) { outValue = ( nme_stage_get_focus_rect ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_focus_rect") ) { outValue = ( nme_stage_set_focus_rect ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_stage_get_orientation") ) { outValue = ( nme_stage_get_orientation ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_stage_get_capture_mouse") ) { outValue = ( nme_stage_get_capture_mouse ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_capture_mouse") ) { outValue = ( nme_stage_set_capture_mouse ); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nme_stage_get_normal_orientation") ) { outValue = ( nme_stage_get_normal_orientation ); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"nme_set_stage_mouse_handler_native") ) { outValue = ( nme_set_stage_mouse_handler_native ); return true; }
	}
	return false;
}

::hx::Val Stage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_align(inValue.Cast<  ::nme::display::StageAlign >()) ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_focus(inValue.Cast<  ::nme::display::InteractiveObject >()) ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::nme::app::Window >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onQuit") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_onQuit(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_quality(inValue.Cast<  ::nme::display::StageQuality >()) ); }
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast<  ::nme::display::MovieClip >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invalid") ) { invalid=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"safeRect") ) { safeRect=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_frameRate(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_scaleMode(inValue.Cast<  ::nme::display::StageScaleMode >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nmeCurrent") ) { nmeCurrent=inValue.Cast<  ::nme::display::MovieClip >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageVideos") ) { stageVideos=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeLastDown") ) { nmeLastDown=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_displayState(inValue.Cast<  ::nme::display::StageDisplayState >()) ); }
		if (HX_FIELD_EQ(inName,"captureMouse") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_captureMouse(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"nmeTouchInfo") ) { nmeTouchInfo=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeDropItems") ) { nmeDropItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderRequest") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_renderRequest(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"nmeDragBounds") ) { nmeDragBounds=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeDragObject") ) { nmeDragObject=inValue.Cast<  ::nme::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeLastRender") ) { nmeLastRender=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeFrameTimer") ) { nmeFrameTimer=inValue.Cast<  ::nme::app::FrameTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeFrameAlloc") ) { nmeFrameAlloc=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onCloseRequest") ) { onCloseRequest=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_stageFocusRect(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"nmeJoyAxisData") ) { nmeJoyAxisData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeDragOffsetX") ) { nmeDragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeDragOffsetY") ) { nmeDragOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeFramePeriod") ) { nmeFramePeriod=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeRenderEvent") ) { nmeRenderEvent=inValue.Cast<  ::nme::events::Event >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeIsMainStage") ) { nmeIsMainStage=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeLastPreempt") ) { nmeLastPreempt=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"exceptionHandler") ) { exceptionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeLastClickTime") ) { nmeLastClickTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeFrameMemIndex") ) { nmeFrameMemIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeCollectionLock") ) { nmeCollectionLock=inValue.Cast<  ::sys::thread::Lock >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeEnterFrameEvent") ) { nmeEnterFrameEvent=inValue.Cast<  ::nme::events::Event >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nmeFocusOverObjects") ) { nmeFocusOverObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeMouseOverObjects") ) { nmeMouseOverObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmePrenderListeners") ) { nmePrenderListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmePreemptiveGcFreq") ) { nmePreemptiveGcFreq=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeCollectionAgency") ) { nmeCollectionAgency=inValue.Cast<  ::sys::thread::_Thread::HaxeThread >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pauseWhenDeactivated") ) { pauseWhenDeactivated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmePreemptiveGcSince") ) { nmePreemptiveGcSince=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeLastCurrentMemory") ) { nmeLastCurrentMemory=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Stage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"efAltDown") ) { efAltDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sUpEvents") ) { sUpEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstStage") ) { firstStage=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { efLeftDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { efCtrlDown=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { efShiftDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sDownEvents") ) { sDownEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"nmeQuitting") ) { nmeQuitting=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sClickEvents") ) { sClickEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { efCommandDown=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeEarlyWakeup") ) { nmeEarlyWakeup=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"getOrientation") ) { getOrientation=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"efLocationRight") ) { efLocationRight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"efNoNativeClick") ) { efNoNativeClick=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"nmeMouseChanges") ) { nmeMouseChanges=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"nmeTouchChanges") ) { nmeTouchChanges=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nme_render_stage") ) { nme_render_stage=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_stage_set_focus") ) { nme_stage_set_focus=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getNormalOrientation") ) { getNormalOrientation=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"shouldRotateInterface") ) { shouldRotateInterface=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_show_cursor") ) { nme_stage_show_cursor=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_check_cache") ) { nme_stage_check_cache=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_set_render_gc_free") ) { nme_set_render_gc_free=ioValue.Cast< ::cpp::Function< void  (bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_focus_id") ) { nme_stage_get_focus_id=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_stage_resize_window") ) { nme_stage_resize_window=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_safe_rect") ) { nme_stage_get_safe_rect=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_stage_get_focus_rect") ) { nme_stage_get_focus_rect=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_focus_rect") ) { nme_stage_set_focus_rect=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_stage_get_orientation") ) { nme_stage_get_orientation=ioValue.Cast< ::cpp::Function< int  () > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_stage_get_capture_mouse") ) { nme_stage_get_capture_mouse=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_capture_mouse") ) { nme_stage_set_capture_mouse=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nme_stage_get_normal_orientation") ) { nme_stage_get_normal_orientation=ioValue.Cast< ::cpp::Function< int  () > >(); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"nme_set_stage_mouse_handler_native") ) { nme_set_stage_mouse_handler_native=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("align",c5,56,91,21));
	outFields->push(HX_("displayState",6f,4c,64,90));
	outFields->push(HX_("dpiScale",ed,a9,8d,90));
	outFields->push(HX_("focus",d8,5f,89,04));
	outFields->push(HX_("frameRate",ad,11,25,39));
	outFields->push(HX_("isOpenGL",f9,e3,fd,79));
	outFields->push(HX_("pauseWhenDeactivated",c0,1e,b2,2d));
	outFields->push(HX_("quality",bf,04,4c,44));
	outFields->push(HX_("scaleMode",0d,db,d3,2b));
	outFields->push(HX_("stageFocusRect",7e,d2,81,74));
	outFields->push(HX_("captureMouse",bf,0f,81,a1));
	outFields->push(HX_("stageHeight",45,89,45,95));
	outFields->push(HX_("stageWidth",68,0a,b3,1d));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("current",39,9c,e3,cb));
	outFields->push(HX_("safeRect",11,21,ab,99));
	outFields->push(HX_("invalid",f7,da,47,3b));
	outFields->push(HX_("stageVideos",f6,58,8f,78));
	outFields->push(HX_("nmeJoyAxisData",f9,dd,4d,02));
	outFields->push(HX_("nmeDragBounds",6f,84,32,d4));
	outFields->push(HX_("nmeDragObject",b9,7c,54,83));
	outFields->push(HX_("nmeDragOffsetX",2b,46,ae,bb));
	outFields->push(HX_("nmeDragOffsetY",2c,46,ae,bb));
	outFields->push(HX_("nmeFocusOverObjects",4e,c8,ed,d5));
	outFields->push(HX_("nmeFramePeriod",68,47,8b,47));
	outFields->push(HX_("nmeLastClickTime",19,f8,5b,46));
	outFields->push(HX_("nmeLastDown",3e,5b,ee,27));
	outFields->push(HX_("nmeLastRender",32,3d,ad,95));
	outFields->push(HX_("nmeMouseOverObjects",21,cb,75,d4));
	outFields->push(HX_("nmeTouchInfo",a7,b7,50,a9));
	outFields->push(HX_("nmeFrameTimer",3e,e3,04,b9));
	outFields->push(HX_("nmeEnterFrameEvent",3f,0b,74,4b));
	outFields->push(HX_("nmeRenderEvent",3e,0f,9e,6f));
	outFields->push(HX_("nmeDropItems",2b,c9,ed,a1));
	outFields->push(HX_("nmeCurrent",93,01,e5,9a));
	outFields->push(HX_("nmePrenderListeners",3f,dc,a0,c5));
	outFields->push(HX_("nmeIsMainStage",d5,04,58,aa));
	outFields->push(HX_("nmePreemptiveGcFreq",63,ee,33,f3));
	outFields->push(HX_("nmePreemptiveGcSince",af,0f,86,50));
	outFields->push(HX_("nmeCollectionLock",4f,77,1e,7c));
	outFields->push(HX_("nmeCollectionAgency",a9,97,59,9a));
	outFields->push(HX_("nmeFrameAlloc",ee,c7,62,ca));
	outFields->push(HX_("nmeLastCurrentMemory",be,ad,7e,14));
	outFields->push(HX_("nmeLastPreempt",b3,20,75,13));
	outFields->push(HX_("nmeFrameMemIndex",e4,5e,9e,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::app::Window */ ,(int)offsetof(Stage_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Stage_obj,onCloseRequest),HX_("onCloseRequest",36,36,45,ba)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Stage_obj,exceptionHandler),HX_("exceptionHandler",3b,ff,7f,5e)},
	{::hx::fsBool,(int)offsetof(Stage_obj,pauseWhenDeactivated),HX_("pauseWhenDeactivated",c0,1e,b2,2d)},
	{::hx::fsObject /*  ::nme::display::MovieClip */ ,(int)offsetof(Stage_obj,current),HX_("current",39,9c,e3,cb)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(Stage_obj,safeRect),HX_("safeRect",11,21,ab,99)},
	{::hx::fsBool,(int)offsetof(Stage_obj,invalid),HX_("invalid",f7,da,47,3b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,stageVideos),HX_("stageVideos",f6,58,8f,78)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,nmeJoyAxisData),HX_("nmeJoyAxisData",f9,dd,4d,02)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(Stage_obj,nmeDragBounds),HX_("nmeDragBounds",6f,84,32,d4)},
	{::hx::fsObject /*  ::nme::display::Sprite */ ,(int)offsetof(Stage_obj,nmeDragObject),HX_("nmeDragObject",b9,7c,54,83)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,nmeDragOffsetX),HX_("nmeDragOffsetX",2b,46,ae,bb)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,nmeDragOffsetY),HX_("nmeDragOffsetY",2c,46,ae,bb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,nmeFocusOverObjects),HX_("nmeFocusOverObjects",4e,c8,ed,d5)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,nmeFramePeriod),HX_("nmeFramePeriod",68,47,8b,47)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,nmeLastClickTime),HX_("nmeLastClickTime",19,f8,5b,46)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,nmeLastDown),HX_("nmeLastDown",3e,5b,ee,27)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,nmeLastRender),HX_("nmeLastRender",32,3d,ad,95)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,nmeMouseOverObjects),HX_("nmeMouseOverObjects",21,cb,75,d4)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Stage_obj,nmeTouchInfo),HX_("nmeTouchInfo",a7,b7,50,a9)},
	{::hx::fsObject /*  ::nme::app::FrameTimer */ ,(int)offsetof(Stage_obj,nmeFrameTimer),HX_("nmeFrameTimer",3e,e3,04,b9)},
	{::hx::fsObject /*  ::nme::events::Event */ ,(int)offsetof(Stage_obj,nmeEnterFrameEvent),HX_("nmeEnterFrameEvent",3f,0b,74,4b)},
	{::hx::fsObject /*  ::nme::events::Event */ ,(int)offsetof(Stage_obj,nmeRenderEvent),HX_("nmeRenderEvent",3e,0f,9e,6f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Stage_obj,nmeDropItems),HX_("nmeDropItems",2b,c9,ed,a1)},
	{::hx::fsObject /*  ::nme::display::MovieClip */ ,(int)offsetof(Stage_obj,nmeCurrent),HX_("nmeCurrent",93,01,e5,9a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,nmePrenderListeners),HX_("nmePrenderListeners",3f,dc,a0,c5)},
	{::hx::fsBool,(int)offsetof(Stage_obj,nmeIsMainStage),HX_("nmeIsMainStage",d5,04,58,aa)},
	{::hx::fsInt,(int)offsetof(Stage_obj,nmePreemptiveGcFreq),HX_("nmePreemptiveGcFreq",63,ee,33,f3)},
	{::hx::fsInt,(int)offsetof(Stage_obj,nmePreemptiveGcSince),HX_("nmePreemptiveGcSince",af,0f,86,50)},
	{::hx::fsObject /*  ::sys::thread::Lock */ ,(int)offsetof(Stage_obj,nmeCollectionLock),HX_("nmeCollectionLock",4f,77,1e,7c)},
	{::hx::fsObject /*  ::sys::thread::_Thread::HaxeThread */ ,(int)offsetof(Stage_obj,nmeCollectionAgency),HX_("nmeCollectionAgency",a9,97,59,9a)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Stage_obj,nmeFrameAlloc),HX_("nmeFrameAlloc",ee,c7,62,ca)},
	{::hx::fsInt,(int)offsetof(Stage_obj,nmeLastCurrentMemory),HX_("nmeLastCurrentMemory",be,ad,7e,14)},
	{::hx::fsBool,(int)offsetof(Stage_obj,nmeLastPreempt),HX_("nmeLastPreempt",b3,20,75,13)},
	{::hx::fsInt,(int)offsetof(Stage_obj,nmeFrameMemIndex),HX_("nmeFrameMemIndex",e4,5e,9e,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Stage_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Stage_obj::nmeEarlyWakeup,HX_("nmeEarlyWakeup",dc,66,7f,84)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationPortrait,HX_("OrientationPortrait",2b,94,80,f0)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationPortraitUpsideDown,HX_("OrientationPortraitUpsideDown",ff,1e,9c,fe)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationLandscapeRight,HX_("OrientationLandscapeRight",71,bc,02,9a)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationLandscapeLeft,HX_("OrientationLandscapeLeft",12,41,e3,43)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationFaceUp,HX_("OrientationFaceUp",28,3f,72,08)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationFaceDown,HX_("OrientationFaceDown",6f,5e,a1,ad)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationPortraitAny,HX_("OrientationPortraitAny",81,cb,b1,4f)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationLandscapeAny,HX_("OrientationLandscapeAny",41,ec,09,4c)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationAny,HX_("OrientationAny",1c,7a,8d,d9)},
	{::hx::fsInt,(void *) &Stage_obj::OrientationUseFunction,HX_("OrientationUseFunction",af,e1,fb,12)},
	{::hx::fsBool,(void *) &Stage_obj::firstStage,HX_("firstStage",6e,b4,e9,c1)},
	{::hx::fsInt,(void *) &Stage_obj::efLeftDown,HX_("efLeftDown",8a,19,ac,0c)},
	{::hx::fsInt,(void *) &Stage_obj::efShiftDown,HX_("efShiftDown",63,6d,a6,e4)},
	{::hx::fsInt,(void *) &Stage_obj::efCtrlDown,HX_("efCtrlDown",2e,bc,bb,aa)},
	{::hx::fsInt,(void *) &Stage_obj::efAltDown,HX_("efAltDown",ca,73,98,b8)},
	{::hx::fsInt,(void *) &Stage_obj::efCommandDown,HX_("efCommandDown",6c,60,38,7b)},
	{::hx::fsInt,(void *) &Stage_obj::efLocationRight,HX_("efLocationRight",46,fc,6b,cc)},
	{::hx::fsInt,(void *) &Stage_obj::efNoNativeClick,HX_("efNoNativeClick",4f,9b,88,ae)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Stage_obj::nmeMouseChanges,HX_("nmeMouseChanges",c4,f5,60,e3)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Stage_obj::nmeTouchChanges,HX_("nmeTouchChanges",6a,bb,1d,2c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Stage_obj::sClickEvents,HX_("sClickEvents",ce,7b,9c,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Stage_obj::sDownEvents,HX_("sDownEvents",6e,63,09,ae)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Stage_obj::sUpEvents,HX_("sUpEvents",67,c7,94,bc)},
	{::hx::fsBool,(void *) &Stage_obj::nmeQuitting,HX_("nmeQuitting",a3,e9,bb,a5)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Stage_obj::getOrientation,HX_("getOrientation",da,41,9d,85)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Stage_obj::getNormalOrientation,HX_("getNormalOrientation",73,3e,d8,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Stage_obj::shouldRotateInterface,HX_("shouldRotateInterface",eb,38,3f,53)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &Stage_obj::nme_render_stage,HX_("nme_render_stage",ae,69,59,71)},
	{::hx::fsObject /* ::cpp::Function< void  (bool) > */ ,(void *) &Stage_obj::nme_set_render_gc_free,HX_("nme_set_render_gc_free",9c,67,a0,58)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Stage_obj::nme_stage_get_focus_id,HX_("nme_stage_get_focus_id",25,17,5f,40)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &Stage_obj::nme_stage_set_focus,HX_("nme_stage_set_focus",01,2e,aa,f9)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &Stage_obj::nme_stage_get_focus_rect,HX_("nme_stage_get_focus_rect",ee,ee,a2,6d)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &Stage_obj::nme_stage_set_focus_rect,HX_("nme_stage_set_focus_rect",62,d7,c2,8d)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int) > */ ,(void *) &Stage_obj::nme_stage_resize_window,HX_("nme_stage_resize_window",e1,12,4e,c1)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &Stage_obj::nme_stage_show_cursor,HX_("nme_stage_show_cursor",5e,18,d2,45)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &Stage_obj::nme_stage_get_capture_mouse,HX_("nme_stage_get_capture_mouse",89,1d,f1,b3)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *,bool) > */ ,(void *) &Stage_obj::nme_stage_set_capture_mouse,HX_("nme_stage_set_capture_mouse",95,f5,5e,d7)},
	{::hx::fsObject /* ::cpp::Function< int  () > */ ,(void *) &Stage_obj::nme_stage_get_orientation,HX_("nme_stage_get_orientation",ad,c4,d2,7d)},
	{::hx::fsObject /* ::cpp::Function< int  () > */ ,(void *) &Stage_obj::nme_stage_get_normal_orientation,HX_("nme_stage_get_normal_orientation",3b,7d,35,30)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &Stage_obj::nme_stage_check_cache,HX_("nme_stage_check_cache",91,43,a1,73)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &Stage_obj::nme_stage_get_safe_rect,HX_("nme_stage_get_safe_rect",33,49,e8,47)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &Stage_obj::nme_set_stage_mouse_handler_native,HX_("nme_set_stage_mouse_handler_native",fd,1b,e9,ce)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_("window",f0,93,8c,52),
	HX_("onCloseRequest",36,36,45,ba),
	HX_("exceptionHandler",3b,ff,7f,5e),
	HX_("pauseWhenDeactivated",c0,1e,b2,2d),
	HX_("current",39,9c,e3,cb),
	HX_("safeRect",11,21,ab,99),
	HX_("invalid",f7,da,47,3b),
	HX_("stageVideos",f6,58,8f,78),
	HX_("nmeJoyAxisData",f9,dd,4d,02),
	HX_("nmeDragBounds",6f,84,32,d4),
	HX_("nmeDragObject",b9,7c,54,83),
	HX_("nmeDragOffsetX",2b,46,ae,bb),
	HX_("nmeDragOffsetY",2c,46,ae,bb),
	HX_("nmeFocusOverObjects",4e,c8,ed,d5),
	HX_("nmeFramePeriod",68,47,8b,47),
	HX_("nmeLastClickTime",19,f8,5b,46),
	HX_("nmeLastDown",3e,5b,ee,27),
	HX_("nmeLastRender",32,3d,ad,95),
	HX_("nmeMouseOverObjects",21,cb,75,d4),
	HX_("nmeTouchInfo",a7,b7,50,a9),
	HX_("nmeFrameTimer",3e,e3,04,b9),
	HX_("nmeEnterFrameEvent",3f,0b,74,4b),
	HX_("nmeRenderEvent",3e,0f,9e,6f),
	HX_("nmeDropItems",2b,c9,ed,a1),
	HX_("nmeCurrent",93,01,e5,9a),
	HX_("nmePrenderListeners",3f,dc,a0,c5),
	HX_("nmeIsMainStage",d5,04,58,aa),
	HX_("nmePreemptiveGcFreq",63,ee,33,f3),
	HX_("nmePreemptiveGcSince",af,0f,86,50),
	HX_("nmeCollectionLock",4f,77,1e,7c),
	HX_("nmeCollectionAgency",a9,97,59,9a),
	HX_("nmeFrameAlloc",ee,c7,62,ca),
	HX_("nmeLastCurrentMemory",be,ad,7e,14),
	HX_("nmeLastPreempt",b3,20,75,13),
	HX_("nmeFrameMemIndex",e4,5e,9e,9d),
	HX_("dispose",9f,80,4c,bb),
	HX_("invalidate",7b,19,2a,87),
	HX_("isDisplayListDirty",3c,98,b6,60),
	HX_("get_onQuit",57,b8,1b,de),
	HX_("set_onQuit",cb,56,99,e1),
	HX_("addEventListener",cd,0b,64,f1),
	HX_("nmeCheckFocusInOuts",20,c4,61,52),
	HX_("nmeCheckInOuts",ec,a7,57,96),
	HX_("addPrerenderListener",ec,fd,3a,07),
	HX_("removePrerenderListener",69,bc,86,3d),
	HX_("onText",6c,d5,83,ef),
	HX_("onKey",c0,1d,69,32),
	HX_("onMouse",86,b4,a2,a2),
	HX_("onUnhandledException",4b,0a,ce,d2),
	HX_("onTouch",20,b6,70,aa),
	HX_("onResize",73,50,28,e8),
	HX_("onRender",d5,61,d6,e4),
	HX_("onDisplayObjectFocus",76,a6,fb,cc),
	HX_("onInputFocus",6d,c9,07,5b),
	HX_("onRotateRequest",95,79,5d,92),
	HX_("onChange",ef,87,1f,97),
	HX_("onScroll",8c,ce,11,27),
	HX_("onWindowClose",c9,ca,1f,9c),
	HX_("onDrop",ee,40,fa,e4),
	HX_("onDpiChanged",16,0d,c7,4e),
	HX_("onActive",45,38,f3,f5),
	HX_("onWindowMoved",44,7f,22,60),
	HX_("onWindowEnter",29,20,43,c4),
	HX_("onWindowLeave",08,e8,0f,c6),
	HX_("axismap",9b,c8,de,7d),
	HX_("buttonmap",ea,eb,1a,50),
	HX_("onJoystick",fb,b4,a8,79),
	HX_("onSysMessage",39,be,dd,06),
	HX_("onAppLink",dc,5d,b2,10),
	HX_("onContextLost",94,ac,a5,87),
	HX_("nmeDrag",5a,4a,e1,c7),
	HX_("set_opaqueBackground",ac,d4,c9,05),
	HX_("set_color",c6,b9,56,71),
	HX_("get_color",ba,cd,05,8e),
	HX_("get_current",50,fc,dd,51),
	HX_("get_captureMouse",48,fc,1f,a6),
	HX_("set_captureMouse",bc,e9,61,fc),
	HX_("nmeOnTouch",7a,1b,72,79),
	HX_("onPoll",fe,86,e6,ec),
	HX_("getNextWake",6d,c5,b2,20),
	HX_("nmeStartDrag",50,95,8c,99),
	HX_("nmeStopDrag",7c,ba,61,e7),
	HX_("setPreemtiveGcFrequency",33,35,5a,f0),
	HX_("setSmartPreemtiveGc",e4,bc,e3,08),
	HX_("showCursor",b3,33,5d,a8),
	HX_("get_focus",2f,bc,32,48),
	HX_("set_focus",3b,a8,83,2b),
	HX_("set_frameRate",90,c7,8e,3f),
	HX_("get_frameRate",84,e5,88,fa),
	HX_("get_stage",15,c7,b4,c7),
	HX_("get_safeRect",1a,d5,c4,4e),
	HX_("setMouseFilter",3b,8f,7b,22),
	HX_("resize",f4,59,7b,08),
	HX_("get_stageFocusRect",47,b3,1b,10),
	HX_("set_stageFocusRect",bb,e5,ca,ec),
	HX_("get_active",8f,b1,cd,06),
	HX_("get_align",1c,b3,3a,65),
	HX_("set_align",28,9f,8b,48),
	HX_("get_displayState",f8,38,03,95),
	HX_("set_displayState",6c,26,45,eb),
	HX_("get_dpiScale",f6,5d,a7,45),
	HX_("get_quality",d6,64,46,ca),
	HX_("set_quality",e2,6b,b3,d4),
	HX_("get_scaleMode",e4,ae,37,ed),
	HX_("set_scaleMode",f0,90,3d,32),
	HX_("get_stageHeight",dc,40,27,56),
	HX_("get_stageWidth",b1,92,a8,93),
	HX_("get_isOpenGL",02,98,17,2f),
	HX_("get_renderRequest",f0,5d,e2,46),
	HX_("set_renderRequest",fc,35,50,6a),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::nmeEarlyWakeup,"nmeEarlyWakeup");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationPortrait,"OrientationPortrait");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationPortraitUpsideDown,"OrientationPortraitUpsideDown");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationLandscapeRight,"OrientationLandscapeRight");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationLandscapeLeft,"OrientationLandscapeLeft");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationFaceUp,"OrientationFaceUp");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationFaceDown,"OrientationFaceDown");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationPortraitAny,"OrientationPortraitAny");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationLandscapeAny,"OrientationLandscapeAny");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationAny,"OrientationAny");
	HX_MARK_MEMBER_NAME(Stage_obj::OrientationUseFunction,"OrientationUseFunction");
	HX_MARK_MEMBER_NAME(Stage_obj::firstStage,"firstStage");
	HX_MARK_MEMBER_NAME(Stage_obj::efLeftDown,"efLeftDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efShiftDown,"efShiftDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efCtrlDown,"efCtrlDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efAltDown,"efAltDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efCommandDown,"efCommandDown");
	HX_MARK_MEMBER_NAME(Stage_obj::efLocationRight,"efLocationRight");
	HX_MARK_MEMBER_NAME(Stage_obj::efNoNativeClick,"efNoNativeClick");
	HX_MARK_MEMBER_NAME(Stage_obj::nmeMouseChanges,"nmeMouseChanges");
	HX_MARK_MEMBER_NAME(Stage_obj::nmeTouchChanges,"nmeTouchChanges");
	HX_MARK_MEMBER_NAME(Stage_obj::sClickEvents,"sClickEvents");
	HX_MARK_MEMBER_NAME(Stage_obj::sDownEvents,"sDownEvents");
	HX_MARK_MEMBER_NAME(Stage_obj::sUpEvents,"sUpEvents");
	HX_MARK_MEMBER_NAME(Stage_obj::nmeQuitting,"nmeQuitting");
	HX_MARK_MEMBER_NAME(Stage_obj::getOrientation,"getOrientation");
	HX_MARK_MEMBER_NAME(Stage_obj::getNormalOrientation,"getNormalOrientation");
	HX_MARK_MEMBER_NAME(Stage_obj::shouldRotateInterface,"shouldRotateInterface");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_render_stage,"nme_render_stage");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_set_render_gc_free,"nme_set_render_gc_free");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_get_focus_id,"nme_stage_get_focus_id");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_set_focus,"nme_stage_set_focus");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_get_focus_rect,"nme_stage_get_focus_rect");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_set_focus_rect,"nme_stage_set_focus_rect");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_resize_window,"nme_stage_resize_window");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_show_cursor,"nme_stage_show_cursor");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_get_capture_mouse,"nme_stage_get_capture_mouse");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_set_capture_mouse,"nme_stage_set_capture_mouse");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_get_orientation,"nme_stage_get_orientation");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_get_normal_orientation,"nme_stage_get_normal_orientation");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_check_cache,"nme_stage_check_cache");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_stage_get_safe_rect,"nme_stage_get_safe_rect");
	HX_MARK_MEMBER_NAME(Stage_obj::nme_set_stage_mouse_handler_native,"nme_set_stage_mouse_handler_native");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::nmeEarlyWakeup,"nmeEarlyWakeup");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationPortrait,"OrientationPortrait");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationPortraitUpsideDown,"OrientationPortraitUpsideDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationLandscapeRight,"OrientationLandscapeRight");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationLandscapeLeft,"OrientationLandscapeLeft");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationFaceUp,"OrientationFaceUp");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationFaceDown,"OrientationFaceDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationPortraitAny,"OrientationPortraitAny");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationLandscapeAny,"OrientationLandscapeAny");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationAny,"OrientationAny");
	HX_VISIT_MEMBER_NAME(Stage_obj::OrientationUseFunction,"OrientationUseFunction");
	HX_VISIT_MEMBER_NAME(Stage_obj::firstStage,"firstStage");
	HX_VISIT_MEMBER_NAME(Stage_obj::efLeftDown,"efLeftDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efShiftDown,"efShiftDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efCtrlDown,"efCtrlDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efAltDown,"efAltDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efCommandDown,"efCommandDown");
	HX_VISIT_MEMBER_NAME(Stage_obj::efLocationRight,"efLocationRight");
	HX_VISIT_MEMBER_NAME(Stage_obj::efNoNativeClick,"efNoNativeClick");
	HX_VISIT_MEMBER_NAME(Stage_obj::nmeMouseChanges,"nmeMouseChanges");
	HX_VISIT_MEMBER_NAME(Stage_obj::nmeTouchChanges,"nmeTouchChanges");
	HX_VISIT_MEMBER_NAME(Stage_obj::sClickEvents,"sClickEvents");
	HX_VISIT_MEMBER_NAME(Stage_obj::sDownEvents,"sDownEvents");
	HX_VISIT_MEMBER_NAME(Stage_obj::sUpEvents,"sUpEvents");
	HX_VISIT_MEMBER_NAME(Stage_obj::nmeQuitting,"nmeQuitting");
	HX_VISIT_MEMBER_NAME(Stage_obj::getOrientation,"getOrientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::getNormalOrientation,"getNormalOrientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::shouldRotateInterface,"shouldRotateInterface");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_render_stage,"nme_render_stage");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_set_render_gc_free,"nme_set_render_gc_free");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_get_focus_id,"nme_stage_get_focus_id");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_set_focus,"nme_stage_set_focus");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_get_focus_rect,"nme_stage_get_focus_rect");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_set_focus_rect,"nme_stage_set_focus_rect");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_resize_window,"nme_stage_resize_window");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_show_cursor,"nme_stage_show_cursor");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_get_capture_mouse,"nme_stage_get_capture_mouse");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_set_capture_mouse,"nme_stage_set_capture_mouse");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_get_orientation,"nme_stage_get_orientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_get_normal_orientation,"nme_stage_get_normal_orientation");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_check_cache,"nme_stage_check_cache");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_stage_get_safe_rect,"nme_stage_get_safe_rect");
	HX_VISIT_MEMBER_NAME(Stage_obj::nme_set_stage_mouse_handler_native,"nme_set_stage_mouse_handler_native");
};

#endif

::hx::Class Stage_obj::__mClass;

static ::String Stage_obj_sStaticFields[] = {
	HX_("nmeEarlyWakeup",dc,66,7f,84),
	HX_("OrientationPortrait",2b,94,80,f0),
	HX_("OrientationPortraitUpsideDown",ff,1e,9c,fe),
	HX_("OrientationLandscapeRight",71,bc,02,9a),
	HX_("OrientationLandscapeLeft",12,41,e3,43),
	HX_("OrientationFaceUp",28,3f,72,08),
	HX_("OrientationFaceDown",6f,5e,a1,ad),
	HX_("OrientationPortraitAny",81,cb,b1,4f),
	HX_("OrientationLandscapeAny",41,ec,09,4c),
	HX_("OrientationAny",1c,7a,8d,d9),
	HX_("OrientationUseFunction",af,e1,fb,12),
	HX_("firstStage",6e,b4,e9,c1),
	HX_("efLeftDown",8a,19,ac,0c),
	HX_("efShiftDown",63,6d,a6,e4),
	HX_("efCtrlDown",2e,bc,bb,aa),
	HX_("efAltDown",ca,73,98,b8),
	HX_("efCommandDown",6c,60,38,7b),
	HX_("efLocationRight",46,fc,6b,cc),
	HX_("efNoNativeClick",4f,9b,88,ae),
	HX_("nmeMouseChanges",c4,f5,60,e3),
	HX_("nmeTouchChanges",6a,bb,1d,2c),
	HX_("sClickEvents",ce,7b,9c,32),
	HX_("sDownEvents",6e,63,09,ae),
	HX_("sUpEvents",67,c7,94,bc),
	HX_("nmeQuitting",a3,e9,bb,a5),
	HX_("getOrientation",da,41,9d,85),
	HX_("getNormalOrientation",73,3e,d8,12),
	HX_("setFixedOrientation",7e,35,51,c6),
	HX_("shouldRotateInterface",eb,38,3f,53),
	HX_("nme_render_stage",ae,69,59,71),
	HX_("nme_set_render_gc_free",9c,67,a0,58),
	HX_("nme_stage_get_focus_id",25,17,5f,40),
	HX_("nme_stage_set_focus",01,2e,aa,f9),
	HX_("nme_stage_get_focus_rect",ee,ee,a2,6d),
	HX_("nme_stage_set_focus_rect",62,d7,c2,8d),
	HX_("nme_stage_resize_window",e1,12,4e,c1),
	HX_("nme_stage_show_cursor",5e,18,d2,45),
	HX_("nme_stage_get_capture_mouse",89,1d,f1,b3),
	HX_("nme_stage_set_capture_mouse",95,f5,5e,d7),
	HX_("nme_stage_get_orientation",ad,c4,d2,7d),
	HX_("nme_stage_get_normal_orientation",3b,7d,35,30),
	HX_("nme_stage_check_cache",91,43,a1,73),
	HX_("nme_stage_get_safe_rect",33,49,e8,47),
	HX_("nme_set_stage_mouse_handler_native",fd,1b,e9,ce),
	::String(null())
};

void Stage_obj::__register()
{
	Stage_obj _hx_dummy;
	Stage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.Stage",4a,7c,22,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Stage_obj::__GetStatic;
	__mClass->mSetStaticField = &Stage_obj::__SetStatic;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Stage_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Stage_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_63_boot)
HXDLIN(  63)		nmeEarlyWakeup = ((Float)0.005);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_65_boot)
HXDLIN(  65)		OrientationPortrait = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_66_boot)
HXDLIN(  66)		OrientationPortraitUpsideDown = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_67_boot)
HXDLIN(  67)		OrientationLandscapeRight = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_68_boot)
HXDLIN(  68)		OrientationLandscapeLeft = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_69_boot)
HXDLIN(  69)		OrientationFaceUp = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_70_boot)
HXDLIN(  70)		OrientationFaceDown = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_73_boot)
HXDLIN(  73)		OrientationPortraitAny = 7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_74_boot)
HXDLIN(  74)		OrientationLandscapeAny = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_75_boot)
HXDLIN(  75)		OrientationAny = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_77_boot)
HXDLIN(  77)		OrientationUseFunction = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_110_boot)
HXDLIN( 110)		firstStage = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_117_boot)
HXDLIN( 117)		efLeftDown = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_118_boot)
HXDLIN( 118)		efShiftDown = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_119_boot)
HXDLIN( 119)		efCtrlDown = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_120_boot)
HXDLIN( 120)		efAltDown = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_121_boot)
HXDLIN( 121)		efCommandDown = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_122_boot)
HXDLIN( 122)		efLocationRight = 16384;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_123_boot)
HXDLIN( 123)		efNoNativeClick = 65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_124_boot)
HXDLIN( 124)		nmeMouseChanges = ::Array_obj< ::String >::fromData( _hx_array_data_df227c4a_110,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_125_boot)
HXDLIN( 125)		nmeTouchChanges = ::Array_obj< ::String >::fromData( _hx_array_data_df227c4a_112,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_126_boot)
HXDLIN( 126)		sClickEvents = ::Array_obj< ::String >::fromData( _hx_array_data_df227c4a_114,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_127_boot)
HXDLIN( 127)		sDownEvents = ::Array_obj< ::String >::fromData( _hx_array_data_df227c4a_116,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_128_boot)
HXDLIN( 128)		sUpEvents = ::Array_obj< ::String >::fromData( _hx_array_data_df227c4a_118,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b38ee1e8d562c8_130_boot)
HXDLIN( 130)		nmeQuitting = false;
            	}
	getOrientation = new __default_getOrientation;

	getNormalOrientation = new __default_getNormalOrientation;

	shouldRotateInterface = new __default_shouldRotateInterface;

{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_render_stage = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_render_stage",ae,69,59,71),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_set_render_gc_free = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_set_render_gc_free",9c,67,a0,58),HX_("bv",d4,55,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_get_focus_id = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_focus_id",25,17,5f,40),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_set_focus = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_focus",01,2e,aa,f9),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_get_focus_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_focus_rect",ee,ee,a2,6d),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_set_focus_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_focus_rect",62,d7,c2,8d),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_resize_window = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_resize_window",e1,12,4e,c1),HX_("oiiv",87,b7,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_show_cursor = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_show_cursor",5e,18,d2,45),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_get_capture_mouse = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_capture_mouse",89,1d,f1,b3),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_set_capture_mouse = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_capture_mouse",95,f5,5e,d7),HX_("obb",ef,8f,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_get_orientation = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_orientation",ad,c4,d2,7d),HX_("i",69,00,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_get_normal_orientation = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_normal_orientation",3b,7d,35,30),HX_("i",69,00,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_check_cache = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_check_cache",91,43,a1,73),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_stage_get_safe_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_safe_rect",33,49,e8,47),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1d35cef0b3a7c0f_9_boot)
HXDLIN(   9)		nme_set_stage_mouse_handler_native = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_set_stage_mouse_handler_native",fd,1b,e9,ce),HX_("oov",56,9b,54,00),false);
            	}
}

} // end namespace nme
} // end namespace display
