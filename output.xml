<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/nanjizal/haxe/versions/779b005/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/home/nanjizal/haxe/versions/779b005/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/home/nanjizal/haxe/versions/779b005/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/Date.hx" extern="1">
		<now public="1" set="method" line="97" static="1">
			<f a=""><c path="Date"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<new1 set="method" line="101" static="1"><f a="t">
	<d/>
	<c path="Date"/>
</f></new1>
		<fromTime public="1" set="method" line="105" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="111" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<mSeconds><x path="Float"/></mSeconds>
		<getTime public="1" set="method" line="29">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method" line="33">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="37">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="41">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method" line="45">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="53">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method" line="57">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method" line="65">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method" line="69">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method" line="73">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method" line="77">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method" line="81">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method" line="85">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method" line="89">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method" line="93">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="25">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="EReg" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/EReg.hx" extern="1">
		<escape public="1" set="method" line="173" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<escapeRegExpRe expr="~/[\[\]{}()*+?.\\\^$|]/" line="177" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[\[\]{}()*+?.\\\^$|]/</e></m></meta>
		</escapeRegExpRe>
		<_hx_regexp_new_options set="method" static="1">
			<f a="s:options">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_new_options"</e></m></meta>
		</_hx_regexp_new_options>
		<_hx_regexp_match set="method" static="1">
			<f a="handler:string:pos:len">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_match"</e></m></meta>
		</_hx_regexp_match>
		<_hx_regexp_matched set="method" static="1">
			<f a="handle:pos">
				<d/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_matched"</e></m></meta>
		</_hx_regexp_matched>
		<_hx_regexp_matched_pos set="method" static="1">
			<f a="handle:match">
				<d/>
				<x path="Int"/>
				<a>
					<pos><x path="Int"/></pos>
					<len><x path="Int"/></len>
				</a>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_matched_pos"</e></m></meta>
		</_hx_regexp_matched_pos>
		<r><d/></r>
		<last><c path="String"/></last>
		<global><x path="Bool"/></global>
		<match public="1" set="method" line="36">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="45">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="55">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="61">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="65">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="74">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="98">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="149">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<toString set="method" line="180"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/regexp/Build.xml\"/>"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/home/nanjizal/haxe/versions/779b005/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/nanjizal/haxe/versions/779b005/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IntIterator" params="" file="/home/nanjizal/haxe/versions/779b005/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Lambda" params="" file="/home/nanjizal/haxe/versions/779b005/std/Lambda.hx" extern="1">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="57" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="69" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="item">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="78" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a="index:item">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="87" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="96" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="item">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="item">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="144" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="item">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="156" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="item">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="167" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="item">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="183" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a="item:result">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<foldi public="1" params="A:B" set="method" line="194" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="foldi.A"/></t>
				<f a="item:result:index">
					<c path="foldi.A"/>
					<c path="foldi.B"/>
					<x path="Int"/>
					<c path="foldi.B"/>
				</f>
				<c path="foldi.B"/>
				<c path="foldi.B"/>
			</f>
			<haxe_doc>Similar to fold, but also passes the index of each element to `f`.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</foldi>
		<count public="1" params="A" set="method" line="209" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="224" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="235" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="255" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<findIndex public="1" params="T" set="method" line="273" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="findIndex.T"/></t>
				<f a="item">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is -1.

		If `f` is null, the result is unspecified.</haxe_doc>
		</findIndex>
		<concat public="1" params="T" set="method" line="289" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="List" params="T" file="/home/nanjizal/haxe/versions/779b005/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/nanjizal/haxe/versions/779b005/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is `Math.NaN`.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, `null`, `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":include"><e>"hxMath.h"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/Reflect.hx" extern="1">
		<hasField public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="34" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" line="39" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="44" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="48" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="54" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="67" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="76" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="80" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="84" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="93" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="101" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="106" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="112" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="126" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":analyzer"><e>ignore</e></m>
		</meta>
	</class>
	<class path="Std" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/Std.hx" extern="1">
		<is public="1" get="inline" set="null" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m>
				<m n=":keep"/>
			</meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" line="33" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" line="38" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m>
				<m n=":keep"/>
			</meta>
		</instance>
		<string public="1" set="method" line="42" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="46" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="50" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. However, in decimal mode, the effect of `x` containing an e or E
		is unspecified, and it may be taken as scientific exponential notation.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="54" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.

		It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
		digits (defines exponent to base 10).</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="58" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\t\tstatic inline String string(String &s) { return s; }"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/nanjizal/haxe/versions/779b005/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/home/nanjizal/haxe/versions/779b005/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/StringBuf.hx" extern="1">
		<b><c path="Array"><c path="String"/></c></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<charBuf><c path="Array"><x path="cpp.Char"/></c></charBuf>
		<charBufAsString set="method" line="37"><f a=""><c path="String"/></f></charBufAsString>
		<flush set="method" line="43"><f a=""><x path="Void"/></f></flush>
		<get_length set="method" line="51"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="61">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" set="method" line="70">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="79">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="92">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/home/nanjizal/haxe/versions/779b005/std/StringTools.hx" extern="1">
		<urlEncode public="1" set="method" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="193" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="211" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" set="method" line="226" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="249" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="278" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="296" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="321" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="343" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="365" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="390" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="412" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="434" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="476" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<unsafeCodeAt public="1" get="inline" set="null" line="515" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</unsafeCodeAt>
		<iterator public="1" get="inline" set="null" line="550" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="561" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="568" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="589" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="598" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="615" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<MIN_SURROGATE_CODE_POINT get="inline" set="null" expr="65536" line="630" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65536</e></m></meta>
		</MIN_SURROGATE_CODE_POINT>
		<utf16CodePointAt get="inline" set="null" line="632" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></utf16CodePointAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Sys" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/Sys.hx" extern="1">
		<print public="1" set="method" line="27" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="31" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<stdin public="1" set="method" line="36" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<meta><m n=":access"><e>sys.io.FileInput</e></m></meta>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="41" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<meta><m n=":access"><e>sys.io.FileOutput</e></m></meta>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="46" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<meta><m n=":access"><e>sys.io.FileOutput</e></m></meta>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<getChar public="1" set="method" line="50" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<args public="1" set="method" line="55" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="66" static="1">
			<f a="s:v">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		If `v` is `null`, the environment variable is removed.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<sleep public="1" set="method" line="70" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="74" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="78" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="82" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="86" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" line="90" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" set="method" line="108" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" line="112" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" line="116" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" line="120" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="124" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<environment public="1" set="method" line="128" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns a map of the current environment variables and their values
		as of the invocation of the function.

		(python) On Windows, the variable names are always in upper case.

		(cpp)(hl)(neko) On Windows, the variable names match the last capitalization used when modifying
		the variable if the variable has been modified, otherwise they match their capitalization at
		the start of the process.

		On Windows on remaining targets, variable name capitalization matches however they were capitalized
		at the start of the process or at the moment of their creation.</haxe_doc>
		</environment>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="50" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="67" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="72" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="80" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="88" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="95" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="99" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="103" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="110" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="114" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="119" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="124" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<nativeEnumEq set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_enum_eq"</e></m></meta>
		</nativeEnumEq>
		<enumEq public="1" params="T" set="method" line="151" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="153" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<getEnumValueIndex set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_getEnumValueIndex"</e></m></meta>
		</getEnumValueIndex>
		<enumIndex public="1" set="method" line="166" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="170" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/home/nanjizal/haxe/versions/779b005/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/UInt.hx" private="1" module="UInt" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="XmlType" params="" file="/home/nanjizal/haxe/versions/779b005/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/Xml.hx" private="1" module="Xml" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="Xml" params="" file="/home/nanjizal/haxe/versions/779b005/std/Xml.hx" extern="1">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName set="method" line="151"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName set="method" line="158"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue set="method" line="165"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue set="method" line="172"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="266">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" set="method" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="307">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method" line="329">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="381">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="403"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.ArrayBase" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ArrayBase.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getElementSize public="1" set="method"><f a=""><x path="Int"/></f></getElementSize>
		<getByteCount public="1" set="method"><f a=""><x path="Int"/></f></getByteCount>
		<getBase public="1" set="method"><f a=""><c path="cpp.RawPointer"><x path="cpp.Char"/></c></f></getBase>
	</class>
	<class path="cpp.AutoCast" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/AutoCast.hx" extern="1"/>
	<typedef path="cpp.CallableData" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Callable.hx" module="cpp.Callable">
		<c path="cpp.CallableData.T"/>
		<meta>
			<m n=":noPackageRestrict"/>
			<m n=":callable"/>
		</meta>
	</typedef>
	<abstract path="cpp.Callable" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Callable.hx">
		<from><icast field="fromFunction"><x path="cpp.Function">
	<c path="fromFunction.F"/>
	<c path="cpp.abi.Abi"/>
</x></icast></from>
		<this><t path="cpp.CallableData"><c path="cpp.Callable.T"/></t></this>
		<to><icast field="toFunction"><x path="cpp.Function">
	<c path="cpp.Callable.T"/>
	<c path="cpp.abi.Abi"/>
</x></icast></to>
		<haxe_doc><![CDATA[The generator intercepts this type and converts it to a cpp.Function<T> on cpp.]]></haxe_doc>
		<meta>
			<m n=":noPackageRestrict"/>
			<m n=":callable"/>
		</meta>
		<impl><class path="cpp._Callable.Callable_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Callable.hx" private="1" module="cpp.Callable" extern="1" final="1">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a="inValue">
			<c path="cpp.Callable.T"/>
			<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<call public="1" get="accessor" set="null" static="1"><t path="cpp.CallableData"><c path="cpp.Callable.T"/></t></call>
	<get_call public="1" get="inline" set="null" line="43" static="1"><f a="this">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
</f></get_call>
	<fromFunction public="1" params="F" get="inline" set="null" line="48" static="1">
		<f a="func">
			<x path="cpp.Function">
				<c path="fromFunction.F"/>
				<c path="cpp.abi.Abi"/>
			</x>
			<x path="cpp.Callable"><c path="fromFunction.F"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction>
	<toFunction public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<x path="cpp.Function">
				<c path="cpp.Callable.T"/>
				<c path="cpp.abi.Abi"/>
			</x>
		</f>
		<meta><m n=":to"/></meta>
	</toFunction>
	<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="55" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
	<fromStaticFunction public="1" params="T" get="inline" set="null" line="58" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
	<lt public="1" get="inline" set="null" line="61" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></lt>
	<leq public="1" get="inline" set="null" line="64" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></leq>
	<gt public="1" get="inline" set="null" line="67" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></gt>
	<geq public="1" get="inline" set="null" line="70" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></geq>
</class></impl>
	</abstract>
	<class path="cpp._Callable.Callable_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Callable.hx" private="1" module="cpp.Callable" extern="1" final="1">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a="inValue">
				<c path="cpp.Callable.T"/>
				<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<call public="1" get="accessor" set="null" static="1"><t path="cpp.CallableData"><c path="cpp.Callable.T"/></t></call>
		<get_call public="1" get="inline" set="null" line="43" static="1"><f a="this">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
</f></get_call>
		<fromFunction public="1" params="F" get="inline" set="null" line="48" static="1">
			<f a="func">
				<x path="cpp.Function">
					<c path="fromFunction.F"/>
					<c path="cpp.abi.Abi"/>
				</x>
				<x path="cpp.Callable"><c path="fromFunction.F"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction>
		<toFunction public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<x path="cpp.Function">
					<c path="cpp.Callable.T"/>
					<c path="cpp.abi.Abi"/>
				</x>
			</f>
			<meta><m n=":to"/></meta>
		</toFunction>
		<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="55" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
		<fromStaticFunction public="1" params="T" get="inline" set="null" line="58" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
		<lt public="1" get="inline" set="null" line="61" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></lt>
		<leq public="1" get="inline" set="null" line="64" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></leq>
		<gt public="1" get="inline" set="null" line="67" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></gt>
		<geq public="1" get="inline" set="null" line="70" static="1"><f a="this:inOther">
	<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
	<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
	<x path="Bool"/>
</f></geq>
	</class>
	<abstract path="cpp.Char" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Char.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Char"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.ConstCharStar" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ConstCharStar.hx">
		<from><icast field="fromString"><c path="String"/></icast></from>
		<this><c path="cpp.RawConstPointer"><x path="cpp.Char"/></c></this>
		<to>
			<icast><c path="cpp.RawConstPointer"><x path="cpp.Char"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
			<icast field="toPointer"><c path="cpp.RawConstPointer"><x path="cpp.Char"/></c></icast>
		</to>
		<impl><class path="cpp._ConstCharStar.ConstCharStar_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ConstCharStar.hx" private="1" module="cpp.ConstCharStar" extern="1" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="s">
			<c path="String"/>
			<x path="cpp.ConstCharStar"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="31" static="1">
		<f a="s">
			<c path="String"/>
			<x path="cpp.ConstCharStar"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="34" static="1">
		<f a="this">
			<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			<c path="String"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":to"/>
		</meta>
	</toString>
	<toPointer public="1" get="inline" set="null" line="37" static="1">
		<f a="this">
			<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toPointer>
</class></impl>
	</abstract>
	<class path="cpp._ConstCharStar.ConstCharStar_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ConstCharStar.hx" private="1" module="cpp.ConstCharStar" extern="1" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="s">
				<c path="String"/>
				<x path="cpp.ConstCharStar"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="31" static="1">
			<f a="s">
				<c path="String"/>
				<x path="cpp.ConstCharStar"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="34" static="1">
			<f a="this">
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":to"/>
			</meta>
		</toString>
		<toPointer public="1" get="inline" set="null" line="37" static="1">
			<f a="this">
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toPointer>
	</class>
	<class path="cpp.ConstPointer" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ConstPointer.hx" extern="1">
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawConstPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.ConstPointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.ConstPointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.ConstPointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<ptr public="1"><t path="cpp.Star"><c path="cpp.ConstPointer.T"/></t></ptr>
		<value public="1" get="accessor" set="null"><c path="cpp.ConstPointer.T"/></value>
		<raw public="1" get="accessor" set="null"><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></raw>
		<constRaw public="1" get="accessor" set="null"><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></constRaw>
		<get_value public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></get_value>
		<get_constRaw public="1" set="method"><f a=""><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></f></get_constRaw>
		<get_raw public="1" set="method"><f a=""><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></f></get_raw>
		<lt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></geq>
		<setRaw public="1" params="O" set="method"><f a="ptr">
	<c path="cpp.RawPointer"><c path="setRaw.O"/></c>
	<x path="Void"/>
</f></setRaw>
		<reinterpret public="1" params="Other" set="method"><f a=""><c path="cpp.Pointer"><c path="reinterpret.Other"/></c></f></reinterpret>
		<rawCast public="1" params="Other" set="method"><f a=""><c path="cpp.RawPointer"><c path="rawCast.Other"/></c></f></rawCast>
		<at public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t>
</f></at>
		<inc public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></inc>
		<dec public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></dec>
		<incBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></decBy>
		<add public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></add>
		<sub public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></sub>
		<postIncVal public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></postIncVal>
		<meta>
			<m n=":coreType"/>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":native"><e>"cpp.Pointer"</e></m>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.EnumBase" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/EnumBase.hx" extern="1">
		<_hx_getIndex public="1" set="method"><f a=""><x path="Int"/></f></_hx_getIndex>
		<_hx_getTag public="1" set="method"><f a=""><c path="String"/></f></_hx_getTag>
		<_hx_getParamCount public="1" set="method"><f a=""><x path="Int"/></f></_hx_getParamCount>
		<_hx_getParamI public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></_hx_getParamI>
		<_hx_getParameters public="1" set="method"><f a=""><c path="Array"><d/></c></f></_hx_getParameters>
		<getIndex public="1" get="inline" set="null" line="35"><f a=""><x path="Int"/></f></getIndex>
		<getTag public="1" get="inline" set="null" line="37"><f a=""><c path="String"/></f></getTag>
		<getParamCount public="1" get="inline" set="null" line="39"><f a=""><x path="Int"/></f></getParamCount>
		<getParamI public="1" get="inline" set="null" line="41"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></getParamI>
		<getParameters public="1" get="inline" set="null" line="43"><f a=""><c path="Array"><d/></c></f></getParameters>
		<meta><m n=":native"><e>"hx.EnumBase"</e></m></meta>
	</class>
	<class path="cpp.ErrorConstants" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ErrorConstants.hx" extern="1">
		<invalidCast public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_CAST"</e></m></meta>
		</invalidCast>
		<indexOutOfBounds public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INDEX_OUT_OF_BOUNDS"</e></m></meta>
		</indexOutOfBounds>
		<invalidObject public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_OBJECT"</e></m></meta>
		</invalidObject>
		<invalidArgCount public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_ARG_COUNT"</e></m></meta>
		</invalidArgCount>
		<nullFunctionPointer public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_NULL_FUNCTION_POINTER"</e></m></meta>
		</nullFunctionPointer>
	</class>
	<typedef path="cpp.FunctionData" params="T:ABI" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Function.hx" module="cpp.Function">
		<c path="cpp.FunctionData.T"/>
		<meta><m n=":callable"/></meta>
	</typedef>
	<abstract path="cpp.Function" params="T:ABI" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Function.hx">
		<this><t path="cpp.FunctionData">
	<c path="cpp.Function.T"/>
	<c path="cpp.Function.ABI"/>
</t></this>
		<meta>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":callable"/>
		</meta>
		<impl><class path="cpp._Function.Function_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Function.hx" private="1" module="cpp.Function" extern="1" final="1">
	<_new public="1" get="inline" set="null" line="30" static="1">
		<f a="inValue">
			<c path="cpp.Function.T"/>
			<x path="cpp.Function">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<call public="1" get="accessor" set="null" static="1"><t path="cpp.FunctionData">
	<c path="cpp.Function.T"/>
	<c path="cpp.Function.ABI"/>
</t></call>
	<get_call public="1" get="inline" set="null" line="37" static="1"><f a="this">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
</f></get_call>
	<nativeGetProcAddress public="1" params="T:ABI" set="method" static="1">
		<f a="inModule:inFunction">
			<c path="String"/>
			<c path="String"/>
			<c path="cpp.AutoCast"/>
		</f>
		<meta><m n=":native"><e>"::cpp::Function_obj::getProcAddress"</e></m></meta>
	</nativeGetProcAddress>
	<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="42" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
	<nativeFromStaticFunction public="1" params="T" set="method" static="1">
		<f a="inStaticFunction">
			<c path="nativeFromStaticFunction.T"/>
			<c path="cpp.AutoCast"/>
		</f>
		<meta><m n=":native"><e>"::cpp::Function_obj::fromStaticFunction"</e></m></meta>
	</nativeFromStaticFunction>
	<fromStaticFunction public="1" params="T" get="inline" set="null" line="49" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
	<lt public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></lt>
	<leq public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></leq>
	<gt public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></gt>
	<geq public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></geq>
</class></impl>
	</abstract>
	<class path="cpp._Function.Function_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Function.hx" private="1" module="cpp.Function" extern="1" final="1">
		<_new public="1" get="inline" set="null" line="30" static="1">
			<f a="inValue">
				<c path="cpp.Function.T"/>
				<x path="cpp.Function">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<call public="1" get="accessor" set="null" static="1"><t path="cpp.FunctionData">
	<c path="cpp.Function.T"/>
	<c path="cpp.Function.ABI"/>
</t></call>
		<get_call public="1" get="inline" set="null" line="37" static="1"><f a="this">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
</f></get_call>
		<nativeGetProcAddress public="1" params="T:ABI" set="method" static="1">
			<f a="inModule:inFunction">
				<c path="String"/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Function_obj::getProcAddress"</e></m></meta>
		</nativeGetProcAddress>
		<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="42" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
		<nativeFromStaticFunction public="1" params="T" set="method" static="1">
			<f a="inStaticFunction">
				<c path="nativeFromStaticFunction.T"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Function_obj::fromStaticFunction"</e></m></meta>
		</nativeFromStaticFunction>
		<fromStaticFunction public="1" params="T" get="inline" set="null" line="49" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
		<lt public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method" static="1"><f a="this:inOther">
	<t path="cpp.FunctionData">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</t>
	<x path="cpp.Function">
		<c path="cpp.Function.T"/>
		<c path="cpp.Function.ABI"/>
	</x>
	<x path="Bool"/>
</f></geq>
	</class>
	<class path="cpp.Lib" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Lib.hx" extern="1">
		<load public="1" set="method" line="34" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Load and return a Cpp primitive from a DLL library.</haxe_doc>
		</load>
		<unloadAllLibraries public="1" set="method" line="46" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Unloaded all dynamic libraries in reverse order of loading.
		Returns the number of libraries unloaded.</haxe_doc>
		</unloadAllLibraries>
		<_loadPrime public="1" set="method" line="50" static="1">
			<f a="lib:prim:signature:?quietFail" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ quietFail : false }</e></m>
			</meta>
		</_loadPrime>
		<loadLazy public="1" set="method" line="65" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tries to load, and always returns a valid function, but the function may throw
		if called.</haxe_doc>
		</loadLazy>
		<do_rethrow set="method" static="1">
			<f a="inExp">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noDebug"/>
				<m n=":native"><e>"HX_STACK_DO_RETHROW"</e></m>
			</meta>
		</do_rethrow>
		<rethrow public="1" set="method" line="85" static="1">
			<f a="inExp">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noDebug"/></meta>
		</rethrow>
		<stringReference public="1" set="method" line="89" static="1">
			<f a="inBytes">
				<c path="haxe.io.Bytes"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</stringReference>
		<pushDllSearchPath public="1" set="method" line="96" static="1">
			<f a="inPath">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</pushDllSearchPath>
		<getDllExtension public="1" set="method" line="99" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getDllExtension>
		<getBinDirectory public="1" set="method" line="102" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getBinDirectory>
		<bytesReference public="1" get="inline" set="null" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns bytes referencing the content of a string.
		Use with extreme caution - changing constant strings will crash.
		Changing one string can cause others to change unexpectedly.
		Only really safe if you are using it read-only or if it comes from stringReference above</haxe_doc>
		</bytesReference>
		<print public="1" set="method" line="119" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Print the specified value on the default output.</haxe_doc>
		</print>
		<haxeToNeko public="1" set="method" line="127" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>This function is used to make porting from neko to cpp easy.
		It does not need to do anything because the c-code can work with any Dynamic</haxe_doc>
		</haxeToNeko>
		<nekoToHaxe public="1" set="method" line="135" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>This function is used to make porting from neko to cpp easy.
		It does not need to do anything because the c-code can work with any Dynamic</haxe_doc>
		</nekoToHaxe>
		<println public="1" set="method" line="142" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Print the specified value on the default output followed by a newline character.</haxe_doc>
		</println>
		<setFloatFormat public="1" set="method" line="146" static="1">
			<f a="inFormat">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setFloatFormat>
		<haxe_doc>Platform-specific Cpp Library. Provides some platform-specific functions
	for the C++ target, such as conversion from Haxe types to native types
	and vice-versa.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.NativeArray" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeArray.hx" extern="1">
		<create public="1" params="T" get="inline" set="null" line="27" static="1"><f a="length">
	<x path="Int"/>
	<c path="Array"><c path="create.T"/></c>
</f></create>
		<blit public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="ioDestArray:inDestElement:inSourceArray:inSourceElement:inElementCount">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<getBase public="1" get="inline" set="null" line="41" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<c path="cpp.ArrayBase"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getBase>
		<reserve public="1" params="T" set="method" static="1">
			<f a="inArray:inElements">
				<c path="Array"><c path="reserve.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</reserve>
		<capacity public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="capacity.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</capacity>
		<getElementSize public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="getElementSize.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</getElementSize>
		<address public="1" params="T" get="inline" set="null" line="54" static="1"><f a="inArray:inIndex">
	<c path="Array"><c path="address.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="address.T"/></c>
</f></address>
		<setData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setData.T"/></c>
				<c path="cpp.Pointer"><c path="setData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setData>
		<setUnmanagedData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setUnmanagedData.T"/></c>
				<c path="cpp.ConstPointer"><c path="setUnmanagedData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setUnmanagedData>
		<zero public="1" params="T" set="method" static="1">
			<f a="ioDestArray:?inFirst:?inElements">
				<c path="Array"><c path="zero.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</zero>
		<removeAt public="1" params="T" set="method" static="1">
			<f a="ioDestArray:inIndex">
				<c path="Array"><c path="removeAt.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</removeAt>
		<memcmp public="1" params="T" set="method" static="1">
			<f a="inArrayA:inArrayB">
				<c path="Array"><c path="memcmp.T"/></c>
				<c path="Array"><c path="memcmp.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</memcmp>
		<resolveVirtualArray public="1" set="method" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_reslove_virtual_array"</e></m></meta>
		</resolveVirtualArray>
		<unsafeGet public="1" params="T" get="inline" set="null" line="77" static="1">
			<f a="inDestArray:inIndex">
				<c path="Array"><c path="unsafeGet.T"/></c>
				<x path="Int"/>
				<c path="unsafeGet.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="ioDestArray:inIndex:inValue">
				<c path="Array"><c path="unsafeSet.T"/></c>
				<x path="Int"/>
				<c path="unsafeSet.T"/>
				<c path="unsafeSet.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</unsafeSet>
		<setSize public="1" params="T" get="inline" set="null" line="85" static="1">
			<f a="ioArray:inSize">
				<c path="Array"><c path="setSize.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="setSize.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setSize>
	</class>
	<class path="cpp.NativeFile" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeFile.hx" extern="1">
		<file_open public="1" set="method" static="1">
			<f a="fname:r">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_open"</e></m></meta>
		</file_open>
		<file_close public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_close"</e></m></meta>
		</file_close>
		<file_write public="1" set="method" static="1">
			<f a="handle:s:p:n">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_write"</e></m></meta>
		</file_write>
		<file_write_char public="1" set="method" static="1">
			<f a="handle:c">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_write_char"</e></m></meta>
		</file_write_char>
		<file_read public="1" set="method" static="1">
			<f a="handle:s:p:n">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_read"</e></m></meta>
		</file_read>
		<file_read_char public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_read_char"</e></m></meta>
		</file_read_char>
		<file_seek public="1" set="method" static="1">
			<f a="handle:pos:kind">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_seek"</e></m></meta>
		</file_seek>
		<file_tell public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_tell"</e></m></meta>
		</file_tell>
		<file_eof public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_eof"</e></m></meta>
		</file_eof>
		<file_flush public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_flush"</e></m></meta>
		</file_flush>
		<file_contents_string public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_contents_string"</e></m></meta>
		</file_contents_string>
		<file_contents_bytes public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_contents_bytes"</e></m></meta>
		</file_contents_bytes>
		<file_stdin public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stdin"</e></m></meta>
		</file_stdin>
		<file_stdout public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stdout"</e></m></meta>
		</file_stdout>
		<file_stderr public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stderr"</e></m></meta>
		</file_stderr>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m>
		</meta>
	</class>
	<class path="cpp.NativeProcess" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeProcess.hx" extern="1">
		<process_run public="1" set="method" static="1">
			<f a="cmd:vargs">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_run"</e></m></meta>
		</process_run>
		<process_run_with_show public="1" set="method" static="1">
			<f a="cmd:vargs:inShow">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_run"</e></m></meta>
		</process_run_with_show>
		<process_stdout_read public="1" set="method" static="1">
			<f a="handle:buf:pos:len">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_stdout_read"</e></m></meta>
		</process_stdout_read>
		<process_stderr_read public="1" set="method" static="1">
			<f a="handle:buf:pos:len">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_stderr_read"</e></m></meta>
		</process_stderr_read>
		<process_stdin_write public="1" set="method" static="1">
			<f a="handle:buf:pos:len">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_stdin_write"</e></m></meta>
		</process_stdin_write>
		<process_stdin_close public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_stdin_close"</e></m></meta>
		</process_stdin_close>
		<process_exit public="1" set="method" static="1">
			<f a="handle:block">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_exit"</e></m></meta>
		</process_exit>
		<process_pid public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_pid"</e></m></meta>
		</process_pid>
		<process_kill public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_kill"</e></m></meta>
		</process_kill>
		<process_close public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_process_close"</e></m></meta>
		</process_close>
		<meta><m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m></meta>
	</class>
	<class path="cpp.NativeSocket" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeSocket.hx" extern="1">
		<socket_init public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"_hx_std_socket_init"</e></m></meta>
		</socket_init>
		<socket_new public="1" set="method" static="1">
			<f a="udp">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_new"</e></m></meta>
		</socket_new>
		<socket_new_ip public="1" set="method" static="1">
			<f a="udp:ipv6">
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_new"</e></m></meta>
		</socket_new_ip>
		<socket_close public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_close"</e></m></meta>
		</socket_close>
		<socket_bind public="1" set="method" static="1">
			<f a="o:host:port">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_bind"</e></m></meta>
		</socket_bind>
		<socket_bind_ipv6 public="1" set="method" static="1">
			<f a="o:host:port">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_bind_ipv6"</e></m></meta>
		</socket_bind_ipv6>
		<socket_send_char public="1" set="method" static="1">
			<f a="o:c">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_send_char"</e></m></meta>
		</socket_send_char>
		<socket_send public="1" set="method" static="1">
			<f a="o:buf:p:l">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_send"</e></m></meta>
		</socket_send>
		<socket_recv public="1" set="method" static="1">
			<f a="o:buf:p:l">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_recv"</e></m></meta>
		</socket_recv>
		<socket_recv_char public="1" set="method" static="1">
			<f a="o">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_recv_char"</e></m></meta>
		</socket_recv_char>
		<socket_write public="1" set="method" static="1">
			<f a="o:buf">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_write"</e></m></meta>
		</socket_write>
		<socket_read public="1" set="method" static="1">
			<f a="o">
				<d/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_read"</e></m></meta>
		</socket_read>
		<host_resolve_ipv6 public="1" set="method" static="1">
			<f a="host">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_host_resolve_ipv6"</e></m></meta>
		</host_resolve_ipv6>
		<host_resolve public="1" set="method" static="1">
			<f a="host">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_host_resolve"</e></m></meta>
		</host_resolve>
		<host_to_string public="1" set="method" static="1">
			<f a="ip">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_host_to_string"</e></m></meta>
		</host_to_string>
		<host_to_string_ipv6 public="1" set="method" static="1">
			<f a="ipv6">
				<t path="haxe.io.BytesData"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_host_to_string_ipv6"</e></m></meta>
		</host_to_string_ipv6>
		<host_reverse public="1" set="method" static="1">
			<f a="host">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_host_reverse"</e></m></meta>
		</host_reverse>
		<host_reverse_ipv6 public="1" set="method" static="1">
			<f a="ipv6">
				<t path="haxe.io.BytesData"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_host_reverse_ipv6"</e></m></meta>
		</host_reverse_ipv6>
		<host_local public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_host_local"</e></m></meta>
		</host_local>
		<host_local_ipv6 public="1" get="inline" set="null" line="87" static="1"><f a=""><c path="String"/></f></host_local_ipv6>
		<socket_connect public="1" set="method" static="1">
			<f a="o:host:port">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_connect"</e></m></meta>
		</socket_connect>
		<socket_connect_ipv6 public="1" set="method" static="1">
			<f a="o:host:port">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_connect_ipv6"</e></m></meta>
		</socket_connect_ipv6>
		<socket_listen public="1" set="method" static="1">
			<f a="o:n">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_listen"</e></m></meta>
		</socket_listen>
		<socket_select public="1" set="method" static="1">
			<f a="rs:ws:es:timeout">
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<d/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_select"</e></m></meta>
		</socket_select>
		<socket_fast_select public="1" set="method" static="1">
			<f a="rs:ws:es:timeout">
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_fast_select"</e></m></meta>
		</socket_fast_select>
		<socket_accept public="1" set="method" static="1">
			<f a="o">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_accept"</e></m></meta>
		</socket_accept>
		<socket_peer public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_peer"</e></m></meta>
		</socket_peer>
		<socket_host public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_host"</e></m></meta>
		</socket_host>
		<socket_set_timeout public="1" set="method" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_set_timeout"</e></m></meta>
		</socket_set_timeout>
		<socket_shutdown public="1" set="method" static="1">
			<f a="o:r:w">
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_shutdown"</e></m></meta>
		</socket_shutdown>
		<socket_set_blocking public="1" set="method" static="1">
			<f a="o:b">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_set_blocking"</e></m></meta>
		</socket_set_blocking>
		<socket_set_fast_send public="1" set="method" static="1">
			<f a="o:b">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_set_fast_send"</e></m></meta>
		</socket_set_fast_send>
		<socket_set_broadcast public="1" set="method" static="1">
			<f a="o:b">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_set_broadcast"</e></m></meta>
		</socket_set_broadcast>
		<socket_poll_alloc public="1" set="method" static="1">
			<f a="nsocks">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_poll_alloc"</e></m></meta>
		</socket_poll_alloc>
		<socket_poll_prepare public="1" set="method" static="1">
			<f a="pdata:rsocks:wsocks">
				<d/>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="Array"><x path="Int"/></c></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_poll_prepare"</e></m></meta>
		</socket_poll_prepare>
		<socket_poll_events public="1" set="method" static="1">
			<f a="pdata:timeout">
				<d/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_poll_events"</e></m></meta>
		</socket_poll_events>
		<socket_poll public="1" set="method" static="1">
			<f a="socks:pdata:timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<d/>
				<x path="Float"/>
				<c path="Array"><c path="sys.net.Socket"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_poll"</e></m></meta>
		</socket_poll>
		<socket_send_to public="1" set="method" static="1">
			<f a="o:buf:p:l:inAddr">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_send_to"</e></m></meta>
		</socket_send_to>
		<socket_recv_from public="1" set="method" static="1">
			<f a="o:buf:p:l:outAddr">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_socket_recv_from"</e></m></meta>
		</socket_recv_from>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m>
		</meta>
	</class>
	<class path="cpp.NativeSsl" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeSsl.hx" extern="1">
		<ssl_debug_set public="1" set="method" static="1">
			<f a="int">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_debug_set"</e></m></meta>
		</ssl_debug_set>
		<ssl_new public="1" set="method" static="1">
			<f a="conf">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_new"</e></m></meta>
		</ssl_new>
		<ssl_close public="1" set="method" static="1">
			<f a="ctx">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_close"</e></m></meta>
		</ssl_close>
		<ssl_handshake public="1" set="method" static="1">
			<f a="ctx">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_handshake"</e></m></meta>
		</ssl_handshake>
		<ssl_set_socket public="1" set="method" static="1">
			<f a="ctx:socket">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_set_socket"</e></m></meta>
		</ssl_set_socket>
		<ssl_set_hostname public="1" set="method" static="1">
			<f a="ctx:hostname">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_set_hostname"</e></m></meta>
		</ssl_set_hostname>
		<ssl_get_peer_certificate public="1" set="method" static="1">
			<f a="ctx">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_get_peer_certificate"</e></m></meta>
		</ssl_get_peer_certificate>
		<ssl_get_verify_result public="1" set="method" static="1">
			<f a="ctx">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_get_verify_result"</e></m></meta>
		</ssl_get_verify_result>
		<ssl_send_char public="1" set="method" static="1">
			<f a="ctx:char">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_send_char"</e></m></meta>
		</ssl_send_char>
		<ssl_send public="1" set="method" static="1">
			<f a="ctx:buf:p:l">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_send"</e></m></meta>
		</ssl_send>
		<ssl_write public="1" set="method" static="1">
			<f a="ctx:data">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_write"</e></m></meta>
		</ssl_write>
		<ssl_recv_char public="1" set="method" static="1">
			<f a="ctx">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_recv_char"</e></m></meta>
		</ssl_recv_char>
		<ssl_recv public="1" set="method" static="1">
			<f a="ctx:buf:p:l">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_recv"</e></m></meta>
		</ssl_recv>
		<ssl_read public="1" set="method" static="1">
			<f a="ctx">
				<d/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_read"</e></m></meta>
		</ssl_read>
		<conf_new public="1" set="method" static="1">
			<f a="server">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_conf_new"</e></m></meta>
		</conf_new>
		<conf_close public="1" set="method" static="1">
			<f a="conf">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_conf_close"</e></m></meta>
		</conf_close>
		<conf_set_ca public="1" set="method" static="1">
			<f a="conf:cert">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_conf_set_ca"</e></m></meta>
		</conf_set_ca>
		<conf_set_verify public="1" set="method" static="1">
			<f a="conf:mode">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_conf_set_verify"</e></m></meta>
		</conf_set_verify>
		<conf_set_cert public="1" set="method" static="1">
			<f a="conf:cert:pkey">
				<d/>
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_conf_set_cert"</e></m></meta>
		</conf_set_cert>
		<conf_set_servername_callback public="1" set="method" static="1">
			<f a="conf:cb">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_conf_set_servername_callback"</e></m></meta>
		</conf_set_servername_callback>
		<cert_load_defaults public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_ssl_cert_load_defaults"</e></m></meta>
		</cert_load_defaults>
		<cert_load_file public="1" set="method" static="1">
			<f a="file">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_load_file"</e></m></meta>
		</cert_load_file>
		<cert_load_path public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_load_path"</e></m></meta>
		</cert_load_path>
		<cert_get_subject public="1" set="method" static="1">
			<f a="cert:field">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_get_subject"</e></m></meta>
		</cert_get_subject>
		<cert_get_issuer public="1" set="method" static="1">
			<f a="cert:field">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_get_issuer"</e></m></meta>
		</cert_get_issuer>
		<cert_get_altnames public="1" set="method" static="1">
			<f a="cert">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_get_altnames"</e></m></meta>
		</cert_get_altnames>
		<cert_get_notbefore public="1" set="method" static="1">
			<f a="cert">
				<d/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_get_notbefore"</e></m></meta>
		</cert_get_notbefore>
		<cert_get_notafter public="1" set="method" static="1">
			<f a="cert">
				<d/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_get_notafter"</e></m></meta>
		</cert_get_notafter>
		<cert_get_next public="1" set="method" static="1">
			<f a="cert">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_get_next"</e></m></meta>
		</cert_get_next>
		<cert_add_pem public="1" set="method" static="1">
			<f a="cert:data">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_add_pem"</e></m></meta>
		</cert_add_pem>
		<cert_add_der public="1" set="method" static="1">
			<f a="cert:data">
				<d/>
				<t path="haxe.io.BytesData"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_cert_add_der"</e></m></meta>
		</cert_add_der>
		<key_from_der public="1" set="method" static="1">
			<f a="data:pub">
				<t path="haxe.io.BytesData"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_key_from_der"</e></m></meta>
		</key_from_der>
		<key_from_pem public="1" set="method" static="1">
			<f a="data:pub:pass">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_key_from_pem"</e></m></meta>
		</key_from_pem>
		<dgst_make public="1" set="method" static="1">
			<f a="data:alg">
				<t path="haxe.io.BytesData"/>
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_dgst_make"</e></m></meta>
		</dgst_make>
		<dgst_sign public="1" set="method" static="1">
			<f a="data:key:alg">
				<t path="haxe.io.BytesData"/>
				<d/>
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_dgst_sign"</e></m></meta>
		</dgst_sign>
		<dgst_verify public="1" set="method" static="1">
			<f a="data:sign:key:alg">
				<t path="haxe.io.BytesData"/>
				<t path="haxe.io.BytesData"/>
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_ssl_dgst_verify"</e></m></meta>
		</dgst_verify>
		<init public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"_hx_ssl_init"</e></m></meta>
		</init>
		<meta><m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/ssl/Build.xml\"/>"]]></e></m></meta>
	</class>
	<class path="cpp.NativeString" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeString.hx" extern="1">
		<raw public="1" get="inline" set="null" line="26" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</raw>
		<c_str public="1" get="inline" set="null" line="29" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</c_str>
		<fromPointer public="1" get="inline" set="null" line="32" static="1">
			<f a="inPtr">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromPointer>
		<fromGcPointer public="1" get="inline" set="null" line="35" static="1">
			<f a="inPtr:inLen">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromGcPointer>
		<parseFloat public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_float"</e></m></meta>
		</parseFloat>
		<parseSubstrFloat public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_float"</e></m></meta>
		</parseSubstrFloat>
		<parseInt public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseInt>
		<parseSubstrInt public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseSubstrInt>
		<compare public="1" set="method" static="1">
			<f a="inString0:inString1">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_compare"</e></m></meta>
		</compare>
		<utf8CharCodeAt public="1" set="method" static="1">
			<f a="inString:inIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_char_code_at"</e></m></meta>
		</utf8CharCodeAt>
		<utf8Length public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_length"</e></m></meta>
		</utf8Length>
		<utf8IsValid public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_is_valid"</e></m></meta>
		</utf8IsValid>
		<utf8Sub public="1" set="method" static="1">
			<f a="inString:charStart:inLen">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_sub"</e></m></meta>
		</utf8Sub>
		<fromPointerLen public="1" set="method" static="1">
			<f a="inPtr:len">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_create"</e></m></meta>
		</fromPointerLen>
		<utf8DecodeAdvance public="1" set="method" static="1">
			<f a="reference">
				<x path="cpp.Char"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_decode_advance"</e></m></meta>
		</utf8DecodeAdvance>
	</class>
	<class path="cpp.NativeSys" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/NativeSys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_print"</e></m></meta>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_println"</e></m></meta>
		</println>
		<get_env public="1" set="method" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_get_env"</e></m></meta>
		</get_env>
		<put_env public="1" set="method" static="1">
			<f a="e:v">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_put_env"</e></m></meta>
		</put_env>
		<sys_sleep public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_sleep"</e></m></meta>
		</sys_sleep>
		<set_time_locale public="1" set="method" static="1">
			<f a="l">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_set_time_locale"</e></m></meta>
		</set_time_locale>
		<get_cwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_get_cwd"</e></m></meta>
		</get_cwd>
		<set_cwd public="1" set="method" static="1">
			<f a="d">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_set_cwd"</e></m></meta>
		</set_cwd>
		<sys_string public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_string"</e></m></meta>
		</sys_string>
		<sys_is64 public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_is64"</e></m></meta>
		</sys_is64>
		<sys_command public="1" set="method" static="1">
			<f a="cmd">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_command"</e></m></meta>
		</sys_command>
		<sys_exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_exit"</e></m></meta>
		</sys_exit>
		<sys_exists public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_exists"</e></m></meta>
		</sys_exists>
		<file_delete public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_delete"</e></m></meta>
		</file_delete>
		<sys_rename public="1" set="method" static="1">
			<f a="path:newname">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_rename"</e></m></meta>
		</sys_rename>
		<sys_stat public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_stat"</e></m></meta>
		</sys_stat>
		<sys_file_type public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_file_type"</e></m></meta>
		</sys_file_type>
		<sys_create_dir public="1" set="method" static="1">
			<f a="path:mode">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_create_dir"</e></m></meta>
		</sys_create_dir>
		<sys_remove_dir public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_remove_dir"</e></m></meta>
		</sys_remove_dir>
		<sys_time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_time"</e></m></meta>
		</sys_time>
		<sys_cpu_time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_cpu_time"</e></m></meta>
		</sys_cpu_time>
		<sys_read_dir public="1" set="method" static="1">
			<f a="p">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_read_dir"</e></m></meta>
		</sys_read_dir>
		<file_full_path public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_full_path"</e></m></meta>
		</file_full_path>
		<sys_exe_path public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_exe_path"</e></m></meta>
		</sys_exe_path>
		<sys_env public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta><m n=":native"><e>"_hx_std_sys_env"</e></m></meta>
		</sys_env>
		<sys_getch public="1" set="method" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_getch"</e></m></meta>
		</sys_getch>
		<sys_get_pid public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_get_pid"</e></m></meta>
		</sys_get_pid>
		<meta><m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m></meta>
	</class>
	<typedef path="cpp.Object" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Object.hx">
		<d/>
		<meta><m n=":noPackageRestrict"/></meta>
	</typedef>
	<class path="cpp.ObjectType" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/ObjectType.hx" extern="1">
		<vtUnknown public="1" get="inline" set="null" expr="-1" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</vtUnknown>
		<vtInt public="1" get="inline" set="null" expr="0xff" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xff</e></m></meta>
		</vtInt>
		<vtNull public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vtNull>
		<vtFloat public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</vtFloat>
		<vtBool public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</vtBool>
		<vtString public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</vtString>
		<vtObject public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</vtObject>
		<vtArray public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</vtArray>
		<vtFunction public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</vtFunction>
		<vtEnum public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</vtEnum>
		<vtClass public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</vtClass>
		<vtInt64 public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vtInt64>
		<vtAbstractBase public="1" get="inline" set="null" expr="0x100" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100</e></m></meta>
		</vtAbstractBase>
	</class>
	<class path="cpp.Pointer" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Pointer.hx" extern="1">
		<extends path="cpp.ConstPointer"><c path="cpp.Pointer.T"/></extends>
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.Pointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.Pointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<nativeFromHandle public="1" params="T" set="method" static="1">
			<f a="inHandle:?inKind">
				<d/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromHandle"</e></m></meta>
		</nativeFromHandle>
		<fromHandle public="1" params="T" get="inline" set="null" line="44" static="1"><f a="inHandle:?inKind">
	<d/>
	<c path="String"/>
	<c path="cpp.Pointer"><c path="fromHandle.T"/></c>
</f></fromHandle>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.Pointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<addressOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<t path="cpp.Reference"><c path="addressOf.T"/></t>
	<c path="cpp.Pointer"><c path="addressOf.T"/></c>
</f></addressOf>
		<endOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<c path="endOf.T"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></endOf>
		<nativeArrayElem public="1" params="T" set="method" static="1">
			<f a="array:inElem">
				<c path="Array"><c path="nativeArrayElem.T"/></c>
				<x path="Int"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::arrayElem"</e></m></meta>
		</nativeArrayElem>
		<arrayElem public="1" params="T" get="inline" set="null" line="56" static="1"><f a="array:inElem">
	<c path="Array"><c path="arrayElem.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="arrayElem.T"/></c>
</f></arrayElem>
		<nativeOfArray public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="nativeOfArray.T"/></c>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::ofArray"</e></m></meta>
		</nativeOfArray>
		<ofArray public="1" params="T" get="inline" set="null" line="62" static="1"><f a="array">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="cpp.Pointer"><c path="ofArray.T"/></c>
</f></ofArray>
		<ref public="1" get="accessor" set="accessor"><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></ref>
		<get_ref public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></get_ref>
		<set_ref public="1" set="method"><f a="t">
	<c path="cpp.Pointer.T"/>
	<t path="cpp.Reference"><c path="cpp.Pointer.T"/></t>
</f></set_ref>
		<setAt public="1" set="method"><f a="inIndex:value">
	<x path="Int"/>
	<c path="cpp.Pointer.T"/>
	<x path="Void"/>
</f></setAt>
		<toUnmanagedArray public="1" get="inline" set="null" line="66"><f a="elementCount">
	<x path="Int"/>
	<c path="Array"><c path="cpp.Pointer.T"/></c>
</f></toUnmanagedArray>
		<toUnmanagedVector public="1" get="inline" set="null" line="73"><f a="elementCount">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="cpp.Pointer.T"/></x>
</f></toUnmanagedVector>
		<inc public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></inc>
		<dec public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></dec>
		<incBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></decBy>
		<add public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></add>
		<sub public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></sub>
		<postIncRef public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></postIncRef>
		<destroy public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyArray public="1" set="method"><f a=""><x path="Void"/></f></destroyArray>
		<meta>
			<m n=":coreType"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.RawConstPointer" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/RawConstPointer.hx" extern="1">
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawConstPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<class path="cpp.RawPointer" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/RawPointer.hx" extern="1">
		<extends path="cpp.RawConstPointer"><c path="cpp.RawPointer.T"/></extends>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<typedef path="cpp.Reference" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Reference.hx">
		<c path="cpp.Reference.T"/>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this and
	prevent unwanted casting.</haxe_doc>
		<meta><m n=":semantics"><e>reference</e></m></meta>
	</typedef>
	<typedef path="cpp.Star" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Star.hx">
		<x path="Null"><c path="cpp.Star.T"/></x>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this use the
	correct type.</haxe_doc>
	</typedef>
	<abstract path="cpp.UInt8" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/UInt8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Void" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/Void.hx" extern="1"><meta><m n=":native"><e>"void"</e></m></meta></class>
	<class path="cpp.abi.Abi" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/abi/Abi.hx" extern="1"/>
	<typedef path="format.jpg.Data" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/jpg/Data.hx"><a>
	<width><x path="Int"/></width>
	<quality><x path="Float"/></quality>
	<pixels><c path="haxe.io.Bytes"/></pixels>
	<height><x path="Int"/></height>
</a></typedef>
	<class path="format.jpg.Writer" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/jpg/Writer.hx">
		<ZigZag><c path="Array"><x path="Int"/></c></ZigZag>
		<initZigZag set="method" line="36"><f a=""><x path="Void"/></f></initZigZag>
		<YTable><c path="Array"><x path="Int"/></c></YTable>
		<UVTable><c path="Array"><x path="Int"/></c></UVTable>
		<fdtbl_Y><c path="Array"><x path="Float"/></c></fdtbl_Y>
		<fdtbl_UV><c path="Array"><x path="Float"/></c></fdtbl_UV>
		<initQuantTables set="method" line="54"><f a="sf">
	<x path="Int"/>
	<x path="Void"/>
</f></initQuantTables>
		<std_dc_luminance_nrcodes><c path="Array"><x path="Int"/></c></std_dc_luminance_nrcodes>
		<std_dc_luminance_values><c path="haxe.io.Bytes"/></std_dc_luminance_values>
		<std_ac_luminance_nrcodes><c path="Array"><x path="Int"/></c></std_ac_luminance_nrcodes>
		<std_ac_luminance_values><c path="haxe.io.Bytes"/></std_ac_luminance_values>
		<initLuminance set="method" line="106"><f a=""><x path="Void"/></f></initLuminance>
		<strIntsToBytes set="method" line="135"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></strIntsToBytes>
		<std_dc_chrominance_nrcodes><c path="Array"><x path="Int"/></c></std_dc_chrominance_nrcodes>
		<std_dc_chrominance_values><c path="haxe.io.Bytes"/></std_dc_chrominance_values>
		<std_ac_chrominance_nrcodes><c path="Array"><x path="Int"/></c></std_ac_chrominance_nrcodes>
		<std_ac_chrominance_values><c path="haxe.io.Bytes"/></std_ac_chrominance_values>
		<initChrominance set="method" line="159"><f a=""><x path="Void"/></f></initChrominance>
		<YDC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></YDC_HT>
		<UVDC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></UVDC_HT>
		<YAC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></YAC_HT>
		<UVAC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></UVAC_HT>
		<initHuffmanTbl set="method" line="193"><f a=""><x path="Void"/></f></initHuffmanTbl>
		<computeHuffmanTbl set="method" line="200"><f a="nrcodes:std_table">
	<c path="Array"><x path="Int"/></c>
	<c path="haxe.io.Bytes"/>
	<t path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</t>
</f></computeHuffmanTbl>
		<bitcode><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></bitcode>
		<category><t path="Map">
	<x path="Int"/>
	<x path="Int"/>
</t></category>
		<initCategoryNumber set="method" line="220"><f a=""><x path="Void"/></f></initCategoryNumber>
		<byteout><c path="haxe.io.Output"/></byteout>
		<bytenew><x path="Int"/></bytenew>
		<bytepos><x path="Int"/></bytepos>
		<writeBits set="method" line="249"><f a="bs">
	<c path="format.jpg._Writer.BitString"/>
	<x path="Void"/>
</f></writeBits>
		<writeWord set="method" line="274"><f a="val">
	<x path="Int"/>
	<x path="Void"/>
</f></writeWord>
		<fDCTQuant set="method" line="281"><f a="data:fdtbl">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></fDCTQuant>
		<b get="inline" set="null" line="386"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></b>
		<writeAPP0 set="method" line="390"><f a=""><x path="Void"/></f></writeAPP0>
		<writeDQT set="method" line="406"><f a=""><x path="Void"/></f></writeDQT>
		<writeSOF0 set="method" line="416"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSOF0>
		<writeDHT set="method" line="436"><f a=""><x path="Void"/></f></writeDHT>
		<writeSOS set="method" line="460"><f a=""><x path="Void"/></f></writeSOS>
		<DU><c path="Array"><x path="Float"/></c></DU>
		<processDU set="method" line="478"><f a="CDU:fdtbl:DC:HTDC:HTAC">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<t path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</t>
	<t path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</t>
	<x path="Float"/>
</f></processDU>
		<YDU><c path="Array"><x path="Float"/></c></YDU>
		<UDU><c path="Array"><x path="Float"/></c></UDU>
		<VDU><c path="Array"><x path="Float"/></c></VDU>
		<RGB2YUV set="method" line="534"><f a="img:width:xpos:ypos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RGB2YUV>
		<write public="1" set="method" line="590"><f a="image">
	<t path="format.jpg.Data"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="551"><f a="out">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.jpg._Writer.BitString" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/jpg/Writer.hx" private="1" module="format.jpg.Writer">
		<len public="1"><x path="Int"/></len>
		<val public="1"><x path="Int"/></val>
		<new public="1" set="method" line="647"><f a="l:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.png.Color" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Data.hx" module="format.png.Data">
		<ColGrey a="alpha"><x path="Bool"/></ColGrey>
		<ColTrue a="alpha"><x path="Bool"/></ColTrue>
		<ColIndexed/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.png.Header" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Data.hx" module="format.png.Data"><a>
	<width><x path="Int"/></width>
	<interlaced><x path="Bool"/></interlaced>
	<height><x path="Int"/></height>
	<color><e path="format.png.Color"/></color>
	<colbits><x path="Int"/></colbits>
</a></typedef>
	<enum path="format.png.Chunk" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Data.hx" module="format.png.Data">
		<CEnd/>
		<CHeader a="h"><t path="format.png.Header"/></CHeader>
		<CData a="b"><c path="haxe.io.Bytes"/></CData>
		<CPalette a="b"><c path="haxe.io.Bytes"/></CPalette>
		<CUnknown a="id:data">
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
		</CUnknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.png.Data" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Data.hx"><t path="List"><e path="format.png.Chunk"/></t></typedef>
	<class path="format.png.Reader" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<checkCRC public="1"><x path="Bool"/></checkCRC>
		<read public="1" set="method" line="41"><f a=""><t path="format.png.Data"/></f></read>
		<readHeader set="method" line="56"><f a="i">
	<c path="haxe.io.Input"/>
	<t path="format.png.Header"/>
</f></readHeader>
		<readChunk set="method" line="91"><f a=""><e path="format.png.Chunk"/></f></readChunk>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.png.Tools" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Tools.hx">
		<getHeader public="1" set="method" line="35" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<t path="format.png.Header"/>
			</f>
			<haxe_doc>Returns the PNG header informations. Throws an exception if no header found.</haxe_doc>
		</getHeader>
		<getPalette public="1" set="method" line="47" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Return the PNG palette colors, or null if no palette chunk was found</haxe_doc>
		</getPalette>
		<filter get="inline" set="null" line="56" static="1">
			<f a="data:x:y:stride:prev:p:?numChannels" v="::::::4">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ numChannels : 4 }</e></m></meta>
		</filter>
		<reverseBytes public="1" set="method" line="69" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Converts from BGRA to ARGB and the other way by reversing bytes.</haxe_doc>
		</reverseBytes>
		<extractGrey public="1" set="method" line="106" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the greyscale PNG data and apply filters, extracting only the grey channel if alpha is present.</haxe_doc>
		</extractGrey>
		<extract32 public="1" set="method" line="205" static="1">
			<f a="d:?bytes:?flipY">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the PNG data and apply filters. By default this will output BGRA low-endian format. You can use the [reverseBytes] function to inverse the bytes to ARGB big-endian format.</haxe_doc>
		</extract32>
		<buildGrey public="1" set="method" line="653" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains one bytes (grey values) for each pixel.</haxe_doc>
		</buildGrey>
		<buildIndexed public="1" set="method" line="672" static="1">
			<f a="width:height:data:palette:?level" v="::::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains a one byte palette index for each pixel and a separate palette with 3 RGB bytes per color.</haxe_doc>
		</buildIndexed>
		<buildRGB public="1" set="method" line="691" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains three bytes (R,G and B values) for each pixel.</haxe_doc>
		</buildRGB>
		<build32ARGB public="1" set="method" line="714" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in ARGB format for each pixel.</haxe_doc>
		</build32ARGB>
		<build32BGRA public="1" set="method" line="738" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in BGRA format for each pixel.</haxe_doc>
		</build32BGRA>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.png.Writer" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/png/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="39"><f a="png">
	<t path="format.png.Data"/>
	<x path="Void"/>
</f></write>
		<writeChunk set="method" line="75"><f a="id:data">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.swf.Fixed" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><x path="Int"/></typedef>
	<typedef path="format.swf.Fixed8" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><x path="Int"/></typedef>
	<typedef path="format.swf.SWF" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<tags><c path="Array"><e path="format.swf.SWFTag"/></c></tags>
	<header><t path="format.swf.SWFHeader"/></header>
</a></typedef>
	<enum path="format.swf.SWFTag" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<TShowFrame/>
		<TShape a="id:data">
			<x path="Int"/>
			<e path="format.swf.ShapeData"/>
		</TShape>
		<TMorphShape a="id:data">
			<x path="Int"/>
			<e path="format.swf.MorphShapeData"/>
		</TMorphShape>
		<TFont a="id:data">
			<x path="Int"/>
			<e path="format.swf.FontData"/>
		</TFont>
		<TFontInfo a="id:data">
			<x path="Int"/>
			<e path="format.swf.FontInfoData"/>
		</TFontInfo>
		<TButton a="id:trackAsMenu:records">
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="format.swf.ButtonRecord"/></c>
		</TButton>
		<TBackgroundColor a="color"><x path="Int"/></TBackgroundColor>
		<TDoActions a="data"><c path="haxe.io.Bytes"/></TDoActions>
		<TClip a="id:frames:tags">
			<x path="Int"/>
			<x path="Int"/>
			<c path="Array"><e path="format.swf.SWFTag"/></c>
		</TClip>
		<TPlaceObject2 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject2>
		<TPlaceObject3 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject3>
		<TRemoveObject2 a="depth"><x path="Int"/></TRemoveObject2>
		<TFrameLabel a="label:anchor">
			<c path="String"/>
			<x path="Bool"/>
		</TFrameLabel>
		<TExport a="el"><c path="Array"><a>
	<name><c path="String"/></name>
	<cid><x path="Int"/></cid>
</a></c></TExport>
		<TDoInitActions a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TDoInitActions>
		<TActionScript3 a="data:?context">
			<c path="haxe.io.Bytes"/>
			<t path="format.swf.AS3Context"/>
		</TActionScript3>
		<TSymbolClass a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TSymbolClass>
		<TExportAssets a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TExportAssets>
		<TSandBox a="useDirectBlit:useGpu:hasMeta:useAs3:useNetwork">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</TSandBox>
		<TBitsLossless a="data"><t path="format.swf.Lossless"/></TBitsLossless>
		<TBitsLossless2 a="data"><t path="format.swf.Lossless"/></TBitsLossless2>
		<TBitsJPEG a="id:data">
			<x path="Int"/>
			<e path="format.swf.JPEGData"/>
		</TBitsJPEG>
		<TJPEGTables a="data"><c path="haxe.io.Bytes"/></TJPEGTables>
		<TBinaryData a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TBinaryData>
		<TSound a="data"><t path="format.swf.Sound"/></TSound>
		<TScenes a="scenes:labels">
			<c path="Array"><a>
	<offset><x path="Int"/></offset>
	<name><c path="String"/></name>
</a></c>
			<c path="Array"><a>
	<offset><x path="Int"/></offset>
	<name><c path="String"/></name>
</a></c>
		</TScenes>
		<TUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TUnknown>
	</enum>
	<typedef path="format.swf.SWFHeader" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<version><x path="Int"/></version>
	<nframes><x path="Int"/></nframes>
	<height><x path="Int"/></height>
	<fps><t path="format.swf.Fixed8"/></fps>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<typedef path="format.swf.AS3Context" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<label><c path="String"/></label>
	<id><x path="Int"/></id>
</a></typedef>
	<typedef path="format.swf.SymData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<className><c path="String"/></className>
	<cid><x path="Int"/></cid>
</a></typedef>
	<class path="format.swf.PlaceObject" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<depth public="1"><x path="Int"/></depth>
		<move public="1"><x path="Bool"/></move>
		<cid public="1"><x path="Null"><x path="Int"/></x></cid>
		<matrix public="1"><x path="Null"><t path="format.swf.Matrix"/></x></matrix>
		<color public="1"><x path="Null"><t path="format.swf.CXA"/></x></color>
		<ratio public="1"><x path="Null"><x path="Int"/></x></ratio>
		<instanceName public="1"><x path="Null"><c path="String"/></x></instanceName>
		<clipDepth public="1"><x path="Null"><x path="Int"/></x></clipDepth>
		<events public="1"><x path="Null"><c path="Array"><t path="format.swf.ClipEvent"/></c></x></events>
		<filters public="1"><x path="Null"><c path="Array"><e path="format.swf.Filter"/></c></x></filters>
		<blendMode public="1"><x path="Null"><e path="format.swf.BlendMode"/></x></blendMode>
		<bitmapCache public="1"><x path="Null"><x path="Int"/></x></bitmapCache>
		<hasImage public="1"><x path="Bool"/></hasImage>
		<className public="1"><x path="Null"><c path="String"/></x></className>
		<new public="1" set="method" line="104"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="format.swf.Rect" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<top><x path="Int"/></top>
	<right><x path="Int"/></right>
	<left><x path="Int"/></left>
	<bottom><x path="Int"/></bottom>
</a></typedef>
	<enum path="format.swf.ShapeData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<SHDShape1 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape1>
		<SHDShape2 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape2>
		<SHDShape3 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape3>
		<SHDShape4 a="data"><t path="format.swf.Shape4Data"/></SHDShape4>
	</enum>
	<enum path="format.swf.MorphShapeData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<MSDShape1 a="data"><t path="format.swf.MorphShapeData1"/></MSDShape1>
		<MSDShape2 a="data"><t path="format.swf.MorphShapeData2"/></MSDShape2>
	</enum>
	<typedef path="format.swf.MorphShapeData1" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<typedef path="format.swf.MorphShapeData2" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<useScalingStrokes><x path="Bool"/></useScalingStrokes>
	<useNonScalingStrokes><x path="Bool"/></useNonScalingStrokes>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startEdgeBounds><t path="format.swf.Rect"/></startEdgeBounds>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endEdgeBounds><t path="format.swf.Rect"/></endEdgeBounds>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<enum path="format.swf.MorphFillStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<MFSSolid a="startColor:endColor">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
		</MFSSolid>
		<MFSLinearGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSLinearGradient>
		<MFSRadialGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSRadialGradient>
		<MFSBitmap a="cid:startMatrix:endMatrix:repeat:smooth">
			<x path="Int"/>
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</MFSBitmap>
	</enum>
	<typedef path="format.swf.Morph1LineStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><x path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><x path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<enum path="format.swf.Morph2LineStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<M2LSNoFill a="startColor:endColor:data">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSNoFill>
		<M2LSFill a="fill:data">
			<e path="format.swf.MorphFillStyle"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSFill>
	</enum>
	<typedef path="format.swf.Morph2LineStyleData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><x path="Int"/></startWidth>
	<startCapStyle><e path="format.swf.LineCapStyle"/></startCapStyle>
	<pixelHinting><x path="Bool"/></pixelHinting>
	<noVScale><x path="Bool"/></noVScale>
	<noHScale><x path="Bool"/></noHScale>
	<noClose><x path="Bool"/></noClose>
	<joinStyle><e path="format.swf.LineJoinStyle"/></joinStyle>
	<endWidth><x path="Int"/></endWidth>
	<endCapStyle><e path="format.swf.LineCapStyle"/></endCapStyle>
</a></typedef>
	<typedef path="format.swf.MorphGradient" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<startRatio><x path="Int"/></startRatio>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endRatio><x path="Int"/></endRatio>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<typedef path="format.swf.Shape4Data" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<useWinding><x path="Bool"/></useWinding>
	<useScalingStroke><x path="Bool"/></useScalingStroke>
	<useNonScalingStroke><x path="Bool"/></useNonScalingStroke>
	<shapes><t path="format.swf.ShapeWithStyleData"/></shapes>
	<shapeBounds><t path="format.swf.Rect"/></shapeBounds>
	<edgeBounds><t path="format.swf.Rect"/></edgeBounds>
</a></typedef>
	<typedef path="format.swf.ShapeWithoutStyleData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a><shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords></a></typedef>
	<typedef path="format.swf.ShapeWithStyleData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.ShapeRecord" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<SHREnd/>
		<SHRChange a="data"><t path="format.swf.ShapeChangeRec"/></SHRChange>
		<SHREdge a="dx:dy">
			<x path="Int"/>
			<x path="Int"/>
		</SHREdge>
		<SHRCurvedEdge a="cdx:cdy:adx:ady">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</SHRCurvedEdge>
	</enum>
	<typedef path="format.swf.ShapeChangeRec" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<newStyles><x path="Null"><t path="format.swf.SCRNewStyles"/></x></newStyles>
	<moveTo><x path="Null"><t path="format.swf.SCRMoveTo"/></x></moveTo>
	<lineStyle><x path="Null"><t path="format.swf.SCRIndex"/></x></lineStyle>
	<fillStyle1><x path="Null"><t path="format.swf.SCRIndex"/></x></fillStyle1>
	<fillStyle0><x path="Null"><t path="format.swf.SCRIndex"/></x></fillStyle0>
</a></typedef>
	<typedef path="format.swf.SCRMoveTo" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<dy><x path="Int"/></dy>
	<dx><x path="Int"/></dx>
</a></typedef>
	<typedef path="format.swf.SCRIndex" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a><idx><x path="Int"/></idx></a></typedef>
	<typedef path="format.swf.SCRNewStyles" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.FillStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<FSSolid a="rgb"><t path="format.swf.RGB"/></FSSolid>
		<FSSolidAlpha a="rgb"><t path="format.swf.RGBA"/></FSSolidAlpha>
		<FSLinearGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSLinearGradient>
		<FSRadialGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSRadialGradient>
		<FSFocalGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.FocalGradient"/>
		</FSFocalGradient>
		<FSBitmap a="cid:mat:repeat:smooth">
			<x path="Int"/>
			<t path="format.swf.Matrix"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</FSBitmap>
	</enum>
	<typedef path="format.swf.LineStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<data><e path="format.swf.LineStyleData"/></data>
</a></typedef>
	<enum path="format.swf.LineStyleData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<LSRGB a="rgb"><t path="format.swf.RGB"/></LSRGB>
		<LSRGBA a="rgba"><t path="format.swf.RGBA"/></LSRGBA>
		<LS2 a="data"><t path="format.swf.LS2Data"/></LS2>
	</enum>
	<typedef path="format.swf.LS2Data" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<startCap><e path="format.swf.LineCapStyle"/></startCap>
	<pixelHinting><x path="Bool"/></pixelHinting>
	<noVScale><x path="Bool"/></noVScale>
	<noHScale><x path="Bool"/></noHScale>
	<noClose><x path="Bool"/></noClose>
	<join><e path="format.swf.LineJoinStyle"/></join>
	<fill><x path="Null"><e path="format.swf.LS2Fill"/></x></fill>
	<endCap><e path="format.swf.LineCapStyle"/></endCap>
</a></typedef>
	<enum path="format.swf.LineCapStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<LCRound/>
		<LCNone/>
		<LCSquare/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.LineJoinStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<LJRound/>
		<LJBevel/>
		<LJMiter a="limitFactor"><t path="format.swf.Fixed8"/></LJMiter>
	</enum>
	<enum path="format.swf.LS2Fill" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<LS2FColor a="color"><t path="format.swf.RGBA"/></LS2FColor>
		<LS2FStyle a="style"><e path="format.swf.FillStyle"/></LS2FStyle>
	</enum>
	<enum path="format.swf.GradRecord" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<GRRGB a="pos:col">
			<x path="Int"/>
			<t path="format.swf.RGB"/>
		</GRRGB>
		<GRRGBA a="pos:col">
			<x path="Int"/>
			<t path="format.swf.RGBA"/>
		</GRRGBA>
	</enum>
	<typedef path="format.swf.Gradient" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<spread><e path="format.swf.SpreadMode"/></spread>
	<interpolate><e path="format.swf.InterpolationMode"/></interpolate>
	<data><c path="Array"><e path="format.swf.GradRecord"/></c></data>
</a></typedef>
	<typedef path="format.swf.FocalGradient" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<focalPoint><t path="format.swf.Fixed8"/></focalPoint>
	<data><t path="format.swf.Gradient"/></data>
</a></typedef>
	<class path="format.swf.ButtonRecord" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<stateHitTest public="1"><x path="Bool"/></stateHitTest>
		<stateDown public="1"><x path="Bool"/></stateDown>
		<stateOver public="1"><x path="Bool"/></stateOver>
		<stateUp public="1"><x path="Bool"/></stateUp>
		<cid public="1"><x path="Int"/></cid>
		<depth public="1"><x path="Int"/></depth>
		<matrix public="1"><t path="format.swf.Matrix"/></matrix>
		<color public="1"><t path="format.swf.CXA"/></color>
		<filters public="1"><x path="Null"><c path="Array"><e path="format.swf.Filter"/></c></x></filters>
		<blendMode public="1"><x path="Null"><e path="format.swf.BlendMode"/></x></blendMode>
		<new public="1" set="method" line="313"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.swf.SpreadMode" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<SMPad/>
		<SMReflect/>
		<SMRepeat/>
		<SMReserved/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.InterpolationMode" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<IMNormalRGB/>
		<IMLinearRGB/>
		<IMReserved1/>
		<IMReserved2/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.swf.MatrixPart" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<nbits><x path="Int"/></nbits>
</a></typedef>
	<typedef path="format.swf.MatrixPartScale" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="format.swf.MatrixPartRotateSkew" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<rs1><x path="Float"/></rs1>
	<rs0><x path="Float"/></rs0>
</a></typedef>
	<typedef path="format.swf.MatrixPartTranslate" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></typedef>
	<typedef path="format.swf.Matrix" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<translate><t path="format.swf.MatrixPartTranslate"/></translate>
	<scale><x path="Null"><t path="format.swf.MatrixPartScale"/></x></scale>
	<rotate><x path="Null"><t path="format.swf.MatrixPartRotateSkew"/></x></rotate>
</a></typedef>
	<typedef path="format.swf.RGBA" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<r><x path="Int"/></r>
	<g><x path="Int"/></g>
	<b><x path="Int"/></b>
	<a><x path="Int"/></a>
</a></typedef>
	<typedef path="format.swf.RGB" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<r><x path="Int"/></r>
	<g><x path="Int"/></g>
	<b><x path="Int"/></b>
</a></typedef>
	<typedef path="format.swf.CXA" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<nbits><x path="Int"/></nbits>
	<mult><x path="Null"><t path="format.swf.RGBA"/></x></mult>
	<add><x path="Null"><t path="format.swf.RGBA"/></x></add>
</a></typedef>
	<typedef path="format.swf.ClipEvent" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<eventsFlags><x path="Int"/></eventsFlags>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<enum path="format.swf.BlendMode" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<BNormal/>
		<BLayer/>
		<BMultiply/>
		<BScreen/>
		<BLighten/>
		<BDarken/>
		<BDifference/>
		<BAdd/>
		<BSubtract/>
		<BInvert/>
		<BAlpha/>
		<BErase/>
		<BOverlay/>
		<BHardLight/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.Filter" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<FDropShadow a="data"><t path="format.swf.FilterData"/></FDropShadow>
		<FBlur a="data"><t path="format.swf.BlurFilterData"/></FBlur>
		<FGlow a="data"><t path="format.swf.FilterData"/></FGlow>
		<FBevel a="data"><t path="format.swf.FilterData"/></FBevel>
		<FGradientGlow a="data"><t path="format.swf.GradientFilterData"/></FGradientGlow>
		<FColorMatrix a="data"><c path="Array"><x path="Float"/></c></FColorMatrix>
		<FGradientBevel a="data"><t path="format.swf.GradientFilterData"/></FGradientBevel>
	</enum>
	<typedef path="format.swf.FilterFlags" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><x path="Int"/></passes>
	<ontop><x path="Bool"/></ontop>
	<knockout><x path="Bool"/></knockout>
	<inner><x path="Bool"/></inner>
</a></typedef>
	<typedef path="format.swf.FilterData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<strength><t path="format.swf.Fixed8"/></strength>
	<flags><t path="format.swf.FilterFlags"/></flags>
	<distance><t path="format.swf.Fixed"/></distance>
	<color2><t path="format.swf.RGBA"/></color2>
	<color><t path="format.swf.RGBA"/></color>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
	<angle><t path="format.swf.Fixed"/></angle>
</a></typedef>
	<typedef path="format.swf.BlurFilterData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><x path="Int"/></passes>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
</a></typedef>
	<typedef path="format.swf.GradientFilterData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<data><t path="format.swf.FilterData"/></data>
	<colors><c path="Array"><a>
	<position><x path="Int"/></position>
	<color><t path="format.swf.RGBA"/></color>
</a></c></colors>
</a></typedef>
	<typedef path="format.swf.Lossless" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
	<data><c path="haxe.io.Bytes"/></data>
	<color><e path="format.swf.ColorModel"/></color>
	<cid><x path="Int"/></cid>
</a></typedef>
	<enum path="format.swf.JPEGData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<JDJPEG1 a="data"><c path="haxe.io.Bytes"/></JDJPEG1>
		<JDJPEG2 a="data"><c path="haxe.io.Bytes"/></JDJPEG2>
		<JDJPEG3 a="data:mask">
			<c path="haxe.io.Bytes"/>
			<c path="haxe.io.Bytes"/>
		</JDJPEG3>
	</enum>
	<enum path="format.swf.ColorModel" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<CM8Bits a="ncolors"><x path="Int"/></CM8Bits>
		<CM15Bits/>
		<CM24Bits/>
		<CM32Bits/>
	</enum>
	<typedef path="format.swf.Sound" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<sid><x path="Int"/></sid>
	<samples><x path="Int"/></samples>
	<rate><e path="format.swf.SoundRate"/></rate>
	<isStereo><x path="Bool"/></isStereo>
	<is16bit><x path="Bool"/></is16bit>
	<format><e path="format.swf.SoundFormat"/></format>
	<data><e path="format.swf.SoundData"/></data>
</a></typedef>
	<enum path="format.swf.SoundData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<SDMp3 a="seek:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</SDMp3>
		<SDRaw a="data"><c path="haxe.io.Bytes"/></SDRaw>
		<SDOther a="data"><c path="haxe.io.Bytes"/></SDOther>
	</enum>
	<enum path="format.swf.SoundFormat" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<SFNativeEndianUncompressed/>
		<SFADPCM/>
		<SFMP3/>
		<SFLittleEndianUncompressed/>
		<SFNellymoser16k/>
		<SFNellymoser8k/>
		<SFNellymoser/>
		<SFSpeex/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.SoundRate" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<SR5k/>
		<SR11k/>
		<SR22k/>
		<SR44k/>
		<haxe_doc>* Sound sampling rate.
 *
 * - 5k is not allowed for MP3
 * - Nellymoser and Speex ignore this option</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.FontData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<FDFont1 a="data"><t path="format.swf.Font1Data"/></FDFont1>
		<FDFont2 a="hasWideChars:data">
			<x path="Bool"/>
			<t path="format.swf.Font2Data"/>
		</FDFont2>
		<FDFont3 a="data"><t path="format.swf.Font2Data"/></FDFont3>
	</enum>
	<enum path="format.swf.FontInfoData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<FIDFont1 a="shiftJIS:isANSI:hasWideCodes:data">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<t path="format.swf.FIData"/>
		</FIDFont1>
		<FIDFont2 a="language:data">
			<e path="format.swf.LangCode"/>
			<t path="format.swf.FIData"/>
		</FIDFont2>
	</enum>
	<typedef path="format.swf.FIData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<name><c path="String"/></name>
	<isSmall><x path="Bool"/></isSmall>
	<isItalic><x path="Bool"/></isItalic>
	<isBold><x path="Bool"/></isBold>
	<codeTable><c path="Array"><x path="Int"/></c></codeTable>
</a></typedef>
	<enum path="format.swf.LangCode" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data">
		<LCNone/>
		<LCLatin/>
		<LCJapanese/>
		<LCKorean/>
		<LCSimplifiedChinese/>
		<LCTraditionalChinese/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.swf.Font1Data" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a><glyphs><c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c></glyphs></a></typedef>
	<typedef path="format.swf.Font2GlyphData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<shape><t path="format.swf.ShapeWithoutStyleData"/></shape>
	<charCode><x path="Int"/></charCode>
</a></typedef>
	<typedef path="format.swf.Font2Data" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<shiftJIS><x path="Bool"/></shiftJIS>
	<name><c path="String"/></name>
	<layout><x path="Null"><t path="format.swf.FontLayoutData"/></x></layout>
	<language><e path="format.swf.LangCode"/></language>
	<isSmall><x path="Bool"/></isSmall>
	<isItalic><x path="Bool"/></isItalic>
	<isBold><x path="Bool"/></isBold>
	<isANSI><x path="Bool"/></isANSI>
	<glyphs><c path="Array"><t path="format.swf.Font2GlyphData"/></c></glyphs>
</a></typedef>
	<typedef path="format.swf.FontKerningData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<charCode2><x path="Int"/></charCode2>
	<charCode1><x path="Int"/></charCode1>
	<adjust><x path="Int"/></adjust>
</a></typedef>
	<typedef path="format.swf.FontLayoutGlyphData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<bounds><t path="format.swf.Rect"/></bounds>
	<advance><x path="Int"/></advance>
</a></typedef>
	<typedef path="format.swf.FontLayoutData" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/swf/Data.hx" module="format.swf.Data"><a>
	<leading><x path="Int"/></leading>
	<kerning><c path="Array"><t path="format.swf.FontKerningData"/></c></kerning>
	<glyphs><c path="Array"><t path="format.swf.FontLayoutGlyphData"/></c></glyphs>
	<descent><x path="Int"/></descent>
	<ascent><x path="Int"/></ascent>
</a></typedef>
	<class path="format.tools.Deflate" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/tools/Deflate.hx">
		<run public="1" set="method" line="31" static="1">
			<f a="b:?level" v=":9">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
		</run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.Inflate" params="" file="/home/nanjizal/haxe/haxe_libraries/format/3.5.0/haxelib/format/tools/Inflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.CallStack" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Constraints.hx" module="haxe.Constraints" extern="1" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/EntryPoint.hx">
		<pending expr="new Array&lt;Void&gt;()" line="44" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<processEvents set="method" line="99" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="126" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Exception.hx">
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__nativeStack>
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<get_message set="method" line="66"><f a=""><c path="String"/></f></get_message>
		<new public="1" set="method" line="36">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Int32.hx" private="1" module="haxe.Int32" extern="1" final="1">
	<negate get="inline" set="null" line="32" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<preIncrement get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="37" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add get="inline" set="null" line="53" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="56" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="64" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="67" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<ucompare public="1" set="method" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Int32.hx" private="1" module="haxe.Int32" extern="1" final="1">
		<negate get="inline" set="null" line="32" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<preIncrement get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="37" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add get="inline" set="null" line="53" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="56" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="64" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="67" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<ucompare public="1" set="method" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<class path="haxe._Int64.___Int64" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_make"</e></m></meta>
		</make>
		<ofInt public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct"</e></m></meta>
		</ofInt>
		<isInt64 public="1" set="method" static="1">
			<f a="d">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct::is"</e></m></meta>
		</isInt64>
		<isNeg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_neg"</e></m></meta>
		</isNeg>
		<isZero public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_zero"</e></m></meta>
		</isZero>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_compare"</e></m></meta>
		</compare>
		<ucompare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ucompare"</e></m></meta>
		</ucompare>
		<toString public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_to_string"</e></m></meta>
		</toString>
		<neg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neg"</e></m></meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_increment"</e></m></meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_increment"</e></m></meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_decrement"</e></m></meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_decrement"</e></m></meta>
		</postDecrement>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</add>
		<addInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</addInt>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</sub>
		<subInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</subInt>
		<intSub public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</intSub>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mul"</e></m></meta>
		</mul>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_div"</e></m></meta>
		</div>
		<mod public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mod"</e></m></meta>
		</mod>
		<eq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eq>
		<eqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eqInt>
		<neq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neq>
		<neqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neqInt>
		<complement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_complement"</e></m></meta>
		</complement>
		<bitAnd public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_and"</e></m></meta>
		</bitAnd>
		<bitOr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_or"</e></m></meta>
		</bitOr>
		<bitXor public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_xor"</e></m></meta>
		</bitXor>
		<shl public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shl"</e></m></meta>
		</shl>
		<shr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shr"</e></m></meta>
		</shr>
		<ushr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ushr"</e></m></meta>
		</ushr>
		<high public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_high"</e></m></meta>
		</high>
		<low public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_low"</e></m></meta>
		</low>
		<meta>
			<m n=":notNull"/>
			<m n=":include"><e>"cpp/Int64.h"</e></m>
			<m n=":native"><e>"cpp::Int64Struct"</e></m>
		</meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><c path="haxe._Int64.___Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":coreApi"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1" final="1">
	<copy public="1" set="method" line="141" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" set="method" line="143" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" set="method" line="148" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" set="method" line="152" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="160" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
	</is>
	<isInt64 public="1" set="method" line="165" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</isInt64>
	<getHigh public="1" set="method" line="169" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" set="method" line="173" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" set="method" line="176" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" set="method" line="179" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" set="method" line="182" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" set="method" line="185" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" set="method" line="188" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="191" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
	<parseString public="1" set="method" line="193" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" set="method" line="197" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="201" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" set="method" line="214" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="216" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="225" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="235" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="244" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add public="1" set="method" line="256" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt set="method" line="261" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" set="method" line="264" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt set="method" line="270" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub set="method" line="274" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" set="method" line="278" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt set="method" line="283" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" set="method" line="286" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt set="method" line="294" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv set="method" line="298" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" set="method" line="301" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt set="method" line="309" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod set="method" line="313" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" set="method" line="317" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt set="method" line="322" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" set="method" line="326" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt set="method" line="331" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt set="method" line="335" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt set="method" line="339" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt set="method" line="343" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte set="method" line="347" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt set="method" line="351" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte set="method" line="355" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt set="method" line="359" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt set="method" line="363" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt set="method" line="367" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte set="method" line="371" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt set="method" line="375" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte set="method" line="379" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement set="method" line="383" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</complement>
	<and public="1" set="method" line="387" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" set="method" line="391" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" set="method" line="395" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" set="method" line="399" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" set="method" line="403" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" set="method" line="407" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
	<get_high set="method" line="412" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
	<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
	<get_low set="method" line="417" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1" final="1">
		<copy public="1" set="method" line="141" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" set="method" line="143" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" set="method" line="148" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" set="method" line="152" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="160" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
		</is>
		<isInt64 public="1" set="method" line="165" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</isInt64>
		<getHigh public="1" set="method" line="169" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" set="method" line="173" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" set="method" line="176" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" set="method" line="179" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" set="method" line="182" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" set="method" line="185" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" set="method" line="188" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="191" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
		<parseString public="1" set="method" line="193" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" set="method" line="197" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="201" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" set="method" line="214" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="216" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="225" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="235" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="244" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add public="1" set="method" line="256" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt set="method" line="261" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" set="method" line="264" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt set="method" line="270" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub set="method" line="274" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" set="method" line="278" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt set="method" line="283" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" set="method" line="286" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt set="method" line="294" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv set="method" line="298" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" set="method" line="301" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt set="method" line="309" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod set="method" line="313" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" set="method" line="317" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt set="method" line="322" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" set="method" line="326" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt set="method" line="331" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt set="method" line="335" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt set="method" line="339" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt set="method" line="343" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte set="method" line="347" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt set="method" line="351" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte set="method" line="355" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt set="method" line="359" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt set="method" line="363" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt set="method" line="367" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte set="method" line="371" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt set="method" line="375" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte set="method" line="379" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement set="method" line="383" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</complement>
		<and public="1" set="method" line="387" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" set="method" line="391" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" set="method" line="395" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" set="method" line="399" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" set="method" line="403" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" set="method" line="407" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
		<get_high set="method" line="412" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
		<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
		<get_low set="method" line="417" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Json" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Json.hx" extern="1">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/Log.hx" extern="1">
		<nativeTrace set="method" static="1">
			<f a="message:posInfo">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__trace"</e></m></meta>
		</nativeTrace>
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<formatOutput public="1" set="method" line="39" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<new set="method" line="22"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<hasEvents public="1" set="method" line="71" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<sortEvents set="method" line="104" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/NativeStackTrace.hx" extern="1">
		<saveStack public="1" get="inline" set="null" line="12" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="16" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</callStack>
		<exceptionStack public="1" set="method" line="21" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noDebug"/>
			</meta>
		</exceptionStack>
		<toHaxe public="1" set="method" line="25" static="1">
			<f a="native:?skip" v=":0">
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.

	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
	<toArray public="1" set="method" line="58" static="1">
		<f a="this">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="Array"><c path="haxe.Rest.T"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
	</toArray>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Rest.Rest_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
		<toArray public="1" set="method" line="58" static="1">
			<f a="this">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="Array"><c path="haxe.Rest.T"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
		</toArray>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Serializer.hx" extern="1">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="582" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="557"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="559"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.Timer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/haxe/Timer.hx">
		<sRunningTimers expr="[]" line="223" static="1">
			<c path="Array"><c path="haxe.Timer"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</sRunningTimers>
		<delay public="1" set="method" line="238" static="1"><f a="f:time">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<getMS set="method" line="251" static="1"><f a=""><x path="Float"/></f></getMS>
		<measure public="1" params="T" set="method" line="256" static="1"><f a="f:?pos">
	<f a=""><c path="measure.T"/></f>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<c path="measure.T"/>
</f></measure>
		<stamp public="1" get="inline" set="null" line="266" static="1"><f a=""><x path="Float"/></f></stamp>
		<mTime><x path="Float"/></mTime>
		<mFireAt><x path="Float"/></mFireAt>
		<mRunning><x path="Bool"/></mRunning>
		<run public="1" set="dynamic" line="263"><f a=""><x path="Void"/></f></run>
		<stop public="1" set="method" line="272"><f a=""><x path="Void"/></f></stop>
		<__check set="method" line="289">
			<f a="inTime">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__check>
		<new public="1" set="method" line="230"><f a="time">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/Unserializer.hx" extern="1">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="67" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="72" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="74" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="470" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<fastLength get="inline" set="null" line="478" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></fastLength>
		<fastCharCodeAt get="inline" set="null" line="486" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastCharCodeAt>
		<fastCharAt get="inline" set="null" line="494" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastCharAt>
		<fastSubstr get="inline" set="null" line="502" static="1"><f a="s:pos:length">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastSubstr>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="126">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="138">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="142"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="150"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="175"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="190"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="205"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="237">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="101">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.ValueException" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/crypto/Adler32.hx" extern="1">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/haxe/io/Bytes.hx" extern="1">
		<alloc public="1" set="method" line="506" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="536" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns bytes representation of the given String, using specific encoding (UTF-8 by default)</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="598" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<ofHex public="1" set="method" line="615" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Convert hexadecimal string to Bytes.
		Support only straight hex string ( Example: "0FDA14058916052309" )</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="636" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="53">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="70">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<blit public="1" set="method" line="89"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="128">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fill>
		<sub public="1" set="method" line="148"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="176"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" set="method" line="229">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="251">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="273">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="299">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="319">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="331">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="344">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="362">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="370">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="385">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="391">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getString>
		<readString public="1" get="inline" set="null" line="456">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="464">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns string representation of the bytes as UTF8</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="485"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="501"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="44"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":autoBuild"><e>lime._internal.macros.AssetsMacro.embedBytes()</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/crypto/Base64.hx" extern="1">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<URL_CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</e></m></meta>
		</URL_CHARS>
		<URL_BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(URL_CHARS)" line="33" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(URL_CHARS)</e></m></meta>
		</URL_BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<urlEncode public="1" set="method" line="55" static="1">
			<f a="bytes:?complement" v=":false">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="str:?complement" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlDecode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/crypto/BaseCode.hx" extern="1">
		<encode public="1" set="method" line="128" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="133" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/crypto/Crc32.hx" extern="1">
		<make public="1" set="method" line="59" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" get="inline" set="null" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" get="inline" set="null" line="42"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" get="inline" set="null" line="52"><f a=""><x path="Int"/></f></get>
		<new public="1" get="inline" set="null" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/ArraySort.hx" extern="1">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="159" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/BalancedTree.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree" extern="1">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="266"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/EnumValueMap.hx" extern="1">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="57"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="69"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="79" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.IntMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="68">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="72">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="76">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="81">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="86">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="90">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="97">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="101">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\n  inline void set(int key, ::null value) { __int_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(int key, bool value) { __int_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(int key, char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, unsigned char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, signed char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, short value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, unsigned short value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, int value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, unsigned int value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(int key, float value) { __int_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(int key, double value) { __int_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(int key, ::String value) { __int_hash_set_string(HX_MAP_THIS,key,value); }\n\n  template<typename V, typename H>\n  inline void set(int key, const ::cpp::Struct<V,H> &value) {__int_hash_set(HX_MAP_THIS,key,value); }\n  template<typename F>\n  inline void set(int key, const ::cpp::Function<F> &value) {__int_hash_set(HX_MAP_THIS,key,value); }\n  template<typename V>\n  inline void set(int key, const ::cpp::Pointer<V> &value) {__int_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n\n  template<typename VALUE>\n  inline void set(Dynamic &key, const VALUE &value) { set( (int)key, value ); }\n\n  inline bool get_bool(int key) { return __int_hash_get_bool(h,key); }\n  inline int get_int(int key) { return __int_hash_get_int(h,key); }\n  inline Float get_float(int key) { return __int_hash_get_float(h,key); }\n  inline String get_string(int key) { return __int_hash_get_string(h,key); }\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.ObjectMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="68">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="72">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="76">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="81">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="86">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="90">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="97">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="101">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\n  inline void set(Dynamic key, ::null value) { __object_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, bool value) { __object_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, char value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, unsigned char value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, signed char value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, short value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, unsigned short value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, int value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, unsigned int value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, float value) { __object_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, double value) { __object_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(Dynamic key, ::String value) { __object_hash_set_string(HX_MAP_THIS,key,value); }\n\n\n  template<typename V, typename H>\n  inline void set(Dynamic key, const ::cpp::Struct<V,H> &value) {__object_hash_set(HX_MAP_THIS,key,value); }\n  template<typename V>\n  inline void set(Dynamic key, const ::cpp::Function<V> &value) {__object_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n  template<typename V>\n  inline void set(Dynamic key, const ::cpp::Pointer<V> &value) {__object_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n\n  inline bool get_bool(Dynamic key) { return __object_hash_get_bool(h,key); }\n  inline int get_int(Dynamic key) { return __object_hash_get_int(h,key); }\n  inline Float get_float(Dynamic key) { return __object_hash_get_float(h,key); }\n  inline String get_string(Dynamic key) { return __object_hash_get_string(h,key); }\n\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.StringMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="68">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="72">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="76">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="81">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="86">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="90">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="97">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="101">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\n  inline void set(String key, ::null value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, bool value) { __string_hash_set(HX_MAP_THIS,key,value); }\n  inline void set(String key, char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, signed char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, unsigned int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\n  inline void set(String key, float value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, double value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\n  inline void set(String key, ::String value) { __string_hash_set_string(HX_MAP_THIS,key,value); }\n\n  template<typename V, typename H>\n  inline void set(String key, const ::cpp::Struct<V,H> &value) {__string_hash_set(HX_MAP_THIS,key,value); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Function<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n  template<typename V>\n  inline void set(String key, const ::cpp::Pointer<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\n\n  template<typename VALUE>\n  inline void set(Dynamic &key, const VALUE &value) { set( (String)key, value ); }\n\n  inline bool get_bool(String key) { return __string_hash_get_bool(h,key); }\n  inline int get_int(String key) { return __string_hash_get_int(h,key); }\n  inline Float get_float(String key) { return __string_hash_get_float(h,key); }\n  inline String get_string(String key) { return __string_hash_get_string(h,key); }\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.format.JsonParser" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/format/JsonParser.hx">
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<invalidChar set="method" line="316"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="321"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="196"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="241"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(only available on `sys` targets)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<new public="1" set="method" line="32"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
	<fromBytes public="1" set="method" line="89" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
		<fromBytes public="1" set="method" line="89" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/BytesBuffer.hx" extern="1">
		<b><t path="haxe.io.BytesData"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76">
			<f a="byte">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="133"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="144"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="149"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="157"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="165"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="202">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/BytesData.hx"><c path="Array"><x path="cpp.UInt8"/></c></typedef>
	<class path="haxe.io.Input" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Input.hx" extern="1">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="106">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="163">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/BytesInput.hx" extern="1">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Output.hx" extern="1">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/BytesOutput.hx" extern="1">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Eof.hx" extern="1">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/FPHelper.hx" extern="1">
		<i32ToFloat public="1" set="method" line="133" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1">
			<f a="low:high">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</i64ToDouble>
		<doubleToI64 public="1" set="method" line="268" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Path" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/Path.hx" extern="1">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/nanjizal/haxe/versions/779b005/std/haxe/iterators/MapKeyValueIterator.hx" extern="1">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.RestIterator" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/iterators/RestIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestIterator.T"/></x></args>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><c path="haxe.iterators.RestIterator.T"/></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.macro.Position" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isStatic>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable is static.</haxe_doc>
			</isStatic>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<defaultType>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional default type of the type parameter.</haxe_doc>
			</defaultType>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<defaultType>
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default type for this type parameter.</haxe_doc>
			</defaultType>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is abstract.</haxe_doc>
			</isAbstract>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>If true the class is abstract and cannot be instantiated directly.</haxe_doc>
			</isAbstract>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.xml.XmlParserException" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/xml/Parser.hx" module="haxe.xml.Parser" extern="1">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/xml/Parser.hx" extern="1">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="415" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/zip/Compress.hx" extern="1">
		<run public="1" set="method" line="45" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_deflate_init set="method" static="1">
			<f a="level">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_deflate_init"</e></m></meta>
		</_deflate_init>
		<_deflate_bound set="method" static="1">
			<f a="handle:length">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_deflate_bound"</e></m></meta>
		</_deflate_bound>
		<_deflate_buffer set="method" static="1">
			<f a="handle:src:srcPos:dest:destPos">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<a>
					<write><x path="Int"/></write>
					<read><x path="Int"/></read>
					<done><x path="Bool"/></done>
				</a>
			</f>
			<meta><m n=":native"><e>"_hx_deflate_buffer"</e></m></meta>
		</_deflate_buffer>
		<_deflate_end set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_deflate_end"</e></m></meta>
		</_deflate_end>
		<_set_flush_mode set="method" static="1">
			<f a="handle:flushMode">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_zip_set_flush_mode"</e></m></meta>
		</_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="33"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="37"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="41"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="29"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/zlib/Build.xml\" />"]]></e></m>
		</meta>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.Huffman" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/nanjizal/haxe/versions/779b005/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="194" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="78"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="121"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/haxe/zip/Uncompress.hx" extern="1">
		<run public="1" set="method" line="45" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_inflate_init set="method" static="1">
			<f a="windowBits">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_inflate_init"</e></m></meta>
		</_inflate_init>
		<_inflate_buffer set="method" static="1">
			<f a="handle:src:srcPos:dest:destPos">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<a>
					<write><x path="Int"/></write>
					<read><x path="Int"/></read>
					<done><x path="Bool"/></done>
				</a>
			</f>
			<meta><m n=":native"><e>"_hx_inflate_buffer"</e></m></meta>
		</_inflate_buffer>
		<_inflate_end set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_inflate_end"</e></m></meta>
		</_inflate_end>
		<_set_flush_mode set="method" static="1">
			<f a="handle:flushMode">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_zip_set_flush_mode"</e></m></meta>
		</_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="33"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="37">
			<f a="f">
				<e path="haxe.zip.FlushMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setFlushMode>
		<close public="1" set="method" line="41"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="29"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/zlib/Build.xml\"/>"]]></e></m>
		</meta>
	</class>
	<class path="justPath._CurveMath.CurveMath_Fields_" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/CurveMath.hx" private="1" module="justPath.CurveMath" final="1">
		<distance public="1" get="inline" set="null" line="3" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadStep public="1" expr="0.03" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="11" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="27" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="30" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="46" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="52" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<quadraticThru public="1" get="inline" set="null" line="58" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="63" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<cubic public="1" get="inline" set="null" line="68" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="justPath.EllipseArcData" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/EllipseArc.hx" module="justPath.EllipseArc"><a>
	<ry><x path="Float"/></ry>
	<rx><x path="Float"/></rx>
	<phiSin><x path="Float"/></phiSin>
	<phiCos><x path="Float"/></phiCos>
	<phi><x path="Float"/></phi>
	<omega><x path="Float"/></omega>
	<delta><x path="Float"/></delta>
	<cy><x path="Float"/></cy>
	<cx><x path="Float"/></cx>
	<alpha><x path="Float"/></alpha>
</a></typedef>
	<class path="justPath.EllipseArc" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/EllipseArc.hx">
		<arc><t path="justPath.EllipseArcData"/></arc>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<alphaPoint public="1" set="method" line="26"><f a=""><x path="Void"/></f></alphaPoint>
		<omegaPoint public="1" set="method" line="29"><f a=""><x path="Void"/></f></omegaPoint>
		<lineRender public="1" set="method" line="33">
			<f a="moveTo:lineTo:dA:?renderFirst" v=":::true">
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ renderFirst : true }</e></m></meta>
		</lineRender>
		<calculatePoint public="1" get="inline" set="null" line="51"><f a="theta">
	<x path="Float"/>
	<x path="Void"/>
</f></calculatePoint>
		<new public="1" set="method" line="23"><f a="arc_">
	<t path="justPath.EllipseArcData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":forward"/>
		</meta>
	</class>
	<abstract path="justPath.ConverterArc" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/EllipseArc.hx" module="justPath.EllipseArc">
		<from><icast><t path="justPath.EllipseArcData"/></icast></from>
		<this><t path="justPath.EllipseArcData"/></this>
		<to><icast><t path="justPath.EllipseArcData"/></icast></to>
		<impl><class path="justPath._EllipseArc.ConverterArc_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/EllipseArc.hx" private="1" module="justPath.EllipseArc" final="1">
	<_new public="1" get="inline" set="null" line="67" static="1">
		<f a="sx:sy:xr:yr:phi:large:sweep:ex:ey">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justPath.ConverterArc"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<zeroto2pi get="inline" set="null" line="139" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
</class></impl>
	</abstract>
	<class path="justPath._EllipseArc.ConverterArc_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/EllipseArc.hx" private="1" module="justPath.EllipseArc" final="1">
		<_new public="1" get="inline" set="null" line="67" static="1">
			<f a="sx:sy:xr:yr:phi:large:sweep:ex:ey">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justPath.ConverterArc"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<zeroto2pi get="inline" set="null" line="139" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
	</class>
	<class path="justPath.ILinePathContext" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/ILinePathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineSegmentTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
	</class>
	<class path="justPath.LinePathContextTrace" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/LinePathContextTrace.hx">
		<implements path="justPath.ILinePathContext"/>
		<moveTo public="1" set="method" line="7"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="10"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineSegmentTo public="1" set="method" line="13"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justPath.StoreF6" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/StoreF6.hx">
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<s0 public="1"><x path="Null"><x path="Float"/></x></s0>
		<s1 public="1"><x path="Null"><x path="Float"/></x></s1>
		<s2 public="1"><x path="Null"><x path="Float"/></x></s2>
		<s3 public="1"><x path="Null"><x path="Float"/></x></s3>
		<s4 public="1"><x path="Null"><x path="Float"/></x></s4>
		<s5 public="1"><x path="Null"><x path="Float"/></x></s5>
		<s6 public="1"><c path="justPath.StoreF6"/></s6>
		<clear public="1" get="inline" set="null" line="13"><f a=""><x path="Void"/></f></clear>
		<length public="1" get="inline" set="null" line="23"><f a=""><x path="Int"/></f></length>
		<push public="1" get="inline" set="null" line="26"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></push>
		<pop public="1" get="inline" set="null" line="46"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<unshift public="1" get="inline" set="null" line="74"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></unshift>
		<shift public="1" get="inline" set="null" line="84"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<toString public="1" get="inline" set="null" line="98"><f a=""><c path="String"/></f></toString>
		<populatedToString public="1" get="inline" set="null" line="105"><f a=""><c path="String"/></f></populatedToString>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<hasNext public="1" get="inline" set="null" line="129"><f a=""><x path="Bool"/></f></hasNext>
		<resetIterator public="1" get="inline" set="null" line="132"><f a=""><x path="Void"/></f></resetIterator>
		<next public="1" get="inline" set="null" line="136"><f a=""><x path="Null"><x path="Float"/></x></f></next>
		<first public="1" get="inline" set="null" line="157"><f a=""><x path="Null"><x path="Float"/></x></f></first>
		<last public="1" get="inline" set="null" line="160"><f a=""><x path="Null"><x path="Float"/></x></f></last>
		<penultimate public="1" get="inline" set="null" line="180"><f a=""><x path="Null"><x path="Float"/></x></f></penultimate>
		<toArray public="1" get="inline" set="null" line="200"><f a=""><x path="Void"/></f></toArray>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justPath.StoreF8" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/StoreF8.hx">
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<s0 public="1"><x path="Null"><x path="Float"/></x></s0>
		<s1 public="1"><x path="Null"><x path="Float"/></x></s1>
		<s2 public="1"><x path="Null"><x path="Float"/></x></s2>
		<s3 public="1"><x path="Null"><x path="Float"/></x></s3>
		<s4 public="1"><x path="Null"><x path="Float"/></x></s4>
		<s5 public="1"><x path="Null"><x path="Float"/></x></s5>
		<s6 public="1"><x path="Null"><x path="Float"/></x></s6>
		<s7 public="1"><x path="Null"><x path="Float"/></x></s7>
		<clear public="1" get="inline" set="null" line="14"><f a=""><x path="Void"/></f></clear>
		<length public="1" get="inline" set="null" line="25"><f a=""><x path="Int"/></f></length>
		<push public="1" get="inline" set="null" line="28"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></push>
		<pop public="1" get="inline" set="null" line="51"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<unshift public="1" get="inline" set="null" line="85"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></unshift>
		<shift public="1" get="inline" set="null" line="95"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<toString public="1" get="inline" set="null" line="110"><f a=""><c path="String"/></f></toString>
		<populatedToString public="1" get="inline" set="null" line="113"><f a=""><c path="String"/></f></populatedToString>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<hasNext public="1" get="inline" set="null" line="138"><f a=""><x path="Bool"/></f></hasNext>
		<resetIterator public="1" get="inline" set="null" line="141"><f a=""><x path="Void"/></f></resetIterator>
		<next public="1" get="inline" set="null" line="144"><f a=""><x path="Null"><x path="Float"/></x></f></next>
		<first public="1" get="inline" set="null" line="169"><f a=""><x path="Null"><x path="Float"/></x></f></first>
		<last public="1" get="inline" set="null" line="172"><f a=""><x path="Null"><x path="Float"/></x></f></last>
		<penultimate public="1" get="inline" set="null" line="196"><f a=""><x path="Null"><x path="Float"/></x></f></penultimate>
		<toArray public="1" get="inline" set="null" line="220"><f a=""><x path="Void"/></f></toArray>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justPath.SvgLinePath" params="" file="/home/nanjizal/haxe/haxe_libraries/justPath/0.0.2/github/fe961fb1f6d63b00d0d30d20dafb851f7204ae73/justPath/SvgLinePath.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<pos expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</pos>
		<lastX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastX>
		<lastY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastY>
		<controlX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlX>
		<controlY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlY>
		<c expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</c>
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<px expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</px>
		<py expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</py>
		<pathContext><c path="justPath.ILinePathContext"/></pathContext>
		<store><c path="justPath.StoreF6"/></store>
		<quickTriangle set="method" line="23"><f a="x0:y0:off">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quickTriangle>
		<parse public="1" set="method" line="30"><f a="str_">
	<c path="String"/>
	<c path="String"/>
</f></parse>
		<extractArgs get="inline" set="null" line="394">
			<f a="?process" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ process : true }</e></m></meta>
		</extractArgs>
		<nextChar get="inline" set="null" line="476"><f a=""><x path="Int"/></f></nextChar>
		<moveTo public="1" get="inline" set="null" line="480"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="486"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadThru public="1" get="inline" set="null" line="493"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<quadTo public="1" get="inline" set="null" line="499"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="508"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotSegmentCoord public="1" get="inline" set="null" line="517">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotSegmentCoord>
		<plotCoord public="1" get="inline" set="null" line="531">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<new public="1" set="method" line="20"><f a="pathContext_">
	<c path="justPath.ILinePathContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.system.CFFI" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/CFFI.hx">
		<__moduleNames expr="null" line="15" static="1">
			<t path="Map">
				<c path="String"/>
				<c path="String"/>
			</t>
			<meta>
				<m n=":value"><e>null</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__moduleNames>
		<available public="1" static="1"><x path="Bool"/></available>
		<enabled public="1" static="1"><x path="Bool"/></enabled>
		<load public="1" set="method" line="51" static="1">
			<f a="library:method:?args:?lazy" v="::0:false">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ lazy : false, args : 0 }</e></m></meta>
			<haxe_doc>* Tries to load a native CFFI primitive on compatible platforms
	 * @param	library	The name of the native library (such as "lime")
	 * @param	method	The exported primitive method name
	 * @param	args	The number of arguments
	 * @param	lazy	Whether to load the symbol immediately, or to allow lazy loading
	 * @return	The loaded method</haxe_doc>
		</load>
		<loadPrime public="1" set="method" static="1"><f a="library:method:signature:lazy">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></loadPrime>
		<__findHaxelib set="method" line="203" static="1"><f a="library">
	<c path="String"/>
	<c path="String"/>
</f></__findHaxelib>
		<__loaderTrace set="method" line="241" static="1"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></__loaderTrace>
		<__sysName set="method" line="316" static="1"><f a=""><c path="String"/></f></__sysName>
		<__tryLoad set="method" line="330" static="1"><f a="name:library:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></__tryLoad>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="sys.io.Process" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/io/Process.hx" extern="1">
		<p><d/></p>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<getPid public="1" set="method" line="103">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="107">
			<f a="?block" v="true">
				<x path="Bool"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="111">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="115">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="94">
			<f a="cmd:?args:?detached">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`detached` allows the created process to be standalone. You cannot communicate with it but you can look at its exit code. Not supported on php.

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="lime._internal.backend.native.NativeCFFI" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeCFFI.hx">
		<lime_application_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_create&quot;, 0)" line="613" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_create", 0)</e></m></meta>
		</lime_application_create>
		<lime_application_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_event_manager_register&quot;, 2)" line="614" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.ApplicationEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_event_manager_register", 2)</e></m></meta>
		</lime_application_event_manager_register>
		<lime_application_exec expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_exec&quot;, 1)" line="615" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_exec", 1)</e></m></meta>
		</lime_application_exec>
		<lime_application_init expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_init&quot;, 1)" line="616" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_init", 1)</e></m></meta>
		</lime_application_init>
		<lime_application_quit expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_quit&quot;, 1)" line="617" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_quit", 1)</e></m></meta>
		</lime_application_quit>
		<lime_application_set_frame_rate expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_set_frame_rate&quot;, 2)" line="618" static="1">
			<f a=":">
				<d/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_set_frame_rate", 2)</e></m></meta>
		</lime_application_set_frame_rate>
		<lime_application_update expr="CFFI.load(&quot;lime&quot;, &quot;lime_application_update&quot;, 1)" line="619" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_application_update", 1)</e></m></meta>
		</lime_application_update>
		<lime_audio_load expr="CFFI.load(&quot;lime&quot;, &quot;lime_audio_load&quot;, 2)" line="620" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_audio_load", 2)</e></m></meta>
		</lime_audio_load>
		<lime_audio_load_bytes expr="CFFI.load(&quot;lime&quot;, &quot;lime_audio_load_bytes&quot;, 2)" line="621" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="lime.media.AudioBuffer"/>
				<c path="lime.media.AudioBuffer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_audio_load_bytes", 2)</e></m></meta>
		</lime_audio_load_bytes>
		<lime_audio_load_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_audio_load_file&quot;, 2)" line="622" static="1">
			<f a=":">
				<c path="String"/>
				<c path="lime.media.AudioBuffer"/>
				<c path="lime.media.AudioBuffer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_audio_load_file", 2)</e></m></meta>
		</lime_audio_load_file>
		<lime_bytes_from_data_pointer expr="CFFI.load(&quot;lime&quot;, &quot;lime_bytes_from_data_pointer&quot;, 3)" line="623" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="lime.utils.Bytes"/>
				<x path="lime.utils.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_bytes_from_data_pointer", 3)</e></m></meta>
		</lime_bytes_from_data_pointer>
		<lime_bytes_get_data_pointer expr="CFFI.load(&quot;lime&quot;, &quot;lime_bytes_get_data_pointer&quot;, 1)" line="624" static="1">
			<f a="">
				<c path="haxe.io.Bytes"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_bytes_get_data_pointer", 1)</e></m></meta>
		</lime_bytes_get_data_pointer>
		<lime_bytes_get_data_pointer_offset expr="CFFI.load(&quot;lime&quot;, &quot;lime_bytes_get_data_pointer_offset&quot;, 2)" line="625" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_bytes_get_data_pointer_offset", 2)</e></m></meta>
		</lime_bytes_get_data_pointer_offset>
		<lime_bytes_read_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_bytes_read_file&quot;, 2)" line="626" static="1">
			<f a=":">
				<c path="String"/>
				<x path="lime.utils.Bytes"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_bytes_read_file", 2)</e></m></meta>
		</lime_bytes_read_file>
		<lime_cffi_get_native_pointer expr="CFFI.load(&quot;lime&quot;, &quot;lime_cffi_get_native_pointer&quot;, 1)" line="627" static="1">
			<f a="">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cffi_get_native_pointer", 1)</e></m></meta>
		</lime_cffi_get_native_pointer>
		<lime_clipboard_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_clipboard_event_manager_register&quot;, 2)" line="628" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.ClipboardEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_clipboard_event_manager_register", 2)</e></m></meta>
		</lime_clipboard_event_manager_register>
		<lime_clipboard_get_text expr="CFFI.load(&quot;lime&quot;, &quot;lime_clipboard_get_text&quot;, 0)" line="629" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_clipboard_get_text", 0)</e></m></meta>
		</lime_clipboard_get_text>
		<lime_clipboard_set_text expr="CFFI.load(&quot;lime&quot;, &quot;lime_clipboard_set_text&quot;, 1)" line="630" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_clipboard_set_text", 1)</e></m></meta>
		</lime_clipboard_set_text>
		<lime_data_pointer_offset expr="CFFI.load(&quot;lime&quot;, &quot;lime_data_pointer_offset&quot;, 2)" line="631" static="1">
			<f a=":">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_data_pointer_offset", 2)</e></m></meta>
		</lime_data_pointer_offset>
		<lime_deflate_compress expr="CFFI.load(&quot;lime&quot;, &quot;lime_deflate_compress&quot;, 2)" line="632" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_deflate_compress", 2)</e></m></meta>
		</lime_deflate_compress>
		<lime_deflate_decompress expr="CFFI.load(&quot;lime&quot;, &quot;lime_deflate_decompress&quot;, 2)" line="633" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_deflate_decompress", 2)</e></m></meta>
		</lime_deflate_decompress>
		<lime_drop_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_drop_event_manager_register&quot;, 2)" line="634" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.DropEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_drop_event_manager_register", 2)</e></m></meta>
		</lime_drop_event_manager_register>
		<lime_file_dialog_open_directory expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_dialog_open_directory&quot;, 3)" line="635" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_dialog_open_directory", 3)</e></m></meta>
		</lime_file_dialog_open_directory>
		<lime_file_dialog_open_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_dialog_open_file&quot;, 3)" line="636" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_dialog_open_file", 3)</e></m></meta>
		</lime_file_dialog_open_file>
		<lime_file_dialog_open_files expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_dialog_open_files&quot;, 3)" line="637" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_dialog_open_files", 3)</e></m></meta>
		</lime_file_dialog_open_files>
		<lime_file_dialog_save_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_dialog_save_file&quot;, 3)" line="638" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_dialog_save_file", 3)</e></m></meta>
		</lime_file_dialog_save_file>
		<lime_file_watcher_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_watcher_create&quot;, 1)" line="639" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_watcher_create", 1)</e></m></meta>
		</lime_file_watcher_create>
		<lime_file_watcher_add_directory expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_watcher_add_directory&quot;, 3)" line="640" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_watcher_add_directory", 3)</e></m></meta>
		</lime_file_watcher_add_directory>
		<lime_file_watcher_remove_directory expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_watcher_remove_directory&quot;, 2)" line="641" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_watcher_remove_directory", 2)</e></m></meta>
		</lime_file_watcher_remove_directory>
		<lime_file_watcher_update expr="CFFI.load(&quot;lime&quot;, &quot;lime_file_watcher_update&quot;, 1)" line="642" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_file_watcher_update", 1)</e></m></meta>
		</lime_file_watcher_update>
		<lime_font_get_ascender expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_ascender&quot;, 1)" line="643" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_ascender", 1)</e></m></meta>
		</lime_font_get_ascender>
		<lime_font_get_descender expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_descender&quot;, 1)" line="644" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_descender", 1)</e></m></meta>
		</lime_font_get_descender>
		<lime_font_get_family_name expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_family_name&quot;, 1)" line="645" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_family_name", 1)</e></m></meta>
		</lime_font_get_family_name>
		<lime_font_get_glyph_index expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_glyph_index&quot;, 2)" line="646" static="1">
			<f a=":">
				<d/>
				<c path="String"/>
				<x path="lime.text.Glyph"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_glyph_index", 2)</e></m></meta>
		</lime_font_get_glyph_index>
		<lime_font_get_glyph_indices expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_glyph_indices&quot;, 2)" line="647" static="1">
			<f a=":">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_glyph_indices", 2)</e></m></meta>
		</lime_font_get_glyph_indices>
		<lime_font_get_glyph_metrics expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_glyph_metrics&quot;, 2)" line="648" static="1">
			<f a=":">
				<d/>
				<x path="lime.text.Glyph"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_glyph_metrics", 2)</e></m></meta>
		</lime_font_get_glyph_metrics>
		<lime_font_get_height expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_height&quot;, 1)" line="649" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_height", 1)</e></m></meta>
		</lime_font_get_height>
		<lime_font_get_num_glyphs expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_num_glyphs&quot;, 1)" line="650" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_num_glyphs", 1)</e></m></meta>
		</lime_font_get_num_glyphs>
		<lime_font_get_underline_position expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_underline_position&quot;, 1)" line="651" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_underline_position", 1)</e></m></meta>
		</lime_font_get_underline_position>
		<lime_font_get_underline_thickness expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_underline_thickness&quot;, 1)" line="652" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_underline_thickness", 1)</e></m></meta>
		</lime_font_get_underline_thickness>
		<lime_font_get_units_per_em expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_get_units_per_em&quot;, 1)" line="653" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_get_units_per_em", 1)</e></m></meta>
		</lime_font_get_units_per_em>
		<lime_font_load expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_load&quot;, 1)" line="654" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_load", 1)</e></m></meta>
		</lime_font_load>
		<lime_font_load_bytes expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_load_bytes&quot;, 1)" line="655" static="1">
			<f a="">
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_load_bytes", 1)</e></m></meta>
		</lime_font_load_bytes>
		<lime_font_load_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_load_file&quot;, 1)" line="656" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_load_file", 1)</e></m></meta>
		</lime_font_load_file>
		<lime_font_outline_decompose expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_outline_decompose&quot;, 2)" line="657" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_outline_decompose", 2)</e></m></meta>
		</lime_font_outline_decompose>
		<lime_font_render_glyph expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_render_glyph&quot;, 3)" line="658" static="1">
			<f a="::">
				<d/>
				<x path="lime.text.Glyph"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_render_glyph", 3)</e></m></meta>
		</lime_font_render_glyph>
		<lime_font_render_glyphs expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_render_glyphs&quot;, 3)" line="659" static="1">
			<f a="::">
				<d/>
				<c path="Array"><x path="Int"/></c>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_render_glyphs", 3)</e></m></meta>
		</lime_font_render_glyphs>
		<lime_font_set_size expr="CFFI.load(&quot;lime&quot;, &quot;lime_font_set_size&quot;, 2)" line="660" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_font_set_size", 2)</e></m></meta>
		</lime_font_set_size>
		<lime_gamepad_add_mappings expr="CFFI.load(&quot;lime&quot;, &quot;lime_gamepad_add_mappings&quot;, 1)" line="661" static="1">
			<f a="">
				<c path="Array"><c path="String"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gamepad_add_mappings", 1)</e></m></meta>
		</lime_gamepad_add_mappings>
		<lime_gamepad_get_device_guid expr="CFFI.load(&quot;lime&quot;, &quot;lime_gamepad_get_device_guid&quot;, 1)" line="662" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gamepad_get_device_guid", 1)</e></m></meta>
		</lime_gamepad_get_device_guid>
		<lime_gamepad_get_device_name expr="CFFI.load(&quot;lime&quot;, &quot;lime_gamepad_get_device_name&quot;, 1)" line="663" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gamepad_get_device_name", 1)</e></m></meta>
		</lime_gamepad_get_device_name>
		<lime_gamepad_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_gamepad_event_manager_register&quot;, 2)" line="664" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.GamepadEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gamepad_event_manager_register", 2)</e></m></meta>
		</lime_gamepad_event_manager_register>
		<lime_gzip_compress expr="CFFI.load(&quot;lime&quot;, &quot;lime_gzip_compress&quot;, 2)" line="665" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gzip_compress", 2)</e></m></meta>
		</lime_gzip_compress>
		<lime_gzip_decompress expr="CFFI.load(&quot;lime&quot;, &quot;lime_gzip_decompress&quot;, 2)" line="666" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gzip_decompress", 2)</e></m></meta>
		</lime_gzip_decompress>
		<lime_haptic_vibrate expr="CFFI.load(&quot;lime&quot;, &quot;lime_haptic_vibrate&quot;, 2)" line="667" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_haptic_vibrate", 2)</e></m></meta>
		</lime_haptic_vibrate>
		<lime_image_encode expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_encode&quot;, 4)" line="668" static="1">
			<f a=":::">
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_encode", 4)</e></m></meta>
		</lime_image_encode>
		<lime_image_load expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_load&quot;, 2)" line="669" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_load", 2)</e></m></meta>
		</lime_image_load>
		<lime_image_load_bytes expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_load_bytes&quot;, 2)" line="670" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="lime.graphics.ImageBuffer"/>
				<c path="lime.graphics.ImageBuffer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_load_bytes", 2)</e></m></meta>
		</lime_image_load_bytes>
		<lime_image_load_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_load_file&quot;, 2)" line="671" static="1">
			<f a=":">
				<c path="String"/>
				<c path="lime.graphics.ImageBuffer"/>
				<c path="lime.graphics.ImageBuffer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_load_file", 2)</e></m></meta>
		</lime_image_load_file>
		<lime_image_data_util_color_transform expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_color_transform&quot;, 3)" line="672" static="1">
			<f a="::">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<x path="lime.math.ColorMatrix"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_color_transform", 3)</e></m></meta>
		</lime_image_data_util_color_transform>
		<lime_image_data_util_copy_channel expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_copy_channel&quot;, -1)" line="673" static="1">
			<f a=":::::">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_copy_channel", -1)</e></m></meta>
		</lime_image_data_util_copy_channel>
		<lime_image_data_util_copy_pixels expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_copy_pixels&quot;, -1)" line="674" static="1">
			<f a="::::::">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="Null"><c path="lime.graphics.Image"/></x>
				<x path="Null"><c path="lime.math.Vector2"/></x>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_copy_pixels", -1)</e></m></meta>
		</lime_image_data_util_copy_pixels>
		<lime_image_data_util_fill_rect expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_fill_rect&quot;, 4)" line="675" static="1">
			<f a=":::">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_fill_rect", 4)</e></m></meta>
		</lime_image_data_util_fill_rect>
		<lime_image_data_util_flood_fill expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_flood_fill&quot;, 5)" line="676" static="1">
			<f a="::::">
				<c path="lime.graphics.Image"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_flood_fill", 5)</e></m></meta>
		</lime_image_data_util_flood_fill>
		<lime_image_data_util_get_pixels expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_get_pixels&quot;, 4)" line="677" static="1">
			<f a=":::">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<x path="lime.graphics.PixelFormat"/>
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_get_pixels", 4)</e></m></meta>
		</lime_image_data_util_get_pixels>
		<lime_image_data_util_merge expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_merge&quot;, -1)" line="678" static="1">
			<f a=":::::::">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_merge", -1)</e></m></meta>
		</lime_image_data_util_merge>
		<lime_image_data_util_multiply_alpha expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_multiply_alpha&quot;, 1)" line="679" static="1">
			<f a="">
				<c path="lime.graphics.Image"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_multiply_alpha", 1)</e></m></meta>
		</lime_image_data_util_multiply_alpha>
		<lime_image_data_util_resize expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_resize&quot;, 4)" line="680" static="1">
			<f a=":::">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_resize", 4)</e></m></meta>
		</lime_image_data_util_resize>
		<lime_image_data_util_set_format expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_set_format&quot;, 2)" line="681" static="1">
			<f a=":">
				<c path="lime.graphics.Image"/>
				<x path="lime.graphics.PixelFormat"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_set_format", 2)</e></m></meta>
		</lime_image_data_util_set_format>
		<lime_image_data_util_set_pixels expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_set_pixels&quot;, -1)" line="682" static="1">
			<f a=":::::">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_set_pixels", -1)</e></m></meta>
		</lime_image_data_util_set_pixels>
		<lime_image_data_util_threshold expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_threshold&quot;, -1)" line="683" static="1">
			<f a=":::::::::::">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_threshold", -1)</e></m></meta>
		</lime_image_data_util_threshold>
		<lime_image_data_util_unmultiply_alpha expr="CFFI.load(&quot;lime&quot;, &quot;lime_image_data_util_unmultiply_alpha&quot;, 1)" line="684" static="1">
			<f a="">
				<c path="lime.graphics.Image"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_image_data_util_unmultiply_alpha", 1)</e></m></meta>
		</lime_image_data_util_unmultiply_alpha>
		<lime_joystick_get_device_guid expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_get_device_guid&quot;, 1)" line="685" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_get_device_guid", 1)</e></m></meta>
		</lime_joystick_get_device_guid>
		<lime_joystick_get_device_name expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_get_device_name&quot;, 1)" line="686" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_get_device_name", 1)</e></m></meta>
		</lime_joystick_get_device_name>
		<lime_joystick_get_num_axes expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_get_num_axes&quot;, 1)" line="687" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_get_num_axes", 1)</e></m></meta>
		</lime_joystick_get_num_axes>
		<lime_joystick_get_num_buttons expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_get_num_buttons&quot;, 1)" line="688" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_get_num_buttons", 1)</e></m></meta>
		</lime_joystick_get_num_buttons>
		<lime_joystick_get_num_hats expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_get_num_hats&quot;, 1)" line="689" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_get_num_hats", 1)</e></m></meta>
		</lime_joystick_get_num_hats>
		<lime_joystick_get_num_trackballs expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_get_num_trackballs&quot;, 1)" line="690" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_get_num_trackballs", 1)</e></m></meta>
		</lime_joystick_get_num_trackballs>
		<lime_joystick_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_joystick_event_manager_register&quot;, 2)" line="691" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.JoystickEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_joystick_event_manager_register", 2)</e></m></meta>
		</lime_joystick_event_manager_register>
		<lime_jpeg_decode_bytes expr="CFFI.load(&quot;lime&quot;, &quot;lime_jpeg_decode_bytes&quot;, 3)" line="692" static="1">
			<f a="::">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Null"><c path="lime.graphics.ImageBuffer"/></x>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_jpeg_decode_bytes", 3)</e></m></meta>
		</lime_jpeg_decode_bytes>
		<lime_jpeg_decode_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_jpeg_decode_file&quot;, 3)" line="693" static="1">
			<f a="::">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Null"><c path="lime.graphics.ImageBuffer"/></x>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_jpeg_decode_file", 3)</e></m></meta>
		</lime_jpeg_decode_file>
		<lime_key_code_from_scan_code expr="CFFI.load(&quot;lime&quot;, &quot;lime_key_code_from_scan_code&quot;, 1)" line="694" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_key_code_from_scan_code", 1)</e></m></meta>
		</lime_key_code_from_scan_code>
		<lime_key_code_to_scan_code expr="CFFI.load(&quot;lime&quot;, &quot;lime_key_code_to_scan_code&quot;, 1)" line="695" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_key_code_to_scan_code", 1)</e></m></meta>
		</lime_key_code_to_scan_code>
		<lime_key_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_key_event_manager_register&quot;, 2)" line="696" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.KeyEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_key_event_manager_register", 2)</e></m></meta>
		</lime_key_event_manager_register>
		<lime_lzma_compress expr="CFFI.load(&quot;lime&quot;, &quot;lime_lzma_compress&quot;, 2)" line="697" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_lzma_compress", 2)</e></m></meta>
		</lime_lzma_compress>
		<lime_lzma_decompress expr="CFFI.load(&quot;lime&quot;, &quot;lime_lzma_decompress&quot;, 2)" line="698" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_lzma_decompress", 2)</e></m></meta>
		</lime_lzma_decompress>
		<lime_mouse_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_mouse_event_manager_register&quot;, 2)" line="699" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.MouseEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_mouse_event_manager_register", 2)</e></m></meta>
		</lime_mouse_event_manager_register>
		<lime_neko_execute expr="CFFI.load(&quot;lime&quot;, &quot;lime_neko_execute&quot;, 1)" line="700" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_neko_execute", 1)</e></m></meta>
		</lime_neko_execute>
		<lime_png_decode_bytes expr="CFFI.load(&quot;lime&quot;, &quot;lime_png_decode_bytes&quot;, 3)" line="701" static="1">
			<f a="::">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Null"><c path="lime.graphics.ImageBuffer"/></x>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_png_decode_bytes", 3)</e></m></meta>
		</lime_png_decode_bytes>
		<lime_png_decode_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_png_decode_file&quot;, 3)" line="702" static="1">
			<f a="::">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Null"><c path="lime.graphics.ImageBuffer"/></x>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_png_decode_file", 3)</e></m></meta>
		</lime_png_decode_file>
		<lime_render_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_render_event_manager_register&quot;, 2)" line="703" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.RenderEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_render_event_manager_register", 2)</e></m></meta>
		</lime_render_event_manager_register>
		<lime_sensor_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_sensor_event_manager_register&quot;, 2)" line="704" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_sensor_event_manager_register", 2)</e></m></meta>
		</lime_sensor_event_manager_register>
		<lime_system_get_allow_screen_timeout expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_allow_screen_timeout&quot;, 0)" line="705" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_allow_screen_timeout", 0)</e></m></meta>
		</lime_system_get_allow_screen_timeout>
		<lime_system_set_allow_screen_timeout expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_set_allow_screen_timeout&quot;, 1)" line="706" static="1">
			<f a="">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_set_allow_screen_timeout", 1)</e></m></meta>
		</lime_system_set_allow_screen_timeout>
		<lime_system_get_device_model expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_device_model&quot;, 0)" line="707" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_device_model", 0)</e></m></meta>
		</lime_system_get_device_model>
		<lime_system_get_device_vendor expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_device_vendor&quot;, 0)" line="708" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_device_vendor", 0)</e></m></meta>
		</lime_system_get_device_vendor>
		<lime_system_get_directory expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_directory&quot;, 3)" line="709" static="1">
			<f a="::">
				<x path="lime.system._System.SystemDirectory"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_directory", 3)</e></m></meta>
		</lime_system_get_directory>
		<lime_system_get_display expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_display&quot;, 1)" line="710" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_display", 1)</e></m></meta>
		</lime_system_get_display>
		<lime_system_get_ios_tablet expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_ios_tablet&quot;, 0)" line="711" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_ios_tablet", 0)</e></m></meta>
		</lime_system_get_ios_tablet>
		<lime_system_get_num_displays expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_num_displays&quot;, 0)" line="712" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_num_displays", 0)</e></m></meta>
		</lime_system_get_num_displays>
		<lime_system_get_platform_label expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_platform_label&quot;, 0)" line="713" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_platform_label", 0)</e></m></meta>
		</lime_system_get_platform_label>
		<lime_system_get_platform_name expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_platform_name&quot;, 0)" line="714" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_platform_name", 0)</e></m></meta>
		</lime_system_get_platform_name>
		<lime_system_get_platform_version expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_platform_version&quot;, 0)" line="715" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_platform_version", 0)</e></m></meta>
		</lime_system_get_platform_version>
		<lime_system_get_timer expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_get_timer&quot;, 0)" line="716" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_get_timer", 0)</e></m></meta>
		</lime_system_get_timer>
		<lime_system_open_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_open_file&quot;, 1)" line="717" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_open_file", 1)</e></m></meta>
		</lime_system_open_file>
		<lime_system_open_url expr="CFFI.load(&quot;lime&quot;, &quot;lime_system_open_url&quot;, 2)" line="718" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_system_open_url", 2)</e></m></meta>
		</lime_system_open_url>
		<lime_text_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_text_event_manager_register&quot;, 2)" line="719" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.TextEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_text_event_manager_register", 2)</e></m></meta>
		</lime_text_event_manager_register>
		<lime_touch_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_touch_event_manager_register&quot;, 2)" line="720" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.TouchEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_touch_event_manager_register", 2)</e></m></meta>
		</lime_touch_event_manager_register>
		<lime_window_alert expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_alert&quot;, 3)" line="721" static="1">
			<f a="::">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_alert", 3)</e></m></meta>
		</lime_window_alert>
		<lime_window_close expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_close&quot;, 1)" line="722" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_close", 1)</e></m></meta>
		</lime_window_close>
		<lime_window_context_flip expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_context_flip&quot;, 1)" line="723" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_context_flip", 1)</e></m></meta>
		</lime_window_context_flip>
		<lime_window_context_lock expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_context_lock&quot;, 1)" line="724" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_context_lock", 1)</e></m></meta>
		</lime_window_context_lock>
		<lime_window_context_make_current expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_context_make_current&quot;, 1)" line="725" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_context_make_current", 1)</e></m></meta>
		</lime_window_context_make_current>
		<lime_window_context_unlock expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_context_unlock&quot;, 1)" line="726" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_context_unlock", 1)</e></m></meta>
		</lime_window_context_unlock>
		<lime_window_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_create&quot;, 5)" line="727" static="1">
			<f a="::::">
				<d/>
				<x path="Null"><x path="Int"/></x>
				<x path="Null"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Null"><c path="String"/></x>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_create", 5)</e></m></meta>
		</lime_window_create>
		<lime_window_focus expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_focus&quot;, 1)" line="728" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_focus", 1)</e></m></meta>
		</lime_window_focus>
		<lime_window_get_context expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_context&quot;, 1)" line="729" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_context", 1)</e></m></meta>
		</lime_window_get_context>
		<lime_window_get_context_type expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_context_type&quot;, 1)" line="730" static="1">
			<f a="">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_context_type", 1)</e></m></meta>
		</lime_window_get_context_type>
		<lime_window_get_display expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_display&quot;, 1)" line="731" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_display", 1)</e></m></meta>
		</lime_window_get_display>
		<lime_window_get_display_mode expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_display_mode&quot;, 1)" line="732" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_display_mode", 1)</e></m></meta>
		</lime_window_get_display_mode>
		<lime_window_get_height expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_height&quot;, 1)" line="733" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_height", 1)</e></m></meta>
		</lime_window_get_height>
		<lime_window_get_id expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_id&quot;, 1)" line="734" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_id", 1)</e></m></meta>
		</lime_window_get_id>
		<lime_window_get_mouse_lock expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_mouse_lock&quot;, 1)" line="735" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_mouse_lock", 1)</e></m></meta>
		</lime_window_get_mouse_lock>
		<lime_window_get_scale expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_scale&quot;, 1)" line="736" static="1">
			<f a="">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_scale", 1)</e></m></meta>
		</lime_window_get_scale>
		<lime_window_get_text_input_enabled expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_text_input_enabled&quot;, 1)" line="737" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_text_input_enabled", 1)</e></m></meta>
		</lime_window_get_text_input_enabled>
		<lime_window_get_width expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_width&quot;, 1)" line="738" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_width", 1)</e></m></meta>
		</lime_window_get_width>
		<lime_window_get_x expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_x&quot;, 1)" line="739" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_x", 1)</e></m></meta>
		</lime_window_get_x>
		<lime_window_get_y expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_get_y&quot;, 1)" line="740" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_get_y", 1)</e></m></meta>
		</lime_window_get_y>
		<lime_window_move expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_move&quot;, 3)" line="741" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_move", 3)</e></m></meta>
		</lime_window_move>
		<lime_window_read_pixels expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_read_pixels&quot;, 3)" line="742" static="1">
			<f a="::">
				<d/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.graphics.ImageBuffer"/>
				<c path="lime.graphics.ImageBuffer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_read_pixels", 3)</e></m></meta>
		</lime_window_read_pixels>
		<lime_window_resize expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_resize&quot;, 3)" line="743" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_resize", 3)</e></m></meta>
		</lime_window_resize>
		<lime_window_set_borderless expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_borderless&quot;, 2)" line="744" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_borderless", 2)</e></m></meta>
		</lime_window_set_borderless>
		<lime_window_set_cursor expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_cursor&quot;, 2)" line="745" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_cursor", 2)</e></m></meta>
		</lime_window_set_cursor>
		<lime_window_set_display_mode expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_display_mode&quot;, 2)" line="746" static="1">
			<f a=":">
				<d/>
				<c path="lime.system.DisplayMode"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_display_mode", 2)</e></m></meta>
		</lime_window_set_display_mode>
		<lime_window_set_fullscreen expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_fullscreen&quot;, 2)" line="747" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_fullscreen", 2)</e></m></meta>
		</lime_window_set_fullscreen>
		<lime_window_set_icon expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_icon&quot;, 2)" line="748" static="1">
			<f a=":">
				<d/>
				<c path="lime.graphics.ImageBuffer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_icon", 2)</e></m></meta>
		</lime_window_set_icon>
		<lime_window_set_maximized expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_maximized&quot;, 2)" line="749" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_maximized", 2)</e></m></meta>
		</lime_window_set_maximized>
		<lime_window_set_minimized expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_minimized&quot;, 2)" line="750" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_minimized", 2)</e></m></meta>
		</lime_window_set_minimized>
		<lime_window_set_mouse_lock expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_mouse_lock&quot;, 2)" line="751" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_mouse_lock", 2)</e></m></meta>
		</lime_window_set_mouse_lock>
		<lime_window_set_resizable expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_resizable&quot;, 2)" line="752" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_resizable", 2)</e></m></meta>
		</lime_window_set_resizable>
		<lime_window_set_text_input_enabled expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_text_input_enabled&quot;, 2)" line="753" static="1">
			<f a=":">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_text_input_enabled", 2)</e></m></meta>
		</lime_window_set_text_input_enabled>
		<lime_window_set_text_input_rect expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_text_input_rect&quot;, 2)" line="754" static="1">
			<f a=":">
				<d/>
				<c path="lime.math.Rectangle"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_text_input_rect", 2)</e></m></meta>
		</lime_window_set_text_input_rect>
		<lime_window_set_title expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_set_title&quot;, 2)" line="755" static="1">
			<f a=":">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_set_title", 2)</e></m></meta>
		</lime_window_set_title>
		<lime_window_warp_mouse expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_warp_mouse&quot;, 3)" line="756" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_warp_mouse", 3)</e></m></meta>
		</lime_window_warp_mouse>
		<lime_window_event_manager_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_window_event_manager_register&quot;, 2)" line="757" static="1">
			<f a=":">
				<f a=""><x path="Void"/></f>
				<c path="lime._internal.backend.native.WindowEventInfo"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_window_event_manager_register", 2)</e></m></meta>
		</lime_window_event_manager_register>
		<lime_zlib_compress expr="CFFI.load(&quot;lime&quot;, &quot;lime_zlib_compress&quot;, 2)" line="758" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_zlib_compress", 2)</e></m></meta>
		</lime_zlib_compress>
		<lime_zlib_decompress expr="CFFI.load(&quot;lime&quot;, &quot;lime_zlib_decompress&quot;, 2)" line="759" static="1">
			<f a=":">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_zlib_decompress", 2)</e></m></meta>
		</lime_zlib_decompress>
		<lime_al_buffer_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_buffer_data&quot;, 5)" line="1821" static="1">
			<f a="::::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_buffer_data", 5)</e></m></meta>
		</lime_al_buffer_data>
		<lime_al_buffer3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_buffer3f&quot;, 5)" line="1822" static="1">
			<f a="::::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_buffer3f", 5)</e></m></meta>
		</lime_al_buffer3f>
		<lime_al_buffer3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_buffer3i&quot;, 5)" line="1823" static="1">
			<f a="::::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_buffer3i", 5)</e></m></meta>
		</lime_al_buffer3i>
		<lime_al_bufferf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_bufferf&quot;, 3)" line="1824" static="1">
			<f a="::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_bufferf", 3)</e></m></meta>
		</lime_al_bufferf>
		<lime_al_bufferfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_bufferfv&quot;, 3)" line="1825" static="1">
			<f a="::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_bufferfv", 3)</e></m></meta>
		</lime_al_bufferfv>
		<lime_al_bufferi expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_bufferi&quot;, 3)" line="1826" static="1">
			<f a="::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_bufferi", 3)</e></m></meta>
		</lime_al_bufferi>
		<lime_al_bufferiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_bufferiv&quot;, 3)" line="1827" static="1">
			<f a="::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_bufferiv", 3)</e></m></meta>
		</lime_al_bufferiv>
		<lime_al_cleanup expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_cleanup&quot;, 0)" line="1828" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_cleanup", 0)</e></m></meta>
		</lime_al_cleanup>
		<lime_al_delete_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_delete_buffer&quot;, 1)" line="1829" static="1">
			<f a="">
				<x path="lime.media.openal.ALBuffer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_delete_buffer", 1)</e></m></meta>
		</lime_al_delete_buffer>
		<lime_al_delete_buffers expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_delete_buffers&quot;, 2)" line="1830" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_delete_buffers", 2)</e></m></meta>
		</lime_al_delete_buffers>
		<lime_al_delete_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_delete_source&quot;, 1)" line="1831" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_delete_source", 1)</e></m></meta>
		</lime_al_delete_source>
		<lime_al_delete_sources expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_delete_sources&quot;, 2)" line="1832" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALSource"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_delete_sources", 2)</e></m></meta>
		</lime_al_delete_sources>
		<lime_al_disable expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_disable&quot;, 1)" line="1833" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_disable", 1)</e></m></meta>
		</lime_al_disable>
		<lime_al_distance_model expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_distance_model&quot;, 1)" line="1834" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_distance_model", 1)</e></m></meta>
		</lime_al_distance_model>
		<lime_al_doppler_factor expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_doppler_factor&quot;, 1)" line="1835" static="1">
			<f a="">
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_doppler_factor", 1)</e></m></meta>
		</lime_al_doppler_factor>
		<lime_al_doppler_velocity expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_doppler_velocity&quot;, 1)" line="1836" static="1">
			<f a="">
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_doppler_velocity", 1)</e></m></meta>
		</lime_al_doppler_velocity>
		<lime_al_enable expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_enable&quot;, 1)" line="1837" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_enable", 1)</e></m></meta>
		</lime_al_enable>
		<lime_al_gen_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_source&quot;, 0)" line="1838" static="1">
			<f a=""><x path="lime.media.openal.ALSource"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_source", 0)</e></m></meta>
		</lime_al_gen_source>
		<lime_al_gen_sources expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_sources&quot;, 1)" line="1839" static="1">
			<f a="">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALSource"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_sources", 1)</e></m></meta>
		</lime_al_gen_sources>
		<lime_al_get_boolean expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_boolean&quot;, 1)" line="1840" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_boolean", 1)</e></m></meta>
		</lime_al_get_boolean>
		<lime_al_get_booleanv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_booleanv&quot;, 2)" line="1841" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Bool"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_booleanv", 2)</e></m></meta>
		</lime_al_get_booleanv>
		<lime_al_gen_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_buffer&quot;, 0)" line="1842" static="1">
			<f a=""><x path="lime.media.openal.ALBuffer"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_buffer", 0)</e></m></meta>
		</lime_al_gen_buffer>
		<lime_al_gen_buffers expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_buffers&quot;, 1)" line="1843" static="1">
			<f a="">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_buffers", 1)</e></m></meta>
		</lime_al_gen_buffers>
		<lime_al_get_buffer3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_buffer3f&quot;, 2)" line="1844" static="1">
			<f a=":">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_buffer3f", 2)</e></m></meta>
		</lime_al_get_buffer3f>
		<lime_al_get_buffer3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_buffer3i&quot;, 2)" line="1845" static="1">
			<f a=":">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_buffer3i", 2)</e></m></meta>
		</lime_al_get_buffer3i>
		<lime_al_get_bufferf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_bufferf&quot;, 2)" line="1846" static="1">
			<f a=":">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_bufferf", 2)</e></m></meta>
		</lime_al_get_bufferf>
		<lime_al_get_bufferfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_bufferfv&quot;, 3)" line="1847" static="1">
			<f a="::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_bufferfv", 3)</e></m></meta>
		</lime_al_get_bufferfv>
		<lime_al_get_bufferi expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_bufferi&quot;, 2)" line="1848" static="1">
			<f a=":">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_bufferi", 2)</e></m></meta>
		</lime_al_get_bufferi>
		<lime_al_get_bufferiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_bufferiv&quot;, 3)" line="1849" static="1">
			<f a="::">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_bufferiv", 3)</e></m></meta>
		</lime_al_get_bufferiv>
		<lime_al_get_double expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_double&quot;, 1)" line="1850" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_double", 1)</e></m></meta>
		</lime_al_get_double>
		<lime_al_get_doublev expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_doublev&quot;, 2)" line="1851" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_doublev", 2)</e></m></meta>
		</lime_al_get_doublev>
		<lime_al_get_enum_value expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_enum_value&quot;, 1)" line="1852" static="1">
			<f a="">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_enum_value", 1)</e></m></meta>
		</lime_al_get_enum_value>
		<lime_al_get_error expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_error&quot;, 0)" line="1853" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_error", 0)</e></m></meta>
		</lime_al_get_error>
		<lime_al_get_float expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_float&quot;, 1)" line="1854" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_float", 1)</e></m></meta>
		</lime_al_get_float>
		<lime_al_get_floatv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_floatv&quot;, 2)" line="1855" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_floatv", 2)</e></m></meta>
		</lime_al_get_floatv>
		<lime_al_get_integer expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_integer&quot;, 1)" line="1856" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_integer", 1)</e></m></meta>
		</lime_al_get_integer>
		<lime_al_get_integerv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_integerv&quot;, 2)" line="1857" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_integerv", 2)</e></m></meta>
		</lime_al_get_integerv>
		<lime_al_get_listener3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_listener3f&quot;, 1)" line="1858" static="1">
			<f a="">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_listener3f", 1)</e></m></meta>
		</lime_al_get_listener3f>
		<lime_al_get_listener3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_listener3i&quot;, 1)" line="1859" static="1">
			<f a="">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_listener3i", 1)</e></m></meta>
		</lime_al_get_listener3i>
		<lime_al_get_listenerf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_listenerf&quot;, 1)" line="1860" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_listenerf", 1)</e></m></meta>
		</lime_al_get_listenerf>
		<lime_al_get_listenerfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_listenerfv&quot;, 2)" line="1861" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_listenerfv", 2)</e></m></meta>
		</lime_al_get_listenerfv>
		<lime_al_get_listeneri expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_listeneri&quot;, 1)" line="1862" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_listeneri", 1)</e></m></meta>
		</lime_al_get_listeneri>
		<lime_al_get_listeneriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_listeneriv&quot;, 2)" line="1863" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_listeneriv", 2)</e></m></meta>
		</lime_al_get_listeneriv>
		<lime_al_get_proc_address expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_proc_address&quot;, 1)" line="1864" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_proc_address", 1)</e></m></meta>
		</lime_al_get_proc_address>
		<lime_al_get_source3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_source3f&quot;, 2)" line="1865" static="1">
			<f a=":">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_source3f", 2)</e></m></meta>
		</lime_al_get_source3f>
		<lime_al_get_source3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_source3i&quot;, 2)" line="1866" static="1">
			<f a=":">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_source3i", 2)</e></m></meta>
		</lime_al_get_source3i>
		<lime_al_get_sourcef expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_sourcef&quot;, 2)" line="1867" static="1">
			<f a=":">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_sourcef", 2)</e></m></meta>
		</lime_al_get_sourcef>
		<lime_al_get_sourcefv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_sourcefv&quot;, 3)" line="1868" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_sourcefv", 3)</e></m></meta>
		</lime_al_get_sourcefv>
		<lime_al_get_sourcei expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_sourcei&quot;, 2)" line="1869" static="1">
			<f a=":">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_sourcei", 2)</e></m></meta>
		</lime_al_get_sourcei>
		<lime_al_get_sourceiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_sourceiv&quot;, 3)" line="1870" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_sourceiv", 3)</e></m></meta>
		</lime_al_get_sourceiv>
		<lime_al_get_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_string&quot;, 1)" line="1871" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_string", 1)</e></m></meta>
		</lime_al_get_string>
		<lime_al_is_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_buffer&quot;, 1)" line="1872" static="1">
			<f a="">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_buffer", 1)</e></m></meta>
		</lime_al_is_buffer>
		<lime_al_is_enabled expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_enabled&quot;, 1)" line="1873" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_enabled", 1)</e></m></meta>
		</lime_al_is_enabled>
		<lime_al_is_extension_present expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_extension_present&quot;, 1)" line="1874" static="1">
			<f a="">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_extension_present", 1)</e></m></meta>
		</lime_al_is_extension_present>
		<lime_al_is_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_source&quot;, 1)" line="1875" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_source", 1)</e></m></meta>
		</lime_al_is_source>
		<lime_al_listener3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_listener3f&quot;, 4)" line="1876" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_listener3f", 4)</e></m></meta>
		</lime_al_listener3f>
		<lime_al_listener3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_listener3i&quot;, 4)" line="1877" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_listener3i", 4)</e></m></meta>
		</lime_al_listener3i>
		<lime_al_listenerf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_listenerf&quot;, 2)" line="1878" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_listenerf", 2)</e></m></meta>
		</lime_al_listenerf>
		<lime_al_listenerfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_listenerfv&quot;, 2)" line="1879" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_listenerfv", 2)</e></m></meta>
		</lime_al_listenerfv>
		<lime_al_listeneri expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_listeneri&quot;, 2)" line="1880" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_listeneri", 2)</e></m></meta>
		</lime_al_listeneri>
		<lime_al_listeneriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_listeneriv&quot;, 2)" line="1881" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_listeneriv", 2)</e></m></meta>
		</lime_al_listeneriv>
		<lime_al_source_pause expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_pause&quot;, 1)" line="1882" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_pause", 1)</e></m></meta>
		</lime_al_source_pause>
		<lime_al_source_pausev expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_pausev&quot;, 2)" line="1883" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALSource"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_pausev", 2)</e></m></meta>
		</lime_al_source_pausev>
		<lime_al_source_play expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_play&quot;, 1)" line="1884" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_play", 1)</e></m></meta>
		</lime_al_source_play>
		<lime_al_source_playv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_playv&quot;, 2)" line="1885" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALSource"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_playv", 2)</e></m></meta>
		</lime_al_source_playv>
		<lime_al_source_queue_buffers expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_queue_buffers&quot;, 3)" line="1886" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_queue_buffers", 3)</e></m></meta>
		</lime_al_source_queue_buffers>
		<lime_al_source_rewind expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_rewind&quot;, 1)" line="1887" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_rewind", 1)</e></m></meta>
		</lime_al_source_rewind>
		<lime_al_source_rewindv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_rewindv&quot;, 2)" line="1888" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALSource"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_rewindv", 2)</e></m></meta>
		</lime_al_source_rewindv>
		<lime_al_source_stop expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_stop&quot;, 1)" line="1889" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_stop", 1)</e></m></meta>
		</lime_al_source_stop>
		<lime_al_source_stopv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_stopv&quot;, 2)" line="1890" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALSource"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_stopv", 2)</e></m></meta>
		</lime_al_source_stopv>
		<lime_al_source_unqueue_buffers expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source_unqueue_buffers&quot;, 2)" line="1891" static="1">
			<f a=":">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source_unqueue_buffers", 2)</e></m></meta>
		</lime_al_source_unqueue_buffers>
		<lime_al_source3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source3f&quot;, 5)" line="1892" static="1">
			<f a="::::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source3f", 5)</e></m></meta>
		</lime_al_source3f>
		<lime_al_source3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_source3i&quot;, 5)" line="1893" static="1">
			<f a="::::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_source3i", 5)</e></m></meta>
		</lime_al_source3i>
		<lime_al_sourcef expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_sourcef&quot;, 3)" line="1894" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_sourcef", 3)</e></m></meta>
		</lime_al_sourcef>
		<lime_al_sourcefv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_sourcefv&quot;, 3)" line="1895" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_sourcefv", 3)</e></m></meta>
		</lime_al_sourcefv>
		<lime_al_sourcei expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_sourcei&quot;, 3)" line="1896" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_sourcei", 3)</e></m></meta>
		</lime_al_sourcei>
		<lime_al_sourceiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_sourceiv&quot;, 3)" line="1897" static="1">
			<f a="::">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_sourceiv", 3)</e></m></meta>
		</lime_al_sourceiv>
		<lime_al_speed_of_sound expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_speed_of_sound&quot;, 1)" line="1898" static="1">
			<f a="">
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_speed_of_sound", 1)</e></m></meta>
		</lime_al_speed_of_sound>
		<lime_alc_close_device expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_close_device&quot;, 1)" line="1899" static="1">
			<f a="">
				<x path="lime.media.openal.ALDevice"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_close_device", 1)</e></m></meta>
		</lime_alc_close_device>
		<lime_alc_create_context expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_create_context&quot;, 2)" line="1900" static="1">
			<f a=":">
				<x path="lime.media.openal.ALDevice"/>
				<x path="Null"><c path="Array"><x path="Int"/></c></x>
				<x path="lime.system.CFFIPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_create_context", 2)</e></m></meta>
		</lime_alc_create_context>
		<lime_alc_destroy_context expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_destroy_context&quot;, 1)" line="1901" static="1">
			<f a="">
				<x path="lime.media.openal.ALContext"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_destroy_context", 1)</e></m></meta>
		</lime_alc_destroy_context>
		<lime_alc_get_contexts_device expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_get_contexts_device&quot;, 1)" line="1902" static="1">
			<f a="">
				<x path="lime.media.openal.ALContext"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_get_contexts_device", 1)</e></m></meta>
		</lime_alc_get_contexts_device>
		<lime_alc_get_current_context expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_get_current_context&quot;, 0)" line="1903" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_get_current_context", 0)</e></m></meta>
		</lime_alc_get_current_context>
		<lime_alc_get_error expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_get_error&quot;, 1)" line="1904" static="1">
			<f a="">
				<x path="lime.media.openal.ALDevice"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_get_error", 1)</e></m></meta>
		</lime_alc_get_error>
		<lime_alc_get_integerv expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_get_integerv&quot;, 3)" line="1905" static="1">
			<f a="::">
				<x path="lime.media.openal.ALDevice"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_get_integerv", 3)</e></m></meta>
		</lime_alc_get_integerv>
		<lime_alc_get_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_get_string&quot;, 2)" line="1906" static="1">
			<f a=":">
				<x path="lime.media.openal.ALDevice"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_get_string", 2)</e></m></meta>
		</lime_alc_get_string>
		<lime_alc_make_context_current expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_make_context_current&quot;, 1)" line="1907" static="1">
			<f a="">
				<x path="lime.media.openal.ALContext"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_make_context_current", 1)</e></m></meta>
		</lime_alc_make_context_current>
		<lime_alc_open_device expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_open_device&quot;, 1)" line="1908" static="1">
			<f a="">
				<x path="Null"><c path="String"/></x>
				<x path="lime.system.CFFIPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_open_device", 1)</e></m></meta>
		</lime_alc_open_device>
		<lime_alc_pause_device expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_pause_device&quot;, 1)" line="1909" static="1">
			<f a="">
				<x path="lime.media.openal.ALDevice"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_pause_device", 1)</e></m></meta>
		</lime_alc_pause_device>
		<lime_alc_process_context expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_process_context&quot;, 1)" line="1910" static="1">
			<f a="">
				<x path="lime.media.openal.ALContext"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_process_context", 1)</e></m></meta>
		</lime_alc_process_context>
		<lime_alc_resume_device expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_resume_device&quot;, 1)" line="1911" static="1">
			<f a="">
				<x path="lime.media.openal.ALDevice"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_resume_device", 1)</e></m></meta>
		</lime_alc_resume_device>
		<lime_alc_suspend_context expr="CFFI.load(&quot;lime&quot;, &quot;lime_alc_suspend_context&quot;, 1)" line="1912" static="1">
			<f a="">
				<x path="lime.media.openal.ALContext"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_alc_suspend_context", 1)</e></m></meta>
		</lime_alc_suspend_context>
		<lime_al_gen_filter expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_filter&quot;, 0)" line="1913" static="1">
			<f a=""><x path="lime.media.openal.ALFilter"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_filter", 0)</e></m></meta>
		</lime_al_gen_filter>
		<lime_al_filteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_filteri&quot;, 3)" line="1914" static="1">
			<f a="::">
				<x path="lime.media.openal.ALFilter"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_filteri", 3)</e></m></meta>
		</lime_al_filteri>
		<lime_al_filterf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_filterf&quot;, 3)" line="1915" static="1">
			<f a="::">
				<x path="lime.media.openal.ALFilter"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_filterf", 3)</e></m></meta>
		</lime_al_filterf>
		<lime_al_remove_direct_filter expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_remove_direct_filter&quot;, 1)" line="1916" static="1">
			<f a="">
				<x path="lime.media.openal.ALSource"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_remove_direct_filter", 1)</e></m></meta>
		</lime_al_remove_direct_filter>
		<lime_al_is_filter expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_filter&quot;, 1)" line="1917" static="1">
			<f a="">
				<x path="lime.media.openal.ALFilter"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_filter", 1)</e></m></meta>
		</lime_al_is_filter>
		<lime_al_get_filteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_get_filteri&quot;, 2)" line="1918" static="1">
			<f a=":">
				<x path="lime.media.openal.ALFilter"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_get_filteri", 2)</e></m></meta>
		</lime_al_get_filteri>
		<lime_al_gen_effect expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_effect&quot;, 0)" line="1919" static="1">
			<f a=""><x path="lime.media.openal.ALEffect"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_effect", 0)</e></m></meta>
		</lime_al_gen_effect>
		<lime_al_effectf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_effectf&quot;, 3)" line="1920" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_effectf", 3)</e></m></meta>
		</lime_al_effectf>
		<lime_al_effectfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_effectfv&quot;, 3)" line="1921" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_effectfv", 3)</e></m></meta>
		</lime_al_effectfv>
		<lime_al_effecti expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_effecti&quot;, 3)" line="1922" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_effecti", 3)</e></m></meta>
		</lime_al_effecti>
		<lime_al_effectiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_effectiv&quot;, 3)" line="1923" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_effectiv", 3)</e></m></meta>
		</lime_al_effectiv>
		<lime_al_is_effect expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_effect&quot;, 1)" line="1924" static="1">
			<f a="">
				<x path="lime.media.openal.ALEffect"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_effect", 1)</e></m></meta>
		</lime_al_is_effect>
		<lime_al_gen_aux expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_gen_aux&quot;, 0)" line="1925" static="1">
			<f a=""><x path="lime.media.openal.ALAuxiliaryEffectSlot"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_gen_aux", 0)</e></m></meta>
		</lime_al_gen_aux>
		<lime_al_auxf expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_auxf&quot;, 3)" line="1926" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_auxf", 3)</e></m></meta>
		</lime_al_auxf>
		<lime_al_auxfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_auxfv&quot;, 3)" line="1927" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_auxfv", 3)</e></m></meta>
		</lime_al_auxfv>
		<lime_al_auxi expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_auxi&quot;, 3)" line="1928" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_auxi", 3)</e></m></meta>
		</lime_al_auxi>
		<lime_al_auxiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_auxiv&quot;, 3)" line="1929" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_auxiv", 3)</e></m></meta>
		</lime_al_auxiv>
		<lime_al_is_aux expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_is_aux&quot;, 1)" line="1930" static="1">
			<f a="">
				<x path="lime.media.openal.ALAuxiliaryEffectSlot"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_is_aux", 1)</e></m></meta>
		</lime_al_is_aux>
		<lime_al_remove_send expr="CFFI.load(&quot;lime&quot;, &quot;lime_al_remove_send&quot;, 2)" line="1931" static="1">
			<f a=":">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_al_remove_send", 2)</e></m></meta>
		</lime_al_remove_send>
		<lime_cairo_arc expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_arc&quot;, -1)" line="2770" static="1">
			<f a=":::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_arc", -1)</e></m></meta>
		</lime_cairo_arc>
		<lime_cairo_arc_negative expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_arc_negative&quot;, -1)" line="2771" static="1">
			<f a=":::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_arc_negative", -1)</e></m></meta>
		</lime_cairo_arc_negative>
		<lime_cairo_clip expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_clip&quot;, 1)" line="2772" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_clip", 1)</e></m></meta>
		</lime_cairo_clip>
		<lime_cairo_clip_preserve expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_clip_preserve&quot;, 1)" line="2773" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_clip_preserve", 1)</e></m></meta>
		</lime_cairo_clip_preserve>
		<lime_cairo_clip_extents expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_clip_extents&quot;, 5)" line="2774" static="1">
			<f a="::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_clip_extents", 5)</e></m></meta>
		</lime_cairo_clip_extents>
		<lime_cairo_close_path expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_close_path&quot;, 1)" line="2775" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_close_path", 1)</e></m></meta>
		</lime_cairo_close_path>
		<lime_cairo_copy_page expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_copy_page&quot;, 1)" line="2776" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_copy_page", 1)</e></m></meta>
		</lime_cairo_copy_page>
		<lime_cairo_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_create&quot;, 1)" line="2777" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="lime.system.CFFIPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_create", 1)</e></m></meta>
		</lime_cairo_create>
		<lime_cairo_curve_to expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_curve_to&quot;, -1)" line="2778" static="1">
			<f a="::::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_curve_to", -1)</e></m></meta>
		</lime_cairo_curve_to>
		<lime_cairo_fill expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_fill&quot;, 1)" line="2779" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_fill", 1)</e></m></meta>
		</lime_cairo_fill>
		<lime_cairo_fill_extents expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_fill_extents&quot;, 5)" line="2780" static="1">
			<f a="::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_fill_extents", 5)</e></m></meta>
		</lime_cairo_fill_extents>
		<lime_cairo_fill_preserve expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_fill_preserve&quot;, 1)" line="2781" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_fill_preserve", 1)</e></m></meta>
		</lime_cairo_fill_preserve>
		<lime_cairo_get_antialias expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_antialias&quot;, 1)" line="2782" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_antialias", 1)</e></m></meta>
		</lime_cairo_get_antialias>
		<lime_cairo_get_current_point expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_current_point&quot;, 1)" line="2783" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_current_point", 1)</e></m></meta>
		</lime_cairo_get_current_point>
		<lime_cairo_get_dash expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_dash&quot;, 1)" line="2784" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_dash", 1)</e></m></meta>
		</lime_cairo_get_dash>
		<lime_cairo_get_dash_count expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_dash_count&quot;, 1)" line="2785" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_dash_count", 1)</e></m></meta>
		</lime_cairo_get_dash_count>
		<lime_cairo_get_fill_rule expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_fill_rule&quot;, 1)" line="2786" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFillRule"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_fill_rule", 1)</e></m></meta>
		</lime_cairo_get_fill_rule>
		<lime_cairo_get_font_face expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_font_face&quot;, 1)" line="2787" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFontFace"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_font_face", 1)</e></m></meta>
		</lime_cairo_get_font_face>
		<lime_cairo_get_font_options expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_font_options&quot;, 1)" line="2788" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFontOptions"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_font_options", 1)</e></m></meta>
		</lime_cairo_get_font_options>
		<lime_cairo_get_group_target expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_group_target&quot;, 1)" line="2789" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSurface"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_group_target", 1)</e></m></meta>
		</lime_cairo_get_group_target>
		<lime_cairo_get_line_cap expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_line_cap&quot;, 1)" line="2790" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoLineCap"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_line_cap", 1)</e></m></meta>
		</lime_cairo_get_line_cap>
		<lime_cairo_get_line_join expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_line_join&quot;, 1)" line="2791" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoLineJoin"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_line_join", 1)</e></m></meta>
		</lime_cairo_get_line_join>
		<lime_cairo_get_line_width expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_line_width&quot;, 1)" line="2792" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_line_width", 1)</e></m></meta>
		</lime_cairo_get_line_width>
		<lime_cairo_get_matrix expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_matrix&quot;, 1)" line="2793" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_matrix", 1)</e></m></meta>
		</lime_cairo_get_matrix>
		<lime_cairo_get_miter_limit expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_miter_limit&quot;, 1)" line="2794" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_miter_limit", 1)</e></m></meta>
		</lime_cairo_get_miter_limit>
		<lime_cairo_get_operator expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_operator&quot;, 1)" line="2795" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoOperator"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_operator", 1)</e></m></meta>
		</lime_cairo_get_operator>
		<lime_cairo_get_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_source&quot;, 1)" line="2796" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_source", 1)</e></m></meta>
		</lime_cairo_get_source>
		<lime_cairo_get_target expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_target&quot;, 1)" line="2797" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSurface"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_target", 1)</e></m></meta>
		</lime_cairo_get_target>
		<lime_cairo_get_tolerance expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_get_tolerance&quot;, 1)" line="2798" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_get_tolerance", 1)</e></m></meta>
		</lime_cairo_get_tolerance>
		<lime_cairo_has_current_point expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_has_current_point&quot;, 1)" line="2799" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_has_current_point", 1)</e></m></meta>
		</lime_cairo_has_current_point>
		<lime_cairo_identity_matrix expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_identity_matrix&quot;, 1)" line="2800" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_identity_matrix", 1)</e></m></meta>
		</lime_cairo_identity_matrix>
		<lime_cairo_in_clip expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_in_clip&quot;, 3)" line="2801" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_in_clip", 3)</e></m></meta>
		</lime_cairo_in_clip>
		<lime_cairo_in_fill expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_in_fill&quot;, 3)" line="2802" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_in_fill", 3)</e></m></meta>
		</lime_cairo_in_fill>
		<lime_cairo_in_stroke expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_in_stroke&quot;, 3)" line="2803" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_in_stroke", 3)</e></m></meta>
		</lime_cairo_in_stroke>
		<lime_cairo_line_to expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_line_to&quot;, 3)" line="2804" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_line_to", 3)</e></m></meta>
		</lime_cairo_line_to>
		<lime_cairo_mask expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_mask&quot;, 2)" line="2805" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_mask", 2)</e></m></meta>
		</lime_cairo_mask>
		<lime_cairo_mask_surface expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_mask_surface&quot;, 4)" line="2806" static="1">
			<f a=":::">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_mask_surface", 4)</e></m></meta>
		</lime_cairo_mask_surface>
		<lime_cairo_move_to expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_move_to&quot;, 3)" line="2807" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_move_to", 3)</e></m></meta>
		</lime_cairo_move_to>
		<lime_cairo_new_path expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_new_path&quot;, 1)" line="2808" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_new_path", 1)</e></m></meta>
		</lime_cairo_new_path>
		<lime_cairo_paint expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_paint&quot;, 1)" line="2809" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_paint", 1)</e></m></meta>
		</lime_cairo_paint>
		<lime_cairo_paint_with_alpha expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_paint_with_alpha&quot;, 2)" line="2810" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_paint_with_alpha", 2)</e></m></meta>
		</lime_cairo_paint_with_alpha>
		<lime_cairo_pop_group expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pop_group&quot;, 1)" line="2811" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pop_group", 1)</e></m></meta>
		</lime_cairo_pop_group>
		<lime_cairo_pop_group_to_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pop_group_to_source&quot;, 1)" line="2812" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pop_group_to_source", 1)</e></m></meta>
		</lime_cairo_pop_group_to_source>
		<lime_cairo_push_group expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_push_group&quot;, 1)" line="2813" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_push_group", 1)</e></m></meta>
		</lime_cairo_push_group>
		<lime_cairo_push_group_with_content expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_push_group_with_content&quot;, 2)" line="2814" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoContent"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_push_group_with_content", 2)</e></m></meta>
		</lime_cairo_push_group_with_content>
		<lime_cairo_rectangle expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_rectangle&quot;, 5)" line="2815" static="1">
			<f a="::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_rectangle", 5)</e></m></meta>
		</lime_cairo_rectangle>
		<lime_cairo_rel_curve_to expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_rel_curve_to&quot;, -1)" line="2816" static="1">
			<f a="::::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_rel_curve_to", -1)</e></m></meta>
		</lime_cairo_rel_curve_to>
		<lime_cairo_rel_line_to expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_rel_line_to&quot;, 3)" line="2817" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_rel_line_to", 3)</e></m></meta>
		</lime_cairo_rel_line_to>
		<lime_cairo_rel_move_to expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_rel_move_to&quot;, 3)" line="2818" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_rel_move_to", 3)</e></m></meta>
		</lime_cairo_rel_move_to>
		<lime_cairo_reset_clip expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_reset_clip&quot;, 1)" line="2819" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_reset_clip", 1)</e></m></meta>
		</lime_cairo_reset_clip>
		<lime_cairo_restore expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_restore&quot;, 1)" line="2820" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_restore", 1)</e></m></meta>
		</lime_cairo_restore>
		<lime_cairo_rotate expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_rotate&quot;, 2)" line="2821" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_rotate", 2)</e></m></meta>
		</lime_cairo_rotate>
		<lime_cairo_save expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_save&quot;, 1)" line="2822" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_save", 1)</e></m></meta>
		</lime_cairo_save>
		<lime_cairo_scale expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_scale&quot;, 3)" line="2823" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_scale", 3)</e></m></meta>
		</lime_cairo_scale>
		<lime_cairo_set_antialias expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_antialias&quot;, 2)" line="2824" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_antialias", 2)</e></m></meta>
		</lime_cairo_set_antialias>
		<lime_cairo_set_dash expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_dash&quot;, 2)" line="2825" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<c path="Array"><x path="Float"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_dash", 2)</e></m></meta>
		</lime_cairo_set_dash>
		<lime_cairo_set_fill_rule expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_fill_rule&quot;, 2)" line="2826" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFillRule"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_fill_rule", 2)</e></m></meta>
		</lime_cairo_set_fill_rule>
		<lime_cairo_set_font_face expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_font_face&quot;, 2)" line="2827" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFontFace"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_font_face", 2)</e></m></meta>
		</lime_cairo_set_font_face>
		<lime_cairo_set_font_options expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_font_options&quot;, 2)" line="2828" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFontOptions"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_font_options", 2)</e></m></meta>
		</lime_cairo_set_font_options>
		<lime_cairo_set_font_size expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_font_size&quot;, 2)" line="2829" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_font_size", 2)</e></m></meta>
		</lime_cairo_set_font_size>
		<lime_cairo_set_line_cap expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_line_cap&quot;, 2)" line="2830" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoLineCap"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_line_cap", 2)</e></m></meta>
		</lime_cairo_set_line_cap>
		<lime_cairo_set_line_join expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_line_join&quot;, 2)" line="2831" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoLineJoin"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_line_join", 2)</e></m></meta>
		</lime_cairo_set_line_join>
		<lime_cairo_set_line_width expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_line_width&quot;, 2)" line="2832" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_line_width", 2)</e></m></meta>
		</lime_cairo_set_line_width>
		<lime_cairo_set_matrix expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_matrix&quot;, -1)" line="2833" static="1">
			<f a="::::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_matrix", -1)</e></m></meta>
		</lime_cairo_set_matrix>
		<lime_cairo_set_miter_limit expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_miter_limit&quot;, 2)" line="2834" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_miter_limit", 2)</e></m></meta>
		</lime_cairo_set_miter_limit>
		<lime_cairo_set_operator expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_operator&quot;, 2)" line="2835" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoOperator"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_operator", 2)</e></m></meta>
		</lime_cairo_set_operator>
		<lime_cairo_set_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_source&quot;, 2)" line="2836" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_source", 2)</e></m></meta>
		</lime_cairo_set_source>
		<lime_cairo_set_source_rgb expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_source_rgb&quot;, 4)" line="2837" static="1">
			<f a=":::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_source_rgb", 4)</e></m></meta>
		</lime_cairo_set_source_rgb>
		<lime_cairo_set_source_rgba expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_source_rgba&quot;, 5)" line="2838" static="1">
			<f a="::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_source_rgba", 5)</e></m></meta>
		</lime_cairo_set_source_rgba>
		<lime_cairo_set_source_surface expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_source_surface&quot;, 4)" line="2839" static="1">
			<f a=":::">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_source_surface", 4)</e></m></meta>
		</lime_cairo_set_source_surface>
		<lime_cairo_set_tolerance expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_set_tolerance&quot;, 2)" line="2840" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_set_tolerance", 2)</e></m></meta>
		</lime_cairo_set_tolerance>
		<lime_cairo_show_glyphs expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_show_glyphs&quot;, 2)" line="2841" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<c path="Array"><c path="lime.graphics.cairo.CairoGlyph"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_show_glyphs", 2)</e></m></meta>
		</lime_cairo_show_glyphs>
		<lime_cairo_show_page expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_show_page&quot;, 1)" line="2842" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_show_page", 1)</e></m></meta>
		</lime_cairo_show_page>
		<lime_cairo_show_text expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_show_text&quot;, 2)" line="2843" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_show_text", 2)</e></m></meta>
		</lime_cairo_show_text>
		<lime_cairo_status expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_status&quot;, 1)" line="2844" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoStatus"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_status", 1)</e></m></meta>
		</lime_cairo_status>
		<lime_cairo_stroke expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_stroke&quot;, 1)" line="2845" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_stroke", 1)</e></m></meta>
		</lime_cairo_stroke>
		<lime_cairo_stroke_extents expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_stroke_extents&quot;, 5)" line="2846" static="1">
			<f a="::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_stroke_extents", 5)</e></m></meta>
		</lime_cairo_stroke_extents>
		<lime_cairo_stroke_preserve expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_stroke_preserve&quot;, 1)" line="2847" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_stroke_preserve", 1)</e></m></meta>
		</lime_cairo_stroke_preserve>
		<lime_cairo_text_path expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_text_path&quot;, 2)" line="2848" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_text_path", 2)</e></m></meta>
		</lime_cairo_text_path>
		<lime_cairo_transform expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_transform&quot;, 2)" line="2849" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<c path="lime.math.Matrix3"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_transform", 2)</e></m></meta>
		</lime_cairo_transform>
		<lime_cairo_translate expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_translate&quot;, 3)" line="2850" static="1">
			<f a="::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_translate", 3)</e></m></meta>
		</lime_cairo_translate>
		<lime_cairo_version expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_version&quot;, 0)" line="2851" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_version", 0)</e></m></meta>
		</lime_cairo_version>
		<lime_cairo_version_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_version_string&quot;, 0)" line="2852" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_version_string", 0)</e></m></meta>
		</lime_cairo_version_string>
		<lime_cairo_font_face_status expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_face_status&quot;, 1)" line="2853" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoStatus"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_face_status", 1)</e></m></meta>
		</lime_cairo_font_face_status>
		<lime_cairo_font_options_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_create&quot;, 0)" line="2854" static="1">
			<f a=""><x path="lime.system.CFFIPointer"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_create", 0)</e></m></meta>
		</lime_cairo_font_options_create>
		<lime_cairo_font_options_get_antialias expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_get_antialias&quot;, 1)" line="2855" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_get_antialias", 1)</e></m></meta>
		</lime_cairo_font_options_get_antialias>
		<lime_cairo_font_options_get_hint_metrics expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_get_hint_metrics&quot;, 1)" line="2856" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintMetrics"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_get_hint_metrics", 1)</e></m></meta>
		</lime_cairo_font_options_get_hint_metrics>
		<lime_cairo_font_options_get_hint_style expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_get_hint_style&quot;, 1)" line="2857" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintStyle"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_get_hint_style", 1)</e></m></meta>
		</lime_cairo_font_options_get_hint_style>
		<lime_cairo_font_options_get_subpixel_order expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_get_subpixel_order&quot;, 1)" line="2858" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_get_subpixel_order", 1)</e></m></meta>
		</lime_cairo_font_options_get_subpixel_order>
		<lime_cairo_font_options_set_antialias expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_set_antialias&quot;, 2)" line="2859" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_set_antialias", 2)</e></m></meta>
		</lime_cairo_font_options_set_antialias>
		<lime_cairo_font_options_set_hint_metrics expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_set_hint_metrics&quot;, 2)" line="2860" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintMetrics"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_set_hint_metrics", 2)</e></m></meta>
		</lime_cairo_font_options_set_hint_metrics>
		<lime_cairo_font_options_set_hint_style expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_set_hint_style&quot;, 2)" line="2861" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintStyle"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_set_hint_style", 2)</e></m></meta>
		</lime_cairo_font_options_set_hint_style>
		<lime_cairo_font_options_set_subpixel_order expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_font_options_set_subpixel_order&quot;, 2)" line="2862" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_font_options_set_subpixel_order", 2)</e></m></meta>
		</lime_cairo_font_options_set_subpixel_order>
		<lime_cairo_ft_font_face_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_ft_font_face_create&quot;, 2)" line="2863" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_ft_font_face_create", 2)</e></m></meta>
		</lime_cairo_ft_font_face_create>
		<lime_cairo_image_surface_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_create&quot;, 3)" line="2864" static="1">
			<f a="::">
				<x path="lime.graphics.cairo.CairoFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.cairo.CairoSurface"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_create", 3)</e></m></meta>
		</lime_cairo_image_surface_create>
		<lime_cairo_image_surface_create_for_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_create_for_data&quot;, 5)" line="2865" static="1">
			<f a="::::">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.graphics.cairo.CairoFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.cairo.CairoSurface"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_create_for_data", 5)</e></m></meta>
		</lime_cairo_image_surface_create_for_data>
		<lime_cairo_image_surface_get_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_get_data&quot;, 1)" line="2866" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_get_data", 1)</e></m></meta>
		</lime_cairo_image_surface_get_data>
		<lime_cairo_image_surface_get_format expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_get_format&quot;, 1)" line="2867" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="lime.graphics.cairo.CairoFormat"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_get_format", 1)</e></m></meta>
		</lime_cairo_image_surface_get_format>
		<lime_cairo_image_surface_get_height expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_get_height&quot;, 1)" line="2868" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_get_height", 1)</e></m></meta>
		</lime_cairo_image_surface_get_height>
		<lime_cairo_image_surface_get_stride expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_get_stride&quot;, 1)" line="2869" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_get_stride", 1)</e></m></meta>
		</lime_cairo_image_surface_get_stride>
		<lime_cairo_image_surface_get_width expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_image_surface_get_width&quot;, 1)" line="2870" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_image_surface_get_width", 1)</e></m></meta>
		</lime_cairo_image_surface_get_width>
		<lime_cairo_pattern_add_color_stop_rgb expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_add_color_stop_rgb&quot;, 5)" line="2871" static="1">
			<f a="::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_add_color_stop_rgb", 5)</e></m></meta>
		</lime_cairo_pattern_add_color_stop_rgb>
		<lime_cairo_pattern_add_color_stop_rgba expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_add_color_stop_rgba&quot;, -1)" line="2872" static="1">
			<f a=":::::">
				<x path="lime.system.CFFIPointer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_add_color_stop_rgba", -1)</e></m></meta>
		</lime_cairo_pattern_add_color_stop_rgba>
		<lime_cairo_pattern_create_for_surface expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_create_for_surface&quot;, 1)" line="2873" static="1">
			<f a="">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_create_for_surface", 1)</e></m></meta>
		</lime_cairo_pattern_create_for_surface>
		<lime_cairo_pattern_create_linear expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_create_linear&quot;, 4)" line="2874" static="1">
			<f a=":::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_create_linear", 4)</e></m></meta>
		</lime_cairo_pattern_create_linear>
		<lime_cairo_pattern_create_radial expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_create_radial&quot;, -1)" line="2875" static="1">
			<f a=":::::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_create_radial", -1)</e></m></meta>
		</lime_cairo_pattern_create_radial>
		<lime_cairo_pattern_create_rgb expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_create_rgb&quot;, 3)" line="2876" static="1">
			<f a="::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_create_rgb", 3)</e></m></meta>
		</lime_cairo_pattern_create_rgb>
		<lime_cairo_pattern_create_rgba expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_create_rgba&quot;, 4)" line="2877" static="1">
			<f a=":::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_create_rgba", 4)</e></m></meta>
		</lime_cairo_pattern_create_rgba>
		<lime_cairo_pattern_get_color_stop_count expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_get_color_stop_count&quot;, 1)" line="2878" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_get_color_stop_count", 1)</e></m></meta>
		</lime_cairo_pattern_get_color_stop_count>
		<lime_cairo_pattern_get_extend expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_get_extend&quot;, 1)" line="2879" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoExtend"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_get_extend", 1)</e></m></meta>
		</lime_cairo_pattern_get_extend>
		<lime_cairo_pattern_get_filter expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_get_filter&quot;, 1)" line="2880" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFilter"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_get_filter", 1)</e></m></meta>
		</lime_cairo_pattern_get_filter>
		<lime_cairo_pattern_get_matrix expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_get_matrix&quot;, 1)" line="2881" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_get_matrix", 1)</e></m></meta>
		</lime_cairo_pattern_get_matrix>
		<lime_cairo_pattern_set_extend expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_set_extend&quot;, 2)" line="2882" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoExtend"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_set_extend", 2)</e></m></meta>
		</lime_cairo_pattern_set_extend>
		<lime_cairo_pattern_set_filter expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_set_filter&quot;, 2)" line="2883" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFilter"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_set_filter", 2)</e></m></meta>
		</lime_cairo_pattern_set_filter>
		<lime_cairo_pattern_set_matrix expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_pattern_set_matrix&quot;, 2)" line="2884" static="1">
			<f a=":">
				<x path="lime.system.CFFIPointer"/>
				<c path="lime.math.Matrix3"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_pattern_set_matrix", 2)</e></m></meta>
		</lime_cairo_pattern_set_matrix>
		<lime_cairo_surface_flush expr="CFFI.load(&quot;lime&quot;, &quot;lime_cairo_surface_flush&quot;, 1)" line="2885" static="1">
			<f a="">
				<x path="lime.system.CFFIPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_cairo_surface_flush", 1)</e></m></meta>
		</lime_cairo_surface_flush>
		<lime_curl_getdate expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_getdate&quot;, 2)" line="3390" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_getdate", 2)</e></m></meta>
		</lime_curl_getdate>
		<lime_curl_global_cleanup expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_global_cleanup&quot;, 0)" line="3391" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_global_cleanup", 0)</e></m></meta>
		</lime_curl_global_cleanup>
		<lime_curl_global_init expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_global_init&quot;, 1)" line="3392" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_global_init", 1)</e></m></meta>
		</lime_curl_global_init>
		<lime_curl_version expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_version&quot;, 0)" line="3393" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_version", 0)</e></m></meta>
		</lime_curl_version>
		<lime_curl_version_info expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_version_info&quot;, 1)" line="3394" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_version_info", 1)</e></m></meta>
		</lime_curl_version_info>
		<lime_curl_easy_cleanup expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_cleanup&quot;, 1)" line="3395" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_cleanup", 1)</e></m></meta>
		</lime_curl_easy_cleanup>
		<lime_curl_easy_duphandle expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_duphandle&quot;, 1)" line="3396" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_duphandle", 1)</e></m></meta>
		</lime_curl_easy_duphandle>
		<lime_curl_easy_escape expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_escape&quot;, 3)" line="3397" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_escape", 3)</e></m></meta>
		</lime_curl_easy_escape>
		<lime_curl_easy_flush expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_flush&quot;, 1)" line="3398" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_flush", 1)</e></m></meta>
		</lime_curl_easy_flush>
		<lime_curl_easy_getinfo expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_getinfo&quot;, 2)" line="3399" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_getinfo", 2)</e></m></meta>
		</lime_curl_easy_getinfo>
		<lime_curl_easy_init expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_init&quot;, 0)" line="3400" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_init", 0)</e></m></meta>
		</lime_curl_easy_init>
		<lime_curl_easy_pause expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_pause&quot;, 2)" line="3401" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_pause", 2)</e></m></meta>
		</lime_curl_easy_pause>
		<lime_curl_easy_perform expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_perform&quot;, 1)" line="3402" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_perform", 1)</e></m></meta>
		</lime_curl_easy_perform>
		<lime_curl_easy_recv expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_recv&quot;, 4)" line="3403" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_recv", 4)</e></m></meta>
		</lime_curl_easy_recv>
		<lime_curl_easy_reset expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_reset&quot;, 1)" line="3404" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_reset", 1)</e></m></meta>
		</lime_curl_easy_reset>
		<lime_curl_easy_send expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_send&quot;, 4)" line="3405" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_send", 4)</e></m></meta>
		</lime_curl_easy_send>
		<lime_curl_easy_setopt expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_setopt&quot;, 4)" line="3406" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_setopt", 4)</e></m></meta>
		</lime_curl_easy_setopt>
		<lime_curl_easy_strerror expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_strerror&quot;, 1)" line="3407" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_strerror", 1)</e></m></meta>
		</lime_curl_easy_strerror>
		<lime_curl_easy_unescape expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_easy_unescape&quot;, 4)" line="3408" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_easy_unescape", 4)</e></m></meta>
		</lime_curl_easy_unescape>
		<lime_curl_multi_init expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_init&quot;, 0)" line="3409" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_init", 0)</e></m></meta>
		</lime_curl_multi_init>
		<lime_curl_multi_add_handle expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_add_handle&quot;, 3)" line="3410" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_add_handle", 3)</e></m></meta>
		</lime_curl_multi_add_handle>
		<lime_curl_multi_get_running_handles expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_get_running_handles&quot;, 1)" line="3411" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_get_running_handles", 1)</e></m></meta>
		</lime_curl_multi_get_running_handles>
		<lime_curl_multi_info_read expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_info_read&quot;, 1)" line="3412" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_info_read", 1)</e></m></meta>
		</lime_curl_multi_info_read>
		<lime_curl_multi_perform expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_perform&quot;, 1)" line="3413" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_perform", 1)</e></m></meta>
		</lime_curl_multi_perform>
		<lime_curl_multi_remove_handle expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_remove_handle&quot;, 2)" line="3414" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_remove_handle", 2)</e></m></meta>
		</lime_curl_multi_remove_handle>
		<lime_curl_multi_setopt expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_setopt&quot;, 3)" line="3415" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_setopt", 3)</e></m></meta>
		</lime_curl_multi_setopt>
		<lime_curl_multi_wait expr="CFFI.load(&quot;lime&quot;, &quot;lime_curl_multi_wait&quot;, 2)" line="3416" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_curl_multi_wait", 2)</e></m></meta>
		</lime_curl_multi_wait>
		<lime_gl_active_texture expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_active_texture&quot;, 1)" line="4543" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_active_texture", 1)</e></m></meta>
		</lime_gl_active_texture>
		<lime_gl_attach_shader expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_attach_shader&quot;, 2)" line="4544" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_attach_shader", 2)</e></m></meta>
		</lime_gl_attach_shader>
		<lime_gl_begin_query expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_begin_query&quot;, 2)" line="4545" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_begin_query", 2)</e></m></meta>
		</lime_gl_begin_query>
		<lime_gl_begin_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_begin_transform_feedback&quot;, 1)" line="4546" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_begin_transform_feedback", 1)</e></m></meta>
		</lime_gl_begin_transform_feedback>
		<lime_gl_bind_attrib_location expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_attrib_location&quot;, 3)" line="4547" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_attrib_location", 3)</e></m></meta>
		</lime_gl_bind_attrib_location>
		<lime_gl_bind_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_buffer&quot;, 2)" line="4548" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_buffer", 2)</e></m></meta>
		</lime_gl_bind_buffer>
		<lime_gl_bind_buffer_base expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_buffer_base&quot;, 3)" line="4549" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_buffer_base", 3)</e></m></meta>
		</lime_gl_bind_buffer_base>
		<lime_gl_bind_buffer_range expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_buffer_range&quot;, 5)" line="4550" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_buffer_range", 5)</e></m></meta>
		</lime_gl_bind_buffer_range>
		<lime_gl_bind_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_framebuffer&quot;, 2)" line="4551" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_framebuffer", 2)</e></m></meta>
		</lime_gl_bind_framebuffer>
		<lime_gl_bind_renderbuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_renderbuffer&quot;, 2)" line="4552" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_renderbuffer", 2)</e></m></meta>
		</lime_gl_bind_renderbuffer>
		<lime_gl_bind_sampler expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_sampler&quot;, 2)" line="4553" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_sampler", 2)</e></m></meta>
		</lime_gl_bind_sampler>
		<lime_gl_bind_texture expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_texture&quot;, 2)" line="4554" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_texture", 2)</e></m></meta>
		</lime_gl_bind_texture>
		<lime_gl_bind_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_transform_feedback&quot;, 2)" line="4555" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_transform_feedback", 2)</e></m></meta>
		</lime_gl_bind_transform_feedback>
		<lime_gl_bind_vertex_array expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_bind_vertex_array&quot;, 1)" line="4556" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_bind_vertex_array", 1)</e></m></meta>
		</lime_gl_bind_vertex_array>
		<lime_gl_blend_color expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_blend_color&quot;, 4)" line="4557" static="1">
			<f a=":::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_blend_color", 4)</e></m></meta>
		</lime_gl_blend_color>
		<lime_gl_blend_equation expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_blend_equation&quot;, 1)" line="4558" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_blend_equation", 1)</e></m></meta>
		</lime_gl_blend_equation>
		<lime_gl_blend_equation_separate expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_blend_equation_separate&quot;, 2)" line="4559" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_blend_equation_separate", 2)</e></m></meta>
		</lime_gl_blend_equation_separate>
		<lime_gl_blend_func expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_blend_func&quot;, 2)" line="4560" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_blend_func", 2)</e></m></meta>
		</lime_gl_blend_func>
		<lime_gl_blend_func_separate expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_blend_func_separate&quot;, 4)" line="4561" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_blend_func_separate", 4)</e></m></meta>
		</lime_gl_blend_func_separate>
		<lime_gl_blit_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_blit_framebuffer&quot;, -1)" line="4562" static="1">
			<f a=":::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_blit_framebuffer", -1)</e></m></meta>
		</lime_gl_blit_framebuffer>
		<lime_gl_buffer_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_buffer_data&quot;, 4)" line="4563" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_buffer_data", 4)</e></m></meta>
		</lime_gl_buffer_data>
		<lime_gl_buffer_sub_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_buffer_sub_data&quot;, 4)" line="4564" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_buffer_sub_data", 4)</e></m></meta>
		</lime_gl_buffer_sub_data>
		<lime_gl_check_framebuffer_status expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_check_framebuffer_status&quot;, 1)" line="4565" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_check_framebuffer_status", 1)</e></m></meta>
		</lime_gl_check_framebuffer_status>
		<lime_gl_clear expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear&quot;, 1)" line="4566" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear", 1)</e></m></meta>
		</lime_gl_clear>
		<lime_gl_clear_bufferfi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_bufferfi&quot;, 4)" line="4567" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_bufferfi", 4)</e></m></meta>
		</lime_gl_clear_bufferfi>
		<lime_gl_clear_bufferfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_bufferfv&quot;, 3)" line="4568" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_bufferfv", 3)</e></m></meta>
		</lime_gl_clear_bufferfv>
		<lime_gl_clear_bufferiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_bufferiv&quot;, 3)" line="4569" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_bufferiv", 3)</e></m></meta>
		</lime_gl_clear_bufferiv>
		<lime_gl_clear_bufferuiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_bufferuiv&quot;, 3)" line="4570" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_bufferuiv", 3)</e></m></meta>
		</lime_gl_clear_bufferuiv>
		<lime_gl_client_wait_sync expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_client_wait_sync&quot;, 4)" line="4571" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLSync"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_client_wait_sync", 4)</e></m></meta>
		</lime_gl_client_wait_sync>
		<lime_gl_clear_color expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_color&quot;, 4)" line="4572" static="1">
			<f a=":::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_color", 4)</e></m></meta>
		</lime_gl_clear_color>
		<lime_gl_clear_depthf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_depthf&quot;, 1)" line="4573" static="1">
			<f a="">
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_depthf", 1)</e></m></meta>
		</lime_gl_clear_depthf>
		<lime_gl_clear_stencil expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_clear_stencil&quot;, 1)" line="4574" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_clear_stencil", 1)</e></m></meta>
		</lime_gl_clear_stencil>
		<lime_gl_color_mask expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_color_mask&quot;, 4)" line="4575" static="1">
			<f a=":::">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_color_mask", 4)</e></m></meta>
		</lime_gl_color_mask>
		<lime_gl_compile_shader expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_compile_shader&quot;, 1)" line="4576" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_compile_shader", 1)</e></m></meta>
		</lime_gl_compile_shader>
		<lime_gl_compressed_tex_image_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_compressed_tex_image_2d&quot;, -1)" line="4577" static="1">
			<f a=":::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_compressed_tex_image_2d", -1)</e></m></meta>
		</lime_gl_compressed_tex_image_2d>
		<lime_gl_compressed_tex_image_3d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_compressed_tex_image_3d&quot;, -1)" line="4578" static="1">
			<f a="::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_compressed_tex_image_3d", -1)</e></m></meta>
		</lime_gl_compressed_tex_image_3d>
		<lime_gl_compressed_tex_sub_image_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_compressed_tex_sub_image_2d&quot;, -1)" line="4579" static="1">
			<f a="::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_compressed_tex_sub_image_2d", -1)</e></m></meta>
		</lime_gl_compressed_tex_sub_image_2d>
		<lime_gl_compressed_tex_sub_image_3d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_compressed_tex_sub_image_3d&quot;, -1)" line="4580" static="1">
			<f a="::::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_compressed_tex_sub_image_3d", -1)</e></m></meta>
		</lime_gl_compressed_tex_sub_image_3d>
		<lime_gl_copy_buffer_sub_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_copy_buffer_sub_data&quot;, 5)" line="4581" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_copy_buffer_sub_data", 5)</e></m></meta>
		</lime_gl_copy_buffer_sub_data>
		<lime_gl_copy_tex_image_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_copy_tex_image_2d&quot;, -1)" line="4582" static="1">
			<f a=":::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_copy_tex_image_2d", -1)</e></m></meta>
		</lime_gl_copy_tex_image_2d>
		<lime_gl_copy_tex_sub_image_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_copy_tex_sub_image_2d&quot;, -1)" line="4583" static="1">
			<f a=":::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_copy_tex_sub_image_2d", -1)</e></m></meta>
		</lime_gl_copy_tex_sub_image_2d>
		<lime_gl_copy_tex_sub_image_3d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_copy_tex_sub_image_3d&quot;, -1)" line="4584" static="1">
			<f a="::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_copy_tex_sub_image_3d", -1)</e></m></meta>
		</lime_gl_copy_tex_sub_image_3d>
		<lime_gl_create_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_buffer&quot;, 0)" line="4585" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_buffer", 0)</e></m></meta>
		</lime_gl_create_buffer>
		<lime_gl_create_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_framebuffer&quot;, 0)" line="4586" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_framebuffer", 0)</e></m></meta>
		</lime_gl_create_framebuffer>
		<lime_gl_create_program expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_program&quot;, 0)" line="4587" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_program", 0)</e></m></meta>
		</lime_gl_create_program>
		<lime_gl_create_query expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_query&quot;, 0)" line="4588" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_query", 0)</e></m></meta>
		</lime_gl_create_query>
		<lime_gl_create_renderbuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_renderbuffer&quot;, 0)" line="4589" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_renderbuffer", 0)</e></m></meta>
		</lime_gl_create_renderbuffer>
		<lime_gl_create_sampler expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_sampler&quot;, 0)" line="4590" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_sampler", 0)</e></m></meta>
		</lime_gl_create_sampler>
		<lime_gl_create_shader expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_shader&quot;, 1)" line="4591" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_shader", 1)</e></m></meta>
		</lime_gl_create_shader>
		<lime_gl_create_texture expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_texture&quot;, 0)" line="4592" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_texture", 0)</e></m></meta>
		</lime_gl_create_texture>
		<lime_gl_create_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_transform_feedback&quot;, 0)" line="4593" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_transform_feedback", 0)</e></m></meta>
		</lime_gl_create_transform_feedback>
		<lime_gl_create_vertex_array expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_create_vertex_array&quot;, 0)" line="4594" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_create_vertex_array", 0)</e></m></meta>
		</lime_gl_create_vertex_array>
		<lime_gl_cull_face expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_cull_face&quot;, 1)" line="4595" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_cull_face", 1)</e></m></meta>
		</lime_gl_cull_face>
		<lime_gl_delete_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_buffer&quot;, 1)" line="4596" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_buffer", 1)</e></m></meta>
		</lime_gl_delete_buffer>
		<lime_gl_delete_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_framebuffer&quot;, 1)" line="4597" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_framebuffer", 1)</e></m></meta>
		</lime_gl_delete_framebuffer>
		<lime_gl_delete_program expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_program&quot;, 1)" line="4598" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_program", 1)</e></m></meta>
		</lime_gl_delete_program>
		<lime_gl_delete_query expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_query&quot;, 1)" line="4599" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_query", 1)</e></m></meta>
		</lime_gl_delete_query>
		<lime_gl_delete_renderbuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_renderbuffer&quot;, 1)" line="4600" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_renderbuffer", 1)</e></m></meta>
		</lime_gl_delete_renderbuffer>
		<lime_gl_delete_sampler expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_sampler&quot;, 1)" line="4601" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_sampler", 1)</e></m></meta>
		</lime_gl_delete_sampler>
		<lime_gl_delete_shader expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_shader&quot;, 1)" line="4602" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_shader", 1)</e></m></meta>
		</lime_gl_delete_shader>
		<lime_gl_delete_sync expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_sync&quot;, 1)" line="4603" static="1">
			<f a="">
				<t path="lime.graphics.opengl.GLSync"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_sync", 1)</e></m></meta>
		</lime_gl_delete_sync>
		<lime_gl_delete_texture expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_texture&quot;, 1)" line="4604" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_texture", 1)</e></m></meta>
		</lime_gl_delete_texture>
		<lime_gl_delete_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_transform_feedback&quot;, 1)" line="4605" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_transform_feedback", 1)</e></m></meta>
		</lime_gl_delete_transform_feedback>
		<lime_gl_delete_vertex_array expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_delete_vertex_array&quot;, 1)" line="4606" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_delete_vertex_array", 1)</e></m></meta>
		</lime_gl_delete_vertex_array>
		<lime_gl_depth_func expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_depth_func&quot;, 1)" line="4607" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_depth_func", 1)</e></m></meta>
		</lime_gl_depth_func>
		<lime_gl_depth_mask expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_depth_mask&quot;, 1)" line="4608" static="1">
			<f a="">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_depth_mask", 1)</e></m></meta>
		</lime_gl_depth_mask>
		<lime_gl_depth_rangef expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_depth_rangef&quot;, 2)" line="4609" static="1">
			<f a=":">
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_depth_rangef", 2)</e></m></meta>
		</lime_gl_depth_rangef>
		<lime_gl_detach_shader expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_detach_shader&quot;, 2)" line="4610" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_detach_shader", 2)</e></m></meta>
		</lime_gl_detach_shader>
		<lime_gl_disable expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_disable&quot;, 1)" line="4611" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_disable", 1)</e></m></meta>
		</lime_gl_disable>
		<lime_gl_disable_vertex_attrib_array expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_disable_vertex_attrib_array&quot;, 1)" line="4612" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_disable_vertex_attrib_array", 1)</e></m></meta>
		</lime_gl_disable_vertex_attrib_array>
		<lime_gl_draw_arrays expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_draw_arrays&quot;, 3)" line="4613" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_draw_arrays", 3)</e></m></meta>
		</lime_gl_draw_arrays>
		<lime_gl_draw_arrays_instanced expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_draw_arrays_instanced&quot;, 4)" line="4614" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_draw_arrays_instanced", 4)</e></m></meta>
		</lime_gl_draw_arrays_instanced>
		<lime_gl_draw_buffers expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_draw_buffers&quot;, 1)" line="4615" static="1">
			<f a="">
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_draw_buffers", 1)</e></m></meta>
		</lime_gl_draw_buffers>
		<lime_gl_draw_elements expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_draw_elements&quot;, 4)" line="4616" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_draw_elements", 4)</e></m></meta>
		</lime_gl_draw_elements>
		<lime_gl_draw_elements_instanced expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_draw_elements_instanced&quot;, 5)" line="4617" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_draw_elements_instanced", 5)</e></m></meta>
		</lime_gl_draw_elements_instanced>
		<lime_gl_draw_range_elements expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_draw_range_elements&quot;, -1)" line="4618" static="1">
			<f a=":::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_draw_range_elements", -1)</e></m></meta>
		</lime_gl_draw_range_elements>
		<lime_gl_enable expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_enable&quot;, 1)" line="4619" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_enable", 1)</e></m></meta>
		</lime_gl_enable>
		<lime_gl_enable_vertex_attrib_array expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_enable_vertex_attrib_array&quot;, 1)" line="4620" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_enable_vertex_attrib_array", 1)</e></m></meta>
		</lime_gl_enable_vertex_attrib_array>
		<lime_gl_end_query expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_end_query&quot;, 1)" line="4621" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_end_query", 1)</e></m></meta>
		</lime_gl_end_query>
		<lime_gl_end_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_end_transform_feedback&quot;, 0)" line="4622" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_end_transform_feedback", 0)</e></m></meta>
		</lime_gl_end_transform_feedback>
		<lime_gl_fence_sync expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_fence_sync&quot;, 2)" line="4623" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLSync"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_fence_sync", 2)</e></m></meta>
		</lime_gl_fence_sync>
		<lime_gl_finish expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_finish&quot;, 0)" line="4624" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_finish", 0)</e></m></meta>
		</lime_gl_finish>
		<lime_gl_flush expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_flush&quot;, 0)" line="4625" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_flush", 0)</e></m></meta>
		</lime_gl_flush>
		<lime_gl_framebuffer_renderbuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_framebuffer_renderbuffer&quot;, 4)" line="4626" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_framebuffer_renderbuffer", 4)</e></m></meta>
		</lime_gl_framebuffer_renderbuffer>
		<lime_gl_framebuffer_texture2D expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_framebuffer_texture2D&quot;, 5)" line="4627" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_framebuffer_texture2D", 5)</e></m></meta>
		</lime_gl_framebuffer_texture2D>
		<lime_gl_framebuffer_texture_layer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_framebuffer_texture_layer&quot;, 5)" line="4628" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_framebuffer_texture_layer", 5)</e></m></meta>
		</lime_gl_framebuffer_texture_layer>
		<lime_gl_front_face expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_front_face&quot;, 1)" line="4629" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_front_face", 1)</e></m></meta>
		</lime_gl_front_face>
		<lime_gl_generate_mipmap expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_generate_mipmap&quot;, 1)" line="4630" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_generate_mipmap", 1)</e></m></meta>
		</lime_gl_generate_mipmap>
		<lime_gl_get_active_attrib expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_active_attrib&quot;, 2)" line="4631" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLActiveInfo"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_active_attrib", 2)</e></m></meta>
		</lime_gl_get_active_attrib>
		<lime_gl_get_active_uniform expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_active_uniform&quot;, 2)" line="4632" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLActiveInfo"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_active_uniform", 2)</e></m></meta>
		</lime_gl_get_active_uniform>
		<lime_gl_get_active_uniform_blocki expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_active_uniform_blocki&quot;, 3)" line="4633" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_active_uniform_blocki", 3)</e></m></meta>
		</lime_gl_get_active_uniform_blocki>
		<lime_gl_get_active_uniform_blockiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_active_uniform_blockiv&quot;, 4)" line="4634" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_active_uniform_blockiv", 4)</e></m></meta>
		</lime_gl_get_active_uniform_blockiv>
		<lime_gl_get_active_uniform_block_name expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_active_uniform_block_name&quot;, 2)" line="4635" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_active_uniform_block_name", 2)</e></m></meta>
		</lime_gl_get_active_uniform_block_name>
		<lime_gl_get_active_uniformsiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_active_uniformsiv&quot;, 4)" line="4636" static="1">
			<f a=":::">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_active_uniformsiv", 4)</e></m></meta>
		</lime_gl_get_active_uniformsiv>
		<lime_gl_get_attached_shaders expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_attached_shaders&quot;, 1)" line="4637" static="1">
			<f a="">
				<x path="Int"/>
				<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_attached_shaders", 1)</e></m></meta>
		</lime_gl_get_attached_shaders>
		<lime_gl_get_attrib_location expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_attrib_location&quot;, 2)" line="4638" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_attrib_location", 2)</e></m></meta>
		</lime_gl_get_attrib_location>
		<lime_gl_get_boolean expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_boolean&quot;, 1)" line="4639" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_boolean", 1)</e></m></meta>
		</lime_gl_get_boolean>
		<lime_gl_get_booleanv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_booleanv&quot;, 2)" line="4640" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_booleanv", 2)</e></m></meta>
		</lime_gl_get_booleanv>
		<lime_gl_get_buffer_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_buffer_parameteri&quot;, 2)" line="4641" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_buffer_parameteri", 2)</e></m></meta>
		</lime_gl_get_buffer_parameteri>
		<lime_gl_get_buffer_parameteri64v expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_buffer_parameteri64v&quot;, 3)" line="4642" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_buffer_parameteri64v", 3)</e></m></meta>
		</lime_gl_get_buffer_parameteri64v>
		<lime_gl_get_buffer_parameteriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_buffer_parameteriv&quot;, 3)" line="4643" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_buffer_parameteriv", 3)</e></m></meta>
		</lime_gl_get_buffer_parameteriv>
		<lime_gl_get_buffer_pointerv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_buffer_pointerv&quot;, 2)" line="4644" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_buffer_pointerv", 2)</e></m></meta>
		</lime_gl_get_buffer_pointerv>
		<lime_gl_get_buffer_sub_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_buffer_sub_data&quot;, 4)" line="4645" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_buffer_sub_data", 4)</e></m></meta>
		</lime_gl_get_buffer_sub_data>
		<lime_gl_get_context_attributes expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_context_attributes&quot;, 0)" line="4646" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_context_attributes", 0)</e></m></meta>
		</lime_gl_get_context_attributes>
		<lime_gl_get_error expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_error&quot;, 0)" line="4647" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_error", 0)</e></m></meta>
		</lime_gl_get_error>
		<lime_gl_get_extension expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_extension&quot;, 1)" line="4648" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_extension", 1)</e></m></meta>
		</lime_gl_get_extension>
		<lime_gl_get_float expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_float&quot;, 1)" line="4649" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_float", 1)</e></m></meta>
		</lime_gl_get_float>
		<lime_gl_get_floatv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_floatv&quot;, 2)" line="4650" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_floatv", 2)</e></m></meta>
		</lime_gl_get_floatv>
		<lime_gl_get_frag_data_location expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_frag_data_location&quot;, 2)" line="4651" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_frag_data_location", 2)</e></m></meta>
		</lime_gl_get_frag_data_location>
		<lime_gl_get_framebuffer_attachment_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_framebuffer_attachment_parameteri&quot;, 3)" line="4652" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_framebuffer_attachment_parameteri", 3)</e></m></meta>
		</lime_gl_get_framebuffer_attachment_parameteri>
		<lime_gl_get_framebuffer_attachment_parameteriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_framebuffer_attachment_parameteriv&quot;, 4)" line="4653" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_framebuffer_attachment_parameteriv", 4)</e></m></meta>
		</lime_gl_get_framebuffer_attachment_parameteriv>
		<lime_gl_get_integer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_integer&quot;, 1)" line="4654" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_integer", 1)</e></m></meta>
		</lime_gl_get_integer>
		<lime_gl_get_integer64v expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_integer64v&quot;, 2)" line="4655" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_integer64v", 2)</e></m></meta>
		</lime_gl_get_integer64v>
		<lime_gl_get_integer64i_v expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_integer64i_v&quot;, 3)" line="4656" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_integer64i_v", 3)</e></m></meta>
		</lime_gl_get_integer64i_v>
		<lime_gl_get_integerv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_integerv&quot;, 2)" line="4657" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_integerv", 2)</e></m></meta>
		</lime_gl_get_integerv>
		<lime_gl_get_integeri_v expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_integeri_v&quot;, 3)" line="4658" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_integeri_v", 3)</e></m></meta>
		</lime_gl_get_integeri_v>
		<lime_gl_get_internalformativ expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_internalformativ&quot;, 5)" line="4659" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_internalformativ", 5)</e></m></meta>
		</lime_gl_get_internalformativ>
		<lime_gl_get_program_binary expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_program_binary&quot;, 3)" line="4660" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_program_binary", 3)</e></m></meta>
		</lime_gl_get_program_binary>
		<lime_gl_get_program_info_log expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_program_info_log&quot;, 1)" line="4661" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_program_info_log", 1)</e></m></meta>
		</lime_gl_get_program_info_log>
		<lime_gl_get_programi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_programi&quot;, 2)" line="4662" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_programi", 2)</e></m></meta>
		</lime_gl_get_programi>
		<lime_gl_get_programiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_programiv&quot;, 3)" line="4663" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_programiv", 3)</e></m></meta>
		</lime_gl_get_programiv>
		<lime_gl_get_queryi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_queryi&quot;, 2)" line="4664" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_queryi", 2)</e></m></meta>
		</lime_gl_get_queryi>
		<lime_gl_get_queryiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_queryiv&quot;, 3)" line="4665" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_queryiv", 3)</e></m></meta>
		</lime_gl_get_queryiv>
		<lime_gl_get_query_objectui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_query_objectui&quot;, 2)" line="4666" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_query_objectui", 2)</e></m></meta>
		</lime_gl_get_query_objectui>
		<lime_gl_get_query_objectuiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_query_objectuiv&quot;, 3)" line="4667" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_query_objectuiv", 3)</e></m></meta>
		</lime_gl_get_query_objectuiv>
		<lime_gl_get_renderbuffer_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_renderbuffer_parameteri&quot;, 2)" line="4668" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_renderbuffer_parameteri", 2)</e></m></meta>
		</lime_gl_get_renderbuffer_parameteri>
		<lime_gl_get_renderbuffer_parameteriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_renderbuffer_parameteriv&quot;, 3)" line="4669" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_renderbuffer_parameteriv", 3)</e></m></meta>
		</lime_gl_get_renderbuffer_parameteriv>
		<lime_gl_get_sampler_parameterf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_sampler_parameterf&quot;, 2)" line="4670" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_sampler_parameterf", 2)</e></m></meta>
		</lime_gl_get_sampler_parameterf>
		<lime_gl_get_sampler_parameterfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_sampler_parameterfv&quot;, 3)" line="4671" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_sampler_parameterfv", 3)</e></m></meta>
		</lime_gl_get_sampler_parameterfv>
		<lime_gl_get_sampler_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_sampler_parameteri&quot;, 2)" line="4672" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_sampler_parameteri", 2)</e></m></meta>
		</lime_gl_get_sampler_parameteri>
		<lime_gl_get_sampler_parameteriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_sampler_parameteriv&quot;, 3)" line="4673" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_sampler_parameteriv", 3)</e></m></meta>
		</lime_gl_get_sampler_parameteriv>
		<lime_gl_get_shader_info_log expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_shader_info_log&quot;, 1)" line="4674" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_shader_info_log", 1)</e></m></meta>
		</lime_gl_get_shader_info_log>
		<lime_gl_get_shaderi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_shaderi&quot;, 2)" line="4675" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_shaderi", 2)</e></m></meta>
		</lime_gl_get_shaderi>
		<lime_gl_get_shaderiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_shaderiv&quot;, 3)" line="4676" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_shaderiv", 3)</e></m></meta>
		</lime_gl_get_shaderiv>
		<lime_gl_get_shader_precision_format expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_shader_precision_format&quot;, 2)" line="4677" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLShaderPrecisionFormat"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_shader_precision_format", 2)</e></m></meta>
		</lime_gl_get_shader_precision_format>
		<lime_gl_get_shader_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_shader_source&quot;, 1)" line="4678" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_shader_source", 1)</e></m></meta>
		</lime_gl_get_shader_source>
		<lime_gl_get_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_string&quot;, 1)" line="4679" static="1">
			<f a="">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_string", 1)</e></m></meta>
		</lime_gl_get_string>
		<lime_gl_get_stringi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_stringi&quot;, 2)" line="4680" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_stringi", 2)</e></m></meta>
		</lime_gl_get_stringi>
		<lime_gl_get_sync_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_sync_parameteri&quot;, 2)" line="4681" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_sync_parameteri", 2)</e></m></meta>
		</lime_gl_get_sync_parameteri>
		<lime_gl_get_sync_parameteriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_sync_parameteriv&quot;, 3)" line="4682" static="1">
			<d/>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_sync_parameteriv", 3)</e></m></meta>
		</lime_gl_get_sync_parameteriv>
		<lime_gl_get_tex_parameterf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_tex_parameterf&quot;, 2)" line="4683" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_tex_parameterf", 2)</e></m></meta>
		</lime_gl_get_tex_parameterf>
		<lime_gl_get_tex_parameterfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_tex_parameterfv&quot;, 3)" line="4684" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_tex_parameterfv", 3)</e></m></meta>
		</lime_gl_get_tex_parameterfv>
		<lime_gl_get_tex_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_tex_parameteri&quot;, 2)" line="4685" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_tex_parameteri", 2)</e></m></meta>
		</lime_gl_get_tex_parameteri>
		<lime_gl_get_tex_parameteriv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_tex_parameteriv&quot;, 3)" line="4686" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_tex_parameteriv", 3)</e></m></meta>
		</lime_gl_get_tex_parameteriv>
		<lime_gl_get_transform_feedback_varying expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_transform_feedback_varying&quot;, 2)" line="4687" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_transform_feedback_varying", 2)</e></m></meta>
		</lime_gl_get_transform_feedback_varying>
		<lime_gl_get_uniformf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniformf&quot;, 2)" line="4688" static="1">
			<f a=":">
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniformf", 2)</e></m></meta>
		</lime_gl_get_uniformf>
		<lime_gl_get_uniformfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniformfv&quot;, 3)" line="4689" static="1">
			<f a="::">
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniformfv", 3)</e></m></meta>
		</lime_gl_get_uniformfv>
		<lime_gl_get_uniformi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniformi&quot;, 2)" line="4690" static="1">
			<f a=":">
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniformi", 2)</e></m></meta>
		</lime_gl_get_uniformi>
		<lime_gl_get_uniformiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniformiv&quot;, 3)" line="4691" static="1">
			<f a="::">
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniformiv", 3)</e></m></meta>
		</lime_gl_get_uniformiv>
		<lime_gl_get_uniformui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniformui&quot;, 2)" line="4692" static="1">
			<f a=":">
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniformui", 2)</e></m></meta>
		</lime_gl_get_uniformui>
		<lime_gl_get_uniformuiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniformuiv&quot;, 3)" line="4693" static="1">
			<f a="::">
				<x path="Int"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniformuiv", 3)</e></m></meta>
		</lime_gl_get_uniformuiv>
		<lime_gl_get_uniform_block_index expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniform_block_index&quot;, 2)" line="4694" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniform_block_index", 2)</e></m></meta>
		</lime_gl_get_uniform_block_index>
		<lime_gl_get_uniform_location expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_uniform_location&quot;, 2)" line="4695" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="String"/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_uniform_location", 2)</e></m></meta>
		</lime_gl_get_uniform_location>
		<lime_gl_get_vertex_attribf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribf&quot;, 2)" line="4696" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribf", 2)</e></m></meta>
		</lime_gl_get_vertex_attribf>
		<lime_gl_get_vertex_attribfv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribfv&quot;, 3)" line="4697" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribfv", 3)</e></m></meta>
		</lime_gl_get_vertex_attribfv>
		<lime_gl_get_vertex_attribi expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribi&quot;, 2)" line="4698" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribi", 2)</e></m></meta>
		</lime_gl_get_vertex_attribi>
		<lime_gl_get_vertex_attribiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribiv&quot;, 3)" line="4699" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribiv", 3)</e></m></meta>
		</lime_gl_get_vertex_attribiv>
		<lime_gl_get_vertex_attribii expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribii&quot;, 2)" line="4700" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribii", 2)</e></m></meta>
		</lime_gl_get_vertex_attribii>
		<lime_gl_get_vertex_attribiiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribiiv&quot;, 3)" line="4701" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribiiv", 3)</e></m></meta>
		</lime_gl_get_vertex_attribiiv>
		<lime_gl_get_vertex_attribiui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribiui&quot;, 2)" line="4702" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribiui", 2)</e></m></meta>
		</lime_gl_get_vertex_attribiui>
		<lime_gl_get_vertex_attribiuiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attribiuiv&quot;, 3)" line="4703" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attribiuiv", 3)</e></m></meta>
		</lime_gl_get_vertex_attribiuiv>
		<lime_gl_get_vertex_attrib_pointerv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_get_vertex_attrib_pointerv&quot;, 2)" line="4704" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_get_vertex_attrib_pointerv", 2)</e></m></meta>
		</lime_gl_get_vertex_attrib_pointerv>
		<lime_gl_hint expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_hint&quot;, 2)" line="4705" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_hint", 2)</e></m></meta>
		</lime_gl_hint>
		<lime_gl_invalidate_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_invalidate_framebuffer&quot;, 2)" line="4706" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_invalidate_framebuffer", 2)</e></m></meta>
		</lime_gl_invalidate_framebuffer>
		<lime_gl_invalidate_sub_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_invalidate_sub_framebuffer&quot;, -1)" line="4707" static="1">
			<f a=":::::">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_invalidate_sub_framebuffer", -1)</e></m></meta>
		</lime_gl_invalidate_sub_framebuffer>
		<lime_gl_is_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_buffer&quot;, 1)" line="4708" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_buffer", 1)</e></m></meta>
		</lime_gl_is_buffer>
		<lime_gl_is_enabled expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_enabled&quot;, 1)" line="4709" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_enabled", 1)</e></m></meta>
		</lime_gl_is_enabled>
		<lime_gl_is_framebuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_framebuffer&quot;, 1)" line="4710" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_framebuffer", 1)</e></m></meta>
		</lime_gl_is_framebuffer>
		<lime_gl_is_program expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_program&quot;, 1)" line="4711" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_program", 1)</e></m></meta>
		</lime_gl_is_program>
		<lime_gl_is_query expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_query&quot;, 1)" line="4712" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_query", 1)</e></m></meta>
		</lime_gl_is_query>
		<lime_gl_is_renderbuffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_renderbuffer&quot;, 1)" line="4713" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_renderbuffer", 1)</e></m></meta>
		</lime_gl_is_renderbuffer>
		<lime_gl_is_sampler expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_sampler&quot;, 1)" line="4714" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_sampler", 1)</e></m></meta>
		</lime_gl_is_sampler>
		<lime_gl_is_shader expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_shader&quot;, 1)" line="4715" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_shader", 1)</e></m></meta>
		</lime_gl_is_shader>
		<lime_gl_is_sync expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_sync&quot;, 1)" line="4716" static="1">
			<f a="">
				<t path="lime.graphics.opengl.GLSync"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_sync", 1)</e></m></meta>
		</lime_gl_is_sync>
		<lime_gl_is_texture expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_texture&quot;, 1)" line="4717" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_texture", 1)</e></m></meta>
		</lime_gl_is_texture>
		<lime_gl_is_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_transform_feedback&quot;, 1)" line="4718" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_transform_feedback", 1)</e></m></meta>
		</lime_gl_is_transform_feedback>
		<lime_gl_is_vertex_array expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_is_vertex_array&quot;, 1)" line="4719" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_is_vertex_array", 1)</e></m></meta>
		</lime_gl_is_vertex_array>
		<lime_gl_line_width expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_line_width&quot;, 1)" line="4720" static="1">
			<f a="">
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_line_width", 1)</e></m></meta>
		</lime_gl_line_width>
		<lime_gl_link_program expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_link_program&quot;, 1)" line="4721" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_link_program", 1)</e></m></meta>
		</lime_gl_link_program>
		<lime_gl_map_buffer_range expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_map_buffer_range&quot;, 4)" line="4722" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_map_buffer_range", 4)</e></m></meta>
		</lime_gl_map_buffer_range>
		<lime_gl_object_deregister expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_object_deregister&quot;, 1)" line="4723" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_object_deregister", 1)</e></m></meta>
		</lime_gl_object_deregister>
		<lime_gl_object_from_id expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_object_from_id&quot;, 2)" line="4724" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.graphics.opengl.GLObjectType"/>
				<c path="lime.graphics.opengl.GLObject"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_object_from_id", 2)</e></m></meta>
		</lime_gl_object_from_id>
		<lime_gl_object_register expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_object_register&quot;, 3)" line="4725" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="lime.graphics.opengl.GLObjectType"/>
				<c path="lime.graphics.opengl.GLObject"/>
				<x path="lime.system.CFFIPointer"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_object_register", 3)</e></m></meta>
		</lime_gl_object_register>
		<lime_gl_pause_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_pause_transform_feedback&quot;, 0)" line="4726" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_pause_transform_feedback", 0)</e></m></meta>
		</lime_gl_pause_transform_feedback>
		<lime_gl_pixel_storei expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_pixel_storei&quot;, 2)" line="4727" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_pixel_storei", 2)</e></m></meta>
		</lime_gl_pixel_storei>
		<lime_gl_polygon_offset expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_polygon_offset&quot;, 2)" line="4728" static="1">
			<f a=":">
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_polygon_offset", 2)</e></m></meta>
		</lime_gl_polygon_offset>
		<lime_gl_program_binary expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_program_binary&quot;, 4)" line="4729" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_program_binary", 4)</e></m></meta>
		</lime_gl_program_binary>
		<lime_gl_program_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_program_parameteri&quot;, 3)" line="4730" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_program_parameteri", 3)</e></m></meta>
		</lime_gl_program_parameteri>
		<lime_gl_read_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_read_buffer&quot;, 1)" line="4731" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_read_buffer", 1)</e></m></meta>
		</lime_gl_read_buffer>
		<lime_gl_read_pixels expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_read_pixels&quot;, -1)" line="4732" static="1">
			<f a="::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_read_pixels", -1)</e></m></meta>
		</lime_gl_read_pixels>
		<lime_gl_release_shader_compiler expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_release_shader_compiler&quot;, 0)" line="4733" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_release_shader_compiler", 0)</e></m></meta>
		</lime_gl_release_shader_compiler>
		<lime_gl_renderbuffer_storage expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_renderbuffer_storage&quot;, 4)" line="4734" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_renderbuffer_storage", 4)</e></m></meta>
		</lime_gl_renderbuffer_storage>
		<lime_gl_renderbuffer_storage_multisample expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_renderbuffer_storage_multisample&quot;, 5)" line="4735" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_renderbuffer_storage_multisample", 5)</e></m></meta>
		</lime_gl_renderbuffer_storage_multisample>
		<lime_gl_resume_transform_feedback expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_resume_transform_feedback&quot;, 0)" line="4736" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_resume_transform_feedback", 0)</e></m></meta>
		</lime_gl_resume_transform_feedback>
		<lime_gl_sample_coverage expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_sample_coverage&quot;, 2)" line="4737" static="1">
			<f a=":">
				<x path="Float"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_sample_coverage", 2)</e></m></meta>
		</lime_gl_sample_coverage>
		<lime_gl_sampler_parameterf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_sampler_parameterf&quot;, 3)" line="4738" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_sampler_parameterf", 3)</e></m></meta>
		</lime_gl_sampler_parameterf>
		<lime_gl_sampler_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_sampler_parameteri&quot;, 3)" line="4739" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_sampler_parameteri", 3)</e></m></meta>
		</lime_gl_sampler_parameteri>
		<lime_gl_scissor expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_scissor&quot;, 4)" line="4740" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_scissor", 4)</e></m></meta>
		</lime_gl_scissor>
		<lime_gl_shader_binary expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_shader_binary&quot;, 4)" line="4741" static="1">
			<f a=":::">
				<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_shader_binary", 4)</e></m></meta>
		</lime_gl_shader_binary>
		<lime_gl_shader_source expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_shader_source&quot;, 2)" line="4742" static="1">
			<f a=":">
				<x path="Int"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_shader_source", 2)</e></m></meta>
		</lime_gl_shader_source>
		<lime_gl_stencil_func expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_stencil_func&quot;, 3)" line="4743" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_stencil_func", 3)</e></m></meta>
		</lime_gl_stencil_func>
		<lime_gl_stencil_func_separate expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_stencil_func_separate&quot;, 4)" line="4744" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_stencil_func_separate", 4)</e></m></meta>
		</lime_gl_stencil_func_separate>
		<lime_gl_stencil_mask expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_stencil_mask&quot;, 1)" line="4745" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_stencil_mask", 1)</e></m></meta>
		</lime_gl_stencil_mask>
		<lime_gl_stencil_mask_separate expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_stencil_mask_separate&quot;, 2)" line="4746" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_stencil_mask_separate", 2)</e></m></meta>
		</lime_gl_stencil_mask_separate>
		<lime_gl_stencil_op expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_stencil_op&quot;, 3)" line="4747" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_stencil_op", 3)</e></m></meta>
		</lime_gl_stencil_op>
		<lime_gl_stencil_op_separate expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_stencil_op_separate&quot;, 4)" line="4748" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_stencil_op_separate", 4)</e></m></meta>
		</lime_gl_stencil_op_separate>
		<lime_gl_tex_image_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_image_2d&quot;, -1)" line="4749" static="1">
			<f a="::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_image_2d", -1)</e></m></meta>
		</lime_gl_tex_image_2d>
		<lime_gl_tex_image_3d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_image_3d&quot;, -1)" line="4750" static="1">
			<f a=":::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_image_3d", -1)</e></m></meta>
		</lime_gl_tex_image_3d>
		<lime_gl_tex_parameterf expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_parameterf&quot;, 3)" line="4751" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_parameterf", 3)</e></m></meta>
		</lime_gl_tex_parameterf>
		<lime_gl_tex_parameteri expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_parameteri&quot;, 3)" line="4752" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_parameteri", 3)</e></m></meta>
		</lime_gl_tex_parameteri>
		<lime_gl_tex_storage_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_storage_2d&quot;, 5)" line="4753" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_storage_2d", 5)</e></m></meta>
		</lime_gl_tex_storage_2d>
		<lime_gl_tex_storage_3d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_storage_3d&quot;, -1)" line="4754" static="1">
			<f a=":::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_storage_3d", -1)</e></m></meta>
		</lime_gl_tex_storage_3d>
		<lime_gl_tex_sub_image_2d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_sub_image_2d&quot;, -1)" line="4755" static="1">
			<f a="::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_sub_image_2d", -1)</e></m></meta>
		</lime_gl_tex_sub_image_2d>
		<lime_gl_tex_sub_image_3d expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_tex_sub_image_3d&quot;, -1)" line="4756" static="1">
			<f a="::::::::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_tex_sub_image_3d", -1)</e></m></meta>
		</lime_gl_tex_sub_image_3d>
		<lime_gl_transform_feedback_varyings expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_transform_feedback_varyings&quot;, 3)" line="4757" static="1">
			<f a="::">
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_transform_feedback_varyings", 3)</e></m></meta>
		</lime_gl_transform_feedback_varyings>
		<lime_gl_uniform1f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform1f&quot;, 2)" line="4758" static="1">
			<f a=":">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform1f", 2)</e></m></meta>
		</lime_gl_uniform1f>
		<lime_gl_uniform1fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform1fv&quot;, 3)" line="4759" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform1fv", 3)</e></m></meta>
		</lime_gl_uniform1fv>
		<lime_gl_uniform1i expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform1i&quot;, 2)" line="4760" static="1">
			<f a=":">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform1i", 2)</e></m></meta>
		</lime_gl_uniform1i>
		<lime_gl_uniform1iv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform1iv&quot;, 3)" line="4761" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform1iv", 3)</e></m></meta>
		</lime_gl_uniform1iv>
		<lime_gl_uniform1ui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform1ui&quot;, 2)" line="4762" static="1">
			<f a=":">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform1ui", 2)</e></m></meta>
		</lime_gl_uniform1ui>
		<lime_gl_uniform1uiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform1uiv&quot;, 3)" line="4763" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform1uiv", 3)</e></m></meta>
		</lime_gl_uniform1uiv>
		<lime_gl_uniform2f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform2f&quot;, 3)" line="4764" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform2f", 3)</e></m></meta>
		</lime_gl_uniform2f>
		<lime_gl_uniform2fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform2fv&quot;, 3)" line="4765" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform2fv", 3)</e></m></meta>
		</lime_gl_uniform2fv>
		<lime_gl_uniform2i expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform2i&quot;, 3)" line="4766" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform2i", 3)</e></m></meta>
		</lime_gl_uniform2i>
		<lime_gl_uniform2iv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform2iv&quot;, 3)" line="4767" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform2iv", 3)</e></m></meta>
		</lime_gl_uniform2iv>
		<lime_gl_uniform2ui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform2ui&quot;, 3)" line="4768" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform2ui", 3)</e></m></meta>
		</lime_gl_uniform2ui>
		<lime_gl_uniform2uiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform2uiv&quot;, 3)" line="4769" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform2uiv", 3)</e></m></meta>
		</lime_gl_uniform2uiv>
		<lime_gl_uniform3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform3f&quot;, 4)" line="4770" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform3f", 4)</e></m></meta>
		</lime_gl_uniform3f>
		<lime_gl_uniform3fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform3fv&quot;, 3)" line="4771" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform3fv", 3)</e></m></meta>
		</lime_gl_uniform3fv>
		<lime_gl_uniform3i expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform3i&quot;, 4)" line="4772" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform3i", 4)</e></m></meta>
		</lime_gl_uniform3i>
		<lime_gl_uniform3iv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform3iv&quot;, 3)" line="4773" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform3iv", 3)</e></m></meta>
		</lime_gl_uniform3iv>
		<lime_gl_uniform3ui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform3ui&quot;, 4)" line="4774" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform3ui", 4)</e></m></meta>
		</lime_gl_uniform3ui>
		<lime_gl_uniform3uiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform3uiv&quot;, 3)" line="4775" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform3uiv", 3)</e></m></meta>
		</lime_gl_uniform3uiv>
		<lime_gl_uniform4f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform4f&quot;, 5)" line="4776" static="1">
			<f a="::::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform4f", 5)</e></m></meta>
		</lime_gl_uniform4f>
		<lime_gl_uniform4fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform4fv&quot;, 3)" line="4777" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform4fv", 3)</e></m></meta>
		</lime_gl_uniform4fv>
		<lime_gl_uniform4i expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform4i&quot;, 5)" line="4778" static="1">
			<f a="::::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform4i", 5)</e></m></meta>
		</lime_gl_uniform4i>
		<lime_gl_uniform4iv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform4iv&quot;, 3)" line="4779" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform4iv", 3)</e></m></meta>
		</lime_gl_uniform4iv>
		<lime_gl_uniform4ui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform4ui&quot;, 5)" line="4780" static="1">
			<f a="::::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform4ui", 5)</e></m></meta>
		</lime_gl_uniform4ui>
		<lime_gl_uniform4uiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform4uiv&quot;, 3)" line="4781" static="1">
			<f a="::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform4uiv", 3)</e></m></meta>
		</lime_gl_uniform4uiv>
		<lime_gl_uniform_block_binding expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_block_binding&quot;, 3)" line="4782" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_block_binding", 3)</e></m></meta>
		</lime_gl_uniform_block_binding>
		<lime_gl_uniform_matrix2fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix2fv&quot;, 4)" line="4783" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix2fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix2fv>
		<lime_gl_uniform_matrix2x3fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix2x3fv&quot;, 4)" line="4784" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix2x3fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix2x3fv>
		<lime_gl_uniform_matrix2x4fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix2x4fv&quot;, 4)" line="4785" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix2x4fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix2x4fv>
		<lime_gl_uniform_matrix3fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix3fv&quot;, 4)" line="4786" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix3fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix3fv>
		<lime_gl_uniform_matrix3x2fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix3x2fv&quot;, 4)" line="4787" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix3x2fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix3x2fv>
		<lime_gl_uniform_matrix3x4fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix3x4fv&quot;, 4)" line="4788" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix3x4fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix3x4fv>
		<lime_gl_uniform_matrix4fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix4fv&quot;, 4)" line="4789" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix4fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix4fv>
		<lime_gl_uniform_matrix4x2fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix4x2fv&quot;, 4)" line="4790" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix4x2fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix4x2fv>
		<lime_gl_uniform_matrix4x3fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_uniform_matrix4x3fv&quot;, 4)" line="4791" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_uniform_matrix4x3fv", 4)</e></m></meta>
		</lime_gl_uniform_matrix4x3fv>
		<lime_gl_unmap_buffer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_unmap_buffer&quot;, 1)" line="4792" static="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_unmap_buffer", 1)</e></m></meta>
		</lime_gl_unmap_buffer>
		<lime_gl_use_program expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_use_program&quot;, 1)" line="4793" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_use_program", 1)</e></m></meta>
		</lime_gl_use_program>
		<lime_gl_validate_program expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_validate_program&quot;, 1)" line="4794" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_validate_program", 1)</e></m></meta>
		</lime_gl_validate_program>
		<lime_gl_vertex_attrib1f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib1f&quot;, 2)" line="4795" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib1f", 2)</e></m></meta>
		</lime_gl_vertex_attrib1f>
		<lime_gl_vertex_attrib1fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib1fv&quot;, 2)" line="4796" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib1fv", 2)</e></m></meta>
		</lime_gl_vertex_attrib1fv>
		<lime_gl_vertex_attrib2f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib2f&quot;, 3)" line="4797" static="1">
			<f a="::">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib2f", 3)</e></m></meta>
		</lime_gl_vertex_attrib2f>
		<lime_gl_vertex_attrib2fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib2fv&quot;, 2)" line="4798" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib2fv", 2)</e></m></meta>
		</lime_gl_vertex_attrib2fv>
		<lime_gl_vertex_attrib3f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib3f&quot;, 4)" line="4799" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib3f", 4)</e></m></meta>
		</lime_gl_vertex_attrib3f>
		<lime_gl_vertex_attrib3fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib3fv&quot;, 2)" line="4800" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib3fv", 2)</e></m></meta>
		</lime_gl_vertex_attrib3fv>
		<lime_gl_vertex_attrib4f expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib4f&quot;, 5)" line="4801" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib4f", 5)</e></m></meta>
		</lime_gl_vertex_attrib4f>
		<lime_gl_vertex_attrib4fv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib4fv&quot;, 2)" line="4802" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib4fv", 2)</e></m></meta>
		</lime_gl_vertex_attrib4fv>
		<lime_gl_vertex_attribi4i expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attribi4i&quot;, 5)" line="4803" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attribi4i", 5)</e></m></meta>
		</lime_gl_vertex_attribi4i>
		<lime_gl_vertex_attribi4iv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attribi4iv&quot;, 2)" line="4804" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attribi4iv", 2)</e></m></meta>
		</lime_gl_vertex_attribi4iv>
		<lime_gl_vertex_attribi4ui expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attribi4ui&quot;, 5)" line="4805" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attribi4ui", 5)</e></m></meta>
		</lime_gl_vertex_attribi4ui>
		<lime_gl_vertex_attribi4uiv expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attribi4uiv&quot;, 2)" line="4806" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attribi4uiv", 2)</e></m></meta>
		</lime_gl_vertex_attribi4uiv>
		<lime_gl_vertex_attrib_divisor expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib_divisor&quot;, 2)" line="4807" static="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib_divisor", 2)</e></m></meta>
		</lime_gl_vertex_attrib_divisor>
		<lime_gl_vertex_attrib_ipointer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib_ipointer&quot;, 5)" line="4808" static="1">
			<f a="::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib_ipointer", 5)</e></m></meta>
		</lime_gl_vertex_attrib_ipointer>
		<lime_gl_vertex_attrib_pointer expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_vertex_attrib_pointer&quot;, -1)" line="4809" static="1">
			<f a=":::::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_vertex_attrib_pointer", -1)</e></m></meta>
		</lime_gl_vertex_attrib_pointer>
		<lime_gl_viewport expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_viewport&quot;, 4)" line="4810" static="1">
			<f a=":::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_viewport", 4)</e></m></meta>
		</lime_gl_viewport>
		<lime_gl_wait_sync expr="CFFI.load(&quot;lime&quot;, &quot;lime_gl_wait_sync&quot;, 4)" line="4811" static="1">
			<f a=":::">
				<t path="lime.graphics.opengl.GLSync"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_gl_wait_sync", 4)</e></m></meta>
		</lime_gl_wait_sync>
		<lime_hb_blob_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_create&quot;, 3)" line="6039" static="1">
			<f a="::">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_create", 3)</e></m></meta>
		</lime_hb_blob_create>
		<lime_hb_blob_create_sub_blob expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_create_sub_blob&quot;, 3)" line="6040" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_create_sub_blob", 3)</e></m></meta>
		</lime_hb_blob_create_sub_blob>
		<lime_hb_blob_get_data expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_get_data&quot;, 1)" line="6041" static="1">
			<f a="">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_get_data", 1)</e></m></meta>
		</lime_hb_blob_get_data>
		<lime_hb_blob_get_data_writable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_get_data_writable&quot;, 1)" line="6042" static="1">
			<f a="">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_get_data_writable", 1)</e></m></meta>
		</lime_hb_blob_get_data_writable>
		<lime_hb_blob_get_empty expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_get_empty&quot;, 0)" line="6043" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_get_empty", 0)</e></m></meta>
		</lime_hb_blob_get_empty>
		<lime_hb_blob_get_length expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_get_length&quot;, 1)" line="6044" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_get_length", 1)</e></m></meta>
		</lime_hb_blob_get_length>
		<lime_hb_blob_is_immutable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_is_immutable&quot;, 1)" line="6045" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_is_immutable", 1)</e></m></meta>
		</lime_hb_blob_is_immutable>
		<lime_hb_blob_make_immutable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_blob_make_immutable&quot;, 1)" line="6046" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_blob_make_immutable", 1)</e></m></meta>
		</lime_hb_blob_make_immutable>
		<lime_hb_buffer_add expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_add&quot;, 3)" line="6047" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_add", 3)</e></m></meta>
		</lime_hb_buffer_add>
		<lime_hb_buffer_add_codepoints expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_add_codepoints&quot;, 5)" line="6048" static="1">
			<f a="::::">
				<d/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_add_codepoints", 5)</e></m></meta>
		</lime_hb_buffer_add_codepoints>
		<lime_hb_buffer_add_utf8 expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_add_utf8&quot;, 4)" line="6050" static="1">
			<f a=":::">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_add_utf8", 4)</e></m></meta>
		</lime_hb_buffer_add_utf8>
		<lime_hb_buffer_add_utf16 expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_add_utf16&quot;, 5)" line="6051" static="1">
			<f a="::::">
				<d/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_add_utf16", 5)</e></m></meta>
		</lime_hb_buffer_add_utf16>
		<lime_hb_buffer_add_utf32 expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_add_utf32&quot;, 5)" line="6052" static="1">
			<f a="::::">
				<d/>
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_add_utf32", 5)</e></m></meta>
		</lime_hb_buffer_add_utf32>
		<lime_hb_buffer_allocation_successful expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_allocation_successful&quot;, 1)" line="6053" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_allocation_successful", 1)</e></m></meta>
		</lime_hb_buffer_allocation_successful>
		<lime_hb_buffer_clear_contents expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_clear_contents&quot;, 1)" line="6054" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_clear_contents", 1)</e></m></meta>
		</lime_hb_buffer_clear_contents>
		<lime_hb_buffer_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_create&quot;, 0)" line="6055" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_create", 0)</e></m></meta>
		</lime_hb_buffer_create>
		<lime_hb_buffer_get_cluster_level expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_cluster_level&quot;, 1)" line="6056" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_cluster_level", 1)</e></m></meta>
		</lime_hb_buffer_get_cluster_level>
		<lime_hb_buffer_get_content_type expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_content_type&quot;, 1)" line="6057" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_content_type", 1)</e></m></meta>
		</lime_hb_buffer_get_content_type>
		<lime_hb_buffer_get_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_direction&quot;, 1)" line="6058" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_direction", 1)</e></m></meta>
		</lime_hb_buffer_get_direction>
		<lime_hb_buffer_get_empty expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_empty&quot;, 0)" line="6059" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_empty", 0)</e></m></meta>
		</lime_hb_buffer_get_empty>
		<lime_hb_buffer_get_flags expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_flags&quot;, 1)" line="6060" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_flags", 1)</e></m></meta>
		</lime_hb_buffer_get_flags>
		<lime_hb_buffer_get_glyph_infos expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_glyph_infos&quot;, 2)" line="6061" static="1">
			<f a=":">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_glyph_infos", 2)</e></m></meta>
		</lime_hb_buffer_get_glyph_infos>
		<lime_hb_buffer_get_glyph_positions expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_glyph_positions&quot;, 2)" line="6062" static="1">
			<f a=":">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_glyph_positions", 2)</e></m></meta>
		</lime_hb_buffer_get_glyph_positions>
		<lime_hb_buffer_get_language expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_language&quot;, 1)" line="6063" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_language", 1)</e></m></meta>
		</lime_hb_buffer_get_language>
		<lime_hb_buffer_get_length expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_length&quot;, 1)" line="6064" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_length", 1)</e></m></meta>
		</lime_hb_buffer_get_length>
		<lime_hb_buffer_get_replacement_codepoint expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_replacement_codepoint&quot;, 1)" line="6065" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_replacement_codepoint", 1)</e></m></meta>
		</lime_hb_buffer_get_replacement_codepoint>
		<lime_hb_buffer_get_script expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_script&quot;, 1)" line="6066" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_script", 1)</e></m></meta>
		</lime_hb_buffer_get_script>
		<lime_hb_buffer_get_segment_properties expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_get_segment_properties&quot;, 2)" line="6067" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_get_segment_properties", 2)</e></m></meta>
		</lime_hb_buffer_get_segment_properties>
		<lime_hb_buffer_guess_segment_properties expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_guess_segment_properties&quot;, 1)" line="6068" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_guess_segment_properties", 1)</e></m></meta>
		</lime_hb_buffer_guess_segment_properties>
		<lime_hb_buffer_normalize_glyphs expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_normalize_glyphs&quot;, 1)" line="6069" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_normalize_glyphs", 1)</e></m></meta>
		</lime_hb_buffer_normalize_glyphs>
		<lime_hb_buffer_preallocate expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_preallocate&quot;, 2)" line="6070" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_preallocate", 2)</e></m></meta>
		</lime_hb_buffer_preallocate>
		<lime_hb_buffer_reset expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_reset&quot;, 1)" line="6071" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_reset", 1)</e></m></meta>
		</lime_hb_buffer_reset>
		<lime_hb_buffer_reverse expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_reverse&quot;, 1)" line="6072" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_reverse", 1)</e></m></meta>
		</lime_hb_buffer_reverse>
		<lime_hb_buffer_reverse_clusters expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_reverse_clusters&quot;, 1)" line="6073" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_reverse_clusters", 1)</e></m></meta>
		</lime_hb_buffer_reverse_clusters>
		<lime_hb_buffer_serialize_format_from_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_serialize_format_from_string&quot;, 1)" line="6074" static="1">
			<f a="">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_serialize_format_from_string", 1)</e></m></meta>
		</lime_hb_buffer_serialize_format_from_string>
		<lime_hb_buffer_serialize_format_to_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_serialize_format_to_string&quot;, 1)" line="6075" static="1">
			<f a="">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_serialize_format_to_string", 1)</e></m></meta>
		</lime_hb_buffer_serialize_format_to_string>
		<lime_hb_buffer_serialize_list_formats expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_serialize_list_formats&quot;, 0)" line="6076" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_serialize_list_formats", 0)</e></m></meta>
		</lime_hb_buffer_serialize_list_formats>
		<lime_hb_buffer_set_cluster_level expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_cluster_level&quot;, 2)" line="6077" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_cluster_level", 2)</e></m></meta>
		</lime_hb_buffer_set_cluster_level>
		<lime_hb_buffer_set_content_type expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_content_type&quot;, 2)" line="6078" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_content_type", 2)</e></m></meta>
		</lime_hb_buffer_set_content_type>
		<lime_hb_buffer_set_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_direction&quot;, 2)" line="6079" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_direction", 2)</e></m></meta>
		</lime_hb_buffer_set_direction>
		<lime_hb_buffer_set_flags expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_flags&quot;, 2)" line="6080" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_flags", 2)</e></m></meta>
		</lime_hb_buffer_set_flags>
		<lime_hb_buffer_set_language expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_language&quot;, 2)" line="6081" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_language", 2)</e></m></meta>
		</lime_hb_buffer_set_language>
		<lime_hb_buffer_set_length expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_length&quot;, 2)" line="6082" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_length", 2)</e></m></meta>
		</lime_hb_buffer_set_length>
		<lime_hb_buffer_set_replacement_codepoint expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_replacement_codepoint&quot;, 2)" line="6083" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_replacement_codepoint", 2)</e></m></meta>
		</lime_hb_buffer_set_replacement_codepoint>
		<lime_hb_buffer_set_script expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_script&quot;, 2)" line="6084" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_script", 2)</e></m></meta>
		</lime_hb_buffer_set_script>
		<lime_hb_buffer_set_segment_properties expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_buffer_set_segment_properties&quot;, 2)" line="6085" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_buffer_set_segment_properties", 2)</e></m></meta>
		</lime_hb_buffer_set_segment_properties>
		<lime_hb_face_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_create&quot;, 2)" line="6086" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_create", 2)</e></m></meta>
		</lime_hb_face_create>
		<lime_hb_face_get_empty expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_get_empty&quot;, 0)" line="6087" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_get_empty", 0)</e></m></meta>
		</lime_hb_face_get_empty>
		<lime_hb_face_get_glyph_count expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_get_glyph_count&quot;, 1)" line="6088" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_get_glyph_count", 1)</e></m></meta>
		</lime_hb_face_get_glyph_count>
		<lime_hb_face_get_index expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_get_index&quot;, 1)" line="6089" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_get_index", 1)</e></m></meta>
		</lime_hb_face_get_index>
		<lime_hb_face_get_upem expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_get_upem&quot;, 1)" line="6090" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_get_upem", 1)</e></m></meta>
		</lime_hb_face_get_upem>
		<lime_hb_face_is_immutable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_is_immutable&quot;, 1)" line="6091" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_is_immutable", 1)</e></m></meta>
		</lime_hb_face_is_immutable>
		<lime_hb_face_make_immutable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_make_immutable&quot;, 1)" line="6092" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_make_immutable", 1)</e></m></meta>
		</lime_hb_face_make_immutable>
		<lime_hb_face_reference_blob expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_reference_blob&quot;, 1)" line="6093" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_reference_blob", 1)</e></m></meta>
		</lime_hb_face_reference_blob>
		<lime_hb_face_reference_table expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_reference_table&quot;, 2)" line="6094" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_reference_table", 2)</e></m></meta>
		</lime_hb_face_reference_table>
		<lime_hb_face_set_glyph_count expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_set_glyph_count&quot;, 2)" line="6095" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_set_glyph_count", 2)</e></m></meta>
		</lime_hb_face_set_glyph_count>
		<lime_hb_face_set_index expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_set_index&quot;, 2)" line="6096" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_set_index", 2)</e></m></meta>
		</lime_hb_face_set_index>
		<lime_hb_face_set_upem expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_face_set_upem&quot;, 2)" line="6097" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_face_set_upem", 2)</e></m></meta>
		</lime_hb_face_set_upem>
		<lime_hb_feature_from_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_feature_from_string&quot;, 1)" line="6098" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_feature_from_string", 1)</e></m></meta>
		</lime_hb_feature_from_string>
		<lime_hb_feature_to_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_feature_to_string&quot;, 1)" line="6099" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_feature_to_string", 1)</e></m></meta>
		</lime_hb_feature_to_string>
		<lime_hb_font_add_glyph_origin_for_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_add_glyph_origin_for_direction&quot;, 5)" line="6100" static="1">
			<f a="::::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_add_glyph_origin_for_direction", 5)</e></m></meta>
		</lime_hb_font_add_glyph_origin_for_direction>
		<lime_hb_font_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_create&quot;, 1)" line="6102" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_create", 1)</e></m></meta>
		</lime_hb_font_create>
		<lime_hb_font_create_sub_font expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_create_sub_font&quot;, 1)" line="6103" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_create_sub_font", 1)</e></m></meta>
		</lime_hb_font_create_sub_font>
		<lime_hb_font_get_empty expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_empty&quot;, 0)" line="6104" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_empty", 0)</e></m></meta>
		</lime_hb_font_get_empty>
		<lime_hb_font_get_face expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_face&quot;, 1)" line="6105" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_face", 1)</e></m></meta>
		</lime_hb_font_get_face>
		<lime_hb_font_get_glyph_advance_for_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_glyph_advance_for_direction&quot;, 3)" line="6106" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_glyph_advance_for_direction", 3)</e></m></meta>
		</lime_hb_font_get_glyph_advance_for_direction>
		<lime_hb_font_get_glyph_kerning_for_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_glyph_kerning_for_direction&quot;, 4)" line="6108" static="1">
			<f a=":::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_glyph_kerning_for_direction", 4)</e></m></meta>
		</lime_hb_font_get_glyph_kerning_for_direction>
		<lime_hb_font_get_glyph_origin_for_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_glyph_origin_for_direction&quot;, 3)" line="6110" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_glyph_origin_for_direction", 3)</e></m></meta>
		</lime_hb_font_get_glyph_origin_for_direction>
		<lime_hb_font_get_parent expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_parent&quot;, 1)" line="6112" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_parent", 1)</e></m></meta>
		</lime_hb_font_get_parent>
		<lime_hb_font_get_ppem expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_ppem&quot;, 1)" line="6113" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_ppem", 1)</e></m></meta>
		</lime_hb_font_get_ppem>
		<lime_hb_font_get_scale expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_get_scale&quot;, 1)" line="6114" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_get_scale", 1)</e></m></meta>
		</lime_hb_font_get_scale>
		<lime_hb_font_glyph_from_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_glyph_from_string&quot;, 2)" line="6115" static="1">
			<f a=":">
				<d/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_glyph_from_string", 2)</e></m></meta>
		</lime_hb_font_glyph_from_string>
		<lime_hb_font_glyph_to_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_glyph_to_string&quot;, 2)" line="6116" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_glyph_to_string", 2)</e></m></meta>
		</lime_hb_font_glyph_to_string>
		<lime_hb_font_is_immutable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_is_immutable&quot;, 1)" line="6117" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_is_immutable", 1)</e></m></meta>
		</lime_hb_font_is_immutable>
		<lime_hb_font_make_immutable expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_make_immutable&quot;, 1)" line="6118" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_make_immutable", 1)</e></m></meta>
		</lime_hb_font_make_immutable>
		<lime_hb_font_set_ppem expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_set_ppem&quot;, 3)" line="6119" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_set_ppem", 3)</e></m></meta>
		</lime_hb_font_set_ppem>
		<lime_hb_font_set_scale expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_set_scale&quot;, 3)" line="6120" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_set_scale", 3)</e></m></meta>
		</lime_hb_font_set_scale>
		<lime_hb_font_subtract_glyph_origin_for_direction expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_font_subtract_glyph_origin_for_direction&quot;, 5)" line="6121" static="1">
			<f a="::::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_font_subtract_glyph_origin_for_direction", 5)</e></m></meta>
		</lime_hb_font_subtract_glyph_origin_for_direction>
		<lime_hb_ft_font_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_ft_font_create&quot;, 1)" line="6123" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_ft_font_create", 1)</e></m></meta>
		</lime_hb_ft_font_create>
		<lime_hb_ft_font_create_referenced expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_ft_font_create_referenced&quot;, 1)" line="6124" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_ft_font_create_referenced", 1)</e></m></meta>
		</lime_hb_ft_font_create_referenced>
		<lime_hb_ft_font_get_load_flags expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_ft_font_get_load_flags&quot;, 1)" line="6125" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_ft_font_get_load_flags", 1)</e></m></meta>
		</lime_hb_ft_font_get_load_flags>
		<lime_hb_ft_font_set_load_flags expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_ft_font_set_load_flags&quot;, 2)" line="6126" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_ft_font_set_load_flags", 2)</e></m></meta>
		</lime_hb_ft_font_set_load_flags>
		<lime_hb_language_from_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_language_from_string&quot;, 1)" line="6127" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_language_from_string", 1)</e></m></meta>
		</lime_hb_language_from_string>
		<lime_hb_language_get_default expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_language_get_default&quot;, 0)" line="6128" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_language_get_default", 0)</e></m></meta>
		</lime_hb_language_get_default>
		<lime_hb_language_to_string expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_language_to_string&quot;, 1)" line="6129" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_language_to_string", 1)</e></m></meta>
		</lime_hb_language_to_string>
		<lime_hb_segment_properties_equal expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_segment_properties_equal&quot;, 2)" line="6130" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_segment_properties_equal", 2)</e></m></meta>
		</lime_hb_segment_properties_equal>
		<lime_hb_segment_properties_hash expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_segment_properties_hash&quot;, 1)" line="6131" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_segment_properties_hash", 1)</e></m></meta>
		</lime_hb_segment_properties_hash>
		<lime_hb_set_add expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_add&quot;, 2)" line="6132" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_add", 2)</e></m></meta>
		</lime_hb_set_add>
		<lime_hb_set_add_range expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_add_range&quot;, 3)" line="6133" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_add_range", 3)</e></m></meta>
		</lime_hb_set_add_range>
		<lime_hb_set_allocation_successful expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_allocation_successful&quot;, 1)" line="6134" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_allocation_successful", 1)</e></m></meta>
		</lime_hb_set_allocation_successful>
		<lime_hb_set_clear expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_clear&quot;, 1)" line="6135" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_clear", 1)</e></m></meta>
		</lime_hb_set_clear>
		<lime_hb_set_create expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_create&quot;, 0)" line="6136" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_create", 0)</e></m></meta>
		</lime_hb_set_create>
		<lime_hb_set_del expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_del&quot;, 2)" line="6137" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_del", 2)</e></m></meta>
		</lime_hb_set_del>
		<lime_hb_set_del_range expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_del_range&quot;, 3)" line="6138" static="1">
			<f a="::">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_del_range", 3)</e></m></meta>
		</lime_hb_set_del_range>
		<lime_hb_set_get_empty expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_get_empty&quot;, 0)" line="6139" static="1">
			<f a=""><d/></f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_get_empty", 0)</e></m></meta>
		</lime_hb_set_get_empty>
		<lime_hb_set_get_max expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_get_max&quot;, 1)" line="6140" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_get_max", 1)</e></m></meta>
		</lime_hb_set_get_max>
		<lime_hb_set_get_min expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_get_min&quot;, 1)" line="6141" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_get_min", 1)</e></m></meta>
		</lime_hb_set_get_min>
		<lime_hb_set_get_population expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_get_population&quot;, 1)" line="6142" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_get_population", 1)</e></m></meta>
		</lime_hb_set_get_population>
		<lime_hb_set_has expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_has&quot;, 2)" line="6143" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_has", 2)</e></m></meta>
		</lime_hb_set_has>
		<lime_hb_set_intersect expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_intersect&quot;, 2)" line="6144" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_intersect", 2)</e></m></meta>
		</lime_hb_set_intersect>
		<lime_hb_set_invert expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_invert&quot;, 1)" line="6145" static="1">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_invert", 1)</e></m></meta>
		</lime_hb_set_invert>
		<lime_hb_set_is_empty expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_is_empty&quot;, 1)" line="6146" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_is_empty", 1)</e></m></meta>
		</lime_hb_set_is_empty>
		<lime_hb_set_is_equal expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_is_equal&quot;, 2)" line="6147" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_is_equal", 2)</e></m></meta>
		</lime_hb_set_is_equal>
		<lime_hb_set_next expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_next&quot;, 1)" line="6148" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_next", 1)</e></m></meta>
		</lime_hb_set_next>
		<lime_hb_set_next_range expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_next_range&quot;, 1)" line="6149" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_next_range", 1)</e></m></meta>
		</lime_hb_set_next_range>
		<lime_hb_set_set expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_set&quot;, 2)" line="6150" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_set", 2)</e></m></meta>
		</lime_hb_set_set>
		<lime_hb_set_subtract expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_subtract&quot;, 2)" line="6151" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_subtract", 2)</e></m></meta>
		</lime_hb_set_subtract>
		<lime_hb_set_symmetric_difference expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_symmetric_difference&quot;, 2)" line="6152" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_symmetric_difference", 2)</e></m></meta>
		</lime_hb_set_symmetric_difference>
		<lime_hb_set_union expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_set_union&quot;, 2)" line="6153" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_set_union", 2)</e></m></meta>
		</lime_hb_set_union>
		<lime_hb_shape expr="CFFI.load(&quot;lime&quot;, &quot;lime_hb_shape&quot;, 3)" line="6154" static="1">
			<f a="::">
				<d/>
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_hb_shape", 3)</e></m></meta>
		</lime_hb_shape>
		<lime_vorbis_file_bitrate expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_bitrate&quot;, 2)" line="6716" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_bitrate", 2)</e></m></meta>
		</lime_vorbis_file_bitrate>
		<lime_vorbis_file_bitrate_instant expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_bitrate_instant&quot;, 1)" line="6717" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_bitrate_instant", 1)</e></m></meta>
		</lime_vorbis_file_bitrate_instant>
		<lime_vorbis_file_clear expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_clear&quot;, 1)" line="6718" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_clear", 1)</e></m></meta>
		</lime_vorbis_file_clear>
		<lime_vorbis_file_comment expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_comment&quot;, 2)" line="6719" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<a>
					<vendor set="null"><c path="String"/></vendor>
					<userComments set="null"><c path="Array"><c path="String"/></c></userComments>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_comment", 2)</e></m></meta>
		</lime_vorbis_file_comment>
		<lime_vorbis_file_crosslap expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_crosslap&quot;, 2)" line="6720" static="1">
			<f a=":">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_crosslap", 2)</e></m></meta>
		</lime_vorbis_file_crosslap>
		<lime_vorbis_file_from_bytes expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_from_bytes&quot;, 1)" line="6721" static="1">
			<f a="">
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_from_bytes", 1)</e></m></meta>
		</lime_vorbis_file_from_bytes>
		<lime_vorbis_file_from_file expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_from_file&quot;, 1)" line="6722" static="1">
			<f a="">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_from_file", 1)</e></m></meta>
		</lime_vorbis_file_from_file>
		<lime_vorbis_file_info expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_info&quot;, 2)" line="6723" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<a>
					<version set="null"><x path="Int"/></version>
					<rate set="null"><x path="Int"/></rate>
					<channels set="null"><x path="Int"/></channels>
					<bitrateUpper set="null"><x path="Int"/></bitrateUpper>
					<bitrateNominal set="null"><x path="Int"/></bitrateNominal>
					<bitrateLower set="null"><x path="Int"/></bitrateLower>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_info", 2)</e></m></meta>
		</lime_vorbis_file_info>
		<lime_vorbis_file_pcm_seek expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_pcm_seek&quot;, 3)" line="6724" static="1">
			<f a="::">
				<d/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_pcm_seek", 3)</e></m></meta>
		</lime_vorbis_file_pcm_seek>
		<lime_vorbis_file_pcm_seek_lap expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_pcm_seek_lap&quot;, 3)" line="6725" static="1">
			<f a="::">
				<d/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_pcm_seek_lap", 3)</e></m></meta>
		</lime_vorbis_file_pcm_seek_lap>
		<lime_vorbis_file_pcm_seek_page expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_pcm_seek_page&quot;, 3)" line="6726" static="1">
			<f a="::">
				<d/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_pcm_seek_page", 3)</e></m></meta>
		</lime_vorbis_file_pcm_seek_page>
		<lime_vorbis_file_pcm_seek_page_lap expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_pcm_seek_page_lap&quot;, 3)" line="6727" static="1">
			<f a="::">
				<d/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_pcm_seek_page_lap", 3)</e></m></meta>
		</lime_vorbis_file_pcm_seek_page_lap>
		<lime_vorbis_file_raw_seek expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_raw_seek&quot;, 3)" line="6728" static="1">
			<f a="::">
				<d/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_raw_seek", 3)</e></m></meta>
		</lime_vorbis_file_raw_seek>
		<lime_vorbis_file_raw_seek_lap expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_raw_seek_lap&quot;, 3)" line="6729" static="1">
			<f a="::">
				<d/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_raw_seek_lap", 3)</e></m></meta>
		</lime_vorbis_file_raw_seek_lap>
		<lime_vorbis_file_pcm_tell expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_pcm_tell&quot;, 1)" line="6730" static="1">
			<f a="">
				<d/>
				<a>
					<low set="null"><x path="haxe.Int32"/></low>
					<high set="null"><x path="haxe.Int32"/></high>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_pcm_tell", 1)</e></m></meta>
		</lime_vorbis_file_pcm_tell>
		<lime_vorbis_file_pcm_total expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_pcm_total&quot;, 2)" line="6731" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<a>
					<low set="null"><x path="haxe.Int32"/></low>
					<high set="null"><x path="haxe.Int32"/></high>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_pcm_total", 2)</e></m></meta>
		</lime_vorbis_file_pcm_total>
		<lime_vorbis_file_raw_tell expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_raw_tell&quot;, 1)" line="6732" static="1">
			<f a="">
				<d/>
				<a>
					<low set="null"><x path="haxe.Int32"/></low>
					<high set="null"><x path="haxe.Int32"/></high>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_raw_tell", 1)</e></m></meta>
		</lime_vorbis_file_raw_tell>
		<lime_vorbis_file_raw_total expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_raw_total&quot;, 2)" line="6733" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<a>
					<low set="null"><x path="haxe.Int32"/></low>
					<high set="null"><x path="haxe.Int32"/></high>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_raw_total", 2)</e></m></meta>
		</lime_vorbis_file_raw_total>
		<lime_vorbis_file_read expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_read&quot;, -1)" line="6734" static="1">
			<f a="::::::">
				<d/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<a>
					<returnValue set="null"><x path="Int"/></returnValue>
					<bitstream set="null"><x path="Int"/></bitstream>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_read", -1)</e></m></meta>
		</lime_vorbis_file_read>
		<lime_vorbis_file_read_float expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_read_float&quot;, 3)" line="6735" static="1">
			<f a="::">
				<d/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<a>
					<returnValue set="null"><x path="Int"/></returnValue>
					<bitstream set="null"><x path="Int"/></bitstream>
				</a>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_read_float", 3)</e></m></meta>
		</lime_vorbis_file_read_float>
		<lime_vorbis_file_seekable expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_seekable&quot;, 1)" line="6736" static="1">
			<f a="">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_seekable", 1)</e></m></meta>
		</lime_vorbis_file_seekable>
		<lime_vorbis_file_serial_number expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_serial_number&quot;, 2)" line="6737" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_serial_number", 2)</e></m></meta>
		</lime_vorbis_file_serial_number>
		<lime_vorbis_file_streams expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_streams&quot;, 1)" line="6738" static="1">
			<f a="">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_streams", 1)</e></m></meta>
		</lime_vorbis_file_streams>
		<lime_vorbis_file_time_seek expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_time_seek&quot;, 2)" line="6739" static="1">
			<f a=":">
				<d/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_time_seek", 2)</e></m></meta>
		</lime_vorbis_file_time_seek>
		<lime_vorbis_file_time_seek_lap expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_time_seek_lap&quot;, 2)" line="6740" static="1">
			<f a=":">
				<d/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_time_seek_lap", 2)</e></m></meta>
		</lime_vorbis_file_time_seek_lap>
		<lime_vorbis_file_time_seek_page expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_time_seek_page&quot;, 2)" line="6741" static="1">
			<f a=":">
				<d/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_time_seek_page", 2)</e></m></meta>
		</lime_vorbis_file_time_seek_page>
		<lime_vorbis_file_time_seek_page_lap expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_time_seek_page_lap&quot;, 2)" line="6742" static="1">
			<f a=":">
				<d/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_time_seek_page_lap", 2)</e></m></meta>
		</lime_vorbis_file_time_seek_page_lap>
		<lime_vorbis_file_time_tell expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_time_tell&quot;, 1)" line="6743" static="1">
			<f a="">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_time_tell", 1)</e></m></meta>
		</lime_vorbis_file_time_tell>
		<lime_vorbis_file_time_total expr="CFFI.load(&quot;lime&quot;, &quot;lime_vorbis_file_time_total&quot;, 2)" line="6744" static="1">
			<f a=":">
				<d/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>CFFI.load("lime", "lime_vorbis_file_time_total", 2)</e></m></meta>
		</lime_vorbis_file_time_total>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime._internal.backend.native.NativeApplication" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx">
		<applicationEventInfo expr="new ApplicationEventInfo(UPDATE)">
			<c path="lime._internal.backend.native.ApplicationEventInfo"/>
			<meta><m n=":value"><e>new ApplicationEventInfo(UPDATE)</e></m></meta>
		</applicationEventInfo>
		<clipboardEventInfo expr="new ClipboardEventInfo()">
			<c path="lime._internal.backend.native.ClipboardEventInfo"/>
			<meta><m n=":value"><e>new ClipboardEventInfo()</e></m></meta>
		</clipboardEventInfo>
		<currentTouches expr="new Map&lt;Int,Touch&gt;()">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="lime.ui.Touch"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,Touch>()]]></e></m></meta>
		</currentTouches>
		<dropEventInfo expr="new DropEventInfo()">
			<c path="lime._internal.backend.native.DropEventInfo"/>
			<meta><m n=":value"><e>new DropEventInfo()</e></m></meta>
		</dropEventInfo>
		<gamepadEventInfo expr="new GamepadEventInfo()">
			<c path="lime._internal.backend.native.GamepadEventInfo"/>
			<meta><m n=":value"><e>new GamepadEventInfo()</e></m></meta>
		</gamepadEventInfo>
		<joystickEventInfo expr="new JoystickEventInfo()">
			<c path="lime._internal.backend.native.JoystickEventInfo"/>
			<meta><m n=":value"><e>new JoystickEventInfo()</e></m></meta>
		</joystickEventInfo>
		<keyEventInfo expr="new KeyEventInfo()">
			<c path="lime._internal.backend.native.KeyEventInfo"/>
			<meta><m n=":value"><e>new KeyEventInfo()</e></m></meta>
		</keyEventInfo>
		<mouseEventInfo expr="new MouseEventInfo()">
			<c path="lime._internal.backend.native.MouseEventInfo"/>
			<meta><m n=":value"><e>new MouseEventInfo()</e></m></meta>
		</mouseEventInfo>
		<renderEventInfo expr="new RenderEventInfo(RENDER)">
			<c path="lime._internal.backend.native.RenderEventInfo"/>
			<meta><m n=":value"><e>new RenderEventInfo(RENDER)</e></m></meta>
		</renderEventInfo>
		<sensorEventInfo expr="new SensorEventInfo()">
			<c path="lime._internal.backend.native.SensorEventInfo"/>
			<meta><m n=":value"><e>new SensorEventInfo()</e></m></meta>
		</sensorEventInfo>
		<textEventInfo expr="new TextEventInfo()">
			<c path="lime._internal.backend.native.TextEventInfo"/>
			<meta><m n=":value"><e>new TextEventInfo()</e></m></meta>
		</textEventInfo>
		<touchEventInfo expr="new TouchEventInfo()">
			<c path="lime._internal.backend.native.TouchEventInfo"/>
			<meta><m n=":value"><e>new TouchEventInfo()</e></m></meta>
		</touchEventInfo>
		<unusedTouchesPool expr="new List&lt;Touch&gt;()">
			<c path="haxe.ds.List"><c path="lime.ui.Touch"/></c>
			<meta><m n=":value"><e><![CDATA[new List<Touch>()]]></e></m></meta>
		</unusedTouchesPool>
		<windowEventInfo expr="new WindowEventInfo()">
			<c path="lime._internal.backend.native.WindowEventInfo"/>
			<meta><m n=":value"><e>new WindowEventInfo()</e></m></meta>
		</windowEventInfo>
		<handle public="1"><d/></handle>
		<pauseTimer><x path="Int"/></pauseTimer>
		<parent><c path="lime.app.Application"/></parent>
		<toggleFullscreen><x path="Bool"/></toggleFullscreen>
		<advanceTimer set="method" line="91"><f a=""><x path="Void"/></f></advanceTimer>
		<exec public="1" set="method" line="106"><f a=""><x path="Int"/></f></exec>
		<exit public="1" set="method" line="160"><f a=""><x path="Void"/></f></exit>
		<handleApplicationEvent set="method" line="169"><f a=""><x path="Void"/></f></handleApplicationEvent>
		<handleClipboardEvent set="method" line="182"><f a=""><x path="Void"/></f></handleClipboardEvent>
		<handleDropEvent set="method" line="187"><f a=""><x path="Void"/></f></handleDropEvent>
		<handleGamepadEvent set="method" line="195"><f a=""><x path="Void"/></f></handleGamepadEvent>
		<handleJoystickEvent set="method" line="219"><f a=""><x path="Void"/></f></handleJoystickEvent>
		<handleKeyEvent set="method" line="251"><f a=""><x path="Void"/></f></handleKeyEvent>
		<handleMouseEvent set="method" line="330"><f a=""><x path="Void"/></f></handleMouseEvent>
		<handleRenderEvent set="method" line="356"><f a=""><x path="Void"/></f></handleRenderEvent>
		<handleSensorEvent set="method" line="411"><f a=""><x path="Void"/></f></handleSensorEvent>
		<handleTextEvent set="method" line="421"><f a=""><x path="Void"/></f></handleTextEvent>
		<handleTouchEvent set="method" line="441"><f a=""><x path="Void"/></f></handleTouchEvent>
		<handleWindowEvent set="method" line="503"><f a=""><x path="Void"/></f></handleWindowEvent>
		<updateTimer set="method" line="569"><f a=""><x path="Void"/></f></updateTimer>
		<new public="1" set="method" line="73"><f a="parent">
	<c path="lime.app.Application"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>haxe.Timer</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeOpenGLRenderContext</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeWindow</e></m>
			<m n=":access"><e>lime.app.Application</e></m>
			<m n=":access"><e>lime.graphics.opengl.GL</e></m>
			<m n=":access"><e>lime.graphics.OpenGLRenderContext</e></m>
			<m n=":access"><e>lime.graphics.Renderer</e></m>
			<m n=":access"><e>lime.system.Clipboard</e></m>
			<m n=":access"><e>lime.system.Sensor</e></m>
			<m n=":access"><e>lime.ui.Gamepad</e></m>
			<m n=":access"><e>lime.ui.Joystick</e></m>
			<m n=":access"><e>lime.ui.Window</e></m>
		</meta>
	</class>
	<class path="lime._internal.backend.native.ApplicationEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<deltaTime public="1"><x path="Int"/></deltaTime>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.ApplicationEventType"/></type>
		<clone public="1" set="method" line="631"><f a=""><c path="lime._internal.backend.native.ApplicationEventInfo"/></f></clone>
		<new public="1" set="method" line="625">
			<f a="?type:?deltaTime" v="null:0">
				<x path="lime._internal.backend.native._NativeApplication.ApplicationEventType"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ deltaTime : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.ApplicationEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.ApplicationEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<UPDATE public="1" get="inline" set="null" expr="cast 0" line="638" static="1">
		<x path="lime._internal.backend.native._NativeApplication.ApplicationEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UPDATE>
	<EXIT public="1" get="inline" set="null" expr="cast 1" line="639" static="1">
		<x path="lime._internal.backend.native._NativeApplication.ApplicationEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXIT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.ApplicationEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<UPDATE public="1" get="inline" set="null" expr="cast 0" line="638" static="1">
			<x path="lime._internal.backend.native._NativeApplication.ApplicationEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UPDATE>
		<EXIT public="1" get="inline" set="null" expr="cast 1" line="639" static="1">
			<x path="lime._internal.backend.native._NativeApplication.ApplicationEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXIT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.ClipboardEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.ClipboardEventType"/></type>
		<clone public="1" set="method" line="652"><f a=""><c path="lime._internal.backend.native.ClipboardEventInfo"/></f></clone>
		<new public="1" set="method" line="647">
			<f a="?type" v="null">
				<x path="lime._internal.backend.native._NativeApplication.ClipboardEventType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.ClipboardEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.ClipboardEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<UPDATE public="1" get="inline" set="null" expr="cast 0" line="659" static="1">
		<x path="lime._internal.backend.native._NativeApplication.ClipboardEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UPDATE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.ClipboardEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<UPDATE public="1" get="inline" set="null" expr="cast 0" line="659" static="1">
			<x path="lime._internal.backend.native._NativeApplication.ClipboardEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UPDATE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.DropEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<file public="1"><c path="String"/></file>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.DropEventType"/></type>
		<clone public="1" set="method" line="674"><f a=""><c path="lime._internal.backend.native.DropEventInfo"/></f></clone>
		<new public="1" set="method" line="668">
			<f a="?type:?file" v="null:null">
				<x path="lime._internal.backend.native._NativeApplication.DropEventType"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ file : null, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.DropEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.DropEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<DROP_FILE public="1" get="inline" set="null" expr="cast 0" line="681" static="1">
		<x path="lime._internal.backend.native._NativeApplication.DropEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DROP_FILE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.DropEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<DROP_FILE public="1" get="inline" set="null" expr="cast 0" line="681" static="1">
			<x path="lime._internal.backend.native._NativeApplication.DropEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DROP_FILE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.GamepadEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<axis public="1"><x path="Int"/></axis>
		<button public="1"><x path="Int"/></button>
		<id public="1"><x path="Int"/></id>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/></type>
		<axisValue public="1"><x path="Float"/></axisValue>
		<clone public="1" set="method" line="702"><f a=""><c path="lime._internal.backend.native.GamepadEventInfo"/></f></clone>
		<new public="1" set="method" line="693">
			<f a="?type:?id:?button:?axis:?value" v="null:0:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ value : 0, axis : 0, button : 0, id : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.GamepadEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.GamepadEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<AXIS_MOVE public="1" get="inline" set="null" expr="cast 0" line="709" static="1">
		<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AXIS_MOVE>
	<BUTTON_DOWN public="1" get="inline" set="null" expr="cast 1" line="710" static="1">
		<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BUTTON_DOWN>
	<BUTTON_UP public="1" get="inline" set="null" expr="cast 2" line="711" static="1">
		<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BUTTON_UP>
	<CONNECT public="1" get="inline" set="null" expr="cast 3" line="712" static="1">
		<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CONNECT>
	<DISCONNECT public="1" get="inline" set="null" expr="cast 4" line="713" static="1">
		<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DISCONNECT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.GamepadEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<AXIS_MOVE public="1" get="inline" set="null" expr="cast 0" line="709" static="1">
			<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AXIS_MOVE>
		<BUTTON_DOWN public="1" get="inline" set="null" expr="cast 1" line="710" static="1">
			<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BUTTON_DOWN>
		<BUTTON_UP public="1" get="inline" set="null" expr="cast 2" line="711" static="1">
			<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BUTTON_UP>
		<CONNECT public="1" get="inline" set="null" expr="cast 3" line="712" static="1">
			<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CONNECT>
		<DISCONNECT public="1" get="inline" set="null" expr="cast 4" line="713" static="1">
			<x path="lime._internal.backend.native._NativeApplication.GamepadEventType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DISCONNECT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.JoystickEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<id public="1"><x path="Int"/></id>
		<index public="1"><x path="Int"/></index>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/></type>
		<eventValue public="1"><x path="Int"/></eventValue>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method" line="736"><f a=""><c path="lime._internal.backend.native.JoystickEventInfo"/></f></clone>
		<new public="1" set="method" line="726">
			<f a="?type:?id:?index:?value:?x:?y" v="null:0:0:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0, value : 0, index : 0, id : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.JoystickEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.JoystickEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<AXIS_MOVE public="1" get="inline" set="null" expr="cast 0" line="743" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AXIS_MOVE>
	<HAT_MOVE public="1" get="inline" set="null" expr="cast 1" line="744" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HAT_MOVE>
	<TRACKBALL_MOVE public="1" get="inline" set="null" expr="cast 2" line="745" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRACKBALL_MOVE>
	<BUTTON_DOWN public="1" get="inline" set="null" expr="cast 3" line="746" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BUTTON_DOWN>
	<BUTTON_UP public="1" get="inline" set="null" expr="cast 4" line="747" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BUTTON_UP>
	<CONNECT public="1" get="inline" set="null" expr="cast 5" line="748" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CONNECT>
	<DISCONNECT public="1" get="inline" set="null" expr="cast 6" line="749" static="1">
		<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DISCONNECT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.JoystickEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<AXIS_MOVE public="1" get="inline" set="null" expr="cast 0" line="743" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AXIS_MOVE>
		<HAT_MOVE public="1" get="inline" set="null" expr="cast 1" line="744" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HAT_MOVE>
		<TRACKBALL_MOVE public="1" get="inline" set="null" expr="cast 2" line="745" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRACKBALL_MOVE>
		<BUTTON_DOWN public="1" get="inline" set="null" expr="cast 3" line="746" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BUTTON_DOWN>
		<BUTTON_UP public="1" get="inline" set="null" expr="cast 4" line="747" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BUTTON_UP>
		<CONNECT public="1" get="inline" set="null" expr="cast 5" line="748" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CONNECT>
		<DISCONNECT public="1" get="inline" set="null" expr="cast 6" line="749" static="1">
			<x path="lime._internal.backend.native._NativeApplication.JoystickEventType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DISCONNECT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.KeyEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<keyCode public="1"><x path="Float"/></keyCode>
		<modifier public="1"><x path="Int"/></modifier>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.KeyEventType"/></type>
		<windowID public="1"><x path="Int"/></windowID>
		<clone public="1" set="method" line="768"><f a=""><c path="lime._internal.backend.native.KeyEventInfo"/></f></clone>
		<new public="1" set="method" line="760">
			<f a="?type:?windowID:?keyCode:?modifier" v="null:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.KeyEventType"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ modifier : 0, keyCode : 0, windowID : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.KeyEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.KeyEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<KEY_DOWN public="1" get="inline" set="null" expr="cast 0" line="775" static="1">
		<x path="lime._internal.backend.native._NativeApplication.KeyEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KEY_DOWN>
	<KEY_UP public="1" get="inline" set="null" expr="cast 1" line="776" static="1">
		<x path="lime._internal.backend.native._NativeApplication.KeyEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KEY_UP>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.KeyEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<KEY_DOWN public="1" get="inline" set="null" expr="cast 0" line="775" static="1">
			<x path="lime._internal.backend.native._NativeApplication.KeyEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KEY_DOWN>
		<KEY_UP public="1" get="inline" set="null" expr="cast 1" line="776" static="1">
			<x path="lime._internal.backend.native._NativeApplication.KeyEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KEY_UP>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.MouseEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<button public="1"><x path="Int"/></button>
		<movementX public="1"><x path="Float"/></movementX>
		<movementY public="1"><x path="Float"/></movementY>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.MouseEventType"/></type>
		<windowID public="1"><x path="Int"/></windowID>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method" line="801"><f a=""><c path="lime._internal.backend.native.MouseEventInfo"/></f></clone>
		<new public="1" set="method" line="790">
			<f a="?type:?windowID:?x:?y:?button:?movementX:?movementY" v="null:0:0:0:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ movementY : 0, movementX : 0, button : 0, y : 0, x : 0, windowID : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.MouseEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.MouseEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<MOUSE_DOWN public="1" get="inline" set="null" expr="cast 0" line="808" static="1">
		<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOUSE_DOWN>
	<MOUSE_UP public="1" get="inline" set="null" expr="cast 1" line="809" static="1">
		<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOUSE_UP>
	<MOUSE_MOVE public="1" get="inline" set="null" expr="cast 2" line="810" static="1">
		<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOUSE_MOVE>
	<MOUSE_WHEEL public="1" get="inline" set="null" expr="cast 3" line="811" static="1">
		<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOUSE_WHEEL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.MouseEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<MOUSE_DOWN public="1" get="inline" set="null" expr="cast 0" line="808" static="1">
			<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOUSE_DOWN>
		<MOUSE_UP public="1" get="inline" set="null" expr="cast 1" line="809" static="1">
			<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOUSE_UP>
		<MOUSE_MOVE public="1" get="inline" set="null" expr="cast 2" line="810" static="1">
			<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOUSE_MOVE>
		<MOUSE_WHEEL public="1" get="inline" set="null" expr="cast 3" line="811" static="1">
			<x path="lime._internal.backend.native._NativeApplication.MouseEventType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOUSE_WHEEL>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.RenderEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.RenderEventType"/></type>
		<clone public="1" set="method" line="824"><f a=""><c path="lime._internal.backend.native.RenderEventInfo"/></f></clone>
		<new public="1" set="method" line="819">
			<f a="?type" v="null">
				<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.RenderEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.RenderEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<RENDER public="1" get="inline" set="null" expr="cast 0" line="831" static="1">
		<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RENDER>
	<RENDER_CONTEXT_LOST public="1" get="inline" set="null" expr="cast 1" line="832" static="1">
		<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RENDER_CONTEXT_LOST>
	<RENDER_CONTEXT_RESTORED public="1" get="inline" set="null" expr="cast 2" line="833" static="1">
		<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RENDER_CONTEXT_RESTORED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.RenderEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<RENDER public="1" get="inline" set="null" expr="cast 0" line="831" static="1">
			<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RENDER>
		<RENDER_CONTEXT_LOST public="1" get="inline" set="null" expr="cast 1" line="832" static="1">
			<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RENDER_CONTEXT_LOST>
		<RENDER_CONTEXT_RESTORED public="1" get="inline" set="null" expr="cast 2" line="833" static="1">
			<x path="lime._internal.backend.native._NativeApplication.RenderEventType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RENDER_CONTEXT_RESTORED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.SensorEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<id public="1"><x path="Int"/></id>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.SensorEventType"/></type>
		<clone public="1" set="method" line="854"><f a=""><c path="lime._internal.backend.native.SensorEventInfo"/></f></clone>
		<new public="1" set="method" line="845">
			<f a="?type:?id:?x:?y:?z" v="null:0:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.SensorEventType"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0, y : 0, x : 0, id : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.SensorEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.SensorEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<ACCELEROMETER public="1" get="inline" set="null" expr="cast 0" line="861" static="1">
		<x path="lime._internal.backend.native._NativeApplication.SensorEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ACCELEROMETER>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.SensorEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<ACCELEROMETER public="1" get="inline" set="null" expr="cast 0" line="861" static="1">
			<x path="lime._internal.backend.native._NativeApplication.SensorEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ACCELEROMETER>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.TextEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<id public="1"><x path="Int"/></id>
		<length public="1"><x path="Int"/></length>
		<start public="1"><x path="Int"/></start>
		<text public="1"><c path="String"/></text>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.TextEventType"/></type>
		<windowID public="1"><x path="Int"/></windowID>
		<clone public="1" set="method" line="883"><f a=""><c path="lime._internal.backend.native.TextEventInfo"/></f></clone>
		<new public="1" set="method" line="874">
			<f a="?type:?windowID:?text:?start:?length" v="null:0:null:0:0">
				<x path="lime._internal.backend.native._NativeApplication.TextEventType"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, start : 0, text : null, windowID : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.TextEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.TextEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<TEXT_INPUT public="1" get="inline" set="null" expr="cast 0" line="890" static="1">
		<x path="lime._internal.backend.native._NativeApplication.TextEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEXT_INPUT>
	<TEXT_EDIT public="1" get="inline" set="null" expr="cast 1" line="891" static="1">
		<x path="lime._internal.backend.native._NativeApplication.TextEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEXT_EDIT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.TextEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<TEXT_INPUT public="1" get="inline" set="null" expr="cast 0" line="890" static="1">
			<x path="lime._internal.backend.native._NativeApplication.TextEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEXT_INPUT>
		<TEXT_EDIT public="1" get="inline" set="null" expr="cast 1" line="891" static="1">
			<x path="lime._internal.backend.native._NativeApplication.TextEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEXT_EDIT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.TouchEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<device public="1"><x path="Int"/></device>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<id public="1"><x path="Int"/></id>
		<pressure public="1"><x path="Float"/></pressure>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.TouchEventType"/></type>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method" line="918"><f a=""><c path="lime._internal.backend.native.TouchEventInfo"/></f></clone>
		<new public="1" set="method" line="906">
			<f a="?type:?x:?y:?id:?dx:?dy:?pressure:?device" v="null:0:0:0:0:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ device : 0, pressure : 0, dy : 0, dx : 0, id : 0, y : 0, x : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.TouchEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.TouchEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<TOUCH_START public="1" get="inline" set="null" expr="cast 0" line="925" static="1">
		<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TOUCH_START>
	<TOUCH_END public="1" get="inline" set="null" expr="cast 1" line="926" static="1">
		<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TOUCH_END>
	<TOUCH_MOVE public="1" get="inline" set="null" expr="cast 2" line="927" static="1">
		<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TOUCH_MOVE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.TouchEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<TOUCH_START public="1" get="inline" set="null" expr="cast 0" line="925" static="1">
			<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TOUCH_START>
		<TOUCH_END public="1" get="inline" set="null" expr="cast 1" line="926" static="1">
			<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TOUCH_END>
		<TOUCH_MOVE public="1" get="inline" set="null" expr="cast 2" line="927" static="1">
			<x path="lime._internal.backend.native._NativeApplication.TouchEventType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TOUCH_MOVE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.backend.native.WindowEventInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" module="lime._internal.backend.native.NativeApplication">
		<height public="1"><x path="Int"/></height>
		<type public="1"><x path="lime._internal.backend.native._NativeApplication.WindowEventType"/></type>
		<width public="1"><x path="Int"/></width>
		<windowID public="1"><x path="Int"/></windowID>
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<clone public="1" set="method" line="950"><f a=""><c path="lime._internal.backend.native.WindowEventInfo"/></f></clone>
		<new public="1" set="method" line="940">
			<f a="?type:?windowID:?width:?height:?x:?y" v="null:0:0:0:0:0">
				<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0, height : 0, width : 0, windowID : 0, type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeApplication.WindowEventType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeApplication.WindowEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
	<WINDOW_ACTIVATE public="1" get="inline" set="null" expr="cast 0" line="957" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_ACTIVATE>
	<WINDOW_CLOSE public="1" get="inline" set="null" expr="cast 1" line="958" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_CLOSE>
	<WINDOW_DEACTIVATE public="1" get="inline" set="null" expr="cast 2" line="959" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_DEACTIVATE>
	<WINDOW_ENTER public="1" get="inline" set="null" expr="cast 3" line="960" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_ENTER>
	<WINDOW_EXPOSE public="1" get="inline" set="null" expr="cast 4" line="961" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_EXPOSE>
	<WINDOW_FOCUS_IN public="1" get="inline" set="null" expr="cast 5" line="962" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FOCUS_IN>
	<WINDOW_FOCUS_OUT public="1" get="inline" set="null" expr="cast 6" line="963" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FOCUS_OUT>
	<WINDOW_LEAVE public="1" get="inline" set="null" expr="cast 7" line="964" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_LEAVE>
	<WINDOW_MAXIMIZE public="1" get="inline" set="null" expr="cast 8" line="965" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_MAXIMIZE>
	<WINDOW_MINIMIZE public="1" get="inline" set="null" expr="cast 9" line="966" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_MINIMIZE>
	<WINDOW_MOVE public="1" get="inline" set="null" expr="cast 10" line="967" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_MOVE>
	<WINDOW_RESIZE public="1" get="inline" set="null" expr="cast 11" line="968" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_RESIZE>
	<WINDOW_RESTORE public="1" get="inline" set="null" expr="cast 12" line="969" static="1">
		<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_RESTORE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeApplication.WindowEventType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeApplication.hx" private="1" module="lime._internal.backend.native.NativeApplication" extern="1" final="1">
		<WINDOW_ACTIVATE public="1" get="inline" set="null" expr="cast 0" line="957" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_ACTIVATE>
		<WINDOW_CLOSE public="1" get="inline" set="null" expr="cast 1" line="958" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_CLOSE>
		<WINDOW_DEACTIVATE public="1" get="inline" set="null" expr="cast 2" line="959" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_DEACTIVATE>
		<WINDOW_ENTER public="1" get="inline" set="null" expr="cast 3" line="960" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_ENTER>
		<WINDOW_EXPOSE public="1" get="inline" set="null" expr="cast 4" line="961" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_EXPOSE>
		<WINDOW_FOCUS_IN public="1" get="inline" set="null" expr="cast 5" line="962" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FOCUS_IN>
		<WINDOW_FOCUS_OUT public="1" get="inline" set="null" expr="cast 6" line="963" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FOCUS_OUT>
		<WINDOW_LEAVE public="1" get="inline" set="null" expr="cast 7" line="964" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_LEAVE>
		<WINDOW_MAXIMIZE public="1" get="inline" set="null" expr="cast 8" line="965" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_MAXIMIZE>
		<WINDOW_MINIMIZE public="1" get="inline" set="null" expr="cast 9" line="966" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_MINIMIZE>
		<WINDOW_MOVE public="1" get="inline" set="null" expr="cast 10" line="967" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_MOVE>
		<WINDOW_RESIZE public="1" get="inline" set="null" expr="cast 11" line="968" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_RESIZE>
		<WINDOW_RESTORE public="1" get="inline" set="null" expr="cast 12" line="969" static="1">
			<x path="lime._internal.backend.native._NativeApplication.WindowEventType"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_RESTORE>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="lime._internal.backend.native.Float32" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeCFFI.hx" module="lime._internal.backend.native.NativeCFFI"><x path="Float"/></typedef>
	<class path="lime._internal.backend.native.NativeOpenGLRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeOpenGLRenderContext.hx">
		<__extensionObjects static="1"><t path="Map">
	<c path="String"/>
	<d/>
</t></__extensionObjects>
		<__extensionObjectConstructors expr="new Map&lt;String,Void&gt;()" line="39" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<f a=""><d/></f>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,Void>()]]></e></m></meta>
		</__extensionObjectConstructors>
		<__lastContextID expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</__lastContextID>
		<__supportedExtensions static="1"><c path="Array"><c path="String"/></c></__supportedExtensions>
		<DEPTH_BUFFER_BIT public="1" expr="0x00000100">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000100</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" expr="0x00000400">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000400</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" expr="0x00004000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00004000</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" expr="0x0000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</POINTS>
		<LINES public="1" expr="0x0001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" expr="0x0002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" expr="0x0003">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" expr="0x0004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" expr="0x0005">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" expr="0x0006">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" expr="0x0300">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0300</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" expr="0x0301">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0301</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" expr="0x0302">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0302</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" expr="0x0303">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0303</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" expr="0x0304">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0304</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" expr="0x0305">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0305</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" expr="0x0306">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0306</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" expr="0x0307">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0307</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" expr="0x0308">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0308</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" expr="0x8006">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8006</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" expr="0x8009">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8009</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" expr="0x8009">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8009</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" expr="0x883D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x883D</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" expr="0x800A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x800A</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" expr="0x800B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x800B</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" expr="0x80C8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80C8</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" expr="0x80C9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80C9</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" expr="0x80CA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80CA</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" expr="0x80CB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80CB</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" expr="0x8001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8001</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" expr="0x8002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8002</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" expr="0x8003">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8003</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" expr="0x8004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8004</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" expr="0x8005">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8005</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" expr="0x8892">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8892</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" expr="0x8893">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8893</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" expr="0x8894">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8894</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" expr="0x8895">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8895</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" expr="0x88E0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E0</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" expr="0x88E4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E4</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" expr="0x88E8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E8</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" expr="0x8764">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8764</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" expr="0x8765">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8765</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" expr="0x8626">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8626</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" expr="0x0404">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0404</e></m></meta>
		</FRONT>
		<BACK public="1" expr="0x0405">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0405</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" expr="0x0408">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0408</e></m></meta>
		</FRONT_AND_BACK>
		<TEXTURE_2D public="1" expr="0x0DE1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0DE1</e></m></meta>
		</TEXTURE_2D>
		<CULL_FACE public="1" expr="0x0B44">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B44</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" expr="0x0BE2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BE2</e></m></meta>
		</BLEND>
		<DITHER public="1" expr="0x0BD0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BD0</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" expr="0x0B90">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B90</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" expr="0x0B71">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B71</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" expr="0x0C11">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C11</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" expr="0x8037">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8037</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" expr="0x809E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x809E</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" expr="0x80A0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80A0</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" expr="0x0500">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0500</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" expr="0x0501">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0501</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" expr="0x0502">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0502</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" expr="0x0505">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0505</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" expr="0x0900">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0900</e></m></meta>
		</CW>
		<CCW public="1" expr="0x0901">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0901</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" expr="0x0B21">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B21</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" expr="0x846D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x846D</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" expr="0x846E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x846E</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" expr="0x0B45">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B45</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" expr="0x0B46">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B46</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" expr="0x0B70">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B70</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" expr="0x0B72">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B72</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" expr="0x0B73">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B73</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" expr="0x0B74">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B74</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" expr="0x0B91">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B91</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" expr="0x0B92">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B92</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" expr="0x0B94">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B94</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" expr="0x0B95">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B95</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" expr="0x0B96">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B96</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" expr="0x0B97">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B97</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" expr="0x0B93">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B93</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" expr="0x0B98">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B98</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" expr="0x8800">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8800</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" expr="0x8801">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8801</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" expr="0x8802">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8802</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" expr="0x8803">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8803</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" expr="0x8CA3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA3</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" expr="0x8CA4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA4</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" expr="0x8CA5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA5</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" expr="0x0BA2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BA2</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" expr="0x0C10">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C10</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" expr="0x0C22">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C22</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" expr="0x0C23">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C23</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" expr="0x0CF5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF5</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" expr="0x0D05">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D05</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" expr="0x0D33">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D33</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" expr="0x0D3A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D3A</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" expr="0x0D50">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D50</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" expr="0x0D52">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D52</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" expr="0x0D53">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D53</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" expr="0x0D54">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D54</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" expr="0x0D55">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D55</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" expr="0x0D56">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D56</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" expr="0x0D57">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D57</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" expr="0x2A00">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2A00</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" expr="0x8038">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8038</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" expr="0x8069">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8069</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" expr="0x80A8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80A8</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" expr="0x80A9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80A9</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" expr="0x80AA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80AA</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" expr="0x80AB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80AB</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<NUM_COMPRESSED_TEXTURE_FORMATS public="1" expr="0x86A2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x86A2</e></m></meta>
		</NUM_COMPRESSED_TEXTURE_FORMATS>
		<COMPRESSED_TEXTURE_FORMATS public="1" expr="0x86A3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x86A3</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" expr="0x1100">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1100</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" expr="0x1101">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1101</e></m></meta>
		</FASTEST>
		<NICEST public="1" expr="0x1102">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1102</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" expr="0x8192">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8192</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" expr="0x1400">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1400</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" expr="0x1401">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1401</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" expr="0x1402">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1402</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" expr="0x1403">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1403</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" expr="0x1404">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1404</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" expr="0x1405">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1405</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" expr="0x1406">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1406</e></m></meta>
		</FLOAT>
		<FIXED public="1" expr="0x0140C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0140C</e></m></meta>
		</FIXED>
		<DEPTH_COMPONENT public="1" expr="0x1902">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1902</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" expr="0x1906">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1906</e></m></meta>
		</ALPHA>
		<RGB public="1" expr="0x1907">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1907</e></m></meta>
		</RGB>
		<RGBA public="1" expr="0x1908">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1908</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" expr="0x1909">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1909</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" expr="0x190A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x190A</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" expr="0x8033">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8033</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" expr="0x8034">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8034</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" expr="0x8363">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8363</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" expr="0x8B30">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B30</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" expr="0x8B31">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B31</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" expr="0x8869">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8869</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" expr="0x8DFB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFB</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" expr="0x8DFC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFC</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" expr="0x8B4D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4D</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" expr="0x8B4C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4C</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" expr="0x8872">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8872</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" expr="0x8DFD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFD</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" expr="0x8B4F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4F</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" expr="0x8B80">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B80</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" expr="0x8B82">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B82</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" expr="0x8B83">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B83</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" expr="0x8B85">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B85</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" expr="0x8B86">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B86</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_UNIFORMS_MAX_LENGTH public="1" expr="0x8B87">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B87</e></m></meta>
		</ACTIVE_UNIFORMS_MAX_LENGTH>
		<ACTIVE_ATTRIBUTES public="1" expr="0x8B89">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B89</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<ACTIVE_ATTRIBUTES_MAX_LENGTH public="1" expr="0x8B8A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8A</e></m></meta>
		</ACTIVE_ATTRIBUTES_MAX_LENGTH>
		<SHADING_LANGUAGE_VERSION public="1" expr="0x8B8C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8C</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" expr="0x8B8D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8D</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" expr="0x0200">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0200</e></m></meta>
		</NEVER>
		<LESS public="1" expr="0x0201">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0201</e></m></meta>
		</LESS>
		<EQUAL public="1" expr="0x0202">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0202</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" expr="0x0203">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0203</e></m></meta>
		</LEQUAL>
		<GREATER public="1" expr="0x0204">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0204</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" expr="0x0205">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0205</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" expr="0x0206">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0206</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" expr="0x0207">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0207</e></m></meta>
		</ALWAYS>
		<KEEP public="1" expr="0x1E00">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E00</e></m></meta>
		</KEEP>
		<REPLACE public="1" expr="0x1E01">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E01</e></m></meta>
		</REPLACE>
		<INCR public="1" expr="0x1E02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E02</e></m></meta>
		</INCR>
		<DECR public="1" expr="0x1E03">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E03</e></m></meta>
		</DECR>
		<INVERT public="1" expr="0x150A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x150A</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" expr="0x8507">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8507</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" expr="0x8508">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8508</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" expr="0x1F00">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F00</e></m></meta>
		</VENDOR>
		<RENDERER public="1" expr="0x1F01">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F01</e></m></meta>
		</RENDERER>
		<VERSION public="1" expr="0x1F02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F02</e></m></meta>
		</VERSION>
		<EXTENSIONS public="1" expr="0x1F03">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F03</e></m></meta>
		</EXTENSIONS>
		<NEAREST public="1" expr="0x2600">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2600</e></m></meta>
		</NEAREST>
		<LINEAR public="1" expr="0x2601">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2601</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" expr="0x2700">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2700</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" expr="0x2701">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2701</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" expr="0x2702">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2702</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" expr="0x2703">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2703</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" expr="0x2800">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2800</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" expr="0x2801">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2801</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" expr="0x2802">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2802</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" expr="0x2803">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2803</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE public="1" expr="0x1702">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1702</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" expr="0x8513">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8513</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" expr="0x8514">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8514</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" expr="0x8515">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8515</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" expr="0x8516">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8516</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" expr="0x8517">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8517</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" expr="0x8518">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8518</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" expr="0x8519">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8519</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" expr="0x851A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x851A</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" expr="0x851C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x851C</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" expr="0x84C0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C0</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" expr="0x84C1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C1</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" expr="0x84C2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C2</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" expr="0x84C3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C3</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" expr="0x84C4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C4</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" expr="0x84C5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C5</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" expr="0x84C6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C6</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" expr="0x84C7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C7</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" expr="0x84C8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C8</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" expr="0x84C9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C9</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" expr="0x84CA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CA</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" expr="0x84CB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CB</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" expr="0x84CC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CC</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" expr="0x84CD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CD</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" expr="0x84CE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CE</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" expr="0x84CF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CF</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" expr="0x84D0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D0</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" expr="0x84D1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D1</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" expr="0x84D2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D2</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" expr="0x84D3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D3</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" expr="0x84D4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D4</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" expr="0x84D5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D5</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" expr="0x84D6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D6</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" expr="0x84D7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D7</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" expr="0x84D8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D8</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" expr="0x84D9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D9</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" expr="0x84DA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DA</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" expr="0x84DB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DB</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" expr="0x84DC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DC</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" expr="0x84DD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DD</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" expr="0x84DE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DE</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" expr="0x84DF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DF</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" expr="0x84E0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84E0</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" expr="0x2901">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2901</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" expr="0x812F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x812F</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" expr="0x8370">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8370</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" expr="0x8B50">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B50</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" expr="0x8B51">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B51</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" expr="0x8B52">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B52</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" expr="0x8B53">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B53</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" expr="0x8B54">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B54</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" expr="0x8B55">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B55</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" expr="0x8B56">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B56</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" expr="0x8B57">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B57</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" expr="0x8B58">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B58</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" expr="0x8B59">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B59</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" expr="0x8B5A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5A</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" expr="0x8B5B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5B</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" expr="0x8B5C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5C</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" expr="0x8B5E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5E</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" expr="0x8B60">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B60</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" expr="0x8622">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8622</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" expr="0x8623">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8623</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" expr="0x8624">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8624</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" expr="0x8625">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8625</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" expr="0x886A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x886A</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" expr="0x8645">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8645</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" expr="0x889F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x889F</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" expr="0x8B9A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B9A</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" expr="0x8B9B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B9B</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<VERTEX_PROGRAM_POINT_SIZE public="1" expr="0x8642">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8642</e></m></meta>
		</VERTEX_PROGRAM_POINT_SIZE>
		<POINT_SPRITE public="1" expr="0x8861">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8861</e></m></meta>
		</POINT_SPRITE>
		<COMPILE_STATUS public="1" expr="0x8B81">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B81</e></m></meta>
		</COMPILE_STATUS>
		<INFO_LOG_LENGTH public="1" expr="0x8B84">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B84</e></m></meta>
		</INFO_LOG_LENGTH>
		<SHADER_SOURCE_LENGTH public="1" expr="0x8B88">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B88</e></m></meta>
		</SHADER_SOURCE_LENGTH>
		<SHADER_COMPILER public="1" expr="0x8DFA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFA</e></m></meta>
		</SHADER_COMPILER>
		<SHADER_BINARY_FORMATS public="1" expr="0x8DF8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF8</e></m></meta>
		</SHADER_BINARY_FORMATS>
		<NUM_SHADER_BINARY_FORMATS public="1" expr="0x8DF9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF9</e></m></meta>
		</NUM_SHADER_BINARY_FORMATS>
		<LOW_FLOAT public="1" expr="0x8DF0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF0</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" expr="0x8DF1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF1</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" expr="0x8DF2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF2</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" expr="0x8DF3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF3</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" expr="0x8DF4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF4</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" expr="0x8DF5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF5</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" expr="0x8D40">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D40</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" expr="0x8D41">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D41</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" expr="0x8056">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8056</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" expr="0x8057">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8057</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" expr="0x8D62">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D62</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" expr="0x81A5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A5</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX public="1" expr="0x1901">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1901</e></m></meta>
		</STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" expr="0x8D48">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D48</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" expr="0x84F9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F9</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" expr="0x8D42">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D42</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" expr="0x8D43">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D43</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" expr="0x8D44">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D44</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" expr="0x8D50">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D50</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" expr="0x8D51">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D51</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" expr="0x8D52">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D52</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" expr="0x8D53">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D53</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" expr="0x8D54">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D54</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" expr="0x8D55">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D55</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" expr="0x8CD0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD0</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" expr="0x8CD1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD1</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" expr="0x8CD2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD2</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" expr="0x8CD3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD3</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" expr="0x8CE0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE0</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" expr="0x8D00">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D00</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" expr="0x8D20">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D20</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" expr="0x821A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x821A</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" expr="0x8CD5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD5</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" expr="0x8CD6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD6</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" expr="0x8CD7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD7</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" expr="0x8CD9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD9</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" expr="0x8CDD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CDD</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" expr="0x8CA6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA6</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" expr="0x8CA7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA7</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" expr="0x84E8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84E8</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" expr="0x0506">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0506</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" expr="0x9240">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9240</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" expr="0x9241">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9241</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" expr="0x9242">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9242</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" expr="0x9243">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9243</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" expr="0x9244">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9244</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<READ_BUFFER public="1" expr="0x0C02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C02</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" expr="0x0CF2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF2</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" expr="0x0CF3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF3</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" expr="0x0CF4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF4</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" expr="0x0D02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D02</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" expr="0x0D03">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D03</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" expr="0x0D04">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D04</e></m></meta>
		</PACK_SKIP_PIXELS>
		<TEXTURE_BINDING_3D public="1" expr="0x806A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806A</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" expr="0x806D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806D</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" expr="0x806E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806E</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<MAX_3D_TEXTURE_SIZE public="1" expr="0x8073">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8073</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<MAX_ELEMENTS_VERTICES public="1" expr="0x80E8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E8</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" expr="0x80E9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E9</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<MAX_TEXTURE_LOD_BIAS public="1" expr="0x84FD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FD</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" expr="0x8B49">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B49</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" expr="0x8B4A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4A</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" expr="0x88FF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FF</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" expr="0x8904">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8904</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" expr="0x8905">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8905</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" expr="0x8B4B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4B</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" expr="0x8B8B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8B</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<RASTERIZER_DISCARD public="1" expr="0x8C89">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C89</e></m></meta>
		</RASTERIZER_DISCARD>
		<VERTEX_ARRAY_BINDING public="1" expr="0x85B5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x85B5</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" expr="0x9122">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9122</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" expr="0x9125">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9125</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" expr="0x9111">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9111</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<MAX_ELEMENT_INDEX public="1" expr="0x8D6B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D6B</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<RED public="1" expr="0x1903">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1903</e></m></meta>
		</RED>
		<RGB8 public="1" expr="0x8051">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8051</e></m></meta>
		</RGB8>
		<RGBA8 public="1" expr="0x8058">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8058</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" expr="0x8059">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8059</e></m></meta>
		</RGB10_A2>
		<TEXTURE_3D public="1" expr="0x806F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806F</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" expr="0x8072">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8072</e></m></meta>
		</TEXTURE_WRAP_R>
		<TEXTURE_MIN_LOD public="1" expr="0x813A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813A</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" expr="0x813B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813B</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" expr="0x813C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813C</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" expr="0x813D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813D</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<TEXTURE_COMPARE_MODE public="1" expr="0x884C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884C</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" expr="0x884D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884D</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<SRGB public="1" expr="0x8C40">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C40</e></m></meta>
		</SRGB>
		<SRGB8 public="1" expr="0x8C41">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C41</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" expr="0x8C43">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C43</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" expr="0x884E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884E</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" expr="0x8814">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8814</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" expr="0x8815">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8815</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" expr="0x881A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881A</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" expr="0x881B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881B</e></m></meta>
		</RGB16F>
		<TEXTURE_2D_ARRAY public="1" expr="0x8C1A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C1A</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" expr="0x8C1D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C1D</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" expr="0x8C3A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3A</e></m></meta>
		</R11F_G11F_B10F>
		<RGB9_E5 public="1" expr="0x8C3D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3D</e></m></meta>
		</RGB9_E5>
		<RGBA32UI public="1" expr="0x8D70">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D70</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" expr="0x8D71">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D71</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" expr="0x8D76">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D76</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" expr="0x8D77">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D77</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" expr="0x8D7C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D7C</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" expr="0x8D7D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D7D</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" expr="0x8D82">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D82</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" expr="0x8D83">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D83</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" expr="0x8D88">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D88</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" expr="0x8D89">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D89</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" expr="0x8D8E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D8E</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" expr="0x8D8F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D8F</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" expr="0x8D94">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D94</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" expr="0x8D98">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D98</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" expr="0x8D99">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D99</e></m></meta>
		</RGBA_INTEGER>
		<R8 public="1" expr="0x8229">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8229</e></m></meta>
		</R8>
		<RG8 public="1" expr="0x822B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822B</e></m></meta>
		</RG8>
		<R16F public="1" expr="0x822D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822D</e></m></meta>
		</R16F>
		<R32F public="1" expr="0x822E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822E</e></m></meta>
		</R32F>
		<RG16F public="1" expr="0x822F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822F</e></m></meta>
		</RG16F>
		<RG32F public="1" expr="0x8230">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8230</e></m></meta>
		</RG32F>
		<R8I public="1" expr="0x8231">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8231</e></m></meta>
		</R8I>
		<R8UI public="1" expr="0x8232">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8232</e></m></meta>
		</R8UI>
		<R16I public="1" expr="0x8233">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8233</e></m></meta>
		</R16I>
		<R16UI public="1" expr="0x8234">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8234</e></m></meta>
		</R16UI>
		<R32I public="1" expr="0x8235">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8235</e></m></meta>
		</R32I>
		<R32UI public="1" expr="0x8236">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8236</e></m></meta>
		</R32UI>
		<RG8I public="1" expr="0x8237">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8237</e></m></meta>
		</RG8I>
		<RG8UI public="1" expr="0x8238">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8238</e></m></meta>
		</RG8UI>
		<RG16I public="1" expr="0x8239">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8239</e></m></meta>
		</RG16I>
		<RG16UI public="1" expr="0x823A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x823A</e></m></meta>
		</RG16UI>
		<RG32I public="1" expr="0x823B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x823B</e></m></meta>
		</RG32I>
		<RG32UI public="1" expr="0x823C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x823C</e></m></meta>
		</RG32UI>
		<R8_SNORM public="1" expr="0x8F94">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F94</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" expr="0x8F95">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F95</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" expr="0x8F96">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F96</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" expr="0x8F97">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F97</e></m></meta>
		</RGBA8_SNORM>
		<RGB10_A2UI public="1" expr="0x906F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x906F</e></m></meta>
		</RGB10_A2UI>
		<TEXTURE_IMMUTABLE_FORMAT public="1" expr="0x912F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x912F</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<TEXTURE_IMMUTABLE_LEVELS public="1" expr="0x82DF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82DF</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<UNSIGNED_INT_2_10_10_10_REV public="1" expr="0x8368">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8368</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" expr="0x8C3B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3B</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<UNSIGNED_INT_5_9_9_9_REV public="1" expr="0x8C3E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3E</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" expr="0x8DAD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DAD</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<UNSIGNED_INT_24_8 public="1" expr="0x84FA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FA</e></m></meta>
		</UNSIGNED_INT_24_8>
		<HALF_FLOAT public="1" expr="0x140B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x140B</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" expr="0x8227">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8227</e></m></meta>
		</RG>
		<RG_INTEGER public="1" expr="0x8228">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8228</e></m></meta>
		</RG_INTEGER>
		<INT_2_10_10_10_REV public="1" expr="0x8D9F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D9F</e></m></meta>
		</INT_2_10_10_10_REV>
		<CURRENT_QUERY public="1" expr="0x8865">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8865</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" expr="0x8866">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8866</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" expr="0x8867">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8867</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<ANY_SAMPLES_PASSED public="1" expr="0x8C2F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C2F</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" expr="0x8D6A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D6A</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<MAX_DRAW_BUFFERS public="1" expr="0x8824">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8824</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" expr="0x8825">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8825</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" expr="0x8826">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8826</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" expr="0x8827">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8827</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" expr="0x8828">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8828</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" expr="0x8829">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8829</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" expr="0x882A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882A</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" expr="0x882B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882B</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" expr="0x882C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882C</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" expr="0x882D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882D</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" expr="0x882E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882E</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" expr="0x882F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882F</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" expr="0x8830">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8830</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" expr="0x8831">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8831</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" expr="0x8832">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8832</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" expr="0x8833">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8833</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" expr="0x8834">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8834</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_COLOR_ATTACHMENTS public="1" expr="0x8CDF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CDF</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" expr="0x8CE1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE1</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" expr="0x8CE2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE2</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" expr="0x8CE3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE3</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" expr="0x8CE4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE4</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" expr="0x8CE5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE5</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" expr="0x8CE6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE6</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" expr="0x8CE7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE7</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" expr="0x8CE8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE8</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" expr="0x8CE9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE9</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" expr="0x8CEA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEA</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" expr="0x8CEB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEB</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" expr="0x8CEC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEC</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" expr="0x8CED">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CED</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" expr="0x8CEE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEE</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" expr="0x8CEF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEF</e></m></meta>
		</COLOR_ATTACHMENT15>
		<SAMPLER_3D public="1" expr="0x8B5F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5F</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" expr="0x8B62">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B62</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<SAMPLER_2D_ARRAY public="1" expr="0x8DC1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC1</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" expr="0x8DC4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC4</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" expr="0x8DC5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC5</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<INT_SAMPLER_2D public="1" expr="0x8DCA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCA</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" expr="0x8DCB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCB</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" expr="0x8DCC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCC</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" expr="0x8DCF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCF</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" expr="0x8DD2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD2</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" expr="0x8DD3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD3</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" expr="0x8DD4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD4</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" expr="0x8DD7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD7</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<MAX_SAMPLES public="1" expr="0x8D57">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D57</e></m></meta>
		</MAX_SAMPLES>
		<SAMPLER_BINDING public="1" expr="0x8919">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8919</e></m></meta>
		</SAMPLER_BINDING>
		<PIXEL_PACK_BUFFER public="1" expr="0x88EB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EB</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" expr="0x88EC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EC</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" expr="0x88ED">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88ED</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" expr="0x88EF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EF</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<COPY_READ_BUFFER public="1" expr="0x8F36">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F36</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" expr="0x8F37">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F37</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" expr="0x8F36">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F36</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" expr="0x8F37">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F37</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" expr="0x8B65">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B65</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" expr="0x8B66">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B66</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" expr="0x8B67">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B67</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" expr="0x8B68">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B68</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" expr="0x8B69">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B69</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" expr="0x8B6A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B6A</e></m></meta>
		</FLOAT_MAT4x3>
		<UNSIGNED_INT_VEC2 public="1" expr="0x8DC6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC6</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" expr="0x8DC7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC7</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" expr="0x8DC8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC8</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<UNSIGNED_NORMALIZED public="1" expr="0x8C17">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C17</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<SIGNED_NORMALIZED public="1" expr="0x8F9C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F9C</e></m></meta>
		</SIGNED_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" expr="0x88FD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FD</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" expr="0x88FE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FE</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" expr="0x8C7F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C7F</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" expr="0x8C80">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C80</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" expr="0x8C83">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C83</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" expr="0x8C84">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C84</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" expr="0x8C85">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C85</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" expr="0x8C88">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C88</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" expr="0x8C8A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8A</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" expr="0x8C8B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8B</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" expr="0x8C8C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8C</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" expr="0x8C8D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8D</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" expr="0x8C8E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8E</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" expr="0x8C8F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8F</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<TRANSFORM_FEEDBACK public="1" expr="0x8E22">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E22</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" expr="0x8E23">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E23</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" expr="0x8E24">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E24</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" expr="0x8E25">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E25</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" expr="0x8210">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8210</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" expr="0x8211">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8211</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" expr="0x8212">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8212</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" expr="0x8213">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8213</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" expr="0x8214">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8214</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" expr="0x8215">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8215</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" expr="0x8216">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8216</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" expr="0x8217">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8217</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" expr="0x8218">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8218</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<DEPTH24_STENCIL8 public="1" expr="0x88F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88F0</e></m></meta>
		</DEPTH24_STENCIL8>
		<DRAW_FRAMEBUFFER_BINDING public="1" expr="0x8CA6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA6</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" expr="0x8CA8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA8</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" expr="0x8CA9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA9</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" expr="0x8CAA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAA</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" expr="0x8CAB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAB</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" expr="0x8CD4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD4</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" expr="0x8D56">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D56</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<UNIFORM_BUFFER public="1" expr="0x8A11">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A11</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" expr="0x8A28">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A28</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" expr="0x8A29">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A29</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" expr="0x8A2A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2A</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" expr="0x8A2B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2B</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" expr="0x8A2D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2D</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" expr="0x8A2E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2E</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" expr="0x8A2F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2F</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" expr="0x8A30">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A30</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" expr="0x8A31">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A31</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" expr="0x8A33">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A33</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" expr="0x8A34">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A34</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" expr="0x8A36">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A36</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" expr="0x8A37">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A37</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" expr="0x8A38">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A38</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" expr="0x8A3A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3A</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" expr="0x8A3B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3B</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" expr="0x8A3C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3C</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" expr="0x8A3D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3D</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" expr="0x8A3E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3E</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" expr="0x8A3F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3F</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" expr="0x8A40">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A40</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" expr="0x8A42">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A42</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" expr="0x8A43">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A43</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" expr="0x8A44">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A44</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" expr="0x8A46">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A46</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<OBJECT_TYPE public="1" expr="0x9112">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9112</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" expr="0x9113">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9113</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" expr="0x9114">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9114</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" expr="0x9115">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9115</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" expr="0x9116">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9116</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" expr="0x9117">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9117</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" expr="0x9118">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9118</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" expr="0x9119">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9119</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" expr="0x911A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911A</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" expr="0x911B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911B</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" expr="0x911C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911C</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" expr="0x911D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911D</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" expr="0x00000001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000001</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<COLOR public="1" expr="0x1800">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1800</e></m></meta>
		</COLOR>
		<DEPTH public="1" expr="0x1801">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1801</e></m></meta>
		</DEPTH>
		<STENCIL public="1" expr="0x1802">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1802</e></m></meta>
		</STENCIL>
		<MIN public="1" expr="0x8007">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8007</e></m></meta>
		</MIN>
		<MAX public="1" expr="0x8008">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8008</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" expr="0x81A6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A6</e></m></meta>
		</DEPTH_COMPONENT24>
		<STREAM_READ public="1" expr="0x88E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E1</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" expr="0x88E2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E2</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" expr="0x88E5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E5</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" expr="0x88E6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E6</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" expr="0x88E9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E9</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" expr="0x88EA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EA</e></m></meta>
		</DYNAMIC_COPY>
		<DEPTH_COMPONENT32F public="1" expr="0x8CAC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAC</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" expr="0x8CAD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAD</e></m></meta>
		</DEPTH32F_STENCIL8>
		<INVALID_INDEX public="1" expr="0xFFFFFFFF">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</INVALID_INDEX>
		<TIMEOUT_IGNORED public="1" expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" expr="0x9247">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9247</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<type public="1" set="null"><x path="lime.graphics.RenderContextType"/></type>
		<version public="1" set="null"><x path="Float"/></version>
		<__arrayBufferBinding><t path="lime.graphics.opengl.GLBuffer"/></__arrayBufferBinding>
		<__elementBufferBinding><t path="lime.graphics.opengl.GLBuffer"/></__elementBufferBinding>
		<__contextID><x path="Int"/></__contextID>
		<__currentProgram><x path="lime.graphics.opengl.GLProgram"/></__currentProgram>
		<__framebufferBinding><t path="lime.graphics.opengl.GLFramebuffer"/></__framebufferBinding>
		<__initialized><x path="Bool"/></__initialized>
		<__isContextLost><x path="Bool"/></__isContextLost>
		<__renderbufferBinding><t path="lime.graphics.opengl.GLRenderbuffer"/></__renderbufferBinding>
		<__texture2DBinding><t path="lime.graphics.opengl.GLTexture"/></__texture2DBinding>
		<__textureCubeMapBinding><t path="lime.graphics.opengl.GLTexture"/></__textureCubeMapBinding>
		<activeTexture public="1" set="method" line="661"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" line="668"><f a="program:shader">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></attachShader>
		<beginQuery public="1" set="method" line="687"><f a="target:query">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></beginQuery>
		<beginTransformFeedback public="1" set="method" line="694"><f a="primitiveNode">
	<x path="Int"/>
	<x path="Void"/>
</f></beginTransformFeedback>
		<bindAttribLocation public="1" set="method" line="701"><f a="program:index:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" line="708"><f a="target:buffer">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindBufferBase public="1" set="method" line="718"><f a="target:index:buffer">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBufferBase>
		<bindBufferRange public="1" set="method" line="725"><f a="target:index:buffer:offset:size">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bindBufferRange>
		<bindFramebuffer public="1" set="method" line="732"><f a="target:framebuffer">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" line="741"><f a="target:renderbuffer">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindSampler public="1" set="method" line="750"><f a="unit:sampler">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></bindSampler>
		<bindTexture public="1" set="method" line="757"><f a="target:texture">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture>
		<bindTransformFeedback public="1" set="method" line="767"><f a="target:transformFeedback">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></bindTransformFeedback>
		<bindVertexArray public="1" set="method" line="774"><f a="vertexArray">
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></bindVertexArray>
		<blendColor public="1" set="method" line="781"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" line="788"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" line="795"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" line="802"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" line="809"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<blitFramebuffer public="1" set="method" line="816"><f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blitFramebuffer>
		<bufferData public="1" set="method" line="823"><f a="target:size:srcData:usage">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferSubData public="1" set="method" line="830"><f a="target:dstByteOffset:size:srcData">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></bufferSubData>
		<checkFramebufferStatus public="1" set="method" line="837"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" line="846"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearBufferfi public="1" set="method" line="853"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<clearBufferfv public="1" set="method" line="860"><f a="buffer:drawbuffer:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></clearBufferfv>
		<clearBufferiv public="1" set="method" line="867"><f a="buffer:drawbuffer:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></clearBufferiv>
		<clearBufferuiv public="1" set="method" line="874"><f a="buffer:drawbuffer:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></clearBufferuiv>
		<clearColor public="1" set="method" line="881"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepthf public="1" set="method" line="888"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepthf>
		<clearStencil public="1" set="method" line="895"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<clientWaitSync public="1" set="method" line="902"><f a="sync:flags:timeout">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></clientWaitSync>
		<colorMask public="1" set="method" line="911"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" line="918"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" set="method" line="925"><f a="target:level:internalformat:width:height:border:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexImage3D public="1" set="method" line="933"><f a="target:level:internalformat:width:height:depth:border:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexImage3D>
		<compressedTexSubImage2D public="1" set="method" line="941"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" set="method" line="949"><f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexSubImage3D>
		<copyBufferSubData public="1" set="method" line="956"><f a="readTarget:writeTarget:readOffset:writeOffset:size">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyBufferSubData>
		<copyTexImage2D public="1" set="method" line="963"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" line="970"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<copyTexSubImage3D public="1" set="method" line="977"><f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage3D>
		<createBuffer public="1" set="method" line="984"><f a=""><t path="lime.graphics.opengl.GLBuffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" line="997"><f a=""><t path="lime.graphics.opengl.GLFramebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" line="1010"><f a=""><x path="lime.graphics.opengl.GLProgram"/></f></createProgram>
		<createQuery public="1" set="method" line="1023"><f a=""><t path="lime.graphics.opengl.GLQuery"/></f></createQuery>
		<createRenderbuffer public="1" set="method" line="1036"><f a=""><t path="lime.graphics.opengl.GLRenderbuffer"/></f></createRenderbuffer>
		<createSampler public="1" set="method" line="1049"><f a=""><t path="lime.graphics.opengl.GLSampler"/></f></createSampler>
		<createShader public="1" set="method" line="1062"><f a="type">
	<x path="Int"/>
	<x path="lime.graphics.opengl.GLShader"/>
</f></createShader>
		<createTexture public="1" set="method" line="1075"><f a=""><t path="lime.graphics.opengl.GLTexture"/></f></createTexture>
		<createTransformFeedback public="1" set="method" line="1088"><f a=""><t path="lime.graphics.opengl.GLTransformFeedback"/></f></createTransformFeedback>
		<createVertexArray public="1" set="method" line="1101"><f a=""><t path="lime.graphics.opengl.GLVertexArrayObject"/></f></createVertexArray>
		<cullFace public="1" set="method" line="1114"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" line="1121"><f a="buffer">
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" line="1129"><f a="framebuffer">
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" line="1137"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteQuery public="1" set="method" line="1145"><f a="query">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></deleteQuery>
		<deleteRenderbuffer public="1" set="method" line="1153"><f a="renderbuffer">
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteSampler public="1" set="method" line="1161"><f a="sampler">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></deleteSampler>
		<deleteShader public="1" set="method" line="1169"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteSync public="1" set="method" line="1177"><f a="sync">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Void"/>
</f></deleteSync>
		<deleteTexture public="1" set="method" line="1184"><f a="texture">
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></deleteTexture>
		<deleteTransformFeedback public="1" set="method" line="1192"><f a="transformFeedback">
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></deleteTransformFeedback>
		<deleteVertexArray public="1" set="method" line="1200"><f a="vertexArray">
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></deleteVertexArray>
		<depthFunc public="1" set="method" line="1208"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" line="1215"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRangef public="1" set="method" line="1222"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRangef>
		<detachShader public="1" set="method" line="1229"><f a="program:shader">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" line="1241"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" line="1248"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" line="1255"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawArraysInstanced public="1" set="method" line="1262"><f a="mode:first:count:instanceCount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArraysInstanced>
		<drawBuffers public="1" set="method" line="1269"><f a="buffers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></drawBuffers>
		<drawElements public="1" set="method" line="1282"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawElements>
		<drawElementsInstanced public="1" set="method" line="1289"><f a="mode:count:type:offset:instanceCount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElementsInstanced>
		<drawRangeElements public="1" set="method" line="1296"><f a="mode:start:end:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawRangeElements>
		<enable public="1" set="method" line="1303"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" line="1310"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<endQuery public="1" set="method" line="1317"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></endQuery>
		<endTransformFeedback public="1" set="method" line="1324"><f a=""><x path="Void"/></f></endTransformFeedback>
		<fenceSync public="1" set="method" line="1331"><f a="condition:flags">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSync"/>
</f></fenceSync>
		<finish public="1" set="method" line="1340"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" line="1347"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" line="1354"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" line="1361"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<framebufferTextureLayer public="1" set="method" line="1368"><f a="target:attachment:texture:level:layer">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTextureLayer>
		<frontFace public="1" set="method" line="1375"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" line="1382"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" line="1389"><f a="program:index">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" line="1414"><f a="program:index">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveUniform>
		<getActiveUniformBlocki public="1" set="method" line="1439"><f a="program:uniformBlockIndex:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getActiveUniformBlocki>
		<getActiveUniformBlockiv public="1" set="method" line="1448"><f a="program:uniformBlockIndex:pname:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getActiveUniformBlockiv>
		<getActiveUniformBlockName public="1" set="method" line="1455"><f a="program:uniformBlockIndex">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
</f></getActiveUniformBlockName>
		<getActiveUniformBlockParameter public="1" set="method" line="1468"><f a="program:uniformBlockIndex:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getActiveUniformBlockParameter>
		<getActiveUniforms public="1" set="method" line="1475"><f a="program:uniformIndices:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<d/>
</f></getActiveUniforms>
		<getActiveUniformsiv public="1" set="method" line="1482"><f a="program:uniformIndices:pname:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getActiveUniformsiv>
		<getAttachedShaders public="1" set="method" line="1495"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" line="1513"><f a="program:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBoolean public="1" set="method" line="1522"><f a="pname">
	<x path="Int"/>
	<x path="Bool"/>
</f></getBoolean>
		<getBooleanv public="1" set="method" line="1531"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBooleanv>
		<getBufferParameter public="1" set="method" line="1538"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getBufferParameteri public="1" set="method" line="1543"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getBufferParameteri>
		<getBufferParameteri64v public="1" set="method" line="1552"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBufferParameteri64v>
		<getBufferParameteriv public="1" set="method" line="1559"><f a="target:pname:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBufferParameteriv>
		<getBufferPointerv public="1" set="method" line="1566"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></getBufferPointerv>
		<getBufferSubData public="1" set="method" line="1575"><f a="target:offset:size:data">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBufferSubData>
		<getContextAttributes public="1" set="method" line="1582"><f a=""><t path="lime.graphics.opengl.GLContextAttributes"/></f></getContextAttributes>
		<getError public="1" set="method" line="1594"><f a=""><x path="Int"/></f></getError>
		<getExtension public="1" set="method" line="1603"><f a="name">
	<c path="String"/>
	<d/>
</f></getExtension>
		<getFloat public="1" set="method" line="1641"><f a="pname">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getFloatv public="1" set="method" line="1650"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getFloatv>
		<getFragDataLocation public="1" set="method" line="1657"><f a="program:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getFragDataLocation>
		<getFramebufferAttachmentParameter public="1" set="method" line="1666"><f a="target:attachment:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getFramebufferAttachmentParameter>
		<getFramebufferAttachmentParameteri public="1" set="method" line="1682"><f a="target:attachment:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getFramebufferAttachmentParameteri>
		<getFramebufferAttachmentParameteriv public="1" set="method" line="1691"><f a="target:attachment:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getFramebufferAttachmentParameteriv>
		<getIndexedParameter public="1" set="method" line="1698"><f a="target:index">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getIndexedParameter>
		<getInteger public="1" set="method" line="1705"><f a="pname">
	<x path="Int"/>
	<x path="Int"/>
</f></getInteger>
		<getInteger64 public="1" set="method" line="1714"><f a="pname">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInteger64>
		<getInteger64i public="1" set="method" line="1725"><f a="pname">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInteger64i>
		<getInteger64i_v public="1" set="method" line="1736"><f a="pname:index:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getInteger64i_v>
		<getInteger64v public="1" set="method" line="1743"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getInteger64v>
		<getIntegeri_v public="1" set="method" line="1750"><f a="pname:index:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getIntegeri_v>
		<getIntegerv public="1" set="method" line="1757"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getIntegerv>
		<getInternalformati public="1" set="method" line="1764"><f a="target:internalformat:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInternalformati>
		<getInternalformativ public="1" set="method" line="1775"><f a="target:internalformat:pname:bufSize:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getInternalformativ>
		<getInternalformatParameter public="1" set="method" line="1782"><f a="target:internalformat:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getInternalformatParameter>
		<getParameter public="1" set="method" line="1789"><f a="pname">
	<x path="Int"/>
	<d/>
</f></getParameter>
		<getProgrami public="1" set="method" line="1874"><f a="program:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getProgrami>
		<getProgramiv public="1" set="method" line="1883"><f a="program:pname:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getProgramiv>
		<getProgramBinary public="1" set="method" line="1890"><f a="program:binaryFormat">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getProgramBinary>
		<getProgramInfoLog public="1" set="method" line="1901"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getProgramParameter public="1" set="method" line="1914"><f a="program:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getQuery public="1" set="method" line="1919"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
</f></getQuery>
		<getQueryi public="1" set="method" line="1924"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getQueryi>
		<getQueryiv public="1" set="method" line="1933"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getQueryiv>
		<getQueryObjectui public="1" set="method" line="1940"><f a="query:pname">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getQueryObjectui>
		<getQueryObjectuiv public="1" set="method" line="1949"><f a="query:pname:params">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getQueryObjectuiv>
		<getQueryParameter public="1" set="method" line="1956"><f a="query:pname">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<d/>
</f></getQueryParameter>
		<getRenderbufferParameter public="1" set="method" line="1963"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getRenderbufferParameteri public="1" set="method" line="1968"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getRenderbufferParameteri>
		<getRenderbufferParameteriv public="1" set="method" line="1977"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getRenderbufferParameteriv>
		<getSamplerParameter public="1" set="method" line="1984"><f a="sampler:pname">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<d/>
</f></getSamplerParameter>
		<getSamplerParameterf public="1" set="method" line="1991"><f a="sampler:pname">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getSamplerParameterf>
		<getSamplerParameterfv public="1" set="method" line="2000"><f a="sampler:pname:params">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getSamplerParameterfv>
		<getSamplerParameteri public="1" set="method" line="2007"><f a="sampler:pname">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getSamplerParameteri>
		<getSamplerParameteriv public="1" set="method" line="2016"><f a="sampler:pname:params">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getSamplerParameteriv>
		<getShaderi public="1" set="method" line="2023"><f a="shader:pname">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getShaderi>
		<getShaderiv public="1" set="method" line="2032"><f a="shader:pname:params">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getShaderiv>
		<getShaderInfoLog public="1" set="method" line="2039"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderParameter public="1" set="method" line="2052"><f a="shader:pname">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" line="2057"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderSource public="1" set="method" line="2066"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderSource>
		<getString public="1" set="method" line="2079"><f a="name">
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<getStringi public="1" set="method" line="2092"><f a="name:index">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getStringi>
		<getSupportedExtensions public="1" set="method" line="2105"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getSyncParameter public="1" set="method" line="2135"><f a="sync:pname">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<d/>
</f></getSyncParameter>
		<getSyncParameteri public="1" set="method" line="2142"><f a="sync:pname">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getSyncParameteri>
		<getSyncParameteriv public="1" set="method" line="2149"><f a="sync:pname:params">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getSyncParameteriv>
		<getTexParameter public="1" set="method" line="2154"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getTexParameterf public="1" set="method" line="2169"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getTexParameterf>
		<getTexParameterfv public="1" set="method" line="2178"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getTexParameterfv>
		<getTexParameteri public="1" set="method" line="2185"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getTexParameteri>
		<getTexParameteriv public="1" set="method" line="2194"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getTexParameteriv>
		<getTransformFeedbackVarying public="1" set="method" line="2201"><f a="program:index">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getTransformFeedbackVarying>
		<getUniform public="1" set="method" line="2227"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformf public="1" set="method" line="2329"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
</f></getUniformf>
		<getUniformfv public="1" set="method" line="2338"><f a="program:location:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getUniformfv>
		<getUniformi public="1" set="method" line="2345"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
</f></getUniformi>
		<getUniformiv public="1" set="method" line="2354"><f a="program:location:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getUniformiv>
		<getUniformui public="1" set="method" line="2361"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
</f></getUniformui>
		<getUniformuiv public="1" set="method" line="2370"><f a="program:location:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getUniformuiv>
		<getUniformBlockIndex public="1" set="method" line="2377"><f a="program:uniformBlockName">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getUniformBlockIndex>
		<getUniformIndices public="1" set="method" line="2386"><f a="program:uniformNames">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="Int"/></c>
</f></getUniformIndices>
		<getUniformLocation public="1" set="method" line="2393"><f a="program:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" line="2402"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getVertexAttrib>
		<getVertexAttribf public="1" set="method" line="2407"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getVertexAttribf>
		<getVertexAttribfv public="1" set="method" line="2416"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribfv>
		<getVertexAttribi public="1" set="method" line="2423"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribi>
		<getVertexAttribIi public="1" set="method" line="2432"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribIi>
		<getVertexAttribIiv public="1" set="method" line="2441"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribIiv>
		<getVertexAttribIui public="1" set="method" line="2448"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribIui>
		<getVertexAttribIuiv public="1" set="method" line="2457"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribIuiv>
		<getVertexAttribiv public="1" set="method" line="2464"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribiv>
		<getVertexAttribPointerv public="1" set="method" line="2471"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></getVertexAttribPointerv>
		<hint public="1" set="method" line="2480"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<invalidateFramebuffer public="1" set="method" line="2487"><f a="target:attachments">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" set="method" line="2500"><f a="target:attachments:x:y:width:height">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></invalidateSubFramebuffer>
		<isBuffer public="1" set="method" line="2513"><f a="buffer">
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isContextLost public="1" set="method" line="2522"><f a=""><x path="Bool"/></f></isContextLost>
		<isEnabled public="1" set="method" line="2527"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" line="2536"><f a="framebuffer">
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" line="2545"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Bool"/>
</f></isProgram>
		<isQuery public="1" set="method" line="2554"><f a="query">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Bool"/>
</f></isQuery>
		<isRenderbuffer public="1" set="method" line="2563"><f a="renderbuffer">
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isSampler public="1" set="method" line="2572"><f a="sampler">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Bool"/>
</f></isSampler>
		<isShader public="1" set="method" line="2581"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Bool"/>
</f></isShader>
		<isSync public="1" set="method" line="2590"><f a="sync">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Bool"/>
</f></isSync>
		<isTexture public="1" set="method" line="2599"><f a="texture">
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Bool"/>
</f></isTexture>
		<isTransformFeedback public="1" set="method" line="2608"><f a="transformFeedback">
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Bool"/>
</f></isTransformFeedback>
		<isVertexArray public="1" set="method" line="2617"><f a="vertexArray">
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Bool"/>
</f></isVertexArray>
		<lineWidth public="1" set="method" line="2626"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" line="2633"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></linkProgram>
		<mapBufferRange public="1" set="method" line="2640"><f a="target:offset:length:access">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></mapBufferRange>
		<pauseTransformFeedback public="1" set="method" line="2649"><f a=""><x path="Void"/></f></pauseTransformFeedback>
		<pixelStorei public="1" set="method" line="2656"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" line="2663"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<programBinary public="1" set="method" line="2670"><f a="program:binaryFormat:binary:length">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></programBinary>
		<programParameteri public="1" set="method" line="2677"><f a="program:pname:value">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></programParameteri>
		<readBuffer public="1" set="method" line="2684"><f a="src">
	<x path="Int"/>
	<x path="Void"/>
</f></readBuffer>
		<readPixels public="1" set="method" line="2691"><f a="x:y:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></readPixels>
		<releaseShaderCompiler public="1" set="method" line="2698"><f a=""><x path="Void"/></f></releaseShaderCompiler>
		<renderbufferStorage public="1" set="method" line="2705"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<renderbufferStorageMultisample public="1" set="method" line="2712"><f a="target:samples:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorageMultisample>
		<resumeTransformFeedback public="1" set="method" line="2719"><f a=""><x path="Void"/></f></resumeTransformFeedback>
		<sampleCoverage public="1" set="method" line="2726"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<samplerParameterf public="1" set="method" line="2733"><f a="sampler:pname:param">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<samplerParameteri public="1" set="method" line="2740"><f a="sampler:pname:param">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<scissor public="1" set="method" line="2747"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderBinary public="1" set="method" line="2754"><f a="shaders:binaryformat:binary:length">
	<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></shaderBinary>
		<shaderSource public="1" set="method" line="2767"><f a="shader:source">
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" line="2774"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" line="2781"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" line="2788"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" line="2795"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" line="2802"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" line="2809"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" set="method" line="2816"><f a="target:level:internalformat:width:height:border:format:type:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texImage2D>
		<texImage3D public="1" set="method" line="2824"><f a="target:level:internalformat:width:height:depth:border:format:type:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texImage3D>
		<texStorage2D public="1" set="method" line="2831"><f a="target:level:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage2D>
		<texStorage3D public="1" set="method" line="2838"><f a="target:level:internalformat:width:height:depth">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage3D>
		<texParameterf public="1" set="method" line="2845"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" line="2852"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" set="method" line="2859"><f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texSubImage2D>
		<texSubImage3D public="1" set="method" line="2867"><f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texSubImage3D>
		<toString public="1" set="method" line="2874">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</toString>
		<transformFeedbackVaryings public="1" set="method" line="2879"><f a="program:varyings:bufferMode">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></transformFeedbackVaryings>
		<uniform1f public="1" set="method" line="2892"><f a="location:v0">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" set="method" line="2899"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform1fv>
		<uniform1i public="1" set="method" line="2906"><f a="location:v0">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" set="method" line="2913"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform1iv>
		<uniform1ui public="1" set="method" line="2920"><f a="location:v0">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform1uiv public="1" set="method" line="2927"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform1uiv>
		<uniform2f public="1" set="method" line="2934"><f a="location:v0:v1">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" set="method" line="2941"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform2fv>
		<uniform2i public="1" set="method" line="2948"><f a="location:v0:v1">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" set="method" line="2955"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform2iv>
		<uniform2ui public="1" set="method" line="2962"><f a="location:v0:v1">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform2uiv public="1" set="method" line="2969"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform2uiv>
		<uniform3f public="1" set="method" line="2976"><f a="location:v0:v1:v2">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" set="method" line="2983"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform3fv>
		<uniform3i public="1" set="method" line="2990"><f a="location:v0:v1:v2">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" set="method" line="2997"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform3iv>
		<uniform3ui public="1" set="method" line="3004"><f a="location:v0:v1:v2">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform3uiv public="1" set="method" line="3011"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform3uiv>
		<uniform4f public="1" set="method" line="3018"><f a="location:v0:v1:v2:v3">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" set="method" line="3025"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform4fv>
		<uniform4i public="1" set="method" line="3032"><f a="location:v0:v1:v2:v3">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" set="method" line="3039"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform4iv>
		<uniform4ui public="1" set="method" line="3046"><f a="location:v0:v1:v2:v3">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform4uiv public="1" set="method" line="3053"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform4uiv>
		<uniformBlockBinding public="1" set="method" line="3060"><f a="program:uniformBlockIndex:uniformBlockBinding">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniformBlockBinding>
		<uniformMatrix2fv public="1" set="method" line="3067"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
		<uniformMatrix2x3fv public="1" set="method" line="3074"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix2x3fv>
		<uniformMatrix2x4fv public="1" set="method" line="3081"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix2x4fv>
		<uniformMatrix3fv public="1" set="method" line="3088"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
		<uniformMatrix3x2fv public="1" set="method" line="3095"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix3x2fv>
		<uniformMatrix3x4fv public="1" set="method" line="3102"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" line="3109"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
		<uniformMatrix4x2fv public="1" set="method" line="3116"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix4x2fv>
		<uniformMatrix4x3fv public="1" set="method" line="3123"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix4x3fv>
		<unmapBuffer public="1" set="method" line="3130"><f a="target">
	<x path="Int"/>
	<x path="Bool"/>
</f></unmapBuffer>
		<useProgram public="1" set="method" line="3139"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" line="3148"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" line="3155"><f a="index:v0">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" line="3162"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" line="3169"><f a="index:v0:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" line="3176"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" line="3183"><f a="index:v0:v1:v2">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" line="3190"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" line="3197"><f a="index:v0:v1:v2:v3">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" line="3204"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
		<vertexAttribDivisor public="1" set="method" line="3211"><f a="index:divisor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribDivisor>
		<vertexAttribI4i public="1" set="method" line="3218"><f a="index:v0:v1:v2:v3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" set="method" line="3227"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribI4iv>
		<vertexAttribI4ui public="1" set="method" line="3234"><f a="index:v0:v1:v2:v3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" set="method" line="3243"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribI4uiv>
		<vertexAttribIPointer public="1" set="method" line="3250"><f a="index:size:type:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribIPointer>
		<vertexAttribPointer public="1" set="method" line="3257"><f a="index:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" line="3264"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<waitSync public="1" set="method" line="3271"><f a="sync:flags:timeout">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></waitSync>
		<__contextLost set="method" line="3278"><f a=""><x path="Void"/></f></__contextLost>
		<__createObject set="method" line="3291"><f a="id">
	<x path="Int"/>
	<c path="lime.graphics.opengl.GLObject"/>
</f></__createObject>
		<__getObjectID set="method" line="3296"><f a="object">
	<c path="lime.graphics.opengl.GLObject"/>
	<x path="Int"/>
</f></__getObjectID>
		<__initialize set="method" line="3302"><f a=""><x path="Void"/></f></__initialize>
		<new set="method" line="629"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":allow"><e>lime.ui.Window</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.graphics.opengl</e></m>
		</meta>
	</class>
	<class path="lime._internal.backend.native.NativeWindow" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx">
		<handle public="1"><d/></handle>
		<closing><x path="Bool"/></closing>
		<cursor><e path="lime.ui.MouseCursor"/></cursor>
		<displayMode><c path="lime.system.DisplayMode"/></displayMode>
		<frameRate><x path="Float"/></frameRate>
		<mouseLock><x path="Bool"/></mouseLock>
		<parent><c path="lime.ui.Window"/></parent>
		<useHardware><x path="Bool"/></useHardware>
		<cacheLock><d/></cacheLock>
		<cairo><c path="lime.graphics.cairo.Cairo"/></cairo>
		<primarySurface><x path="lime.graphics.cairo.CairoSurface"/></primarySurface>
		<alert public="1" set="method" line="182"><f a="message:title">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></alert>
		<close public="1" set="method" line="192"><f a=""><x path="Void"/></f></close>
		<contextFlip public="1" set="method" line="216"><f a=""><x path="Void"/></f></contextFlip>
		<focus public="1" set="method" line="234"><f a=""><x path="Void"/></f></focus>
		<getCursor public="1" set="method" line="244"><f a=""><e path="lime.ui.MouseCursor"/></f></getCursor>
		<getDisplay public="1" set="method" line="249"><f a=""><c path="lime.system.Display"/></f></getDisplay>
		<getDisplayMode public="1" set="method" line="266"><f a=""><c path="lime.system.DisplayMode"/></f></getDisplayMode>
		<getFrameRate public="1" set="method" line="286"><f a=""><x path="Float"/></f></getFrameRate>
		<getMouseLock public="1" set="method" line="291"><f a=""><x path="Bool"/></f></getMouseLock>
		<getTextInputEnabled public="1" set="method" line="303"><f a=""><x path="Bool"/></f></getTextInputEnabled>
		<move public="1" set="method" line="315"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></move>
		<readPixels public="1" set="method" line="325"><f a="rect">
	<c path="lime.math.Rectangle"/>
	<c path="lime.graphics.Image"/>
</f></readPixels>
		<render public="1" set="method" line="408"><f a=""><x path="Void"/></f></render>
		<resize public="1" set="method" line="443"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<setBorderless public="1" set="method" line="453"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setBorderless>
		<setCursor public="1" set="method" line="465"><f a="value">
	<e path="lime.ui.MouseCursor"/>
	<e path="lime.ui.MouseCursor"/>
</f></setCursor>
		<setDisplayMode public="1" set="method" line="504"><f a="value">
	<c path="lime.system.DisplayMode"/>
	<c path="lime.system.DisplayMode"/>
</f></setDisplayMode>
		<setMouseLock public="1" set="method" line="524"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setMouseLock>
		<setTextInputEnabled public="1" set="method" line="538"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setTextInputEnabled>
		<setTextInputRect public="1" set="method" line="550"><f a="value">
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Rectangle"/>
</f></setTextInputRect>
		<setFrameRate public="1" set="method" line="562"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></setFrameRate>
		<setFullscreen public="1" set="method" line="576"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setFullscreen>
		<setIcon public="1" set="method" line="598"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="Void"/>
</f></setIcon>
		<setMaximized public="1" set="method" line="608"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setMaximized>
		<setMinimized public="1" set="method" line="620"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setMinimized>
		<setResizable public="1" set="method" line="632"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setResizable>
		<setTitle public="1" set="method" line="649"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setTitle>
		<warpMouse public="1" set="method" line="661"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></warpMouse>
		<new public="1" set="method" line="57"><f a="parent">
	<c path="lime.ui.Window"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeOpenGLRenderContext</e></m>
			<m n=":access"><e>lime.app.Application</e></m>
			<m n=":access"><e>lime.graphics.cairo.Cairo</e></m>
			<m n=":access"><e>lime.graphics.opengl.GL</e></m>
			<m n=":access"><e>lime.graphics.OpenGLRenderContext</e></m>
			<m n=":access"><e>lime.graphics.RenderContext</e></m>
			<m n=":access"><e>lime.system.DisplayMode</e></m>
			<m n=":access"><e>lime.ui.Window</e></m>
		</meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeWindow.MouseCursorType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx" private="1" module="lime._internal.backend.native.NativeWindow">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeWindow.MouseCursorType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx" private="1" module="lime._internal.backend.native.NativeWindow" extern="1" final="1">
	<HIDDEN public="1" get="inline" set="null" expr="cast 0" line="670" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HIDDEN>
	<ARROW public="1" get="inline" set="null" expr="cast 1" line="671" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARROW>
	<CROSSHAIR public="1" get="inline" set="null" expr="cast 2" line="672" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CROSSHAIR>
	<DEFAULT public="1" get="inline" set="null" expr="cast 3" line="673" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEFAULT>
	<MOVE public="1" get="inline" set="null" expr="cast 4" line="674" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOVE>
	<POINTER public="1" get="inline" set="null" expr="cast 5" line="675" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</POINTER>
	<RESIZE_NESW public="1" get="inline" set="null" expr="cast 6" line="676" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RESIZE_NESW>
	<RESIZE_NS public="1" get="inline" set="null" expr="cast 7" line="677" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RESIZE_NS>
	<RESIZE_NWSE public="1" get="inline" set="null" expr="cast 8" line="678" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RESIZE_NWSE>
	<RESIZE_WE public="1" get="inline" set="null" expr="cast 9" line="679" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RESIZE_WE>
	<TEXT public="1" get="inline" set="null" expr="cast 10" line="680" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEXT>
	<WAIT public="1" get="inline" set="null" expr="cast 11" line="681" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT>
	<WAIT_ARROW public="1" get="inline" set="null" expr="cast 12" line="682" static="1">
		<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_ARROW>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeWindow.MouseCursorType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx" private="1" module="lime._internal.backend.native.NativeWindow" extern="1" final="1">
		<HIDDEN public="1" get="inline" set="null" expr="cast 0" line="670" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HIDDEN>
		<ARROW public="1" get="inline" set="null" expr="cast 1" line="671" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARROW>
		<CROSSHAIR public="1" get="inline" set="null" expr="cast 2" line="672" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CROSSHAIR>
		<DEFAULT public="1" get="inline" set="null" expr="cast 3" line="673" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEFAULT>
		<MOVE public="1" get="inline" set="null" expr="cast 4" line="674" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOVE>
		<POINTER public="1" get="inline" set="null" expr="cast 5" line="675" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</POINTER>
		<RESIZE_NESW public="1" get="inline" set="null" expr="cast 6" line="676" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RESIZE_NESW>
		<RESIZE_NS public="1" get="inline" set="null" expr="cast 7" line="677" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RESIZE_NS>
		<RESIZE_NWSE public="1" get="inline" set="null" expr="cast 8" line="678" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RESIZE_NWSE>
		<RESIZE_WE public="1" get="inline" set="null" expr="cast 9" line="679" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RESIZE_WE>
		<TEXT public="1" get="inline" set="null" expr="cast 10" line="680" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEXT>
		<WAIT public="1" get="inline" set="null" expr="cast 11" line="681" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT>
		<WAIT_ARROW public="1" get="inline" set="null" expr="cast 12" line="682" static="1">
			<x path="lime._internal.backend.native._NativeWindow.MouseCursorType"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_ARROW>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime._internal.backend.native._NativeWindow.WindowFlags" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx" private="1" module="lime._internal.backend.native.NativeWindow">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime._internal.backend.native._NativeWindow.WindowFlags_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx" private="1" module="lime._internal.backend.native.NativeWindow" extern="1" final="1">
	<WINDOW_FLAG_FULLSCREEN public="1" get="inline" set="null" expr="cast 0x00000001" line="687" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000001</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_FULLSCREEN>
	<WINDOW_FLAG_BORDERLESS public="1" get="inline" set="null" expr="cast 0x00000002" line="688" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000002</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_BORDERLESS>
	<WINDOW_FLAG_RESIZABLE public="1" get="inline" set="null" expr="cast 0x00000004" line="689" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000004</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_RESIZABLE>
	<WINDOW_FLAG_HARDWARE public="1" get="inline" set="null" expr="cast 0x00000008" line="690" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000008</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_HARDWARE>
	<WINDOW_FLAG_VSYNC public="1" get="inline" set="null" expr="cast 0x00000010" line="691" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000010</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_VSYNC>
	<WINDOW_FLAG_HW_AA public="1" get="inline" set="null" expr="cast 0x00000020" line="692" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000020</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_HW_AA>
	<WINDOW_FLAG_HW_AA_HIRES public="1" get="inline" set="null" expr="cast 0x00000060" line="693" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000060</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_HW_AA_HIRES>
	<WINDOW_FLAG_ALLOW_SHADERS public="1" get="inline" set="null" expr="cast 0x00000080" line="694" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_ALLOW_SHADERS>
	<WINDOW_FLAG_REQUIRE_SHADERS public="1" get="inline" set="null" expr="cast 0x00000100" line="695" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_REQUIRE_SHADERS>
	<WINDOW_FLAG_DEPTH_BUFFER public="1" get="inline" set="null" expr="cast 0x00000200" line="696" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_DEPTH_BUFFER>
	<WINDOW_FLAG_STENCIL_BUFFER public="1" get="inline" set="null" expr="cast 0x00000400" line="697" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_STENCIL_BUFFER>
	<WINDOW_FLAG_ALLOW_HIGHDPI public="1" get="inline" set="null" expr="cast 0x00000800" line="698" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00000800</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_ALLOW_HIGHDPI>
	<WINDOW_FLAG_HIDDEN public="1" get="inline" set="null" expr="cast 0x00001000" line="699" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00001000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_HIDDEN>
	<WINDOW_FLAG_MINIMIZED public="1" get="inline" set="null" expr="cast 0x00002000" line="700" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00002000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_MINIMIZED>
	<WINDOW_FLAG_MAXIMIZED public="1" get="inline" set="null" expr="cast 0x00004000" line="701" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00004000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_MAXIMIZED>
	<WINDOW_FLAG_ALWAYS_ON_TOP public="1" get="inline" set="null" expr="cast 0x00008000" line="702" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00008000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_ALWAYS_ON_TOP>
	<WINDOW_FLAG_COLOR_DEPTH_32_BIT public="1" get="inline" set="null" expr="cast 0x00010000" line="703" static="1">
		<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
		<meta>
			<m n=":value"><e>cast 0x00010000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDOW_FLAG_COLOR_DEPTH_32_BIT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.backend.native._NativeWindow.WindowFlags_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/backend/native/NativeWindow.hx" private="1" module="lime._internal.backend.native.NativeWindow" extern="1" final="1">
		<WINDOW_FLAG_FULLSCREEN public="1" get="inline" set="null" expr="cast 0x00000001" line="687" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000001</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_FULLSCREEN>
		<WINDOW_FLAG_BORDERLESS public="1" get="inline" set="null" expr="cast 0x00000002" line="688" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000002</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_BORDERLESS>
		<WINDOW_FLAG_RESIZABLE public="1" get="inline" set="null" expr="cast 0x00000004" line="689" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000004</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_RESIZABLE>
		<WINDOW_FLAG_HARDWARE public="1" get="inline" set="null" expr="cast 0x00000008" line="690" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000008</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_HARDWARE>
		<WINDOW_FLAG_VSYNC public="1" get="inline" set="null" expr="cast 0x00000010" line="691" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000010</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_VSYNC>
		<WINDOW_FLAG_HW_AA public="1" get="inline" set="null" expr="cast 0x00000020" line="692" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000020</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_HW_AA>
		<WINDOW_FLAG_HW_AA_HIRES public="1" get="inline" set="null" expr="cast 0x00000060" line="693" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000060</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_HW_AA_HIRES>
		<WINDOW_FLAG_ALLOW_SHADERS public="1" get="inline" set="null" expr="cast 0x00000080" line="694" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_ALLOW_SHADERS>
		<WINDOW_FLAG_REQUIRE_SHADERS public="1" get="inline" set="null" expr="cast 0x00000100" line="695" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_REQUIRE_SHADERS>
		<WINDOW_FLAG_DEPTH_BUFFER public="1" get="inline" set="null" expr="cast 0x00000200" line="696" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_DEPTH_BUFFER>
		<WINDOW_FLAG_STENCIL_BUFFER public="1" get="inline" set="null" expr="cast 0x00000400" line="697" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_STENCIL_BUFFER>
		<WINDOW_FLAG_ALLOW_HIGHDPI public="1" get="inline" set="null" expr="cast 0x00000800" line="698" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00000800</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_ALLOW_HIGHDPI>
		<WINDOW_FLAG_HIDDEN public="1" get="inline" set="null" expr="cast 0x00001000" line="699" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00001000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_HIDDEN>
		<WINDOW_FLAG_MINIMIZED public="1" get="inline" set="null" expr="cast 0x00002000" line="700" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00002000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_MINIMIZED>
		<WINDOW_FLAG_MAXIMIZED public="1" get="inline" set="null" expr="cast 0x00004000" line="701" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00004000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_MAXIMIZED>
		<WINDOW_FLAG_ALWAYS_ON_TOP public="1" get="inline" set="null" expr="cast 0x00008000" line="702" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00008000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_ALWAYS_ON_TOP>
		<WINDOW_FLAG_COLOR_DEPTH_32_BIT public="1" get="inline" set="null" expr="cast 0x00010000" line="703" static="1">
			<x path="lime._internal.backend.native._NativeWindow.WindowFlags"/>
			<meta>
				<m n=":value"><e>cast 0x00010000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDOW_FLAG_COLOR_DEPTH_32_BIT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.format.BMP" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/BMP.hx">
		<encode public="1" set="method" line="14" static="1">
			<f a="image:?type" v=":null">
				<c path="lime.graphics.Image"/>
				<e path="lime._internal.format.BMPType"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</encode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime._internal.format.BMPType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/BMP.hx" module="lime._internal.format.BMP">
		<RGB/>
		<BITFIELD/>
		<ICO/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="lime._internal.format.Base64" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/Base64.hx">
		<DICTIONARY expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;.split(&quot;&quot;)" line="8" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("")</e></m></meta>
		</DICTIONARY>
		<EXTENDED_DICTIONARY expr="{
	var result = new Array&lt;String&gt;();
	for (a  in  DICTIONARY) {
		for (b  in  DICTIONARY) {
			result.push(a + b);
		};
	};
	result;
}" line="10" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var result = new Array<String>();
	for (a  in  DICTIONARY) {
		for (b  in  DICTIONARY) {
			result.push(a + b);
		};
	};
	result;
}]]></e></m></meta>
		</EXTENDED_DICTIONARY>
		<decode public="1" set="method" line="23" static="1"><f a="source">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></decode>
		<encode public="1" set="method" line="28" static="1"><f a="source">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
</f></encode>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime._internal.format.Deflate" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/Deflate.hx">
		<compress public="1" set="method" line="17" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></compress>
		<decompress public="1" set="method" line="47" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decompress>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime._internal.format.GZip" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/GZip.hx">
		<compress public="1" set="method" line="14" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></compress>
		<decompress public="1" set="method" line="36" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decompress>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime._internal.format.JPEG" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/JPEG.hx">
		<decodeBytes public="1" set="method" line="30" static="1">
			<f a="bytes:?decodeData" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ decodeData : true }</e></m></meta>
		</decodeBytes>
		<decodeFile public="1" set="method" line="55" static="1">
			<f a="path:?decodeData" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ decodeData : true }</e></m></meta>
		</decodeFile>
		<encode public="1" set="method" line="80" static="1"><f a="image:quality">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></encode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.graphics.ImageBuffer</e></m>
		</meta>
	</class>
	<class path="lime._internal.format.LZMA" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/LZMA.hx">
		<compress public="1" set="method" line="18" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></compress>
		<decompress public="1" set="method" line="41" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decompress>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime._internal.format.PNG" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/PNG.hx">
		<decodeBytes public="1" set="method" line="30" static="1">
			<f a="bytes:?decodeData" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ decodeData : true }</e></m></meta>
		</decodeBytes>
		<decodeFile public="1" set="method" line="55" static="1">
			<f a="path:?decodeData" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ decodeData : true }</e></m></meta>
		</decodeFile>
		<encode public="1" set="method" line="80" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<c path="haxe.io.Bytes"/>
</f></encode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.graphics.ImageBuffer</e></m>
		</meta>
	</class>
	<class path="lime._internal.format.Zlib" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/format/Zlib.hx">
		<compress public="1" set="method" line="17" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></compress>
		<decompress public="1" set="method" line="47" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decompress>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime._internal.graphics.ImageCanvasUtil" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/ImageCanvasUtil.hx">
		<colorTransform public="1" set="method" line="23" static="1"><f a="image:rect:colorMatrix">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="lime.math.ColorMatrix"/>
	<x path="Void"/>
</f></colorTransform>
		<convertToCanvas public="1" set="method" line="30" static="1">
			<f a="image:?clear" v=":false">
				<c path="lime.graphics.Image"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ clear : false }</e></m></meta>
		</convertToCanvas>
		<convertToData public="1" set="method" line="79" static="1">
			<f a="image:?clear" v=":false">
				<c path="lime.graphics.Image"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ clear : false }</e></m></meta>
		</convertToData>
		<copyChannel public="1" set="method" line="120" static="1"><f a="image:sourceImage:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<e path="lime.graphics.ImageChannel"/>
	<e path="lime.graphics.ImageChannel"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method" line="129" static="1">
			<f a="image:sourceImage:sourceRect:destPoint:?alphaImage:?alphaPoint:?mergeAlpha" v="::::null:null:false">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Vector2"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false, alphaPoint : null, alphaImage : null }</e></m></meta>
		</copyPixels>
		<createCanvas public="1" set="method" line="180" static="1"><f a="image:width:height">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></createCanvas>
		<createImageData public="1" set="method" line="204" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="Void"/>
</f></createImageData>
		<fillRect public="1" set="method" line="226" static="1"><f a="image:rect:color:format">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method" line="271" static="1"><f a="image:x:y:color:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></floodFill>
		<getPixel public="1" set="method" line="278" static="1"><f a="image:x:y:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Int"/>
</f></getPixel>
		<getPixel32 public="1" set="method" line="285" static="1"><f a="image:x:y:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Int"/>
</f></getPixel32>
		<getPixels public="1" set="method" line="292" static="1"><f a="image:rect:format">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="lime.graphics.PixelFormat"/>
	<c path="haxe.io.Bytes"/>
</f></getPixels>
		<merge public="1" set="method" line="300" static="1"><f a="image:sourceImage:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></merge>
		<resize public="1" set="method" line="308" static="1"><f a="image:newWidth:newHeight">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<scroll public="1" set="method" line="333" static="1"><f a="image:x:y">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method" line="348" static="1"><f a="image:x:y:color:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method" line="355" static="1"><f a="image:x:y:color:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method" line="362" static="1"><f a="image:rect:bytePointer:format:endian">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="lime.utils.BytePointer"/>
	<x path="lime.graphics.PixelFormat"/>
	<e path="lime.system.Endian"/>
	<x path="Void"/>
</f></setPixels>
		<sync public="1" set="method" line="369" static="1"><f a="image:clear">
	<c path="lime.graphics.Image"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sync>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime.graphics.ImageBuffer</e></m>
		</meta>
	</class>
	<class path="lime._internal.graphics.ImageDataUtil" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/ImageDataUtil.hx">
		<displaceMap public="1" set="method" line="33" static="1"><f a="target:source:map:mapPoint:componentX:componentY:smooth">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Vector2"/>
	<c path="lime.math.Vector4"/>
	<c path="lime.math.Vector4"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></displaceMap>
		<bilinear set="method" line="138" static="1"><f a="s1:s2:s3:s4:su:sv">
	<x path="lime.math.RGBA"/>
	<x path="lime.math.RGBA"/>
	<x path="lime.math.RGBA"/>
	<x path="lime.math.RGBA"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.math.RGBA"/>
</f></bilinear>
		<lerpRGBA set="method" line="143" static="1"><f a="v0:v1:x">
	<x path="lime.math.RGBA"/>
	<x path="lime.math.RGBA"/>
	<x path="Float"/>
	<x path="lime.math.RGBA"/>
</f></lerpRGBA>
		<lerp4f set="method" line="154" static="1"><f a="v0:v1:x">
	<c path="lime.math.Vector4"/>
	<c path="lime.math.Vector4"/>
	<x path="Float"/>
	<c path="lime.math.Vector4"/>
</f></lerp4f>
		<lerp set="method" line="159" static="1"><f a="v0:v1:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></lerp>
		<colorTransform public="1" set="method" line="164" static="1"><f a="image:rect:colorMatrix">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="lime.math.ColorMatrix"/>
	<x path="Void"/>
</f></colorTransform>
		<copyChannel public="1" set="method" line="206" static="1"><f a="image:sourceImage:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<e path="lime.graphics.ImageChannel"/>
	<e path="lime.graphics.ImageChannel"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method" line="295" static="1">
			<f a="image:sourceImage:sourceRect:destPoint:?alphaImage:?alphaPoint:?mergeAlpha" v="::::null:null:false">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Vector2"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false, alphaPoint : null, alphaImage : null }</e></m></meta>
		</copyPixels>
		<fillRect public="1" set="method" line="508" static="1"><f a="image:rect:color:format">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method" line="558" static="1"><f a="image:x:y:color:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></floodFill>
		<gaussianBlur public="1" set="method" line="642" static="1">
			<f a="image:sourceImage:sourceRect:destPoint:?blurX:?blurY:?quality:?strength:?color" v="::::4:4:1:1:null">
				<c path="lime.graphics.Image"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ color : null, strength : 1, quality : 1, blurY : 4, blurX : 4 }</e></m></meta>
		</gaussianBlur>
		<getColorBoundsRect public="1" set="method" line="668" static="1"><f a="image:mask:color:findColor:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.graphics.PixelFormat"/>
	<c path="lime.math.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method" line="812" static="1"><f a="image:x:y:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Int"/>
</f></getPixel>
		<getPixel32 public="1" set="method" line="831" static="1"><f a="image:x:y:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Int"/>
</f></getPixel32>
		<getPixels public="1" set="method" line="849" static="1"><f a="image:rect:format">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="lime.graphics.PixelFormat"/>
	<c path="haxe.io.Bytes"/>
</f></getPixels>
		<merge public="1" set="method" line="905" static="1"><f a="image:sourceImage:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></merge>
		<multiplyAlpha public="1" set="method" line="956" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="Void"/>
</f></multiplyAlpha>
		<resize public="1" set="method" line="982" static="1"><f a="image:newWidth:newHeight">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<resizeBuffer public="1" set="method" line="1071" static="1"><f a="image:newWidth:newHeight">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resizeBuffer>
		<setFormat public="1" set="method" line="1107" static="1"><f a="image:format">
	<c path="lime.graphics.Image"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></setFormat>
		<setPixel public="1" set="method" line="1185" static="1"><f a="image:x:y:color:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method" line="1213" static="1"><f a="image:x:y:color:format">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method" line="1235" static="1"><f a="image:rect:bytePointer:format:endian">
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<x path="lime.utils.BytePointer"/>
	<x path="lime.graphics.PixelFormat"/>
	<e path="lime.system.Endian"/>
	<x path="Void"/>
</f></setPixels>
		<threshold public="1" set="method" line="1293" static="1"><f a="image:sourceImage:sourceRect:destPoint:operation:threshold:color:mask:copySource:format">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.graphics.PixelFormat"/>
	<x path="Int"/>
</f></threshold>
		<unmultiplyAlpha public="1" set="method" line="1406" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="Void"/>
</f></unmultiplyAlpha>
		<__boxBlur set="method" line="1432" static="1"><f a="imgA:imgB:w:h:bx:by">
	<x path="lime.utils.UInt8Array"/>
	<x path="lime.utils.UInt8Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></__boxBlur>
		<__boxBlurH get="inline" set="null" line="1452" static="1"><f a="imgA:imgB:w:h:r:off">
	<x path="lime.utils.UInt8Array"/>
	<x path="lime.utils.UInt8Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__boxBlurH>
		<__boxBlurT get="inline" set="null" line="1499" static="1"><f a="imgA:imgB:w:h:r:off">
	<x path="lime.utils.UInt8Array"/>
	<x path="lime.utils.UInt8Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__boxBlurT>
		<__calculateSourceOffset get="inline" set="null" line="1551" static="1">
			<f a="sourceRect:destPoint:destX:destY">
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns: the offset for translated coordinate in the source image or -1 if the source the coordinate out of the source or destination bounds
	 * Note: destX and destY should be valid coordinates</haxe_doc>
		</__calculateSourceOffset>
		<__getBoxesForGaussianBlur set="method" line="1570" static="1"><f a="sigma:n">
	<x path="Float"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></__getBoxesForGaussianBlur>
		<__pixelCompare get="inline" set="null" line="1589" static="1"><f a="n1:n2">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Int"/>
</f></__pixelCompare>
		<__translatePixel get="inline" set="null" line="1638" static="1"><f a="imgB:sourceRect:destRect:destPoint:destX:destY:strength">
	<x path="lime.utils.UInt8Array"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></__translatePixel>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.graphics.ImageBuffer</e></m>
			<m n=":access"><e>lime.math.RGBA</e></m>
		</meta>
	</class>
	<class path="lime._internal.graphics._ImageDataUtil.ImageDataView" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/ImageDataUtil.hx" private="1" module="lime._internal.graphics.ImageDataUtil">
		<x public="1" set="null"><x path="Int"/></x>
		<y public="1" set="null"><x path="Int"/></y>
		<height public="1" set="null"><x path="Int"/></height>
		<width public="1" set="null"><x path="Int"/></width>
		<byteOffset><x path="Int"/></byteOffset>
		<image><c path="lime.graphics.Image"/></image>
		<rect><c path="lime.math.Rectangle"/></rect>
		<stride><x path="Int"/></stride>
		<tempRect><c path="lime.math.Rectangle"/></tempRect>
		<clip public="1" set="method" line="1696"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clip>
		<hasRow public="1" get="inline" set="null" line="1705"><f a="y">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasRow>
		<offset public="1" set="method" line="1710"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></offset>
		<row public="1" get="inline" set="null" line="1737"><f a="y">
	<x path="Int"/>
	<x path="Int"/>
</f></row>
		<__update set="method" line="1742"><f a=""><x path="Void"/></f></__update>
		<new public="1" set="method" line="1672">
			<f a="image:?rect" v=":null">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ rect : null }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="lime._internal.graphics._ImageDataUtil.ThresholdOperation" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/ImageDataUtil.hx" private="1" module="lime._internal.graphics.ImageDataUtil">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime._internal.graphics._ImageDataUtil.ThresholdOperation_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/ImageDataUtil.hx" private="1" module="lime._internal.graphics.ImageDataUtil" extern="1" final="1">
	<NOT_EQUALS public="1" get="inline" set="null" expr="cast 0" line="1753" static="1">
		<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NOT_EQUALS>
	<EQUALS public="1" get="inline" set="null" expr="cast 1" line="1754" static="1">
		<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EQUALS>
	<LESS_THAN public="1" get="inline" set="null" expr="cast 2" line="1755" static="1">
		<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LESS_THAN>
	<LESS_THAN_OR_EQUAL_TO public="1" get="inline" set="null" expr="cast 3" line="1756" static="1">
		<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LESS_THAN_OR_EQUAL_TO>
	<GREATER_THAN public="1" get="inline" set="null" expr="cast 4" line="1757" static="1">
		<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GREATER_THAN>
	<GREATER_THAN_OR_EQUAL_TO public="1" get="inline" set="null" expr="cast 5" line="1758" static="1">
		<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GREATER_THAN_OR_EQUAL_TO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime._internal.graphics._ImageDataUtil.ThresholdOperation_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/ImageDataUtil.hx" private="1" module="lime._internal.graphics.ImageDataUtil" extern="1" final="1">
		<NOT_EQUALS public="1" get="inline" set="null" expr="cast 0" line="1753" static="1">
			<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NOT_EQUALS>
		<EQUALS public="1" get="inline" set="null" expr="cast 1" line="1754" static="1">
			<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EQUALS>
		<LESS_THAN public="1" get="inline" set="null" expr="cast 2" line="1755" static="1">
			<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LESS_THAN>
		<LESS_THAN_OR_EQUAL_TO public="1" get="inline" set="null" expr="cast 3" line="1756" static="1">
			<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LESS_THAN_OR_EQUAL_TO>
		<GREATER_THAN public="1" get="inline" set="null" expr="cast 4" line="1757" static="1">
			<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GREATER_THAN>
		<GREATER_THAN_OR_EQUAL_TO public="1" get="inline" set="null" expr="cast 5" line="1758" static="1">
			<x path="lime._internal.graphics._ImageDataUtil.ThresholdOperation"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GREATER_THAN_OR_EQUAL_TO>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime._internal.graphics.StackBlur" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/StackBlur.hx">
		<MUL_TABLE expr="[1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1]" line="10" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1]</e></m></meta>
		</MUL_TABLE>
		<SHG_TABLE expr="[0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9]" line="21" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9]</e></m></meta>
		</SHG_TABLE>
		<blur public="1" set="method" line="32" static="1"><f a="dest:source:sourceRect:destPoint:blurX:blurY:quality">
	<c path="lime.graphics.Image"/>
	<c path="lime.graphics.Image"/>
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Vector2"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blur>
		<__stackBlurCanvasRGBA set="method" line="38" static="1"><f a="image:width:height:blurX:blurY:quality">
	<c path="lime.graphics.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__stackBlurCanvasRGBA>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime._internal.graphics.BlurStack" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/graphics/StackBlur.hx" module="lime._internal.graphics.StackBlur">
		<r public="1"><x path="Int"/></r>
		<g public="1"><x path="Int"/></g>
		<b public="1"><x path="Int"/></b>
		<a public="1"><x path="Int"/></a>
		<n public="1"><c path="lime._internal.graphics.BlurStack"/></n>
		<new public="1" set="method" line="248"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime._internal.macros.AssetsMacro" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/_internal/macros/AssetsMacro.hx"><cacheVersion public="1" set="method" static="1"><f a=""><d/></f></cacheVersion></class>
	<class path="lime.app.IModule" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/IModule.hx" interface="1">
		<__registerLimeModule set="method">
			<f a="application">
				<c path="lime.app.Application"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>show</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__registerLimeModule>
		<__unregisterLimeModule set="method">
			<f a="application">
				<c path="lime.app.Application"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>show</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__unregisterLimeModule>
	</class>
	<class path="lime.app.Module" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Module.hx">
		<implements path="lime.app.IModule"/>
		<onExit public="1" expr="new Event&lt;Int&gt;()">
			<c path="lime.app._Event_Int_Void"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int>()]]></e></m></meta>
			<haxe_doc>Exit events are dispatched when the application is exiting</haxe_doc>
		</onExit>
		<__registerLimeModule set="method" line="27">
			<f a="application">
				<c path="lime.app.Application"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__registerLimeModule>
		<__unregisterLimeModule set="method" line="29">
			<f a="application">
				<c path="lime.app.Application"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__unregisterLimeModule>
		<new public="1" set="method" line="25">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new `Module` instance</haxe_doc>
		</new>
		<haxe_doc>`Module` instances can be added to a running `Application`,
	simplifying support for adding new components, such as a renderer,
	input handler or higher-level framework.</haxe_doc>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app.Application" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Application.hx">
		<extends path="lime.app.Module"/>
		<current public="1" set="null" static="1">
			<c path="lime.app.Application"/>
			<haxe_doc>The current Application instance that is executing</haxe_doc>
		</current>
		<meta public="1">
			<t path="Map">
				<c path="String"/>
				<c path="String"/>
			</t>
			<haxe_doc>Meta-data values for the application, such as a version or a package name</haxe_doc>
		</meta>
		<modules public="1" set="null">
			<c path="Array"><c path="lime.app.IModule"/></c>
			<haxe_doc>A list of currently attached Module instances</haxe_doc>
		</modules>
		<onUpdate public="1" expr="new Event&lt;Int&gt;()">
			<c path="lime.app._Event_Int_Void"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int>()]]></e></m></meta>
			<haxe_doc>Update events are dispatched each frame (usually just before rendering)</haxe_doc>
		</onUpdate>
		<onCreateWindow public="1" expr="new Event&lt;Window&gt;()">
			<c path="lime.app._Event_lime_ui_Window_Void"><f a="">
	<c path="lime.ui.Window"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Window>()]]></e></m></meta>
			<haxe_doc>Dispatched when a new window has been created by this application</haxe_doc>
		</onCreateWindow>
		<preloader public="1" get="accessor" set="null">
			<c path="lime.utils.Preloader"/>
			<haxe_doc>The Preloader for the current Application</haxe_doc>
		</preloader>
		<window public="1" get="accessor" set="null">
			<c path="lime.ui.Window"/>
			<haxe_doc>The Window associated with this Application, or the first Window
		if there are multiple Windows active</haxe_doc>
		</window>
		<windows public="1" get="accessor" set="null">
			<c path="Array"><c path="lime.ui.Window"/></c>
			<haxe_doc>A list of active Window instances associated with this Application</haxe_doc>
		</windows>
		<__backend>
			<t path="lime.app._Application.ApplicationBackend"/>
			<meta><m n=":noCompletion"/></meta>
		</__backend>
		<__preloader>
			<c path="lime.utils.Preloader"/>
			<meta><m n=":noCompletion"/></meta>
		</__preloader>
		<__window>
			<c path="lime.ui.Window"/>
			<meta><m n=":noCompletion"/></meta>
		</__window>
		<__windowByID>
			<t path="Map">
				<x path="Int"/>
				<c path="lime.ui.Window"/>
			</t>
			<meta><m n=":noCompletion"/></meta>
		</__windowByID>
		<__windows>
			<c path="Array"><c path="lime.ui.Window"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__windows>
		<addModule public="1" set="method" line="124">
			<f a="module">
				<c path="lime.app.IModule"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new module to the Application
		@param	module	A module to add</haxe_doc>
		</addModule>
		<createWindow public="1" set="method" line="134">
			<f a="attributes">
				<t path="lime.ui.WindowAttributes"/>
				<c path="lime.ui.Window"/>
			</f>
			<haxe_doc>Creates a new Window and adds it to the Application
		@param	attributes	A set of parameters to initialize the window</haxe_doc>
		</createWindow>
		<exec public="1" set="method" line="147">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Execute the Application. On native platforms, this method
		blocks until the application is finished running. On other
		platforms, it will return immediately
		@return	An exit code, 0 if there was no error</haxe_doc>
		</exec>
		<onGamepadAxisMove public="1" set="method" line="159">
			<f a="gamepad:axis:value">
				<c path="lime.ui.Gamepad"/>
				<x path="lime.ui.GamepadAxis"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a gamepad axis move event is fired
		@param	gamepad	The current gamepad
		@param	axis	The axis that was moved
		@param	value	The axis value (between 0 and 1)</haxe_doc>
		</onGamepadAxisMove>
		<onGamepadButtonDown public="1" set="method" line="166">
			<f a="gamepad:button">
				<c path="lime.ui.Gamepad"/>
				<x path="lime.ui.GamepadButton"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a gamepad button down event is fired
		@param	gamepad	The current gamepad
		@param	button	The button that was pressed</haxe_doc>
		</onGamepadButtonDown>
		<onGamepadButtonUp public="1" set="method" line="173">
			<f a="gamepad:button">
				<c path="lime.ui.Gamepad"/>
				<x path="lime.ui.GamepadButton"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a gamepad button up event is fired
		@param	gamepad	The current gamepad
		@param	button	The button that was released</haxe_doc>
		</onGamepadButtonUp>
		<onGamepadConnect public="1" set="method" line="179">
			<f a="gamepad">
				<c path="lime.ui.Gamepad"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a gamepad is connected
		@param	gamepad	The gamepad that was connected</haxe_doc>
		</onGamepadConnect>
		<onGamepadDisconnect public="1" set="method" line="185">
			<f a="gamepad">
				<c path="lime.ui.Gamepad"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a gamepad is disconnected
		@param	gamepad	The gamepad that was disconnected</haxe_doc>
		</onGamepadDisconnect>
		<onJoystickAxisMove public="1" set="method" line="193">
			<f a="joystick:axis:value">
				<c path="lime.ui.Joystick"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick axis move event is fired
		@param	joystick	The current joystick
		@param	axis	The axis that was moved
		@param	value	The axis value (between 0 and 1)</haxe_doc>
		</onJoystickAxisMove>
		<onJoystickButtonDown public="1" set="method" line="200">
			<f a="joystick:button">
				<c path="lime.ui.Joystick"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick button down event is fired
		@param	joystick	The current joystick
		@param	button	The button that was pressed</haxe_doc>
		</onJoystickButtonDown>
		<onJoystickButtonUp public="1" set="method" line="207">
			<f a="joystick:button">
				<c path="lime.ui.Joystick"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick button up event is fired
		@param	joystick	The current joystick
		@param	button	The button that was released</haxe_doc>
		</onJoystickButtonUp>
		<onJoystickConnect public="1" set="method" line="213">
			<f a="joystick">
				<c path="lime.ui.Joystick"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick is connected
		@param	joystick	The joystick that was connected</haxe_doc>
		</onJoystickConnect>
		<onJoystickDisconnect public="1" set="method" line="219">
			<f a="joystick">
				<c path="lime.ui.Joystick"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick is disconnected
		@param	joystick	The joystick that was disconnected</haxe_doc>
		</onJoystickDisconnect>
		<onJoystickHatMove public="1" set="method" line="227">
			<f a="joystick:hat:position">
				<c path="lime.ui.Joystick"/>
				<x path="Int"/>
				<x path="lime.ui.JoystickHatPosition"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick hat move event is fired
		@param	joystick	The current joystick
		@param	hat	The hat that was moved
		@param	position	The current hat position</haxe_doc>
		</onJoystickHatMove>
		<onJoystickTrackballMove public="1" set="method" line="236">
			<f a="joystick:trackball:x:y">
				<c path="lime.ui.Joystick"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a joystick axis move event is fired
		@param	joystick	The current joystick
		@param	trackball	The trackball that was moved
		@param	x	The x movement of the trackball (between 0 and 1)
		@param	y	The y movement of the trackball (between 0 and 1)</haxe_doc>
		</onJoystickTrackballMove>
		<onKeyDown public="1" set="method" line="243">
			<f a="keyCode:modifier">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.KeyModifier"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a key down event is fired on the primary window
		@param	keyCode	The code of the key that was pressed
		@param	modifier	The modifier of the key that was pressed</haxe_doc>
		</onKeyDown>
		<onKeyUp public="1" set="method" line="250">
			<f a="keyCode:modifier">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.KeyModifier"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a key up event is fired on the primary window
		@param	keyCode	The code of the key that was released
		@param	modifier	The modifier of the key that was released</haxe_doc>
		</onKeyUp>
		<onModuleExit public="1" set="method" line="255">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when the module is exiting</haxe_doc>
		</onModuleExit>
		<onMouseDown public="1" set="method" line="263">
			<f a="x:y:button">
				<x path="Float"/>
				<x path="Float"/>
				<x path="lime.ui.MouseButton"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a mouse down event is fired on the primary window
		@param	x	The current x coordinate of the mouse
		@param	y	The current y coordinate of the mouse
		@param	button	The ID of the mouse button that was pressed</haxe_doc>
		</onMouseDown>
		<onMouseMove public="1" set="method" line="270">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a mouse move event is fired on the primary window
		@param	x	The current x coordinate of the mouse
		@param	y	The current y coordinate of the mouse</haxe_doc>
		</onMouseMove>
		<onMouseMoveRelative public="1" set="method" line="277">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a mouse move relative event is fired on the primary window
		@param	x	The x movement of the mouse
		@param	y	The y movement of the mouse</haxe_doc>
		</onMouseMoveRelative>
		<onMouseUp public="1" set="method" line="285">
			<f a="x:y:button">
				<x path="Float"/>
				<x path="Float"/>
				<x path="lime.ui.MouseButton"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a mouse up event is fired on the primary window
		@param	x	The current x coordinate of the mouse
		@param	y	The current y coordinate of the mouse
		@param	button	The ID of the button that was released</haxe_doc>
		</onMouseUp>
		<onMouseWheel public="1" set="method" line="293">
			<f a="deltaX:deltaY:deltaMode">
				<x path="Float"/>
				<x path="Float"/>
				<e path="lime.ui.MouseWheelMode"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a mouse wheel event is fired on the primary window
		@param	deltaX	The amount of horizontal scrolling (if applicable)
		@param	deltaY	The amount of vertical scrolling (if applicable)
		@param	deltaMode	The units of measurement used</haxe_doc>
		</onMouseWheel>
		<onPreloadComplete public="1" set="method" line="298">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a preload complete event is fired</haxe_doc>
		</onPreloadComplete>
		<onPreloadProgress public="1" set="method" line="305">
			<f a="loaded:total">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a preload progress event is fired
		@param	loaded	The number of items that are loaded
		@param	total	The total number of items will be loaded</haxe_doc>
		</onPreloadProgress>
		<onRenderContextLost public="1" set="method" line="310">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a render context is lost on the primary window</haxe_doc>
		</onRenderContextLost>
		<onRenderContextRestored public="1" set="method" line="316">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a render context is restored on the primary window
		@param	context	The render context relevant to the event</haxe_doc>
		</onRenderContextRestored>
		<onTextEdit public="1" set="method" line="324">
			<f a="text:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a text edit event is fired on the primary window
		@param	text	The current replacement text
		@param	start	The starting index for the edit
		@param	length	The length of the edit</haxe_doc>
		</onTextEdit>
		<onTextInput public="1" set="method" line="330">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a text input event is fired on the primary window
		@param	text	The current input text</haxe_doc>
		</onTextInput>
		<onTouchCancel public="1" set="method" line="336">
			<f a="touch">
				<c path="lime.ui.Touch"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a touch cancel event is fired
		@param	touch	The current touch object</haxe_doc>
		</onTouchCancel>
		<onTouchEnd public="1" set="method" line="342">
			<f a="touch">
				<c path="lime.ui.Touch"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a touch end event is fired
		@param	touch	The current touch object</haxe_doc>
		</onTouchEnd>
		<onTouchMove public="1" set="method" line="348">
			<f a="touch">
				<c path="lime.ui.Touch"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a touch move event is fired
		@param	touch	The current touch object</haxe_doc>
		</onTouchMove>
		<onTouchStart public="1" set="method" line="354">
			<f a="touch">
				<c path="lime.ui.Touch"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a touch start event is fired
		@param	touch	The current touch object</haxe_doc>
		</onTouchStart>
		<onWindowActivate public="1" set="method" line="359">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window activate event is fired on the primary window</haxe_doc>
		</onWindowActivate>
		<onWindowClose public="1" set="method" line="364">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window close event is fired on the primary window</haxe_doc>
		</onWindowClose>
		<onWindowCreate public="1" set="method" line="369">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the primary window is created</haxe_doc>
		</onWindowCreate>
		<onWindowDeactivate public="1" set="method" line="374">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window deactivate event is fired on the primary window</haxe_doc>
		</onWindowDeactivate>
		<onWindowDropFile public="1" set="method" line="379">
			<f a="file">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a window drop file event is fired on the primary window</haxe_doc>
		</onWindowDropFile>
		<onWindowEnter public="1" set="method" line="384">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window enter event is fired on the primary window</haxe_doc>
		</onWindowEnter>
		<onWindowExpose public="1" set="method" line="389">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window expose event is fired on the primary window</haxe_doc>
		</onWindowExpose>
		<onWindowFocusIn public="1" set="method" line="394">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window focus in event is fired on the primary window</haxe_doc>
		</onWindowFocusIn>
		<onWindowFocusOut public="1" set="method" line="399">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window focus out event is fired on the primary window</haxe_doc>
		</onWindowFocusOut>
		<onWindowFullscreen public="1" set="method" line="404">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the primary window enters fullscreen</haxe_doc>
		</onWindowFullscreen>
		<onWindowLeave public="1" set="method" line="409">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when a window leave event is fired on the primary window</haxe_doc>
		</onWindowLeave>
		<onWindowMove public="1" set="method" line="416">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a window move event is fired on the primary window
		@param	x	The x position of the window in desktop coordinates
		@param	y	The y position of the window in desktop coordinates</haxe_doc>
		</onWindowMove>
		<onWindowMinimize public="1" set="method" line="421">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the primary window is minimized</haxe_doc>
		</onWindowMinimize>
		<onWindowResize public="1" set="method" line="428">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a window resize event is fired on the primary window
		@param	width	The width of the window
		@param	height	The height of the window</haxe_doc>
		</onWindowResize>
		<onWindowRestore public="1" set="method" line="433">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the primary window is restored from being minimized or fullscreen</haxe_doc>
		</onWindowRestore>
		<removeModule public="1" set="method" line="440">
			<f a="module">
				<c path="lime.app.IModule"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a module from the Application
		@param	module	A module to remove</haxe_doc>
		</removeModule>
		<render public="1" set="method" line="452">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a render event is fired on the primary window
		@param	context	The render context ready to be rendered</haxe_doc>
		</render>
		<update public="1" set="method" line="458">
			<f a="deltaTime">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when an update event is fired on the primary window
		@param	deltaTime	The amount of time in milliseconds that has elapsed since the last update</haxe_doc>
		</update>
		<__addWindow set="method" line="461">
			<f a="window">
				<c path="lime.ui.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__addWindow>
		<__createWindow set="method" line="507">
			<f a="attributes">
				<t path="lime.ui.WindowAttributes"/>
				<c path="lime.ui.Window"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__createWindow>
		<__registerLimeModule set="method" line="514" override="1">
			<f a="application">
				<c path="lime.app.Application"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__registerLimeModule>
		<__removeWindow set="method" line="540">
			<f a="window">
				<c path="lime.ui.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__removeWindow>
		<__onGamepadConnect set="method" line="562">
			<f a="gamepad">
				<c path="lime.ui.Gamepad"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onGamepadConnect>
		<__onJoystickConnect set="method" line="572">
			<f a="joystick">
				<c path="lime.ui.Joystick"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onJoystickConnect>
		<__onModuleExit set="method" line="584">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onModuleExit>
		<__onWindowClose set="method" line="589">
			<f a="window">
				<c path="lime.ui.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__onWindowClose>
		<__unregisterLimeModule set="method" line="599" override="1">
			<f a="application">
				<c path="lime.app.Application"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__unregisterLimeModule>
		<get_preloader get="inline" set="null" line="616">
			<f a=""><c path="lime.utils.Preloader"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_preloader>
		<get_window get="inline" set="null" line="621">
			<f a=""><c path="lime.ui.Window"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_window>
		<get_windows get="inline" set="null" line="626">
			<f a=""><c path="Array"><c path="lime.ui.Window"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_windows>
		<new public="1" set="method" line="96">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Application instance</haxe_doc>
		</new>
		<haxe_doc>The Application class forms the foundation for most Lime projects.
	It is common to extend this class in a main class. It is then possible
	to override "on" functions in the class in order to handle standard events
	that are relevant.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime.ui.Window</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<typedef path="lime.app._Application.ApplicationBackend" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Application.hx" private="1" module="lime.app.Application">
		<c path="lime._internal.backend.native.NativeApplication"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="lime.app.Event" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Event.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__listeners public="1">
			<c path="Array"><c path="lime.app.Event.T"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__listeners>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app.Event.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<dispatch public="1">
			<d/>
			<haxe_doc><![CDATA[Dispatches a new event callback to all listeners. The signature for the
		`dispatch` method depends upon the type of the `Event`. For example, an
		`Event` of type `Int->Int->Void` will create a `dispatch` method that
		takes two `Int` arguments, like `dispatch (1, 2);`]]></haxe_doc>
		</dispatch>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app.Event.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app.Event.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Event is a strictly-typed signals and slots implementation, used for
	core event dispatching.

	For example:

	```haxe
	var event = new Event<Int->Void> ();
	event.add (function (value:Int):Void { trace (value); });
	event.dispatch (100);

	var event = new Event<Void->Void> ();
	event.add (function () { trace ("callback"); });
	event.dispatch ();
	```]]></haxe_doc>
		<meta>
			<m n=":genericBuild"><e>lime._internal.macros.EventMacro.build()</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app.Future" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Future.hx">
		<ofEvents public="1" params="T" set="method" line="104" static="1">
			<f a="onComplete:?onError:?onProgress" v=":null:null">
				<c path="lime.app._Event_ofEvents_T_Void"><f a="">
	<c path="ofEvents.T"/>
	<x path="Void"/>
</f></c>
				<x path="Null"><c path="lime.app._Event_Dynamic_Void"><f a="">
	<d/>
	<x path="Void"/>
</f></c></x>
				<x path="Null"><c path="lime.app._Event_Int_Int_Void"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></x>
				<c path="lime.app.Future"><c path="ofEvents.T"/></c>
			</f>
			<meta><m n=":value"><e>{ onProgress : null, onError : null }</e></m></meta>
			<haxe_doc>Create a new `Future` instance based on complete and (optionally) error and/or progress `Event` instances</haxe_doc>
		</ofEvents>
		<withError public="1" set="method" line="295" static="1">
			<f a="error">
				<d/>
				<c path="lime.app.Future"><d/></c>
			</f>
			<haxe_doc>Creates a `Future` instance which has finished with an error value
		@param	error	The error value to set
		@return	A new `Future` instance</haxe_doc>
		</withError>
		<withValue public="1" params="T" set="method" line="308" static="1">
			<f a="value">
				<c path="withValue.T"/>
				<c path="lime.app.Future"><c path="withValue.T"/></c>
			</f>
			<haxe_doc>Creates a `Future` instance which has finished with a completion value
		@param	error	The completion value to set
		@return	A new `Future` instance</haxe_doc>
		</withValue>
		<error public="1" set="null">
			<d/>
			<haxe_doc>If the `Future` has finished with an error state, the `error` value</haxe_doc>
		</error>
		<isComplete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the `Future` finished with a completion state</haxe_doc>
		</isComplete>
		<isError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the `Future` finished with an error state</haxe_doc>
		</isError>
		<value public="1" set="null">
			<c path="lime.app.Future.T"/>
			<haxe_doc>If the `Future` has finished with a completion state, the completion `value`</haxe_doc>
		</value>
		<__completeListeners>
			<c path="Array"><f a="">
	<c path="lime.app.Future.T"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":noCompletion"/></meta>
		</__completeListeners>
		<__errorListeners>
			<c path="Array"><f a="">
	<d/>
	<x path="Void"/>
</f></c>
			<meta><m n=":noCompletion"/></meta>
		</__errorListeners>
		<__progressListeners>
			<c path="Array"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":noCompletion"/></meta>
		</__progressListeners>
		<onComplete public="1" set="method" line="122">
			<f a="listener">
				<f a="">
					<c path="lime.app.Future.T"/>
					<x path="Void"/>
				</f>
				<c path="lime.app.Future"><c path="lime.app.Future.T"/></c>
			</f>
			<haxe_doc>Register a listener for when the `Future` completes.

		If the `Future` has already completed, this is called immediately with the result
		@param	listener	A callback method to receive the result value
		@return	The current `Future`</haxe_doc>
		</onComplete>
		<onError public="1" set="method" line="151">
			<f a="listener">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<c path="lime.app.Future"><c path="lime.app.Future.T"/></c>
			</f>
			<haxe_doc>Register a listener for when the `Future` ends with an error state.

		If the `Future` has already ended with an error, this is called immediately with the error value
		@param	listener	A callback method to receive the error value
		@return	The current `Future`</haxe_doc>
		</onError>
		<onProgress public="1" set="method" line="180">
			<f a="listener">
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<c path="lime.app.Future"><c path="lime.app.Future.T"/></c>
			</f>
			<haxe_doc>Register a listener for when the `Future` updates progress.

		If the `Future` is already completed, this will not be called.
		@param	listener	A callback method to receive the progress value
		@return	The current `Future`</haxe_doc>
		</onProgress>
		<ready public="1" set="method" line="200">
			<f a="?waitTime" v="-1">
				<x path="Int"/>
				<c path="lime.app.Future"><c path="lime.app.Future.T"/></c>
			</f>
			<meta><m n=":value"><e>{ waitTime : -1 }</e></m></meta>
			<haxe_doc>Attempts to block on an asynchronous `Future`, returning when it is completed.
		@param	waitTime	(Optional) A timeout before this call will stop blocking
		@return	This current `Future`</haxe_doc>
		</ready>
		<result public="1" set="method" line="241">
			<f a="?waitTime" v="-1">
				<x path="Int"/>
				<x path="Null"><c path="lime.app.Future.T"/></x>
			</f>
			<meta><m n=":value"><e>{ waitTime : -1 }</e></m></meta>
			<haxe_doc>Attempts to block on an asynchronous `Future`, returning the completion value when it is finished.
		@param	waitTime	(Optional) A timeout before this call will stop blocking
		@return	The completion value, or `null` if the request timed out or blocking is not possible</haxe_doc>
		</result>
		<then public="1" params="U" set="method" line="259">
			<f a="next">
				<f a="">
					<c path="lime.app.Future.T"/>
					<c path="lime.app.Future"><c path="then.U"/></c>
				</f>
				<c path="lime.app.Future"><c path="then.U"/></c>
			</f>
			<haxe_doc>Chains two `Future` instances together, passing the result from the first
		as input for creating/returning a new `Future` instance of a new or the same type</haxe_doc>
		</then>
		<new public="1" set="method" line="74">
			<f a="?work:?async" v="null:false">
				<f a=""><c path="lime.app.Future.T"/></f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false, work : null }</e></m></meta>
			<haxe_doc>Create a new `Future` instance
		@param	work	(Optional) A function to execute
		@param	async	(Optional) If a function is specified, whether to execute it asynchronously where supported</haxe_doc>
		</new>
		<haxe_doc>`Future` is an implementation of Futures and Promises, with the exception that
	in addition to "success" and "failure" states (represented as "complete" and "error"),
	Lime `Future` introduces "progress" feedback as well to increase the value of
	`Future` values.

	```haxe
	var future = Image.loadFromFile ("image.png");
	future.onComplete (function (image) { trace ("Image loaded"); });
	future.onProgress (function (loaded, total) { trace ("Loading: " + loaded + ", " + total); });
	future.onError (function (error) { trace (error); });

	Image.loadFromFile ("image.png").then (function (image) {

		return Future.withValue (image.width);

	}).onComplete (function (width) { trace (width); })
	```

	`Future` values can be chained together for asynchronous processing of values.

	If an error occurs earlier in the chain, the error is propagated to all `onError` callbacks.

	`Future` will call `onComplete` callbacks, even if completion occurred before registering the
	callback. This resolves race conditions, so even functions that return immediately can return
	values using `Future`.

	`Future` values are meant to be immutable, if you wish to update a `Future`, you should create one
	using a `Promise`, and use the `Promise` interface to influence the error, complete or progress state
	of a `Future`.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":allow"><e>lime.app.Promise</e></m>
		</meta>
	</class>
	<class path="lime.app._Future.FutureWork" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Future.hx" private="1" module="lime.app.Future">
		<threadPool static="1"><c path="lime.system.ThreadPool"/></threadPool>
		<queue public="1" set="method" line="325" static="1">
			<f a="?state" v="null">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : null }</e></m></meta>
		</queue>
		<threadPool_doWork set="method" line="339" static="1"><f a="state">
	<d/>
	<x path="Void"/>
</f></threadPool_doWork>
		<threadPool_onComplete set="method" line="352" static="1"><f a="state">
	<d/>
	<x path="Void"/>
</f></threadPool_onComplete>
		<threadPool_onError set="method" line="357" static="1"><f a="state">
	<d/>
	<x path="Void"/>
</f></threadPool_onError>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="lime.app.Promise" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Promise.hx">
		<future public="1" set="null">
			<c path="lime.app.Future"><c path="lime.app.Promise.T"/></c>
			<haxe_doc>The `Future` associated with this `Promise`.

		All subsequent calls to set an error, completion or progress state
		will update the status and notify listeners to this `Future`</haxe_doc>
		</future>
		<isComplete public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the `Promise` (and related `Future`) has finished with a completion state.
		This will be `false` if the `Promise` has not been resolved with a completion or error state.</haxe_doc>
		</isComplete>
		<isError public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the `Promise` (and related `Future`) has finished with an error state.
		This will be `false` if the `Promise` has not been resolved with a completion or error state.</haxe_doc>
		</isError>
		<complete public="1" set="method" line="98">
			<f a="data">
				<c path="lime.app.Promise.T"/>
				<c path="lime.app.Promise"><c path="lime.app.Promise.T"/></c>
			</f>
			<haxe_doc>Resolves this `Promise` with a completion state
		@param	data	The completion value
		@return	The current `Promise`</haxe_doc>
		</complete>
		<completeWith public="1" set="method" line="125">
			<f a="future">
				<c path="lime.app.Future"><c path="lime.app.Promise.T"/></c>
				<c path="lime.app.Promise"><c path="lime.app.Promise.T"/></c>
			</f>
			<haxe_doc>Resolves this `Promise` with the complete, error and/or progress state
		of another `Future`
		@param	future	The `Future` to use to resolve this `Promise`
		@return	The current `Promise`</haxe_doc>
		</completeWith>
		<error public="1" set="method" line="139">
			<f a="msg">
				<d/>
				<c path="lime.app.Promise"><c path="lime.app.Promise.T"/></c>
			</f>
			<haxe_doc>Resolves this `Promise` with an error state
		@param	msg	The error value
		@return	The current `Promise`</haxe_doc>
		</error>
		<progress public="1" set="method" line="166">
			<f a="progress:total">
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.app.Promise"><c path="lime.app.Promise.T"/></c>
			</f>
			<haxe_doc>Sends progress updates to the related `Future`
		@param	progress	A progress value
		@param	total	A total value. This should be equal or greater to the `progress` value
		@return	The current `Promise`</haxe_doc>
		</progress>
		<get_isComplete set="method" line="183">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isComplete>
		<get_isError set="method" line="188">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isError>
		<new public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new `Promise` instance</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`Promise` is an implementation of Futures and Promises, with the exception that
	in addition to "success" and "failure" states (represented as "complete" and "error"),
	Lime `Future` introduces "progress" feedback as well to increase the value of
	`Future` values.

	While `Future` is meant to be read-only, `Promise` can be used to set the state of a future
	for receipients of it's `Future` object. For example:

	```haxe
	function examplePromise ():Future<String> {

		var promise = new Promise<String> ();

		var progress = 0, total = 10;
		var timer = new Timer (100);
		timer.run = function () {

			promise.progress (progress, total);
			progress++;

			if (progress == total) {

				promise.complete ("Done!");
				timer.stop ();

			}

		};

		return promise.future;

	}

	var future = examplePromise ();
	future.onComplete (function (message) { trace (message); });
	future.onProgress (function (loaded, total) { trace ("Progress: " + loaded + ", " + total); });
	```]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":allow"><e>lime.app.Future</e></m>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="lime.app._Event_Dynamic_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/ThreadPool.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Dynamic_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Dynamic_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Dynamic_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<d/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<d/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Float_Float_Float_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/Sensor.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Float_Float_Float_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_Float_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_Float_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Float_Float_Int_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Float_Float_Int_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_Int_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_Int_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Float_Float_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Float_Float_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Float_Float_lime_ui_MouseButton_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Float_Float_lime_ui_MouseButton_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_lime_ui_MouseButton_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_lime_ui_MouseButton_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.ui.MouseButton"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.ui.MouseButton"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<e path="lime.ui.MouseWheelMode"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1:a2">
	<x path="Float"/>
	<x path="Float"/>
	<e path="lime.ui.MouseWheelMode"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Int_Float_Float_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Joystick.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Int_Float_Float_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Int_Float_Float_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Int_Float_Float_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1:a2">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Int_Float_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Joystick.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Int_Float_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Int_Float_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Int_Float_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Int_Int_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Int_Int_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Int_Int_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Int_Int_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Int_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Joystick.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Int_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Int_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Int_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<x path="Int"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Int_lime_ui_JoystickHatPosition_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Joystick.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Int_lime_ui_JoystickHatPosition_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Int_lime_ui_JoystickHatPosition_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Int_lime_ui_JoystickHatPosition_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=":">
	<x path="Int"/>
	<x path="lime.ui.JoystickHatPosition"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1">
	<x path="Int"/>
	<x path="lime.ui.JoystickHatPosition"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_String_Int_Int_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_String_Int_Int_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_String_Int_Int_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_String_Int_Int_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="::">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1:a2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_String_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_String_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_String_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_String_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="String"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_Void_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_Void_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_Void_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_Void_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=""><x path="Void"/></f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a=""><x path="Void"/></f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_graphics_RenderContext_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_graphics_RenderContext_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_graphics_RenderContext_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_graphics_RenderContext_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="lime.graphics.RenderContext"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="lime.graphics.RenderContext"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_GamepadAxis_Float_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Gamepad.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_GamepadAxis_Float_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_GamepadAxis_Float_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_GamepadAxis_Float_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=":">
	<x path="lime.ui.GamepadAxis"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1">
	<x path="lime.ui.GamepadAxis"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_GamepadButton_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Gamepad.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_GamepadButton_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_GamepadButton_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_GamepadButton_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<x path="lime.ui.GamepadButton"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<x path="lime.ui.GamepadButton"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_Gamepad_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Gamepad.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_Gamepad_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Gamepad_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Gamepad_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="lime.ui.Gamepad"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="lime.ui.Gamepad"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_Joystick_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Joystick.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_Joystick_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Joystick_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Joystick_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="lime.ui.Joystick"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="lime.ui.Joystick"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a=":">
	<x path="lime.ui.KeyCode"/>
	<x path="lime.ui.KeyModifier"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a:a1">
	<x path="lime.ui.KeyCode"/>
	<x path="lime.ui.KeyModifier"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_Touch_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Touch.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_Touch_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Touch_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Touch_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="lime.ui.Touch"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="lime.ui.Touch"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_lime_ui_Window_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Application.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_lime_ui_Window_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Window_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_lime_ui_Window_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="lime.ui.Window"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="lime.ui.Window"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.app._Event_ofEvents_T_Void" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/app/Future.hx">
		<canceled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether the event was canceled during the previous dispatch</haxe_doc>
		</canceled>
		<__repeat public="1">
			<c path="Array"><x path="Bool"/></c>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</__repeat>
		<__priorities>
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":noCompletion"/></meta>
		</__priorities>
		<add public="1" set="method" line="58">
			<f a="listener:?once:?priority" v=":false:0">
				<c path="lime.app._Event_ofEvents_T_Void.T"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0, once : false }</e></m></meta>
			<haxe_doc>Adds a new event listener
		@param	listener	A callback that matches the signature of the event
		@param	once	Whether to receive an event dispatch only once, or each time it is fired
		@param	priority	The priority for this listener, a higher priority will be dispatched sooner</haxe_doc>
		</add>
		<cancel public="1" set="method" line="81">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Marks the event as canceled, and stops the current event dispatch</haxe_doc>
		</cancel>
		<has public="1" set="method" line="127">
			<f a="listener">
				<c path="lime.app._Event_ofEvents_T_Void.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether a callback is a listener to this event
		@param	listener	A callback that matches the signature of the event
		@return	Whether the callback is a listener</haxe_doc>
		</has>
		<remove public="1" set="method" line="143">
			<f a="listener">
				<c path="lime.app._Event_ofEvents_T_Void.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener
		@param	listener	A callback that matches the signature of the event</haxe_doc>
		</remove>
		<removeAll public="1" set="method" line="163">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all event listeners</haxe_doc>
		</removeAll>
		<__listeners public="1"><c path="Array"><f a="">
	<c path="lime.app._Event_ofEvents_T_Void.T"/>
	<x path="Void"/>
</f></c></__listeners>
		<dispatch public="1" set="method" line="82"><f a="a">
	<c path="lime.app._Event_ofEvents_T_Void.T"/>
	<x path="Void"/>
</f></dispatch>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Event instance</haxe_doc>
		</new>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.graphics.CairoRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/CairoRenderContext.hx">
		<from>
			<icast><c path="lime.graphics.cairo.Cairo"/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><c path="lime.graphics.cairo.Cairo"/></this>
		<to><icast><c path="lime.graphics.cairo.Cairo"/></icast></to>
		<haxe_doc>The `CairoRenderContext` represents the primary `lime.graphics.Cairo` instance when Cairo
	is the render context type of the `Window`.

	You can convert from `lime.graphics.RenderContext` to `CairoRenderContext` directly
	if desired:

	```haxe
	var cairo:CairoRenderContext = window.context;
	```</haxe_doc>
		<meta>
			<m n=":access"><e>lime.graphics.RenderContext</e></m>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._CairoRenderContext.CairoRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/CairoRenderContext.hx" private="1" module="lime.graphics.CairoRenderContext" final="1">
	<fromRenderContext set="method" line="23" static="1">
		<f a="context">
			<c path="lime.graphics.RenderContext"/>
			<x path="lime.graphics.CairoRenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRenderContext>
	<meta><m n=":access"><e>lime.graphics.RenderContext</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics._CairoRenderContext.CairoRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/CairoRenderContext.hx" private="1" module="lime.graphics.CairoRenderContext" final="1">
		<fromRenderContext set="method" line="23" static="1">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="lime.graphics.CairoRenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRenderContext>
		<meta><m n=":access"><e>lime.graphics.RenderContext</e></m></meta>
	</class>
	<abstract path="lime.graphics.Canvas2DRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/Canvas2DRenderContext.hx">
		<from>
			<icast><d/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/Canvas2DRenderContext.hx" private="1" module="lime.graphics.Canvas2DRenderContext" final="1"><fromRenderContext set="method" line="33" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.Canvas2DRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class></impl>
	</abstract>
	<class path="lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/Canvas2DRenderContext.hx" private="1" module="lime.graphics.Canvas2DRenderContext" final="1"><fromRenderContext set="method" line="33" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.Canvas2DRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class>
	<abstract path="lime.graphics.DOMRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/DOMRenderContext.hx">
		<from>
			<icast><d/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._DOMRenderContext.DOMRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/DOMRenderContext.hx" private="1" module="lime.graphics.DOMRenderContext" final="1"><fromRenderContext set="method" line="33" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.DOMRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class></impl>
	</abstract>
	<class path="lime.graphics._DOMRenderContext.DOMRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/DOMRenderContext.hx" private="1" module="lime.graphics.DOMRenderContext" final="1"><fromRenderContext set="method" line="33" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.DOMRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class>
	<abstract path="lime.graphics.FlashRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/FlashRenderContext.hx">
		<from>
			<icast><d/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._FlashRenderContext.FlashRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/FlashRenderContext.hx" private="1" module="lime.graphics.FlashRenderContext" final="1"><fromRenderContext set="method" line="33" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.FlashRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class></impl>
	</abstract>
	<class path="lime.graphics._FlashRenderContext.FlashRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/FlashRenderContext.hx" private="1" module="lime.graphics.FlashRenderContext" final="1"><fromRenderContext set="method" line="33" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.FlashRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class>
	<class path="lime.graphics.Image" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/Image.hx">
		<fromBase64 public="1" set="method" line="613" static="1">
			<f a="base64:type">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.graphics.Image"/>
			</f>
			<haxe_doc>Converts a Base64-encoded `String` into an `Image`, or returns `null` if this is not possible
		@param	base64	A Base64-encoded `String`
		@param	type	A mime-type to describe the image data (such as "image/png")
		@return	A new `Image`, or `null` if conversion was not possible</haxe_doc>
		</fromBase64>
		<fromBitmapData public="1" set="method" line="627" static="1">
			<f a="bitmapData">
				<d/>
				<c path="lime.graphics.Image"/>
			</f>
			<haxe_doc>Creates a new `Image` from a Flash `BitmapData` instance
		@param	bitmapData	A source `bitmapData` to use
		@return		A new `Image` instance</haxe_doc>
		</fromBitmapData>
		<fromBytes public="1" set="method" line="652" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<c path="lime.graphics.Image"/>
			</f>
			<haxe_doc>Converts a `Bytes` object to an `Image` instance

		Some platforms (such as Flash and HTML5) cannot convert `Bytes` to an
		`Image` synchronously, and may not work properly.

		`Image.loadFromBytes` works asynchronously, and should work
		consistently on all platforms.
		@param	bytes	A `Bytes` holding encoded image data
		@return	A new `Image` instance</haxe_doc>
		</fromBytes>
		<fromCanvas public="1" set="method" line="672" static="1">
			<f a="canvas">
				<d/>
				<c path="lime.graphics.Image"/>
			</f>
			<haxe_doc>Converts an `js.html.CanvasElement` instance to an `Image`
		@param	canvas	A `CanvasElement`
		@return	A new `Image` instance</haxe_doc>
		</fromCanvas>
		<fromFile public="1" set="method" line="695" static="1">
			<f a="path">
				<c path="String"/>
				<c path="lime.graphics.Image"/>
			</f>
			<haxe_doc>Loads an `Image` from a path synchronously.

		Some platforms, such as Flash and HTML5, cannot load
		images synchronously.

		`Image.loadFromFile` works asynchronously, and should
		behave consistently on all platforms.
		@param	path	The source file path or URL of an encoded image file
		@return	A new `Image` instance</haxe_doc>
		</fromFile>
		<fromImageElement public="1" set="method" line="715" static="1">
			<f a="image">
				<d/>
				<c path="lime.graphics.Image"/>
			</f>
			<haxe_doc>Converts a `js.html.Image` instance to an `Image`
		@param	image	An `ImageElement` instance
		@return	A new `Image` instance</haxe_doc>
		</fromImageElement>
		<loadFromBase64 public="1" set="method" line="918" static="1">
			<f a="base64:type">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.graphics.Image"/></c>
			</f>
			<haxe_doc>Creates a new `Image` instance from a Base64-encoded `String`, asynchronously
		@param	base64	A Base64-encoded string representing encoded image data
		@param	type	The mime type of the encoded data (such as "image/png")
		@return	A `Future` to return a new `Image` instance</haxe_doc>
		</loadFromBase64>
		<loadFromBytes public="1" set="method" line="941" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<c path="lime.app.Future"><c path="lime.graphics.Image"/></c>
			</f>
			<haxe_doc>Creates a new `Image` instance from image-encoded `Bytes`, loaded asynchronously
		@param	bytes	A `Bytes` instance
		@return	A `Future` to return a new `Image` instance</haxe_doc>
		</loadFromBytes>
		<loadFromFile public="1" set="method" line="1007" static="1">
			<f a="path">
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.graphics.Image"/></c>
			</f>
			<haxe_doc>Creates a new `Image` instance from a file path or URL, loaded asynchronously
		@param	path	A file path or URL containing an encoded image
		@return	A `Future` to return a new `Image` instance</haxe_doc>
		</loadFromFile>
		<__isGIF set="method" line="1711" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></__isGIF>
		<__isJPG set="method" line="1719" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></__isJPG>
		<__isPNG set="method" line="1729" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></__isPNG>
		<__isWebP set="method" line="1737" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></__isWebP>
		<buffer public="1">
			<c path="lime.graphics.ImageBuffer"/>
			<haxe_doc>The `ImageBuffer` store that backs the `Image`</haxe_doc>
		</buffer>
		<data public="1" get="accessor" set="accessor">
			<x path="lime.utils.UInt8Array"/>
			<haxe_doc>Retrieves `UInt8Array` data from the `ImageBuffer`. If the `ImageBuffer`
		is not in a data format, it will be converted.</haxe_doc>
		</data>
		<dirty public="1">
			<x path="Bool"/>
			<haxe_doc>Whether the `Image` is dirty. This is set to `true` when pixel operations
		have been performed on the underlying `buffer`, and can be set to `false`
		again by your own renderer.</haxe_doc>
		</dirty>
		<format public="1" get="accessor" set="accessor">
			<x path="lime.graphics.PixelFormat"/>
			<haxe_doc>Get or set the `PixelFormat` for the underlying `ImageBuffer`. This can be
		used to convert the `ImageBuffer` to a new format.</haxe_doc>
		</format>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>The logical height of the `Image`. This can be smaller than the `height`
		of the underlying `buffer`.</haxe_doc>
		</height>
		<offsetX public="1">
			<x path="Int"/>
			<haxe_doc>The offset X position of the `Image`, from the source `buffer`,
		when the `Image` is smaller than the full size of the source `buffer`</haxe_doc>
		</offsetX>
		<offsetY public="1">
			<x path="Int"/>
			<haxe_doc>The offset Y position of the `Image`, from the source `buffer`,
		when the `Image` is smaller than the full size of the source `buffer`</haxe_doc>
		</offsetY>
		<powerOfTwo public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Get or set whether the `ImageBuffer` dimensions are both a power-of-two
		(such as 2, 4, 8, 16, so on). Setting this value may resize the underlying
		`buffer`</haxe_doc>
		</powerOfTwo>
		<premultiplied public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Get or set whether this `Image` has premultiplied alpha. Setting this value
		may multiply or unmultiply data if the underlying `ImageBuffer` uses a
		different format.</haxe_doc>
		</premultiplied>
		<rect public="1" get="accessor" set="null">
			<c path="lime.math.Rectangle"/>
			<haxe_doc>The offset, width and height of this image as a `Rectangle`</haxe_doc>
		</rect>
		<src public="1" get="accessor" set="accessor">
			<d/>
			<haxe_doc>A higher-level representation of the source `ImageBuffer`. This might be an
		HTML5 Image, CanvasElement or a Flash BitmapData instance.</haxe_doc>
		</src>
		<transparent public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Get or set whether the underlying `ImageBuffer` is transparent.</haxe_doc>
		</transparent>
		<type public="1">
			<e path="lime.graphics.ImageType"/>
			<haxe_doc>The current `ImageType`, representing what is being used to store the `Image`'s graphics</haxe_doc>
		</type>
		<version public="1">
			<x path="Int"/>
			<haxe_doc>The `version` of the `Image` increases each time it is modified, helpful to determining
		whether a cache is out-of-date.</haxe_doc>
		</version>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>The logical width of the `Image`. This can be smaller than the `width`
		of the underlying `buffer`.</haxe_doc>
		</width>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>A convenience property, unused internally, which may be helpful for different renderer
		implementations</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>A convenience property, unused internally, which may be helpful for different renderer
		implementations</haxe_doc>
		</y>
		<clone public="1" set="method" line="286">
			<f a=""><c path="lime.graphics.Image"/></f>
			<haxe_doc>Creates a duplicate copy of this `Image` and `ImageBuffer`
		@return	A new `Image` instance</haxe_doc>
		</clone>
		<colorTransform public="1" set="method" line="316">
			<f a="rect:colorMatrix">
				<c path="lime.math.Rectangle"/>
				<x path="lime.math.ColorMatrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a color transform to the underlying `ImageBuffer` data
		@param	rect	The target rectangle to transform
		@param	colorMatrix	A `ColorMatrix` for color offset and/or multiplication</haxe_doc>
		</colorTransform>
		<copyChannel public="1" set="method" line="349">
			<f a="sourceImage:sourceRect:destPoint:sourceChannel:destChannel">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<e path="lime.graphics.ImageChannel"/>
				<e path="lime.graphics.ImageChannel"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copy a color channel from one `Image` to another. This can also be within the same `Image` instance.
		@param	sourceImage	The `Image` to copy from
		@param	sourceRect	The source rectangle to copy from in the `sourceImage`
		@param	destPoint	The destination point to apply the channel in the current `Image`
		@param	sourceChannel	The source color channel to copy the data from
		@param	destChannel	The destination color channel to apply the data into</haxe_doc>
		</copyChannel>
		<copyPixels public="1" set="method" line="408">
			<f a="sourceImage:sourceRect:destPoint:?alphaImage:?alphaPoint:?mergeAlpha" v=":::null:null:false">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Vector2"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false, alphaPoint : null, alphaImage : null }</e></m></meta>
			<haxe_doc>Copies pixels from one `Image` to another. The source `Image` can also be this `Image`
		@param	sourceImage	The source `Image` to copy from
		@param	sourceRect	The source rectangle to use when copying
		@param	destPoint	The destination point to use when copying
		@param	alphaImage	(Optional) A different `Image` to use as the alpha channel while copying
		@param	alphaPoint	(Optional) A point in the alpha image to use when copying
		@param	mergeAlpha	(Optional) Whether to blend the source and destination alpha (`true`), or to replace the destination alpha (`false`)</haxe_doc>
		</copyPixels>
		<encode public="1" set="method" line="507">
			<f a="?format:?quality" v="null:90">
				<e path="lime.graphics.ImageFileFormat"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ quality : 90, format : null }</e></m></meta>
			<haxe_doc>Encodes this `Image` into an image file format, such as PNG or JPEG.
		@param	format	(Optional) An `ImageFileFormat` to encode into (default is `PNG`)
		@param	quality	(Optional) A quality value to use when encoding as JPEG (from 0 to 100)
		@return	`Bytes` for the encoded `Image`, or `null` if encoding was not successful</haxe_doc>
		</encode>
		<fillRect public="1" set="method" line="532">
			<f a="rect:color:?format" v="::null">
				<c path="lime.math.Rectangle"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Fill a rectangle in the `Image` with a solid color
		@param	rect	A destination rectangle in this `Image` to fill
		@param	color	The color to use when filling this `Image`
		@param	format	(Optional) The `PixelFormat` that `color` is encoded in (default is `RGBA`)</haxe_doc>
		</fillRect>
		<floodFill public="1" set="method" line="577">
			<f a="x:y:color:?format" v=":::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Applies a flood fill to this `Image`, starting with the point specified.

		A flood fill behaves similarly to the "paint can" tool in many image editors,
		the fill will apply the chosen color to neighboring pixels of the same color.
		@param	x	The target x coordinate within the `Image` to use with the fill
		@param	y	The target y coordinate within the `Image` to use with the fill
		@param	color	The color to use when performing the fill
		@param	format	(Optional) The `PixelFormat` that `color` is encoded in (default is `RGBA`)</haxe_doc>
		</floodFill>
		<getColorBoundsRect public="1" set="method" line="736">
			<f a="mask:color:?findColor:?format" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.graphics.PixelFormat"/>
				<c path="lime.math.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ format : null, findColor : true }</e></m></meta>
			<haxe_doc>Finds a region in the `Image` that includes pixels all of a certain color (when `findColor` is `true`) or
		excludes a certain color (`findColor` is `false`)
		@param	mask	A hexadecimal mask to use when comparing colors. You can use this to compare all of a color, or only certain color channels
		@param	color	The color value to use in comparisons
		@param	findColor	(Optional) Whether to find a region that does match the color (`true`) or excludes it (`false`)
		@param	format	(Optional) The `PixelFormat` that the `color` and `mask` are encoded in (default is `RGBA`)
		@return	The matching bounds `Rectangle`, or `null` if no matching region is found</haxe_doc>
		</getColorBoundsRect>
		<getPixel public="1" set="method" line="768">
			<f a="x:y:?format" v="::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Gets a 24-bit pixel from the `Image` (red, green and blue, but no alpha)
		@param	x	The `x` location to fetch
		@param	y	The `y` location to fetch
		@param	format	(Optional) The `PixelFormat` to encode the return value in (default is `RGBA`)
		@return	The specified pixel, or `0` if it is out-of-bounds</haxe_doc>
		</getPixel>
		<getPixel32 public="1" set="method" line="810">
			<f a="x:y:?format" v="::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Gets a 32-bit pixel from the `Image`, including alpha
		@param	x	The `x` location to fetch
		@param	y	The `y` location to fetch
		@param	format	(Optional) The `PixelFormat` to encode the return value in (default is `RGBA`)
		@return	The specified pixel, or `0` if it is out-of-bounds</haxe_doc>
		</getPixel32>
		<getPixels public="1" set="method" line="851">
			<f a="rect:?format" v=":null">
				<c path="lime.math.Rectangle"/>
				<x path="lime.graphics.PixelFormat"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Gets a region of pixels from the `Image`, as `Bytes`
		@param	rect	The source `Rectangle` to read from
		@param	format	(Optional) The `PixelFormat` to use when writing to the `Bytes` object (default is `RGBA`)
		@return	A `Bytes` object representing the region, or `null` if it is not possible to read</haxe_doc>
		</getPixels>
		<merge public="1" set="method" line="1080">
			<f a="sourceImage:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Blits a second `Image` onto this one, using optional color multipliers
		@param	sourceImage	An `Image` instance to copy from
		@param	sourceRect	The source rectangle to use when copying
		@param	destPoint	The destination point in this `Image` to copy into
		@param	redMultiplier	A red multiplier to use when blitting
		@param	greenMultiplier	A red multiplier to use when blitting
		@param	blueMultiplier	A red multiplier to use when blitting
		@param	alphaMultiplier	A red multiplier to use when blitting</haxe_doc>
		</merge>
		<resize public="1" set="method" line="1114">
			<f a="newWidth:newHeight">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resizes the current `Image`, reallocating the `ImageBuffer` to a new size.
		The resize algorithm for most platforms is bilinear.
		@param	newWidth	A new width for the `Image`
		@param	newHeight	A new height for the `Image`</haxe_doc>
		</resize>
		<scroll public="1" set="method" line="1154">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the content of this `Image`.

		Pixels on the edges of the scroll will remain repeated, while others
		within the scroll area will be shifted

		@param	x	The amount of horizontal scroll to apply
		@param	y	The amount of vertical scroll to apply</haxe_doc>
		</scroll>
		<setPixel public="1" set="method" line="1180">
			<f a="x:y:color:?format" v=":::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Sets a pixel in the current `Image` in 24-bit color format (red, green, blue, no alpha)
		@param	x	The x coordinate of the pixel
		@param	y	The y coordinate of the pixel
		@param	color	The color to use
		@param	format	(Optional) The `PixelFormat` that `color` is encoded in (default is `RGBA`)</haxe_doc>
		</setPixel>
		<setPixel32 public="1" set="method" line="1217">
			<f a="x:y:color:?format" v=":::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>Sets a pixel in the current `Image` in 32-bit color format (includes alpha)
		@param	x	The x coordinate of the pixel
		@param	y	The y coordinate of the pixel
		@param	color	The color to use
		@param	format	(Optional) The `PixelFormat` that `color` is encoded in (default is `RGBA`)</haxe_doc>
		</setPixel32>
		<setPixels public="1" set="method" line="1254">
			<f a="rect:bytePointer:?format:?endian" v="::null:null">
				<c path="lime.math.Rectangle"/>
				<x path="lime.utils.BytePointer"/>
				<x path="lime.graphics.PixelFormat"/>
				<e path="lime.system.Endian"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endian : null, format : null }</e></m></meta>
			<haxe_doc>Sets a region of pixels at once using a `BytePointer`
		@param	rect	The region of pixels in this `Image` to replace with the incoming bytes
		@param	bytePointer	A `BytePointer` object referencing the `Bytes` and position to read from
		@param	format	(Optional) The `PixelFormat` that the pixels are encoded in (default is `RGBA`)
		@param	endian (Optional) The endianness of the incoming bytes (default is the system endianness)</haxe_doc>
		</setPixels>
		<threshold public="1" set="method" line="1361">
			<f a="sourceImage:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource:?format" v=":::::0x00000000:0xFFFFFFFF:false:null">
				<c path="lime.graphics.Image"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Vector2"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ format : null, copySource : false, mask : 0xFFFFFFFF, color : 0x00000000 }</e></m></meta>
			<haxe_doc><![CDATA[Tests pixel values in an image against a specified threshold and sets
		pixels that pass the test to new color values. Using the
		`threshold()` method, you can isolate and replace color ranges
		in an image and perform other logical operations on image pixels.

		The `threshold()` method's test logic is as follows:

		 1. If `((pixelValue & mask) operation(threshold & mask))`,
		then set the pixel to `color`;
		 2. Otherwise, if `copySource == true`, then set the pixel to
		corresponding pixel value from `sourceBitmap`.

		The `operation` parameter specifies the comparison operator
		to use for the threshold test. For example, by using "==" as the
		`operation` parameter, you can isolate a specific color value
		in an image. Or by using `{operation: "<", mask: 0xFF000000,
		threshold: 0x7F000000, color: 0x00000000}`, you can set all
		destination pixels to be fully transparent when the source image pixel's
		alpha is less than 0x7F. You can use this technique for animated
		transitions and other effects.

		@param	sourceImage	The input bitmap image to use. The source image can be a different `Image` object or it can refer to the current `Image` instance.
		@param	sourceRect	A rectangle that defines the area of the source image to use as input.
		@param	destPoint	The point within the destination image (the current `Image` instance) that corresponds to the upper-left corner of the source rectangle.
		@param	operation	One of the following comparison operators, passed as a `String`: "<", "<=", ">", ">=", "==", "!="
		@param	threshold	The value that each pixel is tested against to see if it meets or exceeds the threshhold.
		@param	color	The color value that a pixel is set to if the threshold test succeeds. The default value is 0x00000000.
		@param	mask	The mask to use to isolate a color component.
		@param	copySource	If the value is `true`, pixel values from the source image are copied to the destination when the threshold test fails. If the value is `false`, the source image is not copied when the threshold test fails.
		@return	The number of pixels that were changed.]]></haxe_doc>
		</threshold>
		<__clipRect set="method" line="1402">
			<f a="r">
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__clipRect>
		<__fromBase64 set="method" line="1439">
			<f a="base64:type:?onload" v="::null">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<c path="lime.graphics.Image"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ onload : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__fromBase64>
		<__fromBytes set="method" line="1474">
			<f a="bytes:?onload" v=":null">
				<c path="haxe.io.Bytes"/>
				<f a="">
					<c path="lime.graphics.Image"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ onload : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__fromBytes>
		<__fromFile set="method" line="1531">
			<f a="path:?onload:?onerror" v=":null:null">
				<c path="String"/>
				<f a="">
					<c path="lime.graphics.Image"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ onerror : null, onload : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__fromFile>
		<__fromImageBuffer set="method" line="1693">
			<f a="buffer">
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__fromImageBuffer>
		<get_data set="method" line="1745">
			<f a=""><x path="lime.utils.UInt8Array"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_data>
		<set_data set="method" line="1760">
			<f a="value">
				<x path="lime.utils.UInt8Array"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_data>
		<get_format set="method" line="1765">
			<f a=""><x path="lime.graphics.PixelFormat"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_format>
		<set_format set="method" line="1770">
			<f a="value">
				<x path="lime.graphics.PixelFormat"/>
				<x path="lime.graphics.PixelFormat"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_format>
		<get_powerOfTwo set="method" line="1786">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_powerOfTwo>
		<set_powerOfTwo set="method" line="1793">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_powerOfTwo>
		<get_premultiplied set="method" line="1843">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_premultiplied>
		<set_premultiplied set="method" line="1848">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_premultiplied>
		<get_rect set="method" line="1884">
			<f a=""><c path="lime.math.Rectangle"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_rect>
		<get_src set="method" line="1889">
			<f a=""><d/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_src>
		<set_src set="method" line="1901">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_src>
		<get_transparent set="method" line="1906">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_transparent>
		<set_transparent set="method" line="1912">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_transparent>
		<new public="1" set="method" line="221">
			<f a="?buffer:?offsetX:?offsetY:?width:?height:?color:?type" v="null:0:0:-1:-1:null:null">
				<c path="lime.graphics.ImageBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="lime.graphics.ImageType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : null, color : null, height : -1, width : -1, offsetY : 0, offsetX : 0, buffer : null }</e></m></meta>
			<haxe_doc>Creates a new `Image` instance.

		If `buffer` is null, but `width` and `height` are set, a new `ImageBuffer` is allocated matching the `color` requested.
		@param	buffer	(Optional) The `ImageBuffer` this `Image` represents
		@param	offsetX	(Optional) A logical offset value within the `ImageBuffer` dimensions
		@param	offsetY	(Optional) A logical offset value within the `ImageBuffer` dimensions
		@param	width	(Optional) A logical width value within the `ImageBuffer` dimensions
		@param	height	(Optional) A logical height value within the `ImageBuffer` dimensions
		@param	color	(Optional) A fill color to use if the `buffer` property is `null`
		@param	type	(Optional) An `ImageType` to use for this `Image`</haxe_doc>
		</new>
		<haxe_doc>`Image` is a convenience class for working with bitmap images in Lime.

	Although `ImageBuffer` holds the actual bitmap data, `Image` includes convenience methods for
	loading from files, loading from bytes, and performing many pixel operations over an
	`ImageBuffer` instance.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":autoBuild"><e>lime._internal.macros.AssetsMacro.embedImage()</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":allow"><e>lime._internal.graphics.ImageCanvasUtil</e></m>
			<m n=":allow"><e>lime._internal.graphics.ImageDataUtil</e></m>
			<m n=":access"><e>lime.app.Application</e></m>
			<m n=":access"><e>lime.math.ColorMatrix</e></m>
			<m n=":access"><e>lime.math.Rectangle</e></m>
			<m n=":access"><e>lime.math.Vector2</e></m>
		</meta>
	</class>
	<class path="lime.graphics.ImageBuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/ImageBuffer.hx">
		<bitsPerPixel public="1">
			<x path="Int"/>
			<haxe_doc>The number of bits per pixel in this image data</haxe_doc>
		</bitsPerPixel>
		<data public="1">
			<x path="lime.utils.UInt8Array"/>
			<haxe_doc>The data for this image, represented as a `UInt8Array`</haxe_doc>
		</data>
		<format public="1">
			<x path="lime.graphics.PixelFormat"/>
			<haxe_doc>The `PixelFormat` for this image data</haxe_doc>
		</format>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>The height of this image data</haxe_doc>
		</height>
		<premultiplied public="1">
			<x path="Bool"/>
			<haxe_doc>Whether the image data has premultiplied alpha</haxe_doc>
		</premultiplied>
		<src public="1" get="accessor" set="accessor">
			<d/>
			<haxe_doc>The data for this image, represented as a `js.html.CanvasElement`, `js.html.Image` or `flash.display.BitmapData`</haxe_doc>
		</src>
		<stride public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The stride, or number of data values (in bytes) per row in the image data</haxe_doc>
		</stride>
		<transparent public="1">
			<x path="Bool"/>
			<haxe_doc>Whether this image data is transparent</haxe_doc>
		</transparent>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>The width of this image data</haxe_doc>
		</width>
		<__srcBitmapData>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcBitmapData>
		<__srcCanvas>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcCanvas>
		<__srcContext>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcContext>
		<__srcCustom>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcCustom>
		<__srcImage>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcImage>
		<__srcImageData>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcImageData>
		<clone public="1" set="method" line="128">
			<f a=""><c path="lime.graphics.ImageBuffer"/></f>
			<haxe_doc>Creates a duplicate of this `ImageBuffer`

		If the current `ImageBuffer` has `data` or `src` information, this will be
		cloned as well.
		@return	A new `ImageBuffer` with duplicate values</haxe_doc>
		</clone>
		<get_src set="method" line="190">
			<f a=""><d/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_src>
		<set_src set="method" line="202">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_src>
		<get_stride set="method" line="223">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_stride>
		<new public="1" set="method" line="110">
			<f a="?data:?width:?height:?bitsPerPixel:?format" v="null:0:0:32:null">
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ format : null, bitsPerPixel : 32, height : 0, width : 0, data : null }</e></m></meta>
			<haxe_doc>Creates a new `ImageBuffer` instance
		@param	data	(Optional) Initial `UInt8Array` data
		@param	width	(Optional) An initial `width` value
		@param	height	(Optional) An initial `height` value
		@param	bitsPerPixel	(Optional) The `bitsPerPixel` of the data (default is 32)
		@param	format	(Optional) The `PixelFormat` of this image buffer</haxe_doc>
		</new>
		<haxe_doc>`ImageBuffer` is a simple object for storing image data.

	For higher-level operations, use the `Image` class.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":allow"><e>lime.graphics.Image</e></m>
		</meta>
	</class>
	<enum path="lime.graphics.ImageChannel" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/ImageChannel.hx">
		<RED><haxe_doc>The red color channel</haxe_doc></RED>
		<GREEN><haxe_doc>The green color channel</haxe_doc></GREEN>
		<BLUE><haxe_doc>The blue color channel</haxe_doc></BLUE>
		<ALPHA><haxe_doc>The alpha color channel</haxe_doc></ALPHA>
		<haxe_doc>An enum with values for standard image color channels</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="lime.graphics.ImageFileFormat" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/ImageFileFormat.hx">
		<BMP><haxe_doc>An image file encoded in the BMP file format</haxe_doc></BMP>
		<JPEG><haxe_doc>An image file encoded in the JPEG file format</haxe_doc></JPEG>
		<PNG><haxe_doc>An image file encoded in the PNG file format</haxe_doc></PNG>
		<haxe_doc>An enum with values for image encoding formats</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="lime.graphics.ImageType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/ImageType.hx">
		<CANVAS><haxe_doc>The source image data is stored in a `js.html.Image` or `js.html.CanvasElement`</haxe_doc></CANVAS>
		<DATA><haxe_doc>The source image data is stored in a `UInt8Array`</haxe_doc></DATA>
		<FLASH><haxe_doc>The source image data is stored in a `flash.display.BitmapData`</haxe_doc></FLASH>
		<CUSTOM><haxe_doc>The source image data is stored in a custom format</haxe_doc></CUSTOM>
		<haxe_doc>An enum containing values for the underlying image type
	represented by an `ImageBuffer`</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="lime.graphics.OpenGLES2RenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLES2RenderContext.hx">
		<from>
			<icast><x path="lime.graphics.OpenGLES3RenderContext"/></icast>
			<icast field="fromGL"><x path="Class"><c path="lime.graphics.opengl.GL"/></x></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><x path="lime.graphics.OpenGLES3RenderContext"/></this>
		<haxe_doc>The `OpenGLES2RenderContext` allows access to OpenGL ES 2.0 features when OpenGL or
	OpenGL ES is the render context type of the `Window`.

	Using an OpenGL ES context on a desktop platform enables support for cross-platform
	code that should run on the majority of desktop and mobile platforms (when using
	hardware acceleration).

	Platforms supporting an OpenGL ES context are compatible with the Lime
	`WebGLRenderContext` if you would prefer to write WebGL-style code, or support web
	browsers with the same code.

	You can convert from `lime.graphics.RenderContext`, `lime.graphics.OpenGLRenderContext`,
	`lime.graphics.OpenGLES3RenderContext`, `lime.graphics.opengl.GL`, and can convert to
	`lime.graphics.WebGLRenderContext` directly if desired:

	```haxe
	var gles2:OpenGLES2RenderContext = window.context;
	var gles2:OpenGLES2RenderContext = gl;
	var gles2:OpenGLES2RenderContext = gles3;
	var gles2:OpenGLES2RenderContext = GL;

	var webgl:WebGLRenderContext = gles2;
	```</haxe_doc>
		<meta>
			<m n=":forward">
				<e>ACTIVE_ATTRIBUTES</e>
				<e>ACTIVE_TEXTURE</e>
				<e>ACTIVE_UNIFORMS</e>
				<e>ALIASED_LINE_WIDTH_RANGE</e>
				<e>ALIASED_POINT_SIZE_RANGE</e>
				<e>ALPHA</e>
				<e>ALPHA_BITS</e>
				<e>ALWAYS</e>
				<e>ARRAY_BUFFER</e>
				<e>ARRAY_BUFFER_BINDING</e>
				<e>ATTACHED_SHADERS</e>
				<e>BACK</e>
				<e>BLEND</e>
				<e>BLEND_COLOR</e>
				<e>BLEND_DST_ALPHA</e>
				<e>BLEND_DST_RGB</e>
				<e>BLEND_EQUATION</e>
				<e>BLEND_EQUATION_ALPHA</e>
				<e>BLEND_EQUATION_RGB</e>
				<e>BLEND_SRC_ALPHA</e>
				<e>BLEND_SRC_RGB</e>
				<e>BLUE_BITS</e>
				<e>BOOL</e>
				<e>BOOL_VEC2</e>
				<e>BOOL_VEC3</e>
				<e>BOOL_VEC4</e>
				<e>BROWSER_DEFAULT_WEBGL</e>
				<e>BUFFER_SIZE</e>
				<e>BUFFER_USAGE</e>
				<e>BYTE</e>
				<e>CCW</e>
				<e>CLAMP_TO_EDGE</e>
				<e>COLOR_ATTACHMENT0</e>
				<e>COLOR_BUFFER_BIT</e>
				<e>COLOR_CLEAR_VALUE</e>
				<e>COLOR_WRITEMASK</e>
				<e>COMPILE_STATUS</e>
				<e>COMPRESSED_TEXTURE_FORMATS</e>
				<e>CONSTANT_ALPHA</e>
				<e>CONSTANT_COLOR</e>
				<e>CULL_FACE</e>
				<e>CULL_FACE_MODE</e>
				<e>CURRENT_PROGRAM</e>
				<e>CURRENT_VERTEX_ATTRIB</e>
				<e>CW</e>
				<e>DECR</e>
				<e>DECR_WRAP</e>
				<e>DELETE_STATUS</e>
				<e>DEPTH_ATTACHMENT</e>
				<e>DEPTH_BITS</e>
				<e>DEPTH_BUFFER_BIT</e>
				<e>DEPTH_CLEAR_VALUE</e>
				<e>DEPTH_COMPONENT</e>
				<e>DEPTH_COMPONENT16</e>
				<e>DEPTH_FUNC</e>
				<e>DEPTH_RANGE</e>
				<e>DEPTH_STENCIL</e>
				<e>DEPTH_STENCIL_ATTACHMENT</e>
				<e>DEPTH_TEST</e>
				<e>DEPTH_WRITEMASK</e>
				<e>DITHER</e>
				<e>DONT_CARE</e>
				<e>DST_ALPHA</e>
				<e>DST_COLOR</e>
				<e>DYNAMIC_DRAW</e>
				<e>ELEMENT_ARRAY_BUFFER</e>
				<e>ELEMENT_ARRAY_BUFFER_BINDING</e>
				<e>EQUAL</e>
				<e>FASTEST</e>
				<e>FLOAT</e>
				<e>FLOAT_MAT2</e>
				<e>FLOAT_MAT3</e>
				<e>FLOAT_MAT4</e>
				<e>FLOAT_VEC2</e>
				<e>FLOAT_VEC3</e>
				<e>FLOAT_VEC4</e>
				<e>FRAGMENT_SHADER</e>
				<e>FRAMEBUFFER</e>
				<e>FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</e>
				<e>FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</e>
				<e>FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</e>
				<e>FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</e>
				<e>FRAMEBUFFER_BINDING</e>
				<e>FRAMEBUFFER_COMPLETE</e>
				<e>FRAMEBUFFER_INCOMPLETE_ATTACHMENT</e>
				<e>FRAMEBUFFER_INCOMPLETE_DIMENSIONS</e>
				<e>FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</e>
				<e>FRAMEBUFFER_UNSUPPORTED</e>
				<e>FRONT</e>
				<e>FRONT_AND_BACK</e>
				<e>FRONT_FACE</e>
				<e>FUNC_ADD</e>
				<e>FUNC_REVERSE_SUBTRACT</e>
				<e>FUNC_SUBTRACT</e>
				<e>GENERATE_MIPMAP_HINT</e>
				<e>GEQUAL</e>
				<e>GREATER</e>
				<e>GREEN_BITS</e>
				<e>HIGH_FLOAT</e>
				<e>HIGH_INT</e>
				<e>INCR</e>
				<e>INCR_WRAP</e>
				<e>INT</e>
				<e>INT_VEC2</e>
				<e>INT_VEC3</e>
				<e>INT_VEC4</e>
				<e>INVALID_ENUM</e>
				<e>INVALID_FRAMEBUFFER_OPERATION</e>
				<e>INVALID_OPERATION</e>
				<e>INVALID_VALUE</e>
				<e>INVERT</e>
				<e>KEEP</e>
				<e>LEQUAL</e>
				<e>LESS</e>
				<e>LINEAR</e>
				<e>LINEAR_MIPMAP_LINEAR</e>
				<e>LINEAR_MIPMAP_NEAREST</e>
				<e>LINES</e>
				<e>LINE_LOOP</e>
				<e>LINE_STRIP</e>
				<e>LINE_WIDTH</e>
				<e>LINK_STATUS</e>
				<e>LOW_FLOAT</e>
				<e>LOW_INT</e>
				<e>LUMINANCE</e>
				<e>LUMINANCE_ALPHA</e>
				<e>MAX_COMBINED_TEXTURE_IMAGE_UNITS</e>
				<e>MAX_CUBE_MAP_TEXTURE_SIZE</e>
				<e>MAX_FRAGMENT_UNIFORM_VECTORS</e>
				<e>MAX_RENDERBUFFER_SIZE</e>
				<e>MAX_TEXTURE_IMAGE_UNITS</e>
				<e>MAX_TEXTURE_SIZE</e>
				<e>MAX_VARYING_VECTORS</e>
				<e>MAX_VERTEX_ATTRIBS</e>
				<e>MAX_VERTEX_TEXTURE_IMAGE_UNITS</e>
				<e>MAX_VERTEX_UNIFORM_VECTORS</e>
				<e>MAX_VIEWPORT_DIMS</e>
				<e>MEDIUM_FLOAT</e>
				<e>MEDIUM_INT</e>
				<e>MIRRORED_REPEAT</e>
				<e>NEAREST</e>
				<e>NEAREST_MIPMAP_LINEAR</e>
				<e>NEAREST_MIPMAP_NEAREST</e>
				<e>NEVER</e>
				<e>NICEST</e>
				<e>NONE</e>
				<e>NOTEQUAL</e>
				<e>NO_ERROR</e>
				<e>ONE</e>
				<e>ONE_MINUS_CONSTANT_ALPHA</e>
				<e>ONE_MINUS_CONSTANT_COLOR</e>
				<e>ONE_MINUS_DST_ALPHA</e>
				<e>ONE_MINUS_DST_COLOR</e>
				<e>ONE_MINUS_SRC_ALPHA</e>
				<e>ONE_MINUS_SRC_COLOR</e>
				<e>OUT_OF_MEMORY</e>
				<e>PACK_ALIGNMENT</e>
				<e>POINTS</e>
				<e>POLYGON_OFFSET_FACTOR</e>
				<e>POLYGON_OFFSET_FILL</e>
				<e>POLYGON_OFFSET_UNITS</e>
				<e>RED_BITS</e>
				<e>RENDERBUFFER</e>
				<e>RENDERBUFFER_ALPHA_SIZE</e>
				<e>RENDERBUFFER_BINDING</e>
				<e>RENDERBUFFER_BLUE_SIZE</e>
				<e>RENDERBUFFER_DEPTH_SIZE</e>
				<e>RENDERBUFFER_GREEN_SIZE</e>
				<e>RENDERBUFFER_HEIGHT</e>
				<e>RENDERBUFFER_INTERNAL_FORMAT</e>
				<e>RENDERBUFFER_RED_SIZE</e>
				<e>RENDERBUFFER_STENCIL_SIZE</e>
				<e>RENDERBUFFER_WIDTH</e>
				<e>RENDERER</e>
				<e>REPEAT</e>
				<e>REPLACE</e>
				<e>RGB</e>
				<e>RGB565</e>
				<e>RGB5_A1</e>
				<e>RGBA</e>
				<e>RGBA4</e>
				<e>SAMPLER_2D</e>
				<e>SAMPLER_CUBE</e>
				<e>SAMPLES</e>
				<e>SAMPLE_ALPHA_TO_COVERAGE</e>
				<e>SAMPLE_BUFFERS</e>
				<e>SAMPLE_COVERAGE</e>
				<e>SAMPLE_COVERAGE_INVERT</e>
				<e>SAMPLE_COVERAGE_VALUE</e>
				<e>SCISSOR_BOX</e>
				<e>SCISSOR_TEST</e>
				<e>SHADER_TYPE</e>
				<e>SHADING_LANGUAGE_VERSION</e>
				<e>SHORT</e>
				<e>SRC_ALPHA</e>
				<e>SRC_ALPHA_SATURATE</e>
				<e>SRC_COLOR</e>
				<e>STATIC_DRAW</e>
				<e>STENCIL_ATTACHMENT</e>
				<e>STENCIL_BACK_FAIL</e>
				<e>STENCIL_BACK_FUNC</e>
				<e>STENCIL_BACK_PASS_DEPTH_FAIL</e>
				<e>STENCIL_BACK_PASS_DEPTH_PASS</e>
				<e>STENCIL_BACK_REF</e>
				<e>STENCIL_BACK_VALUE_MASK</e>
				<e>STENCIL_BACK_WRITEMASK</e>
				<e>STENCIL_BITS</e>
				<e>STENCIL_BUFFER_BIT</e>
				<e>STENCIL_CLEAR_VALUE</e>
				<e>STENCIL_FAIL</e>
				<e>STENCIL_FUNC</e>
				<e>STENCIL_INDEX</e>
				<e>STENCIL_INDEX8</e>
				<e>STENCIL_PASS_DEPTH_FAIL</e>
				<e>STENCIL_PASS_DEPTH_PASS</e>
				<e>STENCIL_REF</e>
				<e>STENCIL_TEST</e>
				<e>STENCIL_VALUE_MASK</e>
				<e>STENCIL_WRITEMASK</e>
				<e>STREAM_DRAW</e>
				<e>SUBPIXEL_BITS</e>
				<e>TEXTURE</e>
				<e>TEXTURE0</e>
				<e>TEXTURE1</e>
				<e>TEXTURE10</e>
				<e>TEXTURE11</e>
				<e>TEXTURE12</e>
				<e>TEXTURE13</e>
				<e>TEXTURE14</e>
				<e>TEXTURE15</e>
				<e>TEXTURE16</e>
				<e>TEXTURE17</e>
				<e>TEXTURE18</e>
				<e>TEXTURE19</e>
				<e>TEXTURE2</e>
				<e>TEXTURE20</e>
				<e>TEXTURE21</e>
				<e>TEXTURE22</e>
				<e>TEXTURE23</e>
				<e>TEXTURE24</e>
				<e>TEXTURE25</e>
				<e>TEXTURE26</e>
				<e>TEXTURE27</e>
				<e>TEXTURE28</e>
				<e>TEXTURE29</e>
				<e>TEXTURE3</e>
				<e>TEXTURE30</e>
				<e>TEXTURE31</e>
				<e>TEXTURE4</e>
				<e>TEXTURE5</e>
				<e>TEXTURE6</e>
				<e>TEXTURE7</e>
				<e>TEXTURE8</e>
				<e>TEXTURE9</e>
				<e>TEXTURE_2D</e>
				<e>TEXTURE_BINDING_2D</e>
				<e>TEXTURE_BINDING_CUBE_MAP</e>
				<e>TEXTURE_CUBE_MAP</e>
				<e>TEXTURE_CUBE_MAP_NEGATIVE_X</e>
				<e>TEXTURE_CUBE_MAP_NEGATIVE_Y</e>
				<e>TEXTURE_CUBE_MAP_NEGATIVE_Z</e>
				<e>TEXTURE_CUBE_MAP_POSITIVE_X</e>
				<e>TEXTURE_CUBE_MAP_POSITIVE_Y</e>
				<e>TEXTURE_CUBE_MAP_POSITIVE_Z</e>
				<e>TEXTURE_MAG_FILTER</e>
				<e>TEXTURE_MIN_FILTER</e>
				<e>TEXTURE_WRAP_S</e>
				<e>TEXTURE_WRAP_T</e>
				<e>TRIANGLES</e>
				<e>TRIANGLE_FAN</e>
				<e>TRIANGLE_STRIP</e>
				<e>UNPACK_ALIGNMENT</e>
				<e>UNSIGNED_BYTE</e>
				<e>UNSIGNED_INT</e>
				<e>UNSIGNED_SHORT</e>
				<e>UNSIGNED_SHORT_4_4_4_4</e>
				<e>UNSIGNED_SHORT_5_5_5_1</e>
				<e>UNSIGNED_SHORT_5_6_5</e>
				<e>VALIDATE_STATUS</e>
				<e>VENDOR</e>
				<e>VERSION</e>
				<e>VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</e>
				<e>VERTEX_ATTRIB_ARRAY_ENABLED</e>
				<e>VERTEX_ATTRIB_ARRAY_NORMALIZED</e>
				<e>VERTEX_ATTRIB_ARRAY_POINTER</e>
				<e>VERTEX_ATTRIB_ARRAY_SIZE</e>
				<e>VERTEX_ATTRIB_ARRAY_STRIDE</e>
				<e>VERTEX_ATTRIB_ARRAY_TYPE</e>
				<e>VERTEX_SHADER</e>
				<e>VIEWPORT</e>
				<e>ZERO</e>
				<e>activeTexture</e>
				<e>attachShader</e>
				<e>bindAttribLocation</e>
				<e>bindBuffer</e>
				<e>bindFramebuffer</e>
				<e>bindTexture</e>
				<e>blendColor</e>
				<e>blendEquation</e>
				<e>blendEquationSeparate</e>
				<e>blendFunc</e>
				<e>blendFuncSeparate</e>
				<e>bufferData</e>
				<e>bufferSubData</e>
				<e>checkFramebufferStatus</e>
				<e>clear</e>
				<e>clearColor</e>
				<e>clearDepthf</e>
				<e>clearStencil</e>
				<e>colorMask</e>
				<e>compileShader</e>
				<e>compressedTexImage2D</e>
				<e>compressedTexSubImage2D</e>
				<e>copyTexImage2D</e>
				<e>copyTexSubImage2D</e>
				<e>createBuffer</e>
				<e>createFramebuffer</e>
				<e>createProgram</e>
				<e>createRenderbuffer</e>
				<e>createShader</e>
				<e>createTexture</e>
				<e>cullFace</e>
				<e>deleteBuffer</e>
				<e>deleteFramebuffer</e>
				<e>deleteProgram</e>
				<e>deleteRenderbuffer</e>
				<e>deleteShader</e>
				<e>deleteTexture</e>
				<e>depthFunc</e>
				<e>depthMask</e>
				<e>depthRangef</e>
				<e>detachShader</e>
				<e>disable</e>
				<e>disableVertexAttribArray</e>
				<e>drawArrays</e>
				<e>drawElements</e>
				<e>enable</e>
				<e>enableVertexAttribArray</e>
				<e>finish</e>
				<e>flush</e>
				<e>framebufferRenderbuffer</e>
				<e>framebufferTexture2D</e>
				<e>frontFace</e>
				<e>genBuffers</e>
				<e>generateMipmap</e>
				<e>genFramebuffers</e>
				<e>genRenderbuffers</e>
				<e>genTextures</e>
				<e>getActiveAttrib</e>
				<e>getActiveUniform</e>
				<e>getAttachedShaders</e>
				<e>getAttribLocation</e>
				<e>getBoolean</e>
				<e>getBooleanv</e>
				<e>getBufferParameteri</e>
				<e>getBufferParameteriv</e>
				<e>getError</e>
				<e>getFloat</e>
				<e>getFloatv</e>
				<e>getFramebufferAttachmentParameteri</e>
				<e>getFramebufferAttachmentParameteriv</e>
				<e>getInteger</e>
				<e>getIntegerv</e>
				<e>getProgramInfoLog</e>
				<e>getProgrami</e>
				<e>getProgramiv</e>
				<e>getRenderbufferParameteri</e>
				<e>getRenderbufferParameteriv</e>
				<e>getShaderi</e>
				<e>getShaderInfoLog</e>
				<e>getShaderiv</e>
				<e>getShaderPrecisionFormat</e>
				<e>getShaderSource</e>
				<e>getString</e>
				<e>getTexParameterf</e>
				<e>getTexParameterfv</e>
				<e>getTexParameteri</e>
				<e>getTexParameteriv</e>
				<e>getUniform</e>
				<e>getUniformLocation</e>
				<e>getVertexAttribf</e>
				<e>getVertexAttribfv</e>
				<e>getVertexAttribi</e>
				<e>getVertexAttribiv</e>
				<e>getVertexAttribPointerv</e>
				<e>hint</e>
				<e>isBuffer</e>
				<e>isEnabled</e>
				<e>isFramebuffer</e>
				<e>isProgram</e>
				<e>isRenderbuffer</e>
				<e>isShader</e>
				<e>isTexture</e>
				<e>lineWidth</e>
				<e>linkProgram</e>
				<e>pixelStorei</e>
				<e>polygonOffset</e>
				<e>readPixels</e>
				<e>releaseShaderCompiler</e>
				<e>renderbufferStorage</e>
				<e>sampleCoverage</e>
				<e>scissor</e>
				<e>shaderBinary</e>
				<e>shaderSource</e>
				<e>stencilFunc</e>
				<e>stencilFuncSeparate</e>
				<e>stencilMask</e>
				<e>stencilMaskSeparate</e>
				<e>stencilOp</e>
				<e>stencilOpSeparate</e>
				<e>texImage2D</e>
				<e>texParameterf</e>
				<e>texParameteri</e>
				<e>texSubImage2D</e>
				<e>uniform1f</e>
				<e>uniform1fv</e>
				<e>uniform1i</e>
				<e>uniform1iv</e>
				<e>uniform2f</e>
				<e>uniform2fv</e>
				<e>uniform2i</e>
				<e>uniform2iv</e>
				<e>uniform3f</e>
				<e>uniform3fv</e>
				<e>uniform3i</e>
				<e>uniform3iv</e>
				<e>uniform4f</e>
				<e>uniform4fv</e>
				<e>uniform4i</e>
				<e>uniform4iv</e>
				<e>uniformMatrix2fv</e>
				<e>uniformMatrix3fv</e>
				<e>uniformMatrix4fv</e>
				<e>useProgram</e>
				<e>validateProgram</e>
				<e>vertexAttrib1f</e>
				<e>vertexAttrib1fv</e>
				<e>vertexAttrib2f</e>
				<e>vertexAttrib2fv</e>
				<e>vertexAttrib3f</e>
				<e>vertexAttrib3fv</e>
				<e>vertexAttrib4f</e>
				<e>vertexAttrib4fv</e>
				<e>vertexAttribPointer</e>
				<e>viewport</e>
				<e>EXTENSIONS</e>
				<e>type</e>
				<e>version</e>
			</m>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLES2RenderContext.hx" private="1" module="lime.graphics.OpenGLES2RenderContext" final="1">
	<fromGL set="method" line="86" static="1">
		<f a="gl">
			<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
			<x path="lime.graphics.OpenGLES2RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromGL>
	<fromRenderContext set="method" line="91" static="1">
		<f a="context">
			<c path="lime.graphics.RenderContext"/>
			<x path="lime.graphics.OpenGLES2RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRenderContext>
</class></impl>
	</abstract>
	<class path="lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLES2RenderContext.hx" private="1" module="lime.graphics.OpenGLES2RenderContext" final="1">
		<fromGL set="method" line="86" static="1">
			<f a="gl">
				<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
				<x path="lime.graphics.OpenGLES2RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromGL>
		<fromRenderContext set="method" line="91" static="1">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="lime.graphics.OpenGLES2RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRenderContext>
	</class>
	<abstract path="lime.graphics.OpenGLES3RenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLES3RenderContext.hx">
		<from>
			<icast><d/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
			<icast field="fromGL"><x path="Class"><c path="lime.graphics.opengl.GL"/></x></icast>
			<icast field="fromOpenGLES2RenderContext"><x path="lime.graphics.OpenGLES2RenderContext"/></icast>
			<icast field="fromWebGLRenderContext"><x path="lime.graphics.WebGLRenderContext"/></icast>
			<icast field="fromWebGL2RenderContext"><x path="lime.graphics.WebGL2RenderContext"/></icast>
		</from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLES3RenderContext.hx" private="1" module="lime.graphics.OpenGLES3RenderContext" final="1">
	<fromRenderContext set="method" line="4874" static="1">
		<f a="context">
			<c path="lime.graphics.RenderContext"/>
			<x path="lime.graphics.OpenGLES3RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRenderContext>
	<fromGL set="method" line="4879" static="1">
		<f a="gl">
			<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
			<x path="lime.graphics.OpenGLES3RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromGL>
	<fromOpenGLES2RenderContext set="method" line="4884" static="1">
		<f a="context">
			<x path="lime.graphics.OpenGLES2RenderContext"/>
			<x path="lime.graphics.OpenGLES3RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromOpenGLES2RenderContext>
	<fromWebGLRenderContext set="method" line="4889" static="1">
		<f a="context">
			<x path="lime.graphics.WebGLRenderContext"/>
			<x path="lime.graphics.OpenGLES3RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromWebGLRenderContext>
	<fromWebGL2RenderContext set="method" line="4894" static="1">
		<f a="context">
			<x path="lime.graphics.WebGL2RenderContext"/>
			<x path="lime.graphics.OpenGLES3RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromWebGL2RenderContext>
</class></impl>
	</abstract>
	<class path="lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLES3RenderContext.hx" private="1" module="lime.graphics.OpenGLES3RenderContext" final="1">
		<fromRenderContext set="method" line="4874" static="1">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="lime.graphics.OpenGLES3RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRenderContext>
		<fromGL set="method" line="4879" static="1">
			<f a="gl">
				<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
				<x path="lime.graphics.OpenGLES3RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromGL>
		<fromOpenGLES2RenderContext set="method" line="4884" static="1">
			<f a="context">
				<x path="lime.graphics.OpenGLES2RenderContext"/>
				<x path="lime.graphics.OpenGLES3RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromOpenGLES2RenderContext>
		<fromWebGLRenderContext set="method" line="4889" static="1">
			<f a="context">
				<x path="lime.graphics.WebGLRenderContext"/>
				<x path="lime.graphics.OpenGLES3RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromWebGLRenderContext>
		<fromWebGL2RenderContext set="method" line="4894" static="1">
			<f a="context">
				<x path="lime.graphics.WebGL2RenderContext"/>
				<x path="lime.graphics.OpenGLES3RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromWebGL2RenderContext>
	</class>
	<abstract path="lime.graphics.OpenGLRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLRenderContext.hx">
		<from>
			<icast><d/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLRenderContext.hx" private="1" module="lime.graphics.OpenGLRenderContext" final="1"><fromRenderContext set="method" line="50" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.OpenGLRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class></impl>
	</abstract>
	<class path="lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/OpenGLRenderContext.hx" private="1" module="lime.graphics.OpenGLRenderContext" final="1"><fromRenderContext set="method" line="50" static="1">
	<f a="context">
		<c path="lime.graphics.RenderContext"/>
		<x path="lime.graphics.OpenGLRenderContext"/>
	</f>
	<meta><m n=":from"/></meta>
</fromRenderContext></class>
	<abstract path="lime.graphics.PixelFormat" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/PixelFormat.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<haxe_doc>An enum containing different pixel encoding formats for image data</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics._PixelFormat.PixelFormat_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/PixelFormat.hx" private="1" module="lime.graphics.PixelFormat" extern="1" final="1">
	<RGBA32 public="1" get="inline" set="null" expr="cast 0" line="11" static="1">
		<x path="lime.graphics.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>An image encoded in 32-bit RGBA color order</haxe_doc>
	</RGBA32>
	<ARGB32 public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
		<x path="lime.graphics.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>An image encoded in 32-bit ARGB color order</haxe_doc>
	</ARGB32>
	<BGRA32 public="1" get="inline" set="null" expr="cast 2" line="21" static="1">
		<x path="lime.graphics.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>An image encoded in 32-bit BGRA color order</haxe_doc>
	</BGRA32>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics._PixelFormat.PixelFormat_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/PixelFormat.hx" private="1" module="lime.graphics.PixelFormat" extern="1" final="1">
		<RGBA32 public="1" get="inline" set="null" expr="cast 0" line="11" static="1">
			<x path="lime.graphics.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>An image encoded in 32-bit RGBA color order</haxe_doc>
		</RGBA32>
		<ARGB32 public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
			<x path="lime.graphics.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>An image encoded in 32-bit ARGB color order</haxe_doc>
		</ARGB32>
		<BGRA32 public="1" get="inline" set="null" expr="cast 2" line="21" static="1">
			<x path="lime.graphics.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>An image encoded in 32-bit BGRA color order</haxe_doc>
		</BGRA32>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.graphics.RenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/RenderContext.hx">
		<attributes public="1" set="null">
			<t path="lime.graphics.RenderContextAttributes"/>
			<haxe_doc>Additional information about the current context</haxe_doc>
		</attributes>
		<cairo public="1" set="null">
			<x path="lime.graphics.CairoRenderContext"/>
			<haxe_doc>Access to the current Cairo render context, if available</haxe_doc>
		</cairo>
		<canvas2D public="1" set="null">
			<x path="lime.graphics.Canvas2DRenderContext"/>
			<haxe_doc>Access to the current HTML5 canvas render context, if available</haxe_doc>
		</canvas2D>
		<dom public="1" set="null">
			<x path="lime.graphics.DOMRenderContext"/>
			<haxe_doc>Access to the current HTML5 DOM render context, if available</haxe_doc>
		</dom>
		<flash public="1" set="null">
			<x path="lime.graphics.FlashRenderContext"/>
			<haxe_doc>Access to the current Flash render context, if available</haxe_doc>
		</flash>
		<gl public="1" set="null">
			<x path="lime.graphics.OpenGLRenderContext"/>
			<haxe_doc>Access to the current OpenGL render API, if available</haxe_doc>
		</gl>
		<gles2 public="1" set="null">
			<x path="lime.graphics.OpenGLES2RenderContext"/>
			<haxe_doc>Access to the current OpenGL ES 2.0 render API, if available</haxe_doc>
		</gles2>
		<gles3 public="1" set="null">
			<x path="lime.graphics.OpenGLES3RenderContext"/>
			<haxe_doc>Access to the current OpenGL ES 3.0 render API, if available</haxe_doc>
		</gles3>
		<type public="1" set="null">
			<x path="lime.graphics.RenderContextType"/>
			<haxe_doc>The type of the current `RenderContext`</haxe_doc>
		</type>
		<version public="1" set="null"><c path="String"/></version>
		<webgl public="1" set="null">
			<x path="lime.graphics.WebGLRenderContext"/>
			<haxe_doc>Access to the current WebGL render API, if available</haxe_doc>
		</webgl>
		<webgl2 public="1" set="null">
			<x path="lime.graphics.WebGL2RenderContext"/>
			<haxe_doc>Access to the current WebGL 2 render API, if available</haxe_doc>
		</webgl2>
		<window public="1" set="null"><c path="lime.ui.Window"/></window>
		<new set="method" line="91">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<haxe_doc>The `RenderContext` provides access to rendering for a Lime `Window`.

	Only one render context type is used at once, but when `OPENGL` or
	`OPENGLES` is the context type, compatibility contexts for other
	forms of GL (such as WebGL) may be available also.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="lime.graphics.RenderContextAttributes" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/RenderContextAttributes.hx">
		<a>
			<vsync>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether vertical-sync (VSync) is enabled</haxe_doc>
			</vsync>
			<version>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</version>
			<type>
				<x path="Null"><x path="lime.graphics.RenderContextType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of render context requested</haxe_doc>
			</type>
			<stencil>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether a stencil buffer is enabled</haxe_doc>
			</stencil>
			<hardware>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether hardware acceleration is allowed</haxe_doc>
			</hardware>
			<depth>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether a depth buffer is enabled</haxe_doc>
			</depth>
			<colorDepth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The color depth of the rendering context in bits</haxe_doc>
			</colorDepth>
			<background>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional `background` property to be provided to rendering,
		a value of `null` means no background color.</haxe_doc>
			</background>
			<antialiasing>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether to enable anti-aliasing, `0` is disabled, `2` enables
		2x2 anti-aliasing or `4` enables 4x4 anti-aliasing.</haxe_doc>
			</antialiasing>
		</a>
		<haxe_doc>Additional options possible for a render context</haxe_doc>
	</typedef>
	<abstract path="lime.graphics.RenderContextType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/RenderContextType.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>An enum for possible render context types</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics._RenderContextType.RenderContextType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/RenderContextType.hx" private="1" module="lime.graphics.RenderContextType" extern="1" final="1">
	<CAIRO public="1" get="inline" set="null" expr="cast &quot;cairo&quot;" line="11" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "cairo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes a Cairo render context</haxe_doc>
	</CAIRO>
	<CANVAS public="1" get="inline" set="null" expr="cast &quot;canvas&quot;" line="16" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "canvas"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes an HTML5 canvas render context</haxe_doc>
	</CANVAS>
	<DOM public="1" get="inline" set="null" expr="cast &quot;dom&quot;" line="21" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "dom"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes an HTML5 DOM render context</haxe_doc>
	</DOM>
	<FLASH public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="26" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes a Flash render context</haxe_doc>
	</FLASH>
	<OPENGL public="1" get="inline" set="null" expr="cast &quot;opengl&quot;" line="31" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "opengl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes an OpenGL render context</haxe_doc>
	</OPENGL>
	<OPENGLES public="1" get="inline" set="null" expr="cast &quot;opengles&quot;" line="36" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "opengles"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes an OpenGL ES render context</haxe_doc>
	</OPENGLES>
	<WEBGL public="1" get="inline" set="null" expr="cast &quot;webgl&quot;" line="41" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "webgl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes a WebGL render context</haxe_doc>
	</WEBGL>
	<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="46" static="1">
		<x path="lime.graphics.RenderContextType"/>
		<meta>
			<m n=":value"><e>cast "custom"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Describes a custom render context</haxe_doc>
	</CUSTOM>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics._RenderContextType.RenderContextType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/RenderContextType.hx" private="1" module="lime.graphics.RenderContextType" extern="1" final="1">
		<CAIRO public="1" get="inline" set="null" expr="cast &quot;cairo&quot;" line="11" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "cairo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes a Cairo render context</haxe_doc>
		</CAIRO>
		<CANVAS public="1" get="inline" set="null" expr="cast &quot;canvas&quot;" line="16" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "canvas"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes an HTML5 canvas render context</haxe_doc>
		</CANVAS>
		<DOM public="1" get="inline" set="null" expr="cast &quot;dom&quot;" line="21" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "dom"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes an HTML5 DOM render context</haxe_doc>
		</DOM>
		<FLASH public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="26" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes a Flash render context</haxe_doc>
		</FLASH>
		<OPENGL public="1" get="inline" set="null" expr="cast &quot;opengl&quot;" line="31" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "opengl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes an OpenGL render context</haxe_doc>
		</OPENGL>
		<OPENGLES public="1" get="inline" set="null" expr="cast &quot;opengles&quot;" line="36" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "opengles"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes an OpenGL ES render context</haxe_doc>
		</OPENGLES>
		<WEBGL public="1" get="inline" set="null" expr="cast &quot;webgl&quot;" line="41" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "webgl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes a WebGL render context</haxe_doc>
		</WEBGL>
		<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="46" static="1">
			<x path="lime.graphics.RenderContextType"/>
			<meta>
				<m n=":value"><e>cast "custom"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Describes a custom render context</haxe_doc>
		</CUSTOM>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.WebGL2RenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/WebGL2RenderContext.hx">
		<from>
			<icast><d/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
			<icast field="fromGL"><x path="Class"><c path="lime.graphics.opengl.GL"/></x></icast>
		</from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<haxe_doc>The `WebGL2RenderContext` allows access to WebGL 2 features when OpenGL, OpenGL ES
	or WebGL is the render context type of the `Window`, and the current context supports
	WebGL 2 features.

	Using a WebGL context on a desktop platform enables support for cross-platform
	code that should run on all platforms (when using hardware acceleration), though support
	for WebGL 2 features are more limited than WebGL, and require an OpenGL ES 3.0 compatible
	desktop or mobile context.

	You can convert from `lime.graphics.RenderContext`, `lime.graphics.OpenGLRenderContext`,
	`lime.graphics.OpenGLES3RenderContext` or `lime.graphics.opengl.GL`, and can convert to
	`lime.graphics.WebGLRenderContext` directly if desired:

	```haxe
	var webgl2:WebGL2RenderContext = window.context;
	var webgl2:WebGL2RenderContext = gl;
	var webgl2:WebGL2RenderContext = gles3;
	var webgl2:WebGL2RenderContext = GL;

	var webgl:WebGLRenderContext = webgl2;
	```</haxe_doc>
		<meta><m n=":access"><e>lime.graphics.RenderContext</e></m></meta>
		<impl><class path="lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/WebGL2RenderContext.hx" private="1" module="lime.graphics.WebGL2RenderContext" final="1">
	<__tempPointer expr="new BytePointer()" line="312" static="1">
		<x path="lime.utils.BytePointer"/>
		<meta><m n=":value"><e>new BytePointer()</e></m></meta>
	</__tempPointer>
	<DEPTH_BUFFER_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_BUFFER_BIT>
	<STENCIL_BUFFER_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BUFFER_BIT>
	<COLOR_BUFFER_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_BUFFER_BIT>
	<POINTS public="1" get="accessor" set="null" static="1"><x path="Int"/></POINTS>
	<LINES public="1" get="accessor" set="null" static="1"><x path="Int"/></LINES>
	<LINE_LOOP public="1" get="accessor" set="null" static="1"><x path="Int"/></LINE_LOOP>
	<LINE_STRIP public="1" get="accessor" set="null" static="1"><x path="Int"/></LINE_STRIP>
	<TRIANGLES public="1" get="accessor" set="null" static="1"><x path="Int"/></TRIANGLES>
	<TRIANGLE_STRIP public="1" get="accessor" set="null" static="1"><x path="Int"/></TRIANGLE_STRIP>
	<TRIANGLE_FAN public="1" get="accessor" set="null" static="1"><x path="Int"/></TRIANGLE_FAN>
	<ZERO public="1" get="accessor" set="null" static="1"><x path="Int"/></ZERO>
	<ONE public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE>
	<SRC_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></SRC_COLOR>
	<ONE_MINUS_SRC_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_SRC_COLOR>
	<SRC_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></SRC_ALPHA>
	<ONE_MINUS_SRC_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_SRC_ALPHA>
	<DST_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></DST_ALPHA>
	<ONE_MINUS_DST_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_DST_ALPHA>
	<DST_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></DST_COLOR>
	<ONE_MINUS_DST_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_DST_COLOR>
	<SRC_ALPHA_SATURATE public="1" get="accessor" set="null" static="1"><x path="Int"/></SRC_ALPHA_SATURATE>
	<FUNC_ADD public="1" get="accessor" set="null" static="1"><x path="Int"/></FUNC_ADD>
	<BLEND_EQUATION public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_EQUATION>
	<BLEND_EQUATION_RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_EQUATION_RGB>
	<BLEND_EQUATION_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_EQUATION_ALPHA>
	<FUNC_SUBTRACT public="1" get="accessor" set="null" static="1"><x path="Int"/></FUNC_SUBTRACT>
	<FUNC_REVERSE_SUBTRACT public="1" get="accessor" set="null" static="1"><x path="Int"/></FUNC_REVERSE_SUBTRACT>
	<BLEND_DST_RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_DST_RGB>
	<BLEND_SRC_RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_SRC_RGB>
	<BLEND_DST_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_DST_ALPHA>
	<BLEND_SRC_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_SRC_ALPHA>
	<CONSTANT_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></CONSTANT_COLOR>
	<ONE_MINUS_CONSTANT_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_COLOR>
	<CONSTANT_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></CONSTANT_ALPHA>
	<ONE_MINUS_CONSTANT_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_ALPHA>
	<BLEND_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_COLOR>
	<ARRAY_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></ARRAY_BUFFER>
	<ELEMENT_ARRAY_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER>
	<ARRAY_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></ARRAY_BUFFER_BINDING>
	<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER_BINDING>
	<STREAM_DRAW public="1" get="accessor" set="null" static="1"><x path="Int"/></STREAM_DRAW>
	<STATIC_DRAW public="1" get="accessor" set="null" static="1"><x path="Int"/></STATIC_DRAW>
	<DYNAMIC_DRAW public="1" get="accessor" set="null" static="1"><x path="Int"/></DYNAMIC_DRAW>
	<BUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></BUFFER_SIZE>
	<BUFFER_USAGE public="1" get="accessor" set="null" static="1"><x path="Int"/></BUFFER_USAGE>
	<CURRENT_VERTEX_ATTRIB public="1" get="accessor" set="null" static="1"><x path="Int"/></CURRENT_VERTEX_ATTRIB>
	<FRONT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRONT>
	<BACK public="1" get="accessor" set="null" static="1"><x path="Int"/></BACK>
	<FRONT_AND_BACK public="1" get="accessor" set="null" static="1"><x path="Int"/></FRONT_AND_BACK>
	<CULL_FACE public="1" get="accessor" set="null" static="1"><x path="Int"/></CULL_FACE>
	<BLEND public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND>
	<DITHER public="1" get="accessor" set="null" static="1"><x path="Int"/></DITHER>
	<STENCIL_TEST public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_TEST>
	<DEPTH_TEST public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_TEST>
	<SCISSOR_TEST public="1" get="accessor" set="null" static="1"><x path="Int"/></SCISSOR_TEST>
	<POLYGON_OFFSET_FILL public="1" get="accessor" set="null" static="1"><x path="Int"/></POLYGON_OFFSET_FILL>
	<SAMPLE_ALPHA_TO_COVERAGE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_ALPHA_TO_COVERAGE>
	<SAMPLE_COVERAGE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_COVERAGE>
	<NO_ERROR public="1" get="accessor" set="null" static="1"><x path="Int"/></NO_ERROR>
	<INVALID_ENUM public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_ENUM>
	<INVALID_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_VALUE>
	<INVALID_OPERATION public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_OPERATION>
	<OUT_OF_MEMORY public="1" get="accessor" set="null" static="1"><x path="Int"/></OUT_OF_MEMORY>
	<CW public="1" get="accessor" set="null" static="1"><x path="Int"/></CW>
	<CCW public="1" get="accessor" set="null" static="1"><x path="Int"/></CCW>
	<LINE_WIDTH public="1" get="accessor" set="null" static="1"><x path="Int"/></LINE_WIDTH>
	<ALIASED_POINT_SIZE_RANGE public="1" get="accessor" set="null" static="1"><x path="Int"/></ALIASED_POINT_SIZE_RANGE>
	<ALIASED_LINE_WIDTH_RANGE public="1" get="accessor" set="null" static="1"><x path="Int"/></ALIASED_LINE_WIDTH_RANGE>
	<CULL_FACE_MODE public="1" get="accessor" set="null" static="1"><x path="Int"/></CULL_FACE_MODE>
	<FRONT_FACE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRONT_FACE>
	<DEPTH_RANGE public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_RANGE>
	<DEPTH_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_WRITEMASK>
	<DEPTH_CLEAR_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_CLEAR_VALUE>
	<DEPTH_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_FUNC>
	<STENCIL_CLEAR_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_CLEAR_VALUE>
	<STENCIL_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_FUNC>
	<STENCIL_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_FAIL>
	<STENCIL_PASS_DEPTH_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_FAIL>
	<STENCIL_PASS_DEPTH_PASS public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_PASS>
	<STENCIL_REF public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_REF>
	<STENCIL_VALUE_MASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_VALUE_MASK>
	<STENCIL_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_WRITEMASK>
	<STENCIL_BACK_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_FUNC>
	<STENCIL_BACK_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_FAIL>
	<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_FAIL>
	<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_PASS>
	<STENCIL_BACK_REF public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_REF>
	<STENCIL_BACK_VALUE_MASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_VALUE_MASK>
	<STENCIL_BACK_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_WRITEMASK>
	<VIEWPORT public="1" get="accessor" set="null" static="1"><x path="Int"/></VIEWPORT>
	<SCISSOR_BOX public="1" get="accessor" set="null" static="1"><x path="Int"/></SCISSOR_BOX>
	<COLOR_CLEAR_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_CLEAR_VALUE>
	<COLOR_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_WRITEMASK>
	<UNPACK_ALIGNMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_ALIGNMENT>
	<PACK_ALIGNMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_ALIGNMENT>
	<MAX_TEXTURE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TEXTURE_SIZE>
	<MAX_VIEWPORT_DIMS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VIEWPORT_DIMS>
	<SUBPIXEL_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></SUBPIXEL_BITS>
	<RED_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></RED_BITS>
	<GREEN_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></GREEN_BITS>
	<BLUE_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></BLUE_BITS>
	<ALPHA_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></ALPHA_BITS>
	<DEPTH_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_BITS>
	<STENCIL_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BITS>
	<POLYGON_OFFSET_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></POLYGON_OFFSET_UNITS>
	<POLYGON_OFFSET_FACTOR public="1" get="accessor" set="null" static="1"><x path="Int"/></POLYGON_OFFSET_FACTOR>
	<TEXTURE_BINDING_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_2D>
	<SAMPLE_BUFFERS public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_BUFFERS>
	<SAMPLES public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLES>
	<SAMPLE_COVERAGE_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_COVERAGE_VALUE>
	<SAMPLE_COVERAGE_INVERT public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_COVERAGE_INVERT>
	<COMPRESSED_TEXTURE_FORMATS public="1" get="accessor" set="null" static="1"><x path="Int"/></COMPRESSED_TEXTURE_FORMATS>
	<DONT_CARE public="1" get="accessor" set="null" static="1"><x path="Int"/></DONT_CARE>
	<FASTEST public="1" get="accessor" set="null" static="1"><x path="Int"/></FASTEST>
	<NICEST public="1" get="accessor" set="null" static="1"><x path="Int"/></NICEST>
	<GENERATE_MIPMAP_HINT public="1" get="accessor" set="null" static="1"><x path="Int"/></GENERATE_MIPMAP_HINT>
	<BYTE public="1" get="accessor" set="null" static="1"><x path="Int"/></BYTE>
	<UNSIGNED_BYTE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_BYTE>
	<SHORT public="1" get="accessor" set="null" static="1"><x path="Int"/></SHORT>
	<UNSIGNED_SHORT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT>
	<INT public="1" get="accessor" set="null" static="1"><x path="Int"/></INT>
	<UNSIGNED_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT>
	<FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT>
	<DEPTH_COMPONENT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT>
	<ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ALPHA>
	<RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB>
	<RGBA public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA>
	<LUMINANCE public="1" get="accessor" set="null" static="1"><x path="Int"/></LUMINANCE>
	<LUMINANCE_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></LUMINANCE_ALPHA>
	<UNSIGNED_SHORT_4_4_4_4 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT_4_4_4_4>
	<UNSIGNED_SHORT_5_5_5_1 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT_5_5_5_1>
	<UNSIGNED_SHORT_5_6_5 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT_5_6_5>
	<FRAGMENT_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAGMENT_SHADER>
	<VERTEX_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_SHADER>
	<MAX_VERTEX_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_ATTRIBS>
	<MAX_VERTEX_UNIFORM_VECTORS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_VECTORS>
	<MAX_VARYING_VECTORS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VARYING_VECTORS>
	<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_TEXTURE_IMAGE_UNITS>
	<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_TEXTURE_IMAGE_UNITS>
	<MAX_TEXTURE_IMAGE_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TEXTURE_IMAGE_UNITS>
	<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_VECTORS>
	<SHADER_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></SHADER_TYPE>
	<DELETE_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></DELETE_STATUS>
	<LINK_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></LINK_STATUS>
	<VALIDATE_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></VALIDATE_STATUS>
	<ATTACHED_SHADERS public="1" get="accessor" set="null" static="1"><x path="Int"/></ATTACHED_SHADERS>
	<ACTIVE_UNIFORMS public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_UNIFORMS>
	<ACTIVE_ATTRIBUTES public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_ATTRIBUTES>
	<SHADING_LANGUAGE_VERSION public="1" get="accessor" set="null" static="1"><x path="Int"/></SHADING_LANGUAGE_VERSION>
	<CURRENT_PROGRAM public="1" get="accessor" set="null" static="1"><x path="Int"/></CURRENT_PROGRAM>
	<NEVER public="1" get="accessor" set="null" static="1"><x path="Int"/></NEVER>
	<LESS public="1" get="accessor" set="null" static="1"><x path="Int"/></LESS>
	<EQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></EQUAL>
	<LEQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></LEQUAL>
	<GREATER public="1" get="accessor" set="null" static="1"><x path="Int"/></GREATER>
	<NOTEQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></NOTEQUAL>
	<GEQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></GEQUAL>
	<ALWAYS public="1" get="accessor" set="null" static="1"><x path="Int"/></ALWAYS>
	<KEEP public="1" get="accessor" set="null" static="1"><x path="Int"/></KEEP>
	<REPLACE public="1" get="accessor" set="null" static="1"><x path="Int"/></REPLACE>
	<INCR public="1" get="accessor" set="null" static="1"><x path="Int"/></INCR>
	<DECR public="1" get="accessor" set="null" static="1"><x path="Int"/></DECR>
	<INVERT public="1" get="accessor" set="null" static="1"><x path="Int"/></INVERT>
	<INCR_WRAP public="1" get="accessor" set="null" static="1"><x path="Int"/></INCR_WRAP>
	<DECR_WRAP public="1" get="accessor" set="null" static="1"><x path="Int"/></DECR_WRAP>
	<VENDOR public="1" get="accessor" set="null" static="1"><x path="Int"/></VENDOR>
	<RENDERER public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERER>
	<VERSION public="1" get="accessor" set="null" static="1"><x path="Int"/></VERSION>
	<NEAREST public="1" get="accessor" set="null" static="1"><x path="Int"/></NEAREST>
	<LINEAR public="1" get="accessor" set="null" static="1"><x path="Int"/></LINEAR>
	<NEAREST_MIPMAP_NEAREST public="1" get="accessor" set="null" static="1"><x path="Int"/></NEAREST_MIPMAP_NEAREST>
	<LINEAR_MIPMAP_NEAREST public="1" get="accessor" set="null" static="1"><x path="Int"/></LINEAR_MIPMAP_NEAREST>
	<NEAREST_MIPMAP_LINEAR public="1" get="accessor" set="null" static="1"><x path="Int"/></NEAREST_MIPMAP_LINEAR>
	<LINEAR_MIPMAP_LINEAR public="1" get="accessor" set="null" static="1"><x path="Int"/></LINEAR_MIPMAP_LINEAR>
	<TEXTURE_MAG_FILTER public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MAG_FILTER>
	<TEXTURE_MIN_FILTER public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MIN_FILTER>
	<TEXTURE_WRAP_S public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_WRAP_S>
	<TEXTURE_WRAP_T public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_WRAP_T>
	<TEXTURE_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_2D>
	<TEXTURE public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE>
	<TEXTURE_CUBE_MAP public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP>
	<TEXTURE_BINDING_CUBE_MAP public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_CUBE_MAP>
	<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_X>
	<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_X>
	<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Y>
	<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Y>
	<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Z>
	<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Z>
	<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_CUBE_MAP_TEXTURE_SIZE>
	<TEXTURE0 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE0>
	<TEXTURE1 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE1>
	<TEXTURE2 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE2>
	<TEXTURE3 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE3>
	<TEXTURE4 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE4>
	<TEXTURE5 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE5>
	<TEXTURE6 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE6>
	<TEXTURE7 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE7>
	<TEXTURE8 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE8>
	<TEXTURE9 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE9>
	<TEXTURE10 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE10>
	<TEXTURE11 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE11>
	<TEXTURE12 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE12>
	<TEXTURE13 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE13>
	<TEXTURE14 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE14>
	<TEXTURE15 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE15>
	<TEXTURE16 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE16>
	<TEXTURE17 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE17>
	<TEXTURE18 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE18>
	<TEXTURE19 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE19>
	<TEXTURE20 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE20>
	<TEXTURE21 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE21>
	<TEXTURE22 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE22>
	<TEXTURE23 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE23>
	<TEXTURE24 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE24>
	<TEXTURE25 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE25>
	<TEXTURE26 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE26>
	<TEXTURE27 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE27>
	<TEXTURE28 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE28>
	<TEXTURE29 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE29>
	<TEXTURE30 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE30>
	<TEXTURE31 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE31>
	<ACTIVE_TEXTURE public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_TEXTURE>
	<REPEAT public="1" get="accessor" set="null" static="1"><x path="Int"/></REPEAT>
	<CLAMP_TO_EDGE public="1" get="accessor" set="null" static="1"><x path="Int"/></CLAMP_TO_EDGE>
	<MIRRORED_REPEAT public="1" get="accessor" set="null" static="1"><x path="Int"/></MIRRORED_REPEAT>
	<FLOAT_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_VEC2>
	<FLOAT_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_VEC3>
	<FLOAT_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_VEC4>
	<INT_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_VEC2>
	<INT_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_VEC3>
	<INT_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_VEC4>
	<BOOL public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL>
	<BOOL_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL_VEC2>
	<BOOL_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL_VEC3>
	<BOOL_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL_VEC4>
	<FLOAT_MAT2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT2>
	<FLOAT_MAT3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT3>
	<FLOAT_MAT4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT4>
	<SAMPLER_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D>
	<SAMPLER_CUBE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_CUBE>
	<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_ENABLED>
	<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_SIZE>
	<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_STRIDE>
	<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_TYPE>
	<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_NORMALIZED>
	<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_POINTER>
	<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
	<COMPILE_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></COMPILE_STATUS>
	<LOW_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></LOW_FLOAT>
	<MEDIUM_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></MEDIUM_FLOAT>
	<HIGH_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></HIGH_FLOAT>
	<LOW_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></LOW_INT>
	<MEDIUM_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></MEDIUM_INT>
	<HIGH_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></HIGH_INT>
	<FRAMEBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER>
	<RENDERBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER>
	<RGBA4 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA4>
	<RGB5_A1 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB5_A1>
	<RGB565 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB565>
	<DEPTH_COMPONENT16 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT16>
	<STENCIL_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_INDEX>
	<STENCIL_INDEX8 public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_INDEX8>
	<DEPTH_STENCIL public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_STENCIL>
	<RENDERBUFFER_WIDTH public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_WIDTH>
	<RENDERBUFFER_HEIGHT public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_HEIGHT>
	<RENDERBUFFER_INTERNAL_FORMAT public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_INTERNAL_FORMAT>
	<RENDERBUFFER_RED_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_RED_SIZE>
	<RENDERBUFFER_GREEN_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_GREEN_SIZE>
	<RENDERBUFFER_BLUE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_BLUE_SIZE>
	<RENDERBUFFER_ALPHA_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_ALPHA_SIZE>
	<RENDERBUFFER_DEPTH_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_DEPTH_SIZE>
	<RENDERBUFFER_STENCIL_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_STENCIL_SIZE>
	<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
	<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
	<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
	<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
	<COLOR_ATTACHMENT0 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT0>
	<DEPTH_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_ATTACHMENT>
	<STENCIL_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_ATTACHMENT>
	<DEPTH_STENCIL_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_STENCIL_ATTACHMENT>
	<NONE public="1" get="accessor" set="null" static="1"><x path="Int"/></NONE>
	<FRAMEBUFFER_COMPLETE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_COMPLETE>
	<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
	<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
	<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
	<FRAMEBUFFER_UNSUPPORTED public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_UNSUPPORTED>
	<FRAMEBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_BINDING>
	<RENDERBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_BINDING>
	<MAX_RENDERBUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_RENDERBUFFER_SIZE>
	<INVALID_FRAMEBUFFER_OPERATION public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_FRAMEBUFFER_OPERATION>
	<UNPACK_FLIP_Y_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_FLIP_Y_WEBGL>
	<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_PREMULTIPLY_ALPHA_WEBGL>
	<CONTEXT_LOST_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></CONTEXT_LOST_WEBGL>
	<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_COLORSPACE_CONVERSION_WEBGL>
	<BROWSER_DEFAULT_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></BROWSER_DEFAULT_WEBGL>
	<READ_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></READ_BUFFER>
	<UNPACK_ROW_LENGTH public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_ROW_LENGTH>
	<UNPACK_SKIP_ROWS public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_SKIP_ROWS>
	<UNPACK_SKIP_PIXELS public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_SKIP_PIXELS>
	<PACK_ROW_LENGTH public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_ROW_LENGTH>
	<PACK_SKIP_ROWS public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_SKIP_ROWS>
	<PACK_SKIP_PIXELS public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_SKIP_PIXELS>
	<TEXTURE_BINDING_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_3D>
	<UNPACK_SKIP_IMAGES public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_SKIP_IMAGES>
	<UNPACK_IMAGE_HEIGHT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_IMAGE_HEIGHT>
	<MAX_3D_TEXTURE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_3D_TEXTURE_SIZE>
	<MAX_ELEMENTS_VERTICES public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ELEMENTS_VERTICES>
	<MAX_ELEMENTS_INDICES public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ELEMENTS_INDICES>
	<MAX_TEXTURE_LOD_BIAS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TEXTURE_LOD_BIAS>
	<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_COMPONENTS>
	<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_COMPONENTS>
	<MAX_ARRAY_TEXTURE_LAYERS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ARRAY_TEXTURE_LAYERS>
	<MIN_PROGRAM_TEXEL_OFFSET public="1" get="accessor" set="null" static="1"><x path="Int"/></MIN_PROGRAM_TEXEL_OFFSET>
	<MAX_PROGRAM_TEXEL_OFFSET public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_PROGRAM_TEXEL_OFFSET>
	<MAX_VARYING_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VARYING_COMPONENTS>
	<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAGMENT_SHADER_DERIVATIVE_HINT>
	<RASTERIZER_DISCARD public="1" get="accessor" set="null" static="1"><x path="Int"/></RASTERIZER_DISCARD>
	<VERTEX_ARRAY_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ARRAY_BINDING>
	<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_OUTPUT_COMPONENTS>
	<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_INPUT_COMPONENTS>
	<MAX_SERVER_WAIT_TIMEOUT public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_SERVER_WAIT_TIMEOUT>
	<MAX_ELEMENT_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ELEMENT_INDEX>
	<RED public="1" get="accessor" set="null" static="1"><x path="Int"/></RED>
	<RGB8 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8>
	<RGBA8 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8>
	<RGB10_A2 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB10_A2>
	<TEXTURE_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_3D>
	<TEXTURE_WRAP_R public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_WRAP_R>
	<TEXTURE_MIN_LOD public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MIN_LOD>
	<TEXTURE_MAX_LOD public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MAX_LOD>
	<TEXTURE_BASE_LEVEL public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BASE_LEVEL>
	<TEXTURE_MAX_LEVEL public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MAX_LEVEL>
	<TEXTURE_COMPARE_MODE public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_COMPARE_MODE>
	<TEXTURE_COMPARE_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_COMPARE_FUNC>
	<SRGB public="1" get="accessor" set="null" static="1"><x path="Int"/></SRGB>
	<SRGB8 public="1" get="accessor" set="null" static="1"><x path="Int"/></SRGB8>
	<SRGB8_ALPHA8 public="1" get="accessor" set="null" static="1"><x path="Int"/></SRGB8_ALPHA8>
	<COMPARE_REF_TO_TEXTURE public="1" get="accessor" set="null" static="1"><x path="Int"/></COMPARE_REF_TO_TEXTURE>
	<RGBA32F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA32F>
	<RGB32F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB32F>
	<RGBA16F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA16F>
	<RGB16F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB16F>
	<TEXTURE_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_2D_ARRAY>
	<TEXTURE_BINDING_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_2D_ARRAY>
	<R11F_G11F_B10F public="1" get="accessor" set="null" static="1"><x path="Int"/></R11F_G11F_B10F>
	<RGB9_E5 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB9_E5>
	<RGBA32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA32UI>
	<RGB32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB32UI>
	<RGBA16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA16UI>
	<RGB16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB16UI>
	<RGBA8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8UI>
	<RGB8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8UI>
	<RGBA32I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA32I>
	<RGB32I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB32I>
	<RGBA16I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA16I>
	<RGB16I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB16I>
	<RGBA8I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8I>
	<RGB8I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8I>
	<RED_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RED_INTEGER>
	<RGB_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB_INTEGER>
	<RGBA_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA_INTEGER>
	<R8 public="1" get="accessor" set="null" static="1"><x path="Int"/></R8>
	<RG8 public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8>
	<R16F public="1" get="accessor" set="null" static="1"><x path="Int"/></R16F>
	<R32F public="1" get="accessor" set="null" static="1"><x path="Int"/></R32F>
	<RG16F public="1" get="accessor" set="null" static="1"><x path="Int"/></RG16F>
	<RG32F public="1" get="accessor" set="null" static="1"><x path="Int"/></RG32F>
	<R8I public="1" get="accessor" set="null" static="1"><x path="Int"/></R8I>
	<R8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></R8UI>
	<R16I public="1" get="accessor" set="null" static="1"><x path="Int"/></R16I>
	<R16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></R16UI>
	<R32I public="1" get="accessor" set="null" static="1"><x path="Int"/></R32I>
	<R32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></R32UI>
	<RG8I public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8I>
	<RG8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8UI>
	<RG16I public="1" get="accessor" set="null" static="1"><x path="Int"/></RG16I>
	<RG16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RG16UI>
	<RG32I public="1" get="accessor" set="null" static="1"><x path="Int"/></RG32I>
	<RG32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RG32UI>
	<R8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></R8_SNORM>
	<RG8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8_SNORM>
	<RGB8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8_SNORM>
	<RGBA8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8_SNORM>
	<RGB10_A2UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB10_A2UI>
	<TEXTURE_IMMUTABLE_FORMAT public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_IMMUTABLE_FORMAT>
	<TEXTURE_IMMUTABLE_LEVELS public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_IMMUTABLE_LEVELS>
	<UNSIGNED_INT_2_10_10_10_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_2_10_10_10_REV>
	<UNSIGNED_INT_10F_11F_11F_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_10F_11F_11F_REV>
	<UNSIGNED_INT_5_9_9_9_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_5_9_9_9_REV>
	<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_32_UNSIGNED_INT_24_8_REV>
	<UNSIGNED_INT_24_8 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_24_8>
	<HALF_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></HALF_FLOAT>
	<RG public="1" get="accessor" set="null" static="1"><x path="Int"/></RG>
	<RG_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RG_INTEGER>
	<INT_2_10_10_10_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_2_10_10_10_REV>
	<CURRENT_QUERY public="1" get="accessor" set="null" static="1"><x path="Int"/></CURRENT_QUERY>
	<QUERY_RESULT public="1" get="accessor" set="null" static="1"><x path="Int"/></QUERY_RESULT>
	<QUERY_RESULT_AVAILABLE public="1" get="accessor" set="null" static="1"><x path="Int"/></QUERY_RESULT_AVAILABLE>
	<ANY_SAMPLES_PASSED public="1" get="accessor" set="null" static="1"><x path="Int"/></ANY_SAMPLES_PASSED>
	<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="accessor" set="null" static="1"><x path="Int"/></ANY_SAMPLES_PASSED_CONSERVATIVE>
	<MAX_DRAW_BUFFERS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_DRAW_BUFFERS>
	<DRAW_BUFFER0 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER0>
	<DRAW_BUFFER1 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER1>
	<DRAW_BUFFER2 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER2>
	<DRAW_BUFFER3 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER3>
	<DRAW_BUFFER4 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER4>
	<DRAW_BUFFER5 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER5>
	<DRAW_BUFFER6 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER6>
	<DRAW_BUFFER7 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER7>
	<DRAW_BUFFER8 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER8>
	<DRAW_BUFFER9 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER9>
	<DRAW_BUFFER10 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER10>
	<DRAW_BUFFER11 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER11>
	<DRAW_BUFFER12 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER12>
	<DRAW_BUFFER13 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER13>
	<DRAW_BUFFER14 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER14>
	<DRAW_BUFFER15 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER15>
	<MAX_COLOR_ATTACHMENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COLOR_ATTACHMENTS>
	<COLOR_ATTACHMENT1 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT1>
	<COLOR_ATTACHMENT2 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT2>
	<COLOR_ATTACHMENT3 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT3>
	<COLOR_ATTACHMENT4 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT4>
	<COLOR_ATTACHMENT5 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT5>
	<COLOR_ATTACHMENT6 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT6>
	<COLOR_ATTACHMENT7 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT7>
	<COLOR_ATTACHMENT8 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT8>
	<COLOR_ATTACHMENT9 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT9>
	<COLOR_ATTACHMENT10 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT10>
	<COLOR_ATTACHMENT11 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT11>
	<COLOR_ATTACHMENT12 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT12>
	<COLOR_ATTACHMENT13 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT13>
	<COLOR_ATTACHMENT14 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT14>
	<COLOR_ATTACHMENT15 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT15>
	<SAMPLER_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_3D>
	<SAMPLER_2D_SHADOW public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D_SHADOW>
	<SAMPLER_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D_ARRAY>
	<SAMPLER_2D_ARRAY_SHADOW public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D_ARRAY_SHADOW>
	<SAMPLER_CUBE_SHADOW public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_CUBE_SHADOW>
	<INT_SAMPLER_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_2D>
	<INT_SAMPLER_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_3D>
	<INT_SAMPLER_CUBE public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_CUBE>
	<INT_SAMPLER_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_2D_ARRAY>
	<UNSIGNED_INT_SAMPLER_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_2D>
	<UNSIGNED_INT_SAMPLER_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_3D>
	<UNSIGNED_INT_SAMPLER_CUBE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_CUBE>
	<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_2D_ARRAY>
	<MAX_SAMPLES public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_SAMPLES>
	<SAMPLER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_BINDING>
	<PIXEL_PACK_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_PACK_BUFFER>
	<PIXEL_UNPACK_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_UNPACK_BUFFER>
	<PIXEL_PACK_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_PACK_BUFFER_BINDING>
	<PIXEL_UNPACK_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_UNPACK_BUFFER_BINDING>
	<COPY_READ_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_READ_BUFFER>
	<COPY_WRITE_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_WRITE_BUFFER>
	<COPY_READ_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_READ_BUFFER_BINDING>
	<COPY_WRITE_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_WRITE_BUFFER_BINDING>
	<FLOAT_MAT2x3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT2x3>
	<FLOAT_MAT2x4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT2x4>
	<FLOAT_MAT3x2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT3x2>
	<FLOAT_MAT3x4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT3x4>
	<FLOAT_MAT4x2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT4x2>
	<FLOAT_MAT4x3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT4x3>
	<UNSIGNED_INT_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_VEC2>
	<UNSIGNED_INT_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_VEC3>
	<UNSIGNED_INT_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_VEC4>
	<UNSIGNED_NORMALIZED public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_NORMALIZED>
	<SIGNED_NORMALIZED public="1" get="accessor" set="null" static="1"><x path="Int"/></SIGNED_NORMALIZED>
	<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_INTEGER>
	<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_DIVISOR>
	<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_MODE>
	<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
	<TRANSFORM_FEEDBACK_VARYINGS public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_VARYINGS>
	<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_START>
	<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_SIZE>
	<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
	<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
	<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
	<INTERLEAVED_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></INTERLEAVED_ATTRIBS>
	<SEPARATE_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></SEPARATE_ATTRIBS>
	<TRANSFORM_FEEDBACK_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER>
	<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_BINDING>
	<TRANSFORM_FEEDBACK public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK>
	<TRANSFORM_FEEDBACK_PAUSED public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_PAUSED>
	<TRANSFORM_FEEDBACK_ACTIVE public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_ACTIVE>
	<TRANSFORM_FEEDBACK_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BINDING>
	<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
	<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
	<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_RED_SIZE>
	<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
	<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
	<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
	<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
	<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
	<FRAMEBUFFER_DEFAULT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_DEFAULT>
	<DEPTH24_STENCIL8 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH24_STENCIL8>
	<DRAW_FRAMEBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_FRAMEBUFFER_BINDING>
	<READ_FRAMEBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></READ_FRAMEBUFFER>
	<DRAW_FRAMEBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_FRAMEBUFFER>
	<READ_FRAMEBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></READ_FRAMEBUFFER_BINDING>
	<RENDERBUFFER_SAMPLES public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_SAMPLES>
	<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
	<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
	<UNIFORM_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER>
	<UNIFORM_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_BINDING>
	<UNIFORM_BUFFER_START public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_START>
	<UNIFORM_BUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_SIZE>
	<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_BLOCKS>
	<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_BLOCKS>
	<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_UNIFORM_BLOCKS>
	<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_UNIFORM_BUFFER_BINDINGS>
	<MAX_UNIFORM_BLOCK_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_UNIFORM_BLOCK_SIZE>
	<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
	<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
	<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_OFFSET_ALIGNMENT>
	<ACTIVE_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_UNIFORM_BLOCKS>
	<UNIFORM_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_TYPE>
	<UNIFORM_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_SIZE>
	<UNIFORM_BLOCK_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_INDEX>
	<UNIFORM_OFFSET public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_OFFSET>
	<UNIFORM_ARRAY_STRIDE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_ARRAY_STRIDE>
	<UNIFORM_MATRIX_STRIDE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_MATRIX_STRIDE>
	<UNIFORM_IS_ROW_MAJOR public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_IS_ROW_MAJOR>
	<UNIFORM_BLOCK_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_BINDING>
	<UNIFORM_BLOCK_DATA_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_DATA_SIZE>
	<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_ACTIVE_UNIFORMS>
	<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
	<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
	<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
	<OBJECT_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></OBJECT_TYPE>
	<SYNC_CONDITION public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_CONDITION>
	<SYNC_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_STATUS>
	<SYNC_FLAGS public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_FLAGS>
	<SYNC_FENCE public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_FENCE>
	<SYNC_GPU_COMMANDS_COMPLETE public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_GPU_COMMANDS_COMPLETE>
	<UNSIGNALED public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNALED>
	<SIGNALED public="1" get="accessor" set="null" static="1"><x path="Int"/></SIGNALED>
	<ALREADY_SIGNALED public="1" get="accessor" set="null" static="1"><x path="Int"/></ALREADY_SIGNALED>
	<TIMEOUT_EXPIRED public="1" get="accessor" set="null" static="1"><x path="Int"/></TIMEOUT_EXPIRED>
	<CONDITION_SATISFIED public="1" get="accessor" set="null" static="1"><x path="Int"/></CONDITION_SATISFIED>
	<WAIT_FAILED public="1" get="accessor" set="null" static="1"><x path="Int"/></WAIT_FAILED>
	<SYNC_FLUSH_COMMANDS_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_FLUSH_COMMANDS_BIT>
	<COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR>
	<DEPTH public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH>
	<STENCIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL>
	<MIN public="1" get="accessor" set="null" static="1"><x path="Int"/></MIN>
	<MAX public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX>
	<DEPTH_COMPONENT24 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT24>
	<STREAM_READ public="1" get="accessor" set="null" static="1"><x path="Int"/></STREAM_READ>
	<STREAM_COPY public="1" get="accessor" set="null" static="1"><x path="Int"/></STREAM_COPY>
	<STATIC_READ public="1" get="accessor" set="null" static="1"><x path="Int"/></STATIC_READ>
	<STATIC_COPY public="1" get="accessor" set="null" static="1"><x path="Int"/></STATIC_COPY>
	<DYNAMIC_READ public="1" get="accessor" set="null" static="1"><x path="Int"/></DYNAMIC_READ>
	<DYNAMIC_COPY public="1" get="accessor" set="null" static="1"><x path="Int"/></DYNAMIC_COPY>
	<DEPTH_COMPONENT32F public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT32F>
	<DEPTH32F_STENCIL8 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH32F_STENCIL8>
	<INVALID_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_INDEX>
	<TIMEOUT_IGNORED public="1" get="accessor" set="null" static="1"><x path="Int"/></TIMEOUT_IGNORED>
	<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
	<get_DEPTH_BUFFER_BIT get="inline" set="null" line="873" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_BUFFER_BIT>
	<get_STENCIL_BUFFER_BIT get="inline" set="null" line="878" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BUFFER_BIT>
	<get_COLOR_BUFFER_BIT get="inline" set="null" line="883" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_BUFFER_BIT>
	<get_POINTS get="inline" set="null" line="888" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_POINTS>
	<get_LINES get="inline" set="null" line="893" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINES>
	<get_LINE_LOOP get="inline" set="null" line="898" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINE_LOOP>
	<get_LINE_STRIP get="inline" set="null" line="903" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINE_STRIP>
	<get_TRIANGLES get="inline" set="null" line="908" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRIANGLES>
	<get_TRIANGLE_STRIP get="inline" set="null" line="913" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRIANGLE_STRIP>
	<get_TRIANGLE_FAN get="inline" set="null" line="918" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRIANGLE_FAN>
	<get_ZERO get="inline" set="null" line="923" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ZERO>
	<get_ONE get="inline" set="null" line="928" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE>
	<get_SRC_COLOR get="inline" set="null" line="933" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SRC_COLOR>
	<get_ONE_MINUS_SRC_COLOR get="inline" set="null" line="938" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE_MINUS_SRC_COLOR>
	<get_SRC_ALPHA get="inline" set="null" line="943" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SRC_ALPHA>
	<get_ONE_MINUS_SRC_ALPHA get="inline" set="null" line="948" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE_MINUS_SRC_ALPHA>
	<get_DST_ALPHA get="inline" set="null" line="953" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DST_ALPHA>
	<get_ONE_MINUS_DST_ALPHA get="inline" set="null" line="958" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE_MINUS_DST_ALPHA>
	<get_DST_COLOR get="inline" set="null" line="963" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DST_COLOR>
	<get_ONE_MINUS_DST_COLOR get="inline" set="null" line="968" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE_MINUS_DST_COLOR>
	<get_SRC_ALPHA_SATURATE get="inline" set="null" line="973" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SRC_ALPHA_SATURATE>
	<get_FUNC_ADD get="inline" set="null" line="978" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FUNC_ADD>
	<get_BLEND_EQUATION get="inline" set="null" line="983" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_EQUATION>
	<get_BLEND_EQUATION_RGB get="inline" set="null" line="988" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_EQUATION_RGB>
	<get_BLEND_EQUATION_ALPHA get="inline" set="null" line="993" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_EQUATION_ALPHA>
	<get_FUNC_SUBTRACT get="inline" set="null" line="998" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FUNC_SUBTRACT>
	<get_FUNC_REVERSE_SUBTRACT get="inline" set="null" line="1003" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FUNC_REVERSE_SUBTRACT>
	<get_BLEND_DST_RGB get="inline" set="null" line="1008" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_DST_RGB>
	<get_BLEND_SRC_RGB get="inline" set="null" line="1013" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_SRC_RGB>
	<get_BLEND_DST_ALPHA get="inline" set="null" line="1018" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_DST_ALPHA>
	<get_BLEND_SRC_ALPHA get="inline" set="null" line="1023" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_SRC_ALPHA>
	<get_CONSTANT_COLOR get="inline" set="null" line="1028" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CONSTANT_COLOR>
	<get_ONE_MINUS_CONSTANT_COLOR get="inline" set="null" line="1033" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE_MINUS_CONSTANT_COLOR>
	<get_CONSTANT_ALPHA get="inline" set="null" line="1038" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CONSTANT_ALPHA>
	<get_ONE_MINUS_CONSTANT_ALPHA get="inline" set="null" line="1043" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ONE_MINUS_CONSTANT_ALPHA>
	<get_BLEND_COLOR get="inline" set="null" line="1048" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND_COLOR>
	<get_ARRAY_BUFFER get="inline" set="null" line="1053" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ARRAY_BUFFER>
	<get_ELEMENT_ARRAY_BUFFER get="inline" set="null" line="1058" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ELEMENT_ARRAY_BUFFER>
	<get_ARRAY_BUFFER_BINDING get="inline" set="null" line="1063" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ARRAY_BUFFER_BINDING>
	<get_ELEMENT_ARRAY_BUFFER_BINDING get="inline" set="null" line="1068" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ELEMENT_ARRAY_BUFFER_BINDING>
	<get_STREAM_DRAW get="inline" set="null" line="1073" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STREAM_DRAW>
	<get_STATIC_DRAW get="inline" set="null" line="1078" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STATIC_DRAW>
	<get_DYNAMIC_DRAW get="inline" set="null" line="1083" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DYNAMIC_DRAW>
	<get_BUFFER_SIZE get="inline" set="null" line="1088" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BUFFER_SIZE>
	<get_BUFFER_USAGE get="inline" set="null" line="1093" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BUFFER_USAGE>
	<get_CURRENT_VERTEX_ATTRIB get="inline" set="null" line="1098" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CURRENT_VERTEX_ATTRIB>
	<get_FRONT get="inline" set="null" line="1103" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRONT>
	<get_BACK get="inline" set="null" line="1108" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BACK>
	<get_FRONT_AND_BACK get="inline" set="null" line="1113" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRONT_AND_BACK>
	<get_CULL_FACE get="inline" set="null" line="1118" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CULL_FACE>
	<get_BLEND get="inline" set="null" line="1123" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLEND>
	<get_DITHER get="inline" set="null" line="1128" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DITHER>
	<get_STENCIL_TEST get="inline" set="null" line="1133" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_TEST>
	<get_DEPTH_TEST get="inline" set="null" line="1138" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_TEST>
	<get_SCISSOR_TEST get="inline" set="null" line="1143" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SCISSOR_TEST>
	<get_POLYGON_OFFSET_FILL get="inline" set="null" line="1148" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_POLYGON_OFFSET_FILL>
	<get_SAMPLE_ALPHA_TO_COVERAGE get="inline" set="null" line="1153" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLE_ALPHA_TO_COVERAGE>
	<get_SAMPLE_COVERAGE get="inline" set="null" line="1158" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLE_COVERAGE>
	<get_NO_ERROR get="inline" set="null" line="1163" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NO_ERROR>
	<get_INVALID_ENUM get="inline" set="null" line="1168" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INVALID_ENUM>
	<get_INVALID_VALUE get="inline" set="null" line="1173" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INVALID_VALUE>
	<get_INVALID_OPERATION get="inline" set="null" line="1178" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INVALID_OPERATION>
	<get_OUT_OF_MEMORY get="inline" set="null" line="1183" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_OUT_OF_MEMORY>
	<get_CW get="inline" set="null" line="1188" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CW>
	<get_CCW get="inline" set="null" line="1193" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CCW>
	<get_LINE_WIDTH get="inline" set="null" line="1198" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINE_WIDTH>
	<get_ALIASED_POINT_SIZE_RANGE get="inline" set="null" line="1203" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ALIASED_POINT_SIZE_RANGE>
	<get_ALIASED_LINE_WIDTH_RANGE get="inline" set="null" line="1208" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ALIASED_LINE_WIDTH_RANGE>
	<get_CULL_FACE_MODE get="inline" set="null" line="1213" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CULL_FACE_MODE>
	<get_FRONT_FACE get="inline" set="null" line="1218" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRONT_FACE>
	<get_DEPTH_RANGE get="inline" set="null" line="1223" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_RANGE>
	<get_DEPTH_WRITEMASK get="inline" set="null" line="1228" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_WRITEMASK>
	<get_DEPTH_CLEAR_VALUE get="inline" set="null" line="1233" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_CLEAR_VALUE>
	<get_DEPTH_FUNC get="inline" set="null" line="1238" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_FUNC>
	<get_STENCIL_CLEAR_VALUE get="inline" set="null" line="1243" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_CLEAR_VALUE>
	<get_STENCIL_FUNC get="inline" set="null" line="1248" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_FUNC>
	<get_STENCIL_FAIL get="inline" set="null" line="1253" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_FAIL>
	<get_STENCIL_PASS_DEPTH_FAIL get="inline" set="null" line="1258" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_PASS_DEPTH_FAIL>
	<get_STENCIL_PASS_DEPTH_PASS get="inline" set="null" line="1263" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_PASS_DEPTH_PASS>
	<get_STENCIL_REF get="inline" set="null" line="1268" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_REF>
	<get_STENCIL_VALUE_MASK get="inline" set="null" line="1273" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_VALUE_MASK>
	<get_STENCIL_WRITEMASK get="inline" set="null" line="1278" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_WRITEMASK>
	<get_STENCIL_BACK_FUNC get="inline" set="null" line="1283" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_FUNC>
	<get_STENCIL_BACK_FAIL get="inline" set="null" line="1288" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_FAIL>
	<get_STENCIL_BACK_PASS_DEPTH_FAIL get="inline" set="null" line="1293" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_PASS_DEPTH_FAIL>
	<get_STENCIL_BACK_PASS_DEPTH_PASS get="inline" set="null" line="1298" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_PASS_DEPTH_PASS>
	<get_STENCIL_BACK_REF get="inline" set="null" line="1303" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_REF>
	<get_STENCIL_BACK_VALUE_MASK get="inline" set="null" line="1308" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_VALUE_MASK>
	<get_STENCIL_BACK_WRITEMASK get="inline" set="null" line="1313" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BACK_WRITEMASK>
	<get_VIEWPORT get="inline" set="null" line="1318" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VIEWPORT>
	<get_SCISSOR_BOX get="inline" set="null" line="1323" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SCISSOR_BOX>
	<get_COLOR_CLEAR_VALUE get="inline" set="null" line="1328" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_CLEAR_VALUE>
	<get_COLOR_WRITEMASK get="inline" set="null" line="1333" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_WRITEMASK>
	<get_UNPACK_ALIGNMENT get="inline" set="null" line="1338" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_ALIGNMENT>
	<get_PACK_ALIGNMENT get="inline" set="null" line="1343" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PACK_ALIGNMENT>
	<get_MAX_TEXTURE_SIZE get="inline" set="null" line="1348" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_TEXTURE_SIZE>
	<get_MAX_VIEWPORT_DIMS get="inline" set="null" line="1353" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VIEWPORT_DIMS>
	<get_SUBPIXEL_BITS get="inline" set="null" line="1358" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SUBPIXEL_BITS>
	<get_RED_BITS get="inline" set="null" line="1363" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RED_BITS>
	<get_GREEN_BITS get="inline" set="null" line="1368" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_GREEN_BITS>
	<get_BLUE_BITS get="inline" set="null" line="1373" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BLUE_BITS>
	<get_ALPHA_BITS get="inline" set="null" line="1378" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ALPHA_BITS>
	<get_DEPTH_BITS get="inline" set="null" line="1383" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_BITS>
	<get_STENCIL_BITS get="inline" set="null" line="1388" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_BITS>
	<get_POLYGON_OFFSET_UNITS get="inline" set="null" line="1393" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_POLYGON_OFFSET_UNITS>
	<get_POLYGON_OFFSET_FACTOR get="inline" set="null" line="1398" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_POLYGON_OFFSET_FACTOR>
	<get_TEXTURE_BINDING_2D get="inline" set="null" line="1403" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_BINDING_2D>
	<get_SAMPLE_BUFFERS get="inline" set="null" line="1408" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLE_BUFFERS>
	<get_SAMPLES get="inline" set="null" line="1413" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLES>
	<get_SAMPLE_COVERAGE_VALUE get="inline" set="null" line="1418" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLE_COVERAGE_VALUE>
	<get_SAMPLE_COVERAGE_INVERT get="inline" set="null" line="1423" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLE_COVERAGE_INVERT>
	<get_COMPRESSED_TEXTURE_FORMATS get="inline" set="null" line="1428" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COMPRESSED_TEXTURE_FORMATS>
	<get_DONT_CARE get="inline" set="null" line="1433" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DONT_CARE>
	<get_FASTEST get="inline" set="null" line="1438" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FASTEST>
	<get_NICEST get="inline" set="null" line="1443" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NICEST>
	<get_GENERATE_MIPMAP_HINT get="inline" set="null" line="1448" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_GENERATE_MIPMAP_HINT>
	<get_BYTE get="inline" set="null" line="1453" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BYTE>
	<get_UNSIGNED_BYTE get="inline" set="null" line="1458" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_BYTE>
	<get_SHORT get="inline" set="null" line="1463" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SHORT>
	<get_UNSIGNED_SHORT get="inline" set="null" line="1468" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_SHORT>
	<get_INT get="inline" set="null" line="1473" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT>
	<get_UNSIGNED_INT get="inline" set="null" line="1478" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT>
	<get_FLOAT get="inline" set="null" line="1483" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT>
	<get_DEPTH_COMPONENT get="inline" set="null" line="1488" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_COMPONENT>
	<get_ALPHA get="inline" set="null" line="1493" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ALPHA>
	<get_RGB get="inline" set="null" line="1498" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB>
	<get_RGBA get="inline" set="null" line="1503" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA>
	<get_LUMINANCE get="inline" set="null" line="1508" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LUMINANCE>
	<get_LUMINANCE_ALPHA get="inline" set="null" line="1513" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LUMINANCE_ALPHA>
	<get_UNSIGNED_SHORT_4_4_4_4 get="inline" set="null" line="1518" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_SHORT_4_4_4_4>
	<get_UNSIGNED_SHORT_5_5_5_1 get="inline" set="null" line="1523" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_SHORT_5_5_5_1>
	<get_UNSIGNED_SHORT_5_6_5 get="inline" set="null" line="1528" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_SHORT_5_6_5>
	<get_FRAGMENT_SHADER get="inline" set="null" line="1533" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAGMENT_SHADER>
	<get_VERTEX_SHADER get="inline" set="null" line="1538" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_SHADER>
	<get_MAX_VERTEX_ATTRIBS get="inline" set="null" line="1543" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VERTEX_ATTRIBS>
	<get_MAX_VERTEX_UNIFORM_VECTORS get="inline" set="null" line="1548" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VERTEX_UNIFORM_VECTORS>
	<get_MAX_VARYING_VECTORS get="inline" set="null" line="1553" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VARYING_VECTORS>
	<get_MAX_COMBINED_TEXTURE_IMAGE_UNITS get="inline" set="null" line="1558" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_COMBINED_TEXTURE_IMAGE_UNITS>
	<get_MAX_VERTEX_TEXTURE_IMAGE_UNITS get="inline" set="null" line="1563" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VERTEX_TEXTURE_IMAGE_UNITS>
	<get_MAX_TEXTURE_IMAGE_UNITS get="inline" set="null" line="1568" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_TEXTURE_IMAGE_UNITS>
	<get_MAX_FRAGMENT_UNIFORM_VECTORS get="inline" set="null" line="1573" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_FRAGMENT_UNIFORM_VECTORS>
	<get_SHADER_TYPE get="inline" set="null" line="1578" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SHADER_TYPE>
	<get_DELETE_STATUS get="inline" set="null" line="1583" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DELETE_STATUS>
	<get_LINK_STATUS get="inline" set="null" line="1588" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINK_STATUS>
	<get_VALIDATE_STATUS get="inline" set="null" line="1593" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VALIDATE_STATUS>
	<get_ATTACHED_SHADERS get="inline" set="null" line="1598" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ATTACHED_SHADERS>
	<get_ACTIVE_UNIFORMS get="inline" set="null" line="1603" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ACTIVE_UNIFORMS>
	<get_ACTIVE_ATTRIBUTES get="inline" set="null" line="1608" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ACTIVE_ATTRIBUTES>
	<get_SHADING_LANGUAGE_VERSION get="inline" set="null" line="1613" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SHADING_LANGUAGE_VERSION>
	<get_CURRENT_PROGRAM get="inline" set="null" line="1618" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CURRENT_PROGRAM>
	<get_NEVER get="inline" set="null" line="1623" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NEVER>
	<get_LESS get="inline" set="null" line="1628" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LESS>
	<get_EQUAL get="inline" set="null" line="1633" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_EQUAL>
	<get_LEQUAL get="inline" set="null" line="1638" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LEQUAL>
	<get_GREATER get="inline" set="null" line="1643" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_GREATER>
	<get_NOTEQUAL get="inline" set="null" line="1648" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NOTEQUAL>
	<get_GEQUAL get="inline" set="null" line="1653" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_GEQUAL>
	<get_ALWAYS get="inline" set="null" line="1658" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ALWAYS>
	<get_KEEP get="inline" set="null" line="1663" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_KEEP>
	<get_REPLACE get="inline" set="null" line="1668" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_REPLACE>
	<get_INCR get="inline" set="null" line="1673" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INCR>
	<get_DECR get="inline" set="null" line="1678" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DECR>
	<get_INVERT get="inline" set="null" line="1683" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INVERT>
	<get_INCR_WRAP get="inline" set="null" line="1688" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INCR_WRAP>
	<get_DECR_WRAP get="inline" set="null" line="1693" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DECR_WRAP>
	<get_VENDOR get="inline" set="null" line="1698" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VENDOR>
	<get_RENDERER get="inline" set="null" line="1703" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERER>
	<get_VERSION get="inline" set="null" line="1708" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERSION>
	<get_NEAREST get="inline" set="null" line="1713" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NEAREST>
	<get_LINEAR get="inline" set="null" line="1718" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINEAR>
	<get_NEAREST_MIPMAP_NEAREST get="inline" set="null" line="1723" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NEAREST_MIPMAP_NEAREST>
	<get_LINEAR_MIPMAP_NEAREST get="inline" set="null" line="1728" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINEAR_MIPMAP_NEAREST>
	<get_NEAREST_MIPMAP_LINEAR get="inline" set="null" line="1733" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NEAREST_MIPMAP_LINEAR>
	<get_LINEAR_MIPMAP_LINEAR get="inline" set="null" line="1738" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LINEAR_MIPMAP_LINEAR>
	<get_TEXTURE_MAG_FILTER get="inline" set="null" line="1743" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_MAG_FILTER>
	<get_TEXTURE_MIN_FILTER get="inline" set="null" line="1748" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_MIN_FILTER>
	<get_TEXTURE_WRAP_S get="inline" set="null" line="1753" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_WRAP_S>
	<get_TEXTURE_WRAP_T get="inline" set="null" line="1758" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_WRAP_T>
	<get_TEXTURE_2D get="inline" set="null" line="1763" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_2D>
	<get_TEXTURE get="inline" set="null" line="1768" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE>
	<get_TEXTURE_CUBE_MAP get="inline" set="null" line="1773" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP>
	<get_TEXTURE_BINDING_CUBE_MAP get="inline" set="null" line="1778" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_BINDING_CUBE_MAP>
	<get_TEXTURE_CUBE_MAP_POSITIVE_X get="inline" set="null" line="1783" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP_POSITIVE_X>
	<get_TEXTURE_CUBE_MAP_NEGATIVE_X get="inline" set="null" line="1788" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP_NEGATIVE_X>
	<get_TEXTURE_CUBE_MAP_POSITIVE_Y get="inline" set="null" line="1793" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP_POSITIVE_Y>
	<get_TEXTURE_CUBE_MAP_NEGATIVE_Y get="inline" set="null" line="1798" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP_NEGATIVE_Y>
	<get_TEXTURE_CUBE_MAP_POSITIVE_Z get="inline" set="null" line="1803" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP_POSITIVE_Z>
	<get_TEXTURE_CUBE_MAP_NEGATIVE_Z get="inline" set="null" line="1808" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_CUBE_MAP_NEGATIVE_Z>
	<get_MAX_CUBE_MAP_TEXTURE_SIZE get="inline" set="null" line="1813" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_CUBE_MAP_TEXTURE_SIZE>
	<get_TEXTURE0 get="inline" set="null" line="1818" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE0>
	<get_TEXTURE1 get="inline" set="null" line="1823" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE1>
	<get_TEXTURE2 get="inline" set="null" line="1828" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE2>
	<get_TEXTURE3 get="inline" set="null" line="1833" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE3>
	<get_TEXTURE4 get="inline" set="null" line="1838" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE4>
	<get_TEXTURE5 get="inline" set="null" line="1843" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE5>
	<get_TEXTURE6 get="inline" set="null" line="1848" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE6>
	<get_TEXTURE7 get="inline" set="null" line="1853" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE7>
	<get_TEXTURE8 get="inline" set="null" line="1858" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE8>
	<get_TEXTURE9 get="inline" set="null" line="1863" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE9>
	<get_TEXTURE10 get="inline" set="null" line="1868" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE10>
	<get_TEXTURE11 get="inline" set="null" line="1873" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE11>
	<get_TEXTURE12 get="inline" set="null" line="1878" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE12>
	<get_TEXTURE13 get="inline" set="null" line="1883" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE13>
	<get_TEXTURE14 get="inline" set="null" line="1888" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE14>
	<get_TEXTURE15 get="inline" set="null" line="1893" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE15>
	<get_TEXTURE16 get="inline" set="null" line="1898" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE16>
	<get_TEXTURE17 get="inline" set="null" line="1903" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE17>
	<get_TEXTURE18 get="inline" set="null" line="1908" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE18>
	<get_TEXTURE19 get="inline" set="null" line="1913" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE19>
	<get_TEXTURE20 get="inline" set="null" line="1918" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE20>
	<get_TEXTURE21 get="inline" set="null" line="1923" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE21>
	<get_TEXTURE22 get="inline" set="null" line="1928" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE22>
	<get_TEXTURE23 get="inline" set="null" line="1933" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE23>
	<get_TEXTURE24 get="inline" set="null" line="1938" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE24>
	<get_TEXTURE25 get="inline" set="null" line="1943" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE25>
	<get_TEXTURE26 get="inline" set="null" line="1948" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE26>
	<get_TEXTURE27 get="inline" set="null" line="1953" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE27>
	<get_TEXTURE28 get="inline" set="null" line="1958" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE28>
	<get_TEXTURE29 get="inline" set="null" line="1963" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE29>
	<get_TEXTURE30 get="inline" set="null" line="1968" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE30>
	<get_TEXTURE31 get="inline" set="null" line="1973" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE31>
	<get_ACTIVE_TEXTURE get="inline" set="null" line="1978" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ACTIVE_TEXTURE>
	<get_REPEAT get="inline" set="null" line="1983" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_REPEAT>
	<get_CLAMP_TO_EDGE get="inline" set="null" line="1988" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CLAMP_TO_EDGE>
	<get_MIRRORED_REPEAT get="inline" set="null" line="1993" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MIRRORED_REPEAT>
	<get_FLOAT_VEC2 get="inline" set="null" line="1998" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_VEC2>
	<get_FLOAT_VEC3 get="inline" set="null" line="2003" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_VEC3>
	<get_FLOAT_VEC4 get="inline" set="null" line="2008" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_VEC4>
	<get_INT_VEC2 get="inline" set="null" line="2013" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_VEC2>
	<get_INT_VEC3 get="inline" set="null" line="2018" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_VEC3>
	<get_INT_VEC4 get="inline" set="null" line="2023" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_VEC4>
	<get_BOOL get="inline" set="null" line="2028" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BOOL>
	<get_BOOL_VEC2 get="inline" set="null" line="2033" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BOOL_VEC2>
	<get_BOOL_VEC3 get="inline" set="null" line="2038" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BOOL_VEC3>
	<get_BOOL_VEC4 get="inline" set="null" line="2043" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BOOL_VEC4>
	<get_FLOAT_MAT2 get="inline" set="null" line="2048" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT2>
	<get_FLOAT_MAT3 get="inline" set="null" line="2053" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT3>
	<get_FLOAT_MAT4 get="inline" set="null" line="2058" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT4>
	<get_SAMPLER_2D get="inline" set="null" line="2063" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_2D>
	<get_SAMPLER_CUBE get="inline" set="null" line="2068" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_CUBE>
	<get_VERTEX_ATTRIB_ARRAY_ENABLED get="inline" set="null" line="2073" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_ENABLED>
	<get_VERTEX_ATTRIB_ARRAY_SIZE get="inline" set="null" line="2078" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_SIZE>
	<get_VERTEX_ATTRIB_ARRAY_STRIDE get="inline" set="null" line="2083" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_STRIDE>
	<get_VERTEX_ATTRIB_ARRAY_TYPE get="inline" set="null" line="2088" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_TYPE>
	<get_VERTEX_ATTRIB_ARRAY_NORMALIZED get="inline" set="null" line="2093" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_NORMALIZED>
	<get_VERTEX_ATTRIB_ARRAY_POINTER get="inline" set="null" line="2098" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_POINTER>
	<get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING get="inline" set="null" line="2103" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
	<get_COMPILE_STATUS get="inline" set="null" line="2108" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COMPILE_STATUS>
	<get_LOW_FLOAT get="inline" set="null" line="2113" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LOW_FLOAT>
	<get_MEDIUM_FLOAT get="inline" set="null" line="2118" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MEDIUM_FLOAT>
	<get_HIGH_FLOAT get="inline" set="null" line="2123" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_HIGH_FLOAT>
	<get_LOW_INT get="inline" set="null" line="2128" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_LOW_INT>
	<get_MEDIUM_INT get="inline" set="null" line="2133" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MEDIUM_INT>
	<get_HIGH_INT get="inline" set="null" line="2138" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_HIGH_INT>
	<get_FRAMEBUFFER get="inline" set="null" line="2143" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER>
	<get_RENDERBUFFER get="inline" set="null" line="2148" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER>
	<get_RGBA4 get="inline" set="null" line="2153" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA4>
	<get_RGB5_A1 get="inline" set="null" line="2158" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB5_A1>
	<get_RGB565 get="inline" set="null" line="2163" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB565>
	<get_DEPTH_COMPONENT16 get="inline" set="null" line="2168" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_COMPONENT16>
	<get_STENCIL_INDEX get="inline" set="null" line="2173" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_INDEX>
	<get_STENCIL_INDEX8 get="inline" set="null" line="2178" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_INDEX8>
	<get_DEPTH_STENCIL get="inline" set="null" line="2183" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_STENCIL>
	<get_RENDERBUFFER_WIDTH get="inline" set="null" line="2188" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_WIDTH>
	<get_RENDERBUFFER_HEIGHT get="inline" set="null" line="2193" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_HEIGHT>
	<get_RENDERBUFFER_INTERNAL_FORMAT get="inline" set="null" line="2198" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_INTERNAL_FORMAT>
	<get_RENDERBUFFER_RED_SIZE get="inline" set="null" line="2203" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_RED_SIZE>
	<get_RENDERBUFFER_GREEN_SIZE get="inline" set="null" line="2208" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_GREEN_SIZE>
	<get_RENDERBUFFER_BLUE_SIZE get="inline" set="null" line="2213" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_BLUE_SIZE>
	<get_RENDERBUFFER_ALPHA_SIZE get="inline" set="null" line="2218" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_ALPHA_SIZE>
	<get_RENDERBUFFER_DEPTH_SIZE get="inline" set="null" line="2223" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_DEPTH_SIZE>
	<get_RENDERBUFFER_STENCIL_SIZE get="inline" set="null" line="2228" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_STENCIL_SIZE>
	<get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE get="inline" set="null" line="2233" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
	<get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME get="inline" set="null" line="2238" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
	<get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL get="inline" set="null" line="2243" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
	<get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE get="inline" set="null" line="2248" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
	<get_COLOR_ATTACHMENT0 get="inline" set="null" line="2253" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT0>
	<get_DEPTH_ATTACHMENT get="inline" set="null" line="2258" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_ATTACHMENT>
	<get_STENCIL_ATTACHMENT get="inline" set="null" line="2263" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL_ATTACHMENT>
	<get_DEPTH_STENCIL_ATTACHMENT get="inline" set="null" line="2268" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_STENCIL_ATTACHMENT>
	<get_NONE get="inline" set="null" line="2273" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_NONE>
	<get_FRAMEBUFFER_COMPLETE get="inline" set="null" line="2278" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_COMPLETE>
	<get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT get="inline" set="null" line="2283" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
	<get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT get="inline" set="null" line="2288" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
	<get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS get="inline" set="null" line="2293" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
	<get_FRAMEBUFFER_UNSUPPORTED get="inline" set="null" line="2298" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_UNSUPPORTED>
	<get_FRAMEBUFFER_BINDING get="inline" set="null" line="2303" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_BINDING>
	<get_RENDERBUFFER_BINDING get="inline" set="null" line="2308" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_BINDING>
	<get_MAX_RENDERBUFFER_SIZE get="inline" set="null" line="2313" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_RENDERBUFFER_SIZE>
	<get_INVALID_FRAMEBUFFER_OPERATION get="inline" set="null" line="2318" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INVALID_FRAMEBUFFER_OPERATION>
	<get_UNPACK_FLIP_Y_WEBGL get="inline" set="null" line="2323" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_FLIP_Y_WEBGL>
	<get_UNPACK_PREMULTIPLY_ALPHA_WEBGL get="inline" set="null" line="2328" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_PREMULTIPLY_ALPHA_WEBGL>
	<get_CONTEXT_LOST_WEBGL get="inline" set="null" line="2333" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CONTEXT_LOST_WEBGL>
	<get_UNPACK_COLORSPACE_CONVERSION_WEBGL get="inline" set="null" line="2338" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_COLORSPACE_CONVERSION_WEBGL>
	<get_BROWSER_DEFAULT_WEBGL get="inline" set="null" line="2343" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_BROWSER_DEFAULT_WEBGL>
	<get_READ_BUFFER get="inline" set="null" line="2348" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_READ_BUFFER>
	<get_UNPACK_ROW_LENGTH get="inline" set="null" line="2353" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_ROW_LENGTH>
	<get_UNPACK_SKIP_ROWS get="inline" set="null" line="2358" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_SKIP_ROWS>
	<get_UNPACK_SKIP_PIXELS get="inline" set="null" line="2363" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_SKIP_PIXELS>
	<get_PACK_ROW_LENGTH get="inline" set="null" line="2368" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PACK_ROW_LENGTH>
	<get_PACK_SKIP_ROWS get="inline" set="null" line="2373" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PACK_SKIP_ROWS>
	<get_PACK_SKIP_PIXELS get="inline" set="null" line="2378" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PACK_SKIP_PIXELS>
	<get_TEXTURE_BINDING_3D get="inline" set="null" line="2383" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_BINDING_3D>
	<get_UNPACK_SKIP_IMAGES get="inline" set="null" line="2388" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_SKIP_IMAGES>
	<get_UNPACK_IMAGE_HEIGHT get="inline" set="null" line="2393" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNPACK_IMAGE_HEIGHT>
	<get_MAX_3D_TEXTURE_SIZE get="inline" set="null" line="2398" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_3D_TEXTURE_SIZE>
	<get_MAX_ELEMENTS_VERTICES get="inline" set="null" line="2403" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_ELEMENTS_VERTICES>
	<get_MAX_ELEMENTS_INDICES get="inline" set="null" line="2408" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_ELEMENTS_INDICES>
	<get_MAX_TEXTURE_LOD_BIAS get="inline" set="null" line="2413" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_TEXTURE_LOD_BIAS>
	<get_MAX_FRAGMENT_UNIFORM_COMPONENTS get="inline" set="null" line="2418" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_FRAGMENT_UNIFORM_COMPONENTS>
	<get_MAX_VERTEX_UNIFORM_COMPONENTS get="inline" set="null" line="2423" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VERTEX_UNIFORM_COMPONENTS>
	<get_MAX_ARRAY_TEXTURE_LAYERS get="inline" set="null" line="2428" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_ARRAY_TEXTURE_LAYERS>
	<get_MIN_PROGRAM_TEXEL_OFFSET get="inline" set="null" line="2433" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MIN_PROGRAM_TEXEL_OFFSET>
	<get_MAX_PROGRAM_TEXEL_OFFSET get="inline" set="null" line="2438" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_PROGRAM_TEXEL_OFFSET>
	<get_MAX_VARYING_COMPONENTS get="inline" set="null" line="2443" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VARYING_COMPONENTS>
	<get_FRAGMENT_SHADER_DERIVATIVE_HINT get="inline" set="null" line="2448" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAGMENT_SHADER_DERIVATIVE_HINT>
	<get_RASTERIZER_DISCARD get="inline" set="null" line="2453" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RASTERIZER_DISCARD>
	<get_VERTEX_ARRAY_BINDING get="inline" set="null" line="2458" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ARRAY_BINDING>
	<get_MAX_VERTEX_OUTPUT_COMPONENTS get="inline" set="null" line="2463" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VERTEX_OUTPUT_COMPONENTS>
	<get_MAX_FRAGMENT_INPUT_COMPONENTS get="inline" set="null" line="2468" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_FRAGMENT_INPUT_COMPONENTS>
	<get_MAX_SERVER_WAIT_TIMEOUT get="inline" set="null" line="2473" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_SERVER_WAIT_TIMEOUT>
	<get_MAX_ELEMENT_INDEX get="inline" set="null" line="2478" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_ELEMENT_INDEX>
	<get_RED get="inline" set="null" line="2483" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RED>
	<get_RGB8 get="inline" set="null" line="2488" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB8>
	<get_RGBA8 get="inline" set="null" line="2493" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA8>
	<get_RGB10_A2 get="inline" set="null" line="2498" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB10_A2>
	<get_TEXTURE_3D get="inline" set="null" line="2503" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_3D>
	<get_TEXTURE_WRAP_R get="inline" set="null" line="2508" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_WRAP_R>
	<get_TEXTURE_MIN_LOD get="inline" set="null" line="2513" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_MIN_LOD>
	<get_TEXTURE_MAX_LOD get="inline" set="null" line="2518" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_MAX_LOD>
	<get_TEXTURE_BASE_LEVEL get="inline" set="null" line="2523" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_BASE_LEVEL>
	<get_TEXTURE_MAX_LEVEL get="inline" set="null" line="2528" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_MAX_LEVEL>
	<get_TEXTURE_COMPARE_MODE get="inline" set="null" line="2533" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_COMPARE_MODE>
	<get_TEXTURE_COMPARE_FUNC get="inline" set="null" line="2538" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_COMPARE_FUNC>
	<get_SRGB get="inline" set="null" line="2543" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SRGB>
	<get_SRGB8 get="inline" set="null" line="2548" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SRGB8>
	<get_SRGB8_ALPHA8 get="inline" set="null" line="2553" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SRGB8_ALPHA8>
	<get_COMPARE_REF_TO_TEXTURE get="inline" set="null" line="2558" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COMPARE_REF_TO_TEXTURE>
	<get_RGBA32F get="inline" set="null" line="2563" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA32F>
	<get_RGB32F get="inline" set="null" line="2568" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB32F>
	<get_RGBA16F get="inline" set="null" line="2573" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA16F>
	<get_RGB16F get="inline" set="null" line="2578" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB16F>
	<get_TEXTURE_2D_ARRAY get="inline" set="null" line="2583" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_2D_ARRAY>
	<get_TEXTURE_BINDING_2D_ARRAY get="inline" set="null" line="2588" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_BINDING_2D_ARRAY>
	<get_R11F_G11F_B10F get="inline" set="null" line="2593" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R11F_G11F_B10F>
	<get_RGB9_E5 get="inline" set="null" line="2598" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB9_E5>
	<get_RGBA32UI get="inline" set="null" line="2603" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA32UI>
	<get_RGB32UI get="inline" set="null" line="2608" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB32UI>
	<get_RGBA16UI get="inline" set="null" line="2613" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA16UI>
	<get_RGB16UI get="inline" set="null" line="2618" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB16UI>
	<get_RGBA8UI get="inline" set="null" line="2623" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA8UI>
	<get_RGB8UI get="inline" set="null" line="2628" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB8UI>
	<get_RGBA32I get="inline" set="null" line="2633" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA32I>
	<get_RGB32I get="inline" set="null" line="2638" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB32I>
	<get_RGBA16I get="inline" set="null" line="2643" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA16I>
	<get_RGB16I get="inline" set="null" line="2648" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB16I>
	<get_RGBA8I get="inline" set="null" line="2653" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA8I>
	<get_RGB8I get="inline" set="null" line="2658" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB8I>
	<get_RED_INTEGER get="inline" set="null" line="2663" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RED_INTEGER>
	<get_RGB_INTEGER get="inline" set="null" line="2668" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB_INTEGER>
	<get_RGBA_INTEGER get="inline" set="null" line="2673" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA_INTEGER>
	<get_R8 get="inline" set="null" line="2678" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R8>
	<get_RG8 get="inline" set="null" line="2683" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG8>
	<get_R16F get="inline" set="null" line="2688" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R16F>
	<get_R32F get="inline" set="null" line="2693" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R32F>
	<get_RG16F get="inline" set="null" line="2698" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG16F>
	<get_RG32F get="inline" set="null" line="2703" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG32F>
	<get_R8I get="inline" set="null" line="2708" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R8I>
	<get_R8UI get="inline" set="null" line="2713" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R8UI>
	<get_R16I get="inline" set="null" line="2718" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R16I>
	<get_R16UI get="inline" set="null" line="2723" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R16UI>
	<get_R32I get="inline" set="null" line="2728" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R32I>
	<get_R32UI get="inline" set="null" line="2733" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R32UI>
	<get_RG8I get="inline" set="null" line="2738" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG8I>
	<get_RG8UI get="inline" set="null" line="2743" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG8UI>
	<get_RG16I get="inline" set="null" line="2748" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG16I>
	<get_RG16UI get="inline" set="null" line="2753" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG16UI>
	<get_RG32I get="inline" set="null" line="2758" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG32I>
	<get_RG32UI get="inline" set="null" line="2763" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG32UI>
	<get_R8_SNORM get="inline" set="null" line="2768" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_R8_SNORM>
	<get_RG8_SNORM get="inline" set="null" line="2773" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG8_SNORM>
	<get_RGB8_SNORM get="inline" set="null" line="2778" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB8_SNORM>
	<get_RGBA8_SNORM get="inline" set="null" line="2783" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGBA8_SNORM>
	<get_RGB10_A2UI get="inline" set="null" line="2788" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RGB10_A2UI>
	<get_TEXTURE_IMMUTABLE_FORMAT get="inline" set="null" line="2793" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_IMMUTABLE_FORMAT>
	<get_TEXTURE_IMMUTABLE_LEVELS get="inline" set="null" line="2798" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TEXTURE_IMMUTABLE_LEVELS>
	<get_UNSIGNED_INT_2_10_10_10_REV get="inline" set="null" line="2803" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_2_10_10_10_REV>
	<get_UNSIGNED_INT_10F_11F_11F_REV get="inline" set="null" line="2808" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_10F_11F_11F_REV>
	<get_UNSIGNED_INT_5_9_9_9_REV get="inline" set="null" line="2813" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_5_9_9_9_REV>
	<get_FLOAT_32_UNSIGNED_INT_24_8_REV get="inline" set="null" line="2818" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_32_UNSIGNED_INT_24_8_REV>
	<get_UNSIGNED_INT_24_8 get="inline" set="null" line="2823" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_24_8>
	<get_HALF_FLOAT get="inline" set="null" line="2828" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_HALF_FLOAT>
	<get_RG get="inline" set="null" line="2833" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG>
	<get_RG_INTEGER get="inline" set="null" line="2838" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RG_INTEGER>
	<get_INT_2_10_10_10_REV get="inline" set="null" line="2843" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_2_10_10_10_REV>
	<get_CURRENT_QUERY get="inline" set="null" line="2848" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CURRENT_QUERY>
	<get_QUERY_RESULT get="inline" set="null" line="2853" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_QUERY_RESULT>
	<get_QUERY_RESULT_AVAILABLE get="inline" set="null" line="2858" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_QUERY_RESULT_AVAILABLE>
	<get_ANY_SAMPLES_PASSED get="inline" set="null" line="2863" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ANY_SAMPLES_PASSED>
	<get_ANY_SAMPLES_PASSED_CONSERVATIVE get="inline" set="null" line="2868" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ANY_SAMPLES_PASSED_CONSERVATIVE>
	<get_MAX_DRAW_BUFFERS get="inline" set="null" line="2873" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_DRAW_BUFFERS>
	<get_DRAW_BUFFER0 get="inline" set="null" line="2878" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER0>
	<get_DRAW_BUFFER1 get="inline" set="null" line="2883" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER1>
	<get_DRAW_BUFFER2 get="inline" set="null" line="2888" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER2>
	<get_DRAW_BUFFER3 get="inline" set="null" line="2893" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER3>
	<get_DRAW_BUFFER4 get="inline" set="null" line="2898" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER4>
	<get_DRAW_BUFFER5 get="inline" set="null" line="2903" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER5>
	<get_DRAW_BUFFER6 get="inline" set="null" line="2908" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER6>
	<get_DRAW_BUFFER7 get="inline" set="null" line="2913" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER7>
	<get_DRAW_BUFFER8 get="inline" set="null" line="2918" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER8>
	<get_DRAW_BUFFER9 get="inline" set="null" line="2923" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER9>
	<get_DRAW_BUFFER10 get="inline" set="null" line="2928" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER10>
	<get_DRAW_BUFFER11 get="inline" set="null" line="2933" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER11>
	<get_DRAW_BUFFER12 get="inline" set="null" line="2938" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER12>
	<get_DRAW_BUFFER13 get="inline" set="null" line="2943" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER13>
	<get_DRAW_BUFFER14 get="inline" set="null" line="2948" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER14>
	<get_DRAW_BUFFER15 get="inline" set="null" line="2953" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_BUFFER15>
	<get_MAX_COLOR_ATTACHMENTS get="inline" set="null" line="2958" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_COLOR_ATTACHMENTS>
	<get_COLOR_ATTACHMENT1 get="inline" set="null" line="2963" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT1>
	<get_COLOR_ATTACHMENT2 get="inline" set="null" line="2968" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT2>
	<get_COLOR_ATTACHMENT3 get="inline" set="null" line="2973" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT3>
	<get_COLOR_ATTACHMENT4 get="inline" set="null" line="2978" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT4>
	<get_COLOR_ATTACHMENT5 get="inline" set="null" line="2983" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT5>
	<get_COLOR_ATTACHMENT6 get="inline" set="null" line="2988" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT6>
	<get_COLOR_ATTACHMENT7 get="inline" set="null" line="2993" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT7>
	<get_COLOR_ATTACHMENT8 get="inline" set="null" line="2998" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT8>
	<get_COLOR_ATTACHMENT9 get="inline" set="null" line="3003" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT9>
	<get_COLOR_ATTACHMENT10 get="inline" set="null" line="3008" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT10>
	<get_COLOR_ATTACHMENT11 get="inline" set="null" line="3013" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT11>
	<get_COLOR_ATTACHMENT12 get="inline" set="null" line="3018" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT12>
	<get_COLOR_ATTACHMENT13 get="inline" set="null" line="3023" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT13>
	<get_COLOR_ATTACHMENT14 get="inline" set="null" line="3028" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT14>
	<get_COLOR_ATTACHMENT15 get="inline" set="null" line="3033" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR_ATTACHMENT15>
	<get_SAMPLER_3D get="inline" set="null" line="3038" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_3D>
	<get_SAMPLER_2D_SHADOW get="inline" set="null" line="3043" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_2D_SHADOW>
	<get_SAMPLER_2D_ARRAY get="inline" set="null" line="3048" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_2D_ARRAY>
	<get_SAMPLER_2D_ARRAY_SHADOW get="inline" set="null" line="3053" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_2D_ARRAY_SHADOW>
	<get_SAMPLER_CUBE_SHADOW get="inline" set="null" line="3058" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_CUBE_SHADOW>
	<get_INT_SAMPLER_2D get="inline" set="null" line="3063" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_SAMPLER_2D>
	<get_INT_SAMPLER_3D get="inline" set="null" line="3068" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_SAMPLER_3D>
	<get_INT_SAMPLER_CUBE get="inline" set="null" line="3073" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_SAMPLER_CUBE>
	<get_INT_SAMPLER_2D_ARRAY get="inline" set="null" line="3078" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INT_SAMPLER_2D_ARRAY>
	<get_UNSIGNED_INT_SAMPLER_2D get="inline" set="null" line="3083" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_SAMPLER_2D>
	<get_UNSIGNED_INT_SAMPLER_3D get="inline" set="null" line="3088" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_SAMPLER_3D>
	<get_UNSIGNED_INT_SAMPLER_CUBE get="inline" set="null" line="3093" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_SAMPLER_CUBE>
	<get_UNSIGNED_INT_SAMPLER_2D_ARRAY get="inline" set="null" line="3098" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_SAMPLER_2D_ARRAY>
	<get_MAX_SAMPLES get="inline" set="null" line="3103" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_SAMPLES>
	<get_SAMPLER_BINDING get="inline" set="null" line="3108" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SAMPLER_BINDING>
	<get_PIXEL_PACK_BUFFER get="inline" set="null" line="3113" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PIXEL_PACK_BUFFER>
	<get_PIXEL_UNPACK_BUFFER get="inline" set="null" line="3118" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PIXEL_UNPACK_BUFFER>
	<get_PIXEL_PACK_BUFFER_BINDING get="inline" set="null" line="3123" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PIXEL_PACK_BUFFER_BINDING>
	<get_PIXEL_UNPACK_BUFFER_BINDING get="inline" set="null" line="3128" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_PIXEL_UNPACK_BUFFER_BINDING>
	<get_COPY_READ_BUFFER get="inline" set="null" line="3133" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COPY_READ_BUFFER>
	<get_COPY_WRITE_BUFFER get="inline" set="null" line="3138" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COPY_WRITE_BUFFER>
	<get_COPY_READ_BUFFER_BINDING get="inline" set="null" line="3143" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COPY_READ_BUFFER_BINDING>
	<get_COPY_WRITE_BUFFER_BINDING get="inline" set="null" line="3148" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COPY_WRITE_BUFFER_BINDING>
	<get_FLOAT_MAT2x3 get="inline" set="null" line="3153" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT2x3>
	<get_FLOAT_MAT2x4 get="inline" set="null" line="3158" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT2x4>
	<get_FLOAT_MAT3x2 get="inline" set="null" line="3163" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT3x2>
	<get_FLOAT_MAT3x4 get="inline" set="null" line="3168" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT3x4>
	<get_FLOAT_MAT4x2 get="inline" set="null" line="3173" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT4x2>
	<get_FLOAT_MAT4x3 get="inline" set="null" line="3178" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FLOAT_MAT4x3>
	<get_UNSIGNED_INT_VEC2 get="inline" set="null" line="3183" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_VEC2>
	<get_UNSIGNED_INT_VEC3 get="inline" set="null" line="3188" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_VEC3>
	<get_UNSIGNED_INT_VEC4 get="inline" set="null" line="3193" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_INT_VEC4>
	<get_UNSIGNED_NORMALIZED get="inline" set="null" line="3198" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNED_NORMALIZED>
	<get_SIGNED_NORMALIZED get="inline" set="null" line="3203" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SIGNED_NORMALIZED>
	<get_VERTEX_ATTRIB_ARRAY_INTEGER get="inline" set="null" line="3208" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_INTEGER>
	<get_VERTEX_ATTRIB_ARRAY_DIVISOR get="inline" set="null" line="3213" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_VERTEX_ATTRIB_ARRAY_DIVISOR>
	<get_TRANSFORM_FEEDBACK_BUFFER_MODE get="inline" set="null" line="3218" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_BUFFER_MODE>
	<get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS get="inline" set="null" line="3223" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
	<get_TRANSFORM_FEEDBACK_VARYINGS get="inline" set="null" line="3228" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_VARYINGS>
	<get_TRANSFORM_FEEDBACK_BUFFER_START get="inline" set="null" line="3233" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_BUFFER_START>
	<get_TRANSFORM_FEEDBACK_BUFFER_SIZE get="inline" set="null" line="3238" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_BUFFER_SIZE>
	<get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN get="inline" set="null" line="3243" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
	<get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS get="inline" set="null" line="3248" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
	<get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS get="inline" set="null" line="3253" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
	<get_INTERLEAVED_ATTRIBS get="inline" set="null" line="3258" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INTERLEAVED_ATTRIBS>
	<get_SEPARATE_ATTRIBS get="inline" set="null" line="3263" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SEPARATE_ATTRIBS>
	<get_TRANSFORM_FEEDBACK_BUFFER get="inline" set="null" line="3268" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_BUFFER>
	<get_TRANSFORM_FEEDBACK_BUFFER_BINDING get="inline" set="null" line="3273" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_BUFFER_BINDING>
	<get_TRANSFORM_FEEDBACK get="inline" set="null" line="3278" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK>
	<get_TRANSFORM_FEEDBACK_PAUSED get="inline" set="null" line="3283" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_PAUSED>
	<get_TRANSFORM_FEEDBACK_ACTIVE get="inline" set="null" line="3288" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_ACTIVE>
	<get_TRANSFORM_FEEDBACK_BINDING get="inline" set="null" line="3293" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TRANSFORM_FEEDBACK_BINDING>
	<get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING get="inline" set="null" line="3298" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
	<get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE get="inline" set="null" line="3303" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
	<get_FRAMEBUFFER_ATTACHMENT_RED_SIZE get="inline" set="null" line="3308" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_RED_SIZE>
	<get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE get="inline" set="null" line="3313" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
	<get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE get="inline" set="null" line="3318" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
	<get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE get="inline" set="null" line="3323" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
	<get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE get="inline" set="null" line="3328" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
	<get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE get="inline" set="null" line="3333" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
	<get_FRAMEBUFFER_DEFAULT get="inline" set="null" line="3338" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_DEFAULT>
	<get_DEPTH24_STENCIL8 get="inline" set="null" line="3343" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH24_STENCIL8>
	<get_DRAW_FRAMEBUFFER_BINDING get="inline" set="null" line="3348" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_FRAMEBUFFER_BINDING>
	<get_READ_FRAMEBUFFER get="inline" set="null" line="3353" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_READ_FRAMEBUFFER>
	<get_DRAW_FRAMEBUFFER get="inline" set="null" line="3358" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DRAW_FRAMEBUFFER>
	<get_READ_FRAMEBUFFER_BINDING get="inline" set="null" line="3363" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_READ_FRAMEBUFFER_BINDING>
	<get_RENDERBUFFER_SAMPLES get="inline" set="null" line="3368" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_RENDERBUFFER_SAMPLES>
	<get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER get="inline" set="null" line="3373" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
	<get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE get="inline" set="null" line="3378" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
	<get_UNIFORM_BUFFER get="inline" set="null" line="3383" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BUFFER>
	<get_UNIFORM_BUFFER_BINDING get="inline" set="null" line="3388" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BUFFER_BINDING>
	<get_UNIFORM_BUFFER_START get="inline" set="null" line="3393" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BUFFER_START>
	<get_UNIFORM_BUFFER_SIZE get="inline" set="null" line="3398" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BUFFER_SIZE>
	<get_MAX_VERTEX_UNIFORM_BLOCKS get="inline" set="null" line="3403" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_VERTEX_UNIFORM_BLOCKS>
	<get_MAX_FRAGMENT_UNIFORM_BLOCKS get="inline" set="null" line="3408" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_FRAGMENT_UNIFORM_BLOCKS>
	<get_MAX_COMBINED_UNIFORM_BLOCKS get="inline" set="null" line="3413" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_COMBINED_UNIFORM_BLOCKS>
	<get_MAX_UNIFORM_BUFFER_BINDINGS get="inline" set="null" line="3418" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_UNIFORM_BUFFER_BINDINGS>
	<get_MAX_UNIFORM_BLOCK_SIZE get="inline" set="null" line="3423" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_UNIFORM_BLOCK_SIZE>
	<get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS get="inline" set="null" line="3428" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
	<get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS get="inline" set="null" line="3433" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
	<get_UNIFORM_BUFFER_OFFSET_ALIGNMENT get="inline" set="null" line="3438" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BUFFER_OFFSET_ALIGNMENT>
	<get_ACTIVE_UNIFORM_BLOCKS get="inline" set="null" line="3443" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ACTIVE_UNIFORM_BLOCKS>
	<get_UNIFORM_TYPE get="inline" set="null" line="3448" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_TYPE>
	<get_UNIFORM_SIZE get="inline" set="null" line="3453" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_SIZE>
	<get_UNIFORM_BLOCK_INDEX get="inline" set="null" line="3458" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_INDEX>
	<get_UNIFORM_OFFSET get="inline" set="null" line="3463" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_OFFSET>
	<get_UNIFORM_ARRAY_STRIDE get="inline" set="null" line="3468" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_ARRAY_STRIDE>
	<get_UNIFORM_MATRIX_STRIDE get="inline" set="null" line="3473" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_MATRIX_STRIDE>
	<get_UNIFORM_IS_ROW_MAJOR get="inline" set="null" line="3478" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_IS_ROW_MAJOR>
	<get_UNIFORM_BLOCK_BINDING get="inline" set="null" line="3483" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_BINDING>
	<get_UNIFORM_BLOCK_DATA_SIZE get="inline" set="null" line="3488" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_DATA_SIZE>
	<get_UNIFORM_BLOCK_ACTIVE_UNIFORMS get="inline" set="null" line="3493" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_ACTIVE_UNIFORMS>
	<get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES get="inline" set="null" line="3498" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
	<get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER get="inline" set="null" line="3503" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
	<get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER get="inline" set="null" line="3508" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
	<get_OBJECT_TYPE get="inline" set="null" line="3513" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_OBJECT_TYPE>
	<get_SYNC_CONDITION get="inline" set="null" line="3518" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SYNC_CONDITION>
	<get_SYNC_STATUS get="inline" set="null" line="3523" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SYNC_STATUS>
	<get_SYNC_FLAGS get="inline" set="null" line="3528" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SYNC_FLAGS>
	<get_SYNC_FENCE get="inline" set="null" line="3533" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SYNC_FENCE>
	<get_SYNC_GPU_COMMANDS_COMPLETE get="inline" set="null" line="3538" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SYNC_GPU_COMMANDS_COMPLETE>
	<get_UNSIGNALED get="inline" set="null" line="3543" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_UNSIGNALED>
	<get_SIGNALED get="inline" set="null" line="3548" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SIGNALED>
	<get_ALREADY_SIGNALED get="inline" set="null" line="3553" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ALREADY_SIGNALED>
	<get_TIMEOUT_EXPIRED get="inline" set="null" line="3558" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TIMEOUT_EXPIRED>
	<get_CONDITION_SATISFIED get="inline" set="null" line="3563" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_CONDITION_SATISFIED>
	<get_WAIT_FAILED get="inline" set="null" line="3568" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_WAIT_FAILED>
	<get_SYNC_FLUSH_COMMANDS_BIT get="inline" set="null" line="3573" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_SYNC_FLUSH_COMMANDS_BIT>
	<get_COLOR get="inline" set="null" line="3578" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_COLOR>
	<get_DEPTH get="inline" set="null" line="3583" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH>
	<get_STENCIL get="inline" set="null" line="3588" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STENCIL>
	<get_MIN get="inline" set="null" line="3593" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MIN>
	<get_MAX get="inline" set="null" line="3598" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX>
	<get_DEPTH_COMPONENT24 get="inline" set="null" line="3603" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_COMPONENT24>
	<get_STREAM_READ get="inline" set="null" line="3608" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STREAM_READ>
	<get_STREAM_COPY get="inline" set="null" line="3613" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STREAM_COPY>
	<get_STATIC_READ get="inline" set="null" line="3618" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STATIC_READ>
	<get_STATIC_COPY get="inline" set="null" line="3623" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_STATIC_COPY>
	<get_DYNAMIC_READ get="inline" set="null" line="3628" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DYNAMIC_READ>
	<get_DYNAMIC_COPY get="inline" set="null" line="3633" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DYNAMIC_COPY>
	<get_DEPTH_COMPONENT32F get="inline" set="null" line="3638" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH_COMPONENT32F>
	<get_DEPTH32F_STENCIL8 get="inline" set="null" line="3643" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_DEPTH32F_STENCIL8>
	<get_INVALID_INDEX get="inline" set="null" line="3648" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_INVALID_INDEX>
	<get_TIMEOUT_IGNORED get="inline" set="null" line="3653" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_TIMEOUT_IGNORED>
	<get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL get="inline" set="null" line="3658" static="1">
		<f a="this">
			<d/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
	<activeTexture public="1" get="inline" set="null" line="3663" static="1"><f a="this:texture">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
	<attachShader public="1" get="inline" set="null" line="3668" static="1"><f a="this:program:shader">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></attachShader>
	<beginQuery public="1" get="inline" set="null" line="3673" static="1"><f a="this:target:query">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></beginQuery>
	<beginTransformFeedback public="1" get="inline" set="null" line="3678" static="1"><f a="this:primitiveNode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></beginTransformFeedback>
	<bindAttribLocation public="1" get="inline" set="null" line="3683" static="1"><f a="this:program:index:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
	<bindBuffer public="1" get="inline" set="null" line="3688" static="1"><f a="this:target:buffer">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBuffer>
	<bindBufferBase public="1" get="inline" set="null" line="3693" static="1"><f a="this:target:index:buffer">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBufferBase>
	<bindBufferRange public="1" get="inline" set="null" line="3698" static="1"><f a="this:target:index:buffer:offset:size">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bindBufferRange>
	<bindFramebuffer public="1" get="inline" set="null" line="3703" static="1"><f a="this:target:framebuffer">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
	<bindRenderbuffer public="1" get="inline" set="null" line="3708" static="1"><f a="this:target:renderbuffer">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
	<bindSampler public="1" get="inline" set="null" line="3713" static="1"><f a="this:unit:sampler">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></bindSampler>
	<bindTexture public="1" get="inline" set="null" line="3718" static="1"><f a="this:target:texture">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture>
	<bindTransformFeedback public="1" get="inline" set="null" line="3723" static="1"><f a="this:target:transformFeedback">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></bindTransformFeedback>
	<bindVertexArray public="1" get="inline" set="null" line="3728" static="1"><f a="this:vertexArray">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></bindVertexArray>
	<blendColor public="1" get="inline" set="null" line="3733" static="1"><f a="this:red:green:blue:alpha">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
	<blendEquation public="1" get="inline" set="null" line="3738" static="1"><f a="this:mode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
	<blendEquationSeparate public="1" get="inline" set="null" line="3743" static="1"><f a="this:modeRGB:modeAlpha">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
	<blendFunc public="1" get="inline" set="null" line="3748" static="1"><f a="this:sfactor:dfactor">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
	<blendFuncSeparate public="1" get="inline" set="null" line="3753" static="1"><f a="this:srcRGB:dstRGB:srcAlpha:dstAlpha">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
	<blitFramebuffer public="1" get="inline" set="null" line="3758" static="1"><f a="this:srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blitFramebuffer>
	<bufferData public="1" set="method" line="3764" static="1">
		<f a="this:target:srcData:usage:?srcOffset:?length" v="::::0:0">
			<d/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ length : 0, srcOffset : 0 }</e></m></meta>
	</bufferData>
	<bufferSubData public="1" get="inline" set="null" line="3777" static="1">
		<f a="this:target:offset:srcData:?srcOffset:?length" v="::::0:">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</bufferSubData>
	<checkFramebufferStatus public="1" get="inline" set="null" line="3788" static="1"><f a="this:target">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
	<clear public="1" get="inline" set="null" line="3793" static="1"><f a="this:mask">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
	<clearBufferfi public="1" get="inline" set="null" line="3798" static="1"><f a="this:buffer:drawbuffer:depth:stencil">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
	<clearBufferfv public="1" set="method" line="3803" static="1">
		<f a="this:buffer:drawbuffer:values:?srcOffset" v="::::0">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</clearBufferfv>
	<clearBufferiv public="1" set="method" line="3809" static="1"><f a="this:buffer:drawbuffer:values:?srcOffset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferiv>
	<clearBufferuiv public="1" set="method" line="3815" static="1"><f a="this:buffer:drawbuffer:values:?srcOffset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferuiv>
	<clearColor public="1" get="inline" set="null" line="3821" static="1"><f a="this:red:green:blue:alpha">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
	<clearDepth public="1" get="inline" set="null" line="3826" static="1"><f a="this:depth">
	<d/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
	<clearStencil public="1" get="inline" set="null" line="3831" static="1"><f a="this:s">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
	<clientWaitSync public="1" get="inline" set="null" line="3836" static="1"><f a="this:sync:flags:timeout">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></clientWaitSync>
	<colorMask public="1" get="inline" set="null" line="3841" static="1"><f a="this:red:green:blue:alpha">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
	<compileShader public="1" get="inline" set="null" line="3846" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></compileShader>
	<compressedTexImage2D public="1" set="method" line="3854" static="1">
		<f a="this:target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</compressedTexImage2D>
	<compressedTexImage3D public="1" set="method" line="3869" static="1">
		<f a="this:target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::::0:">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</compressedTexImage3D>
	<compressedTexSubImage2D public="1" get="inline" set="null" line="3879" static="1">
		<f a="this:target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v=":::::::::0:">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</compressedTexSubImage2D>
	<compressedTexSubImage3D public="1" get="inline" set="null" line="3894" static="1">
		<f a="this:target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v=":::::::::::0:">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</compressedTexSubImage3D>
	<copyBufferSubData public="1" get="inline" set="null" line="3901" static="1"><f a="this:readTarget:writeTarget:readOffset:writeOffset:size">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyBufferSubData>
	<copyTexImage2D public="1" get="inline" set="null" line="3906" static="1"><f a="this:target:level:internalformat:x:y:width:height:border">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
	<copyTexSubImage2D public="1" get="inline" set="null" line="3911" static="1"><f a="this:target:level:xoffset:yoffset:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
	<copyTexSubImage3D public="1" get="inline" set="null" line="3917" static="1"><f a="this:target:level:xoffset:yoffset:zoffset:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage3D>
	<createBuffer public="1" get="inline" set="null" line="3922" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLBuffer"/>
</f></createBuffer>
	<createFramebuffer public="1" get="inline" set="null" line="3927" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
</f></createFramebuffer>
	<createProgram public="1" get="inline" set="null" line="3932" static="1"><f a="this">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
</f></createProgram>
	<createQuery public="1" get="inline" set="null" line="3937" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
</f></createQuery>
	<createRenderbuffer public="1" get="inline" set="null" line="3942" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
</f></createRenderbuffer>
	<createSampler public="1" get="inline" set="null" line="3947" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
</f></createSampler>
	<createShader public="1" get="inline" set="null" line="3952" static="1"><f a="this:type">
	<d/>
	<x path="Int"/>
	<x path="lime.graphics.opengl.GLShader"/>
</f></createShader>
	<createTexture public="1" get="inline" set="null" line="3957" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLTexture"/>
</f></createTexture>
	<createTransformFeedback public="1" get="inline" set="null" line="3962" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
</f></createTransformFeedback>
	<createVertexArray public="1" get="inline" set="null" line="3967" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
</f></createVertexArray>
	<cullFace public="1" get="inline" set="null" line="3972" static="1"><f a="this:mode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
	<deleteBuffer public="1" get="inline" set="null" line="3977" static="1"><f a="this:buffer">
	<d/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
	<deleteFramebuffer public="1" get="inline" set="null" line="3982" static="1"><f a="this:framebuffer">
	<d/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
	<deleteProgram public="1" get="inline" set="null" line="3987" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></deleteProgram>
	<deleteQuery public="1" get="inline" set="null" line="3992" static="1"><f a="this:query">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></deleteQuery>
	<deleteRenderbuffer public="1" get="inline" set="null" line="3997" static="1"><f a="this:renderbuffer">
	<d/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
	<deleteSampler public="1" get="inline" set="null" line="4002" static="1"><f a="this:sampler">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></deleteSampler>
	<deleteShader public="1" get="inline" set="null" line="4007" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></deleteShader>
	<deleteSync public="1" get="inline" set="null" line="4012" static="1"><f a="this:sync">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Void"/>
</f></deleteSync>
	<deleteTexture public="1" get="inline" set="null" line="4017" static="1"><f a="this:texture">
	<d/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></deleteTexture>
	<deleteTransformFeedback public="1" get="inline" set="null" line="4022" static="1"><f a="this:transformFeedback">
	<d/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></deleteTransformFeedback>
	<deleteVertexArray public="1" get="inline" set="null" line="4027" static="1"><f a="this:vertexArray">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></deleteVertexArray>
	<depthFunc public="1" get="inline" set="null" line="4032" static="1"><f a="this:func">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
	<depthMask public="1" get="inline" set="null" line="4037" static="1"><f a="this:flag">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
	<depthRange public="1" get="inline" set="null" line="4042" static="1"><f a="this:zNear:zFar">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
	<detachShader public="1" get="inline" set="null" line="4047" static="1"><f a="this:program:shader">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></detachShader>
	<disable public="1" get="inline" set="null" line="4052" static="1"><f a="this:cap">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
	<disableVertexAttribArray public="1" get="inline" set="null" line="4057" static="1"><f a="this:index">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
	<drawArrays public="1" get="inline" set="null" line="4062" static="1"><f a="this:mode:first:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
	<drawArraysInstanced public="1" get="inline" set="null" line="4067" static="1"><f a="this:mode:first:count:instanceCount">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArraysInstanced>
	<drawBuffers public="1" get="inline" set="null" line="4072" static="1"><f a="this:buffers">
	<d/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></drawBuffers>
	<drawElements public="1" get="inline" set="null" line="4077" static="1"><f a="this:mode:count:type:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawElements>
	<drawElementsInstanced public="1" get="inline" set="null" line="4082" static="1"><f a="this:mode:count:type:offset:instanceCount">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElementsInstanced>
	<drawRangeElements public="1" get="inline" set="null" line="4087" static="1"><f a="this:mode:start:end:count:type:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawRangeElements>
	<enable public="1" get="inline" set="null" line="4092" static="1"><f a="this:cap">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
	<enableVertexAttribArray public="1" get="inline" set="null" line="4097" static="1"><f a="this:index">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
	<endQuery public="1" get="inline" set="null" line="4102" static="1"><f a="this:target">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></endQuery>
	<endTransformFeedback public="1" get="inline" set="null" line="4107" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></endTransformFeedback>
	<fenceSync public="1" get="inline" set="null" line="4112" static="1"><f a="this:condition:flags">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSync"/>
</f></fenceSync>
	<finish public="1" get="inline" set="null" line="4117" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></finish>
	<flush public="1" get="inline" set="null" line="4122" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></flush>
	<framebufferRenderbuffer public="1" get="inline" set="null" line="4127" static="1"><f a="this:target:attachment:renderbuffertarget:renderbuffer">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
	<framebufferTexture2D public="1" get="inline" set="null" line="4132" static="1"><f a="this:target:attachment:textarget:texture:level">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
	<framebufferTextureLayer public="1" get="inline" set="null" line="4137" static="1"><f a="this:target:attachment:texture:level:layer">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTextureLayer>
	<frontFace public="1" get="inline" set="null" line="4142" static="1"><f a="this:mode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
	<generateMipmap public="1" get="inline" set="null" line="4147" static="1"><f a="this:target">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
	<getActiveAttrib public="1" get="inline" set="null" line="4152" static="1"><f a="this:program:index">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveAttrib>
	<getActiveUniform public="1" get="inline" set="null" line="4157" static="1"><f a="this:program:index">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveUniform>
	<getActiveUniformBlockName public="1" get="inline" set="null" line="4162" static="1"><f a="this:program:uniformBlockIndex">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
</f></getActiveUniformBlockName>
	<getActiveUniformBlockParameter public="1" get="inline" set="null" line="4167" static="1"><f a="this:program:uniformBlockIndex:pname">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getActiveUniformBlockParameter>
	<getActiveUniforms public="1" get="inline" set="null" line="4172" static="1"><f a="this:program:uniformIndices:pname">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<d/>
</f></getActiveUniforms>
	<getAttachedShaders public="1" get="inline" set="null" line="4177" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
</f></getAttachedShaders>
	<getAttribLocation public="1" get="inline" set="null" line="4182" static="1"><f a="this:program:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
	<getBufferParameter public="1" get="inline" set="null" line="4187" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
	<getBufferSubData public="1" get="inline" set="null" line="4193" static="1">
		<f a="this:target:srcByteOffset:dstData:?srcOffset:?length" v="::::0:">
			<d/>
			<x path="Int"/>
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.ArrayBuffer"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</getBufferSubData>
	<getContextAttributes public="1" get="inline" set="null" line="4205" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLContextAttributes"/>
</f></getContextAttributes>
	<getError public="1" get="inline" set="null" line="4210" static="1"><f a="this">
	<d/>
	<x path="Int"/>
</f></getError>
	<getExtension public="1" get="inline" set="null" line="4215" static="1"><f a="this:name">
	<d/>
	<c path="String"/>
	<d/>
</f></getExtension>
	<getFragDataLocation public="1" get="inline" set="null" line="4220" static="1"><f a="this:program:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getFragDataLocation>
	<getFramebufferAttachmentParameter public="1" get="inline" set="null" line="4225" static="1"><f a="this:target:attachment:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getFramebufferAttachmentParameter>
	<getIndexedParameter public="1" get="inline" set="null" line="4230" static="1"><f a="this:target:index">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getIndexedParameter>
	<getInternalformatParameter public="1" get="inline" set="null" line="4235" static="1"><f a="this:target:internalformat:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getInternalformatParameter>
	<getParameter public="1" get="inline" set="null" line="4240" static="1"><f a="this:pname">
	<d/>
	<x path="Int"/>
	<d/>
</f></getParameter>
	<getProgramInfoLog public="1" get="inline" set="null" line="4245" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
</f></getProgramInfoLog>
	<getProgramParameter public="1" get="inline" set="null" line="4250" static="1"><f a="this:program:pname">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
	<getQuery public="1" get="inline" set="null" line="4255" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
</f></getQuery>
	<getQueryParameter public="1" get="inline" set="null" line="4260" static="1"><f a="this:query:pname">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<d/>
</f></getQueryParameter>
	<getRenderbufferParameter public="1" get="inline" set="null" line="4265" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
	<getSamplerParameter public="1" get="inline" set="null" line="4270" static="1"><f a="this:sampler:pname">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<d/>
</f></getSamplerParameter>
	<getShaderInfoLog public="1" get="inline" set="null" line="4275" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderInfoLog>
	<getShaderParameter public="1" get="inline" set="null" line="4280" static="1"><f a="this:shader:pname">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
	<getShaderPrecisionFormat public="1" get="inline" set="null" line="4285" static="1"><f a="this:shadertype:precisiontype">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
	<getShaderSource public="1" get="inline" set="null" line="4290" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderSource>
	<getSupportedExtensions public="1" get="inline" set="null" line="4295" static="1"><f a="this">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></getSupportedExtensions>
	<getSyncParameter public="1" get="inline" set="null" line="4300" static="1"><f a="this:sync:pname">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<d/>
</f></getSyncParameter>
	<getTexParameter public="1" get="inline" set="null" line="4305" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
	<getTransformFeedbackVarying public="1" get="inline" set="null" line="4310" static="1"><f a="this:program:index">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getTransformFeedbackVarying>
	<getUniform public="1" get="inline" set="null" line="4315" static="1"><f a="this:program:location">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<d/>
</f></getUniform>
	<getUniformBlockIndex public="1" get="inline" set="null" line="4320" static="1"><f a="this:program:uniformBlockName">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getUniformBlockIndex>
	<getUniformIndices public="1" get="inline" set="null" line="4325" static="1"><f a="this:program:uniformNames">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="Int"/></c>
</f></getUniformIndices>
	<getUniformLocation public="1" get="inline" set="null" line="4330" static="1"><f a="this:program:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
</f></getUniformLocation>
	<getVertexAttrib public="1" get="inline" set="null" line="4335" static="1"><f a="this:index:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getVertexAttrib>
	<getVertexAttribOffset public="1" get="inline" set="null" line="4340" static="1"><f a="this:index:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></getVertexAttribOffset>
	<hint public="1" get="inline" set="null" line="4345" static="1"><f a="this:target:mode">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
	<invalidateFramebuffer public="1" get="inline" set="null" line="4350" static="1"><f a="this:target:attachments">
	<d/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></invalidateFramebuffer>
	<invalidateSubFramebuffer public="1" get="inline" set="null" line="4355" static="1"><f a="this:target:attachments:x:y:width:height">
	<d/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></invalidateSubFramebuffer>
	<isBuffer public="1" get="inline" set="null" line="4360" static="1"><f a="this:buffer">
	<d/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
	<isContextLost public="1" get="inline" set="null" line="4365" static="1"><f a="this">
	<d/>
	<x path="Bool"/>
</f></isContextLost>
	<isEnabled public="1" get="inline" set="null" line="4370" static="1"><f a="this:cap">
	<d/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
	<isFramebuffer public="1" get="inline" set="null" line="4375" static="1"><f a="this:framebuffer">
	<d/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
	<isProgram public="1" get="inline" set="null" line="4380" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Bool"/>
</f></isProgram>
	<isQuery public="1" get="inline" set="null" line="4385" static="1"><f a="this:query">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Bool"/>
</f></isQuery>
	<isRenderbuffer public="1" get="inline" set="null" line="4390" static="1"><f a="this:renderbuffer">
	<d/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
	<isSampler public="1" get="inline" set="null" line="4395" static="1"><f a="this:sampler">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Bool"/>
</f></isSampler>
	<isShader public="1" get="inline" set="null" line="4400" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Bool"/>
</f></isShader>
	<isSync public="1" get="inline" set="null" line="4405" static="1"><f a="this:sync">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Bool"/>
</f></isSync>
	<isTexture public="1" get="inline" set="null" line="4410" static="1"><f a="this:texture">
	<d/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Bool"/>
</f></isTexture>
	<isTransformFeedback public="1" get="inline" set="null" line="4415" static="1"><f a="this:transformFeedback">
	<d/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Bool"/>
</f></isTransformFeedback>
	<isVertexArray public="1" get="inline" set="null" line="4420" static="1"><f a="this:vertexArray">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Bool"/>
</f></isVertexArray>
	<lineWidth public="1" get="inline" set="null" line="4425" static="1"><f a="this:width">
	<d/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
	<linkProgram public="1" get="inline" set="null" line="4430" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></linkProgram>
	<pauseTransformFeedback public="1" get="inline" set="null" line="4435" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></pauseTransformFeedback>
	<pixelStorei public="1" get="inline" set="null" line="4440" static="1"><f a="this:pname:param">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
	<polygonOffset public="1" get="inline" set="null" line="4445" static="1"><f a="this:factor:units">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
	<readBuffer public="1" get="inline" set="null" line="4450" static="1"><f a="this:src">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBuffer>
	<readPixels public="1" get="inline" set="null" line="4457" static="1">
		<f a="this:x:y:width:height:format:type:pixels:?dstOffset" v="::::::::0">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ dstOffset : 0 }</e></m></meta>
	</readPixels>
	<renderbufferStorage public="1" get="inline" set="null" line="4466" static="1"><f a="this:target:internalformat:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
	<renderbufferStorageMultisample public="1" get="inline" set="null" line="4471" static="1"><f a="this:target:samples:internalformat:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorageMultisample>
	<resumeTransformFeedback public="1" get="inline" set="null" line="4476" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></resumeTransformFeedback>
	<sampleCoverage public="1" get="inline" set="null" line="4481" static="1"><f a="this:value:invert">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
	<samplerParameterf public="1" get="inline" set="null" line="4486" static="1"><f a="this:sampler:pname:param">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
	<samplerParameteri public="1" get="inline" set="null" line="4491" static="1"><f a="this:sampler:pname:param">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
	<scissor public="1" get="inline" set="null" line="4496" static="1"><f a="this:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
	<shaderSource public="1" get="inline" set="null" line="4501" static="1"><f a="this:shader:source">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
	<stencilFunc public="1" get="inline" set="null" line="4506" static="1"><f a="this:func:ref:mask">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
	<stencilFuncSeparate public="1" get="inline" set="null" line="4511" static="1"><f a="this:face:func:ref:mask">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
	<stencilMask public="1" get="inline" set="null" line="4516" static="1"><f a="this:mask">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
	<stencilMaskSeparate public="1" get="inline" set="null" line="4521" static="1"><f a="this:face:mask">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
	<stencilOp public="1" get="inline" set="null" line="4526" static="1"><f a="this:fail:zfail:zpass">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
	<stencilOpSeparate public="1" get="inline" set="null" line="4531" static="1"><f a="this:face:fail:zfail:zpass">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
	<texImage2D public="1" get="inline" set="null" line="4539" static="1">
		<f a="this:target:level:internalformat:width:height:border:format:type:srcData:?srcOffset" v="::::::::::0">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</texImage2D>
	<texImage3D public="1" get="inline" set="null" line="4554" static="1">
		<f a="this:target:level:internalformat:width:height:depth:border:format:type:srcData:?srcOffset" v=":::::::::::0">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</texImage3D>
	<texStorage2D public="1" get="inline" set="null" line="4560" static="1"><f a="this:target:level:internalformat:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage2D>
	<texStorage3D public="1" get="inline" set="null" line="4565" static="1"><f a="this:target:level:internalformat:width:height:depth">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage3D>
	<texParameterf public="1" get="inline" set="null" line="4570" static="1"><f a="this:target:pname:param">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
	<texParameteri public="1" get="inline" set="null" line="4575" static="1"><f a="this:target:pname:param">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
	<texSubImage2D public="1" get="inline" set="null" line="4583" static="1">
		<f a="this:target:level:xoffset:yoffset:width:height:format:type:srcData:?srcOffset" v="::::::::::0">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</texSubImage2D>
	<texSubImage3D public="1" get="inline" set="null" line="4596" static="1">
		<f a="this:target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v="::::::::::::0">
			<d/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</texSubImage3D>
	<transformFeedbackVaryings public="1" get="inline" set="null" line="4602" static="1"><f a="this:program:varyings:bufferMode">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></transformFeedbackVaryings>
	<uniform1f public="1" get="inline" set="null" line="4607" static="1"><f a="this:location:v0">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
	<uniform1fv public="1" get="inline" set="null" line="4613" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1fv>
	<uniform1i public="1" get="inline" set="null" line="4621" static="1"><f a="this:location:v0">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
	<uniform1iv public="1" get="inline" set="null" line="4627" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1iv>
	<uniform1ui public="1" get="inline" set="null" line="4635" static="1"><f a="this:location:v0">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
	<uniform1uiv public="1" get="inline" set="null" line="4640" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1uiv>
	<uniform2f public="1" get="inline" set="null" line="4645" static="1"><f a="this:location:v0:v1">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
	<uniform2fv public="1" get="inline" set="null" line="4651" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2fv>
	<uniform2i public="1" get="inline" set="null" line="4659" static="1"><f a="this:location:v0:v1">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
	<uniform2iv public="1" get="inline" set="null" line="4665" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2iv>
	<uniform2ui public="1" get="inline" set="null" line="4673" static="1"><f a="this:location:v0:v1">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
	<uniform2uiv public="1" get="inline" set="null" line="4679" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2uiv>
	<uniform3f public="1" get="inline" set="null" line="4684" static="1"><f a="this:location:v0:v1:v2">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
	<uniform3fv public="1" get="inline" set="null" line="4691" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3fv>
	<uniform3i public="1" get="inline" set="null" line="4700" static="1"><f a="this:location:v0:v1:v2">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
	<uniform3iv public="1" get="inline" set="null" line="4707" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3iv>
	<uniform3ui public="1" get="inline" set="null" line="4716" static="1"><f a="this:location:v0:v1:v2">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
	<uniform3uiv public="1" get="inline" set="null" line="4722" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3uiv>
	<uniform4f public="1" get="inline" set="null" line="4728" static="1"><f a="this:location:v0:v1:v2:v3">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
	<uniform4fv public="1" get="inline" set="null" line="4735" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4fv>
	<uniform4i public="1" get="inline" set="null" line="4745" static="1"><f a="this:location:v0:v1:v2:v3">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
	<uniform4iv public="1" get="inline" set="null" line="4752" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4iv>
	<uniform4ui public="1" get="inline" set="null" line="4762" static="1"><f a="this:location:v0:v1:v2:v3">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
	<uniform4uiv public="1" get="inline" set="null" line="4768" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4uiv>
	<uniformBlockBinding public="1" get="inline" set="null" line="4774" static="1"><f a="this:program:uniformBlockIndex:uniformBlockBinding">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniformBlockBinding>
	<uniformMatrix2fv public="1" set="method" line="4781" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix2fv>
	<uniformMatrix2x3fv public="1" set="method" line="4796" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix2x3fv>
	<uniformMatrix2x4fv public="1" set="method" line="4808" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix2x4fv>
	<uniformMatrix3fv public="1" set="method" line="4821" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix3fv>
	<uniformMatrix3x2fv public="1" set="method" line="4836" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix3x2fv>
	<uniformMatrix3x4fv public="1" set="method" line="4848" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix3x4fv>
	<uniformMatrix4fv public="1" set="method" line="4861" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix4fv>
	<uniformMatrix4x2fv public="1" set="method" line="4876" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix4x2fv>
	<uniformMatrix4x3fv public="1" set="method" line="4888" static="1">
		<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
			<d/>
			<t path="lime.graphics.opengl.GLUniformLocation"/>
			<x path="Bool"/>
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</uniformMatrix4x3fv>
	<useProgram public="1" get="inline" set="null" line="4899" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
	<validateProgram public="1" get="inline" set="null" line="4904" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></validateProgram>
	<vertexAttrib1f public="1" get="inline" set="null" line="4909" static="1"><f a="this:indx:x">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
	<vertexAttrib1fv public="1" get="inline" set="null" line="4915" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
	<vertexAttrib2f public="1" get="inline" set="null" line="4920" static="1"><f a="this:indx:x:y">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
	<vertexAttrib2fv public="1" get="inline" set="null" line="4926" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
	<vertexAttrib3f public="1" get="inline" set="null" line="4931" static="1"><f a="this:indx:x:y:z">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
	<vertexAttrib3fv public="1" get="inline" set="null" line="4937" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
	<vertexAttrib4f public="1" get="inline" set="null" line="4943" static="1"><f a="this:indx:x:y:z:w">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
	<vertexAttrib4fv public="1" get="inline" set="null" line="4949" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
	<vertexAttribDivisor public="1" get="inline" set="null" line="4954" static="1"><f a="this:index:divisor">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribDivisor>
	<vertexAttribI4i public="1" get="inline" set="null" line="4960" static="1"><f a="this:indx:x:y:z:w">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
	<vertexAttribI4iv public="1" get="inline" set="null" line="4966" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttribI4iv>
	<vertexAttribI4ui public="1" get="inline" set="null" line="4972" static="1"><f a="this:indx:x:y:z:w">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
	<vertexAttribI4uiv public="1" get="inline" set="null" line="4978" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttribI4uiv>
	<vertexAttribIPointer public="1" get="inline" set="null" line="4984" static="1"><f a="this:index:size:type:stride:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribIPointer>
	<vertexAttribPointer public="1" get="inline" set="null" line="4990" static="1"><f a="this:indx:size:type:normalized:stride:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribPointer>
	<viewport public="1" get="inline" set="null" line="4995" static="1"><f a="this:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
	<waitSync public="1" get="inline" set="null" line="5000" static="1"><f a="this:sync:flags:timeout">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></waitSync>
	<fromRenderContext set="method" line="5005" static="1">
		<f a="context">
			<c path="lime.graphics.RenderContext"/>
			<x path="lime.graphics.WebGL2RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRenderContext>
	<fromGL set="method" line="5017" static="1">
		<f a="gl">
			<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
			<x path="lime.graphics.WebGL2RenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromGL>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>lime.graphics.RenderContext</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.utils.BytePointerData" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/BytePointer.hx" module="lime.utils.BytePointer">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<offset public="1"><x path="Int"/></offset>
		<new public="1" set="method" line="205"><f a="bytes:offset">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/WebGL2RenderContext.hx" private="1" module="lime.graphics.WebGL2RenderContext" final="1">
		<__tempPointer expr="new BytePointer()" line="312" static="1">
			<x path="lime.utils.BytePointer"/>
			<meta><m n=":value"><e>new BytePointer()</e></m></meta>
		</__tempPointer>
		<DEPTH_BUFFER_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_BUFFER_BIT>
		<POINTS public="1" get="accessor" set="null" static="1"><x path="Int"/></POINTS>
		<LINES public="1" get="accessor" set="null" static="1"><x path="Int"/></LINES>
		<LINE_LOOP public="1" get="accessor" set="null" static="1"><x path="Int"/></LINE_LOOP>
		<LINE_STRIP public="1" get="accessor" set="null" static="1"><x path="Int"/></LINE_STRIP>
		<TRIANGLES public="1" get="accessor" set="null" static="1"><x path="Int"/></TRIANGLES>
		<TRIANGLE_STRIP public="1" get="accessor" set="null" static="1"><x path="Int"/></TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="accessor" set="null" static="1"><x path="Int"/></TRIANGLE_FAN>
		<ZERO public="1" get="accessor" set="null" static="1"><x path="Int"/></ZERO>
		<ONE public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE>
		<SRC_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="accessor" set="null" static="1"><x path="Int"/></SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="accessor" set="null" static="1"><x path="Int"/></FUNC_ADD>
		<BLEND_EQUATION public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="accessor" set="null" static="1"><x path="Int"/></FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="accessor" set="null" static="1"><x path="Int"/></FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="accessor" set="null" static="1"><x path="Int"/></STREAM_DRAW>
		<STATIC_DRAW public="1" get="accessor" set="null" static="1"><x path="Int"/></STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="accessor" set="null" static="1"><x path="Int"/></DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="accessor" set="null" static="1"><x path="Int"/></BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="accessor" set="null" static="1"><x path="Int"/></CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRONT>
		<BACK public="1" get="accessor" set="null" static="1"><x path="Int"/></BACK>
		<FRONT_AND_BACK public="1" get="accessor" set="null" static="1"><x path="Int"/></FRONT_AND_BACK>
		<CULL_FACE public="1" get="accessor" set="null" static="1"><x path="Int"/></CULL_FACE>
		<BLEND public="1" get="accessor" set="null" static="1"><x path="Int"/></BLEND>
		<DITHER public="1" get="accessor" set="null" static="1"><x path="Int"/></DITHER>
		<STENCIL_TEST public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_TEST>
		<DEPTH_TEST public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_TEST>
		<SCISSOR_TEST public="1" get="accessor" set="null" static="1"><x path="Int"/></SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="accessor" set="null" static="1"><x path="Int"/></POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="accessor" set="null" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_ENUM public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_VALUE>
		<INVALID_OPERATION public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="accessor" set="null" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<CW public="1" get="accessor" set="null" static="1"><x path="Int"/></CW>
		<CCW public="1" get="accessor" set="null" static="1"><x path="Int"/></CCW>
		<LINE_WIDTH public="1" get="accessor" set="null" static="1"><x path="Int"/></LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="accessor" set="null" static="1"><x path="Int"/></ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="accessor" set="null" static="1"><x path="Int"/></ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="accessor" set="null" static="1"><x path="Int"/></CULL_FACE_MODE>
		<FRONT_FACE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRONT_FACE>
		<DEPTH_RANGE public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="accessor" set="null" static="1"><x path="Int"/></VIEWPORT>
		<SCISSOR_BOX public="1" get="accessor" set="null" static="1"><x path="Int"/></SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></SUBPIXEL_BITS>
		<RED_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></RED_BITS>
		<GREEN_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></GREEN_BITS>
		<BLUE_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></BLUE_BITS>
		<ALPHA_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></ALPHA_BITS>
		<DEPTH_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_BITS>
		<STENCIL_BITS public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="accessor" set="null" static="1"><x path="Int"/></POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_BUFFERS>
		<SAMPLES public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="accessor" set="null" static="1"><x path="Int"/></COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="accessor" set="null" static="1"><x path="Int"/></DONT_CARE>
		<FASTEST public="1" get="accessor" set="null" static="1"><x path="Int"/></FASTEST>
		<NICEST public="1" get="accessor" set="null" static="1"><x path="Int"/></NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="accessor" set="null" static="1"><x path="Int"/></GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="accessor" set="null" static="1"><x path="Int"/></BYTE>
		<UNSIGNED_BYTE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_BYTE>
		<SHORT public="1" get="accessor" set="null" static="1"><x path="Int"/></SHORT>
		<UNSIGNED_SHORT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT>
		<INT public="1" get="accessor" set="null" static="1"><x path="Int"/></INT>
		<UNSIGNED_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT>
		<FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT>
		<DEPTH_COMPONENT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT>
		<ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></ALPHA>
		<RGB public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB>
		<RGBA public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA>
		<LUMINANCE public="1" get="accessor" set="null" static="1"><x path="Int"/></LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="accessor" set="null" static="1"><x path="Int"/></LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></SHADER_TYPE>
		<DELETE_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></DELETE_STATUS>
		<LINK_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></LINK_STATUS>
		<VALIDATE_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="accessor" set="null" static="1"><x path="Int"/></ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="accessor" set="null" static="1"><x path="Int"/></SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="accessor" set="null" static="1"><x path="Int"/></CURRENT_PROGRAM>
		<NEVER public="1" get="accessor" set="null" static="1"><x path="Int"/></NEVER>
		<LESS public="1" get="accessor" set="null" static="1"><x path="Int"/></LESS>
		<EQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></EQUAL>
		<LEQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></LEQUAL>
		<GREATER public="1" get="accessor" set="null" static="1"><x path="Int"/></GREATER>
		<NOTEQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></NOTEQUAL>
		<GEQUAL public="1" get="accessor" set="null" static="1"><x path="Int"/></GEQUAL>
		<ALWAYS public="1" get="accessor" set="null" static="1"><x path="Int"/></ALWAYS>
		<KEEP public="1" get="accessor" set="null" static="1"><x path="Int"/></KEEP>
		<REPLACE public="1" get="accessor" set="null" static="1"><x path="Int"/></REPLACE>
		<INCR public="1" get="accessor" set="null" static="1"><x path="Int"/></INCR>
		<DECR public="1" get="accessor" set="null" static="1"><x path="Int"/></DECR>
		<INVERT public="1" get="accessor" set="null" static="1"><x path="Int"/></INVERT>
		<INCR_WRAP public="1" get="accessor" set="null" static="1"><x path="Int"/></INCR_WRAP>
		<DECR_WRAP public="1" get="accessor" set="null" static="1"><x path="Int"/></DECR_WRAP>
		<VENDOR public="1" get="accessor" set="null" static="1"><x path="Int"/></VENDOR>
		<RENDERER public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERER>
		<VERSION public="1" get="accessor" set="null" static="1"><x path="Int"/></VERSION>
		<NEAREST public="1" get="accessor" set="null" static="1"><x path="Int"/></NEAREST>
		<LINEAR public="1" get="accessor" set="null" static="1"><x path="Int"/></LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="accessor" set="null" static="1"><x path="Int"/></NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="accessor" set="null" static="1"><x path="Int"/></LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="accessor" set="null" static="1"><x path="Int"/></NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="accessor" set="null" static="1"><x path="Int"/></LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_2D>
		<TEXTURE public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE0>
		<TEXTURE1 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE1>
		<TEXTURE2 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE2>
		<TEXTURE3 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE3>
		<TEXTURE4 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE4>
		<TEXTURE5 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE5>
		<TEXTURE6 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE6>
		<TEXTURE7 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE7>
		<TEXTURE8 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE8>
		<TEXTURE9 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE9>
		<TEXTURE10 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE10>
		<TEXTURE11 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE11>
		<TEXTURE12 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE12>
		<TEXTURE13 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE13>
		<TEXTURE14 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE14>
		<TEXTURE15 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE15>
		<TEXTURE16 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE16>
		<TEXTURE17 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE17>
		<TEXTURE18 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE18>
		<TEXTURE19 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE19>
		<TEXTURE20 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE20>
		<TEXTURE21 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE21>
		<TEXTURE22 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE22>
		<TEXTURE23 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE23>
		<TEXTURE24 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE24>
		<TEXTURE25 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE25>
		<TEXTURE26 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE26>
		<TEXTURE27 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE27>
		<TEXTURE28 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE28>
		<TEXTURE29 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE29>
		<TEXTURE30 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE30>
		<TEXTURE31 public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_TEXTURE>
		<REPEAT public="1" get="accessor" set="null" static="1"><x path="Int"/></REPEAT>
		<CLAMP_TO_EDGE public="1" get="accessor" set="null" static="1"><x path="Int"/></CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="accessor" set="null" static="1"><x path="Int"/></MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_VEC4>
		<INT_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_VEC2>
		<INT_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_VEC3>
		<INT_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_VEC4>
		<BOOL public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL>
		<BOOL_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL_VEC2>
		<BOOL_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL_VEC3>
		<BOOL_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT4>
		<SAMPLER_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<COMPILE_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></COMPILE_STATUS>
		<LOW_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></HIGH_FLOAT>
		<LOW_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></LOW_INT>
		<MEDIUM_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></MEDIUM_INT>
		<HIGH_INT public="1" get="accessor" set="null" static="1"><x path="Int"/></HIGH_INT>
		<FRAMEBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER>
		<RENDERBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER>
		<RGBA4 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA4>
		<RGB5_A1 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB5_A1>
		<RGB565 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB565>
		<DEPTH_COMPONENT16 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT16>
		<STENCIL_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="accessor" set="null" static="1"><x path="Int"/></NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></BROWSER_DEFAULT_WEBGL>
		<READ_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="accessor" set="null" static="1"><x path="Int"/></PACK_SKIP_PIXELS>
		<TEXTURE_BINDING_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNPACK_IMAGE_HEIGHT>
		<MAX_3D_TEXTURE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_3D_TEXTURE_SIZE>
		<MAX_ELEMENTS_VERTICES public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ELEMENTS_INDICES>
		<MAX_TEXTURE_LOD_BIAS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TEXTURE_LOD_BIAS>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_COMPONENTS>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="accessor" set="null" static="1"><x path="Int"/></MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VARYING_COMPONENTS>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAGMENT_SHADER_DERIVATIVE_HINT>
		<RASTERIZER_DISCARD public="1" get="accessor" set="null" static="1"><x path="Int"/></RASTERIZER_DISCARD>
		<VERTEX_ARRAY_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ARRAY_BINDING>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_SERVER_WAIT_TIMEOUT>
		<MAX_ELEMENT_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_ELEMENT_INDEX>
		<RED public="1" get="accessor" set="null" static="1"><x path="Int"/></RED>
		<RGB8 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8>
		<RGBA8 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8>
		<RGB10_A2 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB10_A2>
		<TEXTURE_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_WRAP_R>
		<TEXTURE_MIN_LOD public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_MAX_LEVEL>
		<TEXTURE_COMPARE_MODE public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_COMPARE_FUNC>
		<SRGB public="1" get="accessor" set="null" static="1"><x path="Int"/></SRGB>
		<SRGB8 public="1" get="accessor" set="null" static="1"><x path="Int"/></SRGB8>
		<SRGB8_ALPHA8 public="1" get="accessor" set="null" static="1"><x path="Int"/></SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="accessor" set="null" static="1"><x path="Int"/></COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA32F>
		<RGB32F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB32F>
		<RGBA16F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA16F>
		<RGB16F public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB16F>
		<TEXTURE_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="accessor" set="null" static="1"><x path="Int"/></R11F_G11F_B10F>
		<RGB9_E5 public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB9_E5>
		<RGBA32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA32UI>
		<RGB32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB32UI>
		<RGBA16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA16UI>
		<RGB16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB16UI>
		<RGBA8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8UI>
		<RGB8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8UI>
		<RGBA32I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA32I>
		<RGB32I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB32I>
		<RGBA16I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA16I>
		<RGB16I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB16I>
		<RGBA8I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8I>
		<RGB8I public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8I>
		<RED_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RED_INTEGER>
		<RGB_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB_INTEGER>
		<RGBA_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA_INTEGER>
		<R8 public="1" get="accessor" set="null" static="1"><x path="Int"/></R8>
		<RG8 public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8>
		<R16F public="1" get="accessor" set="null" static="1"><x path="Int"/></R16F>
		<R32F public="1" get="accessor" set="null" static="1"><x path="Int"/></R32F>
		<RG16F public="1" get="accessor" set="null" static="1"><x path="Int"/></RG16F>
		<RG32F public="1" get="accessor" set="null" static="1"><x path="Int"/></RG32F>
		<R8I public="1" get="accessor" set="null" static="1"><x path="Int"/></R8I>
		<R8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></R8UI>
		<R16I public="1" get="accessor" set="null" static="1"><x path="Int"/></R16I>
		<R16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></R16UI>
		<R32I public="1" get="accessor" set="null" static="1"><x path="Int"/></R32I>
		<R32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></R32UI>
		<RG8I public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8I>
		<RG8UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8UI>
		<RG16I public="1" get="accessor" set="null" static="1"><x path="Int"/></RG16I>
		<RG16UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RG16UI>
		<RG32I public="1" get="accessor" set="null" static="1"><x path="Int"/></RG32I>
		<RG32UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RG32UI>
		<R8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></R8_SNORM>
		<RG8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></RG8_SNORM>
		<RGB8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB8_SNORM>
		<RGBA8_SNORM public="1" get="accessor" set="null" static="1"><x path="Int"/></RGBA8_SNORM>
		<RGB10_A2UI public="1" get="accessor" set="null" static="1"><x path="Int"/></RGB10_A2UI>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_IMMUTABLE_FORMAT>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="accessor" set="null" static="1"><x path="Int"/></TEXTURE_IMMUTABLE_LEVELS>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_2_10_10_10_REV>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_10F_11F_11F_REV>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_5_9_9_9_REV>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_32_UNSIGNED_INT_24_8_REV>
		<UNSIGNED_INT_24_8 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_24_8>
		<HALF_FLOAT public="1" get="accessor" set="null" static="1"><x path="Int"/></HALF_FLOAT>
		<RG public="1" get="accessor" set="null" static="1"><x path="Int"/></RG>
		<RG_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></RG_INTEGER>
		<INT_2_10_10_10_REV public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_2_10_10_10_REV>
		<CURRENT_QUERY public="1" get="accessor" set="null" static="1"><x path="Int"/></CURRENT_QUERY>
		<QUERY_RESULT public="1" get="accessor" set="null" static="1"><x path="Int"/></QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="accessor" set="null" static="1"><x path="Int"/></QUERY_RESULT_AVAILABLE>
		<ANY_SAMPLES_PASSED public="1" get="accessor" set="null" static="1"><x path="Int"/></ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="accessor" set="null" static="1"><x path="Int"/></ANY_SAMPLES_PASSED_CONSERVATIVE>
		<MAX_DRAW_BUFFERS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_BUFFER15>
		<MAX_COLOR_ATTACHMENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR_ATTACHMENT15>
		<SAMPLER_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D_SHADOW>
		<SAMPLER_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_CUBE_SHADOW>
		<INT_SAMPLER_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<MAX_SAMPLES public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_SAMPLES>
		<SAMPLER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></SAMPLER_BINDING>
		<PIXEL_PACK_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></PIXEL_UNPACK_BUFFER_BINDING>
		<COPY_READ_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></COPY_WRITE_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="accessor" set="null" static="1"><x path="Int"/></FLOAT_MAT4x3>
		<UNSIGNED_INT_VEC2 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_INT_VEC4>
		<UNSIGNED_NORMALIZED public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNED_NORMALIZED>
		<SIGNED_NORMALIZED public="1" get="accessor" set="null" static="1"><x path="Int"/></SIGNED_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_INTEGER>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="accessor" set="null" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_DIVISOR>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="accessor" set="null" static="1"><x path="Int"/></SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<TRANSFORM_FEEDBACK public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></TRANSFORM_FEEDBACK_BINDING>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_DEFAULT>
		<DEPTH24_STENCIL8 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH24_STENCIL8>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="accessor" set="null" static="1"><x path="Int"/></RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="accessor" set="null" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<UNIFORM_BUFFER public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="accessor" set="null" static="1"><x path="Int"/></ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="accessor" set="null" static="1"><x path="Int"/></UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<OBJECT_TYPE public="1" get="accessor" set="null" static="1"><x path="Int"/></OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_CONDITION>
		<SYNC_STATUS public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_STATUS>
		<SYNC_FLAGS public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_FLAGS>
		<SYNC_FENCE public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="accessor" set="null" static="1"><x path="Int"/></UNSIGNALED>
		<SIGNALED public="1" get="accessor" set="null" static="1"><x path="Int"/></SIGNALED>
		<ALREADY_SIGNALED public="1" get="accessor" set="null" static="1"><x path="Int"/></ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="accessor" set="null" static="1"><x path="Int"/></TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="accessor" set="null" static="1"><x path="Int"/></CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="accessor" set="null" static="1"><x path="Int"/></WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="accessor" set="null" static="1"><x path="Int"/></SYNC_FLUSH_COMMANDS_BIT>
		<COLOR public="1" get="accessor" set="null" static="1"><x path="Int"/></COLOR>
		<DEPTH public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH>
		<STENCIL public="1" get="accessor" set="null" static="1"><x path="Int"/></STENCIL>
		<MIN public="1" get="accessor" set="null" static="1"><x path="Int"/></MIN>
		<MAX public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX>
		<DEPTH_COMPONENT24 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT24>
		<STREAM_READ public="1" get="accessor" set="null" static="1"><x path="Int"/></STREAM_READ>
		<STREAM_COPY public="1" get="accessor" set="null" static="1"><x path="Int"/></STREAM_COPY>
		<STATIC_READ public="1" get="accessor" set="null" static="1"><x path="Int"/></STATIC_READ>
		<STATIC_COPY public="1" get="accessor" set="null" static="1"><x path="Int"/></STATIC_COPY>
		<DYNAMIC_READ public="1" get="accessor" set="null" static="1"><x path="Int"/></DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="accessor" set="null" static="1"><x path="Int"/></DYNAMIC_COPY>
		<DEPTH_COMPONENT32F public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="accessor" set="null" static="1"><x path="Int"/></DEPTH32F_STENCIL8>
		<INVALID_INDEX public="1" get="accessor" set="null" static="1"><x path="Int"/></INVALID_INDEX>
		<TIMEOUT_IGNORED public="1" get="accessor" set="null" static="1"><x path="Int"/></TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="accessor" set="null" static="1"><x path="Int"/></MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<get_DEPTH_BUFFER_BIT get="inline" set="null" line="873" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_BUFFER_BIT>
		<get_STENCIL_BUFFER_BIT get="inline" set="null" line="878" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BUFFER_BIT>
		<get_COLOR_BUFFER_BIT get="inline" set="null" line="883" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_BUFFER_BIT>
		<get_POINTS get="inline" set="null" line="888" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_POINTS>
		<get_LINES get="inline" set="null" line="893" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINES>
		<get_LINE_LOOP get="inline" set="null" line="898" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINE_LOOP>
		<get_LINE_STRIP get="inline" set="null" line="903" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINE_STRIP>
		<get_TRIANGLES get="inline" set="null" line="908" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRIANGLES>
		<get_TRIANGLE_STRIP get="inline" set="null" line="913" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRIANGLE_STRIP>
		<get_TRIANGLE_FAN get="inline" set="null" line="918" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRIANGLE_FAN>
		<get_ZERO get="inline" set="null" line="923" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ZERO>
		<get_ONE get="inline" set="null" line="928" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE>
		<get_SRC_COLOR get="inline" set="null" line="933" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SRC_COLOR>
		<get_ONE_MINUS_SRC_COLOR get="inline" set="null" line="938" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE_MINUS_SRC_COLOR>
		<get_SRC_ALPHA get="inline" set="null" line="943" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SRC_ALPHA>
		<get_ONE_MINUS_SRC_ALPHA get="inline" set="null" line="948" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE_MINUS_SRC_ALPHA>
		<get_DST_ALPHA get="inline" set="null" line="953" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DST_ALPHA>
		<get_ONE_MINUS_DST_ALPHA get="inline" set="null" line="958" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE_MINUS_DST_ALPHA>
		<get_DST_COLOR get="inline" set="null" line="963" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DST_COLOR>
		<get_ONE_MINUS_DST_COLOR get="inline" set="null" line="968" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE_MINUS_DST_COLOR>
		<get_SRC_ALPHA_SATURATE get="inline" set="null" line="973" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SRC_ALPHA_SATURATE>
		<get_FUNC_ADD get="inline" set="null" line="978" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FUNC_ADD>
		<get_BLEND_EQUATION get="inline" set="null" line="983" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_EQUATION>
		<get_BLEND_EQUATION_RGB get="inline" set="null" line="988" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_EQUATION_RGB>
		<get_BLEND_EQUATION_ALPHA get="inline" set="null" line="993" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_EQUATION_ALPHA>
		<get_FUNC_SUBTRACT get="inline" set="null" line="998" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FUNC_SUBTRACT>
		<get_FUNC_REVERSE_SUBTRACT get="inline" set="null" line="1003" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FUNC_REVERSE_SUBTRACT>
		<get_BLEND_DST_RGB get="inline" set="null" line="1008" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_DST_RGB>
		<get_BLEND_SRC_RGB get="inline" set="null" line="1013" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_SRC_RGB>
		<get_BLEND_DST_ALPHA get="inline" set="null" line="1018" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_DST_ALPHA>
		<get_BLEND_SRC_ALPHA get="inline" set="null" line="1023" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_SRC_ALPHA>
		<get_CONSTANT_COLOR get="inline" set="null" line="1028" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CONSTANT_COLOR>
		<get_ONE_MINUS_CONSTANT_COLOR get="inline" set="null" line="1033" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE_MINUS_CONSTANT_COLOR>
		<get_CONSTANT_ALPHA get="inline" set="null" line="1038" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CONSTANT_ALPHA>
		<get_ONE_MINUS_CONSTANT_ALPHA get="inline" set="null" line="1043" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ONE_MINUS_CONSTANT_ALPHA>
		<get_BLEND_COLOR get="inline" set="null" line="1048" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND_COLOR>
		<get_ARRAY_BUFFER get="inline" set="null" line="1053" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ARRAY_BUFFER>
		<get_ELEMENT_ARRAY_BUFFER get="inline" set="null" line="1058" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ELEMENT_ARRAY_BUFFER>
		<get_ARRAY_BUFFER_BINDING get="inline" set="null" line="1063" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ARRAY_BUFFER_BINDING>
		<get_ELEMENT_ARRAY_BUFFER_BINDING get="inline" set="null" line="1068" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ELEMENT_ARRAY_BUFFER_BINDING>
		<get_STREAM_DRAW get="inline" set="null" line="1073" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STREAM_DRAW>
		<get_STATIC_DRAW get="inline" set="null" line="1078" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STATIC_DRAW>
		<get_DYNAMIC_DRAW get="inline" set="null" line="1083" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DYNAMIC_DRAW>
		<get_BUFFER_SIZE get="inline" set="null" line="1088" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BUFFER_SIZE>
		<get_BUFFER_USAGE get="inline" set="null" line="1093" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BUFFER_USAGE>
		<get_CURRENT_VERTEX_ATTRIB get="inline" set="null" line="1098" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CURRENT_VERTEX_ATTRIB>
		<get_FRONT get="inline" set="null" line="1103" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRONT>
		<get_BACK get="inline" set="null" line="1108" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BACK>
		<get_FRONT_AND_BACK get="inline" set="null" line="1113" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRONT_AND_BACK>
		<get_CULL_FACE get="inline" set="null" line="1118" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CULL_FACE>
		<get_BLEND get="inline" set="null" line="1123" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLEND>
		<get_DITHER get="inline" set="null" line="1128" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DITHER>
		<get_STENCIL_TEST get="inline" set="null" line="1133" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_TEST>
		<get_DEPTH_TEST get="inline" set="null" line="1138" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_TEST>
		<get_SCISSOR_TEST get="inline" set="null" line="1143" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SCISSOR_TEST>
		<get_POLYGON_OFFSET_FILL get="inline" set="null" line="1148" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_POLYGON_OFFSET_FILL>
		<get_SAMPLE_ALPHA_TO_COVERAGE get="inline" set="null" line="1153" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLE_ALPHA_TO_COVERAGE>
		<get_SAMPLE_COVERAGE get="inline" set="null" line="1158" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLE_COVERAGE>
		<get_NO_ERROR get="inline" set="null" line="1163" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NO_ERROR>
		<get_INVALID_ENUM get="inline" set="null" line="1168" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INVALID_ENUM>
		<get_INVALID_VALUE get="inline" set="null" line="1173" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INVALID_VALUE>
		<get_INVALID_OPERATION get="inline" set="null" line="1178" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INVALID_OPERATION>
		<get_OUT_OF_MEMORY get="inline" set="null" line="1183" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_OUT_OF_MEMORY>
		<get_CW get="inline" set="null" line="1188" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CW>
		<get_CCW get="inline" set="null" line="1193" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CCW>
		<get_LINE_WIDTH get="inline" set="null" line="1198" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINE_WIDTH>
		<get_ALIASED_POINT_SIZE_RANGE get="inline" set="null" line="1203" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ALIASED_POINT_SIZE_RANGE>
		<get_ALIASED_LINE_WIDTH_RANGE get="inline" set="null" line="1208" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ALIASED_LINE_WIDTH_RANGE>
		<get_CULL_FACE_MODE get="inline" set="null" line="1213" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CULL_FACE_MODE>
		<get_FRONT_FACE get="inline" set="null" line="1218" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRONT_FACE>
		<get_DEPTH_RANGE get="inline" set="null" line="1223" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_RANGE>
		<get_DEPTH_WRITEMASK get="inline" set="null" line="1228" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_WRITEMASK>
		<get_DEPTH_CLEAR_VALUE get="inline" set="null" line="1233" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_CLEAR_VALUE>
		<get_DEPTH_FUNC get="inline" set="null" line="1238" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_FUNC>
		<get_STENCIL_CLEAR_VALUE get="inline" set="null" line="1243" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_CLEAR_VALUE>
		<get_STENCIL_FUNC get="inline" set="null" line="1248" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_FUNC>
		<get_STENCIL_FAIL get="inline" set="null" line="1253" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_FAIL>
		<get_STENCIL_PASS_DEPTH_FAIL get="inline" set="null" line="1258" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_PASS_DEPTH_FAIL>
		<get_STENCIL_PASS_DEPTH_PASS get="inline" set="null" line="1263" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_PASS_DEPTH_PASS>
		<get_STENCIL_REF get="inline" set="null" line="1268" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_REF>
		<get_STENCIL_VALUE_MASK get="inline" set="null" line="1273" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_VALUE_MASK>
		<get_STENCIL_WRITEMASK get="inline" set="null" line="1278" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_WRITEMASK>
		<get_STENCIL_BACK_FUNC get="inline" set="null" line="1283" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_FUNC>
		<get_STENCIL_BACK_FAIL get="inline" set="null" line="1288" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_FAIL>
		<get_STENCIL_BACK_PASS_DEPTH_FAIL get="inline" set="null" line="1293" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_PASS_DEPTH_FAIL>
		<get_STENCIL_BACK_PASS_DEPTH_PASS get="inline" set="null" line="1298" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_PASS_DEPTH_PASS>
		<get_STENCIL_BACK_REF get="inline" set="null" line="1303" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_REF>
		<get_STENCIL_BACK_VALUE_MASK get="inline" set="null" line="1308" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_VALUE_MASK>
		<get_STENCIL_BACK_WRITEMASK get="inline" set="null" line="1313" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BACK_WRITEMASK>
		<get_VIEWPORT get="inline" set="null" line="1318" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VIEWPORT>
		<get_SCISSOR_BOX get="inline" set="null" line="1323" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SCISSOR_BOX>
		<get_COLOR_CLEAR_VALUE get="inline" set="null" line="1328" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_CLEAR_VALUE>
		<get_COLOR_WRITEMASK get="inline" set="null" line="1333" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_WRITEMASK>
		<get_UNPACK_ALIGNMENT get="inline" set="null" line="1338" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_ALIGNMENT>
		<get_PACK_ALIGNMENT get="inline" set="null" line="1343" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PACK_ALIGNMENT>
		<get_MAX_TEXTURE_SIZE get="inline" set="null" line="1348" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_TEXTURE_SIZE>
		<get_MAX_VIEWPORT_DIMS get="inline" set="null" line="1353" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VIEWPORT_DIMS>
		<get_SUBPIXEL_BITS get="inline" set="null" line="1358" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SUBPIXEL_BITS>
		<get_RED_BITS get="inline" set="null" line="1363" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RED_BITS>
		<get_GREEN_BITS get="inline" set="null" line="1368" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_GREEN_BITS>
		<get_BLUE_BITS get="inline" set="null" line="1373" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BLUE_BITS>
		<get_ALPHA_BITS get="inline" set="null" line="1378" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ALPHA_BITS>
		<get_DEPTH_BITS get="inline" set="null" line="1383" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_BITS>
		<get_STENCIL_BITS get="inline" set="null" line="1388" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_BITS>
		<get_POLYGON_OFFSET_UNITS get="inline" set="null" line="1393" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_POLYGON_OFFSET_UNITS>
		<get_POLYGON_OFFSET_FACTOR get="inline" set="null" line="1398" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_POLYGON_OFFSET_FACTOR>
		<get_TEXTURE_BINDING_2D get="inline" set="null" line="1403" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_BINDING_2D>
		<get_SAMPLE_BUFFERS get="inline" set="null" line="1408" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLE_BUFFERS>
		<get_SAMPLES get="inline" set="null" line="1413" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLES>
		<get_SAMPLE_COVERAGE_VALUE get="inline" set="null" line="1418" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLE_COVERAGE_VALUE>
		<get_SAMPLE_COVERAGE_INVERT get="inline" set="null" line="1423" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLE_COVERAGE_INVERT>
		<get_COMPRESSED_TEXTURE_FORMATS get="inline" set="null" line="1428" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COMPRESSED_TEXTURE_FORMATS>
		<get_DONT_CARE get="inline" set="null" line="1433" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DONT_CARE>
		<get_FASTEST get="inline" set="null" line="1438" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FASTEST>
		<get_NICEST get="inline" set="null" line="1443" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NICEST>
		<get_GENERATE_MIPMAP_HINT get="inline" set="null" line="1448" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_GENERATE_MIPMAP_HINT>
		<get_BYTE get="inline" set="null" line="1453" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BYTE>
		<get_UNSIGNED_BYTE get="inline" set="null" line="1458" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_BYTE>
		<get_SHORT get="inline" set="null" line="1463" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SHORT>
		<get_UNSIGNED_SHORT get="inline" set="null" line="1468" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_SHORT>
		<get_INT get="inline" set="null" line="1473" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT>
		<get_UNSIGNED_INT get="inline" set="null" line="1478" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT>
		<get_FLOAT get="inline" set="null" line="1483" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT>
		<get_DEPTH_COMPONENT get="inline" set="null" line="1488" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_COMPONENT>
		<get_ALPHA get="inline" set="null" line="1493" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ALPHA>
		<get_RGB get="inline" set="null" line="1498" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB>
		<get_RGBA get="inline" set="null" line="1503" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA>
		<get_LUMINANCE get="inline" set="null" line="1508" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LUMINANCE>
		<get_LUMINANCE_ALPHA get="inline" set="null" line="1513" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LUMINANCE_ALPHA>
		<get_UNSIGNED_SHORT_4_4_4_4 get="inline" set="null" line="1518" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_SHORT_4_4_4_4>
		<get_UNSIGNED_SHORT_5_5_5_1 get="inline" set="null" line="1523" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_SHORT_5_5_5_1>
		<get_UNSIGNED_SHORT_5_6_5 get="inline" set="null" line="1528" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_SHORT_5_6_5>
		<get_FRAGMENT_SHADER get="inline" set="null" line="1533" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAGMENT_SHADER>
		<get_VERTEX_SHADER get="inline" set="null" line="1538" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_SHADER>
		<get_MAX_VERTEX_ATTRIBS get="inline" set="null" line="1543" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VERTEX_ATTRIBS>
		<get_MAX_VERTEX_UNIFORM_VECTORS get="inline" set="null" line="1548" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VERTEX_UNIFORM_VECTORS>
		<get_MAX_VARYING_VECTORS get="inline" set="null" line="1553" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VARYING_VECTORS>
		<get_MAX_COMBINED_TEXTURE_IMAGE_UNITS get="inline" set="null" line="1558" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<get_MAX_VERTEX_TEXTURE_IMAGE_UNITS get="inline" set="null" line="1563" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<get_MAX_TEXTURE_IMAGE_UNITS get="inline" set="null" line="1568" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_TEXTURE_IMAGE_UNITS>
		<get_MAX_FRAGMENT_UNIFORM_VECTORS get="inline" set="null" line="1573" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_FRAGMENT_UNIFORM_VECTORS>
		<get_SHADER_TYPE get="inline" set="null" line="1578" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SHADER_TYPE>
		<get_DELETE_STATUS get="inline" set="null" line="1583" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DELETE_STATUS>
		<get_LINK_STATUS get="inline" set="null" line="1588" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINK_STATUS>
		<get_VALIDATE_STATUS get="inline" set="null" line="1593" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VALIDATE_STATUS>
		<get_ATTACHED_SHADERS get="inline" set="null" line="1598" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ATTACHED_SHADERS>
		<get_ACTIVE_UNIFORMS get="inline" set="null" line="1603" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ACTIVE_UNIFORMS>
		<get_ACTIVE_ATTRIBUTES get="inline" set="null" line="1608" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ACTIVE_ATTRIBUTES>
		<get_SHADING_LANGUAGE_VERSION get="inline" set="null" line="1613" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SHADING_LANGUAGE_VERSION>
		<get_CURRENT_PROGRAM get="inline" set="null" line="1618" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CURRENT_PROGRAM>
		<get_NEVER get="inline" set="null" line="1623" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NEVER>
		<get_LESS get="inline" set="null" line="1628" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LESS>
		<get_EQUAL get="inline" set="null" line="1633" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_EQUAL>
		<get_LEQUAL get="inline" set="null" line="1638" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LEQUAL>
		<get_GREATER get="inline" set="null" line="1643" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_GREATER>
		<get_NOTEQUAL get="inline" set="null" line="1648" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NOTEQUAL>
		<get_GEQUAL get="inline" set="null" line="1653" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_GEQUAL>
		<get_ALWAYS get="inline" set="null" line="1658" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ALWAYS>
		<get_KEEP get="inline" set="null" line="1663" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_KEEP>
		<get_REPLACE get="inline" set="null" line="1668" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_REPLACE>
		<get_INCR get="inline" set="null" line="1673" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INCR>
		<get_DECR get="inline" set="null" line="1678" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DECR>
		<get_INVERT get="inline" set="null" line="1683" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INVERT>
		<get_INCR_WRAP get="inline" set="null" line="1688" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INCR_WRAP>
		<get_DECR_WRAP get="inline" set="null" line="1693" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DECR_WRAP>
		<get_VENDOR get="inline" set="null" line="1698" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VENDOR>
		<get_RENDERER get="inline" set="null" line="1703" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERER>
		<get_VERSION get="inline" set="null" line="1708" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERSION>
		<get_NEAREST get="inline" set="null" line="1713" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NEAREST>
		<get_LINEAR get="inline" set="null" line="1718" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINEAR>
		<get_NEAREST_MIPMAP_NEAREST get="inline" set="null" line="1723" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NEAREST_MIPMAP_NEAREST>
		<get_LINEAR_MIPMAP_NEAREST get="inline" set="null" line="1728" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINEAR_MIPMAP_NEAREST>
		<get_NEAREST_MIPMAP_LINEAR get="inline" set="null" line="1733" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NEAREST_MIPMAP_LINEAR>
		<get_LINEAR_MIPMAP_LINEAR get="inline" set="null" line="1738" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LINEAR_MIPMAP_LINEAR>
		<get_TEXTURE_MAG_FILTER get="inline" set="null" line="1743" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_MAG_FILTER>
		<get_TEXTURE_MIN_FILTER get="inline" set="null" line="1748" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_MIN_FILTER>
		<get_TEXTURE_WRAP_S get="inline" set="null" line="1753" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_WRAP_S>
		<get_TEXTURE_WRAP_T get="inline" set="null" line="1758" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_WRAP_T>
		<get_TEXTURE_2D get="inline" set="null" line="1763" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_2D>
		<get_TEXTURE get="inline" set="null" line="1768" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE>
		<get_TEXTURE_CUBE_MAP get="inline" set="null" line="1773" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP>
		<get_TEXTURE_BINDING_CUBE_MAP get="inline" set="null" line="1778" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_BINDING_CUBE_MAP>
		<get_TEXTURE_CUBE_MAP_POSITIVE_X get="inline" set="null" line="1783" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP_POSITIVE_X>
		<get_TEXTURE_CUBE_MAP_NEGATIVE_X get="inline" set="null" line="1788" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP_NEGATIVE_X>
		<get_TEXTURE_CUBE_MAP_POSITIVE_Y get="inline" set="null" line="1793" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP_POSITIVE_Y>
		<get_TEXTURE_CUBE_MAP_NEGATIVE_Y get="inline" set="null" line="1798" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<get_TEXTURE_CUBE_MAP_POSITIVE_Z get="inline" set="null" line="1803" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP_POSITIVE_Z>
		<get_TEXTURE_CUBE_MAP_NEGATIVE_Z get="inline" set="null" line="1808" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<get_MAX_CUBE_MAP_TEXTURE_SIZE get="inline" set="null" line="1813" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_CUBE_MAP_TEXTURE_SIZE>
		<get_TEXTURE0 get="inline" set="null" line="1818" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE0>
		<get_TEXTURE1 get="inline" set="null" line="1823" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE1>
		<get_TEXTURE2 get="inline" set="null" line="1828" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE2>
		<get_TEXTURE3 get="inline" set="null" line="1833" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE3>
		<get_TEXTURE4 get="inline" set="null" line="1838" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE4>
		<get_TEXTURE5 get="inline" set="null" line="1843" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE5>
		<get_TEXTURE6 get="inline" set="null" line="1848" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE6>
		<get_TEXTURE7 get="inline" set="null" line="1853" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE7>
		<get_TEXTURE8 get="inline" set="null" line="1858" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE8>
		<get_TEXTURE9 get="inline" set="null" line="1863" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE9>
		<get_TEXTURE10 get="inline" set="null" line="1868" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE10>
		<get_TEXTURE11 get="inline" set="null" line="1873" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE11>
		<get_TEXTURE12 get="inline" set="null" line="1878" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE12>
		<get_TEXTURE13 get="inline" set="null" line="1883" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE13>
		<get_TEXTURE14 get="inline" set="null" line="1888" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE14>
		<get_TEXTURE15 get="inline" set="null" line="1893" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE15>
		<get_TEXTURE16 get="inline" set="null" line="1898" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE16>
		<get_TEXTURE17 get="inline" set="null" line="1903" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE17>
		<get_TEXTURE18 get="inline" set="null" line="1908" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE18>
		<get_TEXTURE19 get="inline" set="null" line="1913" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE19>
		<get_TEXTURE20 get="inline" set="null" line="1918" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE20>
		<get_TEXTURE21 get="inline" set="null" line="1923" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE21>
		<get_TEXTURE22 get="inline" set="null" line="1928" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE22>
		<get_TEXTURE23 get="inline" set="null" line="1933" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE23>
		<get_TEXTURE24 get="inline" set="null" line="1938" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE24>
		<get_TEXTURE25 get="inline" set="null" line="1943" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE25>
		<get_TEXTURE26 get="inline" set="null" line="1948" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE26>
		<get_TEXTURE27 get="inline" set="null" line="1953" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE27>
		<get_TEXTURE28 get="inline" set="null" line="1958" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE28>
		<get_TEXTURE29 get="inline" set="null" line="1963" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE29>
		<get_TEXTURE30 get="inline" set="null" line="1968" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE30>
		<get_TEXTURE31 get="inline" set="null" line="1973" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE31>
		<get_ACTIVE_TEXTURE get="inline" set="null" line="1978" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ACTIVE_TEXTURE>
		<get_REPEAT get="inline" set="null" line="1983" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_REPEAT>
		<get_CLAMP_TO_EDGE get="inline" set="null" line="1988" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CLAMP_TO_EDGE>
		<get_MIRRORED_REPEAT get="inline" set="null" line="1993" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MIRRORED_REPEAT>
		<get_FLOAT_VEC2 get="inline" set="null" line="1998" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_VEC2>
		<get_FLOAT_VEC3 get="inline" set="null" line="2003" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_VEC3>
		<get_FLOAT_VEC4 get="inline" set="null" line="2008" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_VEC4>
		<get_INT_VEC2 get="inline" set="null" line="2013" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_VEC2>
		<get_INT_VEC3 get="inline" set="null" line="2018" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_VEC3>
		<get_INT_VEC4 get="inline" set="null" line="2023" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_VEC4>
		<get_BOOL get="inline" set="null" line="2028" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BOOL>
		<get_BOOL_VEC2 get="inline" set="null" line="2033" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BOOL_VEC2>
		<get_BOOL_VEC3 get="inline" set="null" line="2038" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BOOL_VEC3>
		<get_BOOL_VEC4 get="inline" set="null" line="2043" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BOOL_VEC4>
		<get_FLOAT_MAT2 get="inline" set="null" line="2048" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT2>
		<get_FLOAT_MAT3 get="inline" set="null" line="2053" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT3>
		<get_FLOAT_MAT4 get="inline" set="null" line="2058" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT4>
		<get_SAMPLER_2D get="inline" set="null" line="2063" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_2D>
		<get_SAMPLER_CUBE get="inline" set="null" line="2068" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_CUBE>
		<get_VERTEX_ATTRIB_ARRAY_ENABLED get="inline" set="null" line="2073" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_ENABLED>
		<get_VERTEX_ATTRIB_ARRAY_SIZE get="inline" set="null" line="2078" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_SIZE>
		<get_VERTEX_ATTRIB_ARRAY_STRIDE get="inline" set="null" line="2083" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_STRIDE>
		<get_VERTEX_ATTRIB_ARRAY_TYPE get="inline" set="null" line="2088" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_TYPE>
		<get_VERTEX_ATTRIB_ARRAY_NORMALIZED get="inline" set="null" line="2093" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<get_VERTEX_ATTRIB_ARRAY_POINTER get="inline" set="null" line="2098" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_POINTER>
		<get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING get="inline" set="null" line="2103" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<get_COMPILE_STATUS get="inline" set="null" line="2108" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COMPILE_STATUS>
		<get_LOW_FLOAT get="inline" set="null" line="2113" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LOW_FLOAT>
		<get_MEDIUM_FLOAT get="inline" set="null" line="2118" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MEDIUM_FLOAT>
		<get_HIGH_FLOAT get="inline" set="null" line="2123" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_HIGH_FLOAT>
		<get_LOW_INT get="inline" set="null" line="2128" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_LOW_INT>
		<get_MEDIUM_INT get="inline" set="null" line="2133" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MEDIUM_INT>
		<get_HIGH_INT get="inline" set="null" line="2138" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_HIGH_INT>
		<get_FRAMEBUFFER get="inline" set="null" line="2143" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER>
		<get_RENDERBUFFER get="inline" set="null" line="2148" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER>
		<get_RGBA4 get="inline" set="null" line="2153" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA4>
		<get_RGB5_A1 get="inline" set="null" line="2158" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB5_A1>
		<get_RGB565 get="inline" set="null" line="2163" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB565>
		<get_DEPTH_COMPONENT16 get="inline" set="null" line="2168" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_COMPONENT16>
		<get_STENCIL_INDEX get="inline" set="null" line="2173" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_INDEX>
		<get_STENCIL_INDEX8 get="inline" set="null" line="2178" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_INDEX8>
		<get_DEPTH_STENCIL get="inline" set="null" line="2183" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_STENCIL>
		<get_RENDERBUFFER_WIDTH get="inline" set="null" line="2188" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_WIDTH>
		<get_RENDERBUFFER_HEIGHT get="inline" set="null" line="2193" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_HEIGHT>
		<get_RENDERBUFFER_INTERNAL_FORMAT get="inline" set="null" line="2198" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_INTERNAL_FORMAT>
		<get_RENDERBUFFER_RED_SIZE get="inline" set="null" line="2203" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_RED_SIZE>
		<get_RENDERBUFFER_GREEN_SIZE get="inline" set="null" line="2208" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_GREEN_SIZE>
		<get_RENDERBUFFER_BLUE_SIZE get="inline" set="null" line="2213" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_BLUE_SIZE>
		<get_RENDERBUFFER_ALPHA_SIZE get="inline" set="null" line="2218" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_ALPHA_SIZE>
		<get_RENDERBUFFER_DEPTH_SIZE get="inline" set="null" line="2223" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_DEPTH_SIZE>
		<get_RENDERBUFFER_STENCIL_SIZE get="inline" set="null" line="2228" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_STENCIL_SIZE>
		<get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE get="inline" set="null" line="2233" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME get="inline" set="null" line="2238" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL get="inline" set="null" line="2243" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE get="inline" set="null" line="2248" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<get_COLOR_ATTACHMENT0 get="inline" set="null" line="2253" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT0>
		<get_DEPTH_ATTACHMENT get="inline" set="null" line="2258" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_ATTACHMENT>
		<get_STENCIL_ATTACHMENT get="inline" set="null" line="2263" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL_ATTACHMENT>
		<get_DEPTH_STENCIL_ATTACHMENT get="inline" set="null" line="2268" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_STENCIL_ATTACHMENT>
		<get_NONE get="inline" set="null" line="2273" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_NONE>
		<get_FRAMEBUFFER_COMPLETE get="inline" set="null" line="2278" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_COMPLETE>
		<get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT get="inline" set="null" line="2283" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT get="inline" set="null" line="2288" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS get="inline" set="null" line="2293" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<get_FRAMEBUFFER_UNSUPPORTED get="inline" set="null" line="2298" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_UNSUPPORTED>
		<get_FRAMEBUFFER_BINDING get="inline" set="null" line="2303" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_BINDING>
		<get_RENDERBUFFER_BINDING get="inline" set="null" line="2308" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_BINDING>
		<get_MAX_RENDERBUFFER_SIZE get="inline" set="null" line="2313" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_RENDERBUFFER_SIZE>
		<get_INVALID_FRAMEBUFFER_OPERATION get="inline" set="null" line="2318" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INVALID_FRAMEBUFFER_OPERATION>
		<get_UNPACK_FLIP_Y_WEBGL get="inline" set="null" line="2323" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_FLIP_Y_WEBGL>
		<get_UNPACK_PREMULTIPLY_ALPHA_WEBGL get="inline" set="null" line="2328" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<get_CONTEXT_LOST_WEBGL get="inline" set="null" line="2333" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CONTEXT_LOST_WEBGL>
		<get_UNPACK_COLORSPACE_CONVERSION_WEBGL get="inline" set="null" line="2338" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<get_BROWSER_DEFAULT_WEBGL get="inline" set="null" line="2343" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_BROWSER_DEFAULT_WEBGL>
		<get_READ_BUFFER get="inline" set="null" line="2348" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_READ_BUFFER>
		<get_UNPACK_ROW_LENGTH get="inline" set="null" line="2353" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_ROW_LENGTH>
		<get_UNPACK_SKIP_ROWS get="inline" set="null" line="2358" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_SKIP_ROWS>
		<get_UNPACK_SKIP_PIXELS get="inline" set="null" line="2363" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_SKIP_PIXELS>
		<get_PACK_ROW_LENGTH get="inline" set="null" line="2368" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PACK_ROW_LENGTH>
		<get_PACK_SKIP_ROWS get="inline" set="null" line="2373" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PACK_SKIP_ROWS>
		<get_PACK_SKIP_PIXELS get="inline" set="null" line="2378" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PACK_SKIP_PIXELS>
		<get_TEXTURE_BINDING_3D get="inline" set="null" line="2383" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_BINDING_3D>
		<get_UNPACK_SKIP_IMAGES get="inline" set="null" line="2388" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_SKIP_IMAGES>
		<get_UNPACK_IMAGE_HEIGHT get="inline" set="null" line="2393" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNPACK_IMAGE_HEIGHT>
		<get_MAX_3D_TEXTURE_SIZE get="inline" set="null" line="2398" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_3D_TEXTURE_SIZE>
		<get_MAX_ELEMENTS_VERTICES get="inline" set="null" line="2403" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_ELEMENTS_VERTICES>
		<get_MAX_ELEMENTS_INDICES get="inline" set="null" line="2408" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_ELEMENTS_INDICES>
		<get_MAX_TEXTURE_LOD_BIAS get="inline" set="null" line="2413" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_TEXTURE_LOD_BIAS>
		<get_MAX_FRAGMENT_UNIFORM_COMPONENTS get="inline" set="null" line="2418" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<get_MAX_VERTEX_UNIFORM_COMPONENTS get="inline" set="null" line="2423" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VERTEX_UNIFORM_COMPONENTS>
		<get_MAX_ARRAY_TEXTURE_LAYERS get="inline" set="null" line="2428" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_ARRAY_TEXTURE_LAYERS>
		<get_MIN_PROGRAM_TEXEL_OFFSET get="inline" set="null" line="2433" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MIN_PROGRAM_TEXEL_OFFSET>
		<get_MAX_PROGRAM_TEXEL_OFFSET get="inline" set="null" line="2438" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_PROGRAM_TEXEL_OFFSET>
		<get_MAX_VARYING_COMPONENTS get="inline" set="null" line="2443" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VARYING_COMPONENTS>
		<get_FRAGMENT_SHADER_DERIVATIVE_HINT get="inline" set="null" line="2448" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAGMENT_SHADER_DERIVATIVE_HINT>
		<get_RASTERIZER_DISCARD get="inline" set="null" line="2453" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RASTERIZER_DISCARD>
		<get_VERTEX_ARRAY_BINDING get="inline" set="null" line="2458" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ARRAY_BINDING>
		<get_MAX_VERTEX_OUTPUT_COMPONENTS get="inline" set="null" line="2463" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VERTEX_OUTPUT_COMPONENTS>
		<get_MAX_FRAGMENT_INPUT_COMPONENTS get="inline" set="null" line="2468" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_FRAGMENT_INPUT_COMPONENTS>
		<get_MAX_SERVER_WAIT_TIMEOUT get="inline" set="null" line="2473" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_SERVER_WAIT_TIMEOUT>
		<get_MAX_ELEMENT_INDEX get="inline" set="null" line="2478" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_ELEMENT_INDEX>
		<get_RED get="inline" set="null" line="2483" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RED>
		<get_RGB8 get="inline" set="null" line="2488" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB8>
		<get_RGBA8 get="inline" set="null" line="2493" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA8>
		<get_RGB10_A2 get="inline" set="null" line="2498" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB10_A2>
		<get_TEXTURE_3D get="inline" set="null" line="2503" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_3D>
		<get_TEXTURE_WRAP_R get="inline" set="null" line="2508" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_WRAP_R>
		<get_TEXTURE_MIN_LOD get="inline" set="null" line="2513" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_MIN_LOD>
		<get_TEXTURE_MAX_LOD get="inline" set="null" line="2518" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_MAX_LOD>
		<get_TEXTURE_BASE_LEVEL get="inline" set="null" line="2523" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_BASE_LEVEL>
		<get_TEXTURE_MAX_LEVEL get="inline" set="null" line="2528" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_MAX_LEVEL>
		<get_TEXTURE_COMPARE_MODE get="inline" set="null" line="2533" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_COMPARE_MODE>
		<get_TEXTURE_COMPARE_FUNC get="inline" set="null" line="2538" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_COMPARE_FUNC>
		<get_SRGB get="inline" set="null" line="2543" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SRGB>
		<get_SRGB8 get="inline" set="null" line="2548" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SRGB8>
		<get_SRGB8_ALPHA8 get="inline" set="null" line="2553" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SRGB8_ALPHA8>
		<get_COMPARE_REF_TO_TEXTURE get="inline" set="null" line="2558" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COMPARE_REF_TO_TEXTURE>
		<get_RGBA32F get="inline" set="null" line="2563" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA32F>
		<get_RGB32F get="inline" set="null" line="2568" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB32F>
		<get_RGBA16F get="inline" set="null" line="2573" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA16F>
		<get_RGB16F get="inline" set="null" line="2578" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB16F>
		<get_TEXTURE_2D_ARRAY get="inline" set="null" line="2583" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_2D_ARRAY>
		<get_TEXTURE_BINDING_2D_ARRAY get="inline" set="null" line="2588" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_BINDING_2D_ARRAY>
		<get_R11F_G11F_B10F get="inline" set="null" line="2593" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R11F_G11F_B10F>
		<get_RGB9_E5 get="inline" set="null" line="2598" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB9_E5>
		<get_RGBA32UI get="inline" set="null" line="2603" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA32UI>
		<get_RGB32UI get="inline" set="null" line="2608" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB32UI>
		<get_RGBA16UI get="inline" set="null" line="2613" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA16UI>
		<get_RGB16UI get="inline" set="null" line="2618" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB16UI>
		<get_RGBA8UI get="inline" set="null" line="2623" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA8UI>
		<get_RGB8UI get="inline" set="null" line="2628" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB8UI>
		<get_RGBA32I get="inline" set="null" line="2633" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA32I>
		<get_RGB32I get="inline" set="null" line="2638" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB32I>
		<get_RGBA16I get="inline" set="null" line="2643" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA16I>
		<get_RGB16I get="inline" set="null" line="2648" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB16I>
		<get_RGBA8I get="inline" set="null" line="2653" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA8I>
		<get_RGB8I get="inline" set="null" line="2658" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB8I>
		<get_RED_INTEGER get="inline" set="null" line="2663" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RED_INTEGER>
		<get_RGB_INTEGER get="inline" set="null" line="2668" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB_INTEGER>
		<get_RGBA_INTEGER get="inline" set="null" line="2673" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA_INTEGER>
		<get_R8 get="inline" set="null" line="2678" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R8>
		<get_RG8 get="inline" set="null" line="2683" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG8>
		<get_R16F get="inline" set="null" line="2688" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R16F>
		<get_R32F get="inline" set="null" line="2693" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R32F>
		<get_RG16F get="inline" set="null" line="2698" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG16F>
		<get_RG32F get="inline" set="null" line="2703" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG32F>
		<get_R8I get="inline" set="null" line="2708" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R8I>
		<get_R8UI get="inline" set="null" line="2713" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R8UI>
		<get_R16I get="inline" set="null" line="2718" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R16I>
		<get_R16UI get="inline" set="null" line="2723" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R16UI>
		<get_R32I get="inline" set="null" line="2728" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R32I>
		<get_R32UI get="inline" set="null" line="2733" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R32UI>
		<get_RG8I get="inline" set="null" line="2738" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG8I>
		<get_RG8UI get="inline" set="null" line="2743" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG8UI>
		<get_RG16I get="inline" set="null" line="2748" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG16I>
		<get_RG16UI get="inline" set="null" line="2753" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG16UI>
		<get_RG32I get="inline" set="null" line="2758" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG32I>
		<get_RG32UI get="inline" set="null" line="2763" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG32UI>
		<get_R8_SNORM get="inline" set="null" line="2768" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_R8_SNORM>
		<get_RG8_SNORM get="inline" set="null" line="2773" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG8_SNORM>
		<get_RGB8_SNORM get="inline" set="null" line="2778" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB8_SNORM>
		<get_RGBA8_SNORM get="inline" set="null" line="2783" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGBA8_SNORM>
		<get_RGB10_A2UI get="inline" set="null" line="2788" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RGB10_A2UI>
		<get_TEXTURE_IMMUTABLE_FORMAT get="inline" set="null" line="2793" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_IMMUTABLE_FORMAT>
		<get_TEXTURE_IMMUTABLE_LEVELS get="inline" set="null" line="2798" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TEXTURE_IMMUTABLE_LEVELS>
		<get_UNSIGNED_INT_2_10_10_10_REV get="inline" set="null" line="2803" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_2_10_10_10_REV>
		<get_UNSIGNED_INT_10F_11F_11F_REV get="inline" set="null" line="2808" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_10F_11F_11F_REV>
		<get_UNSIGNED_INT_5_9_9_9_REV get="inline" set="null" line="2813" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_5_9_9_9_REV>
		<get_FLOAT_32_UNSIGNED_INT_24_8_REV get="inline" set="null" line="2818" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_32_UNSIGNED_INT_24_8_REV>
		<get_UNSIGNED_INT_24_8 get="inline" set="null" line="2823" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_24_8>
		<get_HALF_FLOAT get="inline" set="null" line="2828" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_HALF_FLOAT>
		<get_RG get="inline" set="null" line="2833" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG>
		<get_RG_INTEGER get="inline" set="null" line="2838" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RG_INTEGER>
		<get_INT_2_10_10_10_REV get="inline" set="null" line="2843" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_2_10_10_10_REV>
		<get_CURRENT_QUERY get="inline" set="null" line="2848" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CURRENT_QUERY>
		<get_QUERY_RESULT get="inline" set="null" line="2853" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_QUERY_RESULT>
		<get_QUERY_RESULT_AVAILABLE get="inline" set="null" line="2858" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_QUERY_RESULT_AVAILABLE>
		<get_ANY_SAMPLES_PASSED get="inline" set="null" line="2863" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ANY_SAMPLES_PASSED>
		<get_ANY_SAMPLES_PASSED_CONSERVATIVE get="inline" set="null" line="2868" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ANY_SAMPLES_PASSED_CONSERVATIVE>
		<get_MAX_DRAW_BUFFERS get="inline" set="null" line="2873" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_DRAW_BUFFERS>
		<get_DRAW_BUFFER0 get="inline" set="null" line="2878" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER0>
		<get_DRAW_BUFFER1 get="inline" set="null" line="2883" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER1>
		<get_DRAW_BUFFER2 get="inline" set="null" line="2888" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER2>
		<get_DRAW_BUFFER3 get="inline" set="null" line="2893" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER3>
		<get_DRAW_BUFFER4 get="inline" set="null" line="2898" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER4>
		<get_DRAW_BUFFER5 get="inline" set="null" line="2903" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER5>
		<get_DRAW_BUFFER6 get="inline" set="null" line="2908" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER6>
		<get_DRAW_BUFFER7 get="inline" set="null" line="2913" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER7>
		<get_DRAW_BUFFER8 get="inline" set="null" line="2918" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER8>
		<get_DRAW_BUFFER9 get="inline" set="null" line="2923" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER9>
		<get_DRAW_BUFFER10 get="inline" set="null" line="2928" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER10>
		<get_DRAW_BUFFER11 get="inline" set="null" line="2933" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER11>
		<get_DRAW_BUFFER12 get="inline" set="null" line="2938" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER12>
		<get_DRAW_BUFFER13 get="inline" set="null" line="2943" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER13>
		<get_DRAW_BUFFER14 get="inline" set="null" line="2948" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER14>
		<get_DRAW_BUFFER15 get="inline" set="null" line="2953" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_BUFFER15>
		<get_MAX_COLOR_ATTACHMENTS get="inline" set="null" line="2958" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_COLOR_ATTACHMENTS>
		<get_COLOR_ATTACHMENT1 get="inline" set="null" line="2963" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT1>
		<get_COLOR_ATTACHMENT2 get="inline" set="null" line="2968" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT2>
		<get_COLOR_ATTACHMENT3 get="inline" set="null" line="2973" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT3>
		<get_COLOR_ATTACHMENT4 get="inline" set="null" line="2978" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT4>
		<get_COLOR_ATTACHMENT5 get="inline" set="null" line="2983" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT5>
		<get_COLOR_ATTACHMENT6 get="inline" set="null" line="2988" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT6>
		<get_COLOR_ATTACHMENT7 get="inline" set="null" line="2993" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT7>
		<get_COLOR_ATTACHMENT8 get="inline" set="null" line="2998" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT8>
		<get_COLOR_ATTACHMENT9 get="inline" set="null" line="3003" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT9>
		<get_COLOR_ATTACHMENT10 get="inline" set="null" line="3008" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT10>
		<get_COLOR_ATTACHMENT11 get="inline" set="null" line="3013" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT11>
		<get_COLOR_ATTACHMENT12 get="inline" set="null" line="3018" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT12>
		<get_COLOR_ATTACHMENT13 get="inline" set="null" line="3023" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT13>
		<get_COLOR_ATTACHMENT14 get="inline" set="null" line="3028" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT14>
		<get_COLOR_ATTACHMENT15 get="inline" set="null" line="3033" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR_ATTACHMENT15>
		<get_SAMPLER_3D get="inline" set="null" line="3038" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_3D>
		<get_SAMPLER_2D_SHADOW get="inline" set="null" line="3043" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_2D_SHADOW>
		<get_SAMPLER_2D_ARRAY get="inline" set="null" line="3048" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_2D_ARRAY>
		<get_SAMPLER_2D_ARRAY_SHADOW get="inline" set="null" line="3053" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_2D_ARRAY_SHADOW>
		<get_SAMPLER_CUBE_SHADOW get="inline" set="null" line="3058" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_CUBE_SHADOW>
		<get_INT_SAMPLER_2D get="inline" set="null" line="3063" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_SAMPLER_2D>
		<get_INT_SAMPLER_3D get="inline" set="null" line="3068" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_SAMPLER_3D>
		<get_INT_SAMPLER_CUBE get="inline" set="null" line="3073" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_SAMPLER_CUBE>
		<get_INT_SAMPLER_2D_ARRAY get="inline" set="null" line="3078" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INT_SAMPLER_2D_ARRAY>
		<get_UNSIGNED_INT_SAMPLER_2D get="inline" set="null" line="3083" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_SAMPLER_2D>
		<get_UNSIGNED_INT_SAMPLER_3D get="inline" set="null" line="3088" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_SAMPLER_3D>
		<get_UNSIGNED_INT_SAMPLER_CUBE get="inline" set="null" line="3093" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_SAMPLER_CUBE>
		<get_UNSIGNED_INT_SAMPLER_2D_ARRAY get="inline" set="null" line="3098" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<get_MAX_SAMPLES get="inline" set="null" line="3103" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_SAMPLES>
		<get_SAMPLER_BINDING get="inline" set="null" line="3108" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SAMPLER_BINDING>
		<get_PIXEL_PACK_BUFFER get="inline" set="null" line="3113" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PIXEL_PACK_BUFFER>
		<get_PIXEL_UNPACK_BUFFER get="inline" set="null" line="3118" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PIXEL_UNPACK_BUFFER>
		<get_PIXEL_PACK_BUFFER_BINDING get="inline" set="null" line="3123" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PIXEL_PACK_BUFFER_BINDING>
		<get_PIXEL_UNPACK_BUFFER_BINDING get="inline" set="null" line="3128" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_PIXEL_UNPACK_BUFFER_BINDING>
		<get_COPY_READ_BUFFER get="inline" set="null" line="3133" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COPY_READ_BUFFER>
		<get_COPY_WRITE_BUFFER get="inline" set="null" line="3138" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COPY_WRITE_BUFFER>
		<get_COPY_READ_BUFFER_BINDING get="inline" set="null" line="3143" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COPY_READ_BUFFER_BINDING>
		<get_COPY_WRITE_BUFFER_BINDING get="inline" set="null" line="3148" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COPY_WRITE_BUFFER_BINDING>
		<get_FLOAT_MAT2x3 get="inline" set="null" line="3153" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT2x3>
		<get_FLOAT_MAT2x4 get="inline" set="null" line="3158" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT2x4>
		<get_FLOAT_MAT3x2 get="inline" set="null" line="3163" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT3x2>
		<get_FLOAT_MAT3x4 get="inline" set="null" line="3168" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT3x4>
		<get_FLOAT_MAT4x2 get="inline" set="null" line="3173" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT4x2>
		<get_FLOAT_MAT4x3 get="inline" set="null" line="3178" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FLOAT_MAT4x3>
		<get_UNSIGNED_INT_VEC2 get="inline" set="null" line="3183" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_VEC2>
		<get_UNSIGNED_INT_VEC3 get="inline" set="null" line="3188" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_VEC3>
		<get_UNSIGNED_INT_VEC4 get="inline" set="null" line="3193" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_INT_VEC4>
		<get_UNSIGNED_NORMALIZED get="inline" set="null" line="3198" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNED_NORMALIZED>
		<get_SIGNED_NORMALIZED get="inline" set="null" line="3203" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SIGNED_NORMALIZED>
		<get_VERTEX_ATTRIB_ARRAY_INTEGER get="inline" set="null" line="3208" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_INTEGER>
		<get_VERTEX_ATTRIB_ARRAY_DIVISOR get="inline" set="null" line="3213" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_VERTEX_ATTRIB_ARRAY_DIVISOR>
		<get_TRANSFORM_FEEDBACK_BUFFER_MODE get="inline" set="null" line="3218" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_BUFFER_MODE>
		<get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS get="inline" set="null" line="3223" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<get_TRANSFORM_FEEDBACK_VARYINGS get="inline" set="null" line="3228" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_VARYINGS>
		<get_TRANSFORM_FEEDBACK_BUFFER_START get="inline" set="null" line="3233" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_BUFFER_START>
		<get_TRANSFORM_FEEDBACK_BUFFER_SIZE get="inline" set="null" line="3238" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN get="inline" set="null" line="3243" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS get="inline" set="null" line="3248" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS get="inline" set="null" line="3253" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<get_INTERLEAVED_ATTRIBS get="inline" set="null" line="3258" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INTERLEAVED_ATTRIBS>
		<get_SEPARATE_ATTRIBS get="inline" set="null" line="3263" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SEPARATE_ATTRIBS>
		<get_TRANSFORM_FEEDBACK_BUFFER get="inline" set="null" line="3268" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_BUFFER>
		<get_TRANSFORM_FEEDBACK_BUFFER_BINDING get="inline" set="null" line="3273" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<get_TRANSFORM_FEEDBACK get="inline" set="null" line="3278" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK>
		<get_TRANSFORM_FEEDBACK_PAUSED get="inline" set="null" line="3283" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_PAUSED>
		<get_TRANSFORM_FEEDBACK_ACTIVE get="inline" set="null" line="3288" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_ACTIVE>
		<get_TRANSFORM_FEEDBACK_BINDING get="inline" set="null" line="3293" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TRANSFORM_FEEDBACK_BINDING>
		<get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING get="inline" set="null" line="3298" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE get="inline" set="null" line="3303" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<get_FRAMEBUFFER_ATTACHMENT_RED_SIZE get="inline" set="null" line="3308" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE get="inline" set="null" line="3313" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE get="inline" set="null" line="3318" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE get="inline" set="null" line="3323" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE get="inline" set="null" line="3328" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE get="inline" set="null" line="3333" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<get_FRAMEBUFFER_DEFAULT get="inline" set="null" line="3338" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_DEFAULT>
		<get_DEPTH24_STENCIL8 get="inline" set="null" line="3343" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH24_STENCIL8>
		<get_DRAW_FRAMEBUFFER_BINDING get="inline" set="null" line="3348" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_FRAMEBUFFER_BINDING>
		<get_READ_FRAMEBUFFER get="inline" set="null" line="3353" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_READ_FRAMEBUFFER>
		<get_DRAW_FRAMEBUFFER get="inline" set="null" line="3358" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DRAW_FRAMEBUFFER>
		<get_READ_FRAMEBUFFER_BINDING get="inline" set="null" line="3363" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_READ_FRAMEBUFFER_BINDING>
		<get_RENDERBUFFER_SAMPLES get="inline" set="null" line="3368" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_RENDERBUFFER_SAMPLES>
		<get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER get="inline" set="null" line="3373" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE get="inline" set="null" line="3378" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<get_UNIFORM_BUFFER get="inline" set="null" line="3383" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BUFFER>
		<get_UNIFORM_BUFFER_BINDING get="inline" set="null" line="3388" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BUFFER_BINDING>
		<get_UNIFORM_BUFFER_START get="inline" set="null" line="3393" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BUFFER_START>
		<get_UNIFORM_BUFFER_SIZE get="inline" set="null" line="3398" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BUFFER_SIZE>
		<get_MAX_VERTEX_UNIFORM_BLOCKS get="inline" set="null" line="3403" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_VERTEX_UNIFORM_BLOCKS>
		<get_MAX_FRAGMENT_UNIFORM_BLOCKS get="inline" set="null" line="3408" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_FRAGMENT_UNIFORM_BLOCKS>
		<get_MAX_COMBINED_UNIFORM_BLOCKS get="inline" set="null" line="3413" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_COMBINED_UNIFORM_BLOCKS>
		<get_MAX_UNIFORM_BUFFER_BINDINGS get="inline" set="null" line="3418" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_UNIFORM_BUFFER_BINDINGS>
		<get_MAX_UNIFORM_BLOCK_SIZE get="inline" set="null" line="3423" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_UNIFORM_BLOCK_SIZE>
		<get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS get="inline" set="null" line="3428" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS get="inline" set="null" line="3433" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<get_UNIFORM_BUFFER_OFFSET_ALIGNMENT get="inline" set="null" line="3438" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<get_ACTIVE_UNIFORM_BLOCKS get="inline" set="null" line="3443" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ACTIVE_UNIFORM_BLOCKS>
		<get_UNIFORM_TYPE get="inline" set="null" line="3448" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_TYPE>
		<get_UNIFORM_SIZE get="inline" set="null" line="3453" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_SIZE>
		<get_UNIFORM_BLOCK_INDEX get="inline" set="null" line="3458" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_INDEX>
		<get_UNIFORM_OFFSET get="inline" set="null" line="3463" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_OFFSET>
		<get_UNIFORM_ARRAY_STRIDE get="inline" set="null" line="3468" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_ARRAY_STRIDE>
		<get_UNIFORM_MATRIX_STRIDE get="inline" set="null" line="3473" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_MATRIX_STRIDE>
		<get_UNIFORM_IS_ROW_MAJOR get="inline" set="null" line="3478" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_IS_ROW_MAJOR>
		<get_UNIFORM_BLOCK_BINDING get="inline" set="null" line="3483" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_BINDING>
		<get_UNIFORM_BLOCK_DATA_SIZE get="inline" set="null" line="3488" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_DATA_SIZE>
		<get_UNIFORM_BLOCK_ACTIVE_UNIFORMS get="inline" set="null" line="3493" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES get="inline" set="null" line="3498" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER get="inline" set="null" line="3503" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER get="inline" set="null" line="3508" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<get_OBJECT_TYPE get="inline" set="null" line="3513" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_OBJECT_TYPE>
		<get_SYNC_CONDITION get="inline" set="null" line="3518" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SYNC_CONDITION>
		<get_SYNC_STATUS get="inline" set="null" line="3523" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SYNC_STATUS>
		<get_SYNC_FLAGS get="inline" set="null" line="3528" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SYNC_FLAGS>
		<get_SYNC_FENCE get="inline" set="null" line="3533" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SYNC_FENCE>
		<get_SYNC_GPU_COMMANDS_COMPLETE get="inline" set="null" line="3538" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SYNC_GPU_COMMANDS_COMPLETE>
		<get_UNSIGNALED get="inline" set="null" line="3543" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_UNSIGNALED>
		<get_SIGNALED get="inline" set="null" line="3548" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SIGNALED>
		<get_ALREADY_SIGNALED get="inline" set="null" line="3553" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ALREADY_SIGNALED>
		<get_TIMEOUT_EXPIRED get="inline" set="null" line="3558" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TIMEOUT_EXPIRED>
		<get_CONDITION_SATISFIED get="inline" set="null" line="3563" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_CONDITION_SATISFIED>
		<get_WAIT_FAILED get="inline" set="null" line="3568" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_WAIT_FAILED>
		<get_SYNC_FLUSH_COMMANDS_BIT get="inline" set="null" line="3573" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_SYNC_FLUSH_COMMANDS_BIT>
		<get_COLOR get="inline" set="null" line="3578" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_COLOR>
		<get_DEPTH get="inline" set="null" line="3583" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH>
		<get_STENCIL get="inline" set="null" line="3588" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STENCIL>
		<get_MIN get="inline" set="null" line="3593" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MIN>
		<get_MAX get="inline" set="null" line="3598" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX>
		<get_DEPTH_COMPONENT24 get="inline" set="null" line="3603" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_COMPONENT24>
		<get_STREAM_READ get="inline" set="null" line="3608" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STREAM_READ>
		<get_STREAM_COPY get="inline" set="null" line="3613" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STREAM_COPY>
		<get_STATIC_READ get="inline" set="null" line="3618" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STATIC_READ>
		<get_STATIC_COPY get="inline" set="null" line="3623" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_STATIC_COPY>
		<get_DYNAMIC_READ get="inline" set="null" line="3628" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DYNAMIC_READ>
		<get_DYNAMIC_COPY get="inline" set="null" line="3633" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DYNAMIC_COPY>
		<get_DEPTH_COMPONENT32F get="inline" set="null" line="3638" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH_COMPONENT32F>
		<get_DEPTH32F_STENCIL8 get="inline" set="null" line="3643" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_DEPTH32F_STENCIL8>
		<get_INVALID_INDEX get="inline" set="null" line="3648" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_INVALID_INDEX>
		<get_TIMEOUT_IGNORED get="inline" set="null" line="3653" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_TIMEOUT_IGNORED>
		<get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL get="inline" set="null" line="3658" static="1">
			<f a="this">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<activeTexture public="1" get="inline" set="null" line="3663" static="1"><f a="this:texture">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" get="inline" set="null" line="3668" static="1"><f a="this:program:shader">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></attachShader>
		<beginQuery public="1" get="inline" set="null" line="3673" static="1"><f a="this:target:query">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></beginQuery>
		<beginTransformFeedback public="1" get="inline" set="null" line="3678" static="1"><f a="this:primitiveNode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></beginTransformFeedback>
		<bindAttribLocation public="1" get="inline" set="null" line="3683" static="1"><f a="this:program:index:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" get="inline" set="null" line="3688" static="1"><f a="this:target:buffer">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindBufferBase public="1" get="inline" set="null" line="3693" static="1"><f a="this:target:index:buffer">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBufferBase>
		<bindBufferRange public="1" get="inline" set="null" line="3698" static="1"><f a="this:target:index:buffer:offset:size">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bindBufferRange>
		<bindFramebuffer public="1" get="inline" set="null" line="3703" static="1"><f a="this:target:framebuffer">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" get="inline" set="null" line="3708" static="1"><f a="this:target:renderbuffer">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindSampler public="1" get="inline" set="null" line="3713" static="1"><f a="this:unit:sampler">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></bindSampler>
		<bindTexture public="1" get="inline" set="null" line="3718" static="1"><f a="this:target:texture">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture>
		<bindTransformFeedback public="1" get="inline" set="null" line="3723" static="1"><f a="this:target:transformFeedback">
	<d/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></bindTransformFeedback>
		<bindVertexArray public="1" get="inline" set="null" line="3728" static="1"><f a="this:vertexArray">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></bindVertexArray>
		<blendColor public="1" get="inline" set="null" line="3733" static="1"><f a="this:red:green:blue:alpha">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" get="inline" set="null" line="3738" static="1"><f a="this:mode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" get="inline" set="null" line="3743" static="1"><f a="this:modeRGB:modeAlpha">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" get="inline" set="null" line="3748" static="1"><f a="this:sfactor:dfactor">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" get="inline" set="null" line="3753" static="1"><f a="this:srcRGB:dstRGB:srcAlpha:dstAlpha">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<blitFramebuffer public="1" get="inline" set="null" line="3758" static="1"><f a="this:srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blitFramebuffer>
		<bufferData public="1" set="method" line="3764" static="1">
			<f a="this:target:srcData:usage:?srcOffset:?length" v="::::0:0">
				<d/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, srcOffset : 0 }</e></m></meta>
		</bufferData>
		<bufferSubData public="1" get="inline" set="null" line="3777" static="1">
			<f a="this:target:offset:srcData:?srcOffset:?length" v="::::0:">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</bufferSubData>
		<checkFramebufferStatus public="1" get="inline" set="null" line="3788" static="1"><f a="this:target">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" get="inline" set="null" line="3793" static="1"><f a="this:mask">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearBufferfi public="1" get="inline" set="null" line="3798" static="1"><f a="this:buffer:drawbuffer:depth:stencil">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<clearBufferfv public="1" set="method" line="3803" static="1">
			<f a="this:buffer:drawbuffer:values:?srcOffset" v="::::0">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</clearBufferfv>
		<clearBufferiv public="1" set="method" line="3809" static="1"><f a="this:buffer:drawbuffer:values:?srcOffset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferiv>
		<clearBufferuiv public="1" set="method" line="3815" static="1"><f a="this:buffer:drawbuffer:values:?srcOffset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferuiv>
		<clearColor public="1" get="inline" set="null" line="3821" static="1"><f a="this:red:green:blue:alpha">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" get="inline" set="null" line="3826" static="1"><f a="this:depth">
	<d/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" get="inline" set="null" line="3831" static="1"><f a="this:s">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<clientWaitSync public="1" get="inline" set="null" line="3836" static="1"><f a="this:sync:flags:timeout">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></clientWaitSync>
		<colorMask public="1" get="inline" set="null" line="3841" static="1"><f a="this:red:green:blue:alpha">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" get="inline" set="null" line="3846" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" set="method" line="3854" static="1">
			<f a="this:target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</compressedTexImage2D>
		<compressedTexImage3D public="1" set="method" line="3869" static="1">
			<f a="this:target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::::0:">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</compressedTexImage3D>
		<compressedTexSubImage2D public="1" get="inline" set="null" line="3879" static="1">
			<f a="this:target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v=":::::::::0:">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" get="inline" set="null" line="3894" static="1">
			<f a="this:target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v=":::::::::::0:">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</compressedTexSubImage3D>
		<copyBufferSubData public="1" get="inline" set="null" line="3901" static="1"><f a="this:readTarget:writeTarget:readOffset:writeOffset:size">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyBufferSubData>
		<copyTexImage2D public="1" get="inline" set="null" line="3906" static="1"><f a="this:target:level:internalformat:x:y:width:height:border">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" get="inline" set="null" line="3911" static="1"><f a="this:target:level:xoffset:yoffset:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<copyTexSubImage3D public="1" get="inline" set="null" line="3917" static="1"><f a="this:target:level:xoffset:yoffset:zoffset:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage3D>
		<createBuffer public="1" get="inline" set="null" line="3922" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLBuffer"/>
</f></createBuffer>
		<createFramebuffer public="1" get="inline" set="null" line="3927" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
</f></createFramebuffer>
		<createProgram public="1" get="inline" set="null" line="3932" static="1"><f a="this">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
</f></createProgram>
		<createQuery public="1" get="inline" set="null" line="3937" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
</f></createQuery>
		<createRenderbuffer public="1" get="inline" set="null" line="3942" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
</f></createRenderbuffer>
		<createSampler public="1" get="inline" set="null" line="3947" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
</f></createSampler>
		<createShader public="1" get="inline" set="null" line="3952" static="1"><f a="this:type">
	<d/>
	<x path="Int"/>
	<x path="lime.graphics.opengl.GLShader"/>
</f></createShader>
		<createTexture public="1" get="inline" set="null" line="3957" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLTexture"/>
</f></createTexture>
		<createTransformFeedback public="1" get="inline" set="null" line="3962" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
</f></createTransformFeedback>
		<createVertexArray public="1" get="inline" set="null" line="3967" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
</f></createVertexArray>
		<cullFace public="1" get="inline" set="null" line="3972" static="1"><f a="this:mode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" get="inline" set="null" line="3977" static="1"><f a="this:buffer">
	<d/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" get="inline" set="null" line="3982" static="1"><f a="this:framebuffer">
	<d/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" get="inline" set="null" line="3987" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteQuery public="1" get="inline" set="null" line="3992" static="1"><f a="this:query">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></deleteQuery>
		<deleteRenderbuffer public="1" get="inline" set="null" line="3997" static="1"><f a="this:renderbuffer">
	<d/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteSampler public="1" get="inline" set="null" line="4002" static="1"><f a="this:sampler">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></deleteSampler>
		<deleteShader public="1" get="inline" set="null" line="4007" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteSync public="1" get="inline" set="null" line="4012" static="1"><f a="this:sync">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Void"/>
</f></deleteSync>
		<deleteTexture public="1" get="inline" set="null" line="4017" static="1"><f a="this:texture">
	<d/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></deleteTexture>
		<deleteTransformFeedback public="1" get="inline" set="null" line="4022" static="1"><f a="this:transformFeedback">
	<d/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></deleteTransformFeedback>
		<deleteVertexArray public="1" get="inline" set="null" line="4027" static="1"><f a="this:vertexArray">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></deleteVertexArray>
		<depthFunc public="1" get="inline" set="null" line="4032" static="1"><f a="this:func">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" get="inline" set="null" line="4037" static="1"><f a="this:flag">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" get="inline" set="null" line="4042" static="1"><f a="this:zNear:zFar">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" get="inline" set="null" line="4047" static="1"><f a="this:program:shader">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" get="inline" set="null" line="4052" static="1"><f a="this:cap">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" get="inline" set="null" line="4057" static="1"><f a="this:index">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" get="inline" set="null" line="4062" static="1"><f a="this:mode:first:count">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawArraysInstanced public="1" get="inline" set="null" line="4067" static="1"><f a="this:mode:first:count:instanceCount">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArraysInstanced>
		<drawBuffers public="1" get="inline" set="null" line="4072" static="1"><f a="this:buffers">
	<d/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></drawBuffers>
		<drawElements public="1" get="inline" set="null" line="4077" static="1"><f a="this:mode:count:type:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawElements>
		<drawElementsInstanced public="1" get="inline" set="null" line="4082" static="1"><f a="this:mode:count:type:offset:instanceCount">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElementsInstanced>
		<drawRangeElements public="1" get="inline" set="null" line="4087" static="1"><f a="this:mode:start:end:count:type:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawRangeElements>
		<enable public="1" get="inline" set="null" line="4092" static="1"><f a="this:cap">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" get="inline" set="null" line="4097" static="1"><f a="this:index">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<endQuery public="1" get="inline" set="null" line="4102" static="1"><f a="this:target">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></endQuery>
		<endTransformFeedback public="1" get="inline" set="null" line="4107" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></endTransformFeedback>
		<fenceSync public="1" get="inline" set="null" line="4112" static="1"><f a="this:condition:flags">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSync"/>
</f></fenceSync>
		<finish public="1" get="inline" set="null" line="4117" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></finish>
		<flush public="1" get="inline" set="null" line="4122" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></flush>
		<framebufferRenderbuffer public="1" get="inline" set="null" line="4127" static="1"><f a="this:target:attachment:renderbuffertarget:renderbuffer">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" get="inline" set="null" line="4132" static="1"><f a="this:target:attachment:textarget:texture:level">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<framebufferTextureLayer public="1" get="inline" set="null" line="4137" static="1"><f a="this:target:attachment:texture:level:layer">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTextureLayer>
		<frontFace public="1" get="inline" set="null" line="4142" static="1"><f a="this:mode">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" get="inline" set="null" line="4147" static="1"><f a="this:target">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" get="inline" set="null" line="4152" static="1"><f a="this:program:index">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" get="inline" set="null" line="4157" static="1"><f a="this:program:index">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveUniform>
		<getActiveUniformBlockName public="1" get="inline" set="null" line="4162" static="1"><f a="this:program:uniformBlockIndex">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
</f></getActiveUniformBlockName>
		<getActiveUniformBlockParameter public="1" get="inline" set="null" line="4167" static="1"><f a="this:program:uniformBlockIndex:pname">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getActiveUniformBlockParameter>
		<getActiveUniforms public="1" get="inline" set="null" line="4172" static="1"><f a="this:program:uniformIndices:pname">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<d/>
</f></getActiveUniforms>
		<getAttachedShaders public="1" get="inline" set="null" line="4177" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" get="inline" set="null" line="4182" static="1"><f a="this:program:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" get="inline" set="null" line="4187" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getBufferSubData public="1" get="inline" set="null" line="4193" static="1">
			<f a="this:target:srcByteOffset:dstData:?srcOffset:?length" v="::::0:">
				<d/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</getBufferSubData>
		<getContextAttributes public="1" get="inline" set="null" line="4205" static="1"><f a="this">
	<d/>
	<t path="lime.graphics.opengl.GLContextAttributes"/>
</f></getContextAttributes>
		<getError public="1" get="inline" set="null" line="4210" static="1"><f a="this">
	<d/>
	<x path="Int"/>
</f></getError>
		<getExtension public="1" get="inline" set="null" line="4215" static="1"><f a="this:name">
	<d/>
	<c path="String"/>
	<d/>
</f></getExtension>
		<getFragDataLocation public="1" get="inline" set="null" line="4220" static="1"><f a="this:program:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getFragDataLocation>
		<getFramebufferAttachmentParameter public="1" get="inline" set="null" line="4225" static="1"><f a="this:target:attachment:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getFramebufferAttachmentParameter>
		<getIndexedParameter public="1" get="inline" set="null" line="4230" static="1"><f a="this:target:index">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getIndexedParameter>
		<getInternalformatParameter public="1" get="inline" set="null" line="4235" static="1"><f a="this:target:internalformat:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getInternalformatParameter>
		<getParameter public="1" get="inline" set="null" line="4240" static="1"><f a="this:pname">
	<d/>
	<x path="Int"/>
	<d/>
</f></getParameter>
		<getProgramInfoLog public="1" get="inline" set="null" line="4245" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getProgramParameter public="1" get="inline" set="null" line="4250" static="1"><f a="this:program:pname">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getQuery public="1" get="inline" set="null" line="4255" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
</f></getQuery>
		<getQueryParameter public="1" get="inline" set="null" line="4260" static="1"><f a="this:query:pname">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<d/>
</f></getQueryParameter>
		<getRenderbufferParameter public="1" get="inline" set="null" line="4265" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getSamplerParameter public="1" get="inline" set="null" line="4270" static="1"><f a="this:sampler:pname">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<d/>
</f></getSamplerParameter>
		<getShaderInfoLog public="1" get="inline" set="null" line="4275" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderParameter public="1" get="inline" set="null" line="4280" static="1"><f a="this:shader:pname">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" get="inline" set="null" line="4285" static="1"><f a="this:shadertype:precisiontype">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderSource public="1" get="inline" set="null" line="4290" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderSource>
		<getSupportedExtensions public="1" get="inline" set="null" line="4295" static="1"><f a="this">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></getSupportedExtensions>
		<getSyncParameter public="1" get="inline" set="null" line="4300" static="1"><f a="this:sync:pname">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<d/>
</f></getSyncParameter>
		<getTexParameter public="1" get="inline" set="null" line="4305" static="1"><f a="this:target:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getTransformFeedbackVarying public="1" get="inline" set="null" line="4310" static="1"><f a="this:program:index">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getTransformFeedbackVarying>
		<getUniform public="1" get="inline" set="null" line="4315" static="1"><f a="this:program:location">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformBlockIndex public="1" get="inline" set="null" line="4320" static="1"><f a="this:program:uniformBlockName">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getUniformBlockIndex>
		<getUniformIndices public="1" get="inline" set="null" line="4325" static="1"><f a="this:program:uniformNames">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="Int"/></c>
</f></getUniformIndices>
		<getUniformLocation public="1" get="inline" set="null" line="4330" static="1"><f a="this:program:name">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" get="inline" set="null" line="4335" static="1"><f a="this:index:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getVertexAttrib>
		<getVertexAttribOffset public="1" get="inline" set="null" line="4340" static="1"><f a="this:index:pname">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></getVertexAttribOffset>
		<hint public="1" get="inline" set="null" line="4345" static="1"><f a="this:target:mode">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<invalidateFramebuffer public="1" get="inline" set="null" line="4350" static="1"><f a="this:target:attachments">
	<d/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" get="inline" set="null" line="4355" static="1"><f a="this:target:attachments:x:y:width:height">
	<d/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></invalidateSubFramebuffer>
		<isBuffer public="1" get="inline" set="null" line="4360" static="1"><f a="this:buffer">
	<d/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isContextLost public="1" get="inline" set="null" line="4365" static="1"><f a="this">
	<d/>
	<x path="Bool"/>
</f></isContextLost>
		<isEnabled public="1" get="inline" set="null" line="4370" static="1"><f a="this:cap">
	<d/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" get="inline" set="null" line="4375" static="1"><f a="this:framebuffer">
	<d/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" get="inline" set="null" line="4380" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Bool"/>
</f></isProgram>
		<isQuery public="1" get="inline" set="null" line="4385" static="1"><f a="this:query">
	<d/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Bool"/>
</f></isQuery>
		<isRenderbuffer public="1" get="inline" set="null" line="4390" static="1"><f a="this:renderbuffer">
	<d/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isSampler public="1" get="inline" set="null" line="4395" static="1"><f a="this:sampler">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Bool"/>
</f></isSampler>
		<isShader public="1" get="inline" set="null" line="4400" static="1"><f a="this:shader">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Bool"/>
</f></isShader>
		<isSync public="1" get="inline" set="null" line="4405" static="1"><f a="this:sync">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Bool"/>
</f></isSync>
		<isTexture public="1" get="inline" set="null" line="4410" static="1"><f a="this:texture">
	<d/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Bool"/>
</f></isTexture>
		<isTransformFeedback public="1" get="inline" set="null" line="4415" static="1"><f a="this:transformFeedback">
	<d/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Bool"/>
</f></isTransformFeedback>
		<isVertexArray public="1" get="inline" set="null" line="4420" static="1"><f a="this:vertexArray">
	<d/>
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Bool"/>
</f></isVertexArray>
		<lineWidth public="1" get="inline" set="null" line="4425" static="1"><f a="this:width">
	<d/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" get="inline" set="null" line="4430" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></linkProgram>
		<pauseTransformFeedback public="1" get="inline" set="null" line="4435" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></pauseTransformFeedback>
		<pixelStorei public="1" get="inline" set="null" line="4440" static="1"><f a="this:pname:param">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" get="inline" set="null" line="4445" static="1"><f a="this:factor:units">
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<readBuffer public="1" get="inline" set="null" line="4450" static="1"><f a="this:src">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBuffer>
		<readPixels public="1" get="inline" set="null" line="4457" static="1">
			<f a="this:x:y:width:height:format:type:pixels:?dstOffset" v="::::::::0">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dstOffset : 0 }</e></m></meta>
		</readPixels>
		<renderbufferStorage public="1" get="inline" set="null" line="4466" static="1"><f a="this:target:internalformat:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<renderbufferStorageMultisample public="1" get="inline" set="null" line="4471" static="1"><f a="this:target:samples:internalformat:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorageMultisample>
		<resumeTransformFeedback public="1" get="inline" set="null" line="4476" static="1"><f a="this">
	<d/>
	<x path="Void"/>
</f></resumeTransformFeedback>
		<sampleCoverage public="1" get="inline" set="null" line="4481" static="1"><f a="this:value:invert">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<samplerParameterf public="1" get="inline" set="null" line="4486" static="1"><f a="this:sampler:pname:param">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<samplerParameteri public="1" get="inline" set="null" line="4491" static="1"><f a="this:sampler:pname:param">
	<d/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<scissor public="1" get="inline" set="null" line="4496" static="1"><f a="this:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" get="inline" set="null" line="4501" static="1"><f a="this:shader:source">
	<d/>
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" get="inline" set="null" line="4506" static="1"><f a="this:func:ref:mask">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" get="inline" set="null" line="4511" static="1"><f a="this:face:func:ref:mask">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" get="inline" set="null" line="4516" static="1"><f a="this:mask">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" get="inline" set="null" line="4521" static="1"><f a="this:face:mask">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" get="inline" set="null" line="4526" static="1"><f a="this:fail:zfail:zpass">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" get="inline" set="null" line="4531" static="1"><f a="this:face:fail:zfail:zpass">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" get="inline" set="null" line="4539" static="1">
			<f a="this:target:level:internalformat:width:height:border:format:type:srcData:?srcOffset" v="::::::::::0">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</texImage2D>
		<texImage3D public="1" get="inline" set="null" line="4554" static="1">
			<f a="this:target:level:internalformat:width:height:depth:border:format:type:srcData:?srcOffset" v=":::::::::::0">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</texImage3D>
		<texStorage2D public="1" get="inline" set="null" line="4560" static="1"><f a="this:target:level:internalformat:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage2D>
		<texStorage3D public="1" get="inline" set="null" line="4565" static="1"><f a="this:target:level:internalformat:width:height:depth">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage3D>
		<texParameterf public="1" get="inline" set="null" line="4570" static="1"><f a="this:target:pname:param">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" get="inline" set="null" line="4575" static="1"><f a="this:target:pname:param">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" get="inline" set="null" line="4583" static="1">
			<f a="this:target:level:xoffset:yoffset:width:height:format:type:srcData:?srcOffset" v="::::::::::0">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</texSubImage2D>
		<texSubImage3D public="1" get="inline" set="null" line="4596" static="1">
			<f a="this:target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v="::::::::::::0">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</texSubImage3D>
		<transformFeedbackVaryings public="1" get="inline" set="null" line="4602" static="1"><f a="this:program:varyings:bufferMode">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></transformFeedbackVaryings>
		<uniform1f public="1" get="inline" set="null" line="4607" static="1"><f a="this:location:v0">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" get="inline" set="null" line="4613" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1fv>
		<uniform1i public="1" get="inline" set="null" line="4621" static="1"><f a="this:location:v0">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" get="inline" set="null" line="4627" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1iv>
		<uniform1ui public="1" get="inline" set="null" line="4635" static="1"><f a="this:location:v0">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform1uiv public="1" get="inline" set="null" line="4640" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1uiv>
		<uniform2f public="1" get="inline" set="null" line="4645" static="1"><f a="this:location:v0:v1">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" get="inline" set="null" line="4651" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2fv>
		<uniform2i public="1" get="inline" set="null" line="4659" static="1"><f a="this:location:v0:v1">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" get="inline" set="null" line="4665" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2iv>
		<uniform2ui public="1" get="inline" set="null" line="4673" static="1"><f a="this:location:v0:v1">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform2uiv public="1" get="inline" set="null" line="4679" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2uiv>
		<uniform3f public="1" get="inline" set="null" line="4684" static="1"><f a="this:location:v0:v1:v2">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" get="inline" set="null" line="4691" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3fv>
		<uniform3i public="1" get="inline" set="null" line="4700" static="1"><f a="this:location:v0:v1:v2">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" get="inline" set="null" line="4707" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3iv>
		<uniform3ui public="1" get="inline" set="null" line="4716" static="1"><f a="this:location:v0:v1:v2">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform3uiv public="1" get="inline" set="null" line="4722" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3uiv>
		<uniform4f public="1" get="inline" set="null" line="4728" static="1"><f a="this:location:v0:v1:v2:v3">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" get="inline" set="null" line="4735" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4fv>
		<uniform4i public="1" get="inline" set="null" line="4745" static="1"><f a="this:location:v0:v1:v2:v3">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" get="inline" set="null" line="4752" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.Int32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4iv>
		<uniform4ui public="1" get="inline" set="null" line="4762" static="1"><f a="this:location:v0:v1:v2:v3">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform4uiv public="1" get="inline" set="null" line="4768" static="1"><f a="this:location:v:?srcOffset:?srcLength">
	<d/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.UInt32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4uiv>
		<uniformBlockBinding public="1" get="inline" set="null" line="4774" static="1"><f a="this:program:uniformBlockIndex:uniformBlockBinding">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniformBlockBinding>
		<uniformMatrix2fv public="1" set="method" line="4781" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix2fv>
		<uniformMatrix2x3fv public="1" set="method" line="4796" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix2x3fv>
		<uniformMatrix2x4fv public="1" set="method" line="4808" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix2x4fv>
		<uniformMatrix3fv public="1" set="method" line="4821" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix3fv>
		<uniformMatrix3x2fv public="1" set="method" line="4836" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix3x2fv>
		<uniformMatrix3x4fv public="1" set="method" line="4848" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" line="4861" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix4fv>
		<uniformMatrix4x2fv public="1" set="method" line="4876" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix4x2fv>
		<uniformMatrix4x3fv public="1" set="method" line="4888" static="1">
			<f a="this:location:transpose:v:?srcOffset:?srcLength" v="::::0:">
				<d/>
				<t path="lime.graphics.opengl.GLUniformLocation"/>
				<x path="Bool"/>
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</uniformMatrix4x3fv>
		<useProgram public="1" get="inline" set="null" line="4899" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" get="inline" set="null" line="4904" static="1"><f a="this:program">
	<d/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" get="inline" set="null" line="4909" static="1"><f a="this:indx:x">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" get="inline" set="null" line="4915" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
		<vertexAttrib2f public="1" get="inline" set="null" line="4920" static="1"><f a="this:indx:x:y">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" get="inline" set="null" line="4926" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
		<vertexAttrib3f public="1" get="inline" set="null" line="4931" static="1"><f a="this:indx:x:y:z">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" get="inline" set="null" line="4937" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
		<vertexAttrib4f public="1" get="inline" set="null" line="4943" static="1"><f a="this:indx:x:y:z:w">
	<d/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" get="inline" set="null" line="4949" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
		<vertexAttribDivisor public="1" get="inline" set="null" line="4954" static="1"><f a="this:index:divisor">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribDivisor>
		<vertexAttribI4i public="1" get="inline" set="null" line="4960" static="1"><f a="this:indx:x:y:z:w">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" get="inline" set="null" line="4966" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttribI4iv>
		<vertexAttribI4ui public="1" get="inline" set="null" line="4972" static="1"><f a="this:indx:x:y:z:w">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" get="inline" set="null" line="4978" static="1"><f a="this:indx:values">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttribI4uiv>
		<vertexAttribIPointer public="1" get="inline" set="null" line="4984" static="1"><f a="this:index:size:type:stride:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribIPointer>
		<vertexAttribPointer public="1" get="inline" set="null" line="4990" static="1"><f a="this:indx:size:type:normalized:stride:offset">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" get="inline" set="null" line="4995" static="1"><f a="this:x:y:width:height">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<waitSync public="1" get="inline" set="null" line="5000" static="1"><f a="this:sync:flags:timeout">
	<d/>
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></waitSync>
		<fromRenderContext set="method" line="5005" static="1">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="lime.graphics.WebGL2RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRenderContext>
		<fromGL set="method" line="5017" static="1">
			<f a="gl">
				<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
				<x path="lime.graphics.WebGL2RenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromGL>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime.graphics.RenderContext</e></m>
		</meta>
	</class>
	<abstract path="lime.graphics.WebGLRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/WebGLRenderContext.hx">
		<from>
			<icast field="fromWebGL2RenderContext"><x path="lime.graphics.WebGL2RenderContext"/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
			<icast field="fromGL"><x path="Class"><c path="lime.graphics.opengl.GL"/></x></icast>
		</from>
		<this><x path="lime.graphics.WebGL2RenderContext"/></this>
		<haxe_doc>The `WebGLRenderContext` allows access to WebGL features when OpenGL, OpenGL ES or
	WebGL is the render context type of the `Window`.

	Using a WebGL context on a desktop or mobile platform enables support for cross-platform
	code that should run all platforms (when hardware acceleration is supported).

	You can convert from `lime.graphics.RenderContext`, `lime.graphics.OpenGLRenderContext`,
	`lime.graphics.OpenGLES3RenderContext`, `lime.graphics.OpenGLES2RenderContext`,
	`lime.graphics.WebGL2RenderContext` or `lime.graphics.opengl.GL` directly if desired:

	```haxe
	var webgl:WebGLRenderContext = window.context;
	var webgl:WebGLRenderContext = gl;
	var webgl:WebGLRenderContext = gles3;
	var webgl:WebGLRenderContext = gles2;
	var webgl:WebGLRenderContext = webgl2;
	var webgl:WebGLRenderContext = GL;
	```</haxe_doc>
		<meta>
			<m n=":forward">
				<e>DEPTH_BUFFER_BIT</e>
				<e>STENCIL_BUFFER_BIT</e>
				<e>COLOR_BUFFER_BIT</e>
				<e>POINTS</e>
				<e>LINES</e>
				<e>LINE_LOOP</e>
				<e>LINE_STRIP</e>
				<e>TRIANGLES</e>
				<e>TRIANGLE_STRIP</e>
				<e>TRIANGLE_FAN</e>
				<e>ZERO</e>
				<e>ONE</e>
				<e>SRC_COLOR</e>
				<e>ONE_MINUS_SRC_COLOR</e>
				<e>SRC_ALPHA</e>
				<e>ONE_MINUS_SRC_ALPHA</e>
				<e>DST_ALPHA</e>
				<e>ONE_MINUS_DST_ALPHA</e>
				<e>DST_COLOR</e>
				<e>ONE_MINUS_DST_COLOR</e>
				<e>SRC_ALPHA_SATURATE</e>
				<e>FUNC_ADD</e>
				<e>BLEND_EQUATION</e>
				<e>BLEND_EQUATION_RGB</e>
				<e>BLEND_EQUATION_ALPHA</e>
				<e>FUNC_SUBTRACT</e>
				<e>FUNC_REVERSE_SUBTRACT</e>
				<e>BLEND_DST_RGB</e>
				<e>BLEND_SRC_RGB</e>
				<e>BLEND_DST_ALPHA</e>
				<e>BLEND_SRC_ALPHA</e>
				<e>CONSTANT_COLOR</e>
				<e>ONE_MINUS_CONSTANT_COLOR</e>
				<e>CONSTANT_ALPHA</e>
				<e>ONE_MINUS_CONSTANT_ALPHA</e>
				<e>BLEND_COLOR</e>
				<e>ARRAY_BUFFER</e>
				<e>ELEMENT_ARRAY_BUFFER</e>
				<e>ARRAY_BUFFER_BINDING</e>
				<e>ELEMENT_ARRAY_BUFFER_BINDING</e>
				<e>STREAM_DRAW</e>
				<e>STATIC_DRAW</e>
				<e>DYNAMIC_DRAW</e>
				<e>BUFFER_SIZE</e>
				<e>BUFFER_USAGE</e>
				<e>CURRENT_VERTEX_ATTRIB</e>
				<e>FRONT</e>
				<e>BACK</e>
				<e>FRONT_AND_BACK</e>
				<e>CULL_FACE</e>
				<e>BLEND</e>
				<e>DITHER</e>
				<e>STENCIL_TEST</e>
				<e>DEPTH_TEST</e>
				<e>SCISSOR_TEST</e>
				<e>POLYGON_OFFSET_FILL</e>
				<e>SAMPLE_ALPHA_TO_COVERAGE</e>
				<e>SAMPLE_COVERAGE</e>
				<e>NO_ERROR</e>
				<e>INVALID_ENUM</e>
				<e>INVALID_VALUE</e>
				<e>INVALID_OPERATION</e>
				<e>OUT_OF_MEMORY</e>
				<e>CW</e>
				<e>CCW</e>
				<e>LINE_WIDTH</e>
				<e>ALIASED_POINT_SIZE_RANGE</e>
				<e>ALIASED_LINE_WIDTH_RANGE</e>
				<e>CULL_FACE_MODE</e>
				<e>FRONT_FACE</e>
				<e>DEPTH_RANGE</e>
				<e>DEPTH_WRITEMASK</e>
				<e>DEPTH_CLEAR_VALUE</e>
				<e>DEPTH_FUNC</e>
				<e>STENCIL_CLEAR_VALUE</e>
				<e>STENCIL_FUNC</e>
				<e>STENCIL_FAIL</e>
				<e>STENCIL_PASS_DEPTH_FAIL</e>
				<e>STENCIL_PASS_DEPTH_PASS</e>
				<e>STENCIL_REF</e>
				<e>STENCIL_VALUE_MASK</e>
				<e>STENCIL_WRITEMASK</e>
				<e>STENCIL_BACK_FUNC</e>
				<e>STENCIL_BACK_FAIL</e>
				<e>STENCIL_BACK_PASS_DEPTH_FAIL</e>
				<e>STENCIL_BACK_PASS_DEPTH_PASS</e>
				<e>STENCIL_BACK_REF</e>
				<e>STENCIL_BACK_VALUE_MASK</e>
				<e>STENCIL_BACK_WRITEMASK</e>
				<e>VIEWPORT</e>
				<e>SCISSOR_BOX</e>
				<e>COLOR_CLEAR_VALUE</e>
				<e>COLOR_WRITEMASK</e>
				<e>UNPACK_ALIGNMENT</e>
				<e>PACK_ALIGNMENT</e>
				<e>MAX_TEXTURE_SIZE</e>
				<e>MAX_VIEWPORT_DIMS</e>
				<e>SUBPIXEL_BITS</e>
				<e>RED_BITS</e>
				<e>GREEN_BITS</e>
				<e>BLUE_BITS</e>
				<e>ALPHA_BITS</e>
				<e>DEPTH_BITS</e>
				<e>STENCIL_BITS</e>
				<e>POLYGON_OFFSET_UNITS</e>
				<e>POLYGON_OFFSET_FACTOR</e>
				<e>TEXTURE_BINDING_2D</e>
				<e>SAMPLE_BUFFERS</e>
				<e>SAMPLES</e>
				<e>SAMPLE_COVERAGE_VALUE</e>
				<e>SAMPLE_COVERAGE_INVERT</e>
				<e>COMPRESSED_TEXTURE_FORMATS</e>
				<e>DONT_CARE</e>
				<e>FASTEST</e>
				<e>NICEST</e>
				<e>GENERATE_MIPMAP_HINT</e>
				<e>BYTE</e>
				<e>UNSIGNED_BYTE</e>
				<e>SHORT</e>
				<e>UNSIGNED_SHORT</e>
				<e>INT</e>
				<e>UNSIGNED_INT</e>
				<e>FLOAT</e>
				<e>DEPTH_COMPONENT</e>
				<e>ALPHA</e>
				<e>RGB</e>
				<e>RGBA</e>
				<e>LUMINANCE</e>
				<e>LUMINANCE_ALPHA</e>
				<e>UNSIGNED_SHORT_4_4_4_4</e>
				<e>UNSIGNED_SHORT_5_5_5_1</e>
				<e>UNSIGNED_SHORT_5_6_5</e>
				<e>FRAGMENT_SHADER</e>
				<e>VERTEX_SHADER</e>
				<e>MAX_VERTEX_ATTRIBS</e>
				<e>MAX_VERTEX_UNIFORM_VECTORS</e>
				<e>MAX_VARYING_VECTORS</e>
				<e>MAX_COMBINED_TEXTURE_IMAGE_UNITS</e>
				<e>MAX_VERTEX_TEXTURE_IMAGE_UNITS</e>
				<e>MAX_TEXTURE_IMAGE_UNITS</e>
				<e>MAX_FRAGMENT_UNIFORM_VECTORS</e>
				<e>SHADER_TYPE</e>
				<e>DELETE_STATUS</e>
				<e>LINK_STATUS</e>
				<e>VALIDATE_STATUS</e>
				<e>ATTACHED_SHADERS</e>
				<e>ACTIVE_UNIFORMS</e>
				<e>ACTIVE_ATTRIBUTES</e>
				<e>SHADING_LANGUAGE_VERSION</e>
				<e>CURRENT_PROGRAM</e>
				<e>NEVER</e>
				<e>LESS</e>
				<e>EQUAL</e>
				<e>LEQUAL</e>
				<e>GREATER</e>
				<e>NOTEQUAL</e>
				<e>GEQUAL</e>
				<e>ALWAYS</e>
				<e>KEEP</e>
				<e>REPLACE</e>
				<e>INCR</e>
				<e>DECR</e>
				<e>INVERT</e>
				<e>INCR_WRAP</e>
				<e>DECR_WRAP</e>
				<e>VENDOR</e>
				<e>RENDERER</e>
				<e>VERSION</e>
				<e>NEAREST</e>
				<e>LINEAR</e>
				<e>NEAREST_MIPMAP_NEAREST</e>
				<e>LINEAR_MIPMAP_NEAREST</e>
				<e>NEAREST_MIPMAP_LINEAR</e>
				<e>LINEAR_MIPMAP_LINEAR</e>
				<e>TEXTURE_MAG_FILTER</e>
				<e>TEXTURE_MIN_FILTER</e>
				<e>TEXTURE_WRAP_S</e>
				<e>TEXTURE_WRAP_T</e>
				<e>TEXTURE_2D</e>
				<e>TEXTURE</e>
				<e>TEXTURE_CUBE_MAP</e>
				<e>TEXTURE_BINDING_CUBE_MAP</e>
				<e>TEXTURE_CUBE_MAP_POSITIVE_X</e>
				<e>TEXTURE_CUBE_MAP_NEGATIVE_X</e>
				<e>TEXTURE_CUBE_MAP_POSITIVE_Y</e>
				<e>TEXTURE_CUBE_MAP_NEGATIVE_Y</e>
				<e>TEXTURE_CUBE_MAP_POSITIVE_Z</e>
				<e>TEXTURE_CUBE_MAP_NEGATIVE_Z</e>
				<e>MAX_CUBE_MAP_TEXTURE_SIZE</e>
				<e>TEXTURE0</e>
				<e>TEXTURE1</e>
				<e>TEXTURE2</e>
				<e>TEXTURE3</e>
				<e>TEXTURE4</e>
				<e>TEXTURE5</e>
				<e>TEXTURE6</e>
				<e>TEXTURE7</e>
				<e>TEXTURE8</e>
				<e>TEXTURE9</e>
				<e>TEXTURE10</e>
				<e>TEXTURE11</e>
				<e>TEXTURE12</e>
				<e>TEXTURE13</e>
				<e>TEXTURE14</e>
				<e>TEXTURE15</e>
				<e>TEXTURE16</e>
				<e>TEXTURE17</e>
				<e>TEXTURE18</e>
				<e>TEXTURE19</e>
				<e>TEXTURE20</e>
				<e>TEXTURE21</e>
				<e>TEXTURE22</e>
				<e>TEXTURE23</e>
				<e>TEXTURE24</e>
				<e>TEXTURE25</e>
				<e>TEXTURE26</e>
				<e>TEXTURE27</e>
				<e>TEXTURE28</e>
				<e>TEXTURE29</e>
				<e>TEXTURE30</e>
				<e>TEXTURE31</e>
				<e>ACTIVE_TEXTURE</e>
				<e>REPEAT</e>
				<e>CLAMP_TO_EDGE</e>
				<e>MIRRORED_REPEAT</e>
				<e>FLOAT_VEC2</e>
				<e>FLOAT_VEC3</e>
				<e>FLOAT_VEC4</e>
				<e>INT_VEC2</e>
				<e>INT_VEC3</e>
				<e>INT_VEC4</e>
				<e>BOOL</e>
				<e>BOOL_VEC2</e>
				<e>BOOL_VEC3</e>
				<e>BOOL_VEC4</e>
				<e>FLOAT_MAT2</e>
				<e>FLOAT_MAT3</e>
				<e>FLOAT_MAT4</e>
				<e>SAMPLER_2D</e>
				<e>SAMPLER_CUBE</e>
				<e>VERTEX_ATTRIB_ARRAY_ENABLED</e>
				<e>VERTEX_ATTRIB_ARRAY_SIZE</e>
				<e>VERTEX_ATTRIB_ARRAY_STRIDE</e>
				<e>VERTEX_ATTRIB_ARRAY_TYPE</e>
				<e>VERTEX_ATTRIB_ARRAY_NORMALIZED</e>
				<e>VERTEX_ATTRIB_ARRAY_POINTER</e>
				<e>VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</e>
				<e>COMPILE_STATUS</e>
				<e>LOW_FLOAT</e>
				<e>MEDIUM_FLOAT</e>
				<e>HIGH_FLOAT</e>
				<e>LOW_INT</e>
				<e>MEDIUM_INT</e>
				<e>HIGH_INT</e>
				<e>FRAMEBUFFER</e>
				<e>RENDERBUFFER</e>
				<e>RGBA4</e>
				<e>RGB5_A1</e>
				<e>RGB565</e>
				<e>DEPTH_COMPONENT16</e>
				<e>STENCIL_INDEX</e>
				<e>STENCIL_INDEX8</e>
				<e>DEPTH_STENCIL</e>
				<e>RENDERBUFFER_WIDTH</e>
				<e>RENDERBUFFER_HEIGHT</e>
				<e>RENDERBUFFER_INTERNAL_FORMAT</e>
				<e>RENDERBUFFER_RED_SIZE</e>
				<e>RENDERBUFFER_GREEN_SIZE</e>
				<e>RENDERBUFFER_BLUE_SIZE</e>
				<e>RENDERBUFFER_ALPHA_SIZE</e>
				<e>RENDERBUFFER_DEPTH_SIZE</e>
				<e>RENDERBUFFER_STENCIL_SIZE</e>
				<e>FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</e>
				<e>FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</e>
				<e>FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</e>
				<e>FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</e>
				<e>COLOR_ATTACHMENT0</e>
				<e>DEPTH_ATTACHMENT</e>
				<e>STENCIL_ATTACHMENT</e>
				<e>DEPTH_STENCIL_ATTACHMENT</e>
				<e>NONE</e>
				<e>FRAMEBUFFER_COMPLETE</e>
				<e>FRAMEBUFFER_INCOMPLETE_ATTACHMENT</e>
				<e>FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</e>
				<e>FRAMEBUFFER_INCOMPLETE_DIMENSIONS</e>
				<e>FRAMEBUFFER_UNSUPPORTED</e>
				<e>FRAMEBUFFER_BINDING</e>
				<e>RENDERBUFFER_BINDING</e>
				<e>MAX_RENDERBUFFER_SIZE</e>
				<e>INVALID_FRAMEBUFFER_OPERATION</e>
				<e>UNPACK_FLIP_Y_WEBGL</e>
				<e>UNPACK_PREMULTIPLY_ALPHA_WEBGL</e>
				<e>CONTEXT_LOST_WEBGL</e>
				<e>UNPACK_COLORSPACE_CONVERSION_WEBGL</e>
				<e>BROWSER_DEFAULT_WEBGL</e>
				<e>type</e>
				<e>version</e>
				<e>activeTexture</e>
				<e>attachShader</e>
				<e>bindAttribLocation</e>
				<e>bindBuffer</e>
				<e>bindFramebuffer</e>
				<e>bindRenderbuffer</e>
				<e>bindTexture</e>
				<e>blendColor</e>
				<e>blendEquation</e>
				<e>blendEquationSeparate</e>
				<e>blendFunc</e>
				<e>blendFuncSeparate</e>
				<e>checkFramebufferStatus</e>
				<e>clear</e>
				<e>clearColor</e>
				<e>clearDepth</e>
				<e>clearStencil</e>
				<e>colorMask</e>
				<e>compileShader</e>
				<e>copyTexImage2D</e>
				<e>copyTexSubImage2D</e>
				<e>createBuffer</e>
				<e>createFramebuffer</e>
				<e>createProgram</e>
				<e>createRenderbuffer</e>
				<e>createShader</e>
				<e>createTexture</e>
				<e>cullFace</e>
				<e>cullFace</e>
				<e>deleteBuffer</e>
				<e>deleteFramebuffer</e>
				<e>deleteProgram</e>
				<e>deleteRenderbuffer</e>
				<e>deleteShader</e>
				<e>deleteTexture</e>
				<e>depthFunc</e>
				<e>depthMask</e>
				<e>depthRange</e>
				<e>detachShader</e>
				<e>disable</e>
				<e>disableVertexAttribArray</e>
				<e>drawArrays</e>
				<e>drawElements</e>
				<e>enable</e>
				<e>enableVertexAttribArray</e>
				<e>finish</e>
				<e>flush</e>
				<e>framebufferRenderbuffer</e>
				<e>framebufferTexture2D</e>
				<e>frontFace</e>
				<e>generateMipmap</e>
				<e>getActiveAttrib</e>
				<e>getActiveUniform</e>
				<e>getAttachedShaders</e>
				<e>getAttribLocation</e>
				<e>getBufferParameter</e>
				<e>getContextAttributes</e>
				<e>getError</e>
				<e>getExtension</e>
				<e>getFramebufferAttachmentParameter</e>
				<e>getParameter</e>
				<e>getProgramInfoLog</e>
				<e>getProgramParameter</e>
				<e>getRenderbufferParameter</e>
				<e>getShaderInfoLog</e>
				<e>getShaderParameter</e>
				<e>getShaderPrecisionFormat</e>
				<e>getShaderSource</e>
				<e>getSupportedExtensions</e>
				<e>getTexParameter</e>
				<e>getUniform</e>
				<e>getUniformLocation</e>
				<e>getVertexAttrib</e>
				<e>getVertexAttribOffset</e>
				<e>hint</e>
				<e>isBuffer</e>
				<e>isContextLost</e>
				<e>isEnabled</e>
				<e>isFramebuffer</e>
				<e>isProgram</e>
				<e>isRenderbuffer</e>
				<e>isShader</e>
				<e>isTexture</e>
				<e>lineWidth</e>
				<e>linkProgram</e>
				<e>pixelStorei</e>
				<e>polygonOffset</e>
				<e>renderbufferStorage</e>
				<e>sampleCoverage</e>
				<e>scissor</e>
				<e>shaderSource</e>
				<e>stencilFunc</e>
				<e>stencilFuncSeparate</e>
				<e>stencilMask</e>
				<e>stencilMaskSeparate</e>
				<e>stencilOp</e>
				<e>stencilOpSeparate</e>
				<e>texParameterf</e>
				<e>texParameteri</e>
				<e>uniform1f</e>
				<e>uniform1fv</e>
				<e>uniform1i</e>
				<e>uniform1iv</e>
				<e>uniform2f</e>
				<e>uniform2fv</e>
				<e>uniform2i</e>
				<e>uniform2iv</e>
				<e>uniform3f</e>
				<e>uniform3fv</e>
				<e>uniform3i</e>
				<e>uniform3iv</e>
				<e>uniform4f</e>
				<e>uniform4fv</e>
				<e>uniform4i</e>
				<e>uniform4iv</e>
				<e>useProgram</e>
				<e>validateProgram</e>
				<e>vertexAttrib1f</e>
				<e>vertexAttrib1fv</e>
				<e>vertexAttrib2f</e>
				<e>vertexAttrib2fv</e>
				<e>vertexAttrib3f</e>
				<e>vertexAttrib3fv</e>
				<e>vertexAttrib4f</e>
				<e>vertexAttrib4fv</e>
				<e>vertexAttribPointer</e>
				<e>viewport</e>
			</m>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/WebGLRenderContext.hx" private="1" module="lime.graphics.WebGLRenderContext" final="1">
	<bufferData public="1" set="method" line="80" static="1"><f a="this:target:srcData:usage">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
	<bufferSubData public="1" get="inline" set="null" line="85" static="1"><f a="this:target:offset:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></bufferSubData>
	<compressedTexImage2D public="1" set="method" line="91" static="1"><f a="this:target:level:internalformat:width:height:border:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexImage2D>
	<compressedTexSubImage2D public="1" get="inline" set="null" line="97" static="1"><f a="this:target:level:xoffset:yoffset:width:height:format:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
	<readPixels public="1" get="inline" set="null" line="103" static="1"><f a="this:x:y:width:height:format:type:pixels">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></readPixels>
	<texImage2D public="1" get="inline" set="null" line="110" static="1"><f a="this:target:level:internalformat:width:height:border:format:type:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texImage2D>
	<texSubImage2D public="1" get="inline" set="null" line="129" static="1">
		<f a="this:target:level:xoffset:yoffset:width:height:format:type:srcData:?srcOffset" v="::::::::::0">
			<x path="lime.graphics.WebGL2RenderContext"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
	</texSubImage2D>
	<uniformMatrix2fv public="1" set="method" line="146" static="1"><f a="this:location:transpose:v">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
	<uniformMatrix3fv public="1" set="method" line="151" static="1"><f a="this:location:transpose:v">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
	<uniformMatrix4fv public="1" set="method" line="156" static="1"><f a="this:location:transpose:v">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
	<fromWebGL2RenderContext set="method" line="161" static="1">
		<f a="gl">
			<x path="lime.graphics.WebGL2RenderContext"/>
			<x path="lime.graphics.WebGLRenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromWebGL2RenderContext>
	<fromRenderContext set="method" line="166" static="1">
		<f a="context">
			<c path="lime.graphics.RenderContext"/>
			<x path="lime.graphics.WebGLRenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRenderContext>
	<fromGL set="method" line="171" static="1">
		<f a="gl">
			<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
			<x path="lime.graphics.WebGLRenderContext"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromGL>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/WebGLRenderContext.hx" private="1" module="lime.graphics.WebGLRenderContext" final="1">
		<bufferData public="1" set="method" line="80" static="1"><f a="this:target:srcData:usage">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferSubData public="1" get="inline" set="null" line="85" static="1"><f a="this:target:offset:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></bufferSubData>
		<compressedTexImage2D public="1" set="method" line="91" static="1"><f a="this:target:level:internalformat:width:height:border:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexSubImage2D public="1" get="inline" set="null" line="97" static="1"><f a="this:target:level:xoffset:yoffset:width:height:format:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<readPixels public="1" get="inline" set="null" line="103" static="1"><f a="this:x:y:width:height:format:type:pixels">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></readPixels>
		<texImage2D public="1" get="inline" set="null" line="110" static="1"><f a="this:target:level:internalformat:width:height:border:format:type:srcData">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texImage2D>
		<texSubImage2D public="1" get="inline" set="null" line="129" static="1">
			<f a="this:target:level:xoffset:yoffset:width:height:format:type:srcData:?srcOffset" v="::::::::::0">
				<x path="lime.graphics.WebGL2RenderContext"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
		</texSubImage2D>
		<uniformMatrix2fv public="1" set="method" line="146" static="1"><f a="this:location:transpose:v">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method" line="151" static="1"><f a="this:location:transpose:v">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method" line="156" static="1"><f a="this:location:transpose:v">
	<x path="lime.graphics.WebGL2RenderContext"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<x path="lime.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
		<fromWebGL2RenderContext set="method" line="161" static="1">
			<f a="gl">
				<x path="lime.graphics.WebGL2RenderContext"/>
				<x path="lime.graphics.WebGLRenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromWebGL2RenderContext>
		<fromRenderContext set="method" line="166" static="1">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="lime.graphics.WebGLRenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRenderContext>
		<fromGL set="method" line="171" static="1">
			<f a="gl">
				<x path="Class"><c path="lime.graphics.opengl.GL"/></x>
				<x path="lime.graphics.WebGLRenderContext"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromGL>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.graphics.cairo.Cairo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/Cairo.hx">
		<version public="1" get="accessor" set="null" static="1"><x path="Int"/></version>
		<versionString public="1" get="accessor" set="null" static="1"><c path="String"/></versionString>
		<get_version set="method" line="754" static="1"><f a=""><x path="Int"/></f></get_version>
		<get_versionString set="method" line="763" static="1"><f a=""><c path="String"/></f></get_versionString>
		<antialias public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoAntialias"/></antialias>
		<currentPoint public="1" get="accessor" set="null"><c path="lime.math.Vector2"/></currentPoint>
		<dash public="1" get="accessor" set="accessor"><c path="Array"><x path="Float"/></c></dash>
		<dashCount public="1" get="accessor" set="null"><x path="Int"/></dashCount>
		<fillRule public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoFillRule"/></fillRule>
		<fontFace public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoFontFace"/></fontFace>
		<fontOptions public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoFontOptions"/></fontOptions>
		<groupTarget public="1" get="accessor" set="null"><x path="lime.graphics.cairo.CairoSurface"/></groupTarget>
		<hasCurrentPoint public="1" get="accessor" set="null"><x path="Bool"/></hasCurrentPoint>
		<lineCap public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoLineCap"/></lineCap>
		<lineJoin public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoLineJoin"/></lineJoin>
		<lineWidth public="1" get="accessor" set="accessor"><x path="Float"/></lineWidth>
		<matrix public="1" get="accessor" set="accessor"><c path="lime.math.Matrix3"/></matrix>
		<miterLimit public="1" get="accessor" set="accessor"><x path="Float"/></miterLimit>
		<source public="1" get="accessor" set="accessor"><x path="lime.graphics.cairo.CairoPattern"/></source>
		<target public="1" get="accessor" set="null"><x path="lime.graphics.cairo.CairoSurface"/></target>
		<tolerance public="1" get="accessor" set="accessor"><x path="Float"/></tolerance>
		<userData public="1"><d/></userData>
		<handle>
			<x path="lime.system.CFFIPointer"/>
			<meta><m n=":noCompletion"/></meta>
		</handle>
		<arc public="1" set="method" line="56"><f a="xc:yc:radius:angle1:angle2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></arc>
		<arcNegative public="1" set="method" line="63"><f a="xc:yc:radius:angle1:angle2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></arcNegative>
		<clip public="1" set="method" line="70"><f a=""><x path="Void"/></f></clip>
		<clipExtents public="1" set="method" line="77"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clipExtents>
		<clipPreserve public="1" set="method" line="84"><f a=""><x path="Void"/></f></clipPreserve>
		<closePath public="1" set="method" line="91"><f a=""><x path="Void"/></f></closePath>
		<copyPage public="1" set="method" line="98"><f a=""><x path="Void"/></f></copyPage>
		<curveTo public="1" set="method" line="105"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<fill public="1" set="method" line="112"><f a=""><x path="Void"/></f></fill>
		<fillExtents public="1" set="method" line="119"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillExtents>
		<fillPreserve public="1" set="method" line="126"><f a=""><x path="Void"/></f></fillPreserve>
		<getOperator public="1" set="method" line="133"><f a=""><x path="lime.graphics.cairo.CairoOperator"/></f></getOperator>
		<identityMatrix public="1" set="method" line="142"><f a=""><x path="Void"/></f></identityMatrix>
		<inClip public="1" set="method" line="149"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inClip>
		<inFill public="1" set="method" line="158"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inFill>
		<inStroke public="1" set="method" line="167"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inStroke>
		<lineTo public="1" set="method" line="176"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<mask public="1" set="method" line="183"><f a="pattern">
	<x path="lime.graphics.cairo.CairoPattern"/>
	<x path="Void"/>
</f></mask>
		<maskSurface public="1" set="method" line="190"><f a="surface:x:y">
	<x path="lime.graphics.cairo.CairoSurface"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></maskSurface>
		<moveTo public="1" set="method" line="197"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<newPath public="1" set="method" line="204"><f a=""><x path="Void"/></f></newPath>
		<paint public="1" set="method" line="211"><f a=""><x path="Void"/></f></paint>
		<paintWithAlpha public="1" set="method" line="218"><f a="alpha">
	<x path="Float"/>
	<x path="Void"/>
</f></paintWithAlpha>
		<popGroup public="1" set="method" line="225"><f a=""><x path="lime.graphics.cairo.CairoPattern"/></f></popGroup>
		<popGroupToSource public="1" set="method" line="234"><f a=""><x path="Void"/></f></popGroupToSource>
		<pushGroup public="1" set="method" line="241"><f a=""><x path="Void"/></f></pushGroup>
		<pushGroupWithContent public="1" set="method" line="248"><f a="content">
	<x path="lime.graphics.cairo.CairoContent"/>
	<x path="Void"/>
</f></pushGroupWithContent>
		<recreate set="method" line="255">
			<f a="surface">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</recreate>
		<rectangle public="1" set="method" line="262"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rectangle>
		<relCurveTo public="1" set="method" line="269"><f a="dx1:dy1:dx2:dy2:dx3:dy3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></relCurveTo>
		<relLineTo public="1" set="method" line="276"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></relLineTo>
		<relMoveTo public="1" set="method" line="283"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></relMoveTo>
		<resetClip public="1" set="method" line="290"><f a=""><x path="Void"/></f></resetClip>
		<restore public="1" set="method" line="297"><f a=""><x path="Void"/></f></restore>
		<rotate public="1" set="method" line="304"><f a="amount">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<save public="1" set="method" line="311"><f a=""><x path="Void"/></f></save>
		<scale public="1" set="method" line="318"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setFontSize public="1" set="method" line="325"><f a="size">
	<x path="Float"/>
	<x path="Void"/>
</f></setFontSize>
		<setOperator public="1" set="method" line="332"><f a="value">
	<x path="lime.graphics.cairo.CairoOperator"/>
	<x path="lime.graphics.cairo.CairoOperator"/>
</f></setOperator>
		<setSourceRGB public="1" set="method" line="341"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setSourceRGB>
		<setSourceRGBA public="1" set="method" line="348"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setSourceRGBA>
		<setSourceSurface public="1" set="method" line="355"><f a="surface:x:y">
	<x path="lime.graphics.cairo.CairoSurface"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setSourceSurface>
		<showGlyphs public="1" set="method" line="362"><f a="glyphs">
	<c path="Array"><c path="lime.graphics.cairo.CairoGlyph"/></c>
	<x path="Void"/>
</f></showGlyphs>
		<showPage public="1" set="method" line="375"><f a=""><x path="Void"/></f></showPage>
		<showText public="1" set="method" line="382"><f a="utf8">
	<c path="String"/>
	<x path="Void"/>
</f></showText>
		<status public="1" set="method" line="389"><f a=""><x path="lime.graphics.cairo.CairoStatus"/></f></status>
		<stroke public="1" set="method" line="398"><f a=""><x path="Void"/></f></stroke>
		<strokeExtents public="1" set="method" line="405"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeExtents>
		<strokePreserve public="1" set="method" line="412"><f a=""><x path="Void"/></f></strokePreserve>
		<textPath public="1" set="method" line="419"><f a="utf8">
	<c path="String"/>
	<x path="Void"/>
</f></textPath>
		<transform public="1" set="method" line="426"><f a="matrix">
	<c path="lime.math.Matrix3"/>
	<x path="Void"/>
</f></transform>
		<translate public="1" set="method" line="433"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<get_antialias set="method" line="441">
			<f a=""><x path="lime.graphics.cairo.CairoAntialias"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_antialias>
		<set_antialias set="method" line="450">
			<f a="value">
				<x path="lime.graphics.cairo.CairoAntialias"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_antialias>
		<get_currentPoint set="method" line="459">
			<f a=""><c path="lime.math.Vector2"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_currentPoint>
		<get_dash set="method" line="473">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_dash>
		<set_dash set="method" line="492">
			<f a="value">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_dash>
		<get_dashCount set="method" line="508">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_dashCount>
		<get_fillRule set="method" line="517">
			<f a=""><x path="lime.graphics.cairo.CairoFillRule"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_fillRule>
		<set_fillRule set="method" line="526">
			<f a="value">
				<x path="lime.graphics.cairo.CairoFillRule"/>
				<x path="lime.graphics.cairo.CairoFillRule"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_fillRule>
		<get_fontFace set="method" line="535">
			<f a=""><x path="lime.graphics.cairo.CairoFontFace"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_fontFace>
		<set_fontFace set="method" line="544">
			<f a="value">
				<x path="lime.graphics.cairo.CairoFontFace"/>
				<x path="lime.graphics.cairo.CairoFontFace"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_fontFace>
		<get_fontOptions set="method" line="553">
			<f a=""><x path="lime.graphics.cairo.CairoFontOptions"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_fontOptions>
		<set_fontOptions set="method" line="562">
			<f a="value">
				<x path="lime.graphics.cairo.CairoFontOptions"/>
				<x path="lime.graphics.cairo.CairoFontOptions"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_fontOptions>
		<get_groupTarget set="method" line="571">
			<f a=""><x path="lime.graphics.cairo.CairoSurface"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_groupTarget>
		<get_hasCurrentPoint set="method" line="580">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_hasCurrentPoint>
		<get_lineCap set="method" line="589">
			<f a=""><x path="lime.graphics.cairo.CairoLineCap"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_lineCap>
		<set_lineCap set="method" line="598">
			<f a="value">
				<x path="lime.graphics.cairo.CairoLineCap"/>
				<x path="lime.graphics.cairo.CairoLineCap"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_lineCap>
		<get_lineJoin set="method" line="607">
			<f a=""><x path="lime.graphics.cairo.CairoLineJoin"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_lineJoin>
		<set_lineJoin set="method" line="616">
			<f a="value">
				<x path="lime.graphics.cairo.CairoLineJoin"/>
				<x path="lime.graphics.cairo.CairoLineJoin"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_lineJoin>
		<get_lineWidth set="method" line="625">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_lineWidth>
		<set_lineWidth set="method" line="634">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_lineWidth>
		<get_matrix set="method" line="643">
			<f a=""><c path="lime.math.Matrix3"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_matrix>
		<set_matrix set="method" line="657">
			<f a="value">
				<c path="lime.math.Matrix3"/>
				<c path="lime.math.Matrix3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_matrix>
		<get_miterLimit set="method" line="671">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_miterLimit>
		<set_miterLimit set="method" line="680">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_miterLimit>
		<get_source set="method" line="709">
			<f a=""><x path="lime.graphics.cairo.CairoPattern"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_source>
		<set_source set="method" line="718">
			<f a="value">
				<x path="lime.graphics.cairo.CairoPattern"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_source>
		<get_target set="method" line="727">
			<f a=""><x path="lime.graphics.cairo.CairoSurface"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_target>
		<get_tolerance set="method" line="736">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_tolerance>
		<set_tolerance set="method" line="745">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_tolerance>
		<new public="1" set="method" line="46">
			<f a="?surface" v="null">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ surface : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoAntialias" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoAntialias.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoAntialias.hx" private="1" module="lime.graphics.cairo.CairoAntialias" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEFAULT>
	<NONE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NONE>
	<GRAY public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GRAY>
	<SUBPIXEL public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SUBPIXEL>
	<FAST public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FAST>
	<GOOD public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GOOD>
	<BEST public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
		<x path="lime.graphics.cairo.CairoAntialias"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEST>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoAntialias.hx" private="1" module="lime.graphics.cairo.CairoAntialias" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEFAULT>
		<NONE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NONE>
		<GRAY public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GRAY>
		<SUBPIXEL public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SUBPIXEL>
		<FAST public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FAST>
		<GOOD public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GOOD>
		<BEST public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEST>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoContent" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoContent.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoContent.CairoContent_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoContent.hx" private="1" module="lime.graphics.cairo.CairoContent" extern="1" final="1">
	<COLOR public="1" get="inline" set="null" expr="cast 0x1000" line="6" static="1">
		<x path="lime.graphics.cairo.CairoContent"/>
		<meta>
			<m n=":value"><e>cast 0x1000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COLOR>
	<ALPHA public="1" get="inline" set="null" expr="cast 0x2000" line="7" static="1">
		<x path="lime.graphics.cairo.CairoContent"/>
		<meta>
			<m n=":value"><e>cast 0x2000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALPHA>
	<COLOR_ALPHA public="1" get="inline" set="null" expr="cast 0x3000" line="8" static="1">
		<x path="lime.graphics.cairo.CairoContent"/>
		<meta>
			<m n=":value"><e>cast 0x3000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COLOR_ALPHA>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoContent.CairoContent_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoContent.hx" private="1" module="lime.graphics.cairo.CairoContent" extern="1" final="1">
		<COLOR public="1" get="inline" set="null" expr="cast 0x1000" line="6" static="1">
			<x path="lime.graphics.cairo.CairoContent"/>
			<meta>
				<m n=":value"><e>cast 0x1000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COLOR>
		<ALPHA public="1" get="inline" set="null" expr="cast 0x2000" line="7" static="1">
			<x path="lime.graphics.cairo.CairoContent"/>
			<meta>
				<m n=":value"><e>cast 0x2000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALPHA>
		<COLOR_ALPHA public="1" get="inline" set="null" expr="cast 0x3000" line="8" static="1">
			<x path="lime.graphics.cairo.CairoContent"/>
			<meta>
				<m n=":value"><e>cast 0x3000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COLOR_ALPHA>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoExtend" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoExtend.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoExtend.CairoExtend_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoExtend.hx" private="1" module="lime.graphics.cairo.CairoExtend" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoExtend"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NONE>
	<REPEAT public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoExtend"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</REPEAT>
	<REFLECT public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoExtend"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</REFLECT>
	<PAD public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoExtend"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAD>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoExtend.CairoExtend_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoExtend.hx" private="1" module="lime.graphics.cairo.CairoExtend" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoExtend"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NONE>
		<REPEAT public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoExtend"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</REPEAT>
		<REFLECT public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoExtend"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</REFLECT>
		<PAD public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoExtend"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAD>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoFillRule" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFillRule.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFillRule.hx" private="1" module="lime.graphics.cairo.CairoFillRule" extern="1" final="1">
	<WINDING public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoFillRule"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WINDING>
	<EVEN_ODD public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoFillRule"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EVEN_ODD>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFillRule.hx" private="1" module="lime.graphics.cairo.CairoFillRule" extern="1" final="1">
		<WINDING public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoFillRule"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WINDING>
		<EVEN_ODD public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoFillRule"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EVEN_ODD>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoFilter" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFilter.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoFilter.CairoFilter_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFilter.hx" private="1" module="lime.graphics.cairo.CairoFilter" extern="1" final="1">
	<FAST public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoFilter"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FAST>
	<GOOD public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoFilter"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GOOD>
	<BEST public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoFilter"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEST>
	<NEAREST public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoFilter"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NEAREST>
	<BILINEAR public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="lime.graphics.cairo.CairoFilter"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BILINEAR>
	<GAUSSIAN public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
		<x path="lime.graphics.cairo.CairoFilter"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GAUSSIAN>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoFilter.CairoFilter_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFilter.hx" private="1" module="lime.graphics.cairo.CairoFilter" extern="1" final="1">
		<FAST public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoFilter"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FAST>
		<GOOD public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoFilter"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GOOD>
		<BEST public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoFilter"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEST>
		<NEAREST public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoFilter"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NEAREST>
		<BILINEAR public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="lime.graphics.cairo.CairoFilter"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BILINEAR>
		<GAUSSIAN public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
			<x path="lime.graphics.cairo.CairoFilter"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GAUSSIAN>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoFontFace" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFontFace.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
		<impl><class path="lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFontFace.hx" private="1" module="lime.graphics.cairo.CairoFontFace" final="1">
	<_new set="method" line="10" static="1">
		<f a=""><x path="lime.graphics.cairo.CairoFontFace"/></f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<status public="1" set="method" line="16" static="1"><f a="this">
	<x path="lime.system.CFFIPointer"/>
	<x path="lime.graphics.cairo.CairoStatus"/>
</f></status>
	<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFontFace.hx" private="1" module="lime.graphics.cairo.CairoFontFace" final="1">
		<_new set="method" line="10" static="1">
			<f a=""><x path="lime.graphics.cairo.CairoFontFace"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<status public="1" set="method" line="16" static="1"><f a="this">
	<x path="lime.system.CFFIPointer"/>
	<x path="lime.graphics.cairo.CairoStatus"/>
</f></status>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoFontOptions" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFontOptions.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
		<impl><class path="lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFontOptions.hx" private="1" module="lime.graphics.cairo.CairoFontOptions" final="1">
	<antialias public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoAntialias"/></antialias>
	<hintMetrics public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoHintMetrics"/></hintMetrics>
	<hintStyle public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoHintStyle"/></hintStyle>
	<subpixelOrder public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoSubpixelOrder"/></subpixelOrder>
	<_new public="1" set="method" line="16" static="1">
		<f a=""><x path="lime.graphics.cairo.CairoFontOptions"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_antialias set="method" line="27" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoAntialias"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_antialias>
	<set_antialias set="method" line="36" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoAntialias"/>
			<x path="lime.graphics.cairo.CairoAntialias"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_antialias>
	<get_hintMetrics set="method" line="45" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoHintMetrics"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_hintMetrics>
	<set_hintMetrics set="method" line="54" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoHintMetrics"/>
			<x path="lime.graphics.cairo.CairoHintMetrics"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_hintMetrics>
	<get_hintStyle set="method" line="63" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoHintStyle"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_hintStyle>
	<set_hintStyle set="method" line="72" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoHintStyle"/>
			<x path="lime.graphics.cairo.CairoHintStyle"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_hintStyle>
	<get_subpixelOrder set="method" line="81" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_subpixelOrder>
	<set_subpixelOrder set="method" line="90" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_subpixelOrder>
	<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFontOptions.hx" private="1" module="lime.graphics.cairo.CairoFontOptions" final="1">
		<antialias public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoAntialias"/></antialias>
		<hintMetrics public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoHintMetrics"/></hintMetrics>
		<hintStyle public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoHintStyle"/></hintStyle>
		<subpixelOrder public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoSubpixelOrder"/></subpixelOrder>
		<_new public="1" set="method" line="16" static="1">
			<f a=""><x path="lime.graphics.cairo.CairoFontOptions"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_antialias set="method" line="27" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_antialias>
		<set_antialias set="method" line="36" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
				<x path="lime.graphics.cairo.CairoAntialias"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_antialias>
		<get_hintMetrics set="method" line="45" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintMetrics"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_hintMetrics>
		<set_hintMetrics set="method" line="54" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintMetrics"/>
				<x path="lime.graphics.cairo.CairoHintMetrics"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_hintMetrics>
		<get_hintStyle set="method" line="63" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintStyle"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_hintStyle>
		<set_hintStyle set="method" line="72" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoHintStyle"/>
				<x path="lime.graphics.cairo.CairoHintStyle"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_hintStyle>
		<get_subpixelOrder set="method" line="81" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_subpixelOrder>
		<set_subpixelOrder set="method" line="90" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
				<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_subpixelOrder>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoFormat" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFormat.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoFormat.CairoFormat_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFormat.hx" private="1" module="lime.graphics.cairo.CairoFormat" extern="1" final="1">
	<INVALID public="1" get="inline" set="null" expr="cast -1" line="6" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast -1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID>
	<ARGB32 public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARGB32>
	<RGB24 public="1" get="inline" set="null" expr="cast 1" line="8" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB24>
	<A8 public="1" get="inline" set="null" expr="cast 2" line="9" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</A8>
	<A1 public="1" get="inline" set="null" expr="cast 3" line="10" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</A1>
	<RGB16_565 public="1" get="inline" set="null" expr="cast 4" line="11" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB16_565>
	<RGB30 public="1" get="inline" set="null" expr="cast 5" line="12" static="1">
		<x path="lime.graphics.cairo.CairoFormat"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB30>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoFormat.CairoFormat_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoFormat.hx" private="1" module="lime.graphics.cairo.CairoFormat" extern="1" final="1">
		<INVALID public="1" get="inline" set="null" expr="cast -1" line="6" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast -1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID>
		<ARGB32 public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARGB32>
		<RGB24 public="1" get="inline" set="null" expr="cast 1" line="8" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB24>
		<A8 public="1" get="inline" set="null" expr="cast 2" line="9" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</A8>
		<A1 public="1" get="inline" set="null" expr="cast 3" line="10" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</A1>
		<RGB16_565 public="1" get="inline" set="null" expr="cast 4" line="11" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB16_565>
		<RGB30 public="1" get="inline" set="null" expr="cast 5" line="12" static="1">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB30>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.graphics.cairo.CairoGlyph" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoGlyph.hx">
		<index public="1"><x path="Int"/></index>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<new public="1" set="method" line="15">
			<f a="index:?x:?y" v=":0:0">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoHintMetrics" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoHintMetrics.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoHintMetrics.hx" private="1" module="lime.graphics.cairo.CairoHintMetrics" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoHintMetrics"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEFAULT>
	<OFF public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoHintMetrics"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OFF>
	<ON public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoHintMetrics"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ON>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoHintMetrics.CairoHintMetrics_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoHintMetrics.hx" private="1" module="lime.graphics.cairo.CairoHintMetrics" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoHintMetrics"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEFAULT>
		<OFF public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoHintMetrics"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OFF>
		<ON public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoHintMetrics"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ON>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoHintStyle" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoHintStyle.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoHintStyle.hx" private="1" module="lime.graphics.cairo.CairoHintStyle" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoHintStyle"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEFAULT>
	<NONE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoHintStyle"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NONE>
	<SLIGHT public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoHintStyle"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SLIGHT>
	<MEDIUM public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoHintStyle"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MEDIUM>
	<FULL public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="lime.graphics.cairo.CairoHintStyle"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FULL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoHintStyle.CairoHintStyle_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoHintStyle.hx" private="1" module="lime.graphics.cairo.CairoHintStyle" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoHintStyle"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEFAULT>
		<NONE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoHintStyle"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NONE>
		<SLIGHT public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoHintStyle"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SLIGHT>
		<MEDIUM public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoHintStyle"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MEDIUM>
		<FULL public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="lime.graphics.cairo.CairoHintStyle"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FULL>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoImageSurface" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoImageSurface.hx">
		<from>
			<icast><x path="lime.graphics.cairo.CairoSurface"/></icast>
			<icast><x path="lime.system.CFFIPointer"/></icast>
		</from>
		<this><x path="lime.graphics.cairo.CairoSurface"/></this>
		<to>
			<icast><x path="lime.graphics.cairo.CairoSurface"/></icast>
			<icast><x path="lime.system.CFFIPointer"/></icast>
		</to>
		<meta>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoImageSurface.hx" private="1" module="lime.graphics.cairo.CairoImageSurface" final="1">
	<data public="1" get="accessor" set="null" static="1"><x path="lime.utils.DataPointer"/></data>
	<format public="1" get="accessor" set="null" static="1"><x path="lime.graphics.cairo.CairoFormat"/></format>
	<height public="1" get="accessor" set="null" static="1"><x path="Int"/></height>
	<stride public="1" get="accessor" set="null" static="1"><x path="Int"/></stride>
	<width public="1" get="accessor" set="null" static="1"><x path="Int"/></width>
	<_new public="1" set="method" line="17" static="1">
		<f a="format:width:height">
			<x path="lime.graphics.cairo.CairoFormat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.graphics.cairo.CairoImageSurface"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" set="method" line="27" static="1"><f a="data:format:width:height:stride">
	<x path="lime.utils.DataPointer"/>
	<x path="lime.graphics.cairo.CairoFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.cairo.CairoSurface"/>
</f></create>
	<fromImage public="1" set="method" line="36" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="lime.graphics.cairo.CairoSurface"/>
</f></fromImage>
	<get_data set="method" line="46" static="1">
		<f a="this">
			<x path="lime.graphics.cairo.CairoSurface"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_data>
	<get_format set="method" line="55" static="1">
		<f a="this">
			<x path="lime.graphics.cairo.CairoSurface"/>
			<x path="lime.graphics.cairo.CairoFormat"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_format>
	<get_height set="method" line="64" static="1">
		<f a="this">
			<x path="lime.graphics.cairo.CairoSurface"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_height>
	<get_stride set="method" line="73" static="1">
		<f a="this">
			<x path="lime.graphics.cairo.CairoSurface"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_stride>
	<get_width set="method" line="82" static="1">
		<f a="this">
			<x path="lime.graphics.cairo.CairoSurface"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_width>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoImageSurface.hx" private="1" module="lime.graphics.cairo.CairoImageSurface" final="1">
		<data public="1" get="accessor" set="null" static="1"><x path="lime.utils.DataPointer"/></data>
		<format public="1" get="accessor" set="null" static="1"><x path="lime.graphics.cairo.CairoFormat"/></format>
		<height public="1" get="accessor" set="null" static="1"><x path="Int"/></height>
		<stride public="1" get="accessor" set="null" static="1"><x path="Int"/></stride>
		<width public="1" get="accessor" set="null" static="1"><x path="Int"/></width>
		<_new public="1" set="method" line="17" static="1">
			<f a="format:width:height">
				<x path="lime.graphics.cairo.CairoFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.cairo.CairoImageSurface"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" set="method" line="27" static="1"><f a="data:format:width:height:stride">
	<x path="lime.utils.DataPointer"/>
	<x path="lime.graphics.cairo.CairoFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.graphics.cairo.CairoSurface"/>
</f></create>
		<fromImage public="1" set="method" line="36" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="lime.graphics.cairo.CairoSurface"/>
</f></fromImage>
		<get_data set="method" line="46" static="1">
			<f a="this">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_data>
		<get_format set="method" line="55" static="1">
			<f a="this">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="lime.graphics.cairo.CairoFormat"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_format>
		<get_height set="method" line="64" static="1">
			<f a="this">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_height>
		<get_stride set="method" line="73" static="1">
			<f a="this">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_stride>
		<get_width set="method" line="82" static="1">
			<f a="this">
				<x path="lime.graphics.cairo.CairoSurface"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_width>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoLineCap" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoLineCap.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoLineCap.hx" private="1" module="lime.graphics.cairo.CairoLineCap" extern="1" final="1">
	<BUTT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoLineCap"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BUTT>
	<ROUND public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoLineCap"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ROUND>
	<SQUARE public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoLineCap"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SQUARE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoLineCap.hx" private="1" module="lime.graphics.cairo.CairoLineCap" extern="1" final="1">
		<BUTT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoLineCap"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BUTT>
		<ROUND public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoLineCap"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ROUND>
		<SQUARE public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoLineCap"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SQUARE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoLineJoin" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoLineJoin.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoLineJoin.hx" private="1" module="lime.graphics.cairo.CairoLineJoin" extern="1" final="1">
	<MITER public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoLineJoin"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MITER>
	<ROUND public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoLineJoin"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ROUND>
	<BEVEL public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoLineJoin"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEVEL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoLineJoin.hx" private="1" module="lime.graphics.cairo.CairoLineJoin" extern="1" final="1">
		<MITER public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoLineJoin"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MITER>
		<ROUND public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoLineJoin"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ROUND>
		<BEVEL public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoLineJoin"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEVEL>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoOperator" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoOperator.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoOperator.CairoOperator_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoOperator.hx" private="1" module="lime.graphics.cairo.CairoOperator" extern="1" final="1">
	<CLEAR public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLEAR>
	<SOURCE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SOURCE>
	<OVER public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OVER>
	<IN public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IN>
	<OUT public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OUT>
	<ATOP public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATOP>
	<DEST public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEST>
	<DEST_OVER public="1" get="inline" set="null" expr="cast 7" line="13" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEST_OVER>
	<DEST_IN public="1" get="inline" set="null" expr="cast 8" line="14" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEST_IN>
	<DEST_OUT public="1" get="inline" set="null" expr="cast 9" line="15" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEST_OUT>
	<DEST_ATOP public="1" get="inline" set="null" expr="cast 10" line="16" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEST_ATOP>
	<XOR public="1" get="inline" set="null" expr="cast 11" line="17" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XOR>
	<ADD public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ADD>
	<SATURATE public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SATURATE>
	<MULTIPLY public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MULTIPLY>
	<SCREEN public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SCREEN>
	<OVERLAY public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OVERLAY>
	<DARKEN public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKEN>
	<LIGHTEN public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIGHTEN>
	<COLOR_DODGE public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COLOR_DODGE>
	<COLOR_BURN public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COLOR_BURN>
	<HARD_LIGHT public="1" get="inline" set="null" expr="cast 21" line="27" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HARD_LIGHT>
	<SOFT_LIGHT public="1" get="inline" set="null" expr="cast 22" line="28" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SOFT_LIGHT>
	<DIFFERENCE public="1" get="inline" set="null" expr="cast 23" line="29" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DIFFERENCE>
	<EXCLUSION public="1" get="inline" set="null" expr="cast 24" line="30" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 24</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXCLUSION>
	<HSL_HUE public="1" get="inline" set="null" expr="cast 25" line="31" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HSL_HUE>
	<HSL_SATURATION public="1" get="inline" set="null" expr="cast 26" line="32" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 26</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HSL_SATURATION>
	<HSL_COLOR public="1" get="inline" set="null" expr="cast 27" line="33" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 27</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HSL_COLOR>
	<HSL_LUMINOSITY public="1" get="inline" set="null" expr="cast 28" line="34" static="1">
		<x path="lime.graphics.cairo.CairoOperator"/>
		<meta>
			<m n=":value"><e>cast 28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HSL_LUMINOSITY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoOperator.CairoOperator_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoOperator.hx" private="1" module="lime.graphics.cairo.CairoOperator" extern="1" final="1">
		<CLEAR public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLEAR>
		<SOURCE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SOURCE>
		<OVER public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OVER>
		<IN public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IN>
		<OUT public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OUT>
		<ATOP public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATOP>
		<DEST public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEST>
		<DEST_OVER public="1" get="inline" set="null" expr="cast 7" line="13" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEST_OVER>
		<DEST_IN public="1" get="inline" set="null" expr="cast 8" line="14" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEST_IN>
		<DEST_OUT public="1" get="inline" set="null" expr="cast 9" line="15" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEST_OUT>
		<DEST_ATOP public="1" get="inline" set="null" expr="cast 10" line="16" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEST_ATOP>
		<XOR public="1" get="inline" set="null" expr="cast 11" line="17" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XOR>
		<ADD public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ADD>
		<SATURATE public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SATURATE>
		<MULTIPLY public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MULTIPLY>
		<SCREEN public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SCREEN>
		<OVERLAY public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OVERLAY>
		<DARKEN public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKEN>
		<LIGHTEN public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIGHTEN>
		<COLOR_DODGE public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COLOR_DODGE>
		<COLOR_BURN public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COLOR_BURN>
		<HARD_LIGHT public="1" get="inline" set="null" expr="cast 21" line="27" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HARD_LIGHT>
		<SOFT_LIGHT public="1" get="inline" set="null" expr="cast 22" line="28" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SOFT_LIGHT>
		<DIFFERENCE public="1" get="inline" set="null" expr="cast 23" line="29" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DIFFERENCE>
		<EXCLUSION public="1" get="inline" set="null" expr="cast 24" line="30" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 24</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXCLUSION>
		<HSL_HUE public="1" get="inline" set="null" expr="cast 25" line="31" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HSL_HUE>
		<HSL_SATURATION public="1" get="inline" set="null" expr="cast 26" line="32" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 26</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HSL_SATURATION>
		<HSL_COLOR public="1" get="inline" set="null" expr="cast 27" line="33" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 27</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HSL_COLOR>
		<HSL_LUMINOSITY public="1" get="inline" set="null" expr="cast 28" line="34" static="1">
			<x path="lime.graphics.cairo.CairoOperator"/>
			<meta>
				<m n=":value"><e>cast 28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HSL_LUMINOSITY>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoPattern" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoPattern.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
		<impl><class path="lime.graphics.cairo._CairoPattern.CairoPattern_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoPattern.hx" private="1" module="lime.graphics.cairo.CairoPattern" final="1">
	<colorStopCount public="1" get="accessor" set="null" static="1"><x path="Int"/></colorStopCount>
	<extend public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoExtend"/></extend>
	<filter public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoFilter"/></filter>
	<matrix public="1" get="accessor" set="accessor" static="1"><c path="lime.math.Matrix3"/></matrix>
	<_new public="1" set="method" line="16" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoPattern"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<addColorStopRGB public="1" set="method" line="22" static="1"><f a="this:offset:r:g:b">
	<x path="lime.system.CFFIPointer"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addColorStopRGB>
	<addColorStopRGBA public="1" set="method" line="29" static="1"><f a="this:offset:r:g:b:a">
	<x path="lime.system.CFFIPointer"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addColorStopRGBA>
	<createForSurface public="1" set="method" line="36" static="1"><f a="surface">
	<x path="lime.graphics.cairo.CairoSurface"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createForSurface>
	<createLinear public="1" set="method" line="45" static="1"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createLinear>
	<createRadial public="1" set="method" line="54" static="1"><f a="cx0:cy0:radius0:cx1:cy1:radius1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createRadial>
	<createRGB public="1" set="method" line="63" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createRGB>
	<createRGBA public="1" set="method" line="72" static="1"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createRGBA>
	<get_colorStopCount set="method" line="82" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_colorStopCount>
	<get_extend set="method" line="91" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoExtend"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_extend>
	<set_extend set="method" line="100" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoExtend"/>
			<x path="lime.graphics.cairo.CairoExtend"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_extend>
	<get_filter set="method" line="109" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoFilter"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_filter>
	<set_filter set="method" line="118" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.graphics.cairo.CairoFilter"/>
			<x path="lime.graphics.cairo.CairoFilter"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_filter>
	<get_matrix set="method" line="127" static="1">
		<f a="this">
			<x path="lime.system.CFFIPointer"/>
			<c path="lime.math.Matrix3"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_matrix>
	<set_matrix set="method" line="141" static="1">
		<f a="this:value">
			<x path="lime.system.CFFIPointer"/>
			<c path="lime.math.Matrix3"/>
			<c path="lime.math.Matrix3"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_matrix>
	<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoPattern.CairoPattern_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoPattern.hx" private="1" module="lime.graphics.cairo.CairoPattern" final="1">
		<colorStopCount public="1" get="accessor" set="null" static="1"><x path="Int"/></colorStopCount>
		<extend public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoExtend"/></extend>
		<filter public="1" get="accessor" set="accessor" static="1"><x path="lime.graphics.cairo.CairoFilter"/></filter>
		<matrix public="1" get="accessor" set="accessor" static="1"><c path="lime.math.Matrix3"/></matrix>
		<_new public="1" set="method" line="16" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoPattern"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<addColorStopRGB public="1" set="method" line="22" static="1"><f a="this:offset:r:g:b">
	<x path="lime.system.CFFIPointer"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addColorStopRGB>
		<addColorStopRGBA public="1" set="method" line="29" static="1"><f a="this:offset:r:g:b:a">
	<x path="lime.system.CFFIPointer"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addColorStopRGBA>
		<createForSurface public="1" set="method" line="36" static="1"><f a="surface">
	<x path="lime.graphics.cairo.CairoSurface"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createForSurface>
		<createLinear public="1" set="method" line="45" static="1"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createLinear>
		<createRadial public="1" set="method" line="54" static="1"><f a="cx0:cy0:radius0:cx1:cy1:radius1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createRadial>
		<createRGB public="1" set="method" line="63" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createRGB>
		<createRGBA public="1" set="method" line="72" static="1"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.graphics.cairo.CairoPattern"/>
</f></createRGBA>
		<get_colorStopCount set="method" line="82" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_colorStopCount>
		<get_extend set="method" line="91" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoExtend"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_extend>
		<set_extend set="method" line="100" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoExtend"/>
				<x path="lime.graphics.cairo.CairoExtend"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_extend>
		<get_filter set="method" line="109" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFilter"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_filter>
		<set_filter set="method" line="118" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.graphics.cairo.CairoFilter"/>
				<x path="lime.graphics.cairo.CairoFilter"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_filter>
		<get_matrix set="method" line="127" static="1">
			<f a="this">
				<x path="lime.system.CFFIPointer"/>
				<c path="lime.math.Matrix3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_matrix>
		<set_matrix set="method" line="141" static="1">
			<f a="this:value">
				<x path="lime.system.CFFIPointer"/>
				<c path="lime.math.Matrix3"/>
				<c path="lime.math.Matrix3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_matrix>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoStatus" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoStatus.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoStatus.CairoStatus_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoStatus.hx" private="1" module="lime.graphics.cairo.CairoStatus" extern="1" final="1">
	<SUCCESS public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SUCCESS>
	<NO_MEMORY public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NO_MEMORY>
	<INVALID_RESTORE public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_RESTORE>
	<INVALID_POP_GROUP public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_POP_GROUP>
	<NO_CURRENT_POINT public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NO_CURRENT_POINT>
	<INVALID_MATRIX public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_MATRIX>
	<INVALID_STATUS public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_STATUS>
	<NULL_POINTER public="1" get="inline" set="null" expr="cast 7" line="13" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NULL_POINTER>
	<INVALID_STRING public="1" get="inline" set="null" expr="cast 8" line="14" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_STRING>
	<INVALID_PATH_DATA public="1" get="inline" set="null" expr="cast 9" line="15" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_PATH_DATA>
	<READ_ERROR public="1" get="inline" set="null" expr="cast 10" line="16" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</READ_ERROR>
	<WRITE_ERROR public="1" get="inline" set="null" expr="cast 11" line="17" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WRITE_ERROR>
	<SURFACE_FINISHED public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SURFACE_FINISHED>
	<SURFACE_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SURFACE_TYPE_MISMATCH>
	<PATTERN_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PATTERN_TYPE_MISMATCH>
	<INVALID_CONTENT public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_CONTENT>
	<INVALID_FORMAT public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_FORMAT>
	<INVALID_VISUAL public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_VISUAL>
	<FILE_NOT_FOUND public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FILE_NOT_FOUND>
	<INVALID_DASH public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_DASH>
	<INVALID_DSC_COMMENT public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_DSC_COMMENT>
	<INVALID_INDEX public="1" get="inline" set="null" expr="cast 21" line="27" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_INDEX>
	<CLIP_NOT_REPRESENTABLE public="1" get="inline" set="null" expr="cast 22" line="28" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLIP_NOT_REPRESENTABLE>
	<TEMP_FILE_ERROR public="1" get="inline" set="null" expr="cast 23" line="29" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEMP_FILE_ERROR>
	<INVALID_STRIDE public="1" get="inline" set="null" expr="cast 24" line="30" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 24</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_STRIDE>
	<FONT_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 25" line="31" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FONT_TYPE_MISMATCH>
	<USER_FONT_IMMUTABLE public="1" get="inline" set="null" expr="cast 26" line="32" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 26</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</USER_FONT_IMMUTABLE>
	<USER_FONT_ERROR public="1" get="inline" set="null" expr="cast 27" line="33" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 27</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</USER_FONT_ERROR>
	<NEGATIVE_COUNT public="1" get="inline" set="null" expr="cast 28" line="34" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NEGATIVE_COUNT>
	<INVALID_CLUSTERS public="1" get="inline" set="null" expr="cast 29" line="35" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 29</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_CLUSTERS>
	<INVALID_SLANT public="1" get="inline" set="null" expr="cast 30" line="36" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_SLANT>
	<INVALID_WEIGHT public="1" get="inline" set="null" expr="cast 31" line="37" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 31</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_WEIGHT>
	<INVALID_SIZE public="1" get="inline" set="null" expr="cast 32" line="38" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_SIZE>
	<USER_FONT_NOT_IMPLEMENTED public="1" get="inline" set="null" expr="cast 33" line="39" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</USER_FONT_NOT_IMPLEMENTED>
	<DEVICE_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 34" line="40" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 34</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEVICE_TYPE_MISMATCH>
	<DEVICE_ERROR public="1" get="inline" set="null" expr="cast 35" line="41" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 35</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEVICE_ERROR>
	<INVALID_MESH_CONSTRUCTION public="1" get="inline" set="null" expr="cast 36" line="42" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 36</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INVALID_MESH_CONSTRUCTION>
	<DEVICE_FINISHED public="1" get="inline" set="null" expr="cast 37" line="43" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 37</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEVICE_FINISHED>
	<JBIG2_GLOBAL_MISSING public="1" get="inline" set="null" expr="cast 38" line="44" static="1">
		<x path="lime.graphics.cairo.CairoStatus"/>
		<meta>
			<m n=":value"><e>cast 38</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</JBIG2_GLOBAL_MISSING>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoStatus.CairoStatus_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoStatus.hx" private="1" module="lime.graphics.cairo.CairoStatus" extern="1" final="1">
		<SUCCESS public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SUCCESS>
		<NO_MEMORY public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NO_MEMORY>
		<INVALID_RESTORE public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_RESTORE>
		<INVALID_POP_GROUP public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_POP_GROUP>
		<NO_CURRENT_POINT public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NO_CURRENT_POINT>
		<INVALID_MATRIX public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_MATRIX>
		<INVALID_STATUS public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_STATUS>
		<NULL_POINTER public="1" get="inline" set="null" expr="cast 7" line="13" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NULL_POINTER>
		<INVALID_STRING public="1" get="inline" set="null" expr="cast 8" line="14" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_STRING>
		<INVALID_PATH_DATA public="1" get="inline" set="null" expr="cast 9" line="15" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_PATH_DATA>
		<READ_ERROR public="1" get="inline" set="null" expr="cast 10" line="16" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</READ_ERROR>
		<WRITE_ERROR public="1" get="inline" set="null" expr="cast 11" line="17" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WRITE_ERROR>
		<SURFACE_FINISHED public="1" get="inline" set="null" expr="cast 12" line="18" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SURFACE_FINISHED>
		<SURFACE_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 13" line="19" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SURFACE_TYPE_MISMATCH>
		<PATTERN_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 14" line="20" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PATTERN_TYPE_MISMATCH>
		<INVALID_CONTENT public="1" get="inline" set="null" expr="cast 15" line="21" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_CONTENT>
		<INVALID_FORMAT public="1" get="inline" set="null" expr="cast 16" line="22" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_FORMAT>
		<INVALID_VISUAL public="1" get="inline" set="null" expr="cast 17" line="23" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_VISUAL>
		<FILE_NOT_FOUND public="1" get="inline" set="null" expr="cast 18" line="24" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FILE_NOT_FOUND>
		<INVALID_DASH public="1" get="inline" set="null" expr="cast 19" line="25" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_DASH>
		<INVALID_DSC_COMMENT public="1" get="inline" set="null" expr="cast 20" line="26" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_DSC_COMMENT>
		<INVALID_INDEX public="1" get="inline" set="null" expr="cast 21" line="27" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_INDEX>
		<CLIP_NOT_REPRESENTABLE public="1" get="inline" set="null" expr="cast 22" line="28" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLIP_NOT_REPRESENTABLE>
		<TEMP_FILE_ERROR public="1" get="inline" set="null" expr="cast 23" line="29" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEMP_FILE_ERROR>
		<INVALID_STRIDE public="1" get="inline" set="null" expr="cast 24" line="30" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 24</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_STRIDE>
		<FONT_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 25" line="31" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FONT_TYPE_MISMATCH>
		<USER_FONT_IMMUTABLE public="1" get="inline" set="null" expr="cast 26" line="32" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 26</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</USER_FONT_IMMUTABLE>
		<USER_FONT_ERROR public="1" get="inline" set="null" expr="cast 27" line="33" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 27</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</USER_FONT_ERROR>
		<NEGATIVE_COUNT public="1" get="inline" set="null" expr="cast 28" line="34" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NEGATIVE_COUNT>
		<INVALID_CLUSTERS public="1" get="inline" set="null" expr="cast 29" line="35" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 29</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_CLUSTERS>
		<INVALID_SLANT public="1" get="inline" set="null" expr="cast 30" line="36" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_SLANT>
		<INVALID_WEIGHT public="1" get="inline" set="null" expr="cast 31" line="37" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 31</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_WEIGHT>
		<INVALID_SIZE public="1" get="inline" set="null" expr="cast 32" line="38" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_SIZE>
		<USER_FONT_NOT_IMPLEMENTED public="1" get="inline" set="null" expr="cast 33" line="39" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</USER_FONT_NOT_IMPLEMENTED>
		<DEVICE_TYPE_MISMATCH public="1" get="inline" set="null" expr="cast 34" line="40" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 34</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEVICE_TYPE_MISMATCH>
		<DEVICE_ERROR public="1" get="inline" set="null" expr="cast 35" line="41" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 35</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEVICE_ERROR>
		<INVALID_MESH_CONSTRUCTION public="1" get="inline" set="null" expr="cast 36" line="42" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 36</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INVALID_MESH_CONSTRUCTION>
		<DEVICE_FINISHED public="1" get="inline" set="null" expr="cast 37" line="43" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 37</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEVICE_FINISHED>
		<JBIG2_GLOBAL_MISSING public="1" get="inline" set="null" expr="cast 38" line="44" static="1">
			<x path="lime.graphics.cairo.CairoStatus"/>
			<meta>
				<m n=":value"><e>cast 38</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</JBIG2_GLOBAL_MISSING>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoSubpixelOrder" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoSubpixelOrder.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoSubpixelOrder.hx" private="1" module="lime.graphics.cairo.CairoSubpixelOrder" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEFAULT>
	<RGB public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB>
	<BGR public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BGR>
	<VRGB public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VRGB>
	<VBGR public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VBGR>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoSubpixelOrder.CairoSubpixelOrder_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoSubpixelOrder.hx" private="1" module="lime.graphics.cairo.CairoSubpixelOrder" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEFAULT>
		<RGB public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB>
		<BGR public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BGR>
		<VRGB public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VRGB>
		<VBGR public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="lime.graphics.cairo.CairoSubpixelOrder"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VBGR>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.graphics.cairo.CairoSurface" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoSurface.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
		<impl><class path="lime.graphics.cairo._CairoSurface.CairoSurface_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoSurface.hx" private="1" module="lime.graphics.cairo.CairoSurface" final="1">
	<flush public="1" set="method" line="11" static="1"><f a="this">
	<x path="lime.system.CFFIPointer"/>
	<x path="Void"/>
</f></flush>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.cairo._CairoSurface.CairoSurface_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/cairo/CairoSurface.hx" private="1" module="lime.graphics.cairo.CairoSurface" final="1">
		<flush public="1" set="method" line="11" static="1"><f a="this">
	<x path="lime.system.CFFIPointer"/>
	<x path="Void"/>
</f></flush>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.graphics.opengl.GL" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GL.hx">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="0x00000100" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000100</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="0x00000400" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000400</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="0x00004000" line="22" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00004000</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0x0000" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="0x0001" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="0x0002" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="0x0003" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="0x0004" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="0x0005" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="0x0006" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="0x0300" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0300</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="0x0301" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0301</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="0x0302" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0302</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="0x0303" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0303</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="0x0304" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0304</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="0x0305" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0305</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="0x0306" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0306</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="0x0307" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0307</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="0x0308" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0308</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="0x8006" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8006</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="0x8009" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8009</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="0x8009" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8009</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="0x883D" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x883D</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="0x800A" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x800A</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="0x800B" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x800B</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="0x80C8" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80C8</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="0x80C9" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80C9</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="0x80CA" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80CA</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="0x80CB" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80CB</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="0x8001" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8001</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="0x8002" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8002</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="0x8003" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8003</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="0x8004" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8004</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="0x8005" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8005</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="0x8892" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8892</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="0x8893" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8893</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="0x8894" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8894</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="0x8895" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8895</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="0x88E0" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E0</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="0x88E4" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E4</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="0x88E8" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E8</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="0x8764" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8764</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="0x8765" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8765</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="0x8626" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8626</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="0x0404" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0404</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="0x0405" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0405</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="0x0408" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0408</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="0x0B44" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B44</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="0x0BE2" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BE2</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="0x0BD0" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BD0</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="0x0B90" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B90</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="0x0B71" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B71</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="0x0C11" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C11</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="0x8037" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8037</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="0x809E" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x809E</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="0x80A0" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80A0</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="0x0500" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0500</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="0x0501" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0501</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="0x0502" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0502</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="0x0505" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0505</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="0x0900" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0900</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="0x0901" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0901</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="0x0B21" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B21</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="0x846D" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x846D</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="0x846E" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x846E</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="0x0B45" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B45</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="0x0B46" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B46</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="0x0B70" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B70</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="0x0B72" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B72</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="0x0B73" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B73</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="0x0B74" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B74</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="0x0B91" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B91</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="0x0B92" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B92</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="0x0B94" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B94</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="0x0B95" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B95</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="0x0B96" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B96</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="0x0B97" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B97</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="0x0B93" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B93</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="0x0B98" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B98</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="0x8800" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8800</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="0x8801" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8801</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="0x8802" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8802</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="0x8803" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8803</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="0x8CA3" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA3</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="0x8CA4" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA4</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="0x8CA5" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA5</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="0x0BA2" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BA2</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="0x0C10" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C10</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="0x0C22" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C22</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="0x0C23" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C23</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="0x0CF5" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF5</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="0x0D05" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D05</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="0x0D33" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D33</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="0x0D3A" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D3A</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="0x0D50" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D50</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="0x0D52" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D52</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="0x0D53" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D53</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="0x0D54" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D54</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="0x0D55" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D55</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="0x0D56" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D56</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="0x0D57" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D57</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="0x2A00" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2A00</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="0x8038" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8038</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="0x8069" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8069</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="0x80A8" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80A8</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="0x80A9" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80A9</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="0x80AA" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80AA</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="0x80AB" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80AB</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<NUM_COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="0x86A2" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x86A2</e></m></meta>
		</NUM_COMPRESSED_TEXTURE_FORMATS>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="0x86A3" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x86A3</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="0x1100" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1100</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="0x1101" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1101</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="0x1102" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1102</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="0x8192" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8192</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="0x1400" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1400</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="0x1401" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1401</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="0x1402" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1402</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="0x1403" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1403</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="0x1404" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1404</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="0x1405" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1405</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="0x1406" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1406</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="0x1902" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1902</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="0x1906" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1906</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="0x1907" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1907</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="0x1908" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1908</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="0x1909" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1909</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="0x190A" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x190A</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="0x8033" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8033</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="0x8034" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8034</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="0x8363" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8363</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="0x8B30" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B30</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="0x8B31" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B31</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="0x8869" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8869</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="0x8DFB" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFB</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="0x8DFC" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFC</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="0x8B4D" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4D</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="0x8B4C" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4C</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="0x8872" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8872</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="0x8DFD" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DFD</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="0x8B4F" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4F</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="0x8B80" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B80</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="0x8B82" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B82</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="0x8B83" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B83</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="0x8B85" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B85</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="0x8B86" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B86</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="0x8B89" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B89</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="0x8B8C" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8C</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="0x8B8D" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8D</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="0x0200" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0200</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="0x0201" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0201</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="0x0202" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0202</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="0x0203" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0203</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="0x0204" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0204</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="0x0205" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0205</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="0x0206" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0206</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="0x0207" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0207</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="0x1E00" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E00</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="0x1E01" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E01</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="0x1E02" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E02</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="0x1E03" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1E03</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="0x150A" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x150A</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="0x8507" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8507</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="0x8508" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8508</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="0x1F00" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F00</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="0x1F01" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F01</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="0x1F02" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F02</e></m></meta>
		</VERSION>
		<EXTENSIONS public="1" get="inline" set="null" expr="0x1F03" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1F03</e></m></meta>
		</EXTENSIONS>
		<NEAREST public="1" get="inline" set="null" expr="0x2600" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2600</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="0x2601" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2601</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="0x2700" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2700</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="0x2701" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2701</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="0x2702" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2702</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="0x2703" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2703</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="0x2800" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2800</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="0x2801" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2801</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="0x2802" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2802</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="0x2803" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2803</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="0x0DE1" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0DE1</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="0x1702" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1702</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="0x8513" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8513</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="0x8514" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8514</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="0x8515" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8515</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="0x8516" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8516</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="0x8517" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8517</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="0x8518" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8518</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="0x8519" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8519</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="0x851A" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x851A</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="0x851C" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x851C</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="0x84C0" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C0</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="0x84C1" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C1</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="0x84C2" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C2</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="0x84C3" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C3</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="0x84C4" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C4</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="0x84C5" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C5</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="0x84C6" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C6</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="0x84C7" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C7</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="0x84C8" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C8</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="0x84C9" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84C9</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="0x84CA" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CA</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="0x84CB" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CB</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="0x84CC" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CC</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="0x84CD" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CD</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="0x84CE" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CE</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="0x84CF" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84CF</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="0x84D0" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D0</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="0x84D1" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D1</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="0x84D2" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D2</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="0x84D3" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D3</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="0x84D4" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D4</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="0x84D5" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D5</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="0x84D6" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D6</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="0x84D7" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D7</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="0x84D8" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D8</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="0x84D9" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84D9</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="0x84DA" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DA</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="0x84DB" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DB</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="0x84DC" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DC</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="0x84DD" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DD</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="0x84DE" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DE</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="0x84DF" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84DF</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="0x84E0" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84E0</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="0x2901" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2901</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="0x812F" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x812F</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="0x8370" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8370</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="0x8B50" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B50</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="0x8B51" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B51</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="0x8B52" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B52</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="0x8B53" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B53</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="0x8B54" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B54</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="0x8B55" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B55</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="0x8B56" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B56</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="0x8B57" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B57</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="0x8B58" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B58</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="0x8B59" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B59</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="0x8B5A" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5A</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="0x8B5B" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5B</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="0x8B5C" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5C</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="0x8B5E" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5E</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="0x8B60" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B60</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="0x8622" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8622</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="0x8623" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8623</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="0x8624" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8624</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="0x8625" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8625</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="0x886A" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x886A</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="0x8645" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8645</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="0x889F" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x889F</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="0x8B9A" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B9A</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="0x8B9B" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B9B</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<VERTEX_PROGRAM_POINT_SIZE public="1" get="inline" set="null" expr="0x8642" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8642</e></m></meta>
		</VERTEX_PROGRAM_POINT_SIZE>
		<POINT_SPRITE public="1" get="inline" set="null" expr="0x8861" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8861</e></m></meta>
		</POINT_SPRITE>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="0x8B81" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B81</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="0x8DF0" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF0</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="0x8DF1" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF1</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="0x8DF2" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF2</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="0x8DF3" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF3</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="0x8DF4" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF4</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="0x8DF5" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF5</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="0x8D40" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D40</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="0x8D41" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D41</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="0x8056" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8056</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="0x8057" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8057</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="0x8D62" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D62</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="0x81A5" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A5</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX public="1" get="inline" set="null" expr="0x1901" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1901</e></m></meta>
		</STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="0x8D48" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D48</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="0x84F9" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F9</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="0x8D42" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D42</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="0x8D43" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D43</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="0x8D44" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D44</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="0x8D50" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D50</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="0x8D51" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D51</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="0x8D52" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D52</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="0x8D53" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D53</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="0x8D54" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D54</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="0x8D55" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D55</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="0x8CD0" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD0</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="0x8CD1" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD1</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="0x8CD2" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD2</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="0x8CD3" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD3</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="0x8CE0" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE0</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="0x8D00" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D00</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="0x8D20" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D20</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="0x821A" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x821A</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="0x8CD5" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD5</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="0x8CD6" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD6</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="0x8CD7" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD7</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="0x8CD9" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD9</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="0x8CDD" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CDD</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="0x8CA6" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA6</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="0x8CA7" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA7</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="0x84E8" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84E8</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="0x0506" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0506</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="0x9240" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9240</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="0x9241" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9241</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="0x9242" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9242</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="0x9243" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9243</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="0x9244" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9244</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<READ_BUFFER public="1" get="inline" set="null" expr="0x0C02" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C02</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="inline" set="null" expr="0x0CF2" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF2</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="inline" set="null" expr="0x0CF3" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF3</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="inline" set="null" expr="0x0CF4" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF4</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="inline" set="null" expr="0x0D02" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D02</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="inline" set="null" expr="0x0D03" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D03</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="inline" set="null" expr="0x0D04" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D04</e></m></meta>
		</PACK_SKIP_PIXELS>
		<TEXTURE_BINDING_3D public="1" get="inline" set="null" expr="0x806A" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806A</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="inline" set="null" expr="0x806D" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806D</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="inline" set="null" expr="0x806E" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806E</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<MAX_3D_TEXTURE_SIZE public="1" get="inline" set="null" expr="0x8073" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8073</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<MAX_ELEMENTS_VERTICES public="1" get="inline" set="null" expr="0x80E8" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E8</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="inline" set="null" expr="0x80E9" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E9</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<MAX_TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="0x84FD" line="334" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FD</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="0x8B49" line="335" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B49</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="0x8B4A" line="336" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4A</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="inline" set="null" expr="0x88FF" line="337" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FF</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="0x8904" line="338" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8904</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="0x8905" line="339" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8905</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="inline" set="null" expr="0x8B4B" line="340" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B4B</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="inline" set="null" expr="0x8B8B" line="341" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8B</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<RASTERIZER_DISCARD public="1" get="inline" set="null" expr="0x8C89" line="342" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C89</e></m></meta>
		</RASTERIZER_DISCARD>
		<VERTEX_ARRAY_BINDING public="1" get="inline" set="null" expr="0x85B5" line="343" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x85B5</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="inline" set="null" expr="0x9122" line="344" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9122</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="inline" set="null" expr="0x9125" line="345" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9125</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="inline" set="null" expr="0x9111" line="346" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9111</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<MAX_ELEMENT_INDEX public="1" get="inline" set="null" expr="0x8D6B" line="347" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D6B</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<RED public="1" get="inline" set="null" expr="0x1903" line="348" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1903</e></m></meta>
		</RED>
		<RGB8 public="1" get="inline" set="null" expr="0x8051" line="349" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8051</e></m></meta>
		</RGB8>
		<RGBA8 public="1" get="inline" set="null" expr="0x8058" line="350" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8058</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" get="inline" set="null" expr="0x8059" line="351" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8059</e></m></meta>
		</RGB10_A2>
		<TEXTURE_3D public="1" get="inline" set="null" expr="0x806F" line="352" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806F</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="inline" set="null" expr="0x8072" line="353" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8072</e></m></meta>
		</TEXTURE_WRAP_R>
		<TEXTURE_MIN_LOD public="1" get="inline" set="null" expr="0x813A" line="354" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813A</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="inline" set="null" expr="0x813B" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813B</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="0x813C" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813C</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="0x813D" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813D</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<TEXTURE_COMPARE_MODE public="1" get="inline" set="null" expr="0x884C" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884C</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="inline" set="null" expr="0x884D" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884D</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<SRGB public="1" get="inline" set="null" expr="0x8C40" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C40</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="0x8C41" line="361" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C41</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" get="inline" set="null" expr="0x8C43" line="362" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C43</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="inline" set="null" expr="0x884E" line="363" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884E</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="inline" set="null" expr="0x8814" line="364" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8814</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" get="inline" set="null" expr="0x8815" line="365" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8815</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" get="inline" set="null" expr="0x881A" line="366" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881A</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" get="inline" set="null" expr="0x881B" line="367" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881B</e></m></meta>
		</RGB16F>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="0x8C1A" line="368" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C1A</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="inline" set="null" expr="0x8C1D" line="369" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C1D</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="0x8C3A" line="370" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3A</e></m></meta>
		</R11F_G11F_B10F>
		<RGB9_E5 public="1" get="inline" set="null" expr="0x8C3D" line="371" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3D</e></m></meta>
		</RGB9_E5>
		<RGBA32UI public="1" get="inline" set="null" expr="0x8D70" line="372" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D70</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" get="inline" set="null" expr="0x8D71" line="373" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D71</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" get="inline" set="null" expr="0x8D76" line="374" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D76</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" get="inline" set="null" expr="0x8D77" line="375" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D77</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" get="inline" set="null" expr="0x8D7C" line="376" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D7C</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" get="inline" set="null" expr="0x8D7D" line="377" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D7D</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" get="inline" set="null" expr="0x8D82" line="378" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D82</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" get="inline" set="null" expr="0x8D83" line="379" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D83</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" get="inline" set="null" expr="0x8D88" line="380" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D88</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" get="inline" set="null" expr="0x8D89" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D89</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" get="inline" set="null" expr="0x8D8E" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D8E</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" get="inline" set="null" expr="0x8D8F" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D8F</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" get="inline" set="null" expr="0x8D94" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D94</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" get="inline" set="null" expr="0x8D98" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D98</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" get="inline" set="null" expr="0x8D99" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D99</e></m></meta>
		</RGBA_INTEGER>
		<R8 public="1" get="inline" set="null" expr="0x8229" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8229</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="0x822B" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822B</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="0x822D" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822D</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="0x822E" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822E</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="0x822F" line="391" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822F</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="0x8230" line="392" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8230</e></m></meta>
		</RG32F>
		<R8I public="1" get="inline" set="null" expr="0x8231" line="393" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8231</e></m></meta>
		</R8I>
		<R8UI public="1" get="inline" set="null" expr="0x8232" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8232</e></m></meta>
		</R8UI>
		<R16I public="1" get="inline" set="null" expr="0x8233" line="395" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8233</e></m></meta>
		</R16I>
		<R16UI public="1" get="inline" set="null" expr="0x8234" line="396" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8234</e></m></meta>
		</R16UI>
		<R32I public="1" get="inline" set="null" expr="0x8235" line="397" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8235</e></m></meta>
		</R32I>
		<R32UI public="1" get="inline" set="null" expr="0x8236" line="398" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8236</e></m></meta>
		</R32UI>
		<RG8I public="1" get="inline" set="null" expr="0x8237" line="399" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8237</e></m></meta>
		</RG8I>
		<RG8UI public="1" get="inline" set="null" expr="0x8238" line="400" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8238</e></m></meta>
		</RG8UI>
		<RG16I public="1" get="inline" set="null" expr="0x8239" line="401" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8239</e></m></meta>
		</RG16I>
		<RG16UI public="1" get="inline" set="null" expr="0x823A" line="402" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x823A</e></m></meta>
		</RG16UI>
		<RG32I public="1" get="inline" set="null" expr="0x823B" line="403" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x823B</e></m></meta>
		</RG32I>
		<RG32UI public="1" get="inline" set="null" expr="0x823C" line="404" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x823C</e></m></meta>
		</RG32UI>
		<R8_SNORM public="1" get="inline" set="null" expr="0x8F94" line="405" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F94</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" get="inline" set="null" expr="0x8F95" line="406" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F95</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" get="inline" set="null" expr="0x8F96" line="407" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F96</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" get="inline" set="null" expr="0x8F97" line="408" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F97</e></m></meta>
		</RGBA8_SNORM>
		<RGB10_A2UI public="1" get="inline" set="null" expr="0x906F" line="409" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x906F</e></m></meta>
		</RGB10_A2UI>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="inline" set="null" expr="0x912F" line="410" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x912F</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="inline" set="null" expr="0x82DF" line="411" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82DF</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="0x8368" line="412" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8368</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="0x8C3B" line="413" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3B</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="inline" set="null" expr="0x8C3E" line="414" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3E</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="inline" set="null" expr="0x8DAD" line="415" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DAD</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<UNSIGNED_INT_24_8 public="1" get="inline" set="null" expr="0x84FA" line="416" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FA</e></m></meta>
		</UNSIGNED_INT_24_8>
		<HALF_FLOAT public="1" get="inline" set="null" expr="0x140B" line="417" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x140B</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" get="inline" set="null" expr="0x8227" line="418" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8227</e></m></meta>
		</RG>
		<RG_INTEGER public="1" get="inline" set="null" expr="0x8228" line="419" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8228</e></m></meta>
		</RG_INTEGER>
		<INT_2_10_10_10_REV public="1" get="inline" set="null" expr="0x8D9F" line="420" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D9F</e></m></meta>
		</INT_2_10_10_10_REV>
		<CURRENT_QUERY public="1" get="inline" set="null" expr="0x8865" line="421" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8865</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" get="inline" set="null" expr="0x8866" line="422" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8866</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="inline" set="null" expr="0x8867" line="423" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8867</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<ANY_SAMPLES_PASSED public="1" get="inline" set="null" expr="0x8C2F" line="424" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C2F</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="inline" set="null" expr="0x8D6A" line="425" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D6A</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<MAX_DRAW_BUFFERS public="1" get="inline" set="null" expr="0x8824" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8824</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="inline" set="null" expr="0x8825" line="427" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8825</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="inline" set="null" expr="0x8826" line="428" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8826</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="inline" set="null" expr="0x8827" line="429" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8827</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="inline" set="null" expr="0x8828" line="430" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8828</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="inline" set="null" expr="0x8829" line="431" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8829</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="inline" set="null" expr="0x882A" line="432" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882A</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="inline" set="null" expr="0x882B" line="433" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882B</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="inline" set="null" expr="0x882C" line="434" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882C</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="inline" set="null" expr="0x882D" line="435" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882D</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="inline" set="null" expr="0x882E" line="436" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882E</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="inline" set="null" expr="0x882F" line="437" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882F</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="inline" set="null" expr="0x8830" line="438" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8830</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="inline" set="null" expr="0x8831" line="439" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8831</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="inline" set="null" expr="0x8832" line="440" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8832</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="inline" set="null" expr="0x8833" line="441" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8833</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="inline" set="null" expr="0x8834" line="442" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8834</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_COLOR_ATTACHMENTS public="1" get="inline" set="null" expr="0x8CDF" line="443" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CDF</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="inline" set="null" expr="0x8CE1" line="444" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE1</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="inline" set="null" expr="0x8CE2" line="445" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE2</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="inline" set="null" expr="0x8CE3" line="446" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE3</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="inline" set="null" expr="0x8CE4" line="447" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE4</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="inline" set="null" expr="0x8CE5" line="448" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE5</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="inline" set="null" expr="0x8CE6" line="449" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE6</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="inline" set="null" expr="0x8CE7" line="450" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE7</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="inline" set="null" expr="0x8CE8" line="451" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE8</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="inline" set="null" expr="0x8CE9" line="452" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE9</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="inline" set="null" expr="0x8CEA" line="453" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEA</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="inline" set="null" expr="0x8CEB" line="454" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEB</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="inline" set="null" expr="0x8CEC" line="455" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEC</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="inline" set="null" expr="0x8CED" line="456" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CED</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="inline" set="null" expr="0x8CEE" line="457" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEE</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="inline" set="null" expr="0x8CEF" line="458" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEF</e></m></meta>
		</COLOR_ATTACHMENT15>
		<SAMPLER_3D public="1" get="inline" set="null" expr="0x8B5F" line="459" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5F</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="inline" set="null" expr="0x8B62" line="460" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B62</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="0x8DC1" line="461" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC1</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="inline" set="null" expr="0x8DC4" line="462" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC4</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="inline" set="null" expr="0x8DC5" line="463" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC5</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<INT_SAMPLER_2D public="1" get="inline" set="null" expr="0x8DCA" line="464" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCA</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="inline" set="null" expr="0x8DCB" line="465" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCB</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="0x8DCC" line="466" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCC</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="0x8DCF" line="467" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DCF</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="inline" set="null" expr="0x8DD2" line="468" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD2</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="inline" set="null" expr="0x8DD3" line="469" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD3</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="0x8DD4" line="470" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD4</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="0x8DD7" line="471" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DD7</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<MAX_SAMPLES public="1" get="inline" set="null" expr="0x8D57" line="472" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D57</e></m></meta>
		</MAX_SAMPLES>
		<SAMPLER_BINDING public="1" get="inline" set="null" expr="0x8919" line="473" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8919</e></m></meta>
		</SAMPLER_BINDING>
		<PIXEL_PACK_BUFFER public="1" get="inline" set="null" expr="0x88EB" line="474" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EB</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="inline" set="null" expr="0x88EC" line="475" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EC</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="inline" set="null" expr="0x88ED" line="476" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88ED</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="inline" set="null" expr="0x88EF" line="477" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EF</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<COPY_READ_BUFFER public="1" get="inline" set="null" expr="0x8F36" line="478" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F36</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="inline" set="null" expr="0x8F37" line="479" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F37</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="inline" set="null" expr="0x8F36" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F36</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="inline" set="null" expr="0x8F37" line="481" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F37</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="inline" set="null" expr="0x8B65" line="482" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B65</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="inline" set="null" expr="0x8B66" line="483" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B66</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="inline" set="null" expr="0x8B67" line="484" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B67</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="inline" set="null" expr="0x8B68" line="485" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B68</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="inline" set="null" expr="0x8B69" line="486" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B69</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="inline" set="null" expr="0x8B6A" line="487" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B6A</e></m></meta>
		</FLOAT_MAT4x3>
		<UNSIGNED_INT_VEC2 public="1" get="inline" set="null" expr="0x8DC6" line="488" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC6</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="inline" set="null" expr="0x8DC7" line="489" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC7</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="inline" set="null" expr="0x8DC8" line="490" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DC8</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<UNSIGNED_NORMALIZED public="1" get="inline" set="null" expr="0x8C17" line="491" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C17</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<SIGNED_NORMALIZED public="1" get="inline" set="null" expr="0x8F9C" line="492" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F9C</e></m></meta>
		</SIGNED_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="inline" set="null" expr="0x88FD" line="493" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FD</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="inline" set="null" expr="0x88FE" line="494" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FE</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="inline" set="null" expr="0x8C7F" line="495" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C7F</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="inline" set="null" expr="0x8C80" line="496" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C80</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="inline" set="null" expr="0x8C83" line="497" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C83</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="inline" set="null" expr="0x8C84" line="498" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C84</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="inline" set="null" expr="0x8C85" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C85</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="inline" set="null" expr="0x8C88" line="500" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C88</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="inline" set="null" expr="0x8C8A" line="501" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8A</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="0x8C8B" line="502" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8B</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="inline" set="null" expr="0x8C8C" line="503" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8C</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="0x8C8D" line="504" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8D</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="inline" set="null" expr="0x8C8E" line="505" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8E</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="inline" set="null" expr="0x8C8F" line="506" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C8F</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="0x8E22" line="507" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E22</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="inline" set="null" expr="0x8E23" line="508" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E23</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="inline" set="null" expr="0x8E24" line="509" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E24</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="inline" set="null" expr="0x8E25" line="510" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E25</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="inline" set="null" expr="0x8210" line="511" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8210</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="inline" set="null" expr="0x8211" line="512" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8211</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="inline" set="null" expr="0x8212" line="513" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8212</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="inline" set="null" expr="0x8213" line="514" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8213</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="inline" set="null" expr="0x8214" line="515" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8214</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="inline" set="null" expr="0x8215" line="516" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8215</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="inline" set="null" expr="0x8216" line="517" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8216</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="inline" set="null" expr="0x8217" line="518" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8217</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="inline" set="null" expr="0x8218" line="519" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8218</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<DEPTH24_STENCIL8 public="1" get="inline" set="null" expr="0x88F0" line="520" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88F0</e></m></meta>
		</DEPTH24_STENCIL8>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="0x8CA6" line="521" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA6</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="inline" set="null" expr="0x8CA8" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA8</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="inline" set="null" expr="0x8CA9" line="523" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA9</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="0x8CAA" line="524" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAA</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="inline" set="null" expr="0x8CAB" line="525" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAB</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="inline" set="null" expr="0x8CD4" line="526" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD4</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="inline" set="null" expr="0x8D56" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D56</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="0x8A11" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A11</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="inline" set="null" expr="0x8A28" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A28</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="inline" set="null" expr="0x8A29" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A29</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="inline" set="null" expr="0x8A2A" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2A</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="0x8A2B" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2B</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="0x8A2D" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2D</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="0x8A2E" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2E</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="inline" set="null" expr="0x8A2F" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A2F</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="inline" set="null" expr="0x8A30" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A30</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="0x8A31" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A31</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="0x8A33" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A33</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="inline" set="null" expr="0x8A34" line="539" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A34</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="0x8A36" line="540" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A36</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="inline" set="null" expr="0x8A37" line="541" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A37</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="inline" set="null" expr="0x8A38" line="542" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A38</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="inline" set="null" expr="0x8A3A" line="543" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3A</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="inline" set="null" expr="0x8A3B" line="544" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3B</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="inline" set="null" expr="0x8A3C" line="545" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3C</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="inline" set="null" expr="0x8A3D" line="546" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3D</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="inline" set="null" expr="0x8A3E" line="547" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3E</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="inline" set="null" expr="0x8A3F" line="548" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A3F</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="inline" set="null" expr="0x8A40" line="549" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A40</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="0x8A42" line="550" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A42</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="inline" set="null" expr="0x8A43" line="551" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A43</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="inline" set="null" expr="0x8A44" line="552" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A44</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="inline" set="null" expr="0x8A46" line="553" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A46</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<OBJECT_TYPE public="1" get="inline" set="null" expr="0x9112" line="554" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9112</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="inline" set="null" expr="0x9113" line="555" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9113</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" get="inline" set="null" expr="0x9114" line="556" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9114</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" get="inline" set="null" expr="0x9115" line="557" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9115</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" get="inline" set="null" expr="0x9116" line="558" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9116</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="inline" set="null" expr="0x9117" line="559" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9117</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="inline" set="null" expr="0x9118" line="560" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9118</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" get="inline" set="null" expr="0x9119" line="561" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9119</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" get="inline" set="null" expr="0x911A" line="562" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911A</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="inline" set="null" expr="0x911B" line="563" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911B</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="inline" set="null" expr="0x911C" line="564" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911C</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="inline" set="null" expr="0x911D" line="565" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911D</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="inline" set="null" expr="0x00000001" line="566" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000001</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<COLOR public="1" get="inline" set="null" expr="0x1800" line="567" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1800</e></m></meta>
		</COLOR>
		<DEPTH public="1" get="inline" set="null" expr="0x1801" line="568" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1801</e></m></meta>
		</DEPTH>
		<STENCIL public="1" get="inline" set="null" expr="0x1802" line="569" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1802</e></m></meta>
		</STENCIL>
		<MIN public="1" get="inline" set="null" expr="0x8007" line="570" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8007</e></m></meta>
		</MIN>
		<MAX public="1" get="inline" set="null" expr="0x8008" line="571" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8008</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="0x81A6" line="572" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A6</e></m></meta>
		</DEPTH_COMPONENT24>
		<STREAM_READ public="1" get="inline" set="null" expr="0x88E1" line="573" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E1</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" get="inline" set="null" expr="0x88E2" line="574" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E2</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" get="inline" set="null" expr="0x88E5" line="575" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E5</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" get="inline" set="null" expr="0x88E6" line="576" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E6</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" get="inline" set="null" expr="0x88E9" line="577" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88E9</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="inline" set="null" expr="0x88EA" line="578" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88EA</e></m></meta>
		</DYNAMIC_COPY>
		<DEPTH_COMPONENT32F public="1" get="inline" set="null" expr="0x8CAC" line="579" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAC</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="inline" set="null" expr="0x8CAD" line="580" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAD</e></m></meta>
		</DEPTH32F_STENCIL8>
		<INVALID_INDEX public="1" get="inline" set="null" expr="0xFFFFFFFF" line="581" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</INVALID_INDEX>
		<TIMEOUT_IGNORED public="1" get="inline" set="null" expr="-1" line="582" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="inline" set="null" expr="0x9247" line="583" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9247</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<context public="1" set="null" static="1"><x path="lime.graphics.OpenGLRenderContext"/></context>
		<type public="1" set="null" static="1"><x path="lime.graphics.RenderContextType"/></type>
		<version public="1" set="null" static="1"><x path="Float"/></version>
		<activeTexture public="1" get="inline" set="null" line="597" static="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" get="inline" set="null" line="602" static="1"><f a="program:shader">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></attachShader>
		<beginQuery public="1" get="inline" set="null" line="607" static="1"><f a="target:query">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></beginQuery>
		<beginTransformFeedback public="1" get="inline" set="null" line="612" static="1"><f a="primitiveNode">
	<x path="Int"/>
	<x path="Void"/>
</f></beginTransformFeedback>
		<bindAttribLocation public="1" get="inline" set="null" line="617" static="1"><f a="program:index:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" get="inline" set="null" line="622" static="1"><f a="target:buffer">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindBufferBase public="1" get="inline" set="null" line="627" static="1"><f a="target:index:buffer">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBufferBase>
		<bindBufferRange public="1" get="inline" set="null" line="632" static="1"><f a="target:index:buffer:offset:size">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bindBufferRange>
		<bindFramebuffer public="1" get="inline" set="null" line="637" static="1"><f a="target:framebuffer">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" get="inline" set="null" line="642" static="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindSampler public="1" get="inline" set="null" line="647" static="1"><f a="unit:sampler">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></bindSampler>
		<bindTexture public="1" get="inline" set="null" line="652" static="1"><f a="target:texture">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture>
		<bindTransformFeedback public="1" get="inline" set="null" line="657" static="1"><f a="target:transformFeedback">
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></bindTransformFeedback>
		<bindVertexArray public="1" get="inline" set="null" line="662" static="1"><f a="vertexArray">
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></bindVertexArray>
		<blitFramebuffer public="1" get="inline" set="null" line="668" static="1"><f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blitFramebuffer>
		<blendColor public="1" get="inline" set="null" line="673" static="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" get="inline" set="null" line="678" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" get="inline" set="null" line="683" static="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" get="inline" set="null" line="688" static="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" get="inline" set="null" line="693" static="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<bufferData public="1" get="inline" set="null" line="699" static="1"><f a="target:size:srcData:usage">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferSubData public="1" get="inline" set="null" line="713" static="1"><f a="target:dstByteOffset:size:srcData">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></bufferSubData>
		<checkFramebufferStatus public="1" get="inline" set="null" line="726" static="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" get="inline" set="null" line="731" static="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearBufferfi public="1" get="inline" set="null" line="736" static="1"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<clearBufferfv public="1" get="inline" set="null" line="742" static="1"><f a="buffer:drawbuffer:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></clearBufferfv>
		<clearBufferiv public="1" get="inline" set="null" line="756" static="1"><f a="buffer:drawbuffer:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></clearBufferiv>
		<clearBufferuiv public="1" get="inline" set="null" line="770" static="1"><f a="buffer:drawbuffer:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></clearBufferuiv>
		<clearColor public="1" get="inline" set="null" line="783" static="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepthf public="1" get="inline" set="null" line="796" static="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepthf>
		<clearStencil public="1" get="inline" set="null" line="802" static="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<clientWaitSync public="1" get="inline" set="null" line="807" static="1"><f a="sync:flags:timeout">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></clientWaitSync>
		<colorMask public="1" get="inline" set="null" line="812" static="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" get="inline" set="null" line="817" static="1"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" get="inline" set="null" line="824" static="1"><f a="target:level:internalformat:width:height:border:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexImage3D public="1" get="inline" set="null" line="840" static="1"><f a="target:level:internalformat:width:height:depth:border:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexImage3D>
		<compressedTexSubImage2D public="1" get="inline" set="null" line="856" static="1"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" get="inline" set="null" line="872" static="1"><f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></compressedTexSubImage3D>
		<copyBufferSubData public="1" get="inline" set="null" line="887" static="1"><f a="readTarget:writeTarget:readOffset:writeOffset:size">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyBufferSubData>
		<copyTexImage2D public="1" get="inline" set="null" line="893" static="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" get="inline" set="null" line="898" static="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<copyTexSubImage3D public="1" get="inline" set="null" line="903" static="1"><f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage3D>
		<createBuffer public="1" get="inline" set="null" line="908" static="1"><f a=""><t path="lime.graphics.opengl.GLBuffer"/></f></createBuffer>
		<createFramebuffer public="1" get="inline" set="null" line="913" static="1"><f a=""><t path="lime.graphics.opengl.GLFramebuffer"/></f></createFramebuffer>
		<createProgram public="1" get="inline" set="null" line="918" static="1"><f a=""><x path="lime.graphics.opengl.GLProgram"/></f></createProgram>
		<createQuery public="1" get="inline" set="null" line="923" static="1"><f a=""><t path="lime.graphics.opengl.GLQuery"/></f></createQuery>
		<createRenderbuffer public="1" get="inline" set="null" line="928" static="1"><f a=""><t path="lime.graphics.opengl.GLRenderbuffer"/></f></createRenderbuffer>
		<createSampler public="1" get="inline" set="null" line="933" static="1"><f a=""><t path="lime.graphics.opengl.GLSampler"/></f></createSampler>
		<createShader public="1" get="inline" set="null" line="938" static="1"><f a="type">
	<x path="Int"/>
	<x path="lime.graphics.opengl.GLShader"/>
</f></createShader>
		<createTexture public="1" get="inline" set="null" line="943" static="1"><f a=""><t path="lime.graphics.opengl.GLTexture"/></f></createTexture>
		<createTransformFeedback public="1" get="inline" set="null" line="948" static="1"><f a=""><t path="lime.graphics.opengl.GLTransformFeedback"/></f></createTransformFeedback>
		<createVertexArray public="1" get="inline" set="null" line="953" static="1"><f a=""><t path="lime.graphics.opengl.GLVertexArrayObject"/></f></createVertexArray>
		<cullFace public="1" get="inline" set="null" line="958" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" get="inline" set="null" line="963" static="1"><f a="buffer">
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" get="inline" set="null" line="968" static="1"><f a="framebuffer">
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" get="inline" set="null" line="973" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteQuery public="1" get="inline" set="null" line="978" static="1"><f a="query">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Void"/>
</f></deleteQuery>
		<deleteRenderbuffer public="1" get="inline" set="null" line="983" static="1"><f a="renderbuffer">
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteSampler public="1" get="inline" set="null" line="988" static="1"><f a="sampler">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Void"/>
</f></deleteSampler>
		<deleteShader public="1" get="inline" set="null" line="993" static="1"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteSync public="1" get="inline" set="null" line="998" static="1"><f a="sync">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Void"/>
</f></deleteSync>
		<deleteTexture public="1" get="inline" set="null" line="1003" static="1"><f a="texture">
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Void"/>
</f></deleteTexture>
		<deleteTransformFeedback public="1" get="inline" set="null" line="1008" static="1"><f a="transformFeedback">
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Void"/>
</f></deleteTransformFeedback>
		<deleteVertexArray public="1" get="inline" set="null" line="1013" static="1"><f a="vertexArray">
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Void"/>
</f></deleteVertexArray>
		<depthFunc public="1" get="inline" set="null" line="1018" static="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" get="inline" set="null" line="1023" static="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRangef public="1" get="inline" set="null" line="1036" static="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRangef>
		<detachShader public="1" get="inline" set="null" line="1042" static="1"><f a="program:shader">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" get="inline" set="null" line="1047" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" get="inline" set="null" line="1052" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" get="inline" set="null" line="1057" static="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawArraysInstanced public="1" get="inline" set="null" line="1062" static="1"><f a="mode:first:count:instanceCount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArraysInstanced>
		<drawBuffers public="1" get="inline" set="null" line="1067" static="1"><f a="buffers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></drawBuffers>
		<drawElements public="1" get="inline" set="null" line="1072" static="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<drawElementsInstanced public="1" get="inline" set="null" line="1077" static="1"><f a="mode:count:type:offset:instanceCount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElementsInstanced>
		<drawRangeElements public="1" get="inline" set="null" line="1082" static="1"><f a="mode:start:end:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></drawRangeElements>
		<enable public="1" get="inline" set="null" line="1087" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" get="inline" set="null" line="1092" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<endQuery public="1" get="inline" set="null" line="1097" static="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></endQuery>
		<endTransformFeedback public="1" get="inline" set="null" line="1102" static="1"><f a=""><x path="Void"/></f></endTransformFeedback>
		<fenceSync public="1" get="inline" set="null" line="1107" static="1"><f a="condition:flags">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLSync"/>
</f></fenceSync>
		<finish public="1" get="inline" set="null" line="1112" static="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" get="inline" set="null" line="1117" static="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" get="inline" set="null" line="1122" static="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" get="inline" set="null" line="1127" static="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<framebufferTextureLayer public="1" get="inline" set="null" line="1132" static="1"><f a="target:attachment:texture:level:layer">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTextureLayer>
		<frontFace public="1" get="inline" set="null" line="1137" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" get="inline" set="null" line="1142" static="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" get="inline" set="null" line="1147" static="1"><f a="program:index">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" get="inline" set="null" line="1152" static="1"><f a="program:index">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getActiveUniform>
		<getActiveUniformBlocki public="1" get="inline" set="null" line="1158" static="1"><f a="program:uniformBlockIndex:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getActiveUniformBlocki>
		<getActiveUniformBlockiv public="1" get="inline" set="null" line="1165" static="1"><f a="program:uniformBlockIndex:pname:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getActiveUniformBlockiv>
		<getActiveUniformBlockName public="1" get="inline" set="null" line="1171" static="1"><f a="program:uniformBlockIndex">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
</f></getActiveUniformBlockName>
		<getActiveUniformBlockParameter public="1" get="inline" set="null" line="1176" static="1"><f a="program:uniformBlockIndex:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getActiveUniformBlockParameter>
		<getActiveUniforms public="1" get="inline" set="null" line="1181" static="1"><f a="program:uniformIndices:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<d/>
</f></getActiveUniforms>
		<getActiveUniformsiv public="1" get="inline" set="null" line="1187" static="1"><f a="program:uniformIndices:pname:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getActiveUniformsiv>
		<getAttachedShaders public="1" get="inline" set="null" line="1193" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" get="inline" set="null" line="1198" static="1"><f a="program:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBoolean public="1" get="inline" set="null" line="1204" static="1"><f a="pname">
	<x path="Int"/>
	<x path="Bool"/>
</f></getBoolean>
		<getBooleanv public="1" get="inline" set="null" line="1211" static="1"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBooleanv>
		<getBufferParameter public="1" get="inline" set="null" line="1217" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getBufferParameteri public="1" get="inline" set="null" line="1223" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getBufferParameteri>
		<getBufferParameteri64v public="1" get="inline" set="null" line="1230" static="1"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBufferParameteri64v>
		<getBufferParameteriv public="1" get="inline" set="null" line="1237" static="1"><f a="target:pname:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBufferParameteriv>
		<getBufferPointerv public="1" get="inline" set="null" line="1244" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></getBufferPointerv>
		<getBufferSubData public="1" get="inline" set="null" line="1251" static="1"><f a="target:offset:size:data">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getBufferSubData>
		<getContextAttributes public="1" get="inline" set="null" line="1264" static="1"><f a=""><t path="lime.graphics.opengl.GLContextAttributes"/></f></getContextAttributes>
		<getError public="1" get="inline" set="null" line="1269" static="1"><f a=""><x path="Int"/></f></getError>
		<getExtension public="1" get="inline" set="null" line="1274" static="1"><f a="name">
	<c path="String"/>
	<d/>
</f></getExtension>
		<getFloat public="1" get="inline" set="null" line="1280" static="1"><f a="pname">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getFloatv public="1" get="inline" set="null" line="1287" static="1"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getFloatv>
		<getFragDataLocation public="1" get="inline" set="null" line="1293" static="1"><f a="program:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getFragDataLocation>
		<getFramebufferAttachmentParameter public="1" get="inline" set="null" line="1298" static="1"><f a="target:attachment:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getFramebufferAttachmentParameter>
		<getFramebufferAttachmentParameteri public="1" get="inline" set="null" line="1304" static="1"><f a="target:attachment:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getFramebufferAttachmentParameteri>
		<getFramebufferAttachmentParameteriv public="1" get="inline" set="null" line="1311" static="1"><f a="target:attachment:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getFramebufferAttachmentParameteriv>
		<getIndexedParameter public="1" get="inline" set="null" line="1317" static="1"><f a="target:index">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getIndexedParameter>
		<getInteger public="1" get="inline" set="null" line="1323" static="1"><f a="pname">
	<x path="Int"/>
	<x path="Int"/>
</f></getInteger>
		<getInteger64 public="1" get="inline" set="null" line="1330" static="1"><f a="pname">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInteger64>
		<getInteger64i public="1" get="inline" set="null" line="1337" static="1"><f a="pname">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInteger64i>
		<getInteger64i_v public="1" get="inline" set="null" line="1344" static="1"><f a="pname:index:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getInteger64i_v>
		<getInteger64v public="1" get="inline" set="null" line="1351" static="1"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getInteger64v>
		<getIntegeri_v public="1" get="inline" set="null" line="1358" static="1"><f a="pname:index:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getIntegeri_v>
		<getIntegerv public="1" get="inline" set="null" line="1365" static="1"><f a="pname:params">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getIntegerv>
		<getInternalformati public="1" get="inline" set="null" line="1372" static="1"><f a="target:internalformat:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInternalformati>
		<getInternalformativ public="1" get="inline" set="null" line="1379" static="1"><f a="target:internalformat:pname:bufSize:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getInternalformativ>
		<getInternalformatParameter public="1" get="inline" set="null" line="1385" static="1"><f a="target:internalformat:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getInternalformatParameter>
		<getParameter public="1" get="inline" set="null" line="1390" static="1"><f a="pname">
	<x path="Int"/>
	<d/>
</f></getParameter>
		<getProgrami public="1" get="inline" set="null" line="1396" static="1"><f a="program:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getProgrami>
		<getProgramiv public="1" get="inline" set="null" line="1403" static="1"><f a="program:pname:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getProgramiv>
		<getProgramBinary public="1" get="inline" set="null" line="1410" static="1"><f a="program:binaryFormat">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getProgramBinary>
		<getProgramInfoLog public="1" get="inline" set="null" line="1416" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getProgramParameter public="1" get="inline" set="null" line="1421" static="1"><f a="program:pname">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getQuery public="1" get="inline" set="null" line="1426" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLQuery"/>
</f></getQuery>
		<getQueryi public="1" get="inline" set="null" line="1432" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getQueryi>
		<getQueryiv public="1" get="inline" set="null" line="1439" static="1"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getQueryiv>
		<getQueryObjectui public="1" get="inline" set="null" line="1446" static="1"><f a="query:pname">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getQueryObjectui>
		<getQueryObjectuiv public="1" get="inline" set="null" line="1453" static="1"><f a="query:pname:params">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getQueryObjectuiv>
		<getQueryParameter public="1" get="inline" set="null" line="1459" static="1"><f a="query:pname">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Int"/>
	<d/>
</f></getQueryParameter>
		<getRenderbufferParameter public="1" get="inline" set="null" line="1464" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getRenderbufferParameteri public="1" get="inline" set="null" line="1470" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getRenderbufferParameteri>
		<getRenderbufferParameteriv public="1" get="inline" set="null" line="1477" static="1"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getRenderbufferParameteriv>
		<getSamplerParameter public="1" get="inline" set="null" line="1483" static="1"><f a="sampler:pname">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<d/>
</f></getSamplerParameter>
		<getSamplerParameterf public="1" get="inline" set="null" line="1489" static="1"><f a="sampler:pname">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getSamplerParameterf>
		<getSamplerParameterfv public="1" get="inline" set="null" line="1496" static="1"><f a="sampler:pname:params">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getSamplerParameterfv>
		<getSamplerParameteri public="1" get="inline" set="null" line="1503" static="1"><f a="sampler:pname">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getSamplerParameteri>
		<getSamplerParameteriv public="1" get="inline" set="null" line="1510" static="1"><f a="sampler:pname:params">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getSamplerParameteriv>
		<getShaderi public="1" get="inline" set="null" line="1517" static="1"><f a="shader:pname">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getShaderi>
		<getShaderiv public="1" get="inline" set="null" line="1524" static="1"><f a="shader:pname:params">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getShaderiv>
		<getShaderInfoLog public="1" get="inline" set="null" line="1530" static="1"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderParameter public="1" get="inline" set="null" line="1535" static="1"><f a="shader:pname">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" get="inline" set="null" line="1540" static="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderSource public="1" get="inline" set="null" line="1545" static="1"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderSource>
		<getString public="1" get="inline" set="null" line="1551" static="1"><f a="name">
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<getStringi public="1" get="inline" set="null" line="1558" static="1"><f a="name:index">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getStringi>
		<getSupportedExtensions public="1" get="inline" set="null" line="1564" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getSyncParameter public="1" get="inline" set="null" line="1569" static="1"><f a="sync:pname">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<d/>
</f></getSyncParameter>
		<getSyncParameteri public="1" get="inline" set="null" line="1575" static="1"><f a="sync:pname">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getSyncParameteri>
		<getSyncParameteriv public="1" get="inline" set="null" line="1582" static="1"><f a="sync:pname:params">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getSyncParameteriv>
		<getTexParameter public="1" get="inline" set="null" line="1588" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getTexParameterf public="1" get="inline" set="null" line="1594" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getTexParameterf>
		<getTexParameterfv public="1" get="inline" set="null" line="1601" static="1"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getTexParameterfv>
		<getTexParameteri public="1" get="inline" set="null" line="1608" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getTexParameteri>
		<getTexParameteriv public="1" get="inline" set="null" line="1615" static="1"><f a="target:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getTexParameteriv>
		<getTransformFeedbackVarying public="1" get="inline" set="null" line="1621" static="1"><f a="program:index">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="lime.graphics.opengl.GLActiveInfo"/>
</f></getTransformFeedbackVarying>
		<getUniform public="1" get="inline" set="null" line="1626" static="1"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformf public="1" get="inline" set="null" line="1632" static="1"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
</f></getUniformf>
		<getUniformfv public="1" get="inline" set="null" line="1639" static="1"><f a="program:location:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getUniformfv>
		<getUniformi public="1" get="inline" set="null" line="1646" static="1"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
</f></getUniformi>
		<getUniformiv public="1" get="inline" set="null" line="1653" static="1"><f a="program:location:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getUniformiv>
		<getUniformui public="1" get="inline" set="null" line="1660" static="1"><f a="program:location">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
</f></getUniformui>
		<getUniformuiv public="1" get="inline" set="null" line="1667" static="1"><f a="program:location:params">
	<x path="lime.graphics.opengl.GLProgram"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getUniformuiv>
		<getUniformBlockIndex public="1" get="inline" set="null" line="1673" static="1"><f a="program:uniformBlockName">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getUniformBlockIndex>
		<getUniformIndices public="1" get="inline" set="null" line="1678" static="1"><f a="program:uniformNames">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="Int"/></c>
</f></getUniformIndices>
		<getUniformLocation public="1" get="inline" set="null" line="1683" static="1"><f a="program:name">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="String"/>
	<t path="lime.graphics.opengl.GLUniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" get="inline" set="null" line="1688" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getVertexAttrib>
		<getVertexAttribf public="1" get="inline" set="null" line="1694" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getVertexAttribf>
		<getVertexAttribfv public="1" get="inline" set="null" line="1701" static="1"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribfv>
		<getVertexAttribi public="1" get="inline" set="null" line="1708" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribi>
		<getVertexAttribIi public="1" get="inline" set="null" line="1715" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribIi>
		<getVertexAttribIiv public="1" get="inline" set="null" line="1722" static="1"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribIiv>
		<getVertexAttribIui public="1" get="inline" set="null" line="1729" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribIui>
		<getVertexAttribIuiv public="1" get="inline" set="null" line="1736" static="1"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribIuiv>
		<getVertexAttribiv public="1" get="inline" set="null" line="1743" static="1"><f a="index:pname:params">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></getVertexAttribiv>
		<getVertexAttribPointerv public="1" get="inline" set="null" line="1757" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></getVertexAttribPointerv>
		<hint public="1" get="inline" set="null" line="1763" static="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<invalidateFramebuffer public="1" get="inline" set="null" line="1768" static="1"><f a="target:attachments">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" get="inline" set="null" line="1773" static="1"><f a="target:attachments:x:y:width:height">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></invalidateSubFramebuffer>
		<isBuffer public="1" get="inline" set="null" line="1778" static="1"><f a="buffer">
	<t path="lime.graphics.opengl.GLBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isContextLost public="1" get="inline" set="null" line="1783" static="1"><f a=""><x path="Bool"/></f></isContextLost>
		<isEnabled public="1" get="inline" set="null" line="1788" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" get="inline" set="null" line="1793" static="1"><f a="framebuffer">
	<t path="lime.graphics.opengl.GLFramebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" get="inline" set="null" line="1798" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Bool"/>
</f></isProgram>
		<isQuery public="1" get="inline" set="null" line="1803" static="1"><f a="query">
	<t path="lime.graphics.opengl.GLQuery"/>
	<x path="Bool"/>
</f></isQuery>
		<isRenderbuffer public="1" get="inline" set="null" line="1808" static="1"><f a="renderbuffer">
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isSampler public="1" get="inline" set="null" line="1813" static="1"><f a="sampler">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Bool"/>
</f></isSampler>
		<isShader public="1" get="inline" set="null" line="1818" static="1"><f a="shader">
	<x path="lime.graphics.opengl.GLShader"/>
	<x path="Bool"/>
</f></isShader>
		<isSync public="1" get="inline" set="null" line="1823" static="1"><f a="sync">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Bool"/>
</f></isSync>
		<isTexture public="1" get="inline" set="null" line="1828" static="1"><f a="texture">
	<t path="lime.graphics.opengl.GLTexture"/>
	<x path="Bool"/>
</f></isTexture>
		<isTransformFeedback public="1" get="inline" set="null" line="1833" static="1"><f a="transformFeedback">
	<t path="lime.graphics.opengl.GLTransformFeedback"/>
	<x path="Bool"/>
</f></isTransformFeedback>
		<isVertexArray public="1" get="inline" set="null" line="1838" static="1"><f a="vertexArray">
	<t path="lime.graphics.opengl.GLVertexArrayObject"/>
	<x path="Bool"/>
</f></isVertexArray>
		<lineWidth public="1" get="inline" set="null" line="1843" static="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" get="inline" set="null" line="1848" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></linkProgram>
		<mapBufferRange public="1" get="inline" set="null" line="1854" static="1"><f a="target:offset:length:access">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></mapBufferRange>
		<pauseTransformFeedback public="1" get="inline" set="null" line="1860" static="1"><f a=""><x path="Void"/></f></pauseTransformFeedback>
		<pixelStorei public="1" get="inline" set="null" line="1865" static="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" get="inline" set="null" line="1870" static="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<programBinary public="1" get="inline" set="null" line="1876" static="1"><f a="program:binaryFormat:binary:length">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></programBinary>
		<programParameteri public="1" get="inline" set="null" line="1883" static="1"><f a="program:pname:value">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></programParameteri>
		<readBuffer public="1" get="inline" set="null" line="1889" static="1"><f a="src">
	<x path="Int"/>
	<x path="Void"/>
</f></readBuffer>
		<readPixels public="1" get="inline" set="null" line="1895" static="1"><f a="x:y:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.BytePointer"/>
	<x path="Void"/>
</f></readPixels>
		<releaseShaderCompiler public="1" get="inline" set="null" line="1909" static="1"><f a=""><x path="Void"/></f></releaseShaderCompiler>
		<renderbufferStorage public="1" get="inline" set="null" line="1915" static="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<renderbufferStorageMultisample public="1" get="inline" set="null" line="1920" static="1"><f a="target:samples:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorageMultisample>
		<resumeTransformFeedback public="1" get="inline" set="null" line="1925" static="1"><f a=""><x path="Void"/></f></resumeTransformFeedback>
		<sampleCoverage public="1" get="inline" set="null" line="1930" static="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<samplerParameterf public="1" get="inline" set="null" line="1935" static="1"><f a="sampler:pname:param">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<samplerParameteri public="1" get="inline" set="null" line="1940" static="1"><f a="sampler:pname:param">
	<t path="lime.graphics.opengl.GLSampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<scissor public="1" get="inline" set="null" line="1945" static="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderBinary public="1" get="inline" set="null" line="1951" static="1"><f a="shaders:binaryformat:binary:length">
	<c path="Array"><x path="lime.graphics.opengl.GLShader"/></c>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></shaderBinary>
		<shaderSource public="1" get="inline" set="null" line="1957" static="1"><f a="shader:source">
	<x path="lime.graphics.opengl.GLShader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" get="inline" set="null" line="1962" static="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" get="inline" set="null" line="1967" static="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" get="inline" set="null" line="1972" static="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" get="inline" set="null" line="1977" static="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" get="inline" set="null" line="1982" static="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" get="inline" set="null" line="1987" static="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" get="inline" set="null" line="1994" static="1"><f a="target:level:internalformat:width:height:border:format:type:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texImage2D>
		<texImage3D public="1" get="inline" set="null" line="2010" static="1"><f a="target:level:internalformat:width:height:depth:border:format:type:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texImage3D>
		<texStorage2D public="1" get="inline" set="null" line="2024" static="1"><f a="target:level:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage2D>
		<texStorage3D public="1" get="inline" set="null" line="2029" static="1"><f a="target:level:internalformat:width:height:depth">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texStorage3D>
		<texParameterf public="1" get="inline" set="null" line="2034" static="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" get="inline" set="null" line="2039" static="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" get="inline" set="null" line="2046" static="1"><f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texSubImage2D>
		<texSubImage3D public="1" get="inline" set="null" line="2062" static="1"><f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></texSubImage3D>
		<transformFeedbackVaryings public="1" get="inline" set="null" line="2076" static="1"><f a="program:varyings:bufferMode">
	<x path="lime.graphics.opengl.GLProgram"/>
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></transformFeedbackVaryings>
		<uniform1f public="1" get="inline" set="null" line="2081" static="1"><f a="location:v0">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" get="inline" set="null" line="2087" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform1fv>
		<uniform1i public="1" get="inline" set="null" line="2100" static="1"><f a="location:v0">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" get="inline" set="null" line="2106" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform1iv>
		<uniform1ui public="1" get="inline" set="null" line="2119" static="1"><f a="location:v0">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform1uiv public="1" get="inline" set="null" line="2125" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform1uiv>
		<uniform2f public="1" get="inline" set="null" line="2138" static="1"><f a="location:v0:v1">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" get="inline" set="null" line="2144" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform2fv>
		<uniform2i public="1" get="inline" set="null" line="2157" static="1"><f a="location:x:y">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" get="inline" set="null" line="2163" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform2iv>
		<uniform2ui public="1" get="inline" set="null" line="2176" static="1"><f a="location:x:y">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform2uiv public="1" get="inline" set="null" line="2182" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform2uiv>
		<uniform3f public="1" get="inline" set="null" line="2195" static="1"><f a="location:v0:v1:v2">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" get="inline" set="null" line="2201" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform3fv>
		<uniform3i public="1" get="inline" set="null" line="2214" static="1"><f a="location:v0:v1:v2">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" get="inline" set="null" line="2220" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform3iv>
		<uniform3ui public="1" get="inline" set="null" line="2233" static="1"><f a="location:v0:v1:v2">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform3uiv public="1" get="inline" set="null" line="2239" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform3uiv>
		<uniform4f public="1" get="inline" set="null" line="2252" static="1"><f a="location:v0:v1:v2:v3">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" get="inline" set="null" line="2258" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform4fv>
		<uniform4i public="1" get="inline" set="null" line="2271" static="1"><f a="location:v0:v1:v2:v3">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" get="inline" set="null" line="2277" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform4iv>
		<uniform4ui public="1" get="inline" set="null" line="2290" static="1"><f a="location:v0:v1:v2:v3">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform4uiv public="1" get="inline" set="null" line="2296" static="1"><f a="location:count:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniform4uiv>
		<uniformBlockBinding public="1" get="inline" set="null" line="2309" static="1"><f a="program:uniformBlockIndex:uniformBlockBinding">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniformBlockBinding>
		<uniformMatrix2fv public="1" get="inline" set="null" line="2315" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
		<uniformMatrix2x3fv public="1" get="inline" set="null" line="2329" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix2x3fv>
		<uniformMatrix2x4fv public="1" get="inline" set="null" line="2343" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix2x4fv>
		<uniformMatrix3fv public="1" get="inline" set="null" line="2357" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
		<uniformMatrix3x2fv public="1" get="inline" set="null" line="2371" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix3x2fv>
		<uniformMatrix3x4fv public="1" get="inline" set="null" line="2385" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" get="inline" set="null" line="2399" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
		<uniformMatrix4x2fv public="1" get="inline" set="null" line="2413" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix4x2fv>
		<uniformMatrix4x3fv public="1" get="inline" set="null" line="2427" static="1"><f a="location:count:transpose:v">
	<t path="lime.graphics.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></uniformMatrix4x3fv>
		<unmapBuffer public="1" get="inline" set="null" line="2441" static="1"><f a="target">
	<x path="Int"/>
	<x path="Bool"/>
</f></unmapBuffer>
		<useProgram public="1" get="inline" set="null" line="2447" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" get="inline" set="null" line="2452" static="1"><f a="program">
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" get="inline" set="null" line="2457" static="1"><f a="index:v0">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" get="inline" set="null" line="2462" static="1"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
		<vertexAttrib2f public="1" get="inline" set="null" line="2476" static="1"><f a="index:v0:v1">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" get="inline" set="null" line="2481" static="1"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
		<vertexAttrib3f public="1" get="inline" set="null" line="2495" static="1"><f a="index:v0:v1:v2">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" get="inline" set="null" line="2500" static="1"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
		<vertexAttrib4f public="1" get="inline" set="null" line="2514" static="1"><f a="index:v0:v1:v2:v3">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" get="inline" set="null" line="2519" static="1"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
		<vertexAttribDivisor public="1" get="inline" set="null" line="2533" static="1"><f a="index:divisor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribDivisor>
		<vertexAttribI4i public="1" get="inline" set="null" line="2538" static="1"><f a="index:v0:v1:v2:v3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" get="inline" set="null" line="2543" static="1"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribI4iv>
		<vertexAttribI4ui public="1" get="inline" set="null" line="2557" static="1"><f a="index:v0:v1:v2:v3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" get="inline" set="null" line="2562" static="1"><f a="index:v">
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribI4uiv>
		<vertexAttribIPointer public="1" get="inline" set="null" line="2576" static="1"><f a="index:size:type:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribIPointer>
		<vertexAttribPointer public="1" get="inline" set="null" line="2581" static="1"><f a="index:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" get="inline" set="null" line="2586" static="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<waitSync public="1" get="inline" set="null" line="2591" static="1"><f a="sync:flags:timeout">
	<t path="lime.graphics.opengl.GLSync"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></waitSync>
		<__getObjectID get="inline" set="null" line="2596" static="1"><f a="object">
	<c path="lime.graphics.opengl.GLObject"/>
	<x path="Int"/>
</f></__getObjectID>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>lime.ui.Window</e></m>
		</meta>
	</class>
	<class path="lime.graphics.opengl.GLObject" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GL.hx" module="lime.graphics.opengl.GL">
		<fromInt public="1" set="method" line="2618" static="1"><f a="type:id">
	<x path="lime.graphics.opengl.GLObjectType"/>
	<x path="Int"/>
	<c path="lime.graphics.opengl.GLObject"/>
</f></fromInt>
		<id>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</id>
		<ptr>
			<x path="lime.system.CFFIPointer"/>
			<meta><m n=":noCompletion"/></meta>
		</ptr>
		<refs>
			<c path="Array"><c path="lime.graphics.opengl.GLObject"/></c>
			<meta><m n=":noCompletion"/></meta>
		</refs>
		<new set="method" line="2613">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<abstract path="lime.graphics.opengl.GLObjectType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GL.hx" module="lime.graphics.opengl.GL">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime.graphics.opengl._GL.GLObjectType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GL.hx" private="1" module="lime.graphics.opengl.GL" extern="1" final="1">
	<UNKNOWN public="1" get="inline" set="null" expr="cast 0" line="2640" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNKNOWN>
	<PROGRAM public="1" get="inline" set="null" expr="cast 1" line="2641" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PROGRAM>
	<SHADER public="1" get="inline" set="null" expr="cast 2" line="2642" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHADER>
	<BUFFER public="1" get="inline" set="null" expr="cast 3" line="2643" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BUFFER>
	<TEXTURE public="1" get="inline" set="null" expr="cast 4" line="2644" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEXTURE>
	<FRAMEBUFFER public="1" get="inline" set="null" expr="cast 5" line="2645" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FRAMEBUFFER>
	<RENDERBUFFER public="1" get="inline" set="null" expr="cast 6" line="2646" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RENDERBUFFER>
	<VERTEX_ARRAY_OBJECT public="1" get="inline" set="null" expr="cast 7" line="2647" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VERTEX_ARRAY_OBJECT>
	<QUERY public="1" get="inline" set="null" expr="cast 8" line="2648" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUERY>
	<SAMPLER public="1" get="inline" set="null" expr="cast 9" line="2649" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SAMPLER>
	<SYNC public="1" get="inline" set="null" expr="cast 10" line="2650" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYNC>
	<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="cast 11" line="2651" static="1">
		<x path="lime.graphics.opengl.GLObjectType"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRANSFORM_FEEDBACK>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.graphics.opengl._GL.GLObjectType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GL.hx" private="1" module="lime.graphics.opengl.GL" extern="1" final="1">
		<UNKNOWN public="1" get="inline" set="null" expr="cast 0" line="2640" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNKNOWN>
		<PROGRAM public="1" get="inline" set="null" expr="cast 1" line="2641" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PROGRAM>
		<SHADER public="1" get="inline" set="null" expr="cast 2" line="2642" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHADER>
		<BUFFER public="1" get="inline" set="null" expr="cast 3" line="2643" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BUFFER>
		<TEXTURE public="1" get="inline" set="null" expr="cast 4" line="2644" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEXTURE>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="cast 5" line="2645" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="cast 6" line="2646" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RENDERBUFFER>
		<VERTEX_ARRAY_OBJECT public="1" get="inline" set="null" expr="cast 7" line="2647" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VERTEX_ARRAY_OBJECT>
		<QUERY public="1" get="inline" set="null" expr="cast 8" line="2648" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUERY>
		<SAMPLER public="1" get="inline" set="null" expr="cast 9" line="2649" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SAMPLER>
		<SYNC public="1" get="inline" set="null" expr="cast 10" line="2650" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYNC>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="cast 11" line="2651" static="1">
			<x path="lime.graphics.opengl.GLObjectType"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRANSFORM_FEEDBACK>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="lime.graphics.opengl.GLActiveInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLActiveInfo.hx">
		<a>
			<type><x path="Int"/></type>
			<size><x path="Int"/></size>
			<name><c path="String"/></name>
		</a>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</typedef>
	<typedef path="lime.graphics.opengl.GLBuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLBuffer.hx"><d/></typedef>
	<typedef path="lime.graphics.opengl.GLContextAttributes" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLContextAttributes.hx">
		<a>
			<stencil><x path="Bool"/></stencil>
			<preserveDrawingBuffer><x path="Bool"/></preserveDrawingBuffer>
			<premultipliedAlpha><x path="Bool"/></premultipliedAlpha>
			<depth><x path="Bool"/></depth>
			<antialias><x path="Bool"/></antialias>
			<alpha><x path="Bool"/></alpha>
		</a>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</typedef>
	<typedef path="lime.graphics.opengl.GLFramebuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLFramebuffer.hx"><d/></typedef>
	<abstract path="lime.graphics.opengl.GLProgram" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLProgram.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.graphics.opengl._GLProgram.GLProgram_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLProgram.hx" private="1" module="lime.graphics.opengl.GLProgram" final="1"><fromSources public="1" set="method" line="49" static="1"><f a="gl:vertexSource:fragmentSource">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="lime.graphics.opengl.GLProgram"/>
</f></fromSources></class></impl>
	</abstract>
	<class path="lime.graphics.opengl._GLProgram.GLProgram_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLProgram.hx" private="1" module="lime.graphics.opengl.GLProgram" final="1"><fromSources public="1" set="method" line="49" static="1"><f a="gl:vertexSource:fragmentSource">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="lime.graphics.opengl.GLProgram"/>
</f></fromSources></class>
	<typedef path="lime.graphics.opengl.GLQuery" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLQuery.hx"><d/></typedef>
	<typedef path="lime.graphics.opengl.GLRenderbuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLRenderbuffer.hx"><d/></typedef>
	<typedef path="lime.graphics.opengl.GLSampler" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLSampler.hx"><d/></typedef>
	<abstract path="lime.graphics.opengl.GLShader" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLShader.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="lime.graphics.opengl._GLShader.GLShader_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLShader.hx" private="1" module="lime.graphics.opengl.GLShader" final="1"><fromSources public="1" set="method" line="58" static="1"><f a="gl:source:type">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="lime.graphics.opengl.GLShader"/>
</f></fromSources></class></impl>
	</abstract>
	<class path="lime.graphics.opengl._GLShader.GLShader_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLShader.hx" private="1" module="lime.graphics.opengl.GLShader" final="1"><fromSources public="1" set="method" line="58" static="1"><f a="gl:source:type">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="lime.graphics.opengl.GLShader"/>
</f></fromSources></class>
	<typedef path="lime.graphics.opengl.GLShaderPrecisionFormat" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLShaderPrecisionFormat.hx">
		<a>
			<rangeMin><x path="Int"/></rangeMin>
			<rangeMax><x path="Int"/></rangeMax>
			<precision><x path="Int"/></precision>
		</a>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</typedef>
	<typedef path="lime.graphics.opengl.GLSync" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLSync.hx"><d/></typedef>
	<typedef path="lime.graphics.opengl.GLTexture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLTexture.hx"><d/></typedef>
	<typedef path="lime.graphics.opengl.GLTransformFeedback" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLTransformFeedback.hx"><d/></typedef>
	<typedef path="lime.graphics.opengl.GLUniformLocation" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLUniformLocation.hx"><x path="Int"/></typedef>
	<typedef path="lime.graphics.opengl.GLVertexArrayObject" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/GLVertexArrayObject.hx"><d/></typedef>
	<class path="lime.graphics.opengl.ext.AMD_compressed_3DC_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/AMD_compressed_3DC_texture.hx">
		<_3DC_X_AMD public="1" expr="0x87F9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x87F9</e></m></meta>
		</_3DC_X_AMD>
		<_3DC_XY_AMD public="1" expr="0x87FA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x87FA</e></m></meta>
		</_3DC_XY_AMD>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.AMD_compressed_ATC_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/AMD_compressed_ATC_texture.hx">
		<ATC_RGB_AMD public="1" expr="0x8C92">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C92</e></m></meta>
		</ATC_RGB_AMD>
		<ATC_RGBA_EXPLICIT_ALPHA_AMD public="1" expr="0x8C93">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C93</e></m></meta>
		</ATC_RGBA_EXPLICIT_ALPHA_AMD>
		<ATC_RGBA_INTERPOLATED_ALPHA_AMD public="1" expr="0x87EE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x87EE</e></m></meta>
		</ATC_RGBA_INTERPOLATED_ALPHA_AMD>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.AMD_performance_monitor" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/AMD_performance_monitor.hx">
		<COUNTER_TYPE_AMD public="1" expr="0x8BC0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC0</e></m></meta>
		</COUNTER_TYPE_AMD>
		<COUNTER_RANGE_AMD public="1" expr="0x8BC1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC1</e></m></meta>
		</COUNTER_RANGE_AMD>
		<UNSIGNED_INT64_AMD public="1" expr="0x8BC2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC2</e></m></meta>
		</UNSIGNED_INT64_AMD>
		<PERCENTAGE_AMD public="1" expr="0x8BC3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC3</e></m></meta>
		</PERCENTAGE_AMD>
		<PERFMON_RESULT_AVAILABLE_AMD public="1" expr="0x8BC4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC4</e></m></meta>
		</PERFMON_RESULT_AVAILABLE_AMD>
		<PERFMON_RESULT_SIZE_AMD public="1" expr="0x8BC5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC5</e></m></meta>
		</PERFMON_RESULT_SIZE_AMD>
		<PERFMON_RESULT_AMD public="1" expr="0x8BC6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BC6</e></m></meta>
		</PERFMON_RESULT_AMD>
		<new set="method" line="14">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.AMD_program_binary_Z400" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/AMD_program_binary_Z400.hx">
		<Z400_BINARY_AMD public="1" expr="0x8740">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8740</e></m></meta>
		</Z400_BINARY_AMD>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_framebuffer_blit" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_framebuffer_blit.hx">
		<READ_FRAMEBUFFER_ANGLE public="1" expr="0x8CA8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA8</e></m></meta>
		</READ_FRAMEBUFFER_ANGLE>
		<DRAW_FRAMEBUFFER_ANGLE public="1" expr="0x8CA9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA9</e></m></meta>
		</DRAW_FRAMEBUFFER_ANGLE>
		<DRAW_FRAMEBUFFER_BINDING_ANGLE public="1" expr="0x8CA6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA6</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING_ANGLE>
		<READ_FRAMEBUFFER_BINDING_ANGLE public="1" expr="0x8CAA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAA</e></m></meta>
		</READ_FRAMEBUFFER_BINDING_ANGLE>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_framebuffer_multisample" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_framebuffer_multisample.hx">
		<RENDERBUFFER_SAMPLES_ANGLE public="1" expr="0x8CAB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAB</e></m></meta>
		</RENDERBUFFER_SAMPLES_ANGLE>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE public="1" expr="0x8D56">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D56</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE>
		<MAX_SAMPLES_ANGLE public="1" expr="0x8D57">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D57</e></m></meta>
		</MAX_SAMPLES_ANGLE>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_instanced_arrays" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_instanced_arrays.hx">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" expr="0x88FE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88FE</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method" line="14"><f a="mode:first:count:primcount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method" line="16"><f a="mode:count:type:offset:primcount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method" line="18"><f a="index:divisor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribDivisorANGLE>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_pack_reverse_row_order" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_pack_reverse_row_order.hx">
		<PACK_REVERSE_ROW_ORDER_ANGLE public="1" expr="0x93A4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93A4</e></m></meta>
		</PACK_REVERSE_ROW_ORDER_ANGLE>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_texture_compression_dxt3" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_texture_compression_dxt3.hx">
		<COMPRESSED_RGBA_S3TC_DXT3_ANGLE public="1" expr="0x83F2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F2</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT3_ANGLE>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_texture_compression_dxt5" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_texture_compression_dxt5.hx">
		<COMPRESSED_RGBA_S3TC_DXT5_ANGLE public="1" expr="0x83F3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F3</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT5_ANGLE>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_texture_usage" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_texture_usage.hx">
		<TEXTURE_USAGE_ANGLE public="1" expr="0x93A2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93A2</e></m></meta>
		</TEXTURE_USAGE_ANGLE>
		<FRAMEBUFFER_ATTACHMENT_ANGLE public="1" expr="0x93A3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93A3</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ANGLE>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ANGLE_translated_shader_source" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ANGLE_translated_shader_source.hx">
		<TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE public="1" expr="0x93A0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93A0</e></m></meta>
		</TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.APPLE_copy_texture_levels" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/APPLE_copy_texture_levels.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.APPLE_framebuffer_multisample" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/APPLE_framebuffer_multisample.hx">
		<RENDERBUFFER_SAMPLES_APPLE public="1" expr="0x8CAB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAB</e></m></meta>
		</RENDERBUFFER_SAMPLES_APPLE>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE public="1" expr="0x8D56">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D56</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE>
		<MAX_SAMPLES_APPLE public="1" expr="0x8D57">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D57</e></m></meta>
		</MAX_SAMPLES_APPLE>
		<READ_FRAMEBUFFER_APPLE public="1" expr="0x8CA8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA8</e></m></meta>
		</READ_FRAMEBUFFER_APPLE>
		<DRAW_FRAMEBUFFER_APPLE public="1" expr="0x8CA9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA9</e></m></meta>
		</DRAW_FRAMEBUFFER_APPLE>
		<DRAW_FRAMEBUFFER_BINDING_APPLE public="1" expr="0x8CA6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CA6</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING_APPLE>
		<READ_FRAMEBUFFER_BINDING_APPLE public="1" expr="0x8CAA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAA</e></m></meta>
		</READ_FRAMEBUFFER_BINDING_APPLE>
		<new set="method" line="14">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.APPLE_rgb_422" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/APPLE_rgb_422.hx">
		<RGB_422_APPLE public="1" expr="0x8A1F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A1F</e></m></meta>
		</RGB_422_APPLE>
		<UNSIGNED_SHORT_8_8_APPLE public="1" expr="0x85BA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x85BA</e></m></meta>
		</UNSIGNED_SHORT_8_8_APPLE>
		<UNSIGNED_SHORT_8_8_REV_APPLE public="1" expr="0x85BB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x85BB</e></m></meta>
		</UNSIGNED_SHORT_8_8_REV_APPLE>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.APPLE_sync" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/APPLE_sync.hx">
		<SYNC_OBJECT_APPLE public="1" expr="0x8A53">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A53</e></m></meta>
		</SYNC_OBJECT_APPLE>
		<MAX_SERVER_WAIT_TIMEOUT_APPLE public="1" expr="0x9111">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9111</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT_APPLE>
		<OBJECT_TYPE_APPLE public="1" expr="0x9112">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9112</e></m></meta>
		</OBJECT_TYPE_APPLE>
		<SYNC_CONDITION_APPLE public="1" expr="0x9113">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9113</e></m></meta>
		</SYNC_CONDITION_APPLE>
		<SYNC_STATUS_APPLE public="1" expr="0x9114">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9114</e></m></meta>
		</SYNC_STATUS_APPLE>
		<SYNC_FLAGS_APPLE public="1" expr="0x9115">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9115</e></m></meta>
		</SYNC_FLAGS_APPLE>
		<SYNC_FENCE_APPLE public="1" expr="0x9116">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9116</e></m></meta>
		</SYNC_FENCE_APPLE>
		<SYNC_GPU_COMMANDS_COMPLETE_APPLE public="1" expr="0x9117">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9117</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE_APPLE>
		<UNSIGNALED_APPLE public="1" expr="0x9118">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9118</e></m></meta>
		</UNSIGNALED_APPLE>
		<SIGNALED_APPLE public="1" expr="0x9119">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9119</e></m></meta>
		</SIGNALED_APPLE>
		<ALREADY_SIGNALED_APPLE public="1" expr="0x911A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911A</e></m></meta>
		</ALREADY_SIGNALED_APPLE>
		<TIMEOUT_EXPIRED_APPLE public="1" expr="0x911B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911B</e></m></meta>
		</TIMEOUT_EXPIRED_APPLE>
		<CONDITION_SATISFIED_APPLE public="1" expr="0x911C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911C</e></m></meta>
		</CONDITION_SATISFIED_APPLE>
		<WAIT_FAILED_APPLE public="1" expr="0x911D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x911D</e></m></meta>
		</WAIT_FAILED_APPLE>
		<SYNC_FLUSH_COMMANDS_BIT_APPLE public="1" expr="0x00000001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000001</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT_APPLE>
		<TIMEOUT_IGNORED_APPLE public="1" expr="0xFFFFFFFF">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</TIMEOUT_IGNORED_APPLE>
		<new set="method" line="24">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.APPLE_texture_format_BGRA8888" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/APPLE_texture_format_BGRA8888.hx">
		<BGRA_EXT public="1" expr="0x80E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E1</e></m></meta>
		</BGRA_EXT>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.APPLE_texture_max_level" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/APPLE_texture_max_level.hx">
		<TEXTURE_MAX_LEVEL_APPLE public="1" expr="0x813D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813D</e></m></meta>
		</TEXTURE_MAX_LEVEL_APPLE>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ARM_mali_program_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ARM_mali_program_binary.hx">
		<MALI_PROGRAM_BINARY_ARM public="1" expr="0x8F61">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F61</e></m></meta>
		</MALI_PROGRAM_BINARY_ARM>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ARM_mali_shader_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ARM_mali_shader_binary.hx">
		<MALI_SHADER_BINARY_ARM public="1" expr="0x8F60">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8F60</e></m></meta>
		</MALI_SHADER_BINARY_ARM>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.ARM_rgba8" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/ARM_rgba8.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.DMP_shader_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/DMP_shader_binary.hx">
		<SHADER_BINARY_DMP public="1" expr="0x9250">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9250</e></m></meta>
		</SHADER_BINARY_DMP>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_bgra" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_bgra.hx">
		<BGR_EXT public="1" expr="0x80E0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E0</e></m></meta>
		</BGR_EXT>
		<BGRA_EXT public="1" expr="0x80E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E1</e></m></meta>
		</BGRA_EXT>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_blend_minmax" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_blend_minmax.hx">
		<MIN_EXT public="1" expr="0x8007">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8007</e></m></meta>
		</MIN_EXT>
		<MAX_EXT public="1" expr="0x8008">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8008</e></m></meta>
		</MAX_EXT>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_color_buffer_float" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_color_buffer_float.hx">
		<new set="method" line="6">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_color_buffer_half_float" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_color_buffer_half_float.hx">
		<RGBA16F_EXT public="1" expr="0x881A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881A</e></m></meta>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" expr="0x881B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881B</e></m></meta>
		</RGB16F_EXT>
		<RG16F_EXT public="1" expr="0x822F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822F</e></m></meta>
		</RG16F_EXT>
		<R16F_EXT public="1" expr="0x822D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822D</e></m></meta>
		</R16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" expr="0x8211">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8211</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" expr="0x8C17">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C17</e></m></meta>
		</UNSIGNED_NORMALIZED_EXT>
		<new set="method" line="16">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_debug_label" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_debug_label.hx">
		<PROGRAM_PIPELINE_OBJECT_EXT public="1" expr="0x8A4F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A4F</e></m></meta>
		</PROGRAM_PIPELINE_OBJECT_EXT>
		<PROGRAM_OBJECT_EXT public="1" expr="0x8B40">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B40</e></m></meta>
		</PROGRAM_OBJECT_EXT>
		<SHADER_OBJECT_EXT public="1" expr="0x8B48">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B48</e></m></meta>
		</SHADER_OBJECT_EXT>
		<BUFFER_OBJECT_EXT public="1" expr="0x9151">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9151</e></m></meta>
		</BUFFER_OBJECT_EXT>
		<QUERY_OBJECT_EXT public="1" expr="0x9153">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9153</e></m></meta>
		</QUERY_OBJECT_EXT>
		<VERTEX_ARRAY_OBJECT_EXT public="1" expr="0x9154">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9154</e></m></meta>
		</VERTEX_ARRAY_OBJECT_EXT>
		<new set="method" line="13">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_debug_marker" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_debug_marker.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_discard_framebuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_discard_framebuffer.hx">
		<COLOR_EXT public="1" expr="0x1800">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1800</e></m></meta>
		</COLOR_EXT>
		<DEPTH_EXT public="1" expr="0x1801">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1801</e></m></meta>
		</DEPTH_EXT>
		<STENCIL_EXT public="1" expr="0x1802">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1802</e></m></meta>
		</STENCIL_EXT>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_map_buffer_range" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_map_buffer_range.hx">
		<MAP_READ_BIT_EXT public="1" expr="0x0001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</MAP_READ_BIT_EXT>
		<MAP_WRITE_BIT_EXT public="1" expr="0x0002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</MAP_WRITE_BIT_EXT>
		<MAP_INVALIDATE_RANGE_BIT_EXT public="1" expr="0x0004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</MAP_INVALIDATE_RANGE_BIT_EXT>
		<MAP_INVALIDATE_BUFFER_BIT_EXT public="1" expr="0x0008">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</MAP_INVALIDATE_BUFFER_BIT_EXT>
		<MAP_FLUSH_EXPLICIT_BIT_EXT public="1" expr="0x0010">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0010</e></m></meta>
		</MAP_FLUSH_EXPLICIT_BIT_EXT>
		<MAP_UNSYNCHRONIZED_BIT_EXT public="1" expr="0x0020">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0020</e></m></meta>
		</MAP_UNSYNCHRONIZED_BIT_EXT>
		<new set="method" line="13">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_multi_draw_arrays" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_multi_draw_arrays.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_multisampled_render_to_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_multisampled_render_to_texture.hx">
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT public="1" expr="0x8D6C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D6C</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT>
		<RENDERBUFFER_SAMPLES_EXT public="1" expr="0x8CAB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CAB</e></m></meta>
		</RENDERBUFFER_SAMPLES_EXT>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT public="1" expr="0x8D56">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D56</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT>
		<MAX_SAMPLES_EXT public="1" expr="0x8D57">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D57</e></m></meta>
		</MAX_SAMPLES_EXT>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_multiview_draw_buffers" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_multiview_draw_buffers.hx">
		<COLOR_ATTACHMENT_EXT public="1" expr="0x90F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x90F0</e></m></meta>
		</COLOR_ATTACHMENT_EXT>
		<MULTIVIEW_EXT public="1" expr="0x90F1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x90F1</e></m></meta>
		</MULTIVIEW_EXT>
		<DRAW_BUFFER_EXT public="1" expr="0x0C01">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C01</e></m></meta>
		</DRAW_BUFFER_EXT>
		<READ_BUFFER_EXT public="1" expr="0x0C02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C02</e></m></meta>
		</READ_BUFFER_EXT>
		<MAX_MULTIVIEW_BUFFERS_EXT public="1" expr="0x90F2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x90F2</e></m></meta>
		</MAX_MULTIVIEW_BUFFERS_EXT>
		<new set="method" line="12">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_occlusion_query_boolean" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_occlusion_query_boolean.hx">
		<ANY_SAMPLES_PASSED_EXT public="1" expr="0x8C2F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C2F</e></m></meta>
		</ANY_SAMPLES_PASSED_EXT>
		<ANY_SAMPLES_PASSED_CONSERVATIVE_EXT public="1" expr="0x8D6A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D6A</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE_EXT>
		<CURRENT_QUERY_EXT public="1" expr="0x8865">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8865</e></m></meta>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" expr="0x8866">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8866</e></m></meta>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" expr="0x8867">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8867</e></m></meta>
		</QUERY_RESULT_AVAILABLE_EXT>
		<new set="method" line="12">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_packed_depth_stencil" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_packed_depth_stencil.hx">
		<DEPTH_STENCIL_EXT public="1" expr="0x84F9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F9</e></m></meta>
		</DEPTH_STENCIL_EXT>
		<UNSIGNED_INT_24_8_EXT public="1" expr="0x84FA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FA</e></m></meta>
		</UNSIGNED_INT_24_8_EXT>
		<DEPTH24_STENCIL8_EXT public="1" expr="0x88F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88F0</e></m></meta>
		</DEPTH24_STENCIL8_EXT>
		<TEXTURE_STENCIL_SIZE_EXT public="1" expr="0x88F1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88F1</e></m></meta>
		</TEXTURE_STENCIL_SIZE_EXT>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_read_format_bgra" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_read_format_bgra.hx">
		<BGRA_EXT public="1" expr="0x80E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E1</e></m></meta>
		</BGRA_EXT>
		<UNSIGNED_SHORT_4_4_4_4_REV_EXT public="1" expr="0x8365">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8365</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4_REV_EXT>
		<UNSIGNED_SHORT_1_5_5_5_REV_EXT public="1" expr="0x8366">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8366</e></m></meta>
		</UNSIGNED_SHORT_1_5_5_5_REV_EXT>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_robustness" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_robustness.hx">
		<GUILTY_CONTEXT_RESET_EXT public="1" expr="0x8253">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8253</e></m></meta>
		</GUILTY_CONTEXT_RESET_EXT>
		<INNOCENT_CONTEXT_RESET_EXT public="1" expr="0x8254">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8254</e></m></meta>
		</INNOCENT_CONTEXT_RESET_EXT>
		<UNKNOWN_CONTEXT_RESET_EXT public="1" expr="0x8255">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8255</e></m></meta>
		</UNKNOWN_CONTEXT_RESET_EXT>
		<CONTEXT_ROBUST_ACCESS_EXT public="1" expr="0x90F3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x90F3</e></m></meta>
		</CONTEXT_ROBUST_ACCESS_EXT>
		<RESET_NOTIFICATION_STRATEGY_EXT public="1" expr="0x8256">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8256</e></m></meta>
		</RESET_NOTIFICATION_STRATEGY_EXT>
		<LOSE_CONTEXT_ON_RESET_EXT public="1" expr="0x8252">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8252</e></m></meta>
		</LOSE_CONTEXT_ON_RESET_EXT>
		<NO_RESET_NOTIFICATION_EXT public="1" expr="0x8261">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8261</e></m></meta>
		</NO_RESET_NOTIFICATION_EXT>
		<new set="method" line="14">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_sRGB" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_sRGB.hx">
		<SRGB_EXT public="1" expr="0x8C40">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C40</e></m></meta>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" expr="0x8C42">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C42</e></m></meta>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" expr="0x8C43">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C43</e></m></meta>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" expr="0x8210">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8210</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<new set="method" line="12">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_separate_shader_objects" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_separate_shader_objects.hx">
		<VERTEX_SHADER_BIT_EXT public="1" expr="0x00000001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000001</e></m></meta>
		</VERTEX_SHADER_BIT_EXT>
		<FRAGMENT_SHADER_BIT_EXT public="1" expr="0x00000002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000002</e></m></meta>
		</FRAGMENT_SHADER_BIT_EXT>
		<ALL_SHADER_BITS_EXT public="1" expr="0xFFFFFFFF">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		</ALL_SHADER_BITS_EXT>
		<PROGRAM_SEPARABLE_EXT public="1" expr="0x8258">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8258</e></m></meta>
		</PROGRAM_SEPARABLE_EXT>
		<ACTIVE_PROGRAM_EXT public="1" expr="0x8259">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8259</e></m></meta>
		</ACTIVE_PROGRAM_EXT>
		<PROGRAM_PIPELINE_BINDING_EXT public="1" expr="0x825A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x825A</e></m></meta>
		</PROGRAM_PIPELINE_BINDING_EXT>
		<new set="method" line="13">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_shader_framebuffer_fetch" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_shader_framebuffer_fetch.hx">
		<FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT public="1" expr="0x8A52">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A52</e></m></meta>
		</FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_shader_texture_lod" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_shader_texture_lod.hx">
		<new set="method" line="7">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_shadow_samplers" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_shadow_samplers.hx">
		<TEXTURE_COMPARE_MODE_EXT public="1" expr="0x884C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884C</e></m></meta>
		</TEXTURE_COMPARE_MODE_EXT>
		<TEXTURE_COMPARE_FUNC_EXT public="1" expr="0x884D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884D</e></m></meta>
		</TEXTURE_COMPARE_FUNC_EXT>
		<COMPARE_REF_TO_TEXTURE_EXT public="1" expr="0x884E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x884E</e></m></meta>
		</COMPARE_REF_TO_TEXTURE_EXT>
		<SAMPLER_2D_SHADOW_EXT public="1" expr="0x8B62">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B62</e></m></meta>
		</SAMPLER_2D_SHADOW_EXT>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_compression_dxt1" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_compression_dxt1.hx">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" expr="0x83F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F0</e></m></meta>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" expr="0x83F1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F1</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_compression_s3tc" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_compression_s3tc.hx">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" expr="0x83F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F0</e></m></meta>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" expr="0x83F1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F1</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" expr="0x83F2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F2</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" expr="0x83F3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x83F3</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_filter_anisotropic" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_filter_anisotropic.hx">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" expr="0x84FE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FE</e></m></meta>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" expr="0x84FF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FF</e></m></meta>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_format_BGRA8888" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_format_BGRA8888.hx">
		<BGRA_EXT public="1" expr="0x80E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E1</e></m></meta>
		</BGRA_EXT>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_rg" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_rg.hx">
		<RED_EXT public="1" expr="0x1903">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1903</e></m></meta>
		</RED_EXT>
		<RG_EXT public="1" expr="0x8227">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8227</e></m></meta>
		</RG_EXT>
		<R8_EXT public="1" expr="0x8229">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8229</e></m></meta>
		</R8_EXT>
		<RG8_EXT public="1" expr="0x822B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822B</e></m></meta>
		</RG8_EXT>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_storage" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_storage.hx">
		<TEXTURE_IMMUTABLE_FORMAT_EXT public="1" expr="0x912F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x912F</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT_EXT>
		<ALPHA8_EXT public="1" expr="0x803C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x803C</e></m></meta>
		</ALPHA8_EXT>
		<LUMINANCE8_EXT public="1" expr="0x8040">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8040</e></m></meta>
		</LUMINANCE8_EXT>
		<LUMINANCE8_ALPHA8_EXT public="1" expr="0x8045">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8045</e></m></meta>
		</LUMINANCE8_ALPHA8_EXT>
		<RGBA32F_EXT public="1" expr="0x8814">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8814</e></m></meta>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" expr="0x8815">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8815</e></m></meta>
		</RGB32F_EXT>
		<ALPHA32F_EXT public="1" expr="0x8816">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8816</e></m></meta>
		</ALPHA32F_EXT>
		<LUMINANCE32F_EXT public="1" expr="0x8818">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8818</e></m></meta>
		</LUMINANCE32F_EXT>
		<LUMINANCE_ALPHA32F_EXT public="1" expr="0x8819">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8819</e></m></meta>
		</LUMINANCE_ALPHA32F_EXT>
		<RGBA16F_EXT public="1" expr="0x881A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881A</e></m></meta>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" expr="0x881B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881B</e></m></meta>
		</RGB16F_EXT>
		<ALPHA16F_EXT public="1" expr="0x881C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881C</e></m></meta>
		</ALPHA16F_EXT>
		<LUMINANCE16F_EXT public="1" expr="0x881E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881E</e></m></meta>
		</LUMINANCE16F_EXT>
		<LUMINANCE_ALPHA16F_EXT public="1" expr="0x881F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881F</e></m></meta>
		</LUMINANCE_ALPHA16F_EXT>
		<RGB10_A2_EXT public="1" expr="0x8059">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8059</e></m></meta>
		</RGB10_A2_EXT>
		<RGB10_EXT public="1" expr="0x8052">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8052</e></m></meta>
		</RGB10_EXT>
		<BGRA8_EXT public="1" expr="0x93A1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93A1</e></m></meta>
		</BGRA8_EXT>
		<R8_EXT public="1" expr="0x8229">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8229</e></m></meta>
		</R8_EXT>
		<RG8_EXT public="1" expr="0x822B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822B</e></m></meta>
		</RG8_EXT>
		<R32F_EXT public="1" expr="0x822E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822E</e></m></meta>
		</R32F_EXT>
		<RG32F_EXT public="1" expr="0x8230">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8230</e></m></meta>
		</RG32F_EXT>
		<R16F_EXT public="1" expr="0x822D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822D</e></m></meta>
		</R16F_EXT>
		<RG16F_EXT public="1" expr="0x822F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822F</e></m></meta>
		</RG16F_EXT>
		<new set="method" line="30">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_texture_type_2_10_10_10_REV" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_texture_type_2_10_10_10_REV.hx">
		<UNSIGNED_INT_2_10_10_10_REV_EXT public="1" expr="0x8368">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8368</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV_EXT>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.EXT_unpack_subimage" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/EXT_unpack_subimage.hx">
		<UNPACK_ROW_LENGTH public="1" expr="0x0CF2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF2</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" expr="0x0CF3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF3</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" expr="0x0CF4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0CF4</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.FJ_shader_binary_GCCSO" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/FJ_shader_binary_GCCSO.hx">
		<GCCSO_SHADER_BINARY_FJ public="1" expr="0x9260">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9260</e></m></meta>
		</GCCSO_SHADER_BINARY_FJ>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.IMG_multisampled_render_to_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/IMG_multisampled_render_to_texture.hx">
		<RENDERBUFFER_SAMPLES_IMG public="1" expr="0x9133">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9133</e></m></meta>
		</RENDERBUFFER_SAMPLES_IMG>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG public="1" expr="0x9134">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9134</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG>
		<MAX_SAMPLES_IMG public="1" expr="0x9135">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9135</e></m></meta>
		</MAX_SAMPLES_IMG>
		<TEXTURE_SAMPLES_IMG public="1" expr="0x9136">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9136</e></m></meta>
		</TEXTURE_SAMPLES_IMG>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.IMG_program_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/IMG_program_binary.hx">
		<SGX_PROGRAM_BINARY_IMG public="1" expr="0x9130">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9130</e></m></meta>
		</SGX_PROGRAM_BINARY_IMG>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.IMG_read_format" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/IMG_read_format.hx">
		<BGRA_IMG public="1" expr="0x80E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E1</e></m></meta>
		</BGRA_IMG>
		<UNSIGNED_SHORT_4_4_4_4_REV_IMG public="1" expr="0x8365">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8365</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4_REV_IMG>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.IMG_shader_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/IMG_shader_binary.hx">
		<SGX_BINARY_IMG public="1" expr="0x8C0A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C0A</e></m></meta>
		</SGX_BINARY_IMG>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.IMG_texture_compression_pvrtc" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/IMG_texture_compression_pvrtc.hx">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" expr="0x8C00">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C00</e></m></meta>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" expr="0x8C01">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C01</e></m></meta>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" expr="0x8C02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C02</e></m></meta>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" expr="0x8C03">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C03</e></m></meta>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.KHR_debug" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/KHR_debug.hx">
		<DEBUG_OUTPUT_SYNCHRONOUS public="1" expr="0x8242">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8242</e></m></meta>
		</DEBUG_OUTPUT_SYNCHRONOUS>
		<DEBUG_NEXT_LOGGED_MESSAGE_LENGTH public="1" expr="0x8243">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8243</e></m></meta>
		</DEBUG_NEXT_LOGGED_MESSAGE_LENGTH>
		<DEBUG_CALLBACK_FUNCTION public="1" expr="0x8244">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8244</e></m></meta>
		</DEBUG_CALLBACK_FUNCTION>
		<DEBUG_CALLBACK_USER_PARAM public="1" expr="0x8245">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8245</e></m></meta>
		</DEBUG_CALLBACK_USER_PARAM>
		<DEBUG_SOURCE_API public="1" expr="0x8246">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8246</e></m></meta>
		</DEBUG_SOURCE_API>
		<DEBUG_SOURCE_WINDOW_SYSTEM public="1" expr="0x8247">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8247</e></m></meta>
		</DEBUG_SOURCE_WINDOW_SYSTEM>
		<DEBUG_SOURCE_SHADER_COMPILER public="1" expr="0x8248">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8248</e></m></meta>
		</DEBUG_SOURCE_SHADER_COMPILER>
		<DEBUG_SOURCE_THIRD_PARTY public="1" expr="0x8249">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8249</e></m></meta>
		</DEBUG_SOURCE_THIRD_PARTY>
		<DEBUG_SOURCE_APPLICATION public="1" expr="0x824A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x824A</e></m></meta>
		</DEBUG_SOURCE_APPLICATION>
		<DEBUG_SOURCE_OTHER public="1" expr="0x824B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x824B</e></m></meta>
		</DEBUG_SOURCE_OTHER>
		<DEBUG_TYPE_ERROR public="1" expr="0x824C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x824C</e></m></meta>
		</DEBUG_TYPE_ERROR>
		<DEBUG_TYPE_DEPRECATED_BEHAVIOR public="1" expr="0x824D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x824D</e></m></meta>
		</DEBUG_TYPE_DEPRECATED_BEHAVIOR>
		<DEBUG_TYPE_UNDEFINED_BEHAVIOR public="1" expr="0x824E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x824E</e></m></meta>
		</DEBUG_TYPE_UNDEFINED_BEHAVIOR>
		<DEBUG_TYPE_PORTABILITY public="1" expr="0x824F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x824F</e></m></meta>
		</DEBUG_TYPE_PORTABILITY>
		<DEBUG_TYPE_PERFORMANCE public="1" expr="0x8250">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8250</e></m></meta>
		</DEBUG_TYPE_PERFORMANCE>
		<DEBUG_TYPE_OTHER public="1" expr="0x8251">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8251</e></m></meta>
		</DEBUG_TYPE_OTHER>
		<DEBUG_TYPE_MARKER public="1" expr="0x8268">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8268</e></m></meta>
		</DEBUG_TYPE_MARKER>
		<DEBUG_TYPE_PUSH_GROUP public="1" expr="0x8269">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8269</e></m></meta>
		</DEBUG_TYPE_PUSH_GROUP>
		<DEBUG_TYPE_POP_GROUP public="1" expr="0x826A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x826A</e></m></meta>
		</DEBUG_TYPE_POP_GROUP>
		<DEBUG_SEVERITY_NOTIFICATION public="1" expr="0x826B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x826B</e></m></meta>
		</DEBUG_SEVERITY_NOTIFICATION>
		<MAX_DEBUG_GROUP_STACK_DEPTH public="1" expr="0x826C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x826C</e></m></meta>
		</MAX_DEBUG_GROUP_STACK_DEPTH>
		<DEBUG_GROUP_STACK_DEPTH public="1" expr="0x826D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x826D</e></m></meta>
		</DEBUG_GROUP_STACK_DEPTH>
		<BUFFER public="1" expr="0x82E0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82E0</e></m></meta>
		</BUFFER>
		<SHADER public="1" expr="0x82E1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82E1</e></m></meta>
		</SHADER>
		<PROGRAM public="1" expr="0x82E2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82E2</e></m></meta>
		</PROGRAM>
		<QUERY public="1" expr="0x82E3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82E3</e></m></meta>
		</QUERY>
		<SAMPLER public="1" expr="0x82E6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82E6</e></m></meta>
		</SAMPLER>
		<MAX_LABEL_LENGTH public="1" expr="0x82E8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x82E8</e></m></meta>
		</MAX_LABEL_LENGTH>
		<MAX_DEBUG_MESSAGE_LENGTH public="1" expr="0x9143">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9143</e></m></meta>
		</MAX_DEBUG_MESSAGE_LENGTH>
		<MAX_DEBUG_LOGGED_MESSAGES public="1" expr="0x9144">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9144</e></m></meta>
		</MAX_DEBUG_LOGGED_MESSAGES>
		<DEBUG_LOGGED_MESSAGES public="1" expr="0x9145">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9145</e></m></meta>
		</DEBUG_LOGGED_MESSAGES>
		<DEBUG_SEVERITY_HIGH public="1" expr="0x9146">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9146</e></m></meta>
		</DEBUG_SEVERITY_HIGH>
		<DEBUG_SEVERITY_MEDIUM public="1" expr="0x9147">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9147</e></m></meta>
		</DEBUG_SEVERITY_MEDIUM>
		<DEBUG_SEVERITY_LOW public="1" expr="0x9148">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9148</e></m></meta>
		</DEBUG_SEVERITY_LOW>
		<DEBUG_OUTPUT public="1" expr="0x92E0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x92E0</e></m></meta>
		</DEBUG_OUTPUT>
		<CONTEXT_FLAG_DEBUG_BIT public="1" expr="0x00000002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000002</e></m></meta>
		</CONTEXT_FLAG_DEBUG_BIT>
		<STACK_OVERFLOW public="1" expr="0x0503">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0503</e></m></meta>
		</STACK_OVERFLOW>
		<STACK_UNDERFLOW public="1" expr="0x0504">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0504</e></m></meta>
		</STACK_UNDERFLOW>
		<new set="method" line="45">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.KHR_texture_compression_astc_ldr" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/KHR_texture_compression_astc_ldr.hx">
		<COMPRESSED_RGBA_ASTC_4x4_KHR public="1" expr="0x93B0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B0</e></m></meta>
		</COMPRESSED_RGBA_ASTC_4x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x4_KHR public="1" expr="0x93B1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B1</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x5_KHR public="1" expr="0x93B2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B2</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x5_KHR public="1" expr="0x93B3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B3</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x6_KHR public="1" expr="0x93B4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B4</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x5_KHR public="1" expr="0x93B5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B5</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x5_KHR>
		<COMPRESSED_RGBA_ASTC_8x6_KHR public="1" expr="0x93B6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B6</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x8_KHR public="1" expr="0x93B7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B7</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x5_KHR public="1" expr="0x93B8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B8</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x5_KHR>
		<COMPRESSED_RGBA_ASTC_10x6_KHR public="1" expr="0x93B9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93B9</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x6_KHR>
		<COMPRESSED_RGBA_ASTC_10x8_KHR public="1" expr="0x93BA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93BA</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x10_KHR public="1" expr="0x93BB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93BB</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x10_KHR public="1" expr="0x93BC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93BC</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x12_KHR public="1" expr="0x93BD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93BD</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x12_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR public="1" expr="0x93D0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D0</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR public="1" expr="0x93D1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D1</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR public="1" expr="0x93D2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D2</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR public="1" expr="0x93D3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D3</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR public="1" expr="0x93D4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D4</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR public="1" expr="0x93D5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D5</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR public="1" expr="0x93D6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D6</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR public="1" expr="0x93D7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D7</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR public="1" expr="0x93D8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D8</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR public="1" expr="0x93D9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93D9</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR public="1" expr="0x93DA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93DA</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR public="1" expr="0x93DB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93DB</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR public="1" expr="0x93DC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93DC</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR public="1" expr="0x93DD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x93DD</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
		<new set="method" line="35">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NVX_gpu_memory_info" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NVX_gpu_memory_info.hx">
		<GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX public="1" expr="0x9047">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9047</e></m></meta>
		</GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX>
		<GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX public="1" expr="0x9048">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9048</e></m></meta>
		</GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX>
		<GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX public="1" expr="0x9049">
			<x path="Int"/>
			<meta><m n=":value"><e>0x9049</e></m></meta>
		</GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX>
		<GPU_MEMORY_INFO_EVICTION_COUNT_NVX public="1" expr="0x904A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x904A</e></m></meta>
		</GPU_MEMORY_INFO_EVICTION_COUNT_NVX>
		<GPU_MEMORY_INFO_EVICTED_MEMORY_NVX public="1" expr="0x904B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x904B</e></m></meta>
		</GPU_MEMORY_INFO_EVICTED_MEMORY_NVX>
		<new set="method" line="12">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_coverage_sample" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_coverage_sample.hx">
		<COVERAGE_COMPONENT_NV public="1" expr="0x8ED0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED0</e></m></meta>
		</COVERAGE_COMPONENT_NV>
		<COVERAGE_COMPONENT4_NV public="1" expr="0x8ED1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED1</e></m></meta>
		</COVERAGE_COMPONENT4_NV>
		<COVERAGE_ATTACHMENT_NV public="1" expr="0x8ED2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED2</e></m></meta>
		</COVERAGE_ATTACHMENT_NV>
		<COVERAGE_BUFFERS_NV public="1" expr="0x8ED3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED3</e></m></meta>
		</COVERAGE_BUFFERS_NV>
		<COVERAGE_SAMPLES_NV public="1" expr="0x8ED4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED4</e></m></meta>
		</COVERAGE_SAMPLES_NV>
		<COVERAGE_ALL_FRAGMENTS_NV public="1" expr="0x8ED5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED5</e></m></meta>
		</COVERAGE_ALL_FRAGMENTS_NV>
		<COVERAGE_EDGE_FRAGMENTS_NV public="1" expr="0x8ED6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED6</e></m></meta>
		</COVERAGE_EDGE_FRAGMENTS_NV>
		<COVERAGE_AUTOMATIC_NV public="1" expr="0x8ED7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8ED7</e></m></meta>
		</COVERAGE_AUTOMATIC_NV>
		<COVERAGE_BUFFER_BIT_NV public="1" expr="0x8000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</COVERAGE_BUFFER_BIT_NV>
		<new set="method" line="16">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_depth_nonlinear" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_depth_nonlinear.hx">
		<DEPTH_COMPONENT16_NONLINEAR_NV public="1" expr="0x8E2C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8E2C</e></m></meta>
		</DEPTH_COMPONENT16_NONLINEAR_NV>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_draw_buffers" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_draw_buffers.hx">
		<MAX_DRAW_BUFFERS_NV public="1" expr="0x8824">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8824</e></m></meta>
		</MAX_DRAW_BUFFERS_NV>
		<DRAW_BUFFER0_NV public="1" expr="0x8825">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8825</e></m></meta>
		</DRAW_BUFFER0_NV>
		<DRAW_BUFFER1_NV public="1" expr="0x8826">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8826</e></m></meta>
		</DRAW_BUFFER1_NV>
		<DRAW_BUFFER2_NV public="1" expr="0x8827">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8827</e></m></meta>
		</DRAW_BUFFER2_NV>
		<DRAW_BUFFER3_NV public="1" expr="0x8828">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8828</e></m></meta>
		</DRAW_BUFFER3_NV>
		<DRAW_BUFFER4_NV public="1" expr="0x8829">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8829</e></m></meta>
		</DRAW_BUFFER4_NV>
		<DRAW_BUFFER5_NV public="1" expr="0x882A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882A</e></m></meta>
		</DRAW_BUFFER5_NV>
		<DRAW_BUFFER6_NV public="1" expr="0x882B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882B</e></m></meta>
		</DRAW_BUFFER6_NV>
		<DRAW_BUFFER7_NV public="1" expr="0x882C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882C</e></m></meta>
		</DRAW_BUFFER7_NV>
		<DRAW_BUFFER8_NV public="1" expr="0x882D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882D</e></m></meta>
		</DRAW_BUFFER8_NV>
		<DRAW_BUFFER9_NV public="1" expr="0x882E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882E</e></m></meta>
		</DRAW_BUFFER9_NV>
		<DRAW_BUFFER10_NV public="1" expr="0x882F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x882F</e></m></meta>
		</DRAW_BUFFER10_NV>
		<DRAW_BUFFER11_NV public="1" expr="0x8830">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8830</e></m></meta>
		</DRAW_BUFFER11_NV>
		<DRAW_BUFFER12_NV public="1" expr="0x8831">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8831</e></m></meta>
		</DRAW_BUFFER12_NV>
		<DRAW_BUFFER13_NV public="1" expr="0x8832">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8832</e></m></meta>
		</DRAW_BUFFER13_NV>
		<DRAW_BUFFER14_NV public="1" expr="0x8833">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8833</e></m></meta>
		</DRAW_BUFFER14_NV>
		<DRAW_BUFFER15_NV public="1" expr="0x8834">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8834</e></m></meta>
		</DRAW_BUFFER15_NV>
		<COLOR_ATTACHMENT0_NV public="1" expr="0x8CE0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE0</e></m></meta>
		</COLOR_ATTACHMENT0_NV>
		<COLOR_ATTACHMENT1_NV public="1" expr="0x8CE1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE1</e></m></meta>
		</COLOR_ATTACHMENT1_NV>
		<COLOR_ATTACHMENT2_NV public="1" expr="0x8CE2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE2</e></m></meta>
		</COLOR_ATTACHMENT2_NV>
		<COLOR_ATTACHMENT3_NV public="1" expr="0x8CE3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE3</e></m></meta>
		</COLOR_ATTACHMENT3_NV>
		<COLOR_ATTACHMENT4_NV public="1" expr="0x8CE4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE4</e></m></meta>
		</COLOR_ATTACHMENT4_NV>
		<COLOR_ATTACHMENT5_NV public="1" expr="0x8CE5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE5</e></m></meta>
		</COLOR_ATTACHMENT5_NV>
		<COLOR_ATTACHMENT6_NV public="1" expr="0x8CE6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE6</e></m></meta>
		</COLOR_ATTACHMENT6_NV>
		<COLOR_ATTACHMENT7_NV public="1" expr="0x8CE7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE7</e></m></meta>
		</COLOR_ATTACHMENT7_NV>
		<COLOR_ATTACHMENT8_NV public="1" expr="0x8CE8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE8</e></m></meta>
		</COLOR_ATTACHMENT8_NV>
		<COLOR_ATTACHMENT9_NV public="1" expr="0x8CE9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE9</e></m></meta>
		</COLOR_ATTACHMENT9_NV>
		<COLOR_ATTACHMENT10_NV public="1" expr="0x8CEA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEA</e></m></meta>
		</COLOR_ATTACHMENT10_NV>
		<COLOR_ATTACHMENT11_NV public="1" expr="0x8CEB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEB</e></m></meta>
		</COLOR_ATTACHMENT11_NV>
		<COLOR_ATTACHMENT12_NV public="1" expr="0x8CEC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEC</e></m></meta>
		</COLOR_ATTACHMENT12_NV>
		<COLOR_ATTACHMENT13_NV public="1" expr="0x8CED">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CED</e></m></meta>
		</COLOR_ATTACHMENT13_NV>
		<COLOR_ATTACHMENT14_NV public="1" expr="0x8CEE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEE</e></m></meta>
		</COLOR_ATTACHMENT14_NV>
		<COLOR_ATTACHMENT15_NV public="1" expr="0x8CEF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEF</e></m></meta>
		</COLOR_ATTACHMENT15_NV>
		<new set="method" line="40">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_fbo_color_attachments" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_fbo_color_attachments.hx">
		<MAX_COLOR_ATTACHMENTS_NV public="1" expr="0x8CDF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CDF</e></m></meta>
		</MAX_COLOR_ATTACHMENTS_NV>
		<COLOR_ATTACHMENT0_NV public="1" expr="0x8CE0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE0</e></m></meta>
		</COLOR_ATTACHMENT0_NV>
		<COLOR_ATTACHMENT1_NV public="1" expr="0x8CE1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE1</e></m></meta>
		</COLOR_ATTACHMENT1_NV>
		<COLOR_ATTACHMENT2_NV public="1" expr="0x8CE2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE2</e></m></meta>
		</COLOR_ATTACHMENT2_NV>
		<COLOR_ATTACHMENT3_NV public="1" expr="0x8CE3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE3</e></m></meta>
		</COLOR_ATTACHMENT3_NV>
		<COLOR_ATTACHMENT4_NV public="1" expr="0x8CE4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE4</e></m></meta>
		</COLOR_ATTACHMENT4_NV>
		<COLOR_ATTACHMENT5_NV public="1" expr="0x8CE5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE5</e></m></meta>
		</COLOR_ATTACHMENT5_NV>
		<COLOR_ATTACHMENT6_NV public="1" expr="0x8CE6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE6</e></m></meta>
		</COLOR_ATTACHMENT6_NV>
		<COLOR_ATTACHMENT7_NV public="1" expr="0x8CE7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE7</e></m></meta>
		</COLOR_ATTACHMENT7_NV>
		<COLOR_ATTACHMENT8_NV public="1" expr="0x8CE8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE8</e></m></meta>
		</COLOR_ATTACHMENT8_NV>
		<COLOR_ATTACHMENT9_NV public="1" expr="0x8CE9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CE9</e></m></meta>
		</COLOR_ATTACHMENT9_NV>
		<COLOR_ATTACHMENT10_NV public="1" expr="0x8CEA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEA</e></m></meta>
		</COLOR_ATTACHMENT10_NV>
		<COLOR_ATTACHMENT11_NV public="1" expr="0x8CEB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEB</e></m></meta>
		</COLOR_ATTACHMENT11_NV>
		<COLOR_ATTACHMENT12_NV public="1" expr="0x8CEC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEC</e></m></meta>
		</COLOR_ATTACHMENT12_NV>
		<COLOR_ATTACHMENT13_NV public="1" expr="0x8CED">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CED</e></m></meta>
		</COLOR_ATTACHMENT13_NV>
		<COLOR_ATTACHMENT14_NV public="1" expr="0x8CEE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEE</e></m></meta>
		</COLOR_ATTACHMENT14_NV>
		<COLOR_ATTACHMENT15_NV public="1" expr="0x8CEF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CEF</e></m></meta>
		</COLOR_ATTACHMENT15_NV>
		<new set="method" line="24">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_fence" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_fence.hx">
		<ALL_COMPLETED_NV public="1" expr="0x84F2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F2</e></m></meta>
		</ALL_COMPLETED_NV>
		<FENCE_STATUS_NV public="1" expr="0x84F3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F3</e></m></meta>
		</FENCE_STATUS_NV>
		<FENCE_CONDITION_NV public="1" expr="0x84F4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F4</e></m></meta>
		</FENCE_CONDITION_NV>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_read_buffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_read_buffer.hx">
		<READ_BUFFER_NV public="1" expr="0x0C02">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C02</e></m></meta>
		</READ_BUFFER_NV>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_read_buffer_front" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_read_buffer_front.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_read_depth" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_read_depth.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_read_depth_stencil" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_read_depth_stencil.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_read_stencil" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_read_stencil.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_texture_compression_s3tc_update" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_texture_compression_s3tc_update.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.NV_texture_npot_2D_mipmap" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/NV_texture_npot_2D_mipmap.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_EGL_image" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_EGL_image.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_EGL_image_external" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_EGL_image_external.hx">
		<TEXTURE_EXTERNAL_OES public="1" expr="0x8D65">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D65</e></m></meta>
		</TEXTURE_EXTERNAL_OES>
		<SAMPLER_EXTERNAL_OES public="1" expr="0x8D66">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D66</e></m></meta>
		</SAMPLER_EXTERNAL_OES>
		<TEXTURE_BINDING_EXTERNAL_OES public="1" expr="0x8D67">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D67</e></m></meta>
		</TEXTURE_BINDING_EXTERNAL_OES>
		<REQUIRED_TEXTURE_IMAGE_UNITS_OES public="1" expr="0x8D68">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D68</e></m></meta>
		</REQUIRED_TEXTURE_IMAGE_UNITS_OES>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_compressed_ETC1_RGB8_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_compressed_ETC1_RGB8_texture.hx">
		<ETC1_RGB8_OES public="1" expr="0x8D64">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D64</e></m></meta>
		</ETC1_RGB8_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_compressed_paletted_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_compressed_paletted_texture.hx">
		<PALETTE4_RGB8_OES public="1" expr="0x8B90">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B90</e></m></meta>
		</PALETTE4_RGB8_OES>
		<PALETTE4_RGBA8_OES public="1" expr="0x8B91">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B91</e></m></meta>
		</PALETTE4_RGBA8_OES>
		<PALETTE4_R5_G6_B5_OES public="1" expr="0x8B92">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B92</e></m></meta>
		</PALETTE4_R5_G6_B5_OES>
		<PALETTE4_RGBA4_OES public="1" expr="0x8B93">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B93</e></m></meta>
		</PALETTE4_RGBA4_OES>
		<PALETTE4_RGB5_A1_OES public="1" expr="0x8B94">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B94</e></m></meta>
		</PALETTE4_RGB5_A1_OES>
		<PALETTE8_RGB8_OES public="1" expr="0x8B95">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B95</e></m></meta>
		</PALETTE8_RGB8_OES>
		<PALETTE8_RGBA8_OES public="1" expr="0x8B96">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B96</e></m></meta>
		</PALETTE8_RGBA8_OES>
		<PALETTE8_R5_G6_B5_OES public="1" expr="0x8B97">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B97</e></m></meta>
		</PALETTE8_R5_G6_B5_OES>
		<PALETTE8_RGBA4_OES public="1" expr="0x8B98">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B98</e></m></meta>
		</PALETTE8_RGBA4_OES>
		<PALETTE8_RGB5_A1_OES public="1" expr="0x8B99">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B99</e></m></meta>
		</PALETTE8_RGB5_A1_OES>
		<new set="method" line="17">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_depth24" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_depth24.hx">
		<DEPTH_COMPONENT24_OES public="1" expr="0x81A6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A6</e></m></meta>
		</DEPTH_COMPONENT24_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_depth32" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_depth32.hx">
		<DEPTH_COMPONENT32_OES public="1" expr="0x81A7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A7</e></m></meta>
		</DEPTH_COMPONENT32_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_depth_texture" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_depth_texture.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_element_index_uint" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_element_index_uint.hx">
		<UNSIGNED_INT public="1" expr="0x1405">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1405</e></m></meta>
		</UNSIGNED_INT>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_get_program_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_get_program_binary.hx">
		<PROGRAM_BINARY_LENGTH_OES public="1" expr="0x8741">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8741</e></m></meta>
		</PROGRAM_BINARY_LENGTH_OES>
		<NUM_PROGRAM_BINARY_FORMATS_OES public="1" expr="0x87FE">
			<x path="Int"/>
			<meta><m n=":value"><e>0x87FE</e></m></meta>
		</NUM_PROGRAM_BINARY_FORMATS_OES>
		<PROGRAM_BINARY_FORMATS_OES public="1" expr="0x87FF">
			<x path="Int"/>
			<meta><m n=":value"><e>0x87FF</e></m></meta>
		</PROGRAM_BINARY_FORMATS_OES>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_mapbuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_mapbuffer.hx">
		<WRITE_ONLY_OES public="1" expr="0x88B9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88B9</e></m></meta>
		</WRITE_ONLY_OES>
		<BUFFER_ACCESS_OES public="1" expr="0x88BB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88BB</e></m></meta>
		</BUFFER_ACCESS_OES>
		<BUFFER_MAPPED_OES public="1" expr="0x88BC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88BC</e></m></meta>
		</BUFFER_MAPPED_OES>
		<BUFFER_MAP_POINTER_OES public="1" expr="0x88BD">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88BD</e></m></meta>
		</BUFFER_MAP_POINTER_OES>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_packed_depth_stencil" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_packed_depth_stencil.hx">
		<DEPTH_STENCIL_OES public="1" expr="0x84F9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84F9</e></m></meta>
		</DEPTH_STENCIL_OES>
		<UNSIGNED_INT_24_8_OES public="1" expr="0x84FA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FA</e></m></meta>
		</UNSIGNED_INT_24_8_OES>
		<DEPTH24_STENCIL8_OES public="1" expr="0x88F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88F0</e></m></meta>
		</DEPTH24_STENCIL8_OES>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_required_internalformat" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_required_internalformat.hx">
		<ALPHA8_OES public="1" expr="0x803C">
			<x path="Int"/>
			<meta><m n=":value"><e>0x803C</e></m></meta>
		</ALPHA8_OES>
		<DEPTH_COMPONENT16_OES public="1" expr="0x81A5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A5</e></m></meta>
		</DEPTH_COMPONENT16_OES>
		<DEPTH_COMPONENT24_OES public="1" expr="0x81A6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A6</e></m></meta>
		</DEPTH_COMPONENT24_OES>
		<DEPTH24_STENCIL8_OES public="1" expr="0x88F0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x88F0</e></m></meta>
		</DEPTH24_STENCIL8_OES>
		<DEPTH_COMPONENT32_OES public="1" expr="0x81A7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A7</e></m></meta>
		</DEPTH_COMPONENT32_OES>
		<LUMINANCE4_ALPHA4_OES public="1" expr="0x8043">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8043</e></m></meta>
		</LUMINANCE4_ALPHA4_OES>
		<LUMINANCE8_ALPHA8_OES public="1" expr="0x8045">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8045</e></m></meta>
		</LUMINANCE8_ALPHA8_OES>
		<LUMINANCE8_OES public="1" expr="0x8040">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8040</e></m></meta>
		</LUMINANCE8_OES>
		<RGBA4_OES public="1" expr="0x8056">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8056</e></m></meta>
		</RGBA4_OES>
		<RGB5_A1_OES public="1" expr="0x8057">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8057</e></m></meta>
		</RGB5_A1_OES>
		<RGB565_OES public="1" expr="0x8D62">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D62</e></m></meta>
		</RGB565_OES>
		<RGB8_OES public="1" expr="0x8051">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8051</e></m></meta>
		</RGB8_OES>
		<RGBA8_OES public="1" expr="0x8058">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8058</e></m></meta>
		</RGBA8_OES>
		<RGB10_EXT public="1" expr="0x8052">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8052</e></m></meta>
		</RGB10_EXT>
		<RGB10_A2_EXT public="1" expr="0x8059">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8059</e></m></meta>
		</RGB10_A2_EXT>
		<new set="method" line="22">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_rgb8_rgba8" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_rgb8_rgba8.hx">
		<RGB8_OES public="1" expr="0x8051">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8051</e></m></meta>
		</RGB8_OES>
		<RGBA8_OES public="1" expr="0x8058">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8058</e></m></meta>
		</RGBA8_OES>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_standard_derivatives" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_standard_derivatives.hx">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" expr="0x8B8B">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B8B</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_stencil1" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_stencil1.hx">
		<STENCIL_INDEX1_OES public="1" expr="0x8D46">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D46</e></m></meta>
		</STENCIL_INDEX1_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_stencil4" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_stencil4.hx">
		<STENCIL_INDEX4_OES public="1" expr="0x8D47">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D47</e></m></meta>
		</STENCIL_INDEX4_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_surfaceless_context" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_surfaceless_context.hx">
		<FRAMEBUFFER_UNDEFINED_OES public="1" expr="0x8219">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8219</e></m></meta>
		</FRAMEBUFFER_UNDEFINED_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_texture_3D" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_texture_3D.hx">
		<TEXTURE_WRAP_R_OES public="1" expr="0x8072">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8072</e></m></meta>
		</TEXTURE_WRAP_R_OES>
		<TEXTURE_3D_OES public="1" expr="0x806F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806F</e></m></meta>
		</TEXTURE_3D_OES>
		<TEXTURE_BINDING_3D_OES public="1" expr="0x806A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x806A</e></m></meta>
		</TEXTURE_BINDING_3D_OES>
		<MAX_3D_TEXTURE_SIZE_OES public="1" expr="0x8073">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8073</e></m></meta>
		</MAX_3D_TEXTURE_SIZE_OES>
		<SAMPLER_3D_OES public="1" expr="0x8B5F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B5F</e></m></meta>
		</SAMPLER_3D_OES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES public="1" expr="0x8CD4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8CD4</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES>
		<new set="method" line="13">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_texture_float" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_texture_float.hx">
		<new set="method" line="6">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_texture_float_linear" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_texture_float_linear.hx">
		<new set="method" line="6">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_texture_half_float" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_texture_half_float.hx">
		<HALF_FLOAT_OES public="1" expr="0x8D61">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D61</e></m></meta>
		</HALF_FLOAT_OES>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_texture_half_float_linear" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_texture_half_float_linear.hx">
		<new set="method" line="6">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_texture_npot" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_texture_npot.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_vertex_array_object" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_vertex_array_object.hx">
		<VERTEX_ARRAY_BINDING_OES public="1" expr="0x85B5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x85B5</e></m></meta>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method" line="12"><f a=""><d/></f></createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method" line="16"><f a="arrayObject">
	<d/>
	<x path="Void"/>
</f></deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method" line="19"><f a="arrayObject">
	<d/>
	<x path="Bool"/>
</f></isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method" line="23"><f a="arrayObject">
	<d/>
	<x path="Void"/>
</f></bindVertexArrayOES>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_vertex_half_float" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_vertex_half_float.hx">
		<HALF_FLOAT_OES public="1" expr="0x8D61">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8D61</e></m></meta>
		</HALF_FLOAT_OES>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.OES_vertex_type_10_10_10_2" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/OES_vertex_type_10_10_10_2.hx">
		<UNSIGNED_INT_10_10_10_2_OES public="1" expr="0x8DF6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF6</e></m></meta>
		</UNSIGNED_INT_10_10_10_2_OES>
		<INT_10_10_10_2_OES public="1" expr="0x8DF7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8DF7</e></m></meta>
		</INT_10_10_10_2_OES>
		<new set="method" line="9">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_alpha_test" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_alpha_test.hx">
		<ALPHA_TEST_QCOM public="1" expr="0x0BC0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BC0</e></m></meta>
		</ALPHA_TEST_QCOM>
		<ALPHA_TEST_FUNC_QCOM public="1" expr="0x0BC1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BC1</e></m></meta>
		</ALPHA_TEST_FUNC_QCOM>
		<ALPHA_TEST_REF_QCOM public="1" expr="0x0BC2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0BC2</e></m></meta>
		</ALPHA_TEST_REF_QCOM>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_binning_control" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_binning_control.hx">
		<BINNING_CONTROL_HINT_QCOM public="1" expr="0x8FB0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8FB0</e></m></meta>
		</BINNING_CONTROL_HINT_QCOM>
		<CPU_OPTIMIZED_QCOM public="1" expr="0x8FB1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8FB1</e></m></meta>
		</CPU_OPTIMIZED_QCOM>
		<GPU_OPTIMIZED_QCOM public="1" expr="0x8FB2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8FB2</e></m></meta>
		</GPU_OPTIMIZED_QCOM>
		<RENDER_DIRECT_TO_FRAMEBUFFER_QCOM public="1" expr="0x8FB3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8FB3</e></m></meta>
		</RENDER_DIRECT_TO_FRAMEBUFFER_QCOM>
		<new set="method" line="11">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_driver_control" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_driver_control.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_extended_get" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_extended_get.hx">
		<TEXTURE_WIDTH_QCOM public="1" expr="0x8BD2">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD2</e></m></meta>
		</TEXTURE_WIDTH_QCOM>
		<TEXTURE_HEIGHT_QCOM public="1" expr="0x8BD3">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD3</e></m></meta>
		</TEXTURE_HEIGHT_QCOM>
		<TEXTURE_DEPTH_QCOM public="1" expr="0x8BD4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD4</e></m></meta>
		</TEXTURE_DEPTH_QCOM>
		<TEXTURE_INTERNAL_FORMAT_QCOM public="1" expr="0x8BD5">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD5</e></m></meta>
		</TEXTURE_INTERNAL_FORMAT_QCOM>
		<TEXTURE_FORMAT_QCOM public="1" expr="0x8BD6">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD6</e></m></meta>
		</TEXTURE_FORMAT_QCOM>
		<TEXTURE_TYPE_QCOM public="1" expr="0x8BD7">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD7</e></m></meta>
		</TEXTURE_TYPE_QCOM>
		<TEXTURE_IMAGE_VALID_QCOM public="1" expr="0x8BD8">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD8</e></m></meta>
		</TEXTURE_IMAGE_VALID_QCOM>
		<TEXTURE_NUM_LEVELS_QCOM public="1" expr="0x8BD9">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BD9</e></m></meta>
		</TEXTURE_NUM_LEVELS_QCOM>
		<TEXTURE_TARGET_QCOM public="1" expr="0x8BDA">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BDA</e></m></meta>
		</TEXTURE_TARGET_QCOM>
		<TEXTURE_OBJECT_VALID_QCOM public="1" expr="0x8BDB">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BDB</e></m></meta>
		</TEXTURE_OBJECT_VALID_QCOM>
		<STATE_RESTORE public="1" expr="0x8BDC">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8BDC</e></m></meta>
		</STATE_RESTORE>
		<new set="method" line="18">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_extended_get2" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_extended_get2.hx">
		<new set="method" line="5">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_perfmon_global_mode" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_perfmon_global_mode.hx">
		<PERFMON_GLOBAL_MODE_QCOM public="1" expr="0x8FA0">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8FA0</e></m></meta>
		</PERFMON_GLOBAL_MODE_QCOM>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_tiled_rendering" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_tiled_rendering.hx">
		<COLOR_BUFFER_BIT0_QCOM public="1" expr="0x00000001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000001</e></m></meta>
		</COLOR_BUFFER_BIT0_QCOM>
		<COLOR_BUFFER_BIT1_QCOM public="1" expr="0x00000002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000002</e></m></meta>
		</COLOR_BUFFER_BIT1_QCOM>
		<COLOR_BUFFER_BIT2_QCOM public="1" expr="0x00000004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000004</e></m></meta>
		</COLOR_BUFFER_BIT2_QCOM>
		<COLOR_BUFFER_BIT3_QCOM public="1" expr="0x00000008">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000008</e></m></meta>
		</COLOR_BUFFER_BIT3_QCOM>
		<COLOR_BUFFER_BIT4_QCOM public="1" expr="0x00000010">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000010</e></m></meta>
		</COLOR_BUFFER_BIT4_QCOM>
		<COLOR_BUFFER_BIT5_QCOM public="1" expr="0x00000020">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000020</e></m></meta>
		</COLOR_BUFFER_BIT5_QCOM>
		<COLOR_BUFFER_BIT6_QCOM public="1" expr="0x00000040">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000040</e></m></meta>
		</COLOR_BUFFER_BIT6_QCOM>
		<COLOR_BUFFER_BIT7_QCOM public="1" expr="0x00000080">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000080</e></m></meta>
		</COLOR_BUFFER_BIT7_QCOM>
		<DEPTH_BUFFER_BIT0_QCOM public="1" expr="0x00000100">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000100</e></m></meta>
		</DEPTH_BUFFER_BIT0_QCOM>
		<DEPTH_BUFFER_BIT1_QCOM public="1" expr="0x00000200">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000200</e></m></meta>
		</DEPTH_BUFFER_BIT1_QCOM>
		<DEPTH_BUFFER_BIT2_QCOM public="1" expr="0x00000400">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000400</e></m></meta>
		</DEPTH_BUFFER_BIT2_QCOM>
		<DEPTH_BUFFER_BIT3_QCOM public="1" expr="0x00000800">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00000800</e></m></meta>
		</DEPTH_BUFFER_BIT3_QCOM>
		<DEPTH_BUFFER_BIT4_QCOM public="1" expr="0x00001000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00001000</e></m></meta>
		</DEPTH_BUFFER_BIT4_QCOM>
		<DEPTH_BUFFER_BIT5_QCOM public="1" expr="0x00002000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00002000</e></m></meta>
		</DEPTH_BUFFER_BIT5_QCOM>
		<DEPTH_BUFFER_BIT6_QCOM public="1" expr="0x00004000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00004000</e></m></meta>
		</DEPTH_BUFFER_BIT6_QCOM>
		<DEPTH_BUFFER_BIT7_QCOM public="1" expr="0x00008000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00008000</e></m></meta>
		</DEPTH_BUFFER_BIT7_QCOM>
		<STENCIL_BUFFER_BIT0_QCOM public="1" expr="0x00010000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00010000</e></m></meta>
		</STENCIL_BUFFER_BIT0_QCOM>
		<STENCIL_BUFFER_BIT1_QCOM public="1" expr="0x00020000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00020000</e></m></meta>
		</STENCIL_BUFFER_BIT1_QCOM>
		<STENCIL_BUFFER_BIT2_QCOM public="1" expr="0x00040000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00040000</e></m></meta>
		</STENCIL_BUFFER_BIT2_QCOM>
		<STENCIL_BUFFER_BIT3_QCOM public="1" expr="0x00080000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00080000</e></m></meta>
		</STENCIL_BUFFER_BIT3_QCOM>
		<STENCIL_BUFFER_BIT4_QCOM public="1" expr="0x00100000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00100000</e></m></meta>
		</STENCIL_BUFFER_BIT4_QCOM>
		<STENCIL_BUFFER_BIT5_QCOM public="1" expr="0x00200000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00200000</e></m></meta>
		</STENCIL_BUFFER_BIT5_QCOM>
		<STENCIL_BUFFER_BIT6_QCOM public="1" expr="0x00400000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00400000</e></m></meta>
		</STENCIL_BUFFER_BIT6_QCOM>
		<STENCIL_BUFFER_BIT7_QCOM public="1" expr="0x00800000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00800000</e></m></meta>
		</STENCIL_BUFFER_BIT7_QCOM>
		<MULTISAMPLE_BUFFER_BIT0_QCOM public="1" expr="0x01000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x01000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT0_QCOM>
		<MULTISAMPLE_BUFFER_BIT1_QCOM public="1" expr="0x02000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x02000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT1_QCOM>
		<MULTISAMPLE_BUFFER_BIT2_QCOM public="1" expr="0x04000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x04000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT2_QCOM>
		<MULTISAMPLE_BUFFER_BIT3_QCOM public="1" expr="0x08000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x08000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT3_QCOM>
		<MULTISAMPLE_BUFFER_BIT4_QCOM public="1" expr="0x10000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x10000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT4_QCOM>
		<MULTISAMPLE_BUFFER_BIT5_QCOM public="1" expr="0x20000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT5_QCOM>
		<MULTISAMPLE_BUFFER_BIT6_QCOM public="1" expr="0x40000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x40000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT6_QCOM>
		<MULTISAMPLE_BUFFER_BIT7_QCOM public="1" expr="0x80000000">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80000000</e></m></meta>
		</MULTISAMPLE_BUFFER_BIT7_QCOM>
		<new set="method" line="39">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.QCOM_writeonly_rendering" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/QCOM_writeonly_rendering.hx">
		<WRITEONLY_RENDERING_QCOM public="1" expr="0x8823">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8823</e></m></meta>
		</WRITEONLY_RENDERING_QCOM>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="lime.graphics.opengl.ext.VIV_shader_binary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/graphics/opengl/ext/VIV_shader_binary.hx">
		<SHADER_BINARY_VIV public="1" expr="0x8FC4">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8FC4</e></m></meta>
		</SHADER_BINARY_VIV>
		<new set="method" line="8">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<abstract path="lime.math.ARGB" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/ARGB.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
			<icast field="__fromBGRA"><x path="lime.math.BGRA"/></icast>
			<icast field="__fromRGBA"><x path="lime.math.RGBA"/></icast>
		</from>
		<this><x path="UInt"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<haxe_doc>A utility for storing, accessing and converting colors in an ARGB
	(alpha, red, green, blue) color format.

	```haxe
	var color:ARGB = 0xFF883300;
	trace (color.a); // 0xFF
	trace (color.r); // 0x88
	trace (color.g); // 0x33
	trace (color.b); // 0x00

	var convert:BGRA = color; // 0x003388FF
	```</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="lime.math._ARGB.ARGB_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/ARGB.hx" private="1" module="lime.math.ARGB" final="1">
	<a16 static="1"><x path="Int"/></a16>
	<unmult static="1"><x path="Float"/></unmult>
	<a public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the alpha component of the color</haxe_doc>
	</a>
	<b public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the blue component of the color</haxe_doc>
	</b>
	<g public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the green component of the color</haxe_doc>
	</g>
	<r public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the red component of the color</haxe_doc>
	</r>
	<_new public="1" get="inline" set="null" line="51" static="1">
		<f a="?argb" v="0">
			<x path="Int"/>
			<x path="lime.math.ARGB"/>
		</f>
		<meta>
			<m n=":value"><e>{ argb : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new ARGB instance
		@param	argb	(Optional) An ARGB color value</haxe_doc>
	</_new>
	<create public="1" get="inline" set="null" line="65" static="1">
		<f a="a:r:g:b">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.math.ARGB"/>
		</f>
		<haxe_doc>Creates a new ARGB instance from component values
		@param	a	An alpha component value
		@param	r	A red component value
		@param	g	A green component value
		@param	b	A blue component value
		@return	A new ARGB instance</haxe_doc>
	</create>
	<multiplyAlpha public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Multiplies the red, green and blue components by the current alpha component</haxe_doc>
	</multiplyAlpha>
	<readUInt8 public="1" get="inline" set="null" line="95" static="1">
		<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
			<x path="UInt"/>
			<x path="lime.utils.UInt8Array"/>
			<x path="Int"/>
			<x path="lime.graphics.PixelFormat"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
		<haxe_doc>Reads a value from a `UInt8Array` into the current `ARGB` color
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to read
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
	</readUInt8>
	<set public="1" get="inline" set="null" line="122" static="1">
		<f a="this:a:r:g:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the current `ARGB` color to new component values
		@param	a	The alpha component value to set
		@param	r	The red component value to set
		@param	g	The green component value to set
		@param	b	The blue component vlaue to set</haxe_doc>
	</set>
	<unmultiplyAlpha public="1" get="inline" set="null" line="130" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Divides the current red, green and blue components by the alpha component</haxe_doc>
	</unmultiplyAlpha>
	<writeUInt8 public="1" get="inline" set="null" line="146" static="1">
		<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
			<x path="UInt"/>
			<x path="lime.utils.UInt8Array"/>
			<x path="Int"/>
			<x path="lime.graphics.PixelFormat"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
		<haxe_doc>Writes the current `ARGB` color into a `UInt8Array`
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to write
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
	</writeUInt8>
	<__fromBGRA get="inline" set="null" line="175" static="1">
		<f a="bgra">
			<x path="lime.math.BGRA"/>
			<x path="lime.math.ARGB"/>
		</f>
		<meta><m n=":from"/></meta>
	</__fromBGRA>
	<__fromRGBA get="inline" set="null" line="180" static="1">
		<f a="rgba">
			<x path="lime.math.RGBA"/>
			<x path="lime.math.ARGB"/>
		</f>
		<meta><m n=":from"/></meta>
	</__fromRGBA>
	<get_a get="inline" set="null" line="186" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_a>
	<set_a get="inline" set="null" line="191" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_a>
	<get_b get="inline" set="null" line="197" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_b>
	<set_b get="inline" set="null" line="202" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_b>
	<get_g get="inline" set="null" line="208" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_g>
	<set_g get="inline" set="null" line="213" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_g>
	<get_r get="inline" set="null" line="219" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_r>
	<set_r get="inline" set="null" line="224" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_r>
</class></impl>
	</abstract>
	<class path="lime.math._ARGB.ARGB_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/ARGB.hx" private="1" module="lime.math.ARGB" final="1">
		<a16 static="1"><x path="Int"/></a16>
		<unmult static="1"><x path="Float"/></unmult>
		<a public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the alpha component of the color</haxe_doc>
		</a>
		<b public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the blue component of the color</haxe_doc>
		</b>
		<g public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the green component of the color</haxe_doc>
		</g>
		<r public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the red component of the color</haxe_doc>
		</r>
		<_new public="1" get="inline" set="null" line="51" static="1">
			<f a="?argb" v="0">
				<x path="Int"/>
				<x path="lime.math.ARGB"/>
			</f>
			<meta>
				<m n=":value"><e>{ argb : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new ARGB instance
		@param	argb	(Optional) An ARGB color value</haxe_doc>
		</_new>
		<create public="1" get="inline" set="null" line="65" static="1">
			<f a="a:r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.math.ARGB"/>
			</f>
			<haxe_doc>Creates a new ARGB instance from component values
		@param	a	An alpha component value
		@param	r	A red component value
		@param	g	A green component value
		@param	b	A blue component value
		@return	A new ARGB instance</haxe_doc>
		</create>
		<multiplyAlpha public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the red, green and blue components by the current alpha component</haxe_doc>
		</multiplyAlpha>
		<readUInt8 public="1" get="inline" set="null" line="95" static="1">
			<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
				<x path="UInt"/>
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
			<haxe_doc>Reads a value from a `UInt8Array` into the current `ARGB` color
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to read
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
		</readUInt8>
		<set public="1" get="inline" set="null" line="122" static="1">
			<f a="this:a:r:g:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the current `ARGB` color to new component values
		@param	a	The alpha component value to set
		@param	r	The red component value to set
		@param	g	The green component value to set
		@param	b	The blue component vlaue to set</haxe_doc>
		</set>
		<unmultiplyAlpha public="1" get="inline" set="null" line="130" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Divides the current red, green and blue components by the alpha component</haxe_doc>
		</unmultiplyAlpha>
		<writeUInt8 public="1" get="inline" set="null" line="146" static="1">
			<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
				<x path="UInt"/>
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
			<haxe_doc>Writes the current `ARGB` color into a `UInt8Array`
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to write
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
		</writeUInt8>
		<__fromBGRA get="inline" set="null" line="175" static="1">
			<f a="bgra">
				<x path="lime.math.BGRA"/>
				<x path="lime.math.ARGB"/>
			</f>
			<meta><m n=":from"/></meta>
		</__fromBGRA>
		<__fromRGBA get="inline" set="null" line="180" static="1">
			<f a="rgba">
				<x path="lime.math.RGBA"/>
				<x path="lime.math.ARGB"/>
			</f>
			<meta><m n=":from"/></meta>
		</__fromRGBA>
		<get_a get="inline" set="null" line="186" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_a>
		<set_a get="inline" set="null" line="191" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_a>
		<get_b get="inline" set="null" line="197" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_b>
		<set_b get="inline" set="null" line="202" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_b>
		<get_g get="inline" set="null" line="208" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_g>
		<set_g get="inline" set="null" line="213" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_g>
		<get_r get="inline" set="null" line="219" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_r>
		<set_r get="inline" set="null" line="224" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_r>
	</class>
	<abstract path="lime.math.BGRA" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/BGRA.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
			<icast field="__fromARGB"><x path="lime.math.ARGB"/></icast>
			<icast field="__fromRGBA"><x path="lime.math.RGBA"/></icast>
		</from>
		<this><x path="UInt"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<haxe_doc>A utility for storing, accessing and converting colors in a BGRA
	(blue, green, red, alpha) color format.

	```haxe
	var color:BGRA = 0x003388FF;
	trace (color.b); // 0x00
	trace (color.g); // 0x33
	trace (color.r); // 0x88
	trace (color.a); // 0xFF

	var convert:ARGB = color; // 0xFF883300
	```</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="lime.math._BGRA.BGRA_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/BGRA.hx" private="1" module="lime.math.BGRA" final="1">
	<a16 static="1"><x path="Int"/></a16>
	<unmult static="1"><x path="Float"/></unmult>
	<a public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the alpha component of the color</haxe_doc>
	</a>
	<b public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the blue component of the color</haxe_doc>
	</b>
	<g public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the green component of the color</haxe_doc>
	</g>
	<r public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the red component of the color</haxe_doc>
	</r>
	<_new public="1" get="inline" set="null" line="51" static="1">
		<f a="?bgra" v="0">
			<x path="Int"/>
			<x path="lime.math.BGRA"/>
		</f>
		<meta>
			<m n=":value"><e>{ bgra : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new BGRA instance
		@param	bgra	(Optional) A BGRA color value</haxe_doc>
	</_new>
	<create public="1" get="inline" set="null" line="65" static="1">
		<f a="b:g:r:a">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.math.BGRA"/>
		</f>
		<haxe_doc>Creates a new BGRA instance from component values
		@param	b	A blue component value
		@param	g	A green component value
		@param	r	A red component value
		@param	a	An alpha component value
		@return	A new BGRA instance</haxe_doc>
	</create>
	<multiplyAlpha public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Multiplies the red, green and blue components by the current alpha component</haxe_doc>
	</multiplyAlpha>
	<readUInt8 public="1" get="inline" set="null" line="95" static="1">
		<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
			<x path="UInt"/>
			<x path="lime.utils.UInt8Array"/>
			<x path="Int"/>
			<x path="lime.graphics.PixelFormat"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
		<haxe_doc>Reads a value from a `UInt8Array` into the current `BGRA` color
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to read
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
	</readUInt8>
	<set public="1" get="inline" set="null" line="122" static="1">
		<f a="this:b:g:r:a">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the current `BGRA` color to new component values
		@param	b	The blue component vlaue to set
		@param	g	The green component value to set
		@param	r	The red component value to set
		@param	a	The alpha component value to set</haxe_doc>
	</set>
	<unmultiplyAlpha public="1" get="inline" set="null" line="130" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Divides the current red, green and blue components by the alpha component</haxe_doc>
	</unmultiplyAlpha>
	<writeUInt8 public="1" get="inline" set="null" line="146" static="1">
		<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
			<x path="UInt"/>
			<x path="lime.utils.UInt8Array"/>
			<x path="Int"/>
			<x path="lime.graphics.PixelFormat"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
		<haxe_doc>Writes the current `BGRA` color into a `UInt8Array`
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to write
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
	</writeUInt8>
	<__fromARGB get="inline" set="null" line="175" static="1">
		<f a="argb">
			<x path="lime.math.ARGB"/>
			<x path="lime.math.BGRA"/>
		</f>
		<meta><m n=":from"/></meta>
	</__fromARGB>
	<__fromRGBA get="inline" set="null" line="180" static="1">
		<f a="rgba">
			<x path="lime.math.RGBA"/>
			<x path="lime.math.BGRA"/>
		</f>
		<meta><m n=":from"/></meta>
	</__fromRGBA>
	<get_a get="inline" set="null" line="186" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_a>
	<set_a get="inline" set="null" line="191" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_a>
	<get_b get="inline" set="null" line="197" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_b>
	<set_b get="inline" set="null" line="202" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_b>
	<get_g get="inline" set="null" line="208" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_g>
	<set_g get="inline" set="null" line="213" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_g>
	<get_r get="inline" set="null" line="219" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_r>
	<set_r get="inline" set="null" line="224" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_r>
</class></impl>
	</abstract>
	<class path="lime.math._BGRA.BGRA_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/BGRA.hx" private="1" module="lime.math.BGRA" final="1">
		<a16 static="1"><x path="Int"/></a16>
		<unmult static="1"><x path="Float"/></unmult>
		<a public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the alpha component of the color</haxe_doc>
		</a>
		<b public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the blue component of the color</haxe_doc>
		</b>
		<g public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the green component of the color</haxe_doc>
		</g>
		<r public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the red component of the color</haxe_doc>
		</r>
		<_new public="1" get="inline" set="null" line="51" static="1">
			<f a="?bgra" v="0">
				<x path="Int"/>
				<x path="lime.math.BGRA"/>
			</f>
			<meta>
				<m n=":value"><e>{ bgra : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new BGRA instance
		@param	bgra	(Optional) A BGRA color value</haxe_doc>
		</_new>
		<create public="1" get="inline" set="null" line="65" static="1">
			<f a="b:g:r:a">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.math.BGRA"/>
			</f>
			<haxe_doc>Creates a new BGRA instance from component values
		@param	b	A blue component value
		@param	g	A green component value
		@param	r	A red component value
		@param	a	An alpha component value
		@return	A new BGRA instance</haxe_doc>
		</create>
		<multiplyAlpha public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the red, green and blue components by the current alpha component</haxe_doc>
		</multiplyAlpha>
		<readUInt8 public="1" get="inline" set="null" line="95" static="1">
			<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
				<x path="UInt"/>
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
			<haxe_doc>Reads a value from a `UInt8Array` into the current `BGRA` color
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to read
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
		</readUInt8>
		<set public="1" get="inline" set="null" line="122" static="1">
			<f a="this:b:g:r:a">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the current `BGRA` color to new component values
		@param	b	The blue component vlaue to set
		@param	g	The green component value to set
		@param	r	The red component value to set
		@param	a	The alpha component value to set</haxe_doc>
		</set>
		<unmultiplyAlpha public="1" get="inline" set="null" line="130" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Divides the current red, green and blue components by the alpha component</haxe_doc>
		</unmultiplyAlpha>
		<writeUInt8 public="1" get="inline" set="null" line="146" static="1">
			<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
				<x path="UInt"/>
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
			<haxe_doc>Writes the current `BGRA` color into a `UInt8Array`
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to write
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
		</writeUInt8>
		<__fromARGB get="inline" set="null" line="175" static="1">
			<f a="argb">
				<x path="lime.math.ARGB"/>
				<x path="lime.math.BGRA"/>
			</f>
			<meta><m n=":from"/></meta>
		</__fromARGB>
		<__fromRGBA get="inline" set="null" line="180" static="1">
			<f a="rgba">
				<x path="lime.math.RGBA"/>
				<x path="lime.math.BGRA"/>
			</f>
			<meta><m n=":from"/></meta>
		</__fromRGBA>
		<get_a get="inline" set="null" line="186" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_a>
		<set_a get="inline" set="null" line="191" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_a>
		<get_b get="inline" set="null" line="197" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_b>
		<set_b get="inline" set="null" line="202" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_b>
		<get_g get="inline" set="null" line="208" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_g>
		<set_g get="inline" set="null" line="213" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_g>
		<get_r get="inline" set="null" line="219" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_r>
		<set_r get="inline" set="null" line="224" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_r>
	</class>
	<abstract path="lime.math.ColorMatrix" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/ColorMatrix.hx">
		<from><icast><x path="lime.utils.Float32Array"/></icast></from>
		<this><x path="lime.utils.Float32Array"/></this>
		<to><icast><x path="lime.utils.Float32Array"/></icast></to>
		<haxe_doc>`ColorMatrix` is a 4x5 matrix containing color multiplication
	and offset values for tinting and other kinds of color
	manipulation. In addition to using the multiplier, offset and
	`color` properties, it can be edited directly as a `Float32Array`</haxe_doc>
		<impl><class path="lime.math._ColorMatrix.ColorMatrix_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/ColorMatrix.hx" private="1" module="lime.math.ColorMatrix" final="1">
	<__alphaTable static="1"><x path="lime.utils.UInt8Array"/></__alphaTable>
	<__blueTable static="1"><x path="lime.utils.UInt8Array"/></__blueTable>
	<__greenTable static="1"><x path="lime.utils.UInt8Array"/></__greenTable>
	<__identity expr="[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]" line="20" static="1">
		<c path="Array"><x path="Float"/></c>
		<meta><m n=":value"><e>[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]</e></m></meta>
	</__identity>
	<__redTable static="1"><x path="lime.utils.UInt8Array"/></__redTable>
	<alphaMultiplier public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current alpha multiplication value (default is 1.0)</haxe_doc>
	</alphaMultiplier>
	<alphaOffset public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current alpha offset value (default is 0)</haxe_doc>
	</alphaOffset>
	<blueMultiplier public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current blue multiplication value (default is 1.0)</haxe_doc>
	</blueMultiplier>
	<blueOffset public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current blue offset value (default is 0)</haxe_doc>
	</blueOffset>
	<color public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Gets or sets a color offset for tinting.

		This will change the red, green and blue multipliers
		to zero, and affect the red, green and blue offset
		values.</haxe_doc>
	</color>
	<greenMultiplier public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current green multiplication value (default is 1.0)</haxe_doc>
	</greenMultiplier>
	<greenOffset public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current green offset value (default is 0)</haxe_doc>
	</greenOffset>
	<redMultiplier public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current red multiplication value (default is 1.0)</haxe_doc>
	</redMultiplier>
	<redOffset public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The current red offset value (default is 0)</haxe_doc>
	</redOffset>
	<_new public="1" set="method" line="78" static="1">
		<f a="?data" v="null">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.math.ColorMatrix"/>
		</f>
		<meta>
			<m n=":value"><e>{ data : null }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new `ColorMatrix` instance
		@param	data	(Optional) Initial `Float32Array` data to use</haxe_doc>
	</_new>
	<clone public="1" set="method" line="95" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.math.ColorMatrix"/>
		</f>
		<haxe_doc>Creates a duplicate of the current `ColorMatrix` instance
		@return	A new `ColorMatrix` instance</haxe_doc>
	</clone>
	<concat public="1" set="method" line="104" static="1">
		<f a="this:second">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.math.ColorMatrix"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Adds the color multipliers from a second `ColorMatrix` to the current one
		@param	second	The `ColorMatrix` to `concat` to the current one</haxe_doc>
	</concat>
	<copyFrom public="1" set="method" line="116" static="1">
		<f a="this:other">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.math.ColorMatrix"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the current `ColorMatrix` values to the same as another one
		@param	other	The `ColorMatrix` to copy from</haxe_doc>
	</copyFrom>
	<identity public="1" set="method" line="124" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Resets to default values</haxe_doc>
	</identity>
	<getAlphaTable public="1" set="method" line="168" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		alpha values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `alphaMultipler` and `alphaOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.alphaOffset = 12;

		var alphaTable = colorMatrix.getAlphaTable ();
		trace (alphaTable[0]); // 12
		trace (alphaTable[1]); // 13
		```</haxe_doc>
	</getAlphaTable>
	<getBlueTable public="1" set="method" line="209" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		blue values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `blueMultiplier` and `blueOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.blueOffset = 16;

		var blueTable = colorMatrix.getBlueTable ();
		trace (blueTable[0]); // 16
		trace (blueTable[1]); // 17
		```</haxe_doc>
	</getBlueTable>
	<getGreenTable public="1" set="method" line="249" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		green values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `greenMultiplier` and `greenOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.greenOffset = 16;

		var greenTable = colorMatrix.getGreenTable ();
		trace (greenTable[0]); // 16
		trace (greenTable[1]); // 17
		```</haxe_doc>
	</getGreenTable>
	<getRedTable public="1" set="method" line="289" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		red values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `redMultiplier` and `redOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.redOffset = 16;

		var redTable = colorMatrix.getRedTable ();
		trace (redTable[0]); // 16
		trace (redTable[1]); // 17
		```</haxe_doc>
	</getRedTable>
	<__toFlashColorTransform set="method" line="309" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<d/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</__toFlashColorTransform>
	<get_alphaMultiplier get="inline" set="null" line="319" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_alphaMultiplier>
	<set_alphaMultiplier get="inline" set="null" line="324" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_alphaMultiplier>
	<get_alphaOffset get="inline" set="null" line="329" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_alphaOffset>
	<set_alphaOffset get="inline" set="null" line="334" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_alphaOffset>
	<get_blueMultiplier get="inline" set="null" line="339" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_blueMultiplier>
	<set_blueMultiplier get="inline" set="null" line="344" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_blueMultiplier>
	<get_blueOffset get="inline" set="null" line="349" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_blueOffset>
	<set_blueOffset get="inline" set="null" line="354" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_blueOffset>
	<get_color set="method" line="359" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_color>
	<set_color set="method" line="364" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_color>
	<get_greenMultiplier get="inline" set="null" line="377" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_greenMultiplier>
	<set_greenMultiplier get="inline" set="null" line="382" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_greenMultiplier>
	<get_greenOffset get="inline" set="null" line="387" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_greenOffset>
	<set_greenOffset get="inline" set="null" line="392" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_greenOffset>
	<get_redMultiplier get="inline" set="null" line="397" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_redMultiplier>
	<set_redMultiplier get="inline" set="null" line="402" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_redMultiplier>
	<get_redOffset get="inline" set="null" line="407" static="1">
		<f a="this">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_redOffset>
	<set_redOffset get="inline" set="null" line="412" static="1">
		<f a="this:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_redOffset>
	<get public="1" set="method" line="417" static="1">
		<f a="this:index">
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" set="method" line="422" static="1">
		<f a="this:index:value">
			<x path="lime.utils.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="lime.math._ColorMatrix.ColorMatrix_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/ColorMatrix.hx" private="1" module="lime.math.ColorMatrix" final="1">
		<__alphaTable static="1"><x path="lime.utils.UInt8Array"/></__alphaTable>
		<__blueTable static="1"><x path="lime.utils.UInt8Array"/></__blueTable>
		<__greenTable static="1"><x path="lime.utils.UInt8Array"/></__greenTable>
		<__identity expr="[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]" line="20" static="1">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]</e></m></meta>
		</__identity>
		<__redTable static="1"><x path="lime.utils.UInt8Array"/></__redTable>
		<alphaMultiplier public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current alpha multiplication value (default is 1.0)</haxe_doc>
		</alphaMultiplier>
		<alphaOffset public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current alpha offset value (default is 0)</haxe_doc>
		</alphaOffset>
		<blueMultiplier public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current blue multiplication value (default is 1.0)</haxe_doc>
		</blueMultiplier>
		<blueOffset public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current blue offset value (default is 0)</haxe_doc>
		</blueOffset>
		<color public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Gets or sets a color offset for tinting.

		This will change the red, green and blue multipliers
		to zero, and affect the red, green and blue offset
		values.</haxe_doc>
		</color>
		<greenMultiplier public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current green multiplication value (default is 1.0)</haxe_doc>
		</greenMultiplier>
		<greenOffset public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current green offset value (default is 0)</haxe_doc>
		</greenOffset>
		<redMultiplier public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current red multiplication value (default is 1.0)</haxe_doc>
		</redMultiplier>
		<redOffset public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The current red offset value (default is 0)</haxe_doc>
		</redOffset>
		<_new public="1" set="method" line="78" static="1">
			<f a="?data" v="null">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.math.ColorMatrix"/>
			</f>
			<meta>
				<m n=":value"><e>{ data : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new `ColorMatrix` instance
		@param	data	(Optional) Initial `Float32Array` data to use</haxe_doc>
		</_new>
		<clone public="1" set="method" line="95" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.math.ColorMatrix"/>
			</f>
			<haxe_doc>Creates a duplicate of the current `ColorMatrix` instance
		@return	A new `ColorMatrix` instance</haxe_doc>
		</clone>
		<concat public="1" set="method" line="104" static="1">
			<f a="this:second">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.math.ColorMatrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the color multipliers from a second `ColorMatrix` to the current one
		@param	second	The `ColorMatrix` to `concat` to the current one</haxe_doc>
		</concat>
		<copyFrom public="1" set="method" line="116" static="1">
			<f a="this:other">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.math.ColorMatrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the current `ColorMatrix` values to the same as another one
		@param	other	The `ColorMatrix` to copy from</haxe_doc>
		</copyFrom>
		<identity public="1" set="method" line="124" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resets to default values</haxe_doc>
		</identity>
		<getAlphaTable public="1" set="method" line="168" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		alpha values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `alphaMultipler` and `alphaOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.alphaOffset = 12;

		var alphaTable = colorMatrix.getAlphaTable ();
		trace (alphaTable[0]); // 12
		trace (alphaTable[1]); // 13
		```</haxe_doc>
		</getAlphaTable>
		<getBlueTable public="1" set="method" line="209" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		blue values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `blueMultiplier` and `blueOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.blueOffset = 16;

		var blueTable = colorMatrix.getBlueTable ();
		trace (blueTable[0]); // 16
		trace (blueTable[1]); // 17
		```</haxe_doc>
		</getBlueTable>
		<getGreenTable public="1" set="method" line="249" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		green values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `greenMultiplier` and `greenOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.greenOffset = 16;

		var greenTable = colorMatrix.getGreenTable ();
		trace (greenTable[0]); // 16
		trace (greenTable[1]); // 17
		```</haxe_doc>
		</getGreenTable>
		<getRedTable public="1" set="method" line="289" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<haxe_doc>Returns a reference to a `UInt8Array` table for transforming
		red values using the current matrix.

		The table is 256 values in length, and includes values based
		on the `redMultiplier` and `redOffset` values of the matrix.

		The values are constrained within 0 and 255.

		For example:

		```haxe
		var colorMatrix = new ColorMatrix ();
		colorMatrix.redOffset = 16;

		var redTable = colorMatrix.getRedTable ();
		trace (redTable[0]); // 16
		trace (redTable[1]); // 17
		```</haxe_doc>
		</getRedTable>
		<__toFlashColorTransform set="method" line="309" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__toFlashColorTransform>
		<get_alphaMultiplier get="inline" set="null" line="319" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_alphaMultiplier>
		<set_alphaMultiplier get="inline" set="null" line="324" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_alphaMultiplier>
		<get_alphaOffset get="inline" set="null" line="329" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_alphaOffset>
		<set_alphaOffset get="inline" set="null" line="334" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_alphaOffset>
		<get_blueMultiplier get="inline" set="null" line="339" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_blueMultiplier>
		<set_blueMultiplier get="inline" set="null" line="344" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_blueMultiplier>
		<get_blueOffset get="inline" set="null" line="349" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_blueOffset>
		<set_blueOffset get="inline" set="null" line="354" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_blueOffset>
		<get_color set="method" line="359" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_color>
		<set_color set="method" line="364" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_color>
		<get_greenMultiplier get="inline" set="null" line="377" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_greenMultiplier>
		<set_greenMultiplier get="inline" set="null" line="382" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_greenMultiplier>
		<get_greenOffset get="inline" set="null" line="387" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_greenOffset>
		<set_greenOffset get="inline" set="null" line="392" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_greenOffset>
		<get_redMultiplier get="inline" set="null" line="397" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_redMultiplier>
		<set_redMultiplier get="inline" set="null" line="402" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_redMultiplier>
		<get_redOffset get="inline" set="null" line="407" static="1">
			<f a="this">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_redOffset>
		<set_redOffset get="inline" set="null" line="412" static="1">
			<f a="this:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_redOffset>
		<get public="1" set="method" line="417" static="1">
			<f a="this:index">
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" set="method" line="422" static="1">
			<f a="this:index:value">
				<x path="lime.utils.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.math.Matrix3" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/Matrix3.hx">
		<__identity expr="new Matrix3()" line="56" static="1">
			<c path="lime.math.Matrix3"/>
			<meta><m n=":value"><e>new Matrix3()</e></m></meta>
		</__identity>
		<a public="1">
			<x path="Float"/>
			<haxe_doc>The matrix a component, used in scaling and skewing (default is 1)</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>The matrix b component, used in rotation and skewing (default is 0)</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>The matrix c component, used in rotation and skewing (default is 0)</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>The matrix d component, used in scaling and skewing (default is 1)</haxe_doc>
		</d>
		<tx public="1">
			<x path="Float"/>
			<haxe_doc>The matrix tx component, used in translation (default is 0)</haxe_doc>
		</tx>
		<ty public="1">
			<x path="Float"/>
			<haxe_doc>The matrix ty component, used in translation (default is 0)</haxe_doc>
		</ty>
		<clone public="1" get="inline" set="null" line="82">
			<f a=""><c path="lime.math.Matrix3"/></f>
			<haxe_doc>Creates a duplicate of the current `Matrix3`
		@return	A duplicate `Matrix3` instance</haxe_doc>
		</clone>
		<concat public="1" set="method" line="93">
			<f a="m">
				<c path="lime.math.Matrix3"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Concatenates the values of a second matrix to the current
		`Matrix3`, combining the effects of both. This is the same
		as matrix multiplication. The second matrix is not modified.
		@param	m	A second `Matrix3` to concatenate to the current instance</haxe_doc>
		</concat>
		<copyColumnFrom public="1" set="method" line="115">
			<f a="column:vector4">
				<x path="Int"/>
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the `x` and `y` components from a `Vector4` instance
		to the `a`/`c`, `b`/`d` or the `tx`/`ty` column of the current
		matrix
		@param	column	The column to copy into (0, 1 or 2)
		@param	vector4	The `Vector4` instance to copy from</haxe_doc>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method" line="144">
			<f a="column:vector4">
				<x path="Int"/>
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a column of the current matrix into a `Vector4`
		instance. The `w` value will not be modified.
		@param	column	The column to copy from (0, 1 or 2)
		@param	vector4	The `Vector4` instance to copy to</haxe_doc>
		</copyColumnTo>
		<copyFrom public="1" set="method" line="175">
			<f a="sourceMatrix3">
				<c path="lime.math.Matrix3"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the values of another `Matrix3` and
		applies it to the current instance
		@param	sourceMatrix3	The `Matrix3` to copy from</haxe_doc>
		</copyFrom>
		<copyRowFrom public="1" set="method" line="191">
			<f a="row:vector4">
				<x path="Int"/>
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the values of a `Vector4` instance into a row
		of the current matrix
		@param	row	The row to copy into (0 or 1)
		@param	vector4	The `Vector4` instance to copy from</haxe_doc>
		</copyRowFrom>
		<copyRowTo public="1" set="method" line="217">
			<f a="row:vector4">
				<x path="Int"/>
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a row of the current matrix into a `Vector4`
		instance. The `w` value will not be modified.
		@param	row	The row to copy into (0, 1 or 2)
		@param	vector4	The `Vector4` instance to copy from</haxe_doc>
		</copyRowTo>
		<createBox public="1" set="method" line="252">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
			<haxe_doc>Applies a two-dimensional transformation to the current matrix.

		This is the same as calling `identity()`, `rotate()`, `scale()`
		then `translate()` with these values.
		@param	scaleX	An x scale transformation value
		@param	scaleY	A y scale transformation value
		@param	rotation (Optional) A rotation value (default is 0)
		@param	tx	(Optional) A translate x value (default is 0)
		@param	ty	(Optional) A translate y value (default is 0)</haxe_doc>
		</createBox>
		<createGradientBox public="1" set="method" line="285">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
			<haxe_doc>Creates a matrix to use for a linear gradient fill
		@param	width	The width of the gradient fill
		@param	height	The height of the gradient fill
		@param	rotation	(Optional) A rotation for the gradient fill (default is 0)
		@param	tx	(Optional) An x offset for the gradient fill (default is 0)
		@param	ty	(Optional) A y offset for the gradient fill (default is 0)
		@return	A new `Matrix` instance</haxe_doc>
		</createGradientBox>
		<equals public="1" set="method" line="315">
			<f a="matrix3">
				<c path="lime.math.Matrix3"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if two matrices have the same values
		@return	Whether both matrices are equal</haxe_doc>
		</equals>
		<deltaTransformVector public="1" set="method" line="326">
			<f a="Vector2:?result" v=":null">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Transforms a `Vector2` instance by the current matrix,
		without considering the `tx` and `ty` values of the matrix
		@param	result	(Optional) An existing `Vector2` instance to fill with the result
		@return	A new `Vector2` instance representing the transformed values</haxe_doc>
		</deltaTransformVector>
		<identity public="1" set="method" line="337">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the matrix to default identity values</haxe_doc>
		</identity>
		<invert public="1" set="method" line="351">
			<f a=""><c path="lime.math.Matrix3"/></f>
			<haxe_doc>Inverts the values of the current matrix
		@return	The current matrix instance</haxe_doc>
		</invert>
		<rotate public="1" set="method" line="388">
			<f a="theta">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies rotation to the current matrix
		@param	theta	A rotation value in degrees</haxe_doc>
		</rotate>
		<scale public="1" set="method" line="425">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scales the current matrix
		@param	sx	The x scale to apply
		@param	sy	The y scale to apply</haxe_doc>
		</scale>
		<setRotation get="inline" set="null" line="444">
			<f a="theta:?scale" v=":1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ scale : 1 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</setRotation>
		<setTo public="1" get="inline" set="null" line="461">
			<f a="a:b:c:d:tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the values of the current matrix
		@param	a	The new matrix a value
		@param	b	The new matrix b value
		@param	c	The new matrix c value
		@param	d	The new matrix d value
		@param	tx	The new matrix tx value
		@param	ty	The new matrix ty value</haxe_doc>
		</setTo>
		<to3DString public="1" get="inline" set="null" line="471">
			<f a="?roundPixels" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":value"><e>{ roundPixels : false }</e></m>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</to3DString>
		<toString public="1" get="inline" set="null" line="505">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<transformRect public="1" set="method" line="518">
			<f a="rect:?result" v=":null">
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Transforms a `Rectangle` instance by the current matrix
		and returns `Rectangle` with the bounds of the transformed
		rectangle.
		@param	transform	A `Matrix3` instance to transform by
		@param	result	(Optional) A `Rectangle` instance to use for the result
		@return	A `Rectangle` represented the transformed bounds</haxe_doc>
		</transformRect>
		<transformVector public="1" set="method" line="560">
			<f a="pos:?result" v=":null">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Transforms a `Vector2` instance by the current matrix
		@param	result	(Optional) An existing `Vector2` instance to fill with the result
		@return	A new `Vector2` instance representing the transformed values</haxe_doc>
		</transformVector>
		<translate public="1" get="inline" set="null" line="573">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adjusts the `tx` and `ty` of the current matrix
		@param	dx	The x amount to translate
		@param	dy	The y amount to translate</haxe_doc>
		</translate>
		<new public="1" set="method" line="68">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
			<haxe_doc>Creates a new `Matrix` instance
		@param	a	(Optional) An initial a component value (default is 1)
		@param	b	(Optional) An initial b component value (default is 0)
		@param	c	(Optional) An initial c component value (default is 0)
		@param	d	(Optional) An initial d component value (default is 1)
		@param	tx	(Optional) An initial tx component value (default is 0)
		@param	ty	(Optional) An initial ty component value (default is 0)</haxe_doc>
		</new>
		<haxe_doc>`Matrix3` is a 3x3 transformation matrix particularly useful for
	two-dimensional transformation. It can be used for rotation, scale
	and skewing of a two-dimensional object.

	Although a 3x3 matrix is represented, configurable values can be
	considered as a 3x2 matrix:

	```
	[ a, c, tx ]
	[ c, d, ty ]
	[ 0, 0,  1 ]
	```</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.math.RGBA" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/RGBA.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
			<icast field="__fromARGB"><x path="lime.math.ARGB"/></icast>
			<icast field="__fromBGRA"><x path="lime.math.BGRA"/></icast>
		</from>
		<this><x path="UInt"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<haxe_doc>A utility for storing, accessing and converting colors in an RGBA
	(red, green, blue, alpha) color format.

	```haxe
	var color:RGBA = 0x883300FF;
	trace (color.r); // 0x88
	trace (color.g); // 0x33
	trace (color.b); // 0x00
	trace (color.a); // 0xFF

	var convert:ARGB = color; // 0xFF883300
	```</haxe_doc>
		<meta>
			<m n=":allow"><e>lime.math</e></m>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.math._RGBA.RGBA_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/RGBA.hx" private="1" module="lime.math.RGBA" final="1">
	<__alpha16 static="1"><x path="lime.utils.UInt32Array"/></__alpha16>
	<__clamp static="1"><x path="lime.utils.UInt8Array"/></__clamp>
	<a16 static="1"><x path="Int"/></a16>
	<unmult static="1"><x path="Float"/></unmult>
	<a public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the alpha component of the color</haxe_doc>
	</a>
	<b public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the blue component of the color</haxe_doc>
	</b>
	<g public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the green component of the color</haxe_doc>
	</g>
	<r public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Accesses the red component of the color</haxe_doc>
	</r>
	<_new public="1" get="inline" set="null" line="104" static="1">
		<f a="?rgba" v="0">
			<x path="Int"/>
			<x path="lime.math.RGBA"/>
		</f>
		<meta>
			<m n=":value"><e>{ rgba : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new RGBA instance
		@param	rgba	(Optional) An RGBA color value</haxe_doc>
	</_new>
	<create public="1" get="inline" set="null" line="118" static="1">
		<f a="r:g:b:a">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.math.RGBA"/>
		</f>
		<haxe_doc>Creates a new RGBA instance from component values
		@param	r	A red component value
		@param	g	A green component value
		@param	b	A blue component value
		@param	a	An alpha component value
		@return	A new RGBA instance</haxe_doc>
	</create>
	<multiplyAlpha public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Multiplies the red, green and blue components by the current alpha component</haxe_doc>
	</multiplyAlpha>
	<readUInt8 public="1" get="inline" set="null" line="151" static="1">
		<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
			<x path="UInt"/>
			<x path="lime.utils.UInt8Array"/>
			<x path="Int"/>
			<x path="lime.graphics.PixelFormat"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
		<haxe_doc>Reads a value from a `UInt8Array` into the current `RGBA` color
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to read
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
	</readUInt8>
	<set public="1" get="inline" set="null" line="178" static="1">
		<f a="this:r:g:b:a">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the current `RGBA` color to new component values
		@param	r	The red component value to set
		@param	g	The green component value to set
		@param	b	The blue component vlaue to set
		@param	a	The alpha component value to set</haxe_doc>
	</set>
	<unmultiplyAlpha public="1" get="inline" set="null" line="186" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Divides the current red, green and blue components by the alpha component</haxe_doc>
	</unmultiplyAlpha>
	<writeUInt8 public="1" get="inline" set="null" line="202" static="1">
		<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
			<x path="UInt"/>
			<x path="lime.utils.UInt8Array"/>
			<x path="Int"/>
			<x path="lime.graphics.PixelFormat"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
		<haxe_doc>Writes the current `RGBA` color into a `UInt8Array`
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to write
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
	</writeUInt8>
	<__fromARGB get="inline" set="null" line="231" static="1">
		<f a="argb">
			<x path="lime.math.ARGB"/>
			<x path="lime.math.RGBA"/>
		</f>
		<meta><m n=":from"/></meta>
	</__fromARGB>
	<__fromBGRA get="inline" set="null" line="236" static="1">
		<f a="bgra">
			<x path="lime.math.BGRA"/>
			<x path="lime.math.RGBA"/>
		</f>
		<meta><m n=":from"/></meta>
	</__fromBGRA>
	<get_a get="inline" set="null" line="242" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_a>
	<set_a get="inline" set="null" line="247" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_a>
	<get_b get="inline" set="null" line="253" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_b>
	<set_b get="inline" set="null" line="258" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_b>
	<get_g get="inline" set="null" line="264" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_g>
	<set_g get="inline" set="null" line="269" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_g>
	<get_r get="inline" set="null" line="275" static="1">
		<f a="this">
			<x path="UInt"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_r>
	<set_r get="inline" set="null" line="280" static="1">
		<f a="this:value">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_r>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":allow"><e>lime.math</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.utils.ArrayBufferView" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBufferView.hx">
		<type public="1" expr="TypedArrayType.None">
			<x path="lime.utils.TypedArrayType"/>
			<meta><m n=":value"><e>TypedArrayType.None</e></m></meta>
		</type>
		<buffer public="1"><x path="lime.utils.ArrayBuffer"/></buffer>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<length public="1"><x path="Int"/></length>
		<bytesPerElement set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</bytesPerElement>
		<initTypedArray get="inline" set="null" line="48">
			<f a="view">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta><m n=":allow"><e>lime.utils</e></m></meta>
		</initTypedArray>
		<initBuffer get="inline" set="null" line="79">
			<f a="in_buffer:?in_byteOffset:?len" v=":0:null">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta>
				<m n=":value"><e>{ len : null, in_byteOffset : 0 }</e></m>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</initBuffer>
		<initArray params="T" get="inline" set="null" line="115">
			<f a="array">
				<c path="Array"><c path="initArray.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
			</f>
			<meta><m n=":allow"><e>lime.utils</e></m></meta>
		</initArray>
		<set public="1" params="T" get="inline" set="null" line="132">
			<f a="?view:?array:?offset" v="null:null:0">
				<c path="lime.utils.ArrayBufferView"/>
				<c path="Array"><c path="set.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0, array : null, view : null }</e></m></meta>
		</set>
		<cloneBuffer get="inline" set="null" line="152">
			<f a="src:?srcByteOffset" v=":0">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcByteOffset : 0 }</e></m></meta>
		</cloneBuffer>
		<subarray params="T_subarray" get="inline" set="null" line="166">
			<f a="begin:?end" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="subarray.T_subarray"/>
			</f>
			<meta>
				<m n=":value"><e>{ end : null }</e></m>
				<m n=":generic"/>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</subarray>
		<bytesForType get="inline" set="null" line="211"><f a="type">
	<x path="lime.utils.TypedArrayType"/>
	<x path="Int"/>
</f></bytesForType>
		<toString get="inline" set="null" line="249"><f a=""><c path="String"/></f></toString>
		<toByteLength get="inline" set="null" line="271"><f a="elemCount">
	<x path="Int"/>
	<x path="Int"/>
</f></toByteLength>
		<copyFromArray set="method" line="279">
			<f a="array:?offset" v=":0">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</copyFromArray>
		<new get="inline" set="null" line="20">
			<f a="?elements:in_type" v="null:">
				<x path="Int"/>
				<x path="lime.utils.TypedArrayType"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : null }</e></m>
				<m n=":allow"><e>lime.utils</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime.utils.TAError" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<RangeError/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</enum>
	<class path="lime.math._RGBA.RGBA_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/RGBA.hx" private="1" module="lime.math.RGBA" final="1">
		<__alpha16 static="1"><x path="lime.utils.UInt32Array"/></__alpha16>
		<__clamp static="1"><x path="lime.utils.UInt8Array"/></__clamp>
		<a16 static="1"><x path="Int"/></a16>
		<unmult static="1"><x path="Float"/></unmult>
		<a public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the alpha component of the color</haxe_doc>
		</a>
		<b public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the blue component of the color</haxe_doc>
		</b>
		<g public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the green component of the color</haxe_doc>
		</g>
		<r public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Accesses the red component of the color</haxe_doc>
		</r>
		<_new public="1" get="inline" set="null" line="104" static="1">
			<f a="?rgba" v="0">
				<x path="Int"/>
				<x path="lime.math.RGBA"/>
			</f>
			<meta>
				<m n=":value"><e>{ rgba : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new RGBA instance
		@param	rgba	(Optional) An RGBA color value</haxe_doc>
		</_new>
		<create public="1" get="inline" set="null" line="118" static="1">
			<f a="r:g:b:a">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.math.RGBA"/>
			</f>
			<haxe_doc>Creates a new RGBA instance from component values
		@param	r	A red component value
		@param	g	A green component value
		@param	b	A blue component value
		@param	a	An alpha component value
		@return	A new RGBA instance</haxe_doc>
		</create>
		<multiplyAlpha public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the red, green and blue components by the current alpha component</haxe_doc>
		</multiplyAlpha>
		<readUInt8 public="1" get="inline" set="null" line="151" static="1">
			<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
				<x path="UInt"/>
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
			<haxe_doc>Reads a value from a `UInt8Array` into the current `RGBA` color
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to read
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
		</readUInt8>
		<set public="1" get="inline" set="null" line="178" static="1">
			<f a="this:r:g:b:a">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the current `RGBA` color to new component values
		@param	r	The red component value to set
		@param	g	The green component value to set
		@param	b	The blue component vlaue to set
		@param	a	The alpha component value to set</haxe_doc>
		</set>
		<unmultiplyAlpha public="1" get="inline" set="null" line="186" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Divides the current red, green and blue components by the alpha component</haxe_doc>
		</unmultiplyAlpha>
		<writeUInt8 public="1" get="inline" set="null" line="202" static="1">
			<f a="this:data:offset:?format:?premultiplied" v=":::RGBA32:false">
				<x path="UInt"/>
				<x path="lime.utils.UInt8Array"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ premultiplied : false, format : RGBA32 }</e></m></meta>
			<haxe_doc>Writes the current `RGBA` color into a `UInt8Array`
		@param	data	A `UInt8Array` instance
		@param	offset	An offset into the `UInt8Array` to write
		@param	format	(Optional) The `PixelFormat` represented by the `UInt8Array` data
		@param	premultiplied	(Optional) Whether the data is stored in premultiplied alpha format</haxe_doc>
		</writeUInt8>
		<__fromARGB get="inline" set="null" line="231" static="1">
			<f a="argb">
				<x path="lime.math.ARGB"/>
				<x path="lime.math.RGBA"/>
			</f>
			<meta><m n=":from"/></meta>
		</__fromARGB>
		<__fromBGRA get="inline" set="null" line="236" static="1">
			<f a="bgra">
				<x path="lime.math.BGRA"/>
				<x path="lime.math.RGBA"/>
			</f>
			<meta><m n=":from"/></meta>
		</__fromBGRA>
		<get_a get="inline" set="null" line="242" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_a>
		<set_a get="inline" set="null" line="247" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_a>
		<get_b get="inline" set="null" line="253" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_b>
		<set_b get="inline" set="null" line="258" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_b>
		<get_g get="inline" set="null" line="264" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_g>
		<set_g get="inline" set="null" line="269" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_g>
		<get_r get="inline" set="null" line="275" static="1">
			<f a="this">
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_r>
		<set_r get="inline" set="null" line="280" static="1">
			<f a="this:value">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_r>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>lime.math</e></m>
		</meta>
	</class>
	<class path="lime.math.Rectangle" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/Rectangle.hx">
		<bottom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Get or set the bottom (y + height) value of the `Rectangle`</haxe_doc>
		</bottom>
		<bottomRight public="1" get="accessor" set="accessor">
			<c path="lime.math.Vector2"/>
			<haxe_doc>Get or set the bottom-right (x + width, y + height) as a `Vector2`</haxe_doc>
		</bottomRight>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>Get or set the height of the rectangle</haxe_doc>
		</height>
		<left public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Get or set the left (x) of the rectangle</haxe_doc>
		</left>
		<right public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Get or set the right (x + width) of the rectangle</haxe_doc>
		</right>
		<size public="1" get="accessor" set="accessor">
			<c path="lime.math.Vector2"/>
			<haxe_doc>Get or set the size (width, height) as a `Vector2`</haxe_doc>
		</size>
		<top public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Get or set the top (y) of the rectangle</haxe_doc>
		</top>
		<topLeft public="1" get="accessor" set="accessor">
			<c path="lime.math.Vector2"/>
			<haxe_doc>Get or set the top-left (x, y) as a `Vector2`</haxe_doc>
		</topLeft>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>Get or set the width of the rectangle</haxe_doc>
		</width>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>Get or set the x of the rectangle</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>Get or set the y of the rectangle</haxe_doc>
		</y>
		<clone public="1" set="method" line="95">
			<f a=""><c path="lime.math.Rectangle"/></f>
			<haxe_doc>Creates a clone of this `Rectangle`
		@return	A new `Rectangle` instance</haxe_doc>
		</clone>
		<contains public="1" set="method" line="106">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether this rectangle contains the specified (x, y) point
		@param	x	The x coordinate to test
		@param	y	The y coordinate to test
		@return	Whether the point is contained in the rectangle</haxe_doc>
		</contains>
		<containsPoint public="1" set="method" line="111">
			<f a="point">
				<c path="lime.math.Vector2"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use containsVector"</e></m>
			</meta>
		</containsPoint>
		<containsRect public="1" set="method" line="123">
			<f a="rect">
				<c path="lime.math.Rectangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether this rectangle contains another rectangle
		This will return `false` if the second rectangle only
		overlaps but is not fully contained within the current rectangle
		@param	rect	A second `Rectangle` instance to test
		@return	Whether the `rect` is contained within the current `Rectangle`</haxe_doc>
		</containsRect>
		<containsVector public="1" set="method" line="140">
			<f a="vector">
				<c path="lime.math.Vector2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether this rectangle contains the specified vector
		@param	vector	The vector to test
		@return	Whether the vector is contained in the rectangle</haxe_doc>
		</containsVector>
		<copyFrom public="1" set="method" line="149">
			<f a="sourceRect">
				<c path="lime.math.Rectangle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the x, y, width and height of another `Rectangle`
		@param	sourceRect	Another `Rectangle` instance</haxe_doc>
		</copyFrom>
		<equals public="1" set="method" line="163">
			<f a="toCompare">
				<c path="lime.math.Rectangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks whether the current `Rectangle` and another
		instance have equal values
		@param	toCompare	Another `Rectangle` to compare with
		@return	Whether both rectangles are not `null` and have equal values</haxe_doc>
		</equals>
		<inflate public="1" set="method" line="174">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Increases the size of the current rectangle by
		the given delta x and y values
		@param	dx	A delta x value to increase the size by
		@param	dy	A delta y value to increase the size by</haxe_doc>
		</inflate>
		<inflateVector public="1" set="method" line="187">
			<f a="vector">
				<c path="lime.math.Vector2"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Increases the size of the current rectangle by
		the given delta vector values
		@param	vector	A delta vector to increase the size by</haxe_doc>
		</inflateVector>
		<intersection public="1" set="method" line="201">
			<f a="toIntersect:?result" v=":null">
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Returns a new rectangle with the area where the current
		`Rectangle` and another `Rectangle` instance overlap.
		If they do not overlap, the returned `Rectangle` will
		be empty
		@param	toIntersect	Another `Rectangle` instance to intersect with
		@param	result	(Optional) A `Rectangle` instance to use for the result
		@return	A `Rectangle` of the intersection area</haxe_doc>
		</intersection>
		<intersects public="1" set="method" line="235">
			<f a="toIntersect">
				<c path="lime.math.Rectangle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns if the current `Rectangle` overlaps with another instance
		@param	toIntersect	Another `Rectangle` to compare with
		@return	Whether the rectangles intersect</haxe_doc>
		</intersects>
		<isEmpty public="1" set="method" line="255">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[Whether this rectangle is empty
		@return	`true` if the width or height is <= 0]]></haxe_doc>
		</isEmpty>
		<offset public="1" set="method" line="265">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the rectangle by offset x and values
		@param	dx	A delta x value
		@param	dy	A delta y value</haxe_doc>
		</offset>
		<offsetVector public="1" set="method" line="275">
			<f a="vector">
				<c path="lime.math.Vector2"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the rectangle by the values of a `Vector2`
		@param	dx	A delta vector</haxe_doc>
		</offsetVector>
		<setEmpty public="1" set="method" line="284">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Makes this rectangle empty</haxe_doc>
		</setEmpty>
		<setTo public="1" set="method" line="296">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the values of this rectangle at once
		@param	xa	A new x value
		@param	ya	A new y value
		@param	widtha	A new width value
		@param	heighta	A new height value</haxe_doc>
		</setTo>
		<union public="1" set="method" line="311">
			<f a="toUnion:?result" v=":null">
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
				<c path="lime.math.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Combines two rectangles together, returning the
		minimum `Rectangle` that contains both rectangles
		@param	toUnion	A second `Rectangle` to unify
		@param	result	(Optional) A `Rectangle` instance for the result
		@return	A `Rectangle` that contains the dimensions of both rectangles</haxe_doc>
		</union>
		<__toFlashRectangle set="method" line="336">
			<f a=""><d/></f>
			<meta><m n=":noCompletion"/></meta>
		</__toFlashRectangle>
		<get_bottom set="method" line="346">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_bottom>
		<set_bottom set="method" line="351">
			<f a="b">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_bottom>
		<get_bottomRight set="method" line="357">
			<f a=""><c path="lime.math.Vector2"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_bottomRight>
		<set_bottomRight set="method" line="362">
			<f a="p">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_bottomRight>
		<get_left set="method" line="369">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_left>
		<set_left set="method" line="374">
			<f a="l">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_left>
		<get_right set="method" line="381">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_right>
		<set_right set="method" line="386">
			<f a="r">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_right>
		<get_size set="method" line="392">
			<f a=""><c path="lime.math.Vector2"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_size>
		<set_size set="method" line="397">
			<f a="p">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_size>
		<get_top set="method" line="404">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_top>
		<set_top set="method" line="409">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_top>
		<get_topLeft set="method" line="416">
			<f a=""><c path="lime.math.Vector2"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_topLeft>
		<set_topLeft set="method" line="421">
			<f a="p">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_topLeft>
		<new public="1" set="method" line="83">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Create a new `Rectangle` instance
		@param	x	(Optional) Initial x value (default is 0)
		@param	y	(Optional) Initial y value (default is 0)
		@param	width	(Optional) Initial width value (default is 0)
		@param	height	(Optional) Initial height value (default is 0)</haxe_doc>
		</new>
		<haxe_doc>The `Rectangle` class provides a simple object for storing
	and manipulating a logical rectangle for calculations</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.math.Vector2" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/Vector2.hx">
		<distance public="1" set="method" line="82" static="1">
			<f a="pt1:pt2">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates the distance between two `Vector2` points
		@param	pt1	A `Vector2` instance
		@param	pt2	A second `Vector2` instance
		@return	The distance between each `Vector2`</haxe_doc>
		</distance>
		<interpolate public="1" set="method" line="107" static="1">
			<f a="pt1:pt2:f:?result" v=":::null">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
				<x path="Float"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Interpolates between two points, given a specified percentage value
		@param	pt1	A `Vector2` instance
		@param	pt2	A second `Vector2` instance
		@param	f	A percentage value to interpolate
		@param	result	(Optional) A `Vector2` instance to use for the result
		@return	A `Vector2` instance holding the interpolated value</haxe_doc>
		</interpolate>
		<polar public="1" set="method" line="150" static="1">
			<f a="len:angle:?result" v="::null">
				<x path="Float"/>
				<x path="Float"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Converts a polar coordinate to into a cartesian `Vector2` instance
		@param	len	The length of the polar value
		@param	angle	The angle of the polar value
		@param	result	(Optional) A `Vector2` instance to store the result
		@return	A `Vector2` instance in cartesian coordinates</haxe_doc>
		</polar>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Gets the length of this vector from (0, 0) to (x, y)</haxe_doc>
		</length>
		<lengthSquared public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Gets the square of the length of this vector, which
		avoids use of `Math.sqrt` for faster performance</haxe_doc>
		</lengthSquared>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The x coodinate for this vector</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The y coodinate for this vector</haxe_doc>
		</y>
		<add public="1" set="method" line="60">
			<f a="v:?result" v=":null">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Adds the current vector to a second `Vector2` instance
		and returns the result
		@param	v	A `Vector2` instance to add
		@param	result	(Optional) A `Vector2` instance to store the result
		@return	A `Vector2` instance that combines both vector values</haxe_doc>
		</add>
		<clone public="1" set="method" line="71">
			<f a=""><c path="lime.math.Vector2"/></f>
			<haxe_doc>Clones the current `Vector2`
		@return	A new `Vector2` instance with the same values as the current one</haxe_doc>
		</clone>
		<equals public="1" set="method" line="94">
			<f a="toCompare">
				<c path="lime.math.Vector2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Whether this `Vector2` has the same values as another instance
		@param	toCompare	A `Vector2` instance to compare against
		@return	Whether the values of each vector are equal</haxe_doc>
		</equals>
		<normalize public="1" set="method" line="118">
			<f a="thickness">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Normalizes this vector between the current length and a set scale value
		@param	thickness	The scaling value. . For example, if the current vector is `(0, 5)` and you normalize it to 1, the normalized value will be `(0, 1)`</haxe_doc>
		</normalize>
		<offset public="1" set="method" line="137">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Offsets the current value of this vector
		@param	dx	An offset x value
		@param	dy	An offset y value</haxe_doc>
		</offset>
		<setTo public="1" get="inline" set="null" line="162">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets this `Vector2` to new values
		@param	xa	An `x` value
		@param	ya	A `y` value</haxe_doc>
		</setTo>
		<subtract public="1" set="method" line="174">
			<f a="v:?result" v=":null">
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
				<c path="lime.math.Vector2"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Subtracts the current vector from another `Vector2` instance
		@param	v	A `Vector2` instance to subtract from the current vector
		@param	result	(Optional) A `Vector2` instance to store the result
		@return	A `Vector2` instance containing the subtracted values</haxe_doc>
		</subtract>
		<__toFlashPoint set="method" line="181">
			<f a=""><d/></f>
			<meta><m n=":noCompletion"/></meta>
		</__toFlashPoint>
		<get_length set="method" line="191">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<get_lengthSquared set="method" line="196">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_lengthSquared>
		<new public="1" set="method" line="47">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Creates a new `Vector` instance
		@param	x	(Optional) An initial `x` value (default is 0)
		@param	y	(Optional) An initial `y` value (default is 0)</haxe_doc>
		</new>
		<haxe_doc>The `Vector2` class can be used for calculating math with
	basic (x, y) coordinates</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.math.Vector4" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/math/Vector4.hx">
		<X_AXIS public="1" get="accessor" set="null" static="1">
			<c path="lime.math.Vector4"/>
			<haxe_doc>A constant representing the x axis (1, 0, 0)</haxe_doc>
		</X_AXIS>
		<Y_AXIS public="1" get="accessor" set="null" static="1">
			<c path="lime.math.Vector4"/>
			<haxe_doc>A constant representing the y axis (0, 1, 0)</haxe_doc>
		</Y_AXIS>
		<Z_AXIS public="1" get="accessor" set="null" static="1">
			<c path="lime.math.Vector4"/>
			<haxe_doc>A constant representing the z axis (0, 0, 1)</haxe_doc>
		</Z_AXIS>
		<angleBetween public="1" get="inline" set="null" line="95" static="1">
			<f a="a:b">
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates the angle between two `Vector4` coordinates
		@param	a	A `Vector4` instance
		@param	b	A second `Vector4` instance
		@return	The calculated angle</haxe_doc>
		</angleBetween>
		<distance public="1" get="inline" set="null" line="156" static="1">
			<f a="pt1:pt2">
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates the distance between two vectors
		@param	pt1	A `Vector4` instance
		@param	pt2	A second `Vector4` instance
		@return	The distance between each vector</haxe_doc>
		</distance>
		<distanceSquared public="1" get="inline" set="null" line="172" static="1">
			<f a="pt1:pt2">
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates the squared distance between two vectors,
		(avoids the use of `Math.sqrt` for faster performance)
		@param	pt1	A `Vector4` instance
		@param	pt2	A second `Vector4` instance
		@return	The square of the distance between each vector</haxe_doc>
		</distanceSquared>
		<get_X_AXIS get="inline" set="null" line="325" static="1"><f a=""><c path="lime.math.Vector4"/></f></get_X_AXIS>
		<get_Y_AXIS get="inline" set="null" line="330" static="1"><f a=""><c path="lime.math.Vector4"/></f></get_Y_AXIS>
		<get_Z_AXIS get="inline" set="null" line="335" static="1"><f a=""><c path="lime.math.Vector4"/></f></get_Z_AXIS>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Get the length of this vector</haxe_doc>
		</length>
		<lengthSquared public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>Get the squared length of this vector
		(avoiding the use of `Math.sqrt` for faster
		performance)</haxe_doc>
		</lengthSquared>
		<w public="1">
			<x path="Float"/>
			<haxe_doc>The w component value</haxe_doc>
		</w>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The x component value</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The y component value</haxe_doc>
		</y>
		<z public="1">
			<x path="Float"/>
			<haxe_doc>The z component value</haxe_doc>
		</z>
		<add public="1" get="inline" set="null" line="82">
			<f a="a:?result" v=":null">
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Adds two `Vector4` instances together and returns the result
		@param	a	A `Vector4` instance to add to the current one
		@param	result	(Optional) A `Vector4` instance to store the result
		@return	A `Vector4` instance with the added value</haxe_doc>
		</add>
		<clone public="1" get="inline" set="null" line="109">
			<f a=""><c path="lime.math.Vector4"/></f>
			<haxe_doc>Creates a new `Vector4` instance with the same values as the current one
		@return	A new `Vector4` instance with the same values</haxe_doc>
		</clone>
		<copyFrom public="1" get="inline" set="null" line="118">
			<f a="sourceVector4">
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the x, y and z component values of another `Vector4` instance
		@param	sourceVector4	A `Vector4` instance to copy from</haxe_doc>
		</copyFrom>
		<crossProduct public="1" get="inline" set="null" line="131">
			<f a="a:?result" v=":null">
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Performs vector multiplication between this vector and another `Vector4` instance
		@param	a	A `Vector4` instance to multiply by
		@param	result	(Optional) A `Vector4` to use for the result
		@return	A `Vector4` instance with the result</haxe_doc>
		</crossProduct>
		<decrementBy public="1" get="inline" set="null" line="143">
			<f a="a">
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Decrements the x, y and z component values by those in another `Vector4` instance
		@param	a	A `Vector4` instance to decrement the current vector by</haxe_doc>
		</decrementBy>
		<dotProduct public="1" get="inline" set="null" line="186">
			<f a="a">
				<c path="lime.math.Vector4"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates the dot product of the current vector with another `Vector4` instance
		@param	a	A `Vector4` instance to use in the dot product
		@return	The calculated dot product value</haxe_doc>
		</dotProduct>
		<equals public="1" get="inline" set="null" line="199">
			<f a="toCompare:?allFour" v=":false">
				<c path="lime.math.Vector4"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
			<haxe_doc>Whether two `Vector4` instances have equal component values.

		Comparing the w component value is optional.
		@param	toCompare	A `Vector4` instance to compare against
		@param	allFour	(Optional) Whether to compare against the w component (default is false)
		@return	Whether both instances have equal values</haxe_doc>
		</equals>
		<incrementBy public="1" get="inline" set="null" line="208">
			<f a="a">
				<c path="lime.math.Vector4"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Increments the x, y and z component values by those in a second `Vector4` instance
		@param	a	A `Vector4` instance to increment the current vector by</haxe_doc>
		</incrementBy>
		<nearEquals public="1" get="inline" set="null" line="223">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="lime.math.Vector4"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
			<haxe_doc>Whether two `Vector4` instances have nearly equal component values.
		Comparison is performed within a given tolerance value.
		@param	toCompare	A `Vector4` instance to compare against
		@param	tolerance	A floating point value determining how near the values must be to be considered near equal
		@param	allFour	(Optional) Whether to compare against the w component (default is false)
		@return	Whether both instances have equal values, within the given tolerance</haxe_doc>
		</nearEquals>
		<negate public="1" get="inline" set="null" line="235">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Negates the x, y and z values of the current vector
		(multiplying each value by -1)</haxe_doc>
		</negate>
		<normalize public="1" get="inline" set="null" line="246">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Divides the x, y and z component values by the
		length of the vector</haxe_doc>
		</normalize>
		<project public="1" get="inline" set="null" line="264">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Divides the x, y and z component values by the
		w component value</haxe_doc>
		</project>
		<scaleBy public="1" get="inline" set="null" line="275">
			<f a="s">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scales the x, y and z component values by a scale value
		@param	s	The amount of scale to apply</haxe_doc>
		</scaleBy>
		<setTo public="1" get="inline" set="null" line="288">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the x, y and z component values
		@param	xa	An x value
		@param	ya	A y value
		@param	za	A z value</haxe_doc>
		</setTo>
		<subtract public="1" get="inline" set="null" line="302">
			<f a="a:?result" v=":null">
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
				<c path="lime.math.Vector4"/>
			</f>
			<meta><m n=":value"><e>{ result : null }</e></m></meta>
			<haxe_doc>Subtracts the values of a second `Vector4` instance
		from the current one
		@param	a	A second `Vector4` instance to substract
		@param	result	(Optional) A `Vector4` instance to store the result
		@return	A `Vector4` instance containing the subtracted value</haxe_doc>
		</subtract>
		<toString public="1" get="inline" set="null" line="309">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<get_length get="inline" set="null" line="315">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_length>
		<get_lengthSquared get="inline" set="null" line="320">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_lengthSquared>
		<new public="1" set="method" line="68">
			<f a="?x:?y:?z:?w" v="0.:0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 0., z : 0., y : 0., x : 0. }</e></m></meta>
			<haxe_doc>Creates a new `Vector4` instance
		@param	x	(Optional) An initial x value (default is 0)
		@param	y	(Optional) An initial y value (default is 0)
		@param	z	(Optional) An initial z value (default is 0)
		@param	w	(Optional) An initial w value (default is 0)</haxe_doc>
		</new>
		<haxe_doc>`Vector4` is a vector suitable for three-dimensional
	math, containing (x, y, z, w) components</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.media.AudioBuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/AudioBuffer.hx">
		<fromBase64 public="1" set="method" line="70" static="1"><f a="base64String">
	<c path="String"/>
	<c path="lime.media.AudioBuffer"/>
</f></fromBase64>
		<fromBytes public="1" set="method" line="116" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.media.AudioBuffer"/>
</f></fromBytes>
		<fromFile public="1" set="method" line="149" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.media.AudioBuffer"/>
</f></fromFile>
		<fromFiles public="1" set="method" line="200" static="1"><f a="paths">
	<c path="Array"><c path="String"/></c>
	<c path="lime.media.AudioBuffer"/>
</f></fromFiles>
		<fromVorbisFile public="1" set="method" line="226" static="1"><f a="vorbisFile">
	<c path="lime.media.vorbis.VorbisFile"/>
	<c path="lime.media.AudioBuffer"/>
</f></fromVorbisFile>
		<loadFromFile public="1" set="method" line="247" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.media.AudioBuffer"/></c>
</f></loadFromFile>
		<loadFromFiles public="1" set="method" line="311" static="1"><f a="paths">
	<c path="Array"><c path="String"/></c>
	<c path="lime.app.Future"><c path="lime.media.AudioBuffer"/></c>
</f></loadFromFiles>
		<__getCodec set="method" line="343" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
</f></__getCodec>
		<bitsPerSample public="1"><x path="Int"/></bitsPerSample>
		<channels public="1"><x path="Int"/></channels>
		<data public="1"><x path="lime.utils.UInt8Array"/></data>
		<sampleRate public="1"><x path="Int"/></sampleRate>
		<src public="1" get="accessor" set="accessor"><d/></src>
		<__srcAudio>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcAudio>
		<__srcBuffer>
			<x path="lime.media.openal.ALBuffer"/>
			<meta><m n=":noCompletion"/></meta>
		</__srcBuffer>
		<__srcCustom>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcCustom>
		<__srcHowl>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcHowl>
		<__srcSound>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</__srcSound>
		<__srcVorbisFile>
			<c path="lime.media.vorbis.VorbisFile"/>
			<meta><m n=":noCompletion"/></meta>
		</__srcVorbisFile>
		<dispose public="1" set="method" line="63"><f a=""><x path="Void"/></f></dispose>
		<get_src set="method" line="368">
			<f a=""><d/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_src>
		<set_src set="method" line="385">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_src>
		<new public="1" set="method" line="60"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.utils.Assets</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.media.AudioContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/AudioContext.hx">
		<custom public="1"><d/></custom>
		<flash public="1" set="null"><c path="lime.media.FlashAudioContext"/></flash>
		<html5 public="1" set="null"><c path="lime.media.HTML5AudioContext"/></html5>
		<openal public="1" set="null"><c path="lime.media.OpenALAudioContext"/></openal>
		<type public="1" set="null"><x path="lime.media.AudioContextType"/></type>
		<web public="1" set="null"><c path="lime.media.WebAudioContext"/></web>
		<new public="1" set="method" line="25">
			<f a="?type" v="null">
				<x path="lime.media.AudioContextType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime.media.FlashAudioContext</e></m>
			<m n=":access"><e>lime.media.HTML5AudioContext</e></m>
			<m n=":access"><e>lime.media.OpenALAudioContext</e></m>
			<m n=":access"><e>lime.media.WebAudioContext</e></m>
		</meta>
	</class>
	<abstract path="lime.media.AudioContextType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/AudioContextType.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.media._AudioContextType.AudioContextType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/AudioContextType.hx" private="1" module="lime.media.AudioContextType" extern="1" final="1">
	<FLASH public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="5" static="1">
		<x path="lime.media.AudioContextType"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FLASH>
	<HTML5 public="1" get="inline" set="null" expr="cast &quot;html5&quot;" line="6" static="1">
		<x path="lime.media.AudioContextType"/>
		<meta>
			<m n=":value"><e>cast "html5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HTML5>
	<OPENAL public="1" get="inline" set="null" expr="cast &quot;openal&quot;" line="7" static="1">
		<x path="lime.media.AudioContextType"/>
		<meta>
			<m n=":value"><e>cast "openal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OPENAL>
	<WEB public="1" get="inline" set="null" expr="cast &quot;web&quot;" line="8" static="1">
		<x path="lime.media.AudioContextType"/>
		<meta>
			<m n=":value"><e>cast "web"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WEB>
	<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="9" static="1">
		<x path="lime.media.AudioContextType"/>
		<meta>
			<m n=":value"><e>cast "custom"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CUSTOM>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.media._AudioContextType.AudioContextType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/AudioContextType.hx" private="1" module="lime.media.AudioContextType" extern="1" final="1">
		<FLASH public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="5" static="1">
			<x path="lime.media.AudioContextType"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FLASH>
		<HTML5 public="1" get="inline" set="null" expr="cast &quot;html5&quot;" line="6" static="1">
			<x path="lime.media.AudioContextType"/>
			<meta>
				<m n=":value"><e>cast "html5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HTML5>
		<OPENAL public="1" get="inline" set="null" expr="cast &quot;openal&quot;" line="7" static="1">
			<x path="lime.media.AudioContextType"/>
			<meta>
				<m n=":value"><e>cast "openal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OPENAL>
		<WEB public="1" get="inline" set="null" expr="cast &quot;web&quot;" line="8" static="1">
			<x path="lime.media.AudioContextType"/>
			<meta>
				<m n=":value"><e>cast "web"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WEB>
		<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="9" static="1">
			<x path="lime.media.AudioContextType"/>
			<meta>
				<m n=":value"><e>cast "custom"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CUSTOM>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.media.AudioManager" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/AudioManager.hx">
		<context public="1" static="1"><c path="lime.media.AudioContext"/></context>
		<init public="1" set="method" line="23" static="1">
			<f a="?context" v="null">
				<c path="lime.media.AudioContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ context : null }</e></m></meta>
		</init>
		<resume public="1" set="method" line="57" static="1"><f a=""><x path="Void"/></f></resume>
		<shutdown public="1" set="method" line="75" static="1"><f a=""><x path="Void"/></f></shutdown>
		<suspend public="1" set="method" line="100" static="1"><f a=""><x path="Void"/></f></suspend>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.media.FlashAudioContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/FlashAudioContext.hx">
		<createBuffer public="1" set="method" line="13">
			<f a="?stream:?context" v="null:null">
				<d/>
				<d/>
				<c path="lime.media.AudioBuffer"/>
			</f>
			<meta><m n=":value"><e>{ context : null, stream : null }</e></m></meta>
		</createBuffer>
		<getBytesLoaded public="1" set="method" line="24"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="UInt"/>
</f></getBytesLoaded>
		<getBytesTotal public="1" set="method" line="36"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Int"/>
</f></getBytesTotal>
		<getID3 public="1" set="method" line="48"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<d/>
</f></getID3>
		<getIsBuffering public="1" set="method" line="60"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getIsBuffering>
		<getIsURLInaccessible public="1" set="method" line="72"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getIsURLInaccessible>
		<getLength public="1" set="method" line="84"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getLength>
		<getURL public="1" set="method" line="96"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
</f></getURL>
		<close public="1" set="method" line="108"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Void"/>
</f></close>
		<extract public="1" set="method" line="118">
			<f a="buffer:target:length:?startPosition" v=":::-1">
				<c path="lime.media.AudioBuffer"/>
				<d/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ startPosition : -1 }</e></m></meta>
		</extract>
		<load public="1" set="method" line="130">
			<f a="buffer:stream:?context" v="::null">
				<c path="lime.media.AudioBuffer"/>
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ context : null }</e></m></meta>
		</load>
		<loadCompressedDataFromByteArray public="1" set="method" line="140"><f a="buffer:bytes:bytesLength">
	<c path="lime.media.AudioBuffer"/>
	<d/>
	<x path="UInt"/>
	<x path="Void"/>
</f></loadCompressedDataFromByteArray>
		<loadPCMFromByteArray public="1" set="method" line="151">
			<f a="buffer:bytes:samples:?format:?stereo:?sampleRate" v=":::null:true:44100">
				<c path="lime.media.AudioBuffer"/>
				<d/>
				<x path="UInt"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sampleRate : 44100, stereo : true, format : null }</e></m></meta>
		</loadPCMFromByteArray>
		<play public="1" set="method" line="161">
			<f a="buffer:?startTime:?loops:?sndTransform" v=":0:0:null">
				<c path="lime.media.AudioBuffer"/>
				<x path="Float"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ sndTransform : null, loops : 0, startTime : 0 }</e></m></meta>
		</play>
		<new set="method" line="10">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
	</class>
	<class path="lime.media.HTML5AudioContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/HTML5AudioContext.hx">
		<HAVE_CURRENT_DATA public="1" expr="2">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_ENOUGH_DATA public="1" expr="4">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<HAVE_FUTURE_DATA public="1" expr="3">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_METADATA public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_NOTHING public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<NETWORK_EMPTY public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" expr="2">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" expr="3">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<canPlayType public="1" set="method" line="24"><f a="buffer:type">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
	<c path="String"/>
</f></canPlayType>
		<createBuffer public="1" set="method" line="36">
			<f a="?urlString" v="null">
				<c path="String"/>
				<c path="lime.media.AudioBuffer"/>
			</f>
			<meta><m n=":value"><e>{ urlString : null }</e></m></meta>
		</createBuffer>
		<getAutoplay public="1" set="method" line="48"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getAutoplay>
		<getBuffered public="1" set="method" line="60"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<d/>
</f></getBuffered>
		<getCurrentSrc public="1" set="method" line="72"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
</f></getCurrentSrc>
		<getCurrentTime public="1" set="method" line="84"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getCurrentTime>
		<getDefaultPlaybackRate public="1" set="method" line="96"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getDefaultPlaybackRate>
		<getDuration public="1" set="method" line="108"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getDuration>
		<getEnded public="1" set="method" line="120"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getEnded>
		<getError public="1" set="method" line="132"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<d/>
</f></getError>
		<getLoop public="1" set="method" line="144"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getLoop>
		<getMuted public="1" set="method" line="156"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getMuted>
		<getNetworkState public="1" set="method" line="168"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Int"/>
</f></getNetworkState>
		<getPaused public="1" set="method" line="180"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getPaused>
		<getPlaybackRate public="1" set="method" line="192"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getPlaybackRate>
		<getPlayed public="1" set="method" line="204"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<d/>
</f></getPlayed>
		<getPreload public="1" set="method" line="216"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
</f></getPreload>
		<getReadyState public="1" set="method" line="228"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Int"/>
</f></getReadyState>
		<getSeekable public="1" set="method" line="240"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<d/>
</f></getSeekable>
		<getSeeking public="1" set="method" line="252"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></getSeeking>
		<getSrc public="1" set="method" line="264"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
</f></getSrc>
		<getStartTime public="1" set="method" line="276"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getStartTime>
		<getVolume public="1" set="method" line="288"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
</f></getVolume>
		<load public="1" set="method" line="300"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Void"/>
</f></load>
		<pause public="1" set="method" line="310"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Void"/>
</f></pause>
		<play public="1" set="method" line="320"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Void"/>
</f></play>
		<setAutoplay public="1" set="method" line="330"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setAutoplay>
		<setCurrentTime public="1" set="method" line="340"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setCurrentTime>
		<setDefaultPlaybackRate public="1" set="method" line="350"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDefaultPlaybackRate>
		<setLoop public="1" set="method" line="360"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoop>
		<setMuted public="1" set="method" line="370"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMuted>
		<setPlaybackRate public="1" set="method" line="380"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaybackRate>
		<setPreload public="1" set="method" line="390"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
	<x path="Void"/>
</f></setPreload>
		<setSrc public="1" set="method" line="400"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<c path="String"/>
	<x path="Void"/>
</f></setSrc>
		<setVolume public="1" set="method" line="410"><f a="buffer:value">
	<c path="lime.media.AudioBuffer"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setVolume>
		<new set="method" line="21">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":access"><e>lime.media.AudioBuffer</e></m></meta>
	</class>
	<class path="lime.media.OpenALAudioContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/OpenALAudioContext.hx">
		<NONE public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FALSE public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FALSE>
		<TRUE public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TRUE>
		<SOURCE_RELATIVE public="1" expr="0x202">
			<x path="Int"/>
			<meta><m n=":value"><e>0x202</e></m></meta>
		</SOURCE_RELATIVE>
		<CONE_INNER_ANGLE public="1" expr="0x1001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1001</e></m></meta>
		</CONE_INNER_ANGLE>
		<CONE_OUTER_ANGLE public="1" expr="0x1002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1002</e></m></meta>
		</CONE_OUTER_ANGLE>
		<PITCH public="1" expr="0x1003">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1003</e></m></meta>
		</PITCH>
		<POSITION public="1" expr="0x1004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1004</e></m></meta>
		</POSITION>
		<DIRECTION public="1" expr="0x1005">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1005</e></m></meta>
		</DIRECTION>
		<VELOCITY public="1" expr="0x1006">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1006</e></m></meta>
		</VELOCITY>
		<LOOPING public="1" expr="0x1007">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1007</e></m></meta>
		</LOOPING>
		<BUFFER public="1" expr="0x1009">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1009</e></m></meta>
		</BUFFER>
		<GAIN public="1" expr="0x100A">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100A</e></m></meta>
		</GAIN>
		<MIN_GAIN public="1" expr="0x100D">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100D</e></m></meta>
		</MIN_GAIN>
		<MAX_GAIN public="1" expr="0x100E">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100E</e></m></meta>
		</MAX_GAIN>
		<ORIENTATION public="1" expr="0x100F">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100F</e></m></meta>
		</ORIENTATION>
		<SOURCE_STATE public="1" expr="0x1010">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1010</e></m></meta>
		</SOURCE_STATE>
		<INITIAL public="1" expr="0x1011">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1011</e></m></meta>
		</INITIAL>
		<PLAYING public="1" expr="0x1012">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1012</e></m></meta>
		</PLAYING>
		<PAUSED public="1" expr="0x1013">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1013</e></m></meta>
		</PAUSED>
		<STOPPED public="1" expr="0x1014">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1014</e></m></meta>
		</STOPPED>
		<BUFFERS_QUEUED public="1" expr="0x1015">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1015</e></m></meta>
		</BUFFERS_QUEUED>
		<BUFFERS_PROCESSED public="1" expr="0x1016">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1016</e></m></meta>
		</BUFFERS_PROCESSED>
		<REFERENCE_DISTANCE public="1" expr="0x1020">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1020</e></m></meta>
		</REFERENCE_DISTANCE>
		<ROLLOFF_FACTOR public="1" expr="0x1021">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1021</e></m></meta>
		</ROLLOFF_FACTOR>
		<CONE_OUTER_GAIN public="1" expr="0x1022">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1022</e></m></meta>
		</CONE_OUTER_GAIN>
		<MAX_DISTANCE public="1" expr="0x1023">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1023</e></m></meta>
		</MAX_DISTANCE>
		<SEC_OFFSET public="1" expr="0x1024">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1024</e></m></meta>
		</SEC_OFFSET>
		<SAMPLE_OFFSET public="1" expr="0x1025">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1025</e></m></meta>
		</SAMPLE_OFFSET>
		<BYTE_OFFSET public="1" expr="0x1026">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1026</e></m></meta>
		</BYTE_OFFSET>
		<SOURCE_TYPE public="1" expr="0x1027">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1027</e></m></meta>
		</SOURCE_TYPE>
		<STATIC public="1" expr="0x1028">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1028</e></m></meta>
		</STATIC>
		<STREAMING public="1" expr="0x1029">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1029</e></m></meta>
		</STREAMING>
		<UNDETERMINED public="1" expr="0x1030">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1030</e></m></meta>
		</UNDETERMINED>
		<FORMAT_MONO8 public="1" expr="0x1100">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1100</e></m></meta>
		</FORMAT_MONO8>
		<FORMAT_MONO16 public="1" expr="0x1101">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1101</e></m></meta>
		</FORMAT_MONO16>
		<FORMAT_STEREO8 public="1" expr="0x1102">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1102</e></m></meta>
		</FORMAT_STEREO8>
		<FORMAT_STEREO16 public="1" expr="0x1103">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1103</e></m></meta>
		</FORMAT_STEREO16>
		<FREQUENCY public="1" expr="0x2001">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2001</e></m></meta>
		</FREQUENCY>
		<BITS public="1" expr="0x2002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2002</e></m></meta>
		</BITS>
		<CHANNELS public="1" expr="0x2003">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2003</e></m></meta>
		</CHANNELS>
		<SIZE public="1" expr="0x2004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2004</e></m></meta>
		</SIZE>
		<NO_ERROR public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_NAME public="1" expr="0xA001">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA001</e></m></meta>
		</INVALID_NAME>
		<INVALID_ENUM public="1" expr="0xA002">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA002</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" expr="0xA003">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA003</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" expr="0xA004">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA004</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" expr="0xA005">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA005</e></m></meta>
		</OUT_OF_MEMORY>
		<VENDOR public="1" expr="0xB001">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB001</e></m></meta>
		</VENDOR>
		<VERSION public="1" expr="0xB002">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB002</e></m></meta>
		</VERSION>
		<RENDERER public="1" expr="0xB003">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB003</e></m></meta>
		</RENDERER>
		<EXTENSIONS public="1" expr="0xB004">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB004</e></m></meta>
		</EXTENSIONS>
		<DOPPLER_FACTOR public="1" expr="0xC000">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC000</e></m></meta>
		</DOPPLER_FACTOR>
		<SPEED_OF_SOUND public="1" expr="0xC003">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC003</e></m></meta>
		</SPEED_OF_SOUND>
		<DOPPLER_VELOCITY public="1" expr="0xC001">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC001</e></m></meta>
		</DOPPLER_VELOCITY>
		<DISTANCE_MODEL public="1" expr="0xD000">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD000</e></m></meta>
		</DISTANCE_MODEL>
		<INVERSE_DISTANCE public="1" expr="0xD001">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD001</e></m></meta>
		</INVERSE_DISTANCE>
		<INVERSE_DISTANCE_CLAMPED public="1" expr="0xD002">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD002</e></m></meta>
		</INVERSE_DISTANCE_CLAMPED>
		<LINEAR_DISTANCE public="1" expr="0xD003">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD003</e></m></meta>
		</LINEAR_DISTANCE>
		<LINEAR_DISTANCE_CLAMPED public="1" expr="0xD004">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD004</e></m></meta>
		</LINEAR_DISTANCE_CLAMPED>
		<EXPONENT_DISTANCE public="1" expr="0xD005">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD005</e></m></meta>
		</EXPONENT_DISTANCE>
		<EXPONENT_DISTANCE_CLAMPED public="1" expr="0xD006">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD006</e></m></meta>
		</EXPONENT_DISTANCE_CLAMPED>
		<REFRESH public="1" expr="0x1008">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1008</e></m></meta>
		</REFRESH>
		<SYNC public="1" expr="0x1009">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1009</e></m></meta>
		</SYNC>
		<MONO_SOURCES public="1" expr="0x1010">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1010</e></m></meta>
		</MONO_SOURCES>
		<STEREO_SOURCES public="1" expr="0x1011">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1011</e></m></meta>
		</STEREO_SOURCES>
		<INVALID_DEVICE public="1" expr="0xA001">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA001</e></m></meta>
		</INVALID_DEVICE>
		<INVALID_CONTEXT public="1" expr="0xA002">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA002</e></m></meta>
		</INVALID_CONTEXT>
		<ATTRIBUTES_SIZE public="1" expr="0x1002">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1002</e></m></meta>
		</ATTRIBUTES_SIZE>
		<ALL_ATTRIBUTES public="1" expr="0x1003">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1003</e></m></meta>
		</ALL_ATTRIBUTES>
		<DEFAULT_DEVICE_SPECIFIER public="1" expr="0x1004">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1004</e></m></meta>
		</DEFAULT_DEVICE_SPECIFIER>
		<DEVICE_SPECIFIER public="1" expr="0x1005">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1005</e></m></meta>
		</DEVICE_SPECIFIER>
		<ENUMERATE_ALL_EXT public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ENUMERATE_ALL_EXT>
		<DEFAULT_ALL_DEVICES_SPECIFIER public="1" expr="0x1012">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1012</e></m></meta>
		</DEFAULT_ALL_DEVICES_SPECIFIER>
		<ALL_DEVICES_SPECIFIER public="1" expr="0x1013">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1013</e></m></meta>
		</ALL_DEVICES_SPECIFIER>
		<bufferData public="1" set="method" line="97"><f a="buffer:format:data:size:freq">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<buffer3f public="1" set="method" line="102"><f a="buffer:param:value1:value2:value3">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></buffer3f>
		<buffer3i public="1" set="method" line="107"><f a="buffer:param:value1:value2:value3">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></buffer3i>
		<bufferf public="1" set="method" line="112"><f a="buffer:param:value">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bufferf>
		<bufferfv public="1" set="method" line="117"><f a="buffer:param:values">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></bufferfv>
		<bufferi public="1" set="method" line="122"><f a="buffer:param:value">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferi>
		<bufferiv public="1" set="method" line="127"><f a="buffer:param:values">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></bufferiv>
		<closeDevice public="1" set="method" line="132"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Bool"/>
</f></closeDevice>
		<createContext public="1" set="method" line="137">
			<f a="device:?attrlist" v=":null">
				<x path="lime.media.openal.ALDevice"/>
				<c path="Array"><x path="Int"/></c>
				<x path="lime.media.openal.ALContext"/>
			</f>
			<meta><m n=":value"><e>{ attrlist : null }</e></m></meta>
		</createContext>
		<createBuffer public="1" set="method" line="142"><f a=""><x path="lime.media.openal.ALBuffer"/></f></createBuffer>
		<createSource public="1" set="method" line="147"><f a=""><x path="lime.media.openal.ALSource"/></f></createSource>
		<deleteBuffer public="1" set="method" line="152"><f a="buffer">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteBuffers public="1" set="method" line="157"><f a="buffers">
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
	<x path="Void"/>
</f></deleteBuffers>
		<deleteSource public="1" set="method" line="162"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></deleteSource>
		<deleteSources public="1" set="method" line="167"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></deleteSources>
		<destroyContext public="1" set="method" line="172"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Void"/>
</f></destroyContext>
		<disable public="1" set="method" line="178"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<distanceModel public="1" set="method" line="183"><f a="distanceModel">
	<x path="Int"/>
	<x path="Void"/>
</f></distanceModel>
		<dopplerFactor public="1" set="method" line="188"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerFactor>
		<dopplerVelocity public="1" set="method" line="193"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerVelocity>
		<enable public="1" set="method" line="198"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<genSource public="1" set="method" line="203">
			<f a=""><x path="lime.media.openal.ALSource"/></f>
			<meta><m n=":deprecated"/></meta>
		</genSource>
		<genSources public="1" set="method" line="208"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
</f></genSources>
		<genBuffer public="1" set="method" line="213">
			<f a=""><x path="lime.media.openal.ALBuffer"/></f>
			<meta><m n=":deprecated"/></meta>
		</genBuffer>
		<genBuffers public="1" set="method" line="218"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
</f></genBuffers>
		<getBoolean public="1" set="method" line="223"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></getBoolean>
		<getBooleanv public="1" set="method" line="228">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Bool"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getBooleanv>
		<getBuffer3f public="1" set="method" line="233"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getBuffer3f>
		<getBuffer3i public="1" set="method" line="238"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getBuffer3i>
		<getBufferf public="1" set="method" line="243"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getBufferf>
		<getBufferfv public="1" set="method" line="248">
			<f a="buffer:param:?count" v="::1">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getBufferfv>
		<getBufferi public="1" set="method" line="253"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getBufferi>
		<getBufferiv public="1" set="method" line="258">
			<f a="buffer:param:?count" v="::1">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getBufferiv>
		<getContextsDevice public="1" set="method" line="263"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="lime.media.openal.ALDevice"/>
</f></getContextsDevice>
		<getCurrentContext public="1" set="method" line="269"><f a=""><x path="lime.media.openal.ALContext"/></f></getCurrentContext>
		<getDouble public="1" set="method" line="274"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getDoublev public="1" set="method" line="279">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getDoublev>
		<getEnumValue public="1" set="method" line="284"><f a="ename">
	<c path="String"/>
	<x path="Int"/>
</f></getEnumValue>
		<getError public="1" set="method" line="289">
			<f a="?device" v="null">
				<x path="lime.media.openal.ALDevice"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ device : null }</e></m></meta>
		</getError>
		<getErrorString public="1" set="method" line="301">
			<f a="?device" v="null">
				<x path="lime.media.openal.ALDevice"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ device : null }</e></m></meta>
		</getErrorString>
		<getFloat public="1" set="method" line="313"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getFloatv public="1" set="method" line="318">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getFloatv>
		<getInteger public="1" set="method" line="323"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getInteger>
		<getIntegerv public="1" set="method" line="328">
			<f a="param:?count:?device" v=":1:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.media.openal.ALDevice"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ device : null, count : 1 }</e></m></meta>
		</getIntegerv>
		<getListener3f public="1" set="method" line="340"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getListener3f>
		<getListener3i public="1" set="method" line="345"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getListener3i>
		<getListenerf public="1" set="method" line="350"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getListenerf>
		<getListenerfv public="1" set="method" line="355">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getListenerfv>
		<getListeneri public="1" set="method" line="360"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getListeneri>
		<getListeneriv public="1" set="method" line="365">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getListeneriv>
		<getProcAddress public="1" set="method" line="370"><f a="fname">
	<c path="String"/>
	<d/>
</f></getProcAddress>
		<getSource3f public="1" set="method" line="375"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getSource3f>
		<getSourcef public="1" set="method" line="380"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getSourcef>
		<getSource3i public="1" set="method" line="385"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getSource3i>
		<getSourcefv public="1" set="method" line="390">
			<f a="source:param:?count" v="::1">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getSourcefv>
		<getSourcei public="1" set="method" line="395"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<d/>
</f></getSourcei>
		<getSourceiv public="1" set="method" line="400">
			<f a="source:param:?count" v="::1">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getSourceiv>
		<getString public="1" set="method" line="405">
			<f a="param:?device" v=":null">
				<x path="Int"/>
				<x path="lime.media.openal.ALDevice"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ device : null }</e></m></meta>
		</getString>
		<isBuffer public="1" set="method" line="417"><f a="buffer">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" line="422"><f a="capability">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isExtensionPresent public="1" set="method" line="427"><f a="extname">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtensionPresent>
		<isSource public="1" set="method" line="432"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Bool"/>
</f></isSource>
		<listener3f public="1" set="method" line="437"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listener3f>
		<listener3i public="1" set="method" line="442"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listener3i>
		<listenerf public="1" set="method" line="447"><f a="param:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listenerf>
		<listenerfv public="1" set="method" line="452"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></listenerfv>
		<listeneri public="1" set="method" line="457"><f a="param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listeneri>
		<listeneriv public="1" set="method" line="462"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></listeneriv>
		<makeContextCurrent public="1" set="method" line="467"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Bool"/>
</f></makeContextCurrent>
		<openDevice public="1" set="method" line="472">
			<f a="?deviceName" v="null">
				<c path="String"/>
				<x path="lime.media.openal.ALDevice"/>
			</f>
			<meta><m n=":value"><e>{ deviceName : null }</e></m></meta>
		</openDevice>
		<pauseDevice public="1" set="method" line="477"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Void"/>
</f></pauseDevice>
		<processContext public="1" set="method" line="482"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Void"/>
</f></processContext>
		<resumeDevice public="1" set="method" line="487"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Void"/>
</f></resumeDevice>
		<source3f public="1" set="method" line="492"><f a="source:param:value1:value2:value3">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></source3f>
		<source3i public="1" set="method" line="497"><f a="source:param:value1:value2:value3">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></source3i>
		<sourcef public="1" set="method" line="502"><f a="source:param:value">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sourcef>
		<sourcefv public="1" set="method" line="507"><f a="source:param:values">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></sourcefv>
		<sourcei public="1" set="method" line="512"><f a="source:param:value">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></sourcei>
		<sourceiv public="1" set="method" line="517"><f a="source:param:values">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceiv>
		<sourcePlay public="1" set="method" line="522"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourcePlay>
		<sourcePlayv public="1" set="method" line="527"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourcePlayv>
		<sourceStop public="1" set="method" line="532"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourceStop>
		<sourceStopv public="1" set="method" line="537"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourceStopv>
		<sourceRewind public="1" set="method" line="542"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourceRewind>
		<sourceRewindv public="1" set="method" line="547"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourceRewindv>
		<sourcePause public="1" set="method" line="552"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourcePause>
		<sourcePausev public="1" set="method" line="557"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourcePausev>
		<sourceQueueBuffer public="1" set="method" line="562"><f a="source:buffer">
	<x path="lime.media.openal.ALSource"/>
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Void"/>
</f></sourceQueueBuffer>
		<sourceQueueBuffers public="1" set="method" line="567"><f a="source:nb:buffers">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
	<x path="Void"/>
</f></sourceQueueBuffers>
		<sourceUnqueueBuffer public="1" set="method" line="572"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="lime.media.openal.ALBuffer"/>
</f></sourceUnqueueBuffer>
		<sourceUnqueueBuffers public="1" set="method" line="577"><f a="source:nb">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
</f></sourceUnqueueBuffers>
		<speedOfSound public="1" set="method" line="582"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></speedOfSound>
		<suspendContext public="1" set="method" line="587"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Void"/>
</f></suspendContext>
		<new set="method" line="94">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.media.WebAudioContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/WebAudioContext.hx">
		<activeSourceCount public="1" set="null"><x path="Int"/></activeSourceCount>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<destination public="1" set="null"><d/></destination>
		<listener public="1" set="null"><d/></listener>
		<oncomplete public="1"><d/></oncomplete>
		<sampleRate public="1" set="null"><x path="Float"/></sampleRate>
		<createAnalyser public="1" set="method" line="17"><f a=""><d/></f></createAnalyser>
		<createBiquadFilter public="1" set="method" line="22"><f a=""><d/></f></createBiquadFilter>
		<createBuffer public="1" set="method" line="28">
			<f a="buffer:mixToMono">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<overloads><createBuffer public="1" set="method"><f a="numberOfChannels:numberOfFrames:sampleRate">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<d/>
</f></createBuffer></overloads>
		</createBuffer>
		<createBufferSource public="1" set="method" line="33"><f a=""><d/></f></createBufferSource>
		<createChannelMerger public="1" set="method" line="38"><f a="?numberOfInputs">
	<x path="Int"/>
	<d/>
</f></createChannelMerger>
		<createChannelSplitter public="1" set="method" line="43"><f a="?numberOfOutputs">
	<x path="Int"/>
	<d/>
</f></createChannelSplitter>
		<createConvolver public="1" set="method" line="48"><f a=""><d/></f></createConvolver>
		<createDelay public="1" set="method" line="53"><f a="?maxDelayTime">
	<x path="Float"/>
	<d/>
</f></createDelay>
		<createDynamicsCompressor public="1" set="method" line="58"><f a=""><d/></f></createDynamicsCompressor>
		<createGain public="1" set="method" line="63"><f a=""><d/></f></createGain>
		<createMediaElementSource public="1" set="method" line="68"><f a="mediaElement">
	<d/>
	<d/>
</f></createMediaElementSource>
		<createMediaStreamSource public="1" set="method" line="73"><f a="mediaStream">
	<d/>
	<d/>
</f></createMediaStreamSource>
		<createOscillator public="1" set="method" line="78"><f a=""><d/></f></createOscillator>
		<createPanner public="1" set="method" line="83"><f a=""><d/></f></createPanner>
		<createScriptProcessor public="1" set="method" line="88"><f a="bufferSize:?numberOfInputChannels:?numberOfOutputChannels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></createScriptProcessor>
		<createWaveShaper public="1" set="method" line="93"><f a=""><d/></f></createWaveShaper>
		<createWaveTable public="1" set="method" line="98"><f a="real:imag">
	<d/>
	<d/>
	<d/>
</f></createWaveTable>
		<decodeAudioData public="1" set="method" line="103"><f a="audioData:successCallback:?errorCallback">
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></decodeAudioData>
		<startRendering public="1" set="method" line="105"><f a=""><x path="Void"/></f></startRendering>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="lime.media.openal.AL" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/AL.hx">
		<NONE public="1" get="inline" set="null" expr="0" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FALSE public="1" get="inline" set="null" expr="0" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FALSE>
		<TRUE public="1" get="inline" set="null" expr="1" line="17" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TRUE>
		<SOURCE_RELATIVE public="1" get="inline" set="null" expr="0x202" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x202</e></m></meta>
		</SOURCE_RELATIVE>
		<CONE_INNER_ANGLE public="1" get="inline" set="null" expr="0x1001" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1001</e></m></meta>
		</CONE_INNER_ANGLE>
		<CONE_OUTER_ANGLE public="1" get="inline" set="null" expr="0x1002" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1002</e></m></meta>
		</CONE_OUTER_ANGLE>
		<PITCH public="1" get="inline" set="null" expr="0x1003" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1003</e></m></meta>
		</PITCH>
		<POSITION public="1" get="inline" set="null" expr="0x1004" line="22" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1004</e></m></meta>
		</POSITION>
		<DIRECTION public="1" get="inline" set="null" expr="0x1005" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1005</e></m></meta>
		</DIRECTION>
		<VELOCITY public="1" get="inline" set="null" expr="0x1006" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1006</e></m></meta>
		</VELOCITY>
		<LOOPING public="1" get="inline" set="null" expr="0x1007" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1007</e></m></meta>
		</LOOPING>
		<BUFFER public="1" get="inline" set="null" expr="0x1009" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1009</e></m></meta>
		</BUFFER>
		<GAIN public="1" get="inline" set="null" expr="0x100A" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100A</e></m></meta>
		</GAIN>
		<MIN_GAIN public="1" get="inline" set="null" expr="0x100D" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100D</e></m></meta>
		</MIN_GAIN>
		<MAX_GAIN public="1" get="inline" set="null" expr="0x100E" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100E</e></m></meta>
		</MAX_GAIN>
		<ORIENTATION public="1" get="inline" set="null" expr="0x100F" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100F</e></m></meta>
		</ORIENTATION>
		<SOURCE_STATE public="1" get="inline" set="null" expr="0x1010" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1010</e></m></meta>
		</SOURCE_STATE>
		<INITIAL public="1" get="inline" set="null" expr="0x1011" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1011</e></m></meta>
		</INITIAL>
		<PLAYING public="1" get="inline" set="null" expr="0x1012" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1012</e></m></meta>
		</PLAYING>
		<PAUSED public="1" get="inline" set="null" expr="0x1013" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1013</e></m></meta>
		</PAUSED>
		<STOPPED public="1" get="inline" set="null" expr="0x1014" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1014</e></m></meta>
		</STOPPED>
		<BUFFERS_QUEUED public="1" get="inline" set="null" expr="0x1015" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1015</e></m></meta>
		</BUFFERS_QUEUED>
		<BUFFERS_PROCESSED public="1" get="inline" set="null" expr="0x1016" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1016</e></m></meta>
		</BUFFERS_PROCESSED>
		<REFERENCE_DISTANCE public="1" get="inline" set="null" expr="0x1020" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1020</e></m></meta>
		</REFERENCE_DISTANCE>
		<ROLLOFF_FACTOR public="1" get="inline" set="null" expr="0x1021" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1021</e></m></meta>
		</ROLLOFF_FACTOR>
		<CONE_OUTER_GAIN public="1" get="inline" set="null" expr="0x1022" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1022</e></m></meta>
		</CONE_OUTER_GAIN>
		<MAX_DISTANCE public="1" get="inline" set="null" expr="0x1023" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1023</e></m></meta>
		</MAX_DISTANCE>
		<SEC_OFFSET public="1" get="inline" set="null" expr="0x1024" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1024</e></m></meta>
		</SEC_OFFSET>
		<SAMPLE_OFFSET public="1" get="inline" set="null" expr="0x1025" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1025</e></m></meta>
		</SAMPLE_OFFSET>
		<BYTE_OFFSET public="1" get="inline" set="null" expr="0x1026" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1026</e></m></meta>
		</BYTE_OFFSET>
		<SOURCE_TYPE public="1" get="inline" set="null" expr="0x1027" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1027</e></m></meta>
		</SOURCE_TYPE>
		<STATIC public="1" get="inline" set="null" expr="0x1028" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1028</e></m></meta>
		</STATIC>
		<STREAMING public="1" get="inline" set="null" expr="0x1029" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1029</e></m></meta>
		</STREAMING>
		<UNDETERMINED public="1" get="inline" set="null" expr="0x1030" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1030</e></m></meta>
		</UNDETERMINED>
		<FORMAT_MONO8 public="1" get="inline" set="null" expr="0x1100" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1100</e></m></meta>
		</FORMAT_MONO8>
		<FORMAT_MONO16 public="1" get="inline" set="null" expr="0x1101" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1101</e></m></meta>
		</FORMAT_MONO16>
		<FORMAT_STEREO8 public="1" get="inline" set="null" expr="0x1102" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1102</e></m></meta>
		</FORMAT_STEREO8>
		<FORMAT_STEREO16 public="1" get="inline" set="null" expr="0x1103" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1103</e></m></meta>
		</FORMAT_STEREO16>
		<FREQUENCY public="1" get="inline" set="null" expr="0x2001" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2001</e></m></meta>
		</FREQUENCY>
		<BITS public="1" get="inline" set="null" expr="0x2002" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2002</e></m></meta>
		</BITS>
		<CHANNELS public="1" get="inline" set="null" expr="0x2003" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2003</e></m></meta>
		</CHANNELS>
		<SIZE public="1" get="inline" set="null" expr="0x2004" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2004</e></m></meta>
		</SIZE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_NAME public="1" get="inline" set="null" expr="0xA001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA001</e></m></meta>
		</INVALID_NAME>
		<INVALID_ENUM public="1" get="inline" set="null" expr="0xA002" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA002</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="0xA003" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA003</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="0xA004" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA004</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="0xA005" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA005</e></m></meta>
		</OUT_OF_MEMORY>
		<VENDOR public="1" get="inline" set="null" expr="0xB001" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB001</e></m></meta>
		</VENDOR>
		<VERSION public="1" get="inline" set="null" expr="0xB002" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB002</e></m></meta>
		</VERSION>
		<RENDERER public="1" get="inline" set="null" expr="0xB003" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB003</e></m></meta>
		</RENDERER>
		<EXTENSIONS public="1" get="inline" set="null" expr="0xB004" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB004</e></m></meta>
		</EXTENSIONS>
		<DOPPLER_FACTOR public="1" get="inline" set="null" expr="0xC000" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC000</e></m></meta>
		</DOPPLER_FACTOR>
		<SPEED_OF_SOUND public="1" get="inline" set="null" expr="0xC003" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC003</e></m></meta>
		</SPEED_OF_SOUND>
		<DOPPLER_VELOCITY public="1" get="inline" set="null" expr="0xC001" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC001</e></m></meta>
		</DOPPLER_VELOCITY>
		<DISTANCE_MODEL public="1" get="inline" set="null" expr="0xD000" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD000</e></m></meta>
		</DISTANCE_MODEL>
		<INVERSE_DISTANCE public="1" get="inline" set="null" expr="0xD001" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD001</e></m></meta>
		</INVERSE_DISTANCE>
		<INVERSE_DISTANCE_CLAMPED public="1" get="inline" set="null" expr="0xD002" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD002</e></m></meta>
		</INVERSE_DISTANCE_CLAMPED>
		<LINEAR_DISTANCE public="1" get="inline" set="null" expr="0xD003" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD003</e></m></meta>
		</LINEAR_DISTANCE>
		<LINEAR_DISTANCE_CLAMPED public="1" get="inline" set="null" expr="0xD004" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD004</e></m></meta>
		</LINEAR_DISTANCE_CLAMPED>
		<EXPONENT_DISTANCE public="1" get="inline" set="null" expr="0xD005" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD005</e></m></meta>
		</EXPONENT_DISTANCE>
		<EXPONENT_DISTANCE_CLAMPED public="1" get="inline" set="null" expr="0xD006" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD006</e></m></meta>
		</EXPONENT_DISTANCE_CLAMPED>
		<METERS_PER_UNIT public="1" get="inline" set="null" expr="0x20004" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20004</e></m></meta>
		</METERS_PER_UNIT>
		<DIRECT_FILTER public="1" get="inline" set="null" expr="0x20005" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20005</e></m></meta>
		</DIRECT_FILTER>
		<AUXILIARY_SEND_FILTER public="1" get="inline" set="null" expr="0x20006" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20006</e></m></meta>
		</AUXILIARY_SEND_FILTER>
		<AIR_ABSORPTION_FACTOR public="1" get="inline" set="null" expr="0x20007" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20007</e></m></meta>
		</AIR_ABSORPTION_FACTOR>
		<ROOM_ROLLOFF_FACTOR public="1" get="inline" set="null" expr="0x20008" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20008</e></m></meta>
		</ROOM_ROLLOFF_FACTOR>
		<CONE_OUTER_GAINHF public="1" get="inline" set="null" expr="0x20009" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20009</e></m></meta>
		</CONE_OUTER_GAINHF>
		<DIRECT_FILTER_GAINHF_AUTO public="1" get="inline" set="null" expr="0x2000A" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2000A</e></m></meta>
		</DIRECT_FILTER_GAINHF_AUTO>
		<AUXILIARY_SEND_FILTER_GAIN_AUTO public="1" get="inline" set="null" expr="0x2000B" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2000B</e></m></meta>
		</AUXILIARY_SEND_FILTER_GAIN_AUTO>
		<AUXILIARY_SEND_FILTER_GAINHF_AUTO public="1" get="inline" set="null" expr="0x2000C" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2000C</e></m></meta>
		</AUXILIARY_SEND_FILTER_GAINHF_AUTO>
		<REVERB_DENSITY public="1" get="inline" set="null" expr="0x0001" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</REVERB_DENSITY>
		<REVERB_DIFFUSION public="1" get="inline" set="null" expr="0x0002" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</REVERB_DIFFUSION>
		<REVERB_GAIN public="1" get="inline" set="null" expr="0x0003" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</REVERB_GAIN>
		<REVERB_GAINHF public="1" get="inline" set="null" expr="0x0004" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</REVERB_GAINHF>
		<REVERB_DECAY_TIME public="1" get="inline" set="null" expr="0x0005" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</REVERB_DECAY_TIME>
		<REVERB_DECAY_HFRATIO public="1" get="inline" set="null" expr="0x0006" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</REVERB_DECAY_HFRATIO>
		<REVERB_REFLECTIONS_GAIN public="1" get="inline" set="null" expr="0x0007" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</REVERB_REFLECTIONS_GAIN>
		<REVERB_REFLECTIONS_DELAY public="1" get="inline" set="null" expr="0x0008" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</REVERB_REFLECTIONS_DELAY>
		<REVERB_LATE_REVERB_GAIN public="1" get="inline" set="null" expr="0x0009" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</REVERB_LATE_REVERB_GAIN>
		<REVERB_LATE_REVERB_DELAY public="1" get="inline" set="null" expr="0x000A" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</REVERB_LATE_REVERB_DELAY>
		<REVERB_AIR_ABSORPTION_GAINHF public="1" get="inline" set="null" expr="0x000B" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000B</e></m></meta>
		</REVERB_AIR_ABSORPTION_GAINHF>
		<REVERB_ROOM_ROLLOFF_FACTOR public="1" get="inline" set="null" expr="0x000C" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000C</e></m></meta>
		</REVERB_ROOM_ROLLOFF_FACTOR>
		<REVERB_DECAY_HFLIMIT public="1" get="inline" set="null" expr="0x000D" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000D</e></m></meta>
		</REVERB_DECAY_HFLIMIT>
		<EAXREVERB_DENSITY public="1" get="inline" set="null" expr="0x0001" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EAXREVERB_DENSITY>
		<EAXREVERB_DIFFUSION public="1" get="inline" set="null" expr="0x0002" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EAXREVERB_DIFFUSION>
		<EAXREVERB_GAIN public="1" get="inline" set="null" expr="0x0003" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EAXREVERB_GAIN>
		<EAXREVERB_GAINHF public="1" get="inline" set="null" expr="0x0004" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</EAXREVERB_GAINHF>
		<EAXREVERB_GAINLF public="1" get="inline" set="null" expr="0x0005" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</EAXREVERB_GAINLF>
		<EAXREVERB_DECAY_TIME public="1" get="inline" set="null" expr="0x0006" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</EAXREVERB_DECAY_TIME>
		<EAXREVERB_DECAY_HFRATIO public="1" get="inline" set="null" expr="0x0007" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</EAXREVERB_DECAY_HFRATIO>
		<EAXREVERB_DECAY_LFRATIO public="1" get="inline" set="null" expr="0x0008" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</EAXREVERB_DECAY_LFRATIO>
		<EAXREVERB_REFLECTIONS_GAIN public="1" get="inline" set="null" expr="0x0009" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</EAXREVERB_REFLECTIONS_GAIN>
		<EAXREVERB_REFLECTIONS_DELAY public="1" get="inline" set="null" expr="0x000A" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</EAXREVERB_REFLECTIONS_DELAY>
		<EAXREVERB_REFLECTIONS_PAN public="1" get="inline" set="null" expr="0x000B" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000B</e></m></meta>
		</EAXREVERB_REFLECTIONS_PAN>
		<EAXREVERB_LATE_REVERB_GAIN public="1" get="inline" set="null" expr="0x000C" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000C</e></m></meta>
		</EAXREVERB_LATE_REVERB_GAIN>
		<EAXREVERB_LATE_REVERB_DELAY public="1" get="inline" set="null" expr="0x000D" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000D</e></m></meta>
		</EAXREVERB_LATE_REVERB_DELAY>
		<EAXREVERB_LATE_REVERB_PAN public="1" get="inline" set="null" expr="0x000E" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000E</e></m></meta>
		</EAXREVERB_LATE_REVERB_PAN>
		<EAXREVERB_ECHO_TIME public="1" get="inline" set="null" expr="0x000F" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000F</e></m></meta>
		</EAXREVERB_ECHO_TIME>
		<EAXREVERB_ECHO_DEPTH public="1" get="inline" set="null" expr="0x0010" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0010</e></m></meta>
		</EAXREVERB_ECHO_DEPTH>
		<EAXREVERB_MODULATION_TIME public="1" get="inline" set="null" expr="0x0011" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0011</e></m></meta>
		</EAXREVERB_MODULATION_TIME>
		<EAXREVERB_MODULATION_DEPTH public="1" get="inline" set="null" expr="0x0012" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0012</e></m></meta>
		</EAXREVERB_MODULATION_DEPTH>
		<EAXREVERB_AIR_ABSORPTION_GAINHF public="1" get="inline" set="null" expr="0x0013" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0013</e></m></meta>
		</EAXREVERB_AIR_ABSORPTION_GAINHF>
		<EAXREVERB_HFREFERENCE public="1" get="inline" set="null" expr="0x0014" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0014</e></m></meta>
		</EAXREVERB_HFREFERENCE>
		<EAXREVERB_LFREFERENCE public="1" get="inline" set="null" expr="0x0015" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0015</e></m></meta>
		</EAXREVERB_LFREFERENCE>
		<EAXREVERB_ROOM_ROLLOFF_FACTOR public="1" get="inline" set="null" expr="0x0016" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0016</e></m></meta>
		</EAXREVERB_ROOM_ROLLOFF_FACTOR>
		<EAXREVERB_DECAY_HFLIMIT public="1" get="inline" set="null" expr="0x0017" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0017</e></m></meta>
		</EAXREVERB_DECAY_HFLIMIT>
		<CHORUS_WAVEFORM public="1" get="inline" set="null" expr="0x0001" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</CHORUS_WAVEFORM>
		<CHORUS_PHASE public="1" get="inline" set="null" expr="0x0002" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</CHORUS_PHASE>
		<CHORUS_RATE public="1" get="inline" set="null" expr="0x0003" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</CHORUS_RATE>
		<CHORUS_DEPTH public="1" get="inline" set="null" expr="0x0004" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</CHORUS_DEPTH>
		<CHORUS_FEEDBACK public="1" get="inline" set="null" expr="0x0005" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</CHORUS_FEEDBACK>
		<CHORUS_DELAY public="1" get="inline" set="null" expr="0x0006" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</CHORUS_DELAY>
		<DISTORTION_EDGE public="1" get="inline" set="null" expr="0x0001" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</DISTORTION_EDGE>
		<DISTORTION_GAIN public="1" get="inline" set="null" expr="0x0002" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</DISTORTION_GAIN>
		<DISTORTION_LOWPASS_CUTOFF public="1" get="inline" set="null" expr="0x0003" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</DISTORTION_LOWPASS_CUTOFF>
		<DISTORTION_EQCENTER public="1" get="inline" set="null" expr="0x0004" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</DISTORTION_EQCENTER>
		<DISTORTION_EQBANDWIDTH public="1" get="inline" set="null" expr="0x0005" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</DISTORTION_EQBANDWIDTH>
		<ECHO_DELAY public="1" get="inline" set="null" expr="0x0001" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</ECHO_DELAY>
		<ECHO_LRDELAY public="1" get="inline" set="null" expr="0x0002" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</ECHO_LRDELAY>
		<ECHO_DAMPING public="1" get="inline" set="null" expr="0x0003" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</ECHO_DAMPING>
		<ECHO_FEEDBACK public="1" get="inline" set="null" expr="0x0004" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</ECHO_FEEDBACK>
		<ECHO_SPREAD public="1" get="inline" set="null" expr="0x0005" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</ECHO_SPREAD>
		<FLANGER_WAVEFORM public="1" get="inline" set="null" expr="0x0001" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</FLANGER_WAVEFORM>
		<FLANGER_PHASE public="1" get="inline" set="null" expr="0x0002" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</FLANGER_PHASE>
		<FLANGER_RATE public="1" get="inline" set="null" expr="0x0003" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</FLANGER_RATE>
		<FLANGER_DEPTH public="1" get="inline" set="null" expr="0x0004" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</FLANGER_DEPTH>
		<FLANGER_FEEDBACK public="1" get="inline" set="null" expr="0x0005" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</FLANGER_FEEDBACK>
		<FLANGER_DELAY public="1" get="inline" set="null" expr="0x0006" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</FLANGER_DELAY>
		<FREQUENCY_SHIFTER_FREQUENCY public="1" get="inline" set="null" expr="0x0001" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</FREQUENCY_SHIFTER_FREQUENCY>
		<FREQUENCY_SHIFTER_LEFT_DIRECTION public="1" get="inline" set="null" expr="0x0002" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</FREQUENCY_SHIFTER_LEFT_DIRECTION>
		<FREQUENCY_SHIFTER_RIGHT_DIRECTION public="1" get="inline" set="null" expr="0x0003" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</FREQUENCY_SHIFTER_RIGHT_DIRECTION>
		<VOCAL_MORPHER_PHONEMEA public="1" get="inline" set="null" expr="0x0001" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</VOCAL_MORPHER_PHONEMEA>
		<VOCAL_MORPHER_PHONEMEA_COARSE_TUNING public="1" get="inline" set="null" expr="0x0002" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</VOCAL_MORPHER_PHONEMEA_COARSE_TUNING>
		<VOCAL_MORPHER_PHONEMEB public="1" get="inline" set="null" expr="0x0003" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</VOCAL_MORPHER_PHONEMEB>
		<VOCAL_MORPHER_PHONEMEB_COARSE_TUNING public="1" get="inline" set="null" expr="0x0004" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</VOCAL_MORPHER_PHONEMEB_COARSE_TUNING>
		<VOCAL_MORPHER_WAVEFORM public="1" get="inline" set="null" expr="0x0005" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</VOCAL_MORPHER_WAVEFORM>
		<VOCAL_MORPHER_RATE public="1" get="inline" set="null" expr="0x0006" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</VOCAL_MORPHER_RATE>
		<PITCH_SHIFTER_COARSE_TUNE public="1" get="inline" set="null" expr="0x0001" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</PITCH_SHIFTER_COARSE_TUNE>
		<PITCH_SHIFTER_FINE_TUNE public="1" get="inline" set="null" expr="0x0002" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</PITCH_SHIFTER_FINE_TUNE>
		<RING_MODULATOR_FREQUENCY public="1" get="inline" set="null" expr="0x0001" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</RING_MODULATOR_FREQUENCY>
		<RING_MODULATOR_HIGHPASS_CUTOFF public="1" get="inline" set="null" expr="0x0002" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</RING_MODULATOR_HIGHPASS_CUTOFF>
		<RING_MODULATOR_WAVEFORM public="1" get="inline" set="null" expr="0x0003" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</RING_MODULATOR_WAVEFORM>
		<AUTOWAH_ATTACK_TIME public="1" get="inline" set="null" expr="0x0001" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</AUTOWAH_ATTACK_TIME>
		<AUTOWAH_RELEASE_TIME public="1" get="inline" set="null" expr="0x0002" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</AUTOWAH_RELEASE_TIME>
		<AUTOWAH_RESONANCE public="1" get="inline" set="null" expr="0x0003" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</AUTOWAH_RESONANCE>
		<AUTOWAH_PEAK_GAIN public="1" get="inline" set="null" expr="0x0004" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</AUTOWAH_PEAK_GAIN>
		<COMPRESSOR_ONOFF public="1" get="inline" set="null" expr="0x0001" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</COMPRESSOR_ONOFF>
		<EQUALIZER_LOW_GAIN public="1" get="inline" set="null" expr="0x0001" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EQUALIZER_LOW_GAIN>
		<EQUALIZER_LOW_CUTOFF public="1" get="inline" set="null" expr="0x0002" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EQUALIZER_LOW_CUTOFF>
		<EQUALIZER_MID1_GAIN public="1" get="inline" set="null" expr="0x0003" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EQUALIZER_MID1_GAIN>
		<EQUALIZER_MID1_CENTER public="1" get="inline" set="null" expr="0x0004" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</EQUALIZER_MID1_CENTER>
		<EQUALIZER_MID1_WIDTH public="1" get="inline" set="null" expr="0x0005" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</EQUALIZER_MID1_WIDTH>
		<EQUALIZER_MID2_GAIN public="1" get="inline" set="null" expr="0x0006" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</EQUALIZER_MID2_GAIN>
		<EQUALIZER_MID2_CENTER public="1" get="inline" set="null" expr="0x0007" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</EQUALIZER_MID2_CENTER>
		<EQUALIZER_MID2_WIDTH public="1" get="inline" set="null" expr="0x0008" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</EQUALIZER_MID2_WIDTH>
		<EQUALIZER_HIGH_GAIN public="1" get="inline" set="null" expr="0x0009" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</EQUALIZER_HIGH_GAIN>
		<EQUALIZER_HIGH_CUTOFF public="1" get="inline" set="null" expr="0x000A" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</EQUALIZER_HIGH_CUTOFF>
		<EFFECT_FIRST_PARAMETER public="1" get="inline" set="null" expr="0x0000" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</EFFECT_FIRST_PARAMETER>
		<EFFECT_LAST_PARAMETER public="1" get="inline" set="null" expr="0x8000" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</EFFECT_LAST_PARAMETER>
		<EFFECT_TYPE public="1" get="inline" set="null" expr="0x8001" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8001</e></m></meta>
		</EFFECT_TYPE>
		<EFFECT_NULL public="1" get="inline" set="null" expr="0x0000" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</EFFECT_NULL>
		<EFFECT_EAXREVERB public="1" get="inline" set="null" expr="0x8000" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</EFFECT_EAXREVERB>
		<EFFECT_REVERB public="1" get="inline" set="null" expr="0x0001" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EFFECT_REVERB>
		<EFFECT_CHORUS public="1" get="inline" set="null" expr="0x0002" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EFFECT_CHORUS>
		<EFFECT_DISTORTION public="1" get="inline" set="null" expr="0x0003" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EFFECT_DISTORTION>
		<EFFECT_ECHO public="1" get="inline" set="null" expr="0x0004" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</EFFECT_ECHO>
		<EFFECT_FLANGER public="1" get="inline" set="null" expr="0x0005" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</EFFECT_FLANGER>
		<EFFECT_FREQUENCY_SHIFTER public="1" get="inline" set="null" expr="0x0006" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</EFFECT_FREQUENCY_SHIFTER>
		<EFFECT_VOCAL_MORPHER public="1" get="inline" set="null" expr="0x0007" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</EFFECT_VOCAL_MORPHER>
		<EFFECT_PITCH_SHIFTER public="1" get="inline" set="null" expr="0x0008" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</EFFECT_PITCH_SHIFTER>
		<EFFECT_RING_MODULATOR public="1" get="inline" set="null" expr="0x0009" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</EFFECT_RING_MODULATOR>
		<FFECT_AUTOWAH public="1" get="inline" set="null" expr="0x000A" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</FFECT_AUTOWAH>
		<EFFECT_COMPRESSOR public="1" get="inline" set="null" expr="0x000B" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000B</e></m></meta>
		</EFFECT_COMPRESSOR>
		<EFFECT_EQUALIZER public="1" get="inline" set="null" expr="0x000C" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000C</e></m></meta>
		</EFFECT_EQUALIZER>
		<EFFECTSLOT_EFFECT public="1" get="inline" set="null" expr="0x0001" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EFFECTSLOT_EFFECT>
		<EFFECTSLOT_GAIN public="1" get="inline" set="null" expr="0x0002" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EFFECTSLOT_GAIN>
		<EFFECTSLOT_AUXILIARY_SEND_AUTO public="1" get="inline" set="null" expr="0x0003" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EFFECTSLOT_AUXILIARY_SEND_AUTO>
		<LOWPASS_GAIN public="1" get="inline" set="null" expr="0x0001" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</LOWPASS_GAIN>
		<LOWPASS_GAINHF public="1" get="inline" set="null" expr="0x0002" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</LOWPASS_GAINHF>
		<HIGHPASS_GAIN public="1" get="inline" set="null" expr="0x0001" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</HIGHPASS_GAIN>
		<HIGHPASS_GAINLF public="1" get="inline" set="null" expr="0x0002" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</HIGHPASS_GAINLF>
		<BANDPASS_GAIN public="1" get="inline" set="null" expr="0x0001" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</BANDPASS_GAIN>
		<BANDPASS_GAINLF public="1" get="inline" set="null" expr="0x0002" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</BANDPASS_GAINLF>
		<BANDPASS_GAINHF public="1" get="inline" set="null" expr="0x0003" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</BANDPASS_GAINHF>
		<FILTER_FIRST_PARAMETER public="1" get="inline" set="null" expr="0x0000" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</FILTER_FIRST_PARAMETER>
		<FILTER_LAST_PARAMETER public="1" get="inline" set="null" expr="0x8000" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</FILTER_LAST_PARAMETER>
		<FILTER_TYPE public="1" get="inline" set="null" expr="0x8001" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8001</e></m></meta>
		</FILTER_TYPE>
		<FILTER_NULL public="1" get="inline" set="null" expr="0x0000" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</FILTER_NULL>
		<FILTER_LOWPASS public="1" get="inline" set="null" expr="0x0001" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</FILTER_LOWPASS>
		<FILTER_HIGHPASS public="1" get="inline" set="null" expr="0x0002" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</FILTER_HIGHPASS>
		<FILTER_BANDPASS public="1" get="inline" set="null" expr="0x0003" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</FILTER_BANDPASS>
		<removeDirectFilter public="1" set="method" line="236" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></removeDirectFilter>
		<removeSend public="1" set="method" line="243" static="1"><f a="source:index">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeSend>
		<auxf public="1" set="method" line="250" static="1"><f a="aux:param:value">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></auxf>
		<auxfv public="1" set="method" line="257" static="1"><f a="aux:param:values">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></auxfv>
		<auxi public="1" set="method" line="270" static="1"><f a="aux:param:value">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></auxi>
		<auxiv public="1" set="method" line="277" static="1"><f a="aux:param:values">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></auxiv>
		<bufferData public="1" set="method" line="290" static="1"><f a="buffer:format:data:size:freq">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<buffer3f public="1" set="method" line="297" static="1"><f a="buffer:param:value1:value2:value3">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></buffer3f>
		<buffer3i public="1" set="method" line="304" static="1"><f a="buffer:param:value1:value2:value3">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></buffer3i>
		<bufferf public="1" set="method" line="311" static="1"><f a="buffer:param:value">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bufferf>
		<bufferfv public="1" set="method" line="318" static="1"><f a="buffer:param:values">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></bufferfv>
		<bufferi public="1" set="method" line="331" static="1"><f a="buffer:param:value">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferi>
		<bufferiv public="1" set="method" line="338" static="1"><f a="buffer:param:values">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></bufferiv>
		<createAux public="1" set="method" line="351" static="1"><f a=""><x path="lime.media.openal.ALAuxiliaryEffectSlot"/></f></createAux>
		<createBuffer public="1" set="method" line="360" static="1"><f a=""><x path="lime.media.openal.ALBuffer"/></f></createBuffer>
		<createEffect public="1" set="method" line="369" static="1"><f a=""><x path="lime.media.openal.ALEffect"/></f></createEffect>
		<createFilter public="1" set="method" line="378" static="1"><f a=""><x path="lime.media.openal.ALFilter"/></f></createFilter>
		<createSource public="1" set="method" line="387" static="1"><f a=""><x path="lime.media.openal.ALSource"/></f></createSource>
		<deleteBuffer public="1" set="method" line="396" static="1"><f a="buffer">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteBuffers public="1" set="method" line="403" static="1"><f a="buffers">
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
	<x path="Void"/>
</f></deleteBuffers>
		<deleteSource public="1" set="method" line="416" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></deleteSource>
		<deleteSources public="1" set="method" line="423" static="1"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></deleteSources>
		<disable public="1" set="method" line="436" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<distanceModel public="1" set="method" line="443" static="1"><f a="distanceModel">
	<x path="Int"/>
	<x path="Void"/>
</f></distanceModel>
		<dopplerFactor public="1" set="method" line="450" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerFactor>
		<dopplerVelocity public="1" set="method" line="457" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerVelocity>
		<effectf public="1" set="method" line="464" static="1"><f a="effect:param:value">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></effectf>
		<effectfv public="1" set="method" line="471" static="1"><f a="effect:param:values">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></effectfv>
		<effecti public="1" set="method" line="484" static="1"><f a="effect:param:value">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></effecti>
		<effectiv public="1" set="method" line="491" static="1"><f a="effect:param:values">
	<x path="lime.system.CFFIPointer"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></effectiv>
		<enable public="1" set="method" line="504" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<genSource public="1" set="method" line="511" static="1">
			<f a=""><x path="lime.media.openal.ALSource"/></f>
			<meta><m n=":deprecated"><e>"genSource has been renamed to 'createSource' for consistency with OpenGL"</e></m></meta>
		</genSource>
		<genSources public="1" set="method" line="520" static="1"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
</f></genSources>
		<genBuffer public="1" set="method" line="538" static="1">
			<f a=""><x path="lime.media.openal.ALBuffer"/></f>
			<meta><m n=":deprecated"><e>"genBuffer has been renamed to 'createBuffer' for consistency with OpenGL"</e></m></meta>
		</genBuffer>
		<genBuffers public="1" set="method" line="547" static="1"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
</f></genBuffers>
		<getBoolean public="1" set="method" line="565" static="1"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></getBoolean>
		<getBooleanv public="1" set="method" line="574" static="1">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Bool"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getBooleanv>
		<getBuffer3f public="1" set="method" line="592" static="1"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getBuffer3f>
		<getBuffer3i public="1" set="method" line="610" static="1"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getBuffer3i>
		<getBufferf public="1" set="method" line="628" static="1"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getBufferf>
		<getBufferfv public="1" set="method" line="637" static="1">
			<f a="buffer:param:?count" v="::1">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getBufferfv>
		<getBufferi public="1" set="method" line="655" static="1"><f a="buffer:param">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getBufferi>
		<getBufferiv public="1" set="method" line="664" static="1">
			<f a="buffer:param:?count" v="::1">
				<x path="lime.media.openal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getBufferiv>
		<getDouble public="1" set="method" line="682" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getDoublev public="1" set="method" line="691" static="1">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getDoublev>
		<getEnumValue public="1" set="method" line="709" static="1"><f a="ename">
	<c path="String"/>
	<x path="Int"/>
</f></getEnumValue>
		<getError public="1" set="method" line="718" static="1"><f a=""><x path="Int"/></f></getError>
		<getErrorString public="1" set="method" line="727" static="1"><f a=""><c path="String"/></f></getErrorString>
		<getFilteri public="1" set="method" line="740" static="1"><f a="filter:param">
	<x path="lime.media.openal.ALFilter"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getFilteri>
		<getFloat public="1" set="method" line="749" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getFloatv public="1" set="method" line="758" static="1">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getFloatv>
		<getInteger public="1" set="method" line="776" static="1"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getInteger>
		<getIntegerv public="1" set="method" line="785" static="1">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getIntegerv>
		<getListener3f public="1" set="method" line="803" static="1"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getListener3f>
		<getListener3i public="1" set="method" line="821" static="1"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getListener3i>
		<getListenerf public="1" set="method" line="839" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getListenerf>
		<getListenerfv public="1" set="method" line="848" static="1">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getListenerfv>
		<getListeneri public="1" set="method" line="866" static="1"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getListeneri>
		<getListeneriv public="1" set="method" line="875" static="1">
			<f a="param:?count" v=":1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getListeneriv>
		<getParameter public="1" set="method" line="893" static="1">
			<f a="param">
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</getParameter>
		<getProcAddress public="1" set="method" line="899" static="1"><f a="fname">
	<c path="String"/>
	<d/>
</f></getProcAddress>
		<getSource3f public="1" set="method" line="908" static="1"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getSource3f>
		<getSourcef public="1" set="method" line="926" static="1"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getSourcef>
		<getSource3i public="1" set="method" line="935" static="1"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getSource3i>
		<getSourcefv public="1" set="method" line="953" static="1">
			<f a="source:param:?count" v="::1">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getSourcefv>
		<getSourcei public="1" set="method" line="971" static="1"><f a="source:param">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<d/>
</f></getSourcei>
		<getSourceiv public="1" set="method" line="980" static="1">
			<f a="source:param:?count" v="::1">
				<x path="lime.media.openal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":value"><e>{ count : 1 }</e></m></meta>
		</getSourceiv>
		<getString public="1" set="method" line="998" static="1"><f a="param">
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<isBuffer public="1" set="method" line="1011" static="1"><f a="buffer">
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" line="1020" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isExtensionPresent public="1" set="method" line="1029" static="1"><f a="extname">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtensionPresent>
		<isAux public="1" set="method" line="1038" static="1"><f a="aux">
	<x path="lime.media.openal.ALAuxiliaryEffectSlot"/>
	<x path="Bool"/>
</f></isAux>
		<isEffect public="1" set="method" line="1047" static="1"><f a="effect">
	<x path="lime.media.openal.ALEffect"/>
	<x path="Bool"/>
</f></isEffect>
		<isFilter public="1" set="method" line="1056" static="1"><f a="filter">
	<x path="lime.media.openal.ALFilter"/>
	<x path="Bool"/>
</f></isFilter>
		<isSource public="1" set="method" line="1065" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Bool"/>
</f></isSource>
		<listener3f public="1" set="method" line="1074" static="1"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listener3f>
		<listener3i public="1" set="method" line="1081" static="1"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listener3i>
		<listenerf public="1" set="method" line="1088" static="1"><f a="param:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listenerf>
		<listenerfv public="1" set="method" line="1095" static="1"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></listenerfv>
		<listeneri public="1" set="method" line="1108" static="1"><f a="param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listeneri>
		<listeneriv public="1" set="method" line="1115" static="1"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></listeneriv>
		<source3f public="1" set="method" line="1128" static="1"><f a="source:param:value1:value2:value3">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></source3f>
		<source3i public="1" set="method" line="1135" static="1"><f a="source:param:value1:value2:value3">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></source3i>
		<sourcef public="1" set="method" line="1142" static="1"><f a="source:param:value">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sourcef>
		<sourcefv public="1" set="method" line="1149" static="1"><f a="source:param:values">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></sourcefv>
		<sourcei public="1" set="method" line="1162" static="1"><f a="source:param:value">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></sourcei>
		<filteri public="1" set="method" line="1169" static="1"><f a="filter:param:value">
	<x path="lime.media.openal.ALFilter"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></filteri>
		<filterf public="1" set="method" line="1176" static="1"><f a="filter:param:value">
	<x path="lime.media.openal.ALFilter"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></filterf>
		<sourceiv public="1" set="method" line="1183" static="1"><f a="source:param:values">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceiv>
		<sourcePlay public="1" set="method" line="1196" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourcePlay>
		<sourcePlayv public="1" set="method" line="1203" static="1"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourcePlayv>
		<sourceStop public="1" set="method" line="1216" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourceStop>
		<sourceStopv public="1" set="method" line="1223" static="1"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourceStopv>
		<sourceRewind public="1" set="method" line="1236" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourceRewind>
		<sourceRewindv public="1" set="method" line="1243" static="1"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourceRewindv>
		<sourcePause public="1" set="method" line="1256" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="Void"/>
</f></sourcePause>
		<sourcePausev public="1" set="method" line="1263" static="1"><f a="sources">
	<c path="Array"><x path="lime.media.openal.ALSource"/></c>
	<x path="Void"/>
</f></sourcePausev>
		<sourceQueueBuffer public="1" set="method" line="1276" static="1"><f a="source:buffer">
	<x path="lime.media.openal.ALSource"/>
	<x path="lime.media.openal.ALBuffer"/>
	<x path="Void"/>
</f></sourceQueueBuffer>
		<sourceQueueBuffers public="1" set="method" line="1289" static="1"><f a="source:nb:buffers">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
	<x path="Void"/>
</f></sourceQueueBuffers>
		<sourceUnqueueBuffer public="1" set="method" line="1302" static="1"><f a="source">
	<x path="lime.media.openal.ALSource"/>
	<x path="lime.media.openal.ALBuffer"/>
</f></sourceUnqueueBuffer>
		<sourceUnqueueBuffers public="1" set="method" line="1312" static="1"><f a="source:nb">
	<x path="lime.media.openal.ALSource"/>
	<x path="Int"/>
	<c path="Array"><x path="lime.media.openal.ALBuffer"/></c>
</f></sourceUnqueueBuffers>
		<speedOfSound public="1" set="method" line="1330" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></speedOfSound>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<abstract path="lime.media.openal.ALAuxiliaryEffectSlot" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALAuxiliaryEffectSlot.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
		<impl><class path="lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALAuxiliaryEffectSlot.hx" private="1" module="lime.media.openal.ALAuxiliaryEffectSlot" final="1">
	<_new get="inline" set="null" line="9" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALAuxiliaryEffectSlot"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALAuxiliaryEffectSlot.hx" private="1" module="lime.media.openal.ALAuxiliaryEffectSlot" final="1">
		<_new get="inline" set="null" line="9" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALAuxiliaryEffectSlot"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
	</class>
	<abstract path="lime.media.openal.ALBuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALBuffer.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta>
			<m n=":allow"><e>lime.media.openal.AL</e></m>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.media.openal._ALBuffer.ALBuffer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALBuffer.hx" private="1" module="lime.media.openal.ALBuffer" final="1">
	<_new get="inline" set="null" line="10" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALBuffer"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALBuffer.ALBuffer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALBuffer.hx" private="1" module="lime.media.openal.ALBuffer" final="1">
		<_new get="inline" set="null" line="10" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALBuffer"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
	</class>
	<class path="lime.media.openal.ALC" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALC.hx">
		<FALSE public="1" get="inline" set="null" expr="0" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FALSE>
		<TRUE public="1" get="inline" set="null" expr="1" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TRUE>
		<FREQUENCY public="1" get="inline" set="null" expr="0x1007" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1007</e></m></meta>
		</FREQUENCY>
		<REFRESH public="1" get="inline" set="null" expr="0x1008" line="17" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1008</e></m></meta>
		</REFRESH>
		<SYNC public="1" get="inline" set="null" expr="0x1009" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1009</e></m></meta>
		</SYNC>
		<MONO_SOURCES public="1" get="inline" set="null" expr="0x1010" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1010</e></m></meta>
		</MONO_SOURCES>
		<STEREO_SOURCES public="1" get="inline" set="null" expr="0x1011" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1011</e></m></meta>
		</STEREO_SOURCES>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_DEVICE public="1" get="inline" set="null" expr="0xA001" line="22" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA001</e></m></meta>
		</INVALID_DEVICE>
		<INVALID_CONTEXT public="1" get="inline" set="null" expr="0xA002" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA002</e></m></meta>
		</INVALID_CONTEXT>
		<INVALID_ENUM public="1" get="inline" set="null" expr="0xA003" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA003</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="0xA004" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA004</e></m></meta>
		</INVALID_VALUE>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="0xA005" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xA005</e></m></meta>
		</OUT_OF_MEMORY>
		<ATTRIBUTES_SIZE public="1" get="inline" set="null" expr="0x1002" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1002</e></m></meta>
		</ATTRIBUTES_SIZE>
		<ALL_ATTRIBUTES public="1" get="inline" set="null" expr="0x1003" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1003</e></m></meta>
		</ALL_ATTRIBUTES>
		<DEFAULT_DEVICE_SPECIFIER public="1" get="inline" set="null" expr="0x1004" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1004</e></m></meta>
		</DEFAULT_DEVICE_SPECIFIER>
		<DEVICE_SPECIFIER public="1" get="inline" set="null" expr="0x1005" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1005</e></m></meta>
		</DEVICE_SPECIFIER>
		<EXTENSIONS public="1" get="inline" set="null" expr="0x1006" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1006</e></m></meta>
		</EXTENSIONS>
		<ENUMERATE_ALL_EXT public="1" get="inline" set="null" expr="1" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ENUMERATE_ALL_EXT>
		<DEFAULT_ALL_DEVICES_SPECIFIER public="1" get="inline" set="null" expr="0x1012" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1012</e></m></meta>
		</DEFAULT_ALL_DEVICES_SPECIFIER>
		<ALL_DEVICES_SPECIFIER public="1" get="inline" set="null" expr="0x1013" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1013</e></m></meta>
		</ALL_DEVICES_SPECIFIER>
		<closeDevice public="1" set="method" line="37" static="1"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Bool"/>
</f></closeDevice>
		<createContext public="1" set="method" line="46" static="1">
			<f a="device:?attrlist" v=":null">
				<x path="lime.media.openal.ALDevice"/>
				<c path="Array"><x path="Int"/></c>
				<x path="lime.media.openal.ALContext"/>
			</f>
			<meta><m n=":value"><e>{ attrlist : null }</e></m></meta>
		</createContext>
		<destroyContext public="1" set="method" line="70" static="1"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Void"/>
</f></destroyContext>
		<getContextsDevice public="1" set="method" line="77" static="1"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="lime.media.openal.ALDevice"/>
</f></getContextsDevice>
		<getCurrentContext public="1" set="method" line="90" static="1"><f a=""><x path="lime.media.openal.ALContext"/></f></getCurrentContext>
		<getError public="1" set="method" line="104" static="1"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Int"/>
</f></getError>
		<getErrorString public="1" set="method" line="113" static="1"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<c path="String"/>
</f></getErrorString>
		<getIntegerv public="1" set="method" line="126" static="1"><f a="device:param:size">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getIntegerv>
		<getString public="1" set="method" line="144" static="1"><f a="device:param">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<makeContextCurrent public="1" set="method" line="157" static="1"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Bool"/>
</f></makeContextCurrent>
		<openDevice public="1" set="method" line="166" static="1">
			<f a="?deviceName" v="null">
				<c path="String"/>
				<x path="lime.media.openal.ALDevice"/>
			</f>
			<meta><m n=":value"><e>{ deviceName : null }</e></m></meta>
		</openDevice>
		<pauseDevice public="1" set="method" line="180" static="1"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Void"/>
</f></pauseDevice>
		<processContext public="1" set="method" line="187" static="1"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Void"/>
</f></processContext>
		<resumeDevice public="1" set="method" line="194" static="1"><f a="device">
	<x path="lime.media.openal.ALDevice"/>
	<x path="Void"/>
</f></resumeDevice>
		<suspendContext public="1" set="method" line="201" static="1"><f a="context">
	<x path="lime.media.openal.ALContext"/>
	<x path="Void"/>
</f></suspendContext>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<abstract path="lime.media.openal.ALContext" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALContext.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta>
			<m n=":allow"><e>lime.media.openal.AL</e></m>
			<m n=":allow"><e>lime.media.openal.ALC</e></m>
		</meta>
		<impl><class path="lime.media.openal._ALContext.ALContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALContext.hx" private="1" module="lime.media.openal.ALContext" final="1">
	<_new get="inline" set="null" line="10" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALContext"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta>
		<m n=":allow"><e>lime.media.openal.ALC</e></m>
		<m n=":allow"><e>lime.media.openal.AL</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALContext.ALContext_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALContext.hx" private="1" module="lime.media.openal.ALContext" final="1">
		<_new get="inline" set="null" line="10" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALContext"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta>
			<m n=":allow"><e>lime.media.openal.ALC</e></m>
			<m n=":allow"><e>lime.media.openal.AL</e></m>
		</meta>
	</class>
	<abstract path="lime.media.openal.ALDevice" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALDevice.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta>
			<m n=":allow"><e>lime.media.openal.AL</e></m>
			<m n=":allow"><e>lime.media.openal.ALC</e></m>
		</meta>
		<impl><class path="lime.media.openal._ALDevice.ALDevice_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALDevice.hx" private="1" module="lime.media.openal.ALDevice" final="1">
	<_new get="inline" set="null" line="10" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALDevice"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta>
		<m n=":allow"><e>lime.media.openal.ALC</e></m>
		<m n=":allow"><e>lime.media.openal.AL</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALDevice.ALDevice_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALDevice.hx" private="1" module="lime.media.openal.ALDevice" final="1">
		<_new get="inline" set="null" line="10" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALDevice"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta>
			<m n=":allow"><e>lime.media.openal.ALC</e></m>
			<m n=":allow"><e>lime.media.openal.AL</e></m>
		</meta>
	</class>
	<abstract path="lime.media.openal.ALEffect" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALEffect.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
		<impl><class path="lime.media.openal._ALEffect.ALEffect_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALEffect.hx" private="1" module="lime.media.openal.ALEffect" final="1">
	<_new get="inline" set="null" line="9" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALEffect"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALEffect.ALEffect_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALEffect.hx" private="1" module="lime.media.openal.ALEffect" final="1">
		<_new get="inline" set="null" line="9" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALEffect"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
	</class>
	<abstract path="lime.media.openal.ALFilter" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALFilter.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
		<impl><class path="lime.media.openal._ALFilter.ALFilter_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALFilter.hx" private="1" module="lime.media.openal.ALFilter" final="1">
	<_new get="inline" set="null" line="9" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALFilter"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALFilter.ALFilter_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALFilter.hx" private="1" module="lime.media.openal.ALFilter" final="1">
		<_new get="inline" set="null" line="9" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALFilter"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
	</class>
	<abstract path="lime.media.openal.ALSource" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALSource.hx">
		<from><icast><x path="lime.system.CFFIPointer"/></icast></from>
		<this><x path="lime.system.CFFIPointer"/></this>
		<to><icast><x path="lime.system.CFFIPointer"/></icast></to>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
		<impl><class path="lime.media.openal._ALSource.ALSource_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALSource.hx" private="1" module="lime.media.openal.ALSource" final="1">
	<_new get="inline" set="null" line="9" static="1">
		<f a="handle">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.media.openal.ALSource"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
</class></impl>
	</abstract>
	<class path="lime.media.openal._ALSource.ALSource_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/openal/ALSource.hx" private="1" module="lime.media.openal.ALSource" final="1">
		<_new get="inline" set="null" line="9" static="1">
			<f a="handle">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.media.openal.ALSource"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":allow"><e>lime.media.openal.AL</e></m></meta>
	</class>
	<class path="lime.media.vorbis.VorbisComment" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/vorbis/VorbisComment.hx">
		<userComments public="1"><c path="Array"><c path="String"/></c></userComments>
		<vendor public="1"><c path="String"/></vendor>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.media.vorbis.VorbisFile" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/vorbis/VorbisFile.hx">
		<fromBytes public="1" set="method" line="75" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.media.vorbis.VorbisFile"/>
</f></fromBytes>
		<fromFile public="1" set="method" line="89" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.media.vorbis.VorbisFile"/>
</f></fromFile>
		<bitstream public="1" set="null"><x path="Int"/></bitstream>
		<handle>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</handle>
		<bitrate public="1" set="method" line="24">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</bitrate>
		<bitrateInstant public="1" set="method" line="33"><f a=""><x path="Int"/></f></bitrateInstant>
		<clear public="1" set="method" line="42"><f a=""><x path="Void"/></f></clear>
		<comment public="1" set="method" line="49">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<c path="lime.media.vorbis.VorbisComment"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</comment>
		<crosslap public="1" set="method" line="66"><f a="other">
	<c path="lime.media.vorbis.VorbisFile"/>
	<x path="Int"/>
</f></crosslap>
		<info public="1" set="method" line="103">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<c path="lime.media.vorbis.VorbisInfo"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</info>
		<pcmSeek public="1" set="method" line="124"><f a="pos">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></pcmSeek>
		<pcmSeekLap public="1" set="method" line="133"><f a="pos">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></pcmSeekLap>
		<pcmSeekPage public="1" set="method" line="142"><f a="pos">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></pcmSeekPage>
		<pcmSeekPageLap public="1" set="method" line="151"><f a="pos">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></pcmSeekPageLap>
		<pcmTell public="1" set="method" line="160"><f a=""><x path="haxe.Int64"/></f></pcmTell>
		<pcmTotal public="1" set="method" line="174">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</pcmTotal>
		<rawSeek public="1" set="method" line="188"><f a="pos">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></rawSeek>
		<rawSeekLap public="1" set="method" line="197"><f a="pos">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></rawSeekLap>
		<rawTell public="1" set="method" line="206"><f a=""><x path="haxe.Int64"/></f></rawTell>
		<rawTotal public="1" set="method" line="220">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</rawTotal>
		<read public="1" set="method" line="234">
			<f a="buffer:position:?length:?bigEndianPacking:?wordSize:?signed" v="::4096:false:2:true">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ signed : true, wordSize : 2, bigEndianPacking : false, length : 4096 }</e></m></meta>
		</read>
		<readFloat public="1" set="method" line="247"><f a="pcmChannels:samples">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readFloat>
		<seekable public="1" set="method" line="259"><f a=""><x path="Bool"/></f></seekable>
		<serialNumber public="1" set="method" line="268">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</serialNumber>
		<streams public="1" set="method" line="277"><f a=""><x path="Int"/></f></streams>
		<timeSeek public="1" set="method" line="286"><f a="s">
	<x path="Float"/>
	<x path="Int"/>
</f></timeSeek>
		<timeSeekLap public="1" set="method" line="295"><f a="s">
	<x path="Float"/>
	<x path="Int"/>
</f></timeSeekLap>
		<timeSeekPage public="1" set="method" line="304"><f a="s">
	<x path="Float"/>
	<x path="Int"/>
</f></timeSeekPage>
		<timeSeekPageLap public="1" set="method" line="313"><f a="s">
	<x path="Float"/>
	<x path="Int"/>
</f></timeSeekPageLap>
		<timeTell public="1" set="method" line="322"><f a=""><x path="Float"/></f></timeTell>
		<timeTotal public="1" set="method" line="331">
			<f a="?bitstream" v="-1">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ bitstream : -1 }</e></m></meta>
		</timeTotal>
		<new set="method" line="19">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
	</class>
	<class path="lime.media.vorbis.VorbisInfo" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/media/vorbis/VorbisInfo.hx">
		<bitrateLower public="1"><x path="Int"/></bitrateLower>
		<bitrateNominal public="1"><x path="Int"/></bitrateNominal>
		<bitrateUpper public="1"><x path="Int"/></bitrateUpper>
		<channels public="1"><x path="Int"/></channels>
		<rate public="1"><x path="Int"/></rate>
		<version public="1"><x path="Int"/></version>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.net.HTTPRequest" params="T" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/net/HTTPRequest.hx">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><c path="haxe.io.Bytes"/></data>
		<enableResponseHeaders public="1"><x path="Bool"/></enableResponseHeaders>
		<followRedirects public="1"><x path="Bool"/></followRedirects>
		<formData public="1"><t path="Map">
	<c path="String"/>
	<d/>
</t></formData>
		<headers public="1"><c path="Array"><c path="lime.net.HTTPRequestHeader"/></c></headers>
		<method public="1"><x path="lime.net.HTTPRequestMethod"/></method>
		<responseData public="1"><c path="lime.net.HTTPRequest.T"/></responseData>
		<responseHeaders public="1"><c path="Array"><c path="lime.net.HTTPRequestHeader"/></c></responseHeaders>
		<responseStatus public="1"><x path="Int"/></responseStatus>
		<timeout public="1"><x path="Int"/></timeout>
		<uri public="1"><c path="String"/></uri>
		<userAgent public="1"><c path="String"/></userAgent>
		<withCredentials public="1"><x path="Bool"/></withCredentials>
		<manageCookies public="1"><x path="Bool"/></manageCookies>
		<cancel public="1" set="method" line="70"><f a=""><x path="Void"/></f></cancel>
		<load public="1" set="method" line="77">
			<f a="?uri" v="null">
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.net.HTTPRequest.T"/></c>
			</f>
			<meta><m n=":value"><e>{ uri : null }</e></m></meta>
		</load>
		<new public="1" set="method" line="50">
			<f a="?uri" v="null">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ uri : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.net.HTTPRequestHeader" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/net/HTTPRequestHeader.hx">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method" line="13">
			<f a="name:?value" v=":&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ value : "" }</e></m></meta>
		</new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.net.HTTPRequestMethod" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/net/HTTPRequestMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.net._HTTPRequestMethod.HTTPRequestMethod_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/net/HTTPRequestMethod.hx" private="1" module="lime.net.HTTPRequestMethod" extern="1" final="1">
	<DELETE public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="5" static="1">
		<x path="lime.net.HTTPRequestMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DELETE>
	<GET public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="6" static="1">
		<x path="lime.net.HTTPRequestMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GET>
	<HEAD public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="7" static="1">
		<x path="lime.net.HTTPRequestMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HEAD>
	<OPTIONS public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="8" static="1">
		<x path="lime.net.HTTPRequestMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OPTIONS>
	<POST public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="9" static="1">
		<x path="lime.net.HTTPRequestMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</POST>
	<PUT public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="10" static="1">
		<x path="lime.net.HTTPRequestMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PUT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.net._HTTPRequestMethod.HTTPRequestMethod_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/net/HTTPRequestMethod.hx" private="1" module="lime.net.HTTPRequestMethod" extern="1" final="1">
		<DELETE public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="5" static="1">
			<x path="lime.net.HTTPRequestMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DELETE>
		<GET public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="6" static="1">
			<x path="lime.net.HTTPRequestMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GET>
		<HEAD public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="7" static="1">
			<x path="lime.net.HTTPRequestMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HEAD>
		<OPTIONS public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="8" static="1">
			<x path="lime.net.HTTPRequestMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OPTIONS>
		<POST public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="9" static="1">
			<x path="lime.net.HTTPRequestMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</POST>
		<PUT public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="10" static="1">
			<x path="lime.net.HTTPRequestMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PUT>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.system.CFFIPointer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/CFFIPointer.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast><d/></icast></to>
		<meta><m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m></meta>
		<impl><class path="lime.system._CFFIPointer.CFFIPointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/CFFIPointer.hx" private="1" module="lime.system.CFFIPointer" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="handle">
			<d/>
			<x path="lime.system.CFFIPointer"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get public="1" set="method" line="15" static="1"><f a="this">
	<d/>
	<x path="Float"/>
</f></get>
	<equals get="inline" set="null" line="27" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equals>
	<equalsPointer get="inline" set="null" line="32" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsPointer>
	<greaterThan get="inline" set="null" line="37" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</greaterThan>
	<greaterThanPointer get="inline" set="null" line="42" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</greaterThanPointer>
	<greaterThanOrEqual get="inline" set="null" line="47" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</greaterThanOrEqual>
	<greaterThanOrEqualPointer get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</greaterThanOrEqualPointer>
	<lessThan get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lessThan>
	<lessThanPointer get="inline" set="null" line="62" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lessThanPointer>
	<lessThanOrEqual get="inline" set="null" line="67" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lessThanOrEqual>
	<lessThanOrEqualPointer get="inline" set="null" line="72" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lessThanOrEqualPointer>
	<notEquals get="inline" set="null" line="77" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEquals>
	<notEqualsPointer get="inline" set="null" line="82" static="1">
		<f a="a:b">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsPointer>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.system._CFFIPointer.CFFIPointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/CFFIPointer.hx" private="1" module="lime.system.CFFIPointer" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="handle">
				<d/>
				<x path="lime.system.CFFIPointer"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get public="1" set="method" line="15" static="1"><f a="this">
	<d/>
	<x path="Float"/>
</f></get>
		<equals get="inline" set="null" line="27" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equals>
		<equalsPointer get="inline" set="null" line="32" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsPointer>
		<greaterThan get="inline" set="null" line="37" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</greaterThan>
		<greaterThanPointer get="inline" set="null" line="42" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</greaterThanPointer>
		<greaterThanOrEqual get="inline" set="null" line="47" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</greaterThanOrEqual>
		<greaterThanOrEqualPointer get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</greaterThanOrEqualPointer>
		<lessThan get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lessThan>
		<lessThanPointer get="inline" set="null" line="62" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lessThanPointer>
		<lessThanOrEqual get="inline" set="null" line="67" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lessThanOrEqual>
		<lessThanOrEqualPointer get="inline" set="null" line="72" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lessThanOrEqualPointer>
		<notEquals get="inline" set="null" line="77" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEquals>
		<notEqualsPointer get="inline" set="null" line="82" static="1">
			<f a="a:b">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsPointer>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.system.Clipboard" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/Clipboard.hx">
		<onUpdate public="1" expr="new Event&lt;Void&gt;()" line="20" static="1">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onUpdate>
		<text public="1" get="accessor" set="accessor" static="1"><c path="String"/></text>
		<_text static="1"><c path="String"/></_text>
		<__update set="method" line="25" static="1"><f a=""><x path="Void"/></f></__update>
		<get_text set="method" line="54" static="1"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="65" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.ui.Window</e></m>
		</meta>
	</class>
	<class path="lime.system.Display" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/Display.hx">
		<bounds public="1" set="null">
			<c path="lime.math.Rectangle"/>
			<haxe_doc>* The desktop area represented by this display, with the upper-leftmost display at 0,0</haxe_doc>
		</bounds>
		<currentMode public="1" set="null">
			<c path="lime.system.DisplayMode"/>
			<haxe_doc>* The current display mode</haxe_doc>
		</currentMode>
		<id public="1" set="null"><x path="Int"/></id>
		<dpi public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* Pixel density of the display</haxe_doc>
		</dpi>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The name of the device, such as "Samsung SyncMaster P2350", "iPhone 6", "Oculus Rift DK2", etc.</haxe_doc>
		</name>
		<supportedModes public="1" set="null">
			<c path="Array"><c path="lime.system.DisplayMode"/></c>
			<haxe_doc>* All of the display modes supported by this device</haxe_doc>
		</supportedModes>
		<new set="method" line="38">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.system.DisplayMode" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/DisplayMode.hx">
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* vertical resolution</haxe_doc>
		</height>
		<pixelFormat public="1" set="null">
			<x path="lime.graphics.PixelFormat"/>
			<haxe_doc>* pixel format</haxe_doc>
		</pixelFormat>
		<refreshRate public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* refresh rate in Hz</haxe_doc>
		</refreshRate>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* horizontal resolution</haxe_doc>
		</width>
		<new set="method" line="32">
			<f a="width:height:refreshRate:pixelFormat">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.graphics.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime.system.Endian" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/Endian.hx">
		<LITTLE_ENDIAN/>
		<BIG_ENDIAN/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="lime.system.JNI" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/JNI.hx">
		<alreadyCreated expr="new Map&lt;String,Bool&gt;()" line="46" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Bool"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,Bool>()]]></e></m></meta>
		</alreadyCreated>
		<initialized expr="false" line="47" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</initialized>
		<callMember public="1" set="method" line="50" static="1"><f a="method:jobject:a">
	<d/>
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></callMember>
		<callStatic public="1" set="method" line="75" static="1"><f a="method:a">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></callStatic>
		<createMemberField public="1" set="method" line="100" static="1"><f a="className:memberName:signature">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="lime.system.JNIMemberField"/>
</f></createMemberField>
		<createMemberMethod public="1" set="method" line="111" static="1">
			<f a="className:memberName:signature:?useArray:?quietFail" v=":::false:false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ quietFail : false, useArray : false }</e></m></meta>
		</createMemberMethod>
		<createStaticField public="1" set="method" line="136" static="1"><f a="className:memberName:signature">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="lime.system.JNIStaticField"/>
</f></createStaticField>
		<createStaticMethod public="1" set="method" line="147" static="1">
			<f a="className:memberName:signature:?useArray:?quietFail" v=":::false:false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ quietFail : false, useArray : false }</e></m></meta>
		</createStaticMethod>
		<getEnv public="1" set="method" line="172" static="1"><f a=""><d/></f></getEnv>
		<init set="method" line="183" static="1"><f a=""><x path="Void"/></f></init>
		<onCallback set="method" line="196" static="1"><f a="object:method:args">
	<d/>
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
</f></onCallback>
		<postUICallback public="1" set="method" line="211" static="1"><f a="callback">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></postUICallback>
		<haxe_doc>The Java Native Interface (JNI) allows C++ code to call Java functions, and
	vice versa. On Android, Haxe code compiles to C++, but only Java code can
	access the Android system API, so it's often necessary to use both.

	For a working example, run `lime create extension MyExtension`, then look at
	MyExtension.hx and MyExtension.java.

	You can pass Haxe objects to Java, much like any other data. In Java,
	they'll have type `org.haxe.lime.HaxeObject`, meaning the method that
	receives them might have signature `(Lorg/haxe/lime/HaxeObject;)V`. Once
	sent, the Java class can store the object and call its functions.

	Note that most Java code runs on a different thread than Haxe, meaning that
	you can get thread-related errors in both directions. Java functions can
	use `Extension.callbackHandler.post()` to switch to the UI thread, while
	Haxe code can avoid the problem using `lime.system.JNI.JNISafety`.</haxe_doc>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.system.JNIMemberField" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/JNI.hx" module="lime.system.JNI">
		<field>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</field>
		<get public="1" set="method" line="237"><f a="jobject">
	<d/>
	<d/>
</f></get>
		<set public="1" set="method" line="246"><f a="jobject:value">
	<d/>
	<d/>
	<d/>
</f></set>
		<new public="1" set="method" line="232"><f a="field">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.system.JNIStaticField" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/JNI.hx" module="lime.system.JNI">
		<field>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</field>
		<get public="1" set="method" line="269"><f a=""><d/></f></get>
		<set public="1" set="method" line="278"><f a="value">
	<d/>
	<d/>
</f></set>
		<new public="1" set="method" line="264"><f a="field">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.system.JNIMethod" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/JNI.hx" module="lime.system.JNI">
		<method>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</method>
		<callMember public="1" set="method" line="301"><f a="args">
	<c path="Array"><d/></c>
	<d/>
</f></callMember>
		<callStatic public="1" set="method" line="311"><f a="args">
	<c path="Array"><d/></c>
	<d/>
</f></callStatic>
		<getMemberMethod public="1" set="method" line="320"><f a="useArray">
	<x path="Bool"/>
	<d/>
</f></getMemberMethod>
		<getStaticMethod public="1" set="method" line="332"><f a="useArray">
	<x path="Bool"/>
	<d/>
</f></getStaticMethod>
		<new public="1" set="method" line="296"><f a="method">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.system.JNISafety" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/JNI.hx" module="lime.system.JNI" interface="1">
		<haxe_doc>Most times a Java class calls a Haxe function, it does so on the UI thread,
	which can lead to thread-related errors. These errors can be avoided by
	switching back to the main thread before executing any code.

	Usage:

	```haxe
	class MyClass implements JNISafety
	{
		@:runOnMainThread
		public function callbackFunction(data:Dynamic):Void
		{
			// Code here is guaranteed to run on Haxe's main thread. It's safe
			// to call `callbackFunction` via JNI.
		}

		public function notACallbackFunction():Void
		{
			// Code here will run on whichever thread calls the function. It may
			// not be safe to call `notACallbackFunction` via JNI.
		}
	}
	```</haxe_doc>
		<meta><m n=":autoBuild"><e>lime.system.JNI.JNISafetyTools.build()</e></m></meta>
	</class>
	<class path="sys.thread.Mutex" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Mutex.hx" extern="1">
		<m><d/></m>
		<acquire public="1" set="method" line="33">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex but
		must release it as many times it has been acquired.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method" line="37">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Try to acquire the mutex, returns true if acquire or false
		if it's already locked by another thread.</haxe_doc>
		</tryAcquire>
		<release public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Release a mutex that has been acquired by the current thread.
		The behavior is undefined if the current thread does not own
		the mutex.</haxe_doc>
		</release>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a mutex.</haxe_doc>
		</new>
		<haxe_doc>Creates a mutex, which can be used to acquire a temporary lock
	to access some ressource. The main difference with a lock is
	that a mutex must always be released by the owner thread.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread.EventLoop" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/thread/EventLoop.hx">
		<CREATED static="1"><x path="Bool"/></CREATED>
		<mutex final="1" expr="new Mutex()">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<oneTimeEvents final="1" expr="new Array&lt;Null&lt;Void -&gt; Void&gt;&gt;()">
			<c path="Array"><x path="Null"><f a=""><x path="Void"/></f></x></c>
			<meta><m n=":value"><e><![CDATA[new Array<Null<Void -> Void>>()]]></e></m></meta>
		</oneTimeEvents>
		<oneTimeEventsIdx expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</oneTimeEventsIdx>
		<waitLock final="1" expr="new Lock()">
			<c path="sys.thread.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</waitLock>
		<promisedEventsCount expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</promisedEventsCount>
		<regularEvents><x path="Null"><c path="sys.thread._EventLoop.RegularEvent"/></x></regularEvents>
		<isMainThread><x path="Bool"/></isMainThread>
		<progress public="1" set="method" line="145">
			<f a=""><e path="sys.thread.NextEventTime"/></f>
			<haxe_doc>Executes all pending events.

		The returned time stamps can be used with `Sys.time()` for calculations.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</progress>
		<loop public="1" set="method" line="179">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Execute all pending events.
		Wait and execute as many events as the number of times `promise()` was called.
		Runs until all repeating events are cancelled and no more events are expected.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</loop>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An event loop implementation used for `sys.thread.Thread`</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread._Thread.HaxeThread" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" extern="1">
		<threads static="1"><c path="Array"><a>
	<thread><c path="sys.thread._Thread.HaxeThread"/></thread>
	<handle><t path="sys.thread._Thread.ThreadHandle"/></handle>
</a></c></threads>
		<threadsMutex static="1"><c path="sys.thread.Mutex"/></threadsMutex>
		<mainThreadHandle static="1"><t path="sys.thread._Thread.ThreadHandle"/></mainThreadHandle>
		<mainThread static="1"><c path="sys.thread._Thread.HaxeThread"/></mainThread>
		<current public="1" set="method" line="91" static="1"><f a=""><c path="sys.thread._Thread.HaxeThread"/></f></current>
		<create public="1" set="method" line="112" static="1"><f a="job:withEventLoop">
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
	<x path="sys.thread.Thread"/>
</f></create>
		<runWithEventLoop public="1" set="method" line="138" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runWithEventLoop>
		<dropThread set="method" line="155" static="1"><f a="item:probableIndex">
	<a>
		<thread><c path="sys.thread._Thread.HaxeThread"/></thread>
		<handle><t path="sys.thread._Thread.ThreadHandle"/></handle>
	</a>
	<x path="Int"/>
	<x path="Void"/>
</f></dropThread>
		<currentHandle get="inline" set="null" line="178" static="1">
			<f a=""><t path="sys.thread._Thread.ThreadHandle"/></f>
			<meta><m n=":has_untyped"/></meta>
		</currentHandle>
		<createHandle get="inline" set="null" line="182" static="1">
			<f a="callb">
				<f a=""><x path="Void"/></f>
				<t path="sys.thread._Thread.ThreadHandle"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</createHandle>
		<readMessage public="1" get="inline" set="null" line="186" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<events public="1" set="null"><x path="Null"><c path="sys.thread.EventLoop"/></x></events>
		<handle public="1"><t path="sys.thread._Thread.ThreadHandle"/></handle>
		<messages final="1" expr="new Deque&lt;Dynamic&gt;()">
			<c path="sys.thread.Deque"><d/></c>
			<meta><m n=":value"><e><![CDATA[new Deque<Dynamic>()]]></e></m></meta>
		</messages>
		<sendMessage public="1" get="inline" set="null" line="174"><f a="msg">
	<d/>
	<x path="Void"/>
</f></sendMessage>
		<new set="method" line="170"><f a="h">
	<t path="sys.thread._Thread.ThreadHandle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.system.JNISafetyTools" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/JNI.hx" module="lime.system.JNI">
		<mainThread expr="Thread.current()" line="383" static="1">
			<x path="sys.thread.Thread"/>
			<meta><m n=":value"><e>Thread.current()</e></m></meta>
		</mainThread>
		<onMainThread public="1" get="inline" set="null" line="392" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>@return Whether the calling function is being run on the main thread.</haxe_doc>
		</onMainThread>
		<build public="1" set="method" static="1"><f a=""><d/></f></build>
	</class>
	<class path="lime.system.Sensor" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/Sensor.hx">
		<sensorByID expr="new Map&lt;Int,Sensor&gt;()" line="11" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="lime.system.Sensor"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,Sensor>()]]></e></m></meta>
		</sensorByID>
		<sensors expr="new Array&lt;Sensor&gt;()" line="12" static="1">
			<c path="Array"><c path="lime.system.Sensor"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Sensor>()]]></e></m></meta>
		</sensors>
		<getSensors public="1" set="method" line="25" static="1">
			<f a="?type" v="null">
				<e path="lime.system.SensorType"/>
				<c path="Array"><c path="lime.system.Sensor"/></c>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</getSensors>
		<registerSensor set="method" line="47" static="1"><f a="type:id">
	<e path="lime.system.SensorType"/>
	<x path="Int"/>
	<c path="lime.system.Sensor"/>
</f></registerSensor>
		<id public="1"><x path="Int"/></id>
		<onUpdate public="1" expr="new Event&lt;Float -&gt; Float -&gt; Float&gt;()">
			<c path="lime.app._Event_Float_Float_Float_Void"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float -> Float>()]]></e></m></meta>
		</onUpdate>
		<type public="1"><e path="lime.system.SensorType"/></type>
		<new set="method" line="18">
			<f a="type:id">
				<e path="lime.system.SensorType"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime.system.SensorType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/SensorType.hx">
		<ACCELEROMETER/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="lime.system.System" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/System.hx">
		<allowScreenTimeout public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></allowScreenTimeout>
		<applicationDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></applicationDirectory>
		<applicationStorageDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></applicationStorageDirectory>
		<desktopDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></desktopDirectory>
		<deviceModel public="1" get="accessor" set="null" static="1"><c path="String"/></deviceModel>
		<deviceVendor public="1" get="accessor" set="null" static="1"><c path="String"/></deviceVendor>
		<disableCFFI public="1" static="1"><x path="Bool"/></disableCFFI>
		<documentsDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></documentsDirectory>
		<endianness public="1" get="accessor" set="null" static="1"><e path="lime.system.Endian"/></endianness>
		<fontsDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></fontsDirectory>
		<numDisplays public="1" get="accessor" set="null" static="1"><x path="Int"/></numDisplays>
		<platformLabel public="1" get="accessor" set="null" static="1"><c path="String"/></platformLabel>
		<platformName public="1" get="accessor" set="null" static="1"><c path="String"/></platformName>
		<platformVersion public="1" get="accessor" set="null" static="1"><c path="String"/></platformVersion>
		<userDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></userDirectory>
		<__applicationDirectory static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__applicationDirectory>
		<__applicationEntryPoint static="1">
			<t path="Map">
				<c path="String"/>
				<x path="haxe.Function"/>
			</t>
			<meta><m n=":noCompletion"/></meta>
		</__applicationEntryPoint>
		<__applicationStorageDirectory static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__applicationStorageDirectory>
		<__desktopDirectory static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__desktopDirectory>
		<__deviceModel static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__deviceModel>
		<__deviceVendor static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__deviceVendor>
		<__directories expr="new Map&lt;SystemDirectory,String&gt;()" line="68" static="1">
			<x path="haxe.ds.Map">
				<x path="lime.system._System.SystemDirectory"/>
				<c path="String"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<SystemDirectory,String>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</__directories>
		<__documentsDirectory static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__documentsDirectory>
		<__endianness static="1">
			<e path="lime.system.Endian"/>
			<meta><m n=":noCompletion"/></meta>
		</__endianness>
		<__fontsDirectory static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__fontsDirectory>
		<__platformLabel static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__platformLabel>
		<__platformName static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__platformName>
		<__platformVersion static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__platformVersion>
		<__userDirectory static="1">
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__userDirectory>
		<exit public="1" set="method" line="143" static="1"><f a="code">
	<x path="Int"/>
	<x path="Void"/>
</f></exit>
		<getDisplay public="1" set="method" line="165" static="1"><f a="id">
	<x path="Int"/>
	<c path="lime.system.Display"/>
</f></getDisplay>
		<getTimer public="1" set="method" line="263" static="1"><f a=""><x path="Int"/></f></getTimer>
		<load public="1" get="inline" set="null" line="283" static="1">
			<f a="library:method:?args:?lazy" v="::0:false">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ lazy : false, args : 0 }</e></m></meta>
		</load>
		<openFile public="1" set="method" line="293" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></openFile>
		<openURL public="1" set="method" line="316" static="1">
			<f a="url:?target" v=":&quot;_blank&quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ target : "_blank" }</e></m></meta>
		</openURL>
		<__copyMissingFields set="method" line="335" static="1">
			<f a="target:source">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__copyMissingFields>
		<__getDirectory set="method" line="348" static="1">
			<f a="type">
				<x path="lime.system._System.SystemDirectory"/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__getDirectory>
		<__parseArguments set="method" line="426" static="1"><f a="attributes">
	<t path="lime.ui.WindowAttributes"/>
	<x path="Void"/>
</f></__parseArguments>
		<__parseBool get="inline" set="null" line="525" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__parseBool>
		<__registerEntryPoint set="method" line="530" static="1">
			<f a="projectName:entryPoint">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__registerEntryPoint>
		<__runProcess set="method" line="540" static="1">
			<f a="command:?args" v=":null">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<meta>
				<m n=":value"><e>{ args : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__runProcess>
		<get_allowScreenTimeout set="method" line="558" static="1"><f a=""><x path="Bool"/></f></get_allowScreenTimeout>
		<set_allowScreenTimeout set="method" line="567" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowScreenTimeout>
		<get_applicationDirectory set="method" line="576" static="1"><f a=""><c path="String"/></f></get_applicationDirectory>
		<get_applicationStorageDirectory set="method" line="586" static="1"><f a=""><c path="String"/></f></get_applicationStorageDirectory>
		<get_deviceModel set="method" line="596" static="1"><f a=""><c path="String"/></f></get_deviceModel>
		<get_deviceVendor set="method" line="631" static="1"><f a=""><c path="String"/></f></get_deviceVendor>
		<get_desktopDirectory set="method" line="657" static="1"><f a=""><c path="String"/></f></get_desktopDirectory>
		<get_documentsDirectory set="method" line="667" static="1"><f a=""><c path="String"/></f></get_documentsDirectory>
		<get_endianness set="method" line="677" static="1"><f a=""><e path="lime.system.Endian"/></f></get_endianness>
		<get_fontsDirectory set="method" line="698" static="1"><f a=""><c path="String"/></f></get_fontsDirectory>
		<get_numDisplays set="method" line="708" static="1"><f a=""><x path="Int"/></f></get_numDisplays>
		<get_platformLabel set="method" line="717" static="1"><f a=""><c path="String"/></f></get_platformLabel>
		<get_platformName set="method" line="741" static="1"><f a=""><c path="String"/></f></get_platformName>
		<get_platformVersion set="method" line="779" static="1"><f a=""><c path="String"/></f></get_platformVersion>
		<get_userDirectory set="method" line="807" static="1"><f a=""><c path="String"/></f></get_userDirectory>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.system.Display</e></m>
			<m n=":access"><e>lime.system.DisplayMode</e></m>
		</meta>
	</class>
	<abstract path="lime.system._System.SystemDirectory" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/System.hx" private="1" module="lime.system.System">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.system._System.SystemDirectory_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/System.hx" private="1" module="lime.system.System" extern="1" final="1">
	<APPLICATION public="1" get="inline" set="null" expr="cast 0" line="819" static="1">
		<x path="lime.system._System.SystemDirectory"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APPLICATION>
	<APPLICATION_STORAGE public="1" get="inline" set="null" expr="cast 1" line="820" static="1">
		<x path="lime.system._System.SystemDirectory"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APPLICATION_STORAGE>
	<DESKTOP public="1" get="inline" set="null" expr="cast 2" line="821" static="1">
		<x path="lime.system._System.SystemDirectory"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DESKTOP>
	<DOCUMENTS public="1" get="inline" set="null" expr="cast 3" line="822" static="1">
		<x path="lime.system._System.SystemDirectory"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOCUMENTS>
	<FONTS public="1" get="inline" set="null" expr="cast 4" line="823" static="1">
		<x path="lime.system._System.SystemDirectory"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FONTS>
	<USER public="1" get="inline" set="null" expr="cast 5" line="824" static="1">
		<x path="lime.system._System.SystemDirectory"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</USER>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.system._System.SystemDirectory_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/System.hx" private="1" module="lime.system.System" extern="1" final="1">
		<APPLICATION public="1" get="inline" set="null" expr="cast 0" line="819" static="1">
			<x path="lime.system._System.SystemDirectory"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APPLICATION>
		<APPLICATION_STORAGE public="1" get="inline" set="null" expr="cast 1" line="820" static="1">
			<x path="lime.system._System.SystemDirectory"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APPLICATION_STORAGE>
		<DESKTOP public="1" get="inline" set="null" expr="cast 2" line="821" static="1">
			<x path="lime.system._System.SystemDirectory"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DESKTOP>
		<DOCUMENTS public="1" get="inline" set="null" expr="cast 3" line="822" static="1">
			<x path="lime.system._System.SystemDirectory"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOCUMENTS>
		<FONTS public="1" get="inline" set="null" expr="cast 4" line="823" static="1">
			<x path="lime.system._System.SystemDirectory"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FONTS>
		<USER public="1" get="inline" set="null" expr="cast 5" line="824" static="1">
			<x path="lime.system._System.SystemDirectory"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</USER>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.system.ThreadPool" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/ThreadPool.hx">
		<currentThreads public="1" set="null"><x path="Int"/></currentThreads>
		<doWork public="1" expr="new Event&lt;Dynamic&gt;()">
			<c path="lime.app._Event_Dynamic_Void"><f a="">
	<d/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Dynamic>()]]></e></m></meta>
		</doWork>
		<maxThreads public="1"><x path="Int"/></maxThreads>
		<minThreads public="1"><x path="Int"/></minThreads>
		<onComplete public="1" expr="new Event&lt;Dynamic&gt;()">
			<c path="lime.app._Event_Dynamic_Void"><f a="">
	<d/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Dynamic>()]]></e></m></meta>
		</onComplete>
		<onError public="1" expr="new Event&lt;Dynamic&gt;()">
			<c path="lime.app._Event_Dynamic_Void"><f a="">
	<d/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Dynamic>()]]></e></m></meta>
		</onError>
		<onProgress public="1" expr="new Event&lt;Dynamic&gt;()">
			<c path="lime.app._Event_Dynamic_Void"><f a="">
	<d/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Dynamic>()]]></e></m></meta>
		</onProgress>
		<onRun public="1" expr="new Event&lt;Dynamic&gt;()">
			<c path="lime.app._Event_Dynamic_Void"><f a="">
	<d/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Dynamic>()]]></e></m></meta>
		</onRun>
		<__synchronous>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__synchronous>
		<__workCompleted>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__workCompleted>
		<__workIncoming expr="new Deque&lt;ThreadPoolMessage&gt;()">
			<c path="sys.thread.Deque"><c path="lime.system._ThreadPool.ThreadPoolMessage"/></c>
			<meta>
				<m n=":value"><e><![CDATA[new Deque<ThreadPoolMessage>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</__workIncoming>
		<__workQueued>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__workQueued>
		<__workResult expr="new Deque&lt;ThreadPoolMessage&gt;()">
			<c path="sys.thread.Deque"><c path="lime.system._ThreadPool.ThreadPoolMessage"/></c>
			<meta>
				<m n=":value"><e><![CDATA[new Deque<ThreadPoolMessage>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</__workResult>
		<queue public="1" set="method" line="69">
			<f a="?state" v="null">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : null }</e></m></meta>
		</queue>
		<sendComplete public="1" set="method" line="100">
			<f a="?state" v="null">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : null }</e></m></meta>
		</sendComplete>
		<sendError public="1" set="method" line="113">
			<f a="?state" v="null">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : null }</e></m></meta>
		</sendError>
		<sendProgress public="1" set="method" line="126">
			<f a="?state" v="null">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : null }</e></m></meta>
		</sendProgress>
		<runWork set="method" line="139">
			<f a="?state" v="null">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ state : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</runWork>
		<__doWork set="method" line="155">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__doWork>
		<__update set="method" line="172">
			<f a="deltaTime">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__update>
		<new public="1" set="method" line="41">
			<f a="?minThreads:?maxThreads" v="0:1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ maxThreads : 1, minThreads : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<enum path="lime.system._ThreadPool.ThreadPoolMessageType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/ThreadPool.hx" private="1" module="lime.system.ThreadPool">
		<COMPLETE/>
		<ERROR/>
		<EXIT/>
		<PROGRESS/>
		<WORK/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="lime.system._ThreadPool.ThreadPoolMessage" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/system/ThreadPool.hx" private="1" module="lime.system.ThreadPool">
		<state public="1"><d/></state>
		<type public="1"><e path="lime.system._ThreadPool.ThreadPoolMessageType"/></type>
		<new public="1" set="method" line="240"><f a="type:state">
	<e path="lime.system._ThreadPool.ThreadPoolMessageType"/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="lime.text.Font" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Font.hx">
		<fromBytes public="1" set="method" line="121" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.text.Font"/>
</f></fromBytes>
		<fromFile public="1" set="method" line="135" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.text.Font"/>
</f></fromFile>
		<loadFromBytes public="1" set="method" line="149" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.app.Future"><c path="lime.text.Font"/></c>
</f></loadFromBytes>
		<loadFromFile public="1" set="method" line="154" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.text.Font"/></c>
</f></loadFromFile>
		<loadFromName public="1" set="method" line="170" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.text.Font"/></c>
</f></loadFromName>
		<ascender public="1"><x path="Int"/></ascender>
		<descender public="1"><x path="Int"/></descender>
		<height public="1"><x path="Int"/></height>
		<name public="1" set="null"><c path="String"/></name>
		<numGlyphs public="1"><x path="Int"/></numGlyphs>
		<src public="1"><d/></src>
		<underlinePosition public="1"><x path="Int"/></underlinePosition>
		<underlineThickness public="1"><x path="Int"/></underlineThickness>
		<unitsPerEM public="1"><x path="Int"/></unitsPerEM>
		<__fontID>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__fontID>
		<__fontPath>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__fontPath>
		<__fontPathWithoutDirectory>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__fontPathWithoutDirectory>
		<__init>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__init>
		<decompose public="1" set="method" line="103"><f a=""><t path="lime.text.NativeFontData"/></f></decompose>
		<getGlyph public="1" set="method" line="180"><f a="character">
	<c path="String"/>
	<x path="lime.text.Glyph"/>
</f></getGlyph>
		<getGlyphs public="1" set="method" line="189">
			<f a="?characters" v="&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`&apos;\&quot;/\\&amp;*()[]{}&lt;&gt;|:;_-+=?,. &quot;">
				<c path="String"/>
				<c path="Array"><x path="lime.text.Glyph"/></c>
			</f>
			<meta><m n=":value"><e><![CDATA[{ characters : "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. " }]]></e></m></meta>
		</getGlyphs>
		<getGlyphMetrics public="1" set="method" line="199"><f a="glyph">
	<x path="lime.text.Glyph"/>
	<c path="lime.text.GlyphMetrics"/>
</f></getGlyphMetrics>
		<renderGlyph public="1" set="method" line="216"><f a="glyph:fontSize">
	<x path="lime.text.Glyph"/>
	<x path="Int"/>
	<c path="lime.graphics.Image"/>
</f></renderGlyph>
		<renderGlyphs public="1" set="method" line="255"><f a="glyphs:fontSize">
	<c path="Array"><x path="lime.text.Glyph"/></c>
	<x path="Int"/>
	<t path="Map">
		<x path="lime.text.Glyph"/>
		<c path="lime.graphics.Image"/>
	</t>
</f></renderGlyphs>
		<__copyFrom set="method" line="418">
			<f a="other">
				<c path="lime.text.Font"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__copyFrom>
		<__fromBytes set="method" line="443">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__fromBytes>
		<__fromFile set="method" line="456">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__fromFile>
		<__initializeSource set="method" line="469">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</__initializeSource>
		<__loadFromName set="method" line="496">
			<f a="name">
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.text.Font"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__loadFromName>
		<__setSize set="method" line="591">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__setSize>
		<new public="1" set="method" line="54">
			<f a="?name" v="null">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ name : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":autoBuild"><e>lime._internal.macros.AssetsMacro.embedFont()</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.text.Glyph</e></m>
		</meta>
	</class>
	<typedef path="lime.text.NativeFontData" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Font.hx" module="lime.text.Font"><a>
	<style_name><c path="String"/></style_name>
	<num_glyphs><x path="Int"/></num_glyphs>
	<kerning><c path="Array"><t path="lime.text.NativeKerningData"/></c></kerning>
	<is_italic><x path="Bool"/></is_italic>
	<is_fixed_width><x path="Bool"/></is_fixed_width>
	<is_bold><x path="Bool"/></is_bold>
	<height><x path="Int"/></height>
	<has_kerning><x path="Bool"/></has_kerning>
	<has_glyph_names><x path="Bool"/></has_glyph_names>
	<glyphs><c path="Array"><t path="lime.text.NativeGlyphData"/></c></glyphs>
	<family_name><c path="String"/></family_name>
	<em_size><x path="Int"/></em_size>
	<descend><x path="Int"/></descend>
	<ascend><x path="Int"/></ascend>
</a></typedef>
	<typedef path="lime.text.NativeGlyphData" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Font.hx" module="lime.text.Font"><a>
	<points><c path="Array"><x path="Int"/></c></points>
	<min_y><x path="Int"/></min_y>
	<min_x><x path="Int"/></min_x>
	<max_y><x path="Int"/></max_y>
	<max_x><x path="Int"/></max_x>
	<char_code><x path="Int"/></char_code>
	<advance><x path="Int"/></advance>
</a></typedef>
	<typedef path="lime.text.NativeKerningData" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Font.hx" module="lime.text.Font"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<right_glyph><x path="Int"/></right_glyph>
	<left_glyph><x path="Int"/></left_glyph>
</a></typedef>
	<abstract path="lime.text.Glyph" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Glyph.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<impl><class path="lime.text._Glyph.Glyph_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Glyph.hx" private="1" module="lime.text.Glyph" final="1"><_new public="1" set="method" line="5" static="1">
	<f a="i">
		<x path="Int"/>
		<x path="lime.text.Glyph"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="lime.text._Glyph.Glyph_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/Glyph.hx" private="1" module="lime.text.Glyph" final="1"><_new public="1" set="method" line="5" static="1">
	<f a="i">
		<x path="Int"/>
		<x path="lime.text.Glyph"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<class path="lime.text.GlyphMetrics" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/text/GlyphMetrics.hx">
		<advance public="1"><c path="lime.math.Vector2"/></advance>
		<height public="1"><x path="Int"/></height>
		<horizontalBearing public="1"><c path="lime.math.Vector2"/></horizontalBearing>
		<verticalBearing public="1"><c path="lime.math.Vector2"/></verticalBearing>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.ui.Gamepad" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Gamepad.hx">
		<devices public="1" expr="new Map&lt;Int,Gamepad&gt;()" line="14" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="lime.ui.Gamepad"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,Gamepad>()]]></e></m></meta>
		</devices>
		<onConnect public="1" expr="new Event&lt;Gamepad&gt;()" line="15" static="1">
			<c path="lime.app._Event_lime_ui_Gamepad_Void"><f a="">
	<c path="lime.ui.Gamepad"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Gamepad>()]]></e></m></meta>
		</onConnect>
		<addMappings public="1" set="method" line="33" static="1"><f a="mappings">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></addMappings>
		<__connect set="method" line="46" static="1">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__connect>
		<__disconnect set="method" line="56" static="1">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__disconnect>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<guid public="1" get="accessor" set="null"><c path="String"/></guid>
		<id public="1" set="null"><x path="Int"/></id>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<onAxisMove public="1" expr="new Event&lt;GamepadAxis -&gt; Float&gt;()">
			<c path="lime.app._Event_lime_ui_GamepadAxis_Float_Void"><f a=":">
	<x path="lime.ui.GamepadAxis"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<GamepadAxis -> Float>()]]></e></m></meta>
		</onAxisMove>
		<onButtonDown public="1" expr="new Event&lt;GamepadButton&gt;()">
			<c path="lime.app._Event_lime_ui_GamepadButton_Void"><f a="">
	<x path="lime.ui.GamepadButton"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<GamepadButton>()]]></e></m></meta>
		</onButtonDown>
		<onButtonUp public="1" expr="new Event&lt;GamepadButton&gt;()">
			<c path="lime.app._Event_lime_ui_GamepadButton_Void"><f a="">
	<x path="lime.ui.GamepadButton"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<GamepadButton>()]]></e></m></meta>
		</onButtonUp>
		<onDisconnect public="1" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onDisconnect>
		<get_guid get="inline" set="null" line="65">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_guid>
		<get_name get="inline" set="null" line="81">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_name>
		<new public="1" set="method" line="26"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.ui.Joystick</e></m>
		</meta>
	</class>
	<abstract path="lime.ui.GamepadAxis" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/GamepadAxis.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.ui._GamepadAxis.GamepadAxis_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/GamepadAxis.hx" private="1" module="lime.ui.GamepadAxis" final="1">
	<LEFT_X public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="lime.ui.GamepadAxis"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_X>
	<LEFT_Y public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="lime.ui.GamepadAxis"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_Y>
	<RIGHT_X public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
		<x path="lime.ui.GamepadAxis"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_X>
	<RIGHT_Y public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
		<x path="lime.ui.GamepadAxis"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_Y>
	<TRIGGER_LEFT public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
		<x path="lime.ui.GamepadAxis"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIGGER_LEFT>
	<TRIGGER_RIGHT public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
		<x path="lime.ui.GamepadAxis"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIGGER_RIGHT>
	<toString public="1" get="inline" set="null" line="13" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.ui._GamepadAxis.GamepadAxis_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/GamepadAxis.hx" private="1" module="lime.ui.GamepadAxis" final="1">
		<LEFT_X public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="lime.ui.GamepadAxis"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_X>
		<LEFT_Y public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="lime.ui.GamepadAxis"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_Y>
		<RIGHT_X public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
			<x path="lime.ui.GamepadAxis"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_X>
		<RIGHT_Y public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
			<x path="lime.ui.GamepadAxis"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_Y>
		<TRIGGER_LEFT public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
			<x path="lime.ui.GamepadAxis"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIGGER_LEFT>
		<TRIGGER_RIGHT public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
			<x path="lime.ui.GamepadAxis"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIGGER_RIGHT>
		<toString public="1" get="inline" set="null" line="13" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="lime.ui.GamepadButton" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/GamepadButton.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.ui._GamepadButton.GamepadButton_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/GamepadButton.hx" private="1" module="lime.ui.GamepadButton" final="1">
	<A public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</A>
	<B public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</B>
	<X public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</X>
	<Y public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Y>
	<BACK public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACK>
	<GUIDE public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GUIDE>
	<START public="1" get="inline" set="null" expr="cast 6" line="11" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</START>
	<LEFT_STICK public="1" get="inline" set="null" expr="cast 7" line="12" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_STICK>
	<RIGHT_STICK public="1" get="inline" set="null" expr="cast 8" line="13" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_STICK>
	<LEFT_SHOULDER public="1" get="inline" set="null" expr="cast 9" line="14" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_SHOULDER>
	<RIGHT_SHOULDER public="1" get="inline" set="null" expr="cast 10" line="15" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_SHOULDER>
	<DPAD_UP public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DPAD_UP>
	<DPAD_DOWN public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DPAD_DOWN>
	<DPAD_LEFT public="1" get="inline" set="null" expr="cast 13" line="18" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DPAD_LEFT>
	<DPAD_RIGHT public="1" get="inline" set="null" expr="cast 14" line="19" static="1">
		<x path="lime.ui.GamepadButton"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DPAD_RIGHT>
	<toString public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.ui._GamepadButton.GamepadButton_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/GamepadButton.hx" private="1" module="lime.ui.GamepadButton" final="1">
		<A public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</A>
		<B public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</B>
		<X public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</X>
		<Y public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Y>
		<BACK public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACK>
		<GUIDE public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GUIDE>
		<START public="1" get="inline" set="null" expr="cast 6" line="11" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</START>
		<LEFT_STICK public="1" get="inline" set="null" expr="cast 7" line="12" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_STICK>
		<RIGHT_STICK public="1" get="inline" set="null" expr="cast 8" line="13" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_STICK>
		<LEFT_SHOULDER public="1" get="inline" set="null" expr="cast 9" line="14" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_SHOULDER>
		<RIGHT_SHOULDER public="1" get="inline" set="null" expr="cast 10" line="15" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_SHOULDER>
		<DPAD_UP public="1" get="inline" set="null" expr="cast 11" line="16" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DPAD_UP>
		<DPAD_DOWN public="1" get="inline" set="null" expr="cast 12" line="17" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DPAD_DOWN>
		<DPAD_LEFT public="1" get="inline" set="null" expr="cast 13" line="18" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DPAD_LEFT>
		<DPAD_RIGHT public="1" get="inline" set="null" expr="cast 14" line="19" static="1">
			<x path="lime.ui.GamepadButton"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DPAD_RIGHT>
		<toString public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.ui.Joystick" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Joystick.hx">
		<devices public="1" expr="new Map&lt;Int,Joystick&gt;()" line="13" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="lime.ui.Joystick"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,Joystick>()]]></e></m></meta>
		</devices>
		<onConnect public="1" expr="new Event&lt;Joystick&gt;()" line="14" static="1">
			<c path="lime.app._Event_lime_ui_Joystick_Void"><f a="">
	<c path="lime.ui.Joystick"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Joystick>()]]></e></m></meta>
		</onConnect>
		<__connect set="method" line="38" static="1">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__connect>
		<__disconnect set="method" line="48" static="1">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__disconnect>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<guid public="1" get="accessor" set="null"><c path="String"/></guid>
		<id public="1" set="null"><x path="Int"/></id>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<numAxes public="1" get="accessor" set="null"><x path="Int"/></numAxes>
		<numButtons public="1" get="accessor" set="null"><x path="Int"/></numButtons>
		<numHats public="1" get="accessor" set="null"><x path="Int"/></numHats>
		<numTrackballs public="1" get="accessor" set="null"><x path="Int"/></numTrackballs>
		<onAxisMove public="1" expr="new Event&lt;Int -&gt; Float&gt;()">
			<c path="lime.app._Event_Int_Float_Void"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int -> Float>()]]></e></m></meta>
		</onAxisMove>
		<onButtonDown public="1" expr="new Event&lt;Int&gt;()">
			<c path="lime.app._Event_Int_Void"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int>()]]></e></m></meta>
		</onButtonDown>
		<onButtonUp public="1" expr="new Event&lt;Int&gt;()">
			<c path="lime.app._Event_Int_Void"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int>()]]></e></m></meta>
		</onButtonUp>
		<onDisconnect public="1" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onDisconnect>
		<onHatMove public="1" expr="new Event&lt;Int -&gt; JoystickHatPosition&gt;()">
			<c path="lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"><f a=":">
	<x path="Int"/>
	<x path="lime.ui.JoystickHatPosition"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int -> JoystickHatPosition>()]]></e></m></meta>
		</onHatMove>
		<onTrackballMove public="1" expr="new Event&lt;Int -&gt; Float -&gt; Float&gt;()">
			<c path="lime.app._Event_Int_Float_Float_Void"><f a="::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int -> Float -> Float>()]]></e></m></meta>
		</onTrackballMove>
		<get_guid get="inline" set="null" line="65">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_guid>
		<get_name get="inline" set="null" line="81">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_name>
		<get_numAxes get="inline" set="null" line="97">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_numAxes>
		<get_numButtons get="inline" set="null" line="109">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_numButtons>
		<get_numHats get="inline" set="null" line="121">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_numHats>
		<get_numTrackballs get="inline" set="null" line="130">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_numTrackballs>
		<new public="1" set="method" line="31"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<abstract path="lime.ui.JoystickHatPosition" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/JoystickHatPosition.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<impl><class path="lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/JoystickHatPosition.hx" private="1" module="lime.ui.JoystickHatPosition" final="1">
	<CENTER public="1" get="inline" set="null" expr="0x00" line="5" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>0x00</e></m></meta>
	</CENTER>
	<DOWN public="1" get="inline" set="null" expr="0x04" line="6" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>0x04</e></m></meta>
	</DOWN>
	<LEFT public="1" get="inline" set="null" expr="0x08" line="7" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>0x08</e></m></meta>
	</LEFT>
	<RIGHT public="1" get="inline" set="null" expr="0x02" line="8" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>0x02</e></m></meta>
	</RIGHT>
	<UP public="1" get="inline" set="null" expr="0x01" line="9" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>0x01</e></m></meta>
	</UP>
	<DOWN_LEFT public="1" get="inline" set="null" expr="(0x04 | 0x08)" line="10" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>(0x04 | 0x08)</e></m></meta>
	</DOWN_LEFT>
	<DOWN_RIGHT public="1" get="inline" set="null" expr="(0x04 | 0x02)" line="11" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>(0x04 | 0x02)</e></m></meta>
	</DOWN_RIGHT>
	<UP_LEFT public="1" get="inline" set="null" expr="(0x01 | 0x08)" line="12" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>(0x01 | 0x08)</e></m></meta>
	</UP_LEFT>
	<UP_RIGHT public="1" get="inline" set="null" expr="(0x01 | 0x02)" line="13" static="1">
		<x path="lime.ui.JoystickHatPosition"/>
		<meta><m n=":value"><e>(0x01 | 0x02)</e></m></meta>
	</UP_RIGHT>
	<center public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></center>
	<down public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></down>
	<left public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></left>
	<right public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></right>
	<up public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></up>
	<_new public="1" set="method" line="21" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="lime.ui.JoystickHatPosition"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_center set="method" line="27" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_center>
	<set_center get="inline" set="null" line="32" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_center>
	<get_down set="method" line="42" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_down>
	<set_down get="inline" set="null" line="47" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_down>
	<get_left set="method" line="61" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_left>
	<set_left get="inline" set="null" line="66" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_left>
	<get_right set="method" line="80" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_right>
	<set_right get="inline" set="null" line="85" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_right>
	<get_up set="method" line="99" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_up>
	<set_up get="inline" set="null" line="104" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_up>
</class></impl>
	</abstract>
	<class path="lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/JoystickHatPosition.hx" private="1" module="lime.ui.JoystickHatPosition" final="1">
		<CENTER public="1" get="inline" set="null" expr="0x00" line="5" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>0x00</e></m></meta>
		</CENTER>
		<DOWN public="1" get="inline" set="null" expr="0x04" line="6" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>0x04</e></m></meta>
		</DOWN>
		<LEFT public="1" get="inline" set="null" expr="0x08" line="7" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>0x08</e></m></meta>
		</LEFT>
		<RIGHT public="1" get="inline" set="null" expr="0x02" line="8" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>0x02</e></m></meta>
		</RIGHT>
		<UP public="1" get="inline" set="null" expr="0x01" line="9" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>0x01</e></m></meta>
		</UP>
		<DOWN_LEFT public="1" get="inline" set="null" expr="(0x04 | 0x08)" line="10" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>(0x04 | 0x08)</e></m></meta>
		</DOWN_LEFT>
		<DOWN_RIGHT public="1" get="inline" set="null" expr="(0x04 | 0x02)" line="11" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>(0x04 | 0x02)</e></m></meta>
		</DOWN_RIGHT>
		<UP_LEFT public="1" get="inline" set="null" expr="(0x01 | 0x08)" line="12" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>(0x01 | 0x08)</e></m></meta>
		</UP_LEFT>
		<UP_RIGHT public="1" get="inline" set="null" expr="(0x01 | 0x02)" line="13" static="1">
			<x path="lime.ui.JoystickHatPosition"/>
			<meta><m n=":value"><e>(0x01 | 0x02)</e></m></meta>
		</UP_RIGHT>
		<center public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></center>
		<down public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></down>
		<left public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></left>
		<right public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></right>
		<up public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></up>
		<_new public="1" set="method" line="21" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="lime.ui.JoystickHatPosition"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_center set="method" line="27" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_center>
		<set_center get="inline" set="null" line="32" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_center>
		<get_down set="method" line="42" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_down>
		<set_down get="inline" set="null" line="47" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_down>
		<get_left set="method" line="61" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_left>
		<set_left get="inline" set="null" line="66" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_left>
		<get_right set="method" line="80" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_right>
		<set_right get="inline" set="null" line="85" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_right>
		<get_up set="method" line="99" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_up>
		<set_up get="inline" set="null" line="104" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_up>
	</class>
	<abstract path="lime.ui.KeyCode" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/KeyCode.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
			<icast field="fromScanCode"><x path="lime.ui.ScanCode"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime.ui._KeyCode.KeyCode_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/KeyCode.hx" private="1" module="lime.ui.KeyCode" final="1">
	<UNKNOWN public="1" get="inline" set="null" expr="cast 0x00" line="8" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNKNOWN>
	<BACKSPACE public="1" get="inline" set="null" expr="cast 0x08" line="9" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x08</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKSPACE>
	<TAB public="1" get="inline" set="null" expr="cast 0x09" line="10" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x09</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAB>
	<RETURN public="1" get="inline" set="null" expr="cast 0x0D" line="11" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x0D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RETURN>
	<ESCAPE public="1" get="inline" set="null" expr="cast 0x1B" line="12" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x1B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ESCAPE>
	<SPACE public="1" get="inline" set="null" expr="cast 0x20" line="13" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SPACE>
	<EXCLAMATION public="1" get="inline" set="null" expr="cast 0x21" line="14" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x21</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXCLAMATION>
	<QUOTE public="1" get="inline" set="null" expr="cast 0x22" line="15" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUOTE>
	<HASH public="1" get="inline" set="null" expr="cast 0x23" line="16" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HASH>
	<DOLLAR public="1" get="inline" set="null" expr="cast 0x24" line="17" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x24</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOLLAR>
	<PERCENT public="1" get="inline" set="null" expr="cast 0x25" line="18" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x25</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PERCENT>
	<AMPERSAND public="1" get="inline" set="null" expr="cast 0x26" line="19" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x26</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AMPERSAND>
	<SINGLE_QUOTE public="1" get="inline" set="null" expr="cast 0x27" line="20" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x27</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SINGLE_QUOTE>
	<LEFT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x28" line="21" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_PARENTHESIS>
	<RIGHT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x29" line="22" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x29</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_PARENTHESIS>
	<ASTERISK public="1" get="inline" set="null" expr="cast 0x2A" line="23" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x2A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ASTERISK>
	<PLUS public="1" get="inline" set="null" expr="cast 0x2B" line="24" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x2B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PLUS>
	<COMMA public="1" get="inline" set="null" expr="cast 0x2C" line="25" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x2C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMMA>
	<MINUS public="1" get="inline" set="null" expr="cast 0x2D" line="26" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x2D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MINUS>
	<PERIOD public="1" get="inline" set="null" expr="cast 0x2E" line="27" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x2E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PERIOD>
	<SLASH public="1" get="inline" set="null" expr="cast 0x2F" line="28" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x2F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SLASH>
	<NUMBER_0 public="1" get="inline" set="null" expr="cast 0x30" line="29" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x30</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_0>
	<NUMBER_1 public="1" get="inline" set="null" expr="cast 0x31" line="30" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x31</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_1>
	<NUMBER_2 public="1" get="inline" set="null" expr="cast 0x32" line="31" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_2>
	<NUMBER_3 public="1" get="inline" set="null" expr="cast 0x33" line="32" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_3>
	<NUMBER_4 public="1" get="inline" set="null" expr="cast 0x34" line="33" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x34</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_4>
	<NUMBER_5 public="1" get="inline" set="null" expr="cast 0x35" line="34" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x35</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_5>
	<NUMBER_6 public="1" get="inline" set="null" expr="cast 0x36" line="35" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x36</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_6>
	<NUMBER_7 public="1" get="inline" set="null" expr="cast 0x37" line="36" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x37</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_7>
	<NUMBER_8 public="1" get="inline" set="null" expr="cast 0x38" line="37" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x38</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_8>
	<NUMBER_9 public="1" get="inline" set="null" expr="cast 0x39" line="38" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x39</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_9>
	<COLON public="1" get="inline" set="null" expr="cast 0x3A" line="39" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x3A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COLON>
	<SEMICOLON public="1" get="inline" set="null" expr="cast 0x3B" line="40" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x3B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEMICOLON>
	<LESS_THAN public="1" get="inline" set="null" expr="cast 0x3C" line="41" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x3C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LESS_THAN>
	<EQUALS public="1" get="inline" set="null" expr="cast 0x3D" line="42" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x3D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EQUALS>
	<GREATER_THAN public="1" get="inline" set="null" expr="cast 0x3E" line="43" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x3E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GREATER_THAN>
	<QUESTION public="1" get="inline" set="null" expr="cast 0x3F" line="44" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x3F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUESTION>
	<AT public="1" get="inline" set="null" expr="cast 0x40" line="45" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AT>
	<LEFT_BRACKET public="1" get="inline" set="null" expr="cast 0x5B" line="46" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x5B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_BRACKET>
	<BACKSLASH public="1" get="inline" set="null" expr="cast 0x5C" line="47" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x5C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKSLASH>
	<RIGHT_BRACKET public="1" get="inline" set="null" expr="cast 0x5D" line="48" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x5D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_BRACKET>
	<CARET public="1" get="inline" set="null" expr="cast 0x5E" line="49" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x5E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CARET>
	<UNDERSCORE public="1" get="inline" set="null" expr="cast 0x5F" line="50" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x5F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNDERSCORE>
	<GRAVE public="1" get="inline" set="null" expr="cast 0x60" line="51" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x60</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GRAVE>
	<A public="1" get="inline" set="null" expr="cast 0x61" line="52" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x61</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</A>
	<B public="1" get="inline" set="null" expr="cast 0x62" line="53" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x62</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</B>
	<C public="1" get="inline" set="null" expr="cast 0x63" line="54" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x63</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</C>
	<D public="1" get="inline" set="null" expr="cast 0x64" line="55" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x64</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</D>
	<E public="1" get="inline" set="null" expr="cast 0x65" line="56" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x65</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</E>
	<F public="1" get="inline" set="null" expr="cast 0x66" line="57" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x66</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F>
	<G public="1" get="inline" set="null" expr="cast 0x67" line="58" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x67</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</G>
	<H public="1" get="inline" set="null" expr="cast 0x68" line="59" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x68</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</H>
	<I public="1" get="inline" set="null" expr="cast 0x69" line="60" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x69</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</I>
	<J public="1" get="inline" set="null" expr="cast 0x6A" line="61" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x6A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</J>
	<K public="1" get="inline" set="null" expr="cast 0x6B" line="62" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x6B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</K>
	<L public="1" get="inline" set="null" expr="cast 0x6C" line="63" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x6C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</L>
	<M public="1" get="inline" set="null" expr="cast 0x6D" line="64" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x6D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</M>
	<N public="1" get="inline" set="null" expr="cast 0x6E" line="65" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x6E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</N>
	<O public="1" get="inline" set="null" expr="cast 0x6F" line="66" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x6F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</O>
	<P public="1" get="inline" set="null" expr="cast 0x70" line="67" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x70</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</P>
	<Q public="1" get="inline" set="null" expr="cast 0x71" line="68" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x71</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Q>
	<R public="1" get="inline" set="null" expr="cast 0x72" line="69" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x72</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</R>
	<S public="1" get="inline" set="null" expr="cast 0x73" line="70" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x73</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</S>
	<T public="1" get="inline" set="null" expr="cast 0x74" line="71" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x74</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</T>
	<U public="1" get="inline" set="null" expr="cast 0x75" line="72" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x75</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</U>
	<V public="1" get="inline" set="null" expr="cast 0x76" line="73" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x76</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</V>
	<W public="1" get="inline" set="null" expr="cast 0x77" line="74" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x77</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</W>
	<X public="1" get="inline" set="null" expr="cast 0x78" line="75" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x78</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</X>
	<Y public="1" get="inline" set="null" expr="cast 0x79" line="76" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x79</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Y>
	<Z public="1" get="inline" set="null" expr="cast 0x7A" line="77" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x7A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Z>
	<DELETE public="1" get="inline" set="null" expr="cast 0x7F" line="78" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x7F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DELETE>
	<CAPS_LOCK public="1" get="inline" set="null" expr="cast 0x40000039" line="79" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000039</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CAPS_LOCK>
	<F1 public="1" get="inline" set="null" expr="cast 0x4000003A" line="80" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000003A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F1>
	<F2 public="1" get="inline" set="null" expr="cast 0x4000003B" line="81" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000003B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F2>
	<F3 public="1" get="inline" set="null" expr="cast 0x4000003C" line="82" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000003C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F3>
	<F4 public="1" get="inline" set="null" expr="cast 0x4000003D" line="83" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000003D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F4>
	<F5 public="1" get="inline" set="null" expr="cast 0x4000003E" line="84" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000003E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F5>
	<F6 public="1" get="inline" set="null" expr="cast 0x4000003F" line="85" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000003F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F6>
	<F7 public="1" get="inline" set="null" expr="cast 0x40000040" line="86" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000040</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F7>
	<F8 public="1" get="inline" set="null" expr="cast 0x40000041" line="87" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000041</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F8>
	<F9 public="1" get="inline" set="null" expr="cast 0x40000042" line="88" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000042</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F9>
	<F10 public="1" get="inline" set="null" expr="cast 0x40000043" line="89" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000043</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F10>
	<F11 public="1" get="inline" set="null" expr="cast 0x40000044" line="90" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000044</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F11>
	<F12 public="1" get="inline" set="null" expr="cast 0x40000045" line="91" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000045</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F12>
	<PRINT_SCREEN public="1" get="inline" set="null" expr="cast 0x40000046" line="92" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000046</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PRINT_SCREEN>
	<SCROLL_LOCK public="1" get="inline" set="null" expr="cast 0x40000047" line="93" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000047</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SCROLL_LOCK>
	<PAUSE public="1" get="inline" set="null" expr="cast 0x40000048" line="94" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000048</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAUSE>
	<INSERT public="1" get="inline" set="null" expr="cast 0x40000049" line="95" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000049</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INSERT>
	<HOME public="1" get="inline" set="null" expr="cast 0x4000004A" line="96" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000004A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HOME>
	<PAGE_UP public="1" get="inline" set="null" expr="cast 0x4000004B" line="97" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000004B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAGE_UP>
	<END public="1" get="inline" set="null" expr="cast 0x4000004D" line="98" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000004D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</END>
	<PAGE_DOWN public="1" get="inline" set="null" expr="cast 0x4000004E" line="99" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000004E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAGE_DOWN>
	<RIGHT public="1" get="inline" set="null" expr="cast 0x4000004F" line="100" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000004F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT>
	<LEFT public="1" get="inline" set="null" expr="cast 0x40000050" line="101" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000050</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT>
	<DOWN public="1" get="inline" set="null" expr="cast 0x40000051" line="102" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000051</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOWN>
	<UP public="1" get="inline" set="null" expr="cast 0x40000052" line="103" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000052</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UP>
	<NUM_LOCK public="1" get="inline" set="null" expr="cast 0x40000053" line="104" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000053</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUM_LOCK>
	<NUMPAD_DIVIDE public="1" get="inline" set="null" expr="cast 0x40000054" line="105" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000054</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DIVIDE>
	<NUMPAD_MULTIPLY public="1" get="inline" set="null" expr="cast 0x40000055" line="106" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000055</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MULTIPLY>
	<NUMPAD_MINUS public="1" get="inline" set="null" expr="cast 0x40000056" line="107" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000056</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MINUS>
	<NUMPAD_PLUS public="1" get="inline" set="null" expr="cast 0x40000057" line="108" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000057</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PLUS>
	<NUMPAD_ENTER public="1" get="inline" set="null" expr="cast 0x40000058" line="109" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000058</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_ENTER>
	<NUMPAD_1 public="1" get="inline" set="null" expr="cast 0x40000059" line="110" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000059</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_1>
	<NUMPAD_2 public="1" get="inline" set="null" expr="cast 0x4000005A" line="111" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000005A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_2>
	<NUMPAD_3 public="1" get="inline" set="null" expr="cast 0x4000005B" line="112" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000005B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_3>
	<NUMPAD_4 public="1" get="inline" set="null" expr="cast 0x4000005C" line="113" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000005C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_4>
	<NUMPAD_5 public="1" get="inline" set="null" expr="cast 0x4000005D" line="114" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000005D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_5>
	<NUMPAD_6 public="1" get="inline" set="null" expr="cast 0x4000005E" line="115" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000005E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_6>
	<NUMPAD_7 public="1" get="inline" set="null" expr="cast 0x4000005F" line="116" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000005F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_7>
	<NUMPAD_8 public="1" get="inline" set="null" expr="cast 0x40000060" line="117" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000060</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_8>
	<NUMPAD_9 public="1" get="inline" set="null" expr="cast 0x40000061" line="118" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000061</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_9>
	<NUMPAD_0 public="1" get="inline" set="null" expr="cast 0x40000062" line="119" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000062</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_0>
	<NUMPAD_PERIOD public="1" get="inline" set="null" expr="cast 0x40000063" line="120" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000063</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PERIOD>
	<APPLICATION public="1" get="inline" set="null" expr="cast 0x40000065" line="121" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000065</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APPLICATION>
	<POWER public="1" get="inline" set="null" expr="cast 0x40000066" line="122" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000066</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</POWER>
	<NUMPAD_EQUALS public="1" get="inline" set="null" expr="cast 0x40000067" line="123" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000067</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_EQUALS>
	<F13 public="1" get="inline" set="null" expr="cast 0x40000068" line="124" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000068</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F13>
	<F14 public="1" get="inline" set="null" expr="cast 0x40000069" line="125" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000069</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F14>
	<F15 public="1" get="inline" set="null" expr="cast 0x4000006A" line="126" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000006A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F15>
	<F16 public="1" get="inline" set="null" expr="cast 0x4000006B" line="127" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000006B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F16>
	<F17 public="1" get="inline" set="null" expr="cast 0x4000006C" line="128" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000006C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F17>
	<F18 public="1" get="inline" set="null" expr="cast 0x4000006D" line="129" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000006D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F18>
	<F19 public="1" get="inline" set="null" expr="cast 0x4000006E" line="130" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000006E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F19>
	<F20 public="1" get="inline" set="null" expr="cast 0x4000006F" line="131" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000006F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F20>
	<F21 public="1" get="inline" set="null" expr="cast 0x40000070" line="132" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000070</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F21>
	<F22 public="1" get="inline" set="null" expr="cast 0x40000071" line="133" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000071</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F22>
	<F23 public="1" get="inline" set="null" expr="cast 0x40000072" line="134" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000072</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F23>
	<F24 public="1" get="inline" set="null" expr="cast 0x40000073" line="135" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000073</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F24>
	<EXECUTE public="1" get="inline" set="null" expr="cast 0x40000074" line="136" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000074</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXECUTE>
	<HELP public="1" get="inline" set="null" expr="cast 0x40000075" line="137" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000075</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HELP>
	<MENU public="1" get="inline" set="null" expr="cast 0x40000076" line="138" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000076</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MENU>
	<SELECT public="1" get="inline" set="null" expr="cast 0x40000077" line="139" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000077</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SELECT>
	<STOP public="1" get="inline" set="null" expr="cast 0x40000078" line="140" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000078</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</STOP>
	<AGAIN public="1" get="inline" set="null" expr="cast 0x40000079" line="141" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000079</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AGAIN>
	<UNDO public="1" get="inline" set="null" expr="cast 0x4000007A" line="142" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000007A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNDO>
	<CUT public="1" get="inline" set="null" expr="cast 0x4000007B" line="143" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000007B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CUT>
	<COPY public="1" get="inline" set="null" expr="cast 0x4000007C" line="144" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000007C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COPY>
	<PASTE public="1" get="inline" set="null" expr="cast 0x4000007D" line="145" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000007D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PASTE>
	<FIND public="1" get="inline" set="null" expr="cast 0x4000007E" line="146" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000007E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIND>
	<MUTE public="1" get="inline" set="null" expr="cast 0x4000007F" line="147" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000007F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MUTE>
	<VOLUME_UP public="1" get="inline" set="null" expr="cast 0x40000080" line="148" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VOLUME_UP>
	<VOLUME_DOWN public="1" get="inline" set="null" expr="cast 0x40000081" line="149" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000081</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VOLUME_DOWN>
	<NUMPAD_COMMA public="1" get="inline" set="null" expr="cast 0x40000085" line="150" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000085</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_COMMA>
	<ALT_ERASE public="1" get="inline" set="null" expr="cast 0x40000099" line="152" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000099</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALT_ERASE>
	<SYSTEM_REQUEST public="1" get="inline" set="null" expr="cast 0x4000009A" line="153" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000009A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYSTEM_REQUEST>
	<CANCEL public="1" get="inline" set="null" expr="cast 0x4000009B" line="154" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000009B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CANCEL>
	<CLEAR public="1" get="inline" set="null" expr="cast 0x4000009C" line="155" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000009C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLEAR>
	<PRIOR public="1" get="inline" set="null" expr="cast 0x4000009D" line="156" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000009D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PRIOR>
	<RETURN2 public="1" get="inline" set="null" expr="cast 0x4000009E" line="157" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000009E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RETURN2>
	<SEPARATOR public="1" get="inline" set="null" expr="cast 0x4000009F" line="158" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000009F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEPARATOR>
	<OUT public="1" get="inline" set="null" expr="cast 0x400000A0" line="159" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000A0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OUT>
	<OPER public="1" get="inline" set="null" expr="cast 0x400000A1" line="160" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000A1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OPER>
	<CLEAR_AGAIN public="1" get="inline" set="null" expr="cast 0x400000A2" line="161" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000A2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLEAR_AGAIN>
	<CRSEL public="1" get="inline" set="null" expr="cast 0x400000A3" line="162" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000A3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CRSEL>
	<EXSEL public="1" get="inline" set="null" expr="cast 0x400000A4" line="163" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000A4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXSEL>
	<NUMPAD_00 public="1" get="inline" set="null" expr="cast 0x400000B0" line="164" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_00>
	<NUMPAD_000 public="1" get="inline" set="null" expr="cast 0x400000B1" line="165" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_000>
	<THOUSAND_SEPARATOR public="1" get="inline" set="null" expr="cast 0x400000B2" line="166" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</THOUSAND_SEPARATOR>
	<DECIMAL_SEPARATOR public="1" get="inline" set="null" expr="cast 0x400000B3" line="167" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DECIMAL_SEPARATOR>
	<CURRENCY_UNIT public="1" get="inline" set="null" expr="cast 0x400000B4" line="168" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CURRENCY_UNIT>
	<CURRENCY_SUBUNIT public="1" get="inline" set="null" expr="cast 0x400000B5" line="169" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CURRENCY_SUBUNIT>
	<NUMPAD_LEFT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x400000B6" line="170" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_LEFT_PARENTHESIS>
	<NUMPAD_RIGHT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x400000B7" line="171" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_RIGHT_PARENTHESIS>
	<NUMPAD_LEFT_BRACE public="1" get="inline" set="null" expr="cast 0x400000B8" line="172" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_LEFT_BRACE>
	<NUMPAD_RIGHT_BRACE public="1" get="inline" set="null" expr="cast 0x400000B9" line="173" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000B9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_RIGHT_BRACE>
	<NUMPAD_TAB public="1" get="inline" set="null" expr="cast 0x400000BA" line="174" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000BA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_TAB>
	<NUMPAD_BACKSPACE public="1" get="inline" set="null" expr="cast 0x400000BB" line="175" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000BB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_BACKSPACE>
	<NUMPAD_A public="1" get="inline" set="null" expr="cast 0x400000BC" line="176" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000BC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_A>
	<NUMPAD_B public="1" get="inline" set="null" expr="cast 0x400000BD" line="177" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000BD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_B>
	<NUMPAD_C public="1" get="inline" set="null" expr="cast 0x400000BE" line="178" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000BE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_C>
	<NUMPAD_D public="1" get="inline" set="null" expr="cast 0x400000BF" line="179" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000BF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_D>
	<NUMPAD_E public="1" get="inline" set="null" expr="cast 0x400000C0" line="180" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_E>
	<NUMPAD_F public="1" get="inline" set="null" expr="cast 0x400000C1" line="181" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_F>
	<NUMPAD_XOR public="1" get="inline" set="null" expr="cast 0x400000C2" line="182" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_XOR>
	<NUMPAD_POWER public="1" get="inline" set="null" expr="cast 0x400000C3" line="183" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_POWER>
	<NUMPAD_PERCENT public="1" get="inline" set="null" expr="cast 0x400000C4" line="184" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PERCENT>
	<NUMPAD_LESS_THAN public="1" get="inline" set="null" expr="cast 0x400000C5" line="185" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_LESS_THAN>
	<NUMPAD_GREATER_THAN public="1" get="inline" set="null" expr="cast 0x400000C6" line="186" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_GREATER_THAN>
	<NUMPAD_AMPERSAND public="1" get="inline" set="null" expr="cast 0x400000C7" line="187" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_AMPERSAND>
	<NUMPAD_DOUBLE_AMPERSAND public="1" get="inline" set="null" expr="cast 0x400000C8" line="188" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DOUBLE_AMPERSAND>
	<NUMPAD_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 0x400000C9" line="189" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000C9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_VERTICAL_BAR>
	<NUMPAD_DOUBLE_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 0x400000CA" line="190" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000CA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DOUBLE_VERTICAL_BAR>
	<NUMPAD_COLON public="1" get="inline" set="null" expr="cast 0x400000CB" line="191" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000CB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_COLON>
	<NUMPAD_HASH public="1" get="inline" set="null" expr="cast 0x400000CC" line="192" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000CC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_HASH>
	<NUMPAD_SPACE public="1" get="inline" set="null" expr="cast 0x400000CD" line="193" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000CD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_SPACE>
	<NUMPAD_AT public="1" get="inline" set="null" expr="cast 0x400000CE" line="194" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000CE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_AT>
	<NUMPAD_EXCLAMATION public="1" get="inline" set="null" expr="cast 0x400000CF" line="195" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000CF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_EXCLAMATION>
	<NUMPAD_MEM_STORE public="1" get="inline" set="null" expr="cast 0x400000D0" line="196" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_STORE>
	<NUMPAD_MEM_RECALL public="1" get="inline" set="null" expr="cast 0x400000D1" line="197" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_RECALL>
	<NUMPAD_MEM_CLEAR public="1" get="inline" set="null" expr="cast 0x400000D2" line="198" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_CLEAR>
	<NUMPAD_MEM_ADD public="1" get="inline" set="null" expr="cast 0x400000D3" line="199" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_ADD>
	<NUMPAD_MEM_SUBTRACT public="1" get="inline" set="null" expr="cast 0x400000D4" line="200" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_SUBTRACT>
	<NUMPAD_MEM_MULTIPLY public="1" get="inline" set="null" expr="cast 0x400000D5" line="201" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_MULTIPLY>
	<NUMPAD_MEM_DIVIDE public="1" get="inline" set="null" expr="cast 0x400000D6" line="202" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_DIVIDE>
	<NUMPAD_PLUS_MINUS public="1" get="inline" set="null" expr="cast 0x400000D7" line="203" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PLUS_MINUS>
	<NUMPAD_CLEAR public="1" get="inline" set="null" expr="cast 0x400000D8" line="204" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_CLEAR>
	<NUMPAD_CLEAR_ENTRY public="1" get="inline" set="null" expr="cast 0x400000D9" line="205" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000D9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_CLEAR_ENTRY>
	<NUMPAD_BINARY public="1" get="inline" set="null" expr="cast 0x400000DA" line="206" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000DA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_BINARY>
	<NUMPAD_OCTAL public="1" get="inline" set="null" expr="cast 0x400000DB" line="207" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000DB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_OCTAL>
	<NUMPAD_DECIMAL public="1" get="inline" set="null" expr="cast 0x400000DC" line="208" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000DC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DECIMAL>
	<NUMPAD_HEXADECIMAL public="1" get="inline" set="null" expr="cast 0x400000DD" line="209" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000DD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_HEXADECIMAL>
	<LEFT_CTRL public="1" get="inline" set="null" expr="cast 0x400000E0" line="210" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_CTRL>
	<LEFT_SHIFT public="1" get="inline" set="null" expr="cast 0x400000E1" line="211" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_SHIFT>
	<LEFT_ALT public="1" get="inline" set="null" expr="cast 0x400000E2" line="212" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_ALT>
	<LEFT_META public="1" get="inline" set="null" expr="cast 0x400000E3" line="213" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_META>
	<RIGHT_CTRL public="1" get="inline" set="null" expr="cast 0x400000E4" line="214" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_CTRL>
	<RIGHT_SHIFT public="1" get="inline" set="null" expr="cast 0x400000E5" line="215" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_SHIFT>
	<RIGHT_ALT public="1" get="inline" set="null" expr="cast 0x400000E6" line="216" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_ALT>
	<RIGHT_META public="1" get="inline" set="null" expr="cast 0x400000E7" line="217" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x400000E7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_META>
	<MODE public="1" get="inline" set="null" expr="cast 0x40000101" line="218" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000101</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MODE>
	<AUDIO_NEXT public="1" get="inline" set="null" expr="cast 0x40000102" line="219" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000102</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_NEXT>
	<AUDIO_PREVIOUS public="1" get="inline" set="null" expr="cast 0x40000103" line="220" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000103</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_PREVIOUS>
	<AUDIO_STOP public="1" get="inline" set="null" expr="cast 0x40000104" line="221" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000104</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_STOP>
	<AUDIO_PLAY public="1" get="inline" set="null" expr="cast 0x40000105" line="222" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000105</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_PLAY>
	<AUDIO_MUTE public="1" get="inline" set="null" expr="cast 0x40000106" line="223" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000106</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_MUTE>
	<MEDIA_SELECT public="1" get="inline" set="null" expr="cast 0x40000107" line="224" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000107</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MEDIA_SELECT>
	<WWW public="1" get="inline" set="null" expr="cast 0x40000108" line="225" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000108</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WWW>
	<MAIL public="1" get="inline" set="null" expr="cast 0x40000109" line="226" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000109</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MAIL>
	<CALCULATOR public="1" get="inline" set="null" expr="cast 0x4000010A" line="227" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000010A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CALCULATOR>
	<COMPUTER public="1" get="inline" set="null" expr="cast 0x4000010B" line="228" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000010B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMPUTER>
	<APP_CONTROL_SEARCH public="1" get="inline" set="null" expr="cast 0x4000010C" line="229" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000010C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_SEARCH>
	<APP_CONTROL_HOME public="1" get="inline" set="null" expr="cast 0x4000010D" line="230" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000010D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_HOME>
	<APP_CONTROL_BACK public="1" get="inline" set="null" expr="cast 0x4000010E" line="231" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000010E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_BACK>
	<APP_CONTROL_FORWARD public="1" get="inline" set="null" expr="cast 0x4000010F" line="232" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000010F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_FORWARD>
	<APP_CONTROL_STOP public="1" get="inline" set="null" expr="cast 0x40000110" line="233" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000110</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_STOP>
	<APP_CONTROL_REFRESH public="1" get="inline" set="null" expr="cast 0x40000111" line="234" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000111</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_REFRESH>
	<APP_CONTROL_BOOKMARKS public="1" get="inline" set="null" expr="cast 0x40000112" line="235" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000112</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_BOOKMARKS>
	<BRIGHTNESS_DOWN public="1" get="inline" set="null" expr="cast 0x40000113" line="236" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000113</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BRIGHTNESS_DOWN>
	<BRIGHTNESS_UP public="1" get="inline" set="null" expr="cast 0x40000114" line="237" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000114</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BRIGHTNESS_UP>
	<DISPLAY_SWITCH public="1" get="inline" set="null" expr="cast 0x40000115" line="238" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000115</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DISPLAY_SWITCH>
	<BACKLIGHT_TOGGLE public="1" get="inline" set="null" expr="cast 0x40000116" line="239" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000116</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKLIGHT_TOGGLE>
	<BACKLIGHT_DOWN public="1" get="inline" set="null" expr="cast 0x40000117" line="240" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000117</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKLIGHT_DOWN>
	<BACKLIGHT_UP public="1" get="inline" set="null" expr="cast 0x40000118" line="241" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000118</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKLIGHT_UP>
	<EJECT public="1" get="inline" set="null" expr="cast 0x40000119" line="242" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x40000119</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EJECT>
	<SLEEP public="1" get="inline" set="null" expr="cast 0x4000011A" line="243" static="1">
		<x path="lime.ui.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0x4000011A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SLEEP>
	<fromScanCode public="1" set="method" line="246" static="1">
		<f a="scanCode">
			<x path="lime.ui.ScanCode"/>
			<x path="lime.ui.KeyCode"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromScanCode>
	<toScanCode set="method" line="256" static="1"><f a="keyCode">
	<x path="lime.ui.KeyCode"/>
	<x path="lime.ui.ScanCode"/>
</f></toScanCode>
	<gt get="inline" set="null" line="266" static="1">
		<f a="a:b">
			<x path="lime.ui.KeyCode"/>
			<x path="lime.ui.KeyCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="271" static="1">
		<f a="a:b">
			<x path="lime.ui.KeyCode"/>
			<x path="lime.ui.KeyCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="lime.ui.KeyCode"/>
			<x path="lime.ui.KeyCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="281" static="1">
		<f a="a:b">
			<x path="lime.ui.KeyCode"/>
			<x path="lime.ui.KeyCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<plus get="inline" set="null" line="286" static="1">
		<f a="a:b">
			<x path="lime.ui.KeyCode"/>
			<x path="Int"/>
			<x path="lime.ui.KeyCode"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</plus>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":enum"/>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.ui._KeyCode.KeyCode_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/KeyCode.hx" private="1" module="lime.ui.KeyCode" final="1">
		<UNKNOWN public="1" get="inline" set="null" expr="cast 0x00" line="8" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNKNOWN>
		<BACKSPACE public="1" get="inline" set="null" expr="cast 0x08" line="9" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x08</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKSPACE>
		<TAB public="1" get="inline" set="null" expr="cast 0x09" line="10" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x09</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAB>
		<RETURN public="1" get="inline" set="null" expr="cast 0x0D" line="11" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x0D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RETURN>
		<ESCAPE public="1" get="inline" set="null" expr="cast 0x1B" line="12" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x1B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ESCAPE>
		<SPACE public="1" get="inline" set="null" expr="cast 0x20" line="13" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SPACE>
		<EXCLAMATION public="1" get="inline" set="null" expr="cast 0x21" line="14" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x21</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXCLAMATION>
		<QUOTE public="1" get="inline" set="null" expr="cast 0x22" line="15" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUOTE>
		<HASH public="1" get="inline" set="null" expr="cast 0x23" line="16" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HASH>
		<DOLLAR public="1" get="inline" set="null" expr="cast 0x24" line="17" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x24</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOLLAR>
		<PERCENT public="1" get="inline" set="null" expr="cast 0x25" line="18" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x25</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PERCENT>
		<AMPERSAND public="1" get="inline" set="null" expr="cast 0x26" line="19" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x26</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AMPERSAND>
		<SINGLE_QUOTE public="1" get="inline" set="null" expr="cast 0x27" line="20" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x27</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SINGLE_QUOTE>
		<LEFT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x28" line="21" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_PARENTHESIS>
		<RIGHT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x29" line="22" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x29</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_PARENTHESIS>
		<ASTERISK public="1" get="inline" set="null" expr="cast 0x2A" line="23" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x2A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ASTERISK>
		<PLUS public="1" get="inline" set="null" expr="cast 0x2B" line="24" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x2B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PLUS>
		<COMMA public="1" get="inline" set="null" expr="cast 0x2C" line="25" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x2C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMMA>
		<MINUS public="1" get="inline" set="null" expr="cast 0x2D" line="26" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x2D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MINUS>
		<PERIOD public="1" get="inline" set="null" expr="cast 0x2E" line="27" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x2E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PERIOD>
		<SLASH public="1" get="inline" set="null" expr="cast 0x2F" line="28" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x2F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SLASH>
		<NUMBER_0 public="1" get="inline" set="null" expr="cast 0x30" line="29" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x30</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_0>
		<NUMBER_1 public="1" get="inline" set="null" expr="cast 0x31" line="30" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x31</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_1>
		<NUMBER_2 public="1" get="inline" set="null" expr="cast 0x32" line="31" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_2>
		<NUMBER_3 public="1" get="inline" set="null" expr="cast 0x33" line="32" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_3>
		<NUMBER_4 public="1" get="inline" set="null" expr="cast 0x34" line="33" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x34</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_4>
		<NUMBER_5 public="1" get="inline" set="null" expr="cast 0x35" line="34" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x35</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_5>
		<NUMBER_6 public="1" get="inline" set="null" expr="cast 0x36" line="35" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x36</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_6>
		<NUMBER_7 public="1" get="inline" set="null" expr="cast 0x37" line="36" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x37</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_7>
		<NUMBER_8 public="1" get="inline" set="null" expr="cast 0x38" line="37" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x38</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_8>
		<NUMBER_9 public="1" get="inline" set="null" expr="cast 0x39" line="38" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x39</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_9>
		<COLON public="1" get="inline" set="null" expr="cast 0x3A" line="39" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x3A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COLON>
		<SEMICOLON public="1" get="inline" set="null" expr="cast 0x3B" line="40" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x3B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEMICOLON>
		<LESS_THAN public="1" get="inline" set="null" expr="cast 0x3C" line="41" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x3C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LESS_THAN>
		<EQUALS public="1" get="inline" set="null" expr="cast 0x3D" line="42" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x3D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EQUALS>
		<GREATER_THAN public="1" get="inline" set="null" expr="cast 0x3E" line="43" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x3E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GREATER_THAN>
		<QUESTION public="1" get="inline" set="null" expr="cast 0x3F" line="44" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x3F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUESTION>
		<AT public="1" get="inline" set="null" expr="cast 0x40" line="45" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AT>
		<LEFT_BRACKET public="1" get="inline" set="null" expr="cast 0x5B" line="46" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x5B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_BRACKET>
		<BACKSLASH public="1" get="inline" set="null" expr="cast 0x5C" line="47" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x5C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKSLASH>
		<RIGHT_BRACKET public="1" get="inline" set="null" expr="cast 0x5D" line="48" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x5D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_BRACKET>
		<CARET public="1" get="inline" set="null" expr="cast 0x5E" line="49" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x5E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CARET>
		<UNDERSCORE public="1" get="inline" set="null" expr="cast 0x5F" line="50" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x5F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNDERSCORE>
		<GRAVE public="1" get="inline" set="null" expr="cast 0x60" line="51" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x60</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GRAVE>
		<A public="1" get="inline" set="null" expr="cast 0x61" line="52" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x61</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</A>
		<B public="1" get="inline" set="null" expr="cast 0x62" line="53" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x62</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</B>
		<C public="1" get="inline" set="null" expr="cast 0x63" line="54" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x63</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</C>
		<D public="1" get="inline" set="null" expr="cast 0x64" line="55" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x64</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</D>
		<E public="1" get="inline" set="null" expr="cast 0x65" line="56" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x65</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</E>
		<F public="1" get="inline" set="null" expr="cast 0x66" line="57" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x66</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F>
		<G public="1" get="inline" set="null" expr="cast 0x67" line="58" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x67</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</G>
		<H public="1" get="inline" set="null" expr="cast 0x68" line="59" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x68</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</H>
		<I public="1" get="inline" set="null" expr="cast 0x69" line="60" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x69</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</I>
		<J public="1" get="inline" set="null" expr="cast 0x6A" line="61" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x6A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</J>
		<K public="1" get="inline" set="null" expr="cast 0x6B" line="62" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x6B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</K>
		<L public="1" get="inline" set="null" expr="cast 0x6C" line="63" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x6C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</L>
		<M public="1" get="inline" set="null" expr="cast 0x6D" line="64" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x6D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</M>
		<N public="1" get="inline" set="null" expr="cast 0x6E" line="65" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x6E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</N>
		<O public="1" get="inline" set="null" expr="cast 0x6F" line="66" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x6F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</O>
		<P public="1" get="inline" set="null" expr="cast 0x70" line="67" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x70</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</P>
		<Q public="1" get="inline" set="null" expr="cast 0x71" line="68" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x71</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Q>
		<R public="1" get="inline" set="null" expr="cast 0x72" line="69" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x72</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</R>
		<S public="1" get="inline" set="null" expr="cast 0x73" line="70" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x73</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</S>
		<T public="1" get="inline" set="null" expr="cast 0x74" line="71" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x74</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</T>
		<U public="1" get="inline" set="null" expr="cast 0x75" line="72" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x75</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</U>
		<V public="1" get="inline" set="null" expr="cast 0x76" line="73" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x76</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</V>
		<W public="1" get="inline" set="null" expr="cast 0x77" line="74" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x77</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</W>
		<X public="1" get="inline" set="null" expr="cast 0x78" line="75" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x78</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</X>
		<Y public="1" get="inline" set="null" expr="cast 0x79" line="76" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x79</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Y>
		<Z public="1" get="inline" set="null" expr="cast 0x7A" line="77" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x7A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Z>
		<DELETE public="1" get="inline" set="null" expr="cast 0x7F" line="78" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x7F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DELETE>
		<CAPS_LOCK public="1" get="inline" set="null" expr="cast 0x40000039" line="79" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000039</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CAPS_LOCK>
		<F1 public="1" get="inline" set="null" expr="cast 0x4000003A" line="80" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000003A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F1>
		<F2 public="1" get="inline" set="null" expr="cast 0x4000003B" line="81" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000003B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F2>
		<F3 public="1" get="inline" set="null" expr="cast 0x4000003C" line="82" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000003C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F3>
		<F4 public="1" get="inline" set="null" expr="cast 0x4000003D" line="83" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000003D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F4>
		<F5 public="1" get="inline" set="null" expr="cast 0x4000003E" line="84" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000003E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F5>
		<F6 public="1" get="inline" set="null" expr="cast 0x4000003F" line="85" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000003F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F6>
		<F7 public="1" get="inline" set="null" expr="cast 0x40000040" line="86" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000040</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F7>
		<F8 public="1" get="inline" set="null" expr="cast 0x40000041" line="87" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000041</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F8>
		<F9 public="1" get="inline" set="null" expr="cast 0x40000042" line="88" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000042</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F9>
		<F10 public="1" get="inline" set="null" expr="cast 0x40000043" line="89" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000043</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F10>
		<F11 public="1" get="inline" set="null" expr="cast 0x40000044" line="90" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000044</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F11>
		<F12 public="1" get="inline" set="null" expr="cast 0x40000045" line="91" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000045</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F12>
		<PRINT_SCREEN public="1" get="inline" set="null" expr="cast 0x40000046" line="92" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000046</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PRINT_SCREEN>
		<SCROLL_LOCK public="1" get="inline" set="null" expr="cast 0x40000047" line="93" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000047</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SCROLL_LOCK>
		<PAUSE public="1" get="inline" set="null" expr="cast 0x40000048" line="94" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000048</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAUSE>
		<INSERT public="1" get="inline" set="null" expr="cast 0x40000049" line="95" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000049</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INSERT>
		<HOME public="1" get="inline" set="null" expr="cast 0x4000004A" line="96" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000004A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HOME>
		<PAGE_UP public="1" get="inline" set="null" expr="cast 0x4000004B" line="97" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000004B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAGE_UP>
		<END public="1" get="inline" set="null" expr="cast 0x4000004D" line="98" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000004D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</END>
		<PAGE_DOWN public="1" get="inline" set="null" expr="cast 0x4000004E" line="99" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000004E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAGE_DOWN>
		<RIGHT public="1" get="inline" set="null" expr="cast 0x4000004F" line="100" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000004F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT>
		<LEFT public="1" get="inline" set="null" expr="cast 0x40000050" line="101" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000050</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT>
		<DOWN public="1" get="inline" set="null" expr="cast 0x40000051" line="102" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000051</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOWN>
		<UP public="1" get="inline" set="null" expr="cast 0x40000052" line="103" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000052</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UP>
		<NUM_LOCK public="1" get="inline" set="null" expr="cast 0x40000053" line="104" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000053</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUM_LOCK>
		<NUMPAD_DIVIDE public="1" get="inline" set="null" expr="cast 0x40000054" line="105" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000054</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DIVIDE>
		<NUMPAD_MULTIPLY public="1" get="inline" set="null" expr="cast 0x40000055" line="106" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000055</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MULTIPLY>
		<NUMPAD_MINUS public="1" get="inline" set="null" expr="cast 0x40000056" line="107" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000056</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MINUS>
		<NUMPAD_PLUS public="1" get="inline" set="null" expr="cast 0x40000057" line="108" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000057</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PLUS>
		<NUMPAD_ENTER public="1" get="inline" set="null" expr="cast 0x40000058" line="109" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000058</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_ENTER>
		<NUMPAD_1 public="1" get="inline" set="null" expr="cast 0x40000059" line="110" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000059</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_1>
		<NUMPAD_2 public="1" get="inline" set="null" expr="cast 0x4000005A" line="111" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000005A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_2>
		<NUMPAD_3 public="1" get="inline" set="null" expr="cast 0x4000005B" line="112" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000005B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_3>
		<NUMPAD_4 public="1" get="inline" set="null" expr="cast 0x4000005C" line="113" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000005C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_4>
		<NUMPAD_5 public="1" get="inline" set="null" expr="cast 0x4000005D" line="114" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000005D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_5>
		<NUMPAD_6 public="1" get="inline" set="null" expr="cast 0x4000005E" line="115" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000005E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_6>
		<NUMPAD_7 public="1" get="inline" set="null" expr="cast 0x4000005F" line="116" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000005F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_7>
		<NUMPAD_8 public="1" get="inline" set="null" expr="cast 0x40000060" line="117" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000060</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_8>
		<NUMPAD_9 public="1" get="inline" set="null" expr="cast 0x40000061" line="118" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000061</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_9>
		<NUMPAD_0 public="1" get="inline" set="null" expr="cast 0x40000062" line="119" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000062</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_0>
		<NUMPAD_PERIOD public="1" get="inline" set="null" expr="cast 0x40000063" line="120" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000063</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PERIOD>
		<APPLICATION public="1" get="inline" set="null" expr="cast 0x40000065" line="121" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000065</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APPLICATION>
		<POWER public="1" get="inline" set="null" expr="cast 0x40000066" line="122" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000066</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</POWER>
		<NUMPAD_EQUALS public="1" get="inline" set="null" expr="cast 0x40000067" line="123" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000067</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_EQUALS>
		<F13 public="1" get="inline" set="null" expr="cast 0x40000068" line="124" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000068</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F13>
		<F14 public="1" get="inline" set="null" expr="cast 0x40000069" line="125" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000069</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F14>
		<F15 public="1" get="inline" set="null" expr="cast 0x4000006A" line="126" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000006A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F15>
		<F16 public="1" get="inline" set="null" expr="cast 0x4000006B" line="127" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000006B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F16>
		<F17 public="1" get="inline" set="null" expr="cast 0x4000006C" line="128" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000006C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F17>
		<F18 public="1" get="inline" set="null" expr="cast 0x4000006D" line="129" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000006D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F18>
		<F19 public="1" get="inline" set="null" expr="cast 0x4000006E" line="130" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000006E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F19>
		<F20 public="1" get="inline" set="null" expr="cast 0x4000006F" line="131" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000006F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F20>
		<F21 public="1" get="inline" set="null" expr="cast 0x40000070" line="132" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000070</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F21>
		<F22 public="1" get="inline" set="null" expr="cast 0x40000071" line="133" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000071</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F22>
		<F23 public="1" get="inline" set="null" expr="cast 0x40000072" line="134" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000072</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F23>
		<F24 public="1" get="inline" set="null" expr="cast 0x40000073" line="135" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000073</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F24>
		<EXECUTE public="1" get="inline" set="null" expr="cast 0x40000074" line="136" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000074</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXECUTE>
		<HELP public="1" get="inline" set="null" expr="cast 0x40000075" line="137" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000075</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HELP>
		<MENU public="1" get="inline" set="null" expr="cast 0x40000076" line="138" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000076</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MENU>
		<SELECT public="1" get="inline" set="null" expr="cast 0x40000077" line="139" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000077</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SELECT>
		<STOP public="1" get="inline" set="null" expr="cast 0x40000078" line="140" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000078</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</STOP>
		<AGAIN public="1" get="inline" set="null" expr="cast 0x40000079" line="141" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000079</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AGAIN>
		<UNDO public="1" get="inline" set="null" expr="cast 0x4000007A" line="142" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000007A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNDO>
		<CUT public="1" get="inline" set="null" expr="cast 0x4000007B" line="143" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000007B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CUT>
		<COPY public="1" get="inline" set="null" expr="cast 0x4000007C" line="144" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000007C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COPY>
		<PASTE public="1" get="inline" set="null" expr="cast 0x4000007D" line="145" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000007D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PASTE>
		<FIND public="1" get="inline" set="null" expr="cast 0x4000007E" line="146" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000007E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIND>
		<MUTE public="1" get="inline" set="null" expr="cast 0x4000007F" line="147" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000007F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MUTE>
		<VOLUME_UP public="1" get="inline" set="null" expr="cast 0x40000080" line="148" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VOLUME_UP>
		<VOLUME_DOWN public="1" get="inline" set="null" expr="cast 0x40000081" line="149" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000081</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VOLUME_DOWN>
		<NUMPAD_COMMA public="1" get="inline" set="null" expr="cast 0x40000085" line="150" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000085</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_COMMA>
		<ALT_ERASE public="1" get="inline" set="null" expr="cast 0x40000099" line="152" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000099</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALT_ERASE>
		<SYSTEM_REQUEST public="1" get="inline" set="null" expr="cast 0x4000009A" line="153" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000009A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYSTEM_REQUEST>
		<CANCEL public="1" get="inline" set="null" expr="cast 0x4000009B" line="154" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000009B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CANCEL>
		<CLEAR public="1" get="inline" set="null" expr="cast 0x4000009C" line="155" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000009C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLEAR>
		<PRIOR public="1" get="inline" set="null" expr="cast 0x4000009D" line="156" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000009D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PRIOR>
		<RETURN2 public="1" get="inline" set="null" expr="cast 0x4000009E" line="157" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000009E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RETURN2>
		<SEPARATOR public="1" get="inline" set="null" expr="cast 0x4000009F" line="158" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000009F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEPARATOR>
		<OUT public="1" get="inline" set="null" expr="cast 0x400000A0" line="159" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000A0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OUT>
		<OPER public="1" get="inline" set="null" expr="cast 0x400000A1" line="160" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000A1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OPER>
		<CLEAR_AGAIN public="1" get="inline" set="null" expr="cast 0x400000A2" line="161" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000A2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLEAR_AGAIN>
		<CRSEL public="1" get="inline" set="null" expr="cast 0x400000A3" line="162" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000A3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CRSEL>
		<EXSEL public="1" get="inline" set="null" expr="cast 0x400000A4" line="163" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000A4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXSEL>
		<NUMPAD_00 public="1" get="inline" set="null" expr="cast 0x400000B0" line="164" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_00>
		<NUMPAD_000 public="1" get="inline" set="null" expr="cast 0x400000B1" line="165" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_000>
		<THOUSAND_SEPARATOR public="1" get="inline" set="null" expr="cast 0x400000B2" line="166" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</THOUSAND_SEPARATOR>
		<DECIMAL_SEPARATOR public="1" get="inline" set="null" expr="cast 0x400000B3" line="167" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DECIMAL_SEPARATOR>
		<CURRENCY_UNIT public="1" get="inline" set="null" expr="cast 0x400000B4" line="168" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CURRENCY_UNIT>
		<CURRENCY_SUBUNIT public="1" get="inline" set="null" expr="cast 0x400000B5" line="169" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CURRENCY_SUBUNIT>
		<NUMPAD_LEFT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x400000B6" line="170" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_LEFT_PARENTHESIS>
		<NUMPAD_RIGHT_PARENTHESIS public="1" get="inline" set="null" expr="cast 0x400000B7" line="171" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_RIGHT_PARENTHESIS>
		<NUMPAD_LEFT_BRACE public="1" get="inline" set="null" expr="cast 0x400000B8" line="172" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_LEFT_BRACE>
		<NUMPAD_RIGHT_BRACE public="1" get="inline" set="null" expr="cast 0x400000B9" line="173" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000B9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_RIGHT_BRACE>
		<NUMPAD_TAB public="1" get="inline" set="null" expr="cast 0x400000BA" line="174" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000BA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_TAB>
		<NUMPAD_BACKSPACE public="1" get="inline" set="null" expr="cast 0x400000BB" line="175" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000BB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_BACKSPACE>
		<NUMPAD_A public="1" get="inline" set="null" expr="cast 0x400000BC" line="176" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000BC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_A>
		<NUMPAD_B public="1" get="inline" set="null" expr="cast 0x400000BD" line="177" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000BD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_B>
		<NUMPAD_C public="1" get="inline" set="null" expr="cast 0x400000BE" line="178" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000BE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_C>
		<NUMPAD_D public="1" get="inline" set="null" expr="cast 0x400000BF" line="179" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000BF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_D>
		<NUMPAD_E public="1" get="inline" set="null" expr="cast 0x400000C0" line="180" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_E>
		<NUMPAD_F public="1" get="inline" set="null" expr="cast 0x400000C1" line="181" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_F>
		<NUMPAD_XOR public="1" get="inline" set="null" expr="cast 0x400000C2" line="182" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_XOR>
		<NUMPAD_POWER public="1" get="inline" set="null" expr="cast 0x400000C3" line="183" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_POWER>
		<NUMPAD_PERCENT public="1" get="inline" set="null" expr="cast 0x400000C4" line="184" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PERCENT>
		<NUMPAD_LESS_THAN public="1" get="inline" set="null" expr="cast 0x400000C5" line="185" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_LESS_THAN>
		<NUMPAD_GREATER_THAN public="1" get="inline" set="null" expr="cast 0x400000C6" line="186" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_GREATER_THAN>
		<NUMPAD_AMPERSAND public="1" get="inline" set="null" expr="cast 0x400000C7" line="187" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_AMPERSAND>
		<NUMPAD_DOUBLE_AMPERSAND public="1" get="inline" set="null" expr="cast 0x400000C8" line="188" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DOUBLE_AMPERSAND>
		<NUMPAD_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 0x400000C9" line="189" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000C9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_VERTICAL_BAR>
		<NUMPAD_DOUBLE_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 0x400000CA" line="190" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000CA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DOUBLE_VERTICAL_BAR>
		<NUMPAD_COLON public="1" get="inline" set="null" expr="cast 0x400000CB" line="191" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000CB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_COLON>
		<NUMPAD_HASH public="1" get="inline" set="null" expr="cast 0x400000CC" line="192" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000CC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_HASH>
		<NUMPAD_SPACE public="1" get="inline" set="null" expr="cast 0x400000CD" line="193" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000CD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_SPACE>
		<NUMPAD_AT public="1" get="inline" set="null" expr="cast 0x400000CE" line="194" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000CE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_AT>
		<NUMPAD_EXCLAMATION public="1" get="inline" set="null" expr="cast 0x400000CF" line="195" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000CF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_EXCLAMATION>
		<NUMPAD_MEM_STORE public="1" get="inline" set="null" expr="cast 0x400000D0" line="196" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_STORE>
		<NUMPAD_MEM_RECALL public="1" get="inline" set="null" expr="cast 0x400000D1" line="197" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_RECALL>
		<NUMPAD_MEM_CLEAR public="1" get="inline" set="null" expr="cast 0x400000D2" line="198" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_CLEAR>
		<NUMPAD_MEM_ADD public="1" get="inline" set="null" expr="cast 0x400000D3" line="199" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_ADD>
		<NUMPAD_MEM_SUBTRACT public="1" get="inline" set="null" expr="cast 0x400000D4" line="200" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_SUBTRACT>
		<NUMPAD_MEM_MULTIPLY public="1" get="inline" set="null" expr="cast 0x400000D5" line="201" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_MULTIPLY>
		<NUMPAD_MEM_DIVIDE public="1" get="inline" set="null" expr="cast 0x400000D6" line="202" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_DIVIDE>
		<NUMPAD_PLUS_MINUS public="1" get="inline" set="null" expr="cast 0x400000D7" line="203" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PLUS_MINUS>
		<NUMPAD_CLEAR public="1" get="inline" set="null" expr="cast 0x400000D8" line="204" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_CLEAR>
		<NUMPAD_CLEAR_ENTRY public="1" get="inline" set="null" expr="cast 0x400000D9" line="205" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000D9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_CLEAR_ENTRY>
		<NUMPAD_BINARY public="1" get="inline" set="null" expr="cast 0x400000DA" line="206" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000DA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_BINARY>
		<NUMPAD_OCTAL public="1" get="inline" set="null" expr="cast 0x400000DB" line="207" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000DB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_OCTAL>
		<NUMPAD_DECIMAL public="1" get="inline" set="null" expr="cast 0x400000DC" line="208" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000DC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DECIMAL>
		<NUMPAD_HEXADECIMAL public="1" get="inline" set="null" expr="cast 0x400000DD" line="209" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000DD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_HEXADECIMAL>
		<LEFT_CTRL public="1" get="inline" set="null" expr="cast 0x400000E0" line="210" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_CTRL>
		<LEFT_SHIFT public="1" get="inline" set="null" expr="cast 0x400000E1" line="211" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_SHIFT>
		<LEFT_ALT public="1" get="inline" set="null" expr="cast 0x400000E2" line="212" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_ALT>
		<LEFT_META public="1" get="inline" set="null" expr="cast 0x400000E3" line="213" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_META>
		<RIGHT_CTRL public="1" get="inline" set="null" expr="cast 0x400000E4" line="214" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_CTRL>
		<RIGHT_SHIFT public="1" get="inline" set="null" expr="cast 0x400000E5" line="215" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_SHIFT>
		<RIGHT_ALT public="1" get="inline" set="null" expr="cast 0x400000E6" line="216" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_ALT>
		<RIGHT_META public="1" get="inline" set="null" expr="cast 0x400000E7" line="217" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x400000E7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_META>
		<MODE public="1" get="inline" set="null" expr="cast 0x40000101" line="218" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000101</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MODE>
		<AUDIO_NEXT public="1" get="inline" set="null" expr="cast 0x40000102" line="219" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000102</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_NEXT>
		<AUDIO_PREVIOUS public="1" get="inline" set="null" expr="cast 0x40000103" line="220" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000103</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_PREVIOUS>
		<AUDIO_STOP public="1" get="inline" set="null" expr="cast 0x40000104" line="221" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000104</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_STOP>
		<AUDIO_PLAY public="1" get="inline" set="null" expr="cast 0x40000105" line="222" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000105</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_PLAY>
		<AUDIO_MUTE public="1" get="inline" set="null" expr="cast 0x40000106" line="223" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000106</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_MUTE>
		<MEDIA_SELECT public="1" get="inline" set="null" expr="cast 0x40000107" line="224" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000107</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MEDIA_SELECT>
		<WWW public="1" get="inline" set="null" expr="cast 0x40000108" line="225" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000108</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WWW>
		<MAIL public="1" get="inline" set="null" expr="cast 0x40000109" line="226" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000109</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MAIL>
		<CALCULATOR public="1" get="inline" set="null" expr="cast 0x4000010A" line="227" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000010A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CALCULATOR>
		<COMPUTER public="1" get="inline" set="null" expr="cast 0x4000010B" line="228" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000010B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMPUTER>
		<APP_CONTROL_SEARCH public="1" get="inline" set="null" expr="cast 0x4000010C" line="229" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000010C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_SEARCH>
		<APP_CONTROL_HOME public="1" get="inline" set="null" expr="cast 0x4000010D" line="230" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000010D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_HOME>
		<APP_CONTROL_BACK public="1" get="inline" set="null" expr="cast 0x4000010E" line="231" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000010E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_BACK>
		<APP_CONTROL_FORWARD public="1" get="inline" set="null" expr="cast 0x4000010F" line="232" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000010F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_FORWARD>
		<APP_CONTROL_STOP public="1" get="inline" set="null" expr="cast 0x40000110" line="233" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000110</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_STOP>
		<APP_CONTROL_REFRESH public="1" get="inline" set="null" expr="cast 0x40000111" line="234" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000111</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_REFRESH>
		<APP_CONTROL_BOOKMARKS public="1" get="inline" set="null" expr="cast 0x40000112" line="235" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000112</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_BOOKMARKS>
		<BRIGHTNESS_DOWN public="1" get="inline" set="null" expr="cast 0x40000113" line="236" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000113</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BRIGHTNESS_DOWN>
		<BRIGHTNESS_UP public="1" get="inline" set="null" expr="cast 0x40000114" line="237" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000114</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BRIGHTNESS_UP>
		<DISPLAY_SWITCH public="1" get="inline" set="null" expr="cast 0x40000115" line="238" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000115</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DISPLAY_SWITCH>
		<BACKLIGHT_TOGGLE public="1" get="inline" set="null" expr="cast 0x40000116" line="239" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000116</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKLIGHT_TOGGLE>
		<BACKLIGHT_DOWN public="1" get="inline" set="null" expr="cast 0x40000117" line="240" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000117</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKLIGHT_DOWN>
		<BACKLIGHT_UP public="1" get="inline" set="null" expr="cast 0x40000118" line="241" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000118</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKLIGHT_UP>
		<EJECT public="1" get="inline" set="null" expr="cast 0x40000119" line="242" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x40000119</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EJECT>
		<SLEEP public="1" get="inline" set="null" expr="cast 0x4000011A" line="243" static="1">
			<x path="lime.ui.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0x4000011A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SLEEP>
		<fromScanCode public="1" set="method" line="246" static="1">
			<f a="scanCode">
				<x path="lime.ui.ScanCode"/>
				<x path="lime.ui.KeyCode"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromScanCode>
		<toScanCode set="method" line="256" static="1"><f a="keyCode">
	<x path="lime.ui.KeyCode"/>
	<x path="lime.ui.ScanCode"/>
</f></toScanCode>
		<gt get="inline" set="null" line="266" static="1">
			<f a="a:b">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.KeyCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="271" static="1">
			<f a="a:b">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.KeyCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.KeyCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="281" static="1">
			<f a="a:b">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.KeyCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<plus get="inline" set="null" line="286" static="1">
			<f a="a:b">
				<x path="lime.ui.KeyCode"/>
				<x path="Int"/>
				<x path="lime.ui.KeyCode"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</plus>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":enum"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<abstract path="lime.ui.KeyModifier" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/KeyModifier.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<impl><class path="lime.ui._KeyModifier.KeyModifier_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/KeyModifier.hx" private="1" module="lime.ui.KeyModifier" final="1">
	<NONE public="1" get="inline" set="null" expr="0x0000" line="5" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0000</e></m></meta>
	</NONE>
	<LEFT_SHIFT public="1" get="inline" set="null" expr="0x0001" line="6" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0001</e></m></meta>
	</LEFT_SHIFT>
	<RIGHT_SHIFT public="1" get="inline" set="null" expr="0x0002" line="7" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0002</e></m></meta>
	</RIGHT_SHIFT>
	<LEFT_CTRL public="1" get="inline" set="null" expr="0x0040" line="8" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0040</e></m></meta>
	</LEFT_CTRL>
	<RIGHT_CTRL public="1" get="inline" set="null" expr="0x0080" line="9" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0080</e></m></meta>
	</RIGHT_CTRL>
	<LEFT_ALT public="1" get="inline" set="null" expr="0x0100" line="10" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0100</e></m></meta>
	</LEFT_ALT>
	<RIGHT_ALT public="1" get="inline" set="null" expr="0x0200" line="11" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0200</e></m></meta>
	</RIGHT_ALT>
	<LEFT_META public="1" get="inline" set="null" expr="0x0400" line="12" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0400</e></m></meta>
	</LEFT_META>
	<RIGHT_META public="1" get="inline" set="null" expr="0x0800" line="13" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x0800</e></m></meta>
	</RIGHT_META>
	<NUM_LOCK public="1" get="inline" set="null" expr="0x1000" line="14" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x1000</e></m></meta>
	</NUM_LOCK>
	<CAPS_LOCK public="1" get="inline" set="null" expr="0x2000" line="15" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x2000</e></m></meta>
	</CAPS_LOCK>
	<MODE public="1" get="inline" set="null" expr="0x4000" line="16" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>0x4000</e></m></meta>
	</MODE>
	<CTRL public="1" get="inline" set="null" expr="(0x0040 | 0x0080)" line="17" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>(0x0040 | 0x0080)</e></m></meta>
	</CTRL>
	<SHIFT public="1" get="inline" set="null" expr="(0x001 | 0x0002)" line="18" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>(0x001 | 0x0002)</e></m></meta>
	</SHIFT>
	<ALT public="1" get="inline" set="null" expr="(0x0100 | 0x0200)" line="19" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>(0x0100 | 0x0200)</e></m></meta>
	</ALT>
	<META public="1" get="inline" set="null" expr="(0x0400 | 0x0800)" line="20" static="1">
		<x path="lime.ui.KeyModifier"/>
		<meta><m n=":value"><e>(0x0400 | 0x0800)</e></m></meta>
	</META>
	<altKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></altKey>
	<capsLock public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></capsLock>
	<ctrlKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></ctrlKey>
	<metaKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></metaKey>
	<numLock public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></numLock>
	<shiftKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></shiftKey>
	<get_altKey set="method" line="30" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_altKey>
	<set_altKey get="inline" set="null" line="35" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_altKey>
	<get_capsLock set="method" line="49" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_capsLock>
	<set_capsLock get="inline" set="null" line="54" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_capsLock>
	<get_ctrlKey set="method" line="68" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_ctrlKey>
	<set_ctrlKey get="inline" set="null" line="73" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_ctrlKey>
	<get_metaKey set="method" line="87" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_metaKey>
	<set_metaKey get="inline" set="null" line="92" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_metaKey>
	<get_numLock set="method" line="106" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_numLock>
	<set_numLock get="inline" set="null" line="111" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_numLock>
	<get_shiftKey set="method" line="125" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</get_shiftKey>
	<set_shiftKey get="inline" set="null" line="130" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</set_shiftKey>
</class></impl>
	</abstract>
	<class path="lime.ui._KeyModifier.KeyModifier_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/KeyModifier.hx" private="1" module="lime.ui.KeyModifier" final="1">
		<NONE public="1" get="inline" set="null" expr="0x0000" line="5" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</NONE>
		<LEFT_SHIFT public="1" get="inline" set="null" expr="0x0001" line="6" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</LEFT_SHIFT>
		<RIGHT_SHIFT public="1" get="inline" set="null" expr="0x0002" line="7" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</RIGHT_SHIFT>
		<LEFT_CTRL public="1" get="inline" set="null" expr="0x0040" line="8" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0040</e></m></meta>
		</LEFT_CTRL>
		<RIGHT_CTRL public="1" get="inline" set="null" expr="0x0080" line="9" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0080</e></m></meta>
		</RIGHT_CTRL>
		<LEFT_ALT public="1" get="inline" set="null" expr="0x0100" line="10" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0100</e></m></meta>
		</LEFT_ALT>
		<RIGHT_ALT public="1" get="inline" set="null" expr="0x0200" line="11" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0200</e></m></meta>
		</RIGHT_ALT>
		<LEFT_META public="1" get="inline" set="null" expr="0x0400" line="12" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0400</e></m></meta>
		</LEFT_META>
		<RIGHT_META public="1" get="inline" set="null" expr="0x0800" line="13" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x0800</e></m></meta>
		</RIGHT_META>
		<NUM_LOCK public="1" get="inline" set="null" expr="0x1000" line="14" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x1000</e></m></meta>
		</NUM_LOCK>
		<CAPS_LOCK public="1" get="inline" set="null" expr="0x2000" line="15" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x2000</e></m></meta>
		</CAPS_LOCK>
		<MODE public="1" get="inline" set="null" expr="0x4000" line="16" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>0x4000</e></m></meta>
		</MODE>
		<CTRL public="1" get="inline" set="null" expr="(0x0040 | 0x0080)" line="17" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>(0x0040 | 0x0080)</e></m></meta>
		</CTRL>
		<SHIFT public="1" get="inline" set="null" expr="(0x001 | 0x0002)" line="18" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>(0x001 | 0x0002)</e></m></meta>
		</SHIFT>
		<ALT public="1" get="inline" set="null" expr="(0x0100 | 0x0200)" line="19" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>(0x0100 | 0x0200)</e></m></meta>
		</ALT>
		<META public="1" get="inline" set="null" expr="(0x0400 | 0x0800)" line="20" static="1">
			<x path="lime.ui.KeyModifier"/>
			<meta><m n=":value"><e>(0x0400 | 0x0800)</e></m></meta>
		</META>
		<altKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></altKey>
		<capsLock public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></capsLock>
		<ctrlKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></ctrlKey>
		<metaKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></metaKey>
		<numLock public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></numLock>
		<shiftKey public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></shiftKey>
		<get_altKey set="method" line="30" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_altKey>
		<set_altKey get="inline" set="null" line="35" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_altKey>
		<get_capsLock set="method" line="49" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_capsLock>
		<set_capsLock get="inline" set="null" line="54" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_capsLock>
		<get_ctrlKey set="method" line="68" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_ctrlKey>
		<set_ctrlKey get="inline" set="null" line="73" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_ctrlKey>
		<get_metaKey set="method" line="87" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_metaKey>
		<set_metaKey get="inline" set="null" line="92" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_metaKey>
		<get_numLock set="method" line="106" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_numLock>
		<set_numLock get="inline" set="null" line="111" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_numLock>
		<get_shiftKey set="method" line="125" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</get_shiftKey>
		<set_shiftKey get="inline" set="null" line="130" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_shiftKey>
	</class>
	<abstract path="lime.ui.MouseButton" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/MouseButton.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.ui._MouseButton.MouseButton_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/MouseButton.hx" private="1" module="lime.ui.MouseButton" extern="1" final="1">
	<LEFT public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="lime.ui.MouseButton"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT>
	<MIDDLE public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="lime.ui.MouseButton"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MIDDLE>
	<RIGHT public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
		<x path="lime.ui.MouseButton"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.ui._MouseButton.MouseButton_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/MouseButton.hx" private="1" module="lime.ui.MouseButton" extern="1" final="1">
		<LEFT public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="lime.ui.MouseButton"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT>
		<MIDDLE public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="lime.ui.MouseButton"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MIDDLE>
		<RIGHT public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
			<x path="lime.ui.MouseButton"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="lime.ui.MouseCursor" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/MouseCursor.hx">
		<ARROW/>
		<CROSSHAIR/>
		<DEFAULT/>
		<MOVE/>
		<POINTER/>
		<RESIZE_NESW/>
		<RESIZE_NS/>
		<RESIZE_NWSE/>
		<RESIZE_WE/>
		<TEXT/>
		<WAIT/>
		<WAIT_ARROW/>
		<CUSTOM/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="lime.ui.MouseWheelMode" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/MouseWheelMode.hx">
		<PIXELS/>
		<LINES/>
		<PAGES/>
		<UNKNOWN/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="lime.ui.ScanCode" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/ScanCode.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
			<icast field="fromKeyCode"><x path="lime.ui.KeyCode"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>lime.ui.KeyCode</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime.ui._ScanCode.ScanCode_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/ScanCode.hx" private="1" module="lime.ui.ScanCode" final="1">
	<UNKNOWN public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNKNOWN>
	<BACKSPACE public="1" get="inline" set="null" expr="cast 42" line="10" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKSPACE>
	<TAB public="1" get="inline" set="null" expr="cast 43" line="11" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 43</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAB>
	<RETURN public="1" get="inline" set="null" expr="cast 40" line="12" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RETURN>
	<ESCAPE public="1" get="inline" set="null" expr="cast 41" line="13" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 41</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ESCAPE>
	<SPACE public="1" get="inline" set="null" expr="cast 44" line="14" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 44</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SPACE>
	<SINGLE_QUOTE public="1" get="inline" set="null" expr="cast 52" line="21" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 52</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SINGLE_QUOTE>
	<COMMA public="1" get="inline" set="null" expr="cast 54" line="26" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 54</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMMA>
	<MINUS public="1" get="inline" set="null" expr="cast 45" line="27" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 45</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MINUS>
	<PERIOD public="1" get="inline" set="null" expr="cast 55" line="28" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 55</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PERIOD>
	<SLASH public="1" get="inline" set="null" expr="cast 56" line="29" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 56</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SLASH>
	<NUMBER_0 public="1" get="inline" set="null" expr="cast 39" line="30" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 39</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_0>
	<NUMBER_1 public="1" get="inline" set="null" expr="cast 30" line="31" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_1>
	<NUMBER_2 public="1" get="inline" set="null" expr="cast 31" line="32" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 31</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_2>
	<NUMBER_3 public="1" get="inline" set="null" expr="cast 32" line="33" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_3>
	<NUMBER_4 public="1" get="inline" set="null" expr="cast 33" line="34" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_4>
	<NUMBER_5 public="1" get="inline" set="null" expr="cast 34" line="35" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 34</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_5>
	<NUMBER_6 public="1" get="inline" set="null" expr="cast 35" line="36" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 35</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_6>
	<NUMBER_7 public="1" get="inline" set="null" expr="cast 36" line="37" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 36</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_7>
	<NUMBER_8 public="1" get="inline" set="null" expr="cast 37" line="38" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 37</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_8>
	<NUMBER_9 public="1" get="inline" set="null" expr="cast 38" line="39" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 38</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMBER_9>
	<SEMICOLON public="1" get="inline" set="null" expr="cast 51" line="41" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 51</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEMICOLON>
	<EQUALS public="1" get="inline" set="null" expr="cast 46" line="43" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 46</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EQUALS>
	<LEFT_BRACKET public="1" get="inline" set="null" expr="cast 47" line="47" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 47</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_BRACKET>
	<BACKSLASH public="1" get="inline" set="null" expr="cast 49" line="48" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 49</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKSLASH>
	<RIGHT_BRACKET public="1" get="inline" set="null" expr="cast 48" line="49" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 48</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_BRACKET>
	<GRAVE public="1" get="inline" set="null" expr="cast 53" line="52" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 53</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GRAVE>
	<A public="1" get="inline" set="null" expr="cast 4" line="53" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</A>
	<B public="1" get="inline" set="null" expr="cast 5" line="54" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</B>
	<C public="1" get="inline" set="null" expr="cast 6" line="55" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</C>
	<D public="1" get="inline" set="null" expr="cast 7" line="56" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</D>
	<E public="1" get="inline" set="null" expr="cast 8" line="57" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</E>
	<F public="1" get="inline" set="null" expr="cast 9" line="58" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F>
	<G public="1" get="inline" set="null" expr="cast 10" line="59" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</G>
	<H public="1" get="inline" set="null" expr="cast 11" line="60" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</H>
	<I public="1" get="inline" set="null" expr="cast 12" line="61" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</I>
	<J public="1" get="inline" set="null" expr="cast 13" line="62" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</J>
	<K public="1" get="inline" set="null" expr="cast 14" line="63" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</K>
	<L public="1" get="inline" set="null" expr="cast 15" line="64" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</L>
	<M public="1" get="inline" set="null" expr="cast 16" line="65" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</M>
	<N public="1" get="inline" set="null" expr="cast 17" line="66" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</N>
	<O public="1" get="inline" set="null" expr="cast 18" line="67" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</O>
	<P public="1" get="inline" set="null" expr="cast 19" line="68" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</P>
	<Q public="1" get="inline" set="null" expr="cast 20" line="69" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Q>
	<R public="1" get="inline" set="null" expr="cast 21" line="70" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</R>
	<S public="1" get="inline" set="null" expr="cast 22" line="71" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</S>
	<T public="1" get="inline" set="null" expr="cast 23" line="72" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</T>
	<U public="1" get="inline" set="null" expr="cast 24" line="73" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 24</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</U>
	<V public="1" get="inline" set="null" expr="cast 25" line="74" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</V>
	<W public="1" get="inline" set="null" expr="cast 26" line="75" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 26</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</W>
	<X public="1" get="inline" set="null" expr="cast 27" line="76" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 27</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</X>
	<Y public="1" get="inline" set="null" expr="cast 28" line="77" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Y>
	<Z public="1" get="inline" set="null" expr="cast 29" line="78" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 29</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Z>
	<DELETE public="1" get="inline" set="null" expr="cast 76" line="79" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 76</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DELETE>
	<CAPS_LOCK public="1" get="inline" set="null" expr="cast 57" line="80" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 57</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CAPS_LOCK>
	<F1 public="1" get="inline" set="null" expr="cast 58" line="81" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 58</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F1>
	<F2 public="1" get="inline" set="null" expr="cast 59" line="82" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 59</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F2>
	<F3 public="1" get="inline" set="null" expr="cast 60" line="83" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F3>
	<F4 public="1" get="inline" set="null" expr="cast 61" line="84" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 61</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F4>
	<F5 public="1" get="inline" set="null" expr="cast 62" line="85" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 62</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F5>
	<F6 public="1" get="inline" set="null" expr="cast 63" line="86" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 63</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F6>
	<F7 public="1" get="inline" set="null" expr="cast 64" line="87" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 64</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F7>
	<F8 public="1" get="inline" set="null" expr="cast 65" line="88" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 65</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F8>
	<F9 public="1" get="inline" set="null" expr="cast 66" line="89" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 66</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F9>
	<F10 public="1" get="inline" set="null" expr="cast 67" line="90" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 67</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F10>
	<F11 public="1" get="inline" set="null" expr="cast 68" line="91" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 68</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F11>
	<F12 public="1" get="inline" set="null" expr="cast 69" line="92" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 69</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F12>
	<PRINT_SCREEN public="1" get="inline" set="null" expr="cast 70" line="93" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PRINT_SCREEN>
	<SCROLL_LOCK public="1" get="inline" set="null" expr="cast 71" line="94" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 71</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SCROLL_LOCK>
	<PAUSE public="1" get="inline" set="null" expr="cast 72" line="95" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 72</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAUSE>
	<INSERT public="1" get="inline" set="null" expr="cast 73" line="96" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 73</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INSERT>
	<HOME public="1" get="inline" set="null" expr="cast 74" line="97" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 74</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HOME>
	<PAGE_UP public="1" get="inline" set="null" expr="cast 75" line="98" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 75</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAGE_UP>
	<END public="1" get="inline" set="null" expr="cast 77" line="99" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 77</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</END>
	<PAGE_DOWN public="1" get="inline" set="null" expr="cast 78" line="100" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 78</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAGE_DOWN>
	<RIGHT public="1" get="inline" set="null" expr="cast 79" line="101" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 79</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT>
	<LEFT public="1" get="inline" set="null" expr="cast 80" line="102" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 80</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT>
	<DOWN public="1" get="inline" set="null" expr="cast 81" line="103" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 81</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOWN>
	<UP public="1" get="inline" set="null" expr="cast 82" line="104" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 82</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UP>
	<NUM_LOCK public="1" get="inline" set="null" expr="cast 83" line="105" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 83</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUM_LOCK>
	<NUMPAD_DIVIDE public="1" get="inline" set="null" expr="cast 84" line="106" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 84</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DIVIDE>
	<NUMPAD_MULTIPLY public="1" get="inline" set="null" expr="cast 85" line="107" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 85</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MULTIPLY>
	<NUMPAD_MINUS public="1" get="inline" set="null" expr="cast 86" line="108" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 86</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MINUS>
	<NUMPAD_PLUS public="1" get="inline" set="null" expr="cast 87" line="109" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PLUS>
	<NUMPAD_ENTER public="1" get="inline" set="null" expr="cast 88" line="110" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 88</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_ENTER>
	<NUMPAD_1 public="1" get="inline" set="null" expr="cast 89" line="111" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 89</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_1>
	<NUMPAD_2 public="1" get="inline" set="null" expr="cast 90" line="112" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_2>
	<NUMPAD_3 public="1" get="inline" set="null" expr="cast 91" line="113" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 91</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_3>
	<NUMPAD_4 public="1" get="inline" set="null" expr="cast 92" line="114" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 92</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_4>
	<NUMPAD_5 public="1" get="inline" set="null" expr="cast 93" line="115" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 93</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_5>
	<NUMPAD_6 public="1" get="inline" set="null" expr="cast 94" line="116" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 94</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_6>
	<NUMPAD_7 public="1" get="inline" set="null" expr="cast 95" line="117" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 95</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_7>
	<NUMPAD_8 public="1" get="inline" set="null" expr="cast 96" line="118" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 96</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_8>
	<NUMPAD_9 public="1" get="inline" set="null" expr="cast 97" line="119" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 97</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_9>
	<NUMPAD_0 public="1" get="inline" set="null" expr="cast 98" line="120" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 98</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_0>
	<NUMPAD_PERIOD public="1" get="inline" set="null" expr="cast 99" line="121" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 99</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PERIOD>
	<APPLICATION public="1" get="inline" set="null" expr="cast 101" line="122" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APPLICATION>
	<POWER public="1" get="inline" set="null" expr="cast 102" line="123" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</POWER>
	<NUMPAD_EQUALS public="1" get="inline" set="null" expr="cast 103" line="124" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 103</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_EQUALS>
	<F13 public="1" get="inline" set="null" expr="cast 104" line="125" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 104</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F13>
	<F14 public="1" get="inline" set="null" expr="cast 105" line="126" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 105</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F14>
	<F15 public="1" get="inline" set="null" expr="cast 106" line="127" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 106</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F15>
	<F16 public="1" get="inline" set="null" expr="cast 107" line="128" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 107</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F16>
	<F17 public="1" get="inline" set="null" expr="cast 108" line="129" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 108</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F17>
	<F18 public="1" get="inline" set="null" expr="cast 109" line="130" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 109</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F18>
	<F19 public="1" get="inline" set="null" expr="cast 110" line="131" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 110</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F19>
	<F20 public="1" get="inline" set="null" expr="cast 111" line="132" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 111</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F20>
	<F21 public="1" get="inline" set="null" expr="cast 112" line="133" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 112</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F21>
	<F22 public="1" get="inline" set="null" expr="cast 113" line="134" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 113</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F22>
	<F23 public="1" get="inline" set="null" expr="cast 114" line="135" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 114</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F23>
	<F24 public="1" get="inline" set="null" expr="cast 115" line="136" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 115</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F24>
	<EXECUTE public="1" get="inline" set="null" expr="cast 116" line="137" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 116</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXECUTE>
	<HELP public="1" get="inline" set="null" expr="cast 117" line="138" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 117</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HELP>
	<MENU public="1" get="inline" set="null" expr="cast 118" line="139" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 118</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MENU>
	<SELECT public="1" get="inline" set="null" expr="cast 119" line="140" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 119</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SELECT>
	<STOP public="1" get="inline" set="null" expr="cast 120" line="141" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 120</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</STOP>
	<AGAIN public="1" get="inline" set="null" expr="cast 121" line="142" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 121</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AGAIN>
	<UNDO public="1" get="inline" set="null" expr="cast 122" line="143" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 122</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNDO>
	<CUT public="1" get="inline" set="null" expr="cast 123" line="144" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 123</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CUT>
	<COPY public="1" get="inline" set="null" expr="cast 124" line="145" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 124</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COPY>
	<PASTE public="1" get="inline" set="null" expr="cast 125" line="146" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 125</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PASTE>
	<FIND public="1" get="inline" set="null" expr="cast 126" line="147" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 126</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIND>
	<MUTE public="1" get="inline" set="null" expr="cast 127" line="148" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 127</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MUTE>
	<VOLUME_UP public="1" get="inline" set="null" expr="cast 128" line="149" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 128</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VOLUME_UP>
	<VOLUME_DOWN public="1" get="inline" set="null" expr="cast 129" line="150" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 129</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VOLUME_DOWN>
	<NUMPAD_COMMA public="1" get="inline" set="null" expr="cast 133" line="151" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 133</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_COMMA>
	<ALT_ERASE public="1" get="inline" set="null" expr="cast 153" line="153" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 153</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALT_ERASE>
	<SYSTEM_REQUEST public="1" get="inline" set="null" expr="cast 154" line="154" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 154</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYSTEM_REQUEST>
	<CANCEL public="1" get="inline" set="null" expr="cast 155" line="155" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 155</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CANCEL>
	<CLEAR public="1" get="inline" set="null" expr="cast 156" line="156" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 156</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLEAR>
	<PRIOR public="1" get="inline" set="null" expr="cast 157" line="157" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 157</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PRIOR>
	<RETURN2 public="1" get="inline" set="null" expr="cast 158" line="158" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 158</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RETURN2>
	<SEPARATOR public="1" get="inline" set="null" expr="cast 159" line="159" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 159</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEPARATOR>
	<OUT public="1" get="inline" set="null" expr="cast 160" line="160" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 160</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OUT>
	<OPER public="1" get="inline" set="null" expr="cast 161" line="161" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 161</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OPER>
	<CLEAR_AGAIN public="1" get="inline" set="null" expr="cast 162" line="162" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 162</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLEAR_AGAIN>
	<CRSEL public="1" get="inline" set="null" expr="cast 163" line="163" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 163</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CRSEL>
	<EXSEL public="1" get="inline" set="null" expr="cast 164" line="164" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 164</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXSEL>
	<NUMPAD_00 public="1" get="inline" set="null" expr="cast 176" line="165" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 176</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_00>
	<NUMPAD_000 public="1" get="inline" set="null" expr="cast 177" line="166" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 177</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_000>
	<THOUSAND_SEPARATOR public="1" get="inline" set="null" expr="cast 178" line="167" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 178</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</THOUSAND_SEPARATOR>
	<DECIMAL_SEPARATOR public="1" get="inline" set="null" expr="cast 179" line="168" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 179</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DECIMAL_SEPARATOR>
	<CURRENCY_UNIT public="1" get="inline" set="null" expr="cast 180" line="169" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 180</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CURRENCY_UNIT>
	<CURRENCY_SUBUNIT public="1" get="inline" set="null" expr="cast 181" line="170" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 181</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CURRENCY_SUBUNIT>
	<NUMPAD_LEFT_PARENTHESIS public="1" get="inline" set="null" expr="cast 182" line="171" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 182</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_LEFT_PARENTHESIS>
	<NUMPAD_RIGHT_PARENTHESIS public="1" get="inline" set="null" expr="cast 183" line="172" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 183</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_RIGHT_PARENTHESIS>
	<NUMPAD_LEFT_BRACE public="1" get="inline" set="null" expr="cast 184" line="173" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 184</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_LEFT_BRACE>
	<NUMPAD_RIGHT_BRACE public="1" get="inline" set="null" expr="cast 185" line="174" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 185</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_RIGHT_BRACE>
	<NUMPAD_TAB public="1" get="inline" set="null" expr="cast 186" line="175" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 186</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_TAB>
	<NUMPAD_BACKSPACE public="1" get="inline" set="null" expr="cast 187" line="176" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 187</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_BACKSPACE>
	<NUMPAD_A public="1" get="inline" set="null" expr="cast 188" line="177" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 188</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_A>
	<NUMPAD_B public="1" get="inline" set="null" expr="cast 189" line="178" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 189</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_B>
	<NUMPAD_C public="1" get="inline" set="null" expr="cast 190" line="179" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 190</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_C>
	<NUMPAD_D public="1" get="inline" set="null" expr="cast 191" line="180" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 191</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_D>
	<NUMPAD_E public="1" get="inline" set="null" expr="cast 192" line="181" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 192</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_E>
	<NUMPAD_F public="1" get="inline" set="null" expr="cast 193" line="182" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 193</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_F>
	<NUMPAD_XOR public="1" get="inline" set="null" expr="cast 194" line="183" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 194</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_XOR>
	<NUMPAD_POWER public="1" get="inline" set="null" expr="cast 195" line="184" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 195</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_POWER>
	<NUMPAD_PERCENT public="1" get="inline" set="null" expr="cast 196" line="185" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 196</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PERCENT>
	<NUMPAD_LESS_THAN public="1" get="inline" set="null" expr="cast 197" line="186" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 197</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_LESS_THAN>
	<NUMPAD_GREATER_THAN public="1" get="inline" set="null" expr="cast 198" line="187" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 198</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_GREATER_THAN>
	<NUMPAD_AMPERSAND public="1" get="inline" set="null" expr="cast 199" line="188" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 199</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_AMPERSAND>
	<NUMPAD_DOUBLE_AMPERSAND public="1" get="inline" set="null" expr="cast 200" line="189" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DOUBLE_AMPERSAND>
	<NUMPAD_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 201" line="190" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_VERTICAL_BAR>
	<NUMPAD_DOUBLE_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 202" line="191" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DOUBLE_VERTICAL_BAR>
	<NUMPAD_COLON public="1" get="inline" set="null" expr="cast 203" line="192" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_COLON>
	<NUMPAD_HASH public="1" get="inline" set="null" expr="cast 204" line="193" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_HASH>
	<NUMPAD_SPACE public="1" get="inline" set="null" expr="cast 205" line="194" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_SPACE>
	<NUMPAD_AT public="1" get="inline" set="null" expr="cast 206" line="195" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_AT>
	<NUMPAD_EXCLAMATION public="1" get="inline" set="null" expr="cast 207" line="196" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_EXCLAMATION>
	<NUMPAD_MEM_STORE public="1" get="inline" set="null" expr="cast 208" line="197" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_STORE>
	<NUMPAD_MEM_RECALL public="1" get="inline" set="null" expr="cast 209" line="198" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 209</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_RECALL>
	<NUMPAD_MEM_CLEAR public="1" get="inline" set="null" expr="cast 210" line="199" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 210</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_CLEAR>
	<NUMPAD_MEM_ADD public="1" get="inline" set="null" expr="cast 211" line="200" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 211</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_ADD>
	<NUMPAD_MEM_SUBTRACT public="1" get="inline" set="null" expr="cast 212" line="201" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 212</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_SUBTRACT>
	<NUMPAD_MEM_MULTIPLY public="1" get="inline" set="null" expr="cast 213" line="202" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 213</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_MULTIPLY>
	<NUMPAD_MEM_DIVIDE public="1" get="inline" set="null" expr="cast 214" line="203" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 214</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_MEM_DIVIDE>
	<NUMPAD_PLUS_MINUS public="1" get="inline" set="null" expr="cast 215" line="204" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 215</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_PLUS_MINUS>
	<NUMPAD_CLEAR public="1" get="inline" set="null" expr="cast 216" line="205" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 216</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_CLEAR>
	<NUMPAD_CLEAR_ENTRY public="1" get="inline" set="null" expr="cast 217" line="206" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 217</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_CLEAR_ENTRY>
	<NUMPAD_BINARY public="1" get="inline" set="null" expr="cast 218" line="207" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 218</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_BINARY>
	<NUMPAD_OCTAL public="1" get="inline" set="null" expr="cast 219" line="208" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 219</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_OCTAL>
	<NUMPAD_DECIMAL public="1" get="inline" set="null" expr="cast 220" line="209" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 220</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_DECIMAL>
	<NUMPAD_HEXADECIMAL public="1" get="inline" set="null" expr="cast 221" line="210" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 221</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMPAD_HEXADECIMAL>
	<LEFT_CTRL public="1" get="inline" set="null" expr="cast 224" line="211" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 224</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_CTRL>
	<LEFT_SHIFT public="1" get="inline" set="null" expr="cast 225" line="212" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 225</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_SHIFT>
	<LEFT_ALT public="1" get="inline" set="null" expr="cast 226" line="213" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_ALT>
	<LEFT_META public="1" get="inline" set="null" expr="cast 227" line="214" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 227</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEFT_META>
	<RIGHT_CTRL public="1" get="inline" set="null" expr="cast 228" line="215" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 228</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_CTRL>
	<RIGHT_SHIFT public="1" get="inline" set="null" expr="cast 229" line="216" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 229</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_SHIFT>
	<RIGHT_ALT public="1" get="inline" set="null" expr="cast 230" line="217" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 230</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_ALT>
	<RIGHT_META public="1" get="inline" set="null" expr="cast 231" line="218" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 231</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIGHT_META>
	<MODE public="1" get="inline" set="null" expr="cast 257" line="219" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 257</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MODE>
	<AUDIO_NEXT public="1" get="inline" set="null" expr="cast 258" line="220" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 258</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_NEXT>
	<AUDIO_PREVIOUS public="1" get="inline" set="null" expr="cast 259" line="221" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 259</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_PREVIOUS>
	<AUDIO_STOP public="1" get="inline" set="null" expr="cast 260" line="222" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 260</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_STOP>
	<AUDIO_PLAY public="1" get="inline" set="null" expr="cast 261" line="223" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 261</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_PLAY>
	<AUDIO_MUTE public="1" get="inline" set="null" expr="cast 262" line="224" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 262</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AUDIO_MUTE>
	<MEDIA_SELECT public="1" get="inline" set="null" expr="cast 263" line="225" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 263</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MEDIA_SELECT>
	<WWW public="1" get="inline" set="null" expr="cast 264" line="226" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 264</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WWW>
	<MAIL public="1" get="inline" set="null" expr="cast 265" line="227" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 265</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MAIL>
	<CALCULATOR public="1" get="inline" set="null" expr="cast 266" line="228" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 266</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CALCULATOR>
	<COMPUTER public="1" get="inline" set="null" expr="cast 267" line="229" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 267</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMPUTER>
	<APP_CONTROL_SEARCH public="1" get="inline" set="null" expr="cast 268" line="230" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 268</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_SEARCH>
	<APP_CONTROL_HOME public="1" get="inline" set="null" expr="cast 269" line="231" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 269</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_HOME>
	<APP_CONTROL_BACK public="1" get="inline" set="null" expr="cast 270" line="232" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 270</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_BACK>
	<APP_CONTROL_FORWARD public="1" get="inline" set="null" expr="cast 271" line="233" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 271</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_FORWARD>
	<APP_CONTROL_STOP public="1" get="inline" set="null" expr="cast 272" line="234" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 272</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_STOP>
	<APP_CONTROL_REFRESH public="1" get="inline" set="null" expr="cast 273" line="235" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 273</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_REFRESH>
	<APP_CONTROL_BOOKMARKS public="1" get="inline" set="null" expr="cast 274" line="236" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 274</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APP_CONTROL_BOOKMARKS>
	<BRIGHTNESS_DOWN public="1" get="inline" set="null" expr="cast 275" line="237" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 275</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BRIGHTNESS_DOWN>
	<BRIGHTNESS_UP public="1" get="inline" set="null" expr="cast 276" line="238" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 276</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BRIGHTNESS_UP>
	<DISPLAY_SWITCH public="1" get="inline" set="null" expr="cast 277" line="239" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 277</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DISPLAY_SWITCH>
	<BACKLIGHT_TOGGLE public="1" get="inline" set="null" expr="cast 278" line="240" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 278</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKLIGHT_TOGGLE>
	<BACKLIGHT_DOWN public="1" get="inline" set="null" expr="cast 279" line="241" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 279</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKLIGHT_DOWN>
	<BACKLIGHT_UP public="1" get="inline" set="null" expr="cast 280" line="242" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 280</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BACKLIGHT_UP>
	<EJECT public="1" get="inline" set="null" expr="cast 281" line="243" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 281</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EJECT>
	<SLEEP public="1" get="inline" set="null" expr="cast 282" line="244" static="1">
		<x path="lime.ui.ScanCode"/>
		<meta>
			<m n=":value"><e>cast 282</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SLEEP>
	<fromKeyCode public="1" set="method" line="247" static="1">
		<f a="keyCode">
			<x path="lime.ui.KeyCode"/>
			<x path="lime.ui.ScanCode"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromKeyCode>
	<toKeyCode set="method" line="252" static="1"><f a="scanCode">
	<x path="lime.ui.ScanCode"/>
	<x path="lime.ui.KeyCode"/>
</f></toKeyCode>
	<gt get="inline" set="null" line="257" static="1">
		<f a="a:b">
			<x path="lime.ui.ScanCode"/>
			<x path="lime.ui.ScanCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="262" static="1">
		<f a="a:b">
			<x path="lime.ui.ScanCode"/>
			<x path="lime.ui.ScanCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="267" static="1">
		<f a="a:b">
			<x path="lime.ui.ScanCode"/>
			<x path="lime.ui.ScanCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="272" static="1">
		<f a="a:b">
			<x path="lime.ui.ScanCode"/>
			<x path="lime.ui.ScanCode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<plus get="inline" set="null" line="277" static="1">
		<f a="a:b">
			<x path="lime.ui.ScanCode"/>
			<x path="Int"/>
			<x path="lime.ui.ScanCode"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</plus>
	<meta>
		<m n=":enum"/>
		<m n=":access"><e>lime.ui.KeyCode</e></m>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.ui._ScanCode.ScanCode_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/ScanCode.hx" private="1" module="lime.ui.ScanCode" final="1">
		<UNKNOWN public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNKNOWN>
		<BACKSPACE public="1" get="inline" set="null" expr="cast 42" line="10" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKSPACE>
		<TAB public="1" get="inline" set="null" expr="cast 43" line="11" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 43</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAB>
		<RETURN public="1" get="inline" set="null" expr="cast 40" line="12" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RETURN>
		<ESCAPE public="1" get="inline" set="null" expr="cast 41" line="13" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 41</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ESCAPE>
		<SPACE public="1" get="inline" set="null" expr="cast 44" line="14" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 44</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SPACE>
		<SINGLE_QUOTE public="1" get="inline" set="null" expr="cast 52" line="21" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 52</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SINGLE_QUOTE>
		<COMMA public="1" get="inline" set="null" expr="cast 54" line="26" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 54</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMMA>
		<MINUS public="1" get="inline" set="null" expr="cast 45" line="27" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 45</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MINUS>
		<PERIOD public="1" get="inline" set="null" expr="cast 55" line="28" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 55</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PERIOD>
		<SLASH public="1" get="inline" set="null" expr="cast 56" line="29" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 56</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SLASH>
		<NUMBER_0 public="1" get="inline" set="null" expr="cast 39" line="30" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 39</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_0>
		<NUMBER_1 public="1" get="inline" set="null" expr="cast 30" line="31" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_1>
		<NUMBER_2 public="1" get="inline" set="null" expr="cast 31" line="32" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 31</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_2>
		<NUMBER_3 public="1" get="inline" set="null" expr="cast 32" line="33" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_3>
		<NUMBER_4 public="1" get="inline" set="null" expr="cast 33" line="34" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_4>
		<NUMBER_5 public="1" get="inline" set="null" expr="cast 34" line="35" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 34</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_5>
		<NUMBER_6 public="1" get="inline" set="null" expr="cast 35" line="36" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 35</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_6>
		<NUMBER_7 public="1" get="inline" set="null" expr="cast 36" line="37" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 36</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_7>
		<NUMBER_8 public="1" get="inline" set="null" expr="cast 37" line="38" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 37</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_8>
		<NUMBER_9 public="1" get="inline" set="null" expr="cast 38" line="39" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 38</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMBER_9>
		<SEMICOLON public="1" get="inline" set="null" expr="cast 51" line="41" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 51</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEMICOLON>
		<EQUALS public="1" get="inline" set="null" expr="cast 46" line="43" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 46</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EQUALS>
		<LEFT_BRACKET public="1" get="inline" set="null" expr="cast 47" line="47" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 47</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_BRACKET>
		<BACKSLASH public="1" get="inline" set="null" expr="cast 49" line="48" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 49</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKSLASH>
		<RIGHT_BRACKET public="1" get="inline" set="null" expr="cast 48" line="49" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 48</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_BRACKET>
		<GRAVE public="1" get="inline" set="null" expr="cast 53" line="52" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 53</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GRAVE>
		<A public="1" get="inline" set="null" expr="cast 4" line="53" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</A>
		<B public="1" get="inline" set="null" expr="cast 5" line="54" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</B>
		<C public="1" get="inline" set="null" expr="cast 6" line="55" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</C>
		<D public="1" get="inline" set="null" expr="cast 7" line="56" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</D>
		<E public="1" get="inline" set="null" expr="cast 8" line="57" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</E>
		<F public="1" get="inline" set="null" expr="cast 9" line="58" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F>
		<G public="1" get="inline" set="null" expr="cast 10" line="59" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</G>
		<H public="1" get="inline" set="null" expr="cast 11" line="60" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</H>
		<I public="1" get="inline" set="null" expr="cast 12" line="61" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</I>
		<J public="1" get="inline" set="null" expr="cast 13" line="62" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</J>
		<K public="1" get="inline" set="null" expr="cast 14" line="63" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</K>
		<L public="1" get="inline" set="null" expr="cast 15" line="64" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</L>
		<M public="1" get="inline" set="null" expr="cast 16" line="65" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</M>
		<N public="1" get="inline" set="null" expr="cast 17" line="66" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</N>
		<O public="1" get="inline" set="null" expr="cast 18" line="67" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</O>
		<P public="1" get="inline" set="null" expr="cast 19" line="68" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</P>
		<Q public="1" get="inline" set="null" expr="cast 20" line="69" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Q>
		<R public="1" get="inline" set="null" expr="cast 21" line="70" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</R>
		<S public="1" get="inline" set="null" expr="cast 22" line="71" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</S>
		<T public="1" get="inline" set="null" expr="cast 23" line="72" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</T>
		<U public="1" get="inline" set="null" expr="cast 24" line="73" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 24</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</U>
		<V public="1" get="inline" set="null" expr="cast 25" line="74" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</V>
		<W public="1" get="inline" set="null" expr="cast 26" line="75" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 26</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</W>
		<X public="1" get="inline" set="null" expr="cast 27" line="76" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 27</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</X>
		<Y public="1" get="inline" set="null" expr="cast 28" line="77" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Y>
		<Z public="1" get="inline" set="null" expr="cast 29" line="78" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 29</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Z>
		<DELETE public="1" get="inline" set="null" expr="cast 76" line="79" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 76</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DELETE>
		<CAPS_LOCK public="1" get="inline" set="null" expr="cast 57" line="80" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 57</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CAPS_LOCK>
		<F1 public="1" get="inline" set="null" expr="cast 58" line="81" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 58</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F1>
		<F2 public="1" get="inline" set="null" expr="cast 59" line="82" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 59</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F2>
		<F3 public="1" get="inline" set="null" expr="cast 60" line="83" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F3>
		<F4 public="1" get="inline" set="null" expr="cast 61" line="84" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 61</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F4>
		<F5 public="1" get="inline" set="null" expr="cast 62" line="85" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 62</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F5>
		<F6 public="1" get="inline" set="null" expr="cast 63" line="86" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 63</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F6>
		<F7 public="1" get="inline" set="null" expr="cast 64" line="87" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 64</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F7>
		<F8 public="1" get="inline" set="null" expr="cast 65" line="88" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 65</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F8>
		<F9 public="1" get="inline" set="null" expr="cast 66" line="89" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 66</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F9>
		<F10 public="1" get="inline" set="null" expr="cast 67" line="90" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 67</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F10>
		<F11 public="1" get="inline" set="null" expr="cast 68" line="91" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 68</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F11>
		<F12 public="1" get="inline" set="null" expr="cast 69" line="92" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 69</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F12>
		<PRINT_SCREEN public="1" get="inline" set="null" expr="cast 70" line="93" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PRINT_SCREEN>
		<SCROLL_LOCK public="1" get="inline" set="null" expr="cast 71" line="94" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 71</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SCROLL_LOCK>
		<PAUSE public="1" get="inline" set="null" expr="cast 72" line="95" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 72</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAUSE>
		<INSERT public="1" get="inline" set="null" expr="cast 73" line="96" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 73</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INSERT>
		<HOME public="1" get="inline" set="null" expr="cast 74" line="97" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 74</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HOME>
		<PAGE_UP public="1" get="inline" set="null" expr="cast 75" line="98" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 75</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAGE_UP>
		<END public="1" get="inline" set="null" expr="cast 77" line="99" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 77</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</END>
		<PAGE_DOWN public="1" get="inline" set="null" expr="cast 78" line="100" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 78</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAGE_DOWN>
		<RIGHT public="1" get="inline" set="null" expr="cast 79" line="101" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 79</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT>
		<LEFT public="1" get="inline" set="null" expr="cast 80" line="102" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 80</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT>
		<DOWN public="1" get="inline" set="null" expr="cast 81" line="103" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 81</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOWN>
		<UP public="1" get="inline" set="null" expr="cast 82" line="104" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 82</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UP>
		<NUM_LOCK public="1" get="inline" set="null" expr="cast 83" line="105" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 83</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUM_LOCK>
		<NUMPAD_DIVIDE public="1" get="inline" set="null" expr="cast 84" line="106" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 84</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DIVIDE>
		<NUMPAD_MULTIPLY public="1" get="inline" set="null" expr="cast 85" line="107" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 85</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MULTIPLY>
		<NUMPAD_MINUS public="1" get="inline" set="null" expr="cast 86" line="108" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 86</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MINUS>
		<NUMPAD_PLUS public="1" get="inline" set="null" expr="cast 87" line="109" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PLUS>
		<NUMPAD_ENTER public="1" get="inline" set="null" expr="cast 88" line="110" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 88</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_ENTER>
		<NUMPAD_1 public="1" get="inline" set="null" expr="cast 89" line="111" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 89</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_1>
		<NUMPAD_2 public="1" get="inline" set="null" expr="cast 90" line="112" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_2>
		<NUMPAD_3 public="1" get="inline" set="null" expr="cast 91" line="113" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 91</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_3>
		<NUMPAD_4 public="1" get="inline" set="null" expr="cast 92" line="114" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 92</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_4>
		<NUMPAD_5 public="1" get="inline" set="null" expr="cast 93" line="115" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 93</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_5>
		<NUMPAD_6 public="1" get="inline" set="null" expr="cast 94" line="116" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 94</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_6>
		<NUMPAD_7 public="1" get="inline" set="null" expr="cast 95" line="117" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 95</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_7>
		<NUMPAD_8 public="1" get="inline" set="null" expr="cast 96" line="118" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 96</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_8>
		<NUMPAD_9 public="1" get="inline" set="null" expr="cast 97" line="119" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 97</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_9>
		<NUMPAD_0 public="1" get="inline" set="null" expr="cast 98" line="120" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 98</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_0>
		<NUMPAD_PERIOD public="1" get="inline" set="null" expr="cast 99" line="121" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 99</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PERIOD>
		<APPLICATION public="1" get="inline" set="null" expr="cast 101" line="122" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APPLICATION>
		<POWER public="1" get="inline" set="null" expr="cast 102" line="123" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</POWER>
		<NUMPAD_EQUALS public="1" get="inline" set="null" expr="cast 103" line="124" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 103</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_EQUALS>
		<F13 public="1" get="inline" set="null" expr="cast 104" line="125" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 104</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F13>
		<F14 public="1" get="inline" set="null" expr="cast 105" line="126" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 105</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F14>
		<F15 public="1" get="inline" set="null" expr="cast 106" line="127" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 106</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F15>
		<F16 public="1" get="inline" set="null" expr="cast 107" line="128" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 107</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F16>
		<F17 public="1" get="inline" set="null" expr="cast 108" line="129" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 108</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F17>
		<F18 public="1" get="inline" set="null" expr="cast 109" line="130" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 109</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F18>
		<F19 public="1" get="inline" set="null" expr="cast 110" line="131" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 110</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F19>
		<F20 public="1" get="inline" set="null" expr="cast 111" line="132" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 111</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F20>
		<F21 public="1" get="inline" set="null" expr="cast 112" line="133" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 112</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F21>
		<F22 public="1" get="inline" set="null" expr="cast 113" line="134" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 113</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F22>
		<F23 public="1" get="inline" set="null" expr="cast 114" line="135" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 114</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F23>
		<F24 public="1" get="inline" set="null" expr="cast 115" line="136" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 115</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F24>
		<EXECUTE public="1" get="inline" set="null" expr="cast 116" line="137" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 116</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXECUTE>
		<HELP public="1" get="inline" set="null" expr="cast 117" line="138" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 117</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HELP>
		<MENU public="1" get="inline" set="null" expr="cast 118" line="139" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 118</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MENU>
		<SELECT public="1" get="inline" set="null" expr="cast 119" line="140" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 119</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SELECT>
		<STOP public="1" get="inline" set="null" expr="cast 120" line="141" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 120</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</STOP>
		<AGAIN public="1" get="inline" set="null" expr="cast 121" line="142" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 121</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AGAIN>
		<UNDO public="1" get="inline" set="null" expr="cast 122" line="143" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 122</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNDO>
		<CUT public="1" get="inline" set="null" expr="cast 123" line="144" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 123</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CUT>
		<COPY public="1" get="inline" set="null" expr="cast 124" line="145" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 124</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COPY>
		<PASTE public="1" get="inline" set="null" expr="cast 125" line="146" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 125</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PASTE>
		<FIND public="1" get="inline" set="null" expr="cast 126" line="147" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 126</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIND>
		<MUTE public="1" get="inline" set="null" expr="cast 127" line="148" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 127</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MUTE>
		<VOLUME_UP public="1" get="inline" set="null" expr="cast 128" line="149" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 128</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VOLUME_UP>
		<VOLUME_DOWN public="1" get="inline" set="null" expr="cast 129" line="150" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 129</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VOLUME_DOWN>
		<NUMPAD_COMMA public="1" get="inline" set="null" expr="cast 133" line="151" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 133</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_COMMA>
		<ALT_ERASE public="1" get="inline" set="null" expr="cast 153" line="153" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 153</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALT_ERASE>
		<SYSTEM_REQUEST public="1" get="inline" set="null" expr="cast 154" line="154" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 154</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYSTEM_REQUEST>
		<CANCEL public="1" get="inline" set="null" expr="cast 155" line="155" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 155</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CANCEL>
		<CLEAR public="1" get="inline" set="null" expr="cast 156" line="156" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 156</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLEAR>
		<PRIOR public="1" get="inline" set="null" expr="cast 157" line="157" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 157</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PRIOR>
		<RETURN2 public="1" get="inline" set="null" expr="cast 158" line="158" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 158</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RETURN2>
		<SEPARATOR public="1" get="inline" set="null" expr="cast 159" line="159" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 159</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEPARATOR>
		<OUT public="1" get="inline" set="null" expr="cast 160" line="160" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 160</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OUT>
		<OPER public="1" get="inline" set="null" expr="cast 161" line="161" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 161</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OPER>
		<CLEAR_AGAIN public="1" get="inline" set="null" expr="cast 162" line="162" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 162</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLEAR_AGAIN>
		<CRSEL public="1" get="inline" set="null" expr="cast 163" line="163" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 163</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CRSEL>
		<EXSEL public="1" get="inline" set="null" expr="cast 164" line="164" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 164</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXSEL>
		<NUMPAD_00 public="1" get="inline" set="null" expr="cast 176" line="165" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 176</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_00>
		<NUMPAD_000 public="1" get="inline" set="null" expr="cast 177" line="166" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 177</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_000>
		<THOUSAND_SEPARATOR public="1" get="inline" set="null" expr="cast 178" line="167" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 178</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</THOUSAND_SEPARATOR>
		<DECIMAL_SEPARATOR public="1" get="inline" set="null" expr="cast 179" line="168" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 179</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DECIMAL_SEPARATOR>
		<CURRENCY_UNIT public="1" get="inline" set="null" expr="cast 180" line="169" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 180</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CURRENCY_UNIT>
		<CURRENCY_SUBUNIT public="1" get="inline" set="null" expr="cast 181" line="170" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 181</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CURRENCY_SUBUNIT>
		<NUMPAD_LEFT_PARENTHESIS public="1" get="inline" set="null" expr="cast 182" line="171" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 182</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_LEFT_PARENTHESIS>
		<NUMPAD_RIGHT_PARENTHESIS public="1" get="inline" set="null" expr="cast 183" line="172" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 183</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_RIGHT_PARENTHESIS>
		<NUMPAD_LEFT_BRACE public="1" get="inline" set="null" expr="cast 184" line="173" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 184</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_LEFT_BRACE>
		<NUMPAD_RIGHT_BRACE public="1" get="inline" set="null" expr="cast 185" line="174" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 185</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_RIGHT_BRACE>
		<NUMPAD_TAB public="1" get="inline" set="null" expr="cast 186" line="175" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 186</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_TAB>
		<NUMPAD_BACKSPACE public="1" get="inline" set="null" expr="cast 187" line="176" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 187</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_BACKSPACE>
		<NUMPAD_A public="1" get="inline" set="null" expr="cast 188" line="177" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 188</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_A>
		<NUMPAD_B public="1" get="inline" set="null" expr="cast 189" line="178" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 189</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_B>
		<NUMPAD_C public="1" get="inline" set="null" expr="cast 190" line="179" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 190</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_C>
		<NUMPAD_D public="1" get="inline" set="null" expr="cast 191" line="180" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 191</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_D>
		<NUMPAD_E public="1" get="inline" set="null" expr="cast 192" line="181" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 192</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_E>
		<NUMPAD_F public="1" get="inline" set="null" expr="cast 193" line="182" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 193</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_F>
		<NUMPAD_XOR public="1" get="inline" set="null" expr="cast 194" line="183" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 194</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_XOR>
		<NUMPAD_POWER public="1" get="inline" set="null" expr="cast 195" line="184" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 195</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_POWER>
		<NUMPAD_PERCENT public="1" get="inline" set="null" expr="cast 196" line="185" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 196</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PERCENT>
		<NUMPAD_LESS_THAN public="1" get="inline" set="null" expr="cast 197" line="186" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 197</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_LESS_THAN>
		<NUMPAD_GREATER_THAN public="1" get="inline" set="null" expr="cast 198" line="187" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 198</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_GREATER_THAN>
		<NUMPAD_AMPERSAND public="1" get="inline" set="null" expr="cast 199" line="188" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 199</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_AMPERSAND>
		<NUMPAD_DOUBLE_AMPERSAND public="1" get="inline" set="null" expr="cast 200" line="189" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DOUBLE_AMPERSAND>
		<NUMPAD_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 201" line="190" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_VERTICAL_BAR>
		<NUMPAD_DOUBLE_VERTICAL_BAR public="1" get="inline" set="null" expr="cast 202" line="191" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DOUBLE_VERTICAL_BAR>
		<NUMPAD_COLON public="1" get="inline" set="null" expr="cast 203" line="192" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_COLON>
		<NUMPAD_HASH public="1" get="inline" set="null" expr="cast 204" line="193" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_HASH>
		<NUMPAD_SPACE public="1" get="inline" set="null" expr="cast 205" line="194" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_SPACE>
		<NUMPAD_AT public="1" get="inline" set="null" expr="cast 206" line="195" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_AT>
		<NUMPAD_EXCLAMATION public="1" get="inline" set="null" expr="cast 207" line="196" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_EXCLAMATION>
		<NUMPAD_MEM_STORE public="1" get="inline" set="null" expr="cast 208" line="197" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_STORE>
		<NUMPAD_MEM_RECALL public="1" get="inline" set="null" expr="cast 209" line="198" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 209</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_RECALL>
		<NUMPAD_MEM_CLEAR public="1" get="inline" set="null" expr="cast 210" line="199" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 210</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_CLEAR>
		<NUMPAD_MEM_ADD public="1" get="inline" set="null" expr="cast 211" line="200" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 211</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_ADD>
		<NUMPAD_MEM_SUBTRACT public="1" get="inline" set="null" expr="cast 212" line="201" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 212</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_SUBTRACT>
		<NUMPAD_MEM_MULTIPLY public="1" get="inline" set="null" expr="cast 213" line="202" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 213</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_MULTIPLY>
		<NUMPAD_MEM_DIVIDE public="1" get="inline" set="null" expr="cast 214" line="203" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 214</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_MEM_DIVIDE>
		<NUMPAD_PLUS_MINUS public="1" get="inline" set="null" expr="cast 215" line="204" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 215</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_PLUS_MINUS>
		<NUMPAD_CLEAR public="1" get="inline" set="null" expr="cast 216" line="205" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 216</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_CLEAR>
		<NUMPAD_CLEAR_ENTRY public="1" get="inline" set="null" expr="cast 217" line="206" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 217</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_CLEAR_ENTRY>
		<NUMPAD_BINARY public="1" get="inline" set="null" expr="cast 218" line="207" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 218</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_BINARY>
		<NUMPAD_OCTAL public="1" get="inline" set="null" expr="cast 219" line="208" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 219</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_OCTAL>
		<NUMPAD_DECIMAL public="1" get="inline" set="null" expr="cast 220" line="209" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 220</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_DECIMAL>
		<NUMPAD_HEXADECIMAL public="1" get="inline" set="null" expr="cast 221" line="210" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 221</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMPAD_HEXADECIMAL>
		<LEFT_CTRL public="1" get="inline" set="null" expr="cast 224" line="211" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 224</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_CTRL>
		<LEFT_SHIFT public="1" get="inline" set="null" expr="cast 225" line="212" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 225</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_SHIFT>
		<LEFT_ALT public="1" get="inline" set="null" expr="cast 226" line="213" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_ALT>
		<LEFT_META public="1" get="inline" set="null" expr="cast 227" line="214" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 227</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEFT_META>
		<RIGHT_CTRL public="1" get="inline" set="null" expr="cast 228" line="215" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 228</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_CTRL>
		<RIGHT_SHIFT public="1" get="inline" set="null" expr="cast 229" line="216" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 229</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_SHIFT>
		<RIGHT_ALT public="1" get="inline" set="null" expr="cast 230" line="217" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 230</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_ALT>
		<RIGHT_META public="1" get="inline" set="null" expr="cast 231" line="218" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 231</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIGHT_META>
		<MODE public="1" get="inline" set="null" expr="cast 257" line="219" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 257</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MODE>
		<AUDIO_NEXT public="1" get="inline" set="null" expr="cast 258" line="220" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 258</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_NEXT>
		<AUDIO_PREVIOUS public="1" get="inline" set="null" expr="cast 259" line="221" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 259</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_PREVIOUS>
		<AUDIO_STOP public="1" get="inline" set="null" expr="cast 260" line="222" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 260</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_STOP>
		<AUDIO_PLAY public="1" get="inline" set="null" expr="cast 261" line="223" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 261</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_PLAY>
		<AUDIO_MUTE public="1" get="inline" set="null" expr="cast 262" line="224" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 262</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AUDIO_MUTE>
		<MEDIA_SELECT public="1" get="inline" set="null" expr="cast 263" line="225" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 263</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MEDIA_SELECT>
		<WWW public="1" get="inline" set="null" expr="cast 264" line="226" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 264</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WWW>
		<MAIL public="1" get="inline" set="null" expr="cast 265" line="227" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 265</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MAIL>
		<CALCULATOR public="1" get="inline" set="null" expr="cast 266" line="228" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 266</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CALCULATOR>
		<COMPUTER public="1" get="inline" set="null" expr="cast 267" line="229" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 267</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMPUTER>
		<APP_CONTROL_SEARCH public="1" get="inline" set="null" expr="cast 268" line="230" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 268</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_SEARCH>
		<APP_CONTROL_HOME public="1" get="inline" set="null" expr="cast 269" line="231" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 269</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_HOME>
		<APP_CONTROL_BACK public="1" get="inline" set="null" expr="cast 270" line="232" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 270</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_BACK>
		<APP_CONTROL_FORWARD public="1" get="inline" set="null" expr="cast 271" line="233" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 271</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_FORWARD>
		<APP_CONTROL_STOP public="1" get="inline" set="null" expr="cast 272" line="234" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 272</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_STOP>
		<APP_CONTROL_REFRESH public="1" get="inline" set="null" expr="cast 273" line="235" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 273</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_REFRESH>
		<APP_CONTROL_BOOKMARKS public="1" get="inline" set="null" expr="cast 274" line="236" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 274</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APP_CONTROL_BOOKMARKS>
		<BRIGHTNESS_DOWN public="1" get="inline" set="null" expr="cast 275" line="237" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 275</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BRIGHTNESS_DOWN>
		<BRIGHTNESS_UP public="1" get="inline" set="null" expr="cast 276" line="238" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 276</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BRIGHTNESS_UP>
		<DISPLAY_SWITCH public="1" get="inline" set="null" expr="cast 277" line="239" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 277</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DISPLAY_SWITCH>
		<BACKLIGHT_TOGGLE public="1" get="inline" set="null" expr="cast 278" line="240" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 278</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKLIGHT_TOGGLE>
		<BACKLIGHT_DOWN public="1" get="inline" set="null" expr="cast 279" line="241" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 279</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKLIGHT_DOWN>
		<BACKLIGHT_UP public="1" get="inline" set="null" expr="cast 280" line="242" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 280</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BACKLIGHT_UP>
		<EJECT public="1" get="inline" set="null" expr="cast 281" line="243" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 281</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EJECT>
		<SLEEP public="1" get="inline" set="null" expr="cast 282" line="244" static="1">
			<x path="lime.ui.ScanCode"/>
			<meta>
				<m n=":value"><e>cast 282</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SLEEP>
		<fromKeyCode public="1" set="method" line="247" static="1">
			<f a="keyCode">
				<x path="lime.ui.KeyCode"/>
				<x path="lime.ui.ScanCode"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromKeyCode>
		<toKeyCode set="method" line="252" static="1"><f a="scanCode">
	<x path="lime.ui.ScanCode"/>
	<x path="lime.ui.KeyCode"/>
</f></toKeyCode>
		<gt get="inline" set="null" line="257" static="1">
			<f a="a:b">
				<x path="lime.ui.ScanCode"/>
				<x path="lime.ui.ScanCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="262" static="1">
			<f a="a:b">
				<x path="lime.ui.ScanCode"/>
				<x path="lime.ui.ScanCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="267" static="1">
			<f a="a:b">
				<x path="lime.ui.ScanCode"/>
				<x path="lime.ui.ScanCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="272" static="1">
			<f a="a:b">
				<x path="lime.ui.ScanCode"/>
				<x path="lime.ui.ScanCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<plus get="inline" set="null" line="277" static="1">
			<f a="a:b">
				<x path="lime.ui.ScanCode"/>
				<x path="Int"/>
				<x path="lime.ui.ScanCode"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</plus>
		<meta>
			<m n=":enum"/>
			<m n=":access"><e>lime.ui.KeyCode</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<class path="lime.ui.Touch" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Touch.hx">
		<onCancel public="1" expr="new Event&lt;Touch&gt;()" line="11" static="1">
			<c path="lime.app._Event_lime_ui_Touch_Void"><f a="">
	<c path="lime.ui.Touch"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Touch>()]]></e></m></meta>
		</onCancel>
		<onEnd public="1" expr="new Event&lt;Touch&gt;()" line="12" static="1">
			<c path="lime.app._Event_lime_ui_Touch_Void"><f a="">
	<c path="lime.ui.Touch"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Touch>()]]></e></m></meta>
		</onEnd>
		<onMove public="1" expr="new Event&lt;Touch&gt;()" line="13" static="1">
			<c path="lime.app._Event_lime_ui_Touch_Void"><f a="">
	<c path="lime.ui.Touch"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Touch>()]]></e></m></meta>
		</onMove>
		<onStart public="1" expr="new Event&lt;Touch&gt;()" line="14" static="1">
			<c path="lime.app._Event_lime_ui_Touch_Void"><f a="">
	<c path="lime.ui.Touch"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Touch>()]]></e></m></meta>
		</onStart>
		<device public="1"><x path="Int"/></device>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<id public="1"><x path="Int"/></id>
		<pressure public="1"><x path="Float"/></pressure>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<new public="1" set="method" line="25"><f a="x:y:id:dx:dy:pressure:device">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<typedef path="lime.ui.Stage" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx" module="lime.ui.Window"><d/></typedef>
	<class path="lime.ui.Window" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx">
		<application public="1" set="null"><c path="lime.app.Application"/></application>
		<borderless public="1" get="accessor" set="accessor"><x path="Bool"/></borderless>
		<context public="1" set="null"><c path="lime.graphics.RenderContext"/></context>
		<cursor public="1" get="accessor" set="accessor"><e path="lime.ui.MouseCursor"/></cursor>
		<display public="1" get="accessor" set="null"><c path="lime.system.Display"/></display>
		<displayMode public="1" get="accessor" set="accessor"><c path="lime.system.DisplayMode"/></displayMode>
		<element public="1" set="null"><d/></element>
		<frameRate public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>* The current frame rate (measured in frames-per-second) of the window.
	 *
	 * On some platforms, a frame rate of 60 or greater may imply vsync, which will
	 * perform more quickly on displays with a higher refresh rate</haxe_doc>
		</frameRate>
		<fullscreen public="1" get="accessor" set="accessor"><x path="Bool"/></fullscreen>
		<height public="1" get="accessor" set="accessor"><x path="Int"/></height>
		<hidden public="1" get="accessor" set="null"><x path="Bool"/></hidden>
		<id public="1" set="null"><x path="Int"/></id>
		<maximized public="1" get="accessor" set="accessor"><x path="Bool"/></maximized>
		<minimized public="1" get="accessor" set="accessor"><x path="Bool"/></minimized>
		<mouseLock public="1" get="accessor" set="accessor"><x path="Bool"/></mouseLock>
		<onActivate public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onActivate>
		<onClose public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onClose>
		<onDeactivate public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onDeactivate>
		<onDropFile public="1" set="null" expr="new Event&lt;String&gt;()">
			<c path="lime.app._Event_String_Void"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<String>()]]></e></m></meta>
		</onDropFile>
		<onEnter public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onEnter>
		<onExpose public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onExpose>
		<onFocusIn public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onFocusIn>
		<onFocusOut public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onFocusOut>
		<onFullscreen public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onFullscreen>
		<onKeyDown public="1" set="null" expr="new Event&lt;KeyCode -&gt; KeyModifier&gt;()">
			<c path="lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"><f a=":">
	<x path="lime.ui.KeyCode"/>
	<x path="lime.ui.KeyModifier"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<KeyCode -> KeyModifier>()]]></e></m></meta>
		</onKeyDown>
		<onKeyUp public="1" set="null" expr="new Event&lt;KeyCode -&gt; KeyModifier&gt;()">
			<c path="lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"><f a=":">
	<x path="lime.ui.KeyCode"/>
	<x path="lime.ui.KeyModifier"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<KeyCode -> KeyModifier>()]]></e></m></meta>
		</onKeyUp>
		<onLeave public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onLeave>
		<onMaximize public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onMaximize>
		<onMinimize public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onMinimize>
		<onMouseDown public="1" set="null" expr="new Event&lt;Float -&gt; Float -&gt; MouseButton&gt;()">
			<c path="lime.app._Event_Float_Float_lime_ui_MouseButton_Void"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="lime.ui.MouseButton"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float -> MouseButton>()]]></e></m></meta>
		</onMouseDown>
		<onMouseMove public="1" set="null" expr="new Event&lt;Float -&gt; Float&gt;()">
			<c path="lime.app._Event_Float_Float_Void"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float>()]]></e></m></meta>
		</onMouseMove>
		<onMouseMoveRelative public="1" set="null" expr="new Event&lt;Float -&gt; Float&gt;()">
			<c path="lime.app._Event_Float_Float_Void"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float>()]]></e></m></meta>
		</onMouseMoveRelative>
		<onMouseUp public="1" set="null" expr="new Event&lt;Float -&gt; Float -&gt; Int&gt;()">
			<c path="lime.app._Event_Float_Float_Int_Void"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float -> Int>()]]></e></m></meta>
		</onMouseUp>
		<onMouseWheel public="1" set="null" expr="new Event&lt;Float -&gt; Float -&gt; MouseWheelMode&gt;()">
			<c path="lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<e path="lime.ui.MouseWheelMode"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float -> MouseWheelMode>()]]></e></m></meta>
		</onMouseWheel>
		<onMove public="1" set="null" expr="new Event&lt;Float -&gt; Float&gt;()">
			<c path="lime.app._Event_Float_Float_Void"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Float -> Float>()]]></e></m></meta>
		</onMove>
		<onRender public="1" set="null" expr="new Event&lt;RenderContext&gt;()">
			<c path="lime.app._Event_lime_graphics_RenderContext_Void"><f a="">
	<c path="lime.graphics.RenderContext"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<RenderContext>()]]></e></m></meta>
		</onRender>
		<onRenderContextLost public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onRenderContextLost>
		<onRenderContextRestored public="1" set="null" expr="new Event&lt;RenderContext&gt;()">
			<c path="lime.app._Event_lime_graphics_RenderContext_Void"><f a="">
	<c path="lime.graphics.RenderContext"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<RenderContext>()]]></e></m></meta>
		</onRenderContextRestored>
		<onResize public="1" set="null" expr="new Event&lt;Int -&gt; Int&gt;()">
			<c path="lime.app._Event_Int_Int_Void"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int -> Int>()]]></e></m></meta>
		</onResize>
		<onRestore public="1" set="null" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onRestore>
		<onTextEdit public="1" set="null" expr="new Event&lt;String -&gt; Int -&gt; Int&gt;()">
			<c path="lime.app._Event_String_Int_Int_Void"><f a="::">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<String -> Int -> Int>()]]></e></m></meta>
		</onTextEdit>
		<onTextInput public="1" set="null" expr="new Event&lt;String&gt;()">
			<c path="lime.app._Event_String_Void"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<String>()]]></e></m></meta>
		</onTextInput>
		<parameters public="1"><d/></parameters>
		<resizable public="1" get="accessor" set="accessor"><x path="Bool"/></resizable>
		<scale public="1" get="accessor" set="null"><x path="Float"/></scale>
		<stage public="1" set="null"><t path="lime.ui.Stage"/></stage>
		<textInputEnabled public="1" get="accessor" set="accessor"><x path="Bool"/></textInputEnabled>
		<title public="1" get="accessor" set="accessor"><c path="String"/></title>
		<width public="1" get="accessor" set="accessor"><x path="Int"/></width>
		<x public="1" get="accessor" set="accessor"><x path="Int"/></x>
		<y public="1" get="accessor" set="accessor"><x path="Int"/></y>
		<__attributes>
			<t path="lime.ui.WindowAttributes"/>
			<meta><m n=":noCompletion"/></meta>
		</__attributes>
		<__backend>
			<t path="lime.ui._Window.WindowBackend"/>
			<meta><m n=":noCompletion"/></meta>
		</__backend>
		<__borderless>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__borderless>
		<__fullscreen>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__fullscreen>
		<__height>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__height>
		<__hidden>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__hidden>
		<__maximized>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__maximized>
		<__minimized>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__minimized>
		<__resizable>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</__resizable>
		<__scale>
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</__scale>
		<__title>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__title>
		<__width>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__width>
		<__x>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__x>
		<__y>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</__y>
		<alert public="1" set="method" line="361">
			<f a="?message:?title" v="null:null">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ title : null, message : null }</e></m></meta>
		</alert>
		<close public="1" set="method" line="366"><f a=""><x path="Void"/></f></close>
		<focus public="1" set="method" line="371"><f a=""><x path="Void"/></f></focus>
		<move public="1" set="method" line="376"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></move>
		<readPixels public="1" set="method" line="384">
			<f a="?rect" v="null">
				<c path="lime.math.Rectangle"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ rect : null }</e></m></meta>
		</readPixels>
		<resize public="1" set="method" line="389"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<setIcon public="1" set="method" line="397"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="Void"/>
</f></setIcon>
		<toString public="1" set="method" line="407"><f a=""><c path="String"/></f></toString>
		<warpMouse public="1" set="method" line="412"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></warpMouse>
		<get_cursor set="method" line="418">
			<f a=""><e path="lime.ui.MouseCursor"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_cursor>
		<set_cursor set="method" line="423">
			<f a="value">
				<e path="lime.ui.MouseCursor"/>
				<e path="lime.ui.MouseCursor"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_cursor>
		<get_display set="method" line="428">
			<f a=""><c path="lime.system.Display"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_display>
		<get_displayMode set="method" line="433">
			<f a=""><c path="lime.system.DisplayMode"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_displayMode>
		<set_displayMode set="method" line="438">
			<f a="value">
				<c path="lime.system.DisplayMode"/>
				<c path="lime.system.DisplayMode"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_displayMode>
		<get_borderless get="inline" set="null" line="443">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_borderless>
		<set_borderless set="method" line="448">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_borderless>
		<get_frameRate get="inline" set="null" line="453">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_frameRate>
		<set_frameRate get="inline" set="null" line="458">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_frameRate>
		<get_fullscreen get="inline" set="null" line="463">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_fullscreen>
		<set_fullscreen set="method" line="468">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_fullscreen>
		<get_height get="inline" set="null" line="473">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_height>
		<set_height set="method" line="478">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_height>
		<get_hidden get="inline" set="null" line="484">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_hidden>
		<get_maximized get="inline" set="null" line="489">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_maximized>
		<set_maximized get="inline" set="null" line="494">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_maximized>
		<get_minimized get="inline" set="null" line="500">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_minimized>
		<set_minimized set="method" line="505">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_minimized>
		<get_mouseLock set="method" line="511">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_mouseLock>
		<set_mouseLock set="method" line="516">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_mouseLock>
		<get_resizable get="inline" set="null" line="522">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_resizable>
		<set_resizable set="method" line="527">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_resizable>
		<get_scale get="inline" set="null" line="533">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_scale>
		<get_textInputEnabled get="inline" set="null" line="538">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_textInputEnabled>
		<set_textInputEnabled get="inline" set="null" line="543">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_textInputEnabled>
		<setTextInputRect public="1" set="method" line="548"><f a="value">
	<c path="lime.math.Rectangle"/>
	<c path="lime.math.Rectangle"/>
</f></setTextInputRect>
		<get_title get="inline" set="null" line="553">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_title>
		<set_title set="method" line="558">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_title>
		<get_width get="inline" set="null" line="563">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_width>
		<set_width set="method" line="568">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_width>
		<get_x get="inline" set="null" line="574">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_x>
		<set_x set="method" line="579">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_x>
		<get_y get="inline" set="null" line="585">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_y>
		<set_y set="method" line="590">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_y>
		<new set="method" line="137">
			<f a="application:attributes">
				<c path="lime.app.Application"/>
				<t path="lime.ui.WindowAttributes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<typedef path="lime.ui._Window.WindowBackend" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/Window.hx" private="1" module="lime.ui.Window">
		<c path="lime._internal.backend.native.NativeWindow"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<typedef path="lime.ui.WindowAttributes" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/ui/WindowAttributes.hx"><a>
	<y>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</y>
	<x>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</x>
	<width>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</width>
	<title>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</title>
	<resizable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</resizable>
	<parameters>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</parameters>
	<minimized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</minimized>
	<maximized>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</maximized>
	<hidden>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</hidden>
	<height>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</height>
	<fullscreen>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fullscreen>
	<frameRate>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<element>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</element>
	<context>
		<x path="Null"><t path="lime.graphics.RenderContextAttributes"/></x>
		<meta><m n=":optional"/></meta>
	</context>
	<borderless>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</borderless>
	<alwaysOnTop>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</alwaysOnTop>
	<allowHighDPI>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</allowHighDPI>
</a></typedef>
	<abstract path="lime.utils.ArrayBuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBuffer.hx">
		<from>
			<icast><c path="haxe.io.Bytes"/></icast>
			<icast><d/></icast>
		</from>
		<this><c path="haxe.io.Bytes"/></this>
		<to>
			<icast><c path="haxe.io.Bytes"/></icast>
			<icast><d/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.utils._ArrayBuffer.ArrayBuffer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBuffer.hx" private="1" module="lime.utils.ArrayBuffer" final="1">
	<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
	<get_byteLength get="inline" set="null" line="17" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></get_byteLength>
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="byteLength">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<isView public="1" get="inline" set="null" line="27" static="1"><f a="arg">
	<d/>
	<x path="Bool"/>
</f></isView>
	<slice public="1" get="inline" set="null" line="32" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</slice>
</class></impl>
	</abstract>
	<class path="lime.utils._ArrayBuffer.ArrayBuffer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBuffer.hx" private="1" module="lime.utils.ArrayBuffer" final="1">
		<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
		<get_byteLength get="inline" set="null" line="17" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></get_byteLength>
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="byteLength">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<isView public="1" get="inline" set="null" line="27" static="1"><f a="arg">
	<d/>
	<x path="Bool"/>
</f></isView>
		<slice public="1" get="inline" set="null" line="32" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</slice>
	</class>
	<abstract path="lime.utils.TypedArrayType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":enum"/>
		</meta>
		<impl><class path="lime.utils._ArrayBufferView.TypedArrayType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBufferView.hx" private="1" module="lime.utils.ArrayBufferView" extern="1" final="1">
	<None public="1" get="inline" set="null" expr="cast 0" line="406" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</None>
	<Int8 public="1" get="inline" set="null" expr="cast 1" line="407" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Int8>
	<Int16 public="1" get="inline" set="null" expr="cast 2" line="408" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Int16>
	<Int32 public="1" get="inline" set="null" expr="cast 3" line="409" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Int32>
	<Uint8 public="1" get="inline" set="null" expr="cast 4" line="410" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint8>
	<Uint8Clamped public="1" get="inline" set="null" expr="cast 5" line="411" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint8Clamped>
	<Uint16 public="1" get="inline" set="null" expr="cast 6" line="412" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint16>
	<Uint32 public="1" get="inline" set="null" expr="cast 7" line="413" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Uint32>
	<Float32 public="1" get="inline" set="null" expr="cast 8" line="414" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Float32>
	<Float64 public="1" get="inline" set="null" expr="cast 9" line="415" static="1">
		<x path="lime.utils.TypedArrayType"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Float64>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.utils._ArrayBufferView.TypedArrayType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBufferView.hx" private="1" module="lime.utils.ArrayBufferView" extern="1" final="1">
		<None public="1" get="inline" set="null" expr="cast 0" line="406" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</None>
		<Int8 public="1" get="inline" set="null" expr="cast 1" line="407" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Int8>
		<Int16 public="1" get="inline" set="null" expr="cast 2" line="408" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Int16>
		<Int32 public="1" get="inline" set="null" expr="cast 3" line="409" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Int32>
		<Uint8 public="1" get="inline" set="null" expr="cast 4" line="410" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint8>
		<Uint8Clamped public="1" get="inline" set="null" expr="cast 5" line="411" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint8Clamped>
		<Uint16 public="1" get="inline" set="null" expr="cast 6" line="412" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint16>
		<Uint32 public="1" get="inline" set="null" expr="cast 7" line="413" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Uint32>
		<Float32 public="1" get="inline" set="null" expr="cast 8" line="414" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Float32>
		<Float64 public="1" get="inline" set="null" expr="cast 9" line="415" static="1">
			<x path="lime.utils.TypedArrayType"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Float64>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.utils.ArrayBufferIO" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/ArrayBufferView.hx" module="lime.utils.ArrayBufferView">
		<getInt8 public="1" get="inline" set="null" line="427" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getInt8>
		<setInt8 public="1" get="inline" set="null" line="441" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setInt8>
		<getUint8 public="1" get="inline" set="null" line="457" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint8>
		<setUint8Clamped public="1" get="inline" set="null" line="470" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setUint8Clamped>
		<setUint8 public="1" get="inline" set="null" line="479" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint8>
		<getInt16 public="1" set="method" line="492" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInt16>
		<getInt16_BE public="1" set="method" line="506" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInt16_BE>
		<setInt16 public="1" set="method" line="520" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setInt16>
		<setInt16_BE public="1" set="method" line="535" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setInt16_BE>
		<getUint16 public="1" get="inline" set="null" line="554" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint16>
		<getUint16_BE public="1" get="inline" set="null" line="570" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint16_BE>
		<setUint16 public="1" get="inline" set="null" line="586" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint16>
		<setUint16_BE public="1" get="inline" set="null" line="599" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint16_BE>
		<getInt32 public="1" get="inline" set="null" line="614" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getInt32>
		<getInt32_BE public="1" get="inline" set="null" line="627" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getInt32_BE>
		<setInt32 public="1" get="inline" set="null" line="640" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setInt32>
		<setInt32_BE public="1" get="inline" set="null" line="657" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setInt32_BE>
		<getUint32 public="1" get="inline" set="null" line="674" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint32>
		<getUint32_BE public="1" get="inline" set="null" line="687" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getUint32_BE>
		<setUint32 public="1" get="inline" set="null" line="700" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint32>
		<setUint32_BE public="1" get="inline" set="null" line="713" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setUint32_BE>
		<getFloat32 public="1" get="inline" set="null" line="727" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat32>
		<getFloat32_BE public="1" get="inline" set="null" line="740" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat32_BE>
		<setFloat32 public="1" get="inline" set="null" line="753" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat32>
		<setFloat32_BE public="1" get="inline" set="null" line="769" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat32_BE>
		<getFloat64 public="1" get="inline" set="null" line="785" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat64>
		<getFloat64_BE public="1" get="inline" set="null" line="798" static="1">
			<f a="buffer:byteOffset">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</getFloat64_BE>
		<setFloat64 public="1" get="inline" set="null" line="811" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat64>
		<setFloat64_BE public="1" get="inline" set="null" line="827" static="1">
			<f a="buffer:byteOffset:value">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</setFloat64_BE>
		<_clamp get="inline" set="null" line="845" static="1">
			<f a="_in">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</_clamp>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="lime.utils.AssetBundle" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetBundle.hx">
		<fromBytes public="1" set="method" line="30" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.utils.AssetBundle"/>
</f></fromBytes>
		<fromFile public="1" set="method" line="36" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.utils.AssetBundle"/>
</f></fromFile>
		<loadFromBytes public="1" set="method" line="46" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.app.Future"><c path="lime.utils.AssetBundle"/></c>
</f></loadFromBytes>
		<loadFromFile public="1" set="method" line="51" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.utils.AssetBundle"/></c>
</f></loadFromFile>
		<__extractBundle set="method" line="56" static="1">
			<f a="input">
				<c path="haxe.io.Input"/>
				<c path="lime.utils.AssetBundle"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__extractBundle>
		<data public="1"><t path="Map">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</t></data>
		<paths public="1"><c path="Array"><c path="String"/></c></paths>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.utils.AssetCache" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetCache.hx">
		<audio public="1"><t path="Map">
	<c path="String"/>
	<c path="lime.media.AudioBuffer"/>
</t></audio>
		<enabled public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</enabled>
		<image public="1"><t path="Map">
	<c path="String"/>
	<c path="lime.graphics.Image"/>
</t></image>
		<font public="1"><t path="Map">
	<c path="String"/>
	<d/>
</t></font>
		<version public="1"><x path="Int"/></version>
		<exists public="1" set="method" line="38"><f a="id:?type">
	<c path="String"/>
	<x path="lime.utils.AssetType"/>
	<x path="Bool"/>
</f></exists>
		<set public="1" set="method" line="58"><f a="id:type:asset">
	<c path="String"/>
	<x path="lime.utils.AssetType"/>
	<d/>
	<x path="Void"/>
</f></set>
		<clear public="1" set="method" line="80">
			<f a="?prefix" v="null">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ prefix : null }</e></m></meta>
		</clear>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="lime.utils.AssetLibrary" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetLibrary.hx">
		<fromBytes public="1" set="method" line="90" static="1">
			<f a="bytes:?rootPath" v=":null">
				<x path="lime.utils.Bytes"/>
				<c path="String"/>
				<c path="lime.utils.AssetLibrary"/>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</fromBytes>
		<fromFile public="1" set="method" line="95" static="1">
			<f a="path:?rootPath" v=":null">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.utils.AssetLibrary"/>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</fromFile>
		<fromBundle public="1" set="method" line="100" static="1"><f a="bundle">
	<c path="lime.utils.AssetBundle"/>
	<c path="lime.utils.AssetLibrary"/>
</f></fromBundle>
		<fromManifest public="1" set="method" line="141" static="1"><f a="manifest">
	<c path="lime.utils.AssetManifest"/>
	<c path="lime.utils.AssetLibrary"/>
</f></fromManifest>
		<loadFromBytes public="1" set="method" line="529" static="1">
			<f a="bytes:?rootPath" v=":null">
				<x path="lime.utils.Bytes"/>
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.utils.AssetLibrary"/></c>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</loadFromBytes>
		<loadFromFile public="1" set="method" line="537" static="1">
			<f a="path:?rootPath" v=":null">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.utils.AssetLibrary"/></c>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</loadFromFile>
		<loadFromManifest public="1" set="method" line="545" static="1"><f a="manifest">
	<c path="lime.utils.AssetManifest"/>
	<c path="lime.app.Future"><c path="lime.utils.AssetLibrary"/></c>
</f></loadFromManifest>
		<onChange public="1" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onChange>
		<assetsLoaded>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</assetsLoaded>
		<assetsTotal>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</assetsTotal>
		<bytesLoaded>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</bytesLoaded>
		<bytesLoadedCache>
			<t path="Map">
				<c path="String"/>
				<x path="Int"/>
			</t>
			<meta><m n=":noCompletion"/></meta>
		</bytesLoadedCache>
		<bytesTotal>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</bytesTotal>
		<cachedAudioBuffers expr="new Map&lt;String,AudioBuffer&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="lime.media.AudioBuffer"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,AudioBuffer>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</cachedAudioBuffers>
		<cachedBytes expr="new Map&lt;String,Bytes&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="lime.utils.Bytes"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Bytes>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</cachedBytes>
		<cachedFonts expr="new Map&lt;String,Font&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="lime.text.Font"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Font>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</cachedFonts>
		<cachedImages expr="new Map&lt;String,Image&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="lime.graphics.Image"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Image>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</cachedImages>
		<cachedText expr="new Map&lt;String,String&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,String>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</cachedText>
		<classTypes expr="new Map&lt;String,Class&lt;Dynamic&gt;&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Class"><d/></x>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Class<Dynamic>>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</classTypes>
		<loaded>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</loaded>
		<pathGroups expr="new Map&lt;String,Array&lt;String&gt;&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Array<String>>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</pathGroups>
		<paths expr="new Map&lt;String,String&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,String>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</paths>
		<preload expr="new Map&lt;String,Bool&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Bool"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Bool>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</preload>
		<promise>
			<c path="lime.app.Promise_lime_utils_AssetLibrary"/>
			<meta><m n=":noCompletion"/></meta>
		</promise>
		<sizes expr="new Map&lt;String,Int&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Int"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Int>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</sizes>
		<types expr="new Map&lt;String,AssetType&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="lime.utils.AssetType"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,AssetType>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</types>
		<exists public="1" set="method" line="53"><f a="id:type">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<getAsset public="1" set="method" line="171"><f a="id:type">
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></getAsset>
		<getAudioBuffer public="1" set="method" line="186"><f a="id">
	<c path="String"/>
	<c path="lime.media.AudioBuffer"/>
</f></getAudioBuffer>
		<getBytes public="1" set="method" line="208"><f a="id">
	<c path="String"/>
	<x path="lime.utils.Bytes"/>
</f></getBytes>
		<getFont public="1" set="method" line="247"><f a="id">
	<c path="String"/>
	<c path="lime.text.Font"/>
</f></getFont>
		<getImage public="1" set="method" line="271"><f a="id">
	<c path="String"/>
	<c path="lime.graphics.Image"/>
</f></getImage>
		<getPath public="1" set="method" line="291"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getPath>
		<getText public="1" set="method" line="307"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getText>
		<isLocal public="1" set="method" line="328"><f a="id:type">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></isLocal>
		<list public="1" set="method" line="356"><f a="type">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></list>
		<loadAsset public="1" set="method" line="372"><f a="id:type">
	<c path="String"/>
	<c path="String"/>
	<c path="lime.app.Future"><d/></c>
</f></loadAsset>
		<load public="1" set="method" line="387"><f a=""><c path="lime.app.Future"><c path="lime.utils.AssetLibrary"/></c></f></load>
		<loadAudioBuffer public="1" set="method" line="460"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.media.AudioBuffer"/></c>
</f></loadAudioBuffer>
		<loadBytes public="1" set="method" line="483"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><x path="lime.utils.Bytes"/></c>
</f></loadBytes>
		<loadFont public="1" set="method" line="503"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.text.Font"/></c>
</f></loadFont>
		<loadImage public="1" set="method" line="559"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.graphics.Image"/></c>
</f></loadImage>
		<loadText public="1" set="method" line="584"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><c path="String"/></c>
</f></loadText>
		<unload public="1" set="method" line="611"><f a=""><x path="Void"/></f></unload>
		<__assetLoaded set="method" line="614">
			<f a="id">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__assetLoaded>
		<__cacheBreak set="method" line="656">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__cacheBreak>
		<__fromBundle set="method" line="661">
			<f a="bundle:?manifest" v=":null">
				<c path="lime.utils.AssetBundle"/>
				<c path="lime.utils.AssetManifest"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ manifest : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__fromBundle>
		<__fromManifest set="method" line="708">
			<f a="manifest">
				<c path="lime.utils.AssetManifest"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__fromManifest>
		<__resolvePath set="method" line="775">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__resolvePath>
		<loadAudioBuffer_onComplete set="method" line="835">
			<f a="id:audioBuffer">
				<c path="String"/>
				<c path="lime.media.AudioBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</loadAudioBuffer_onComplete>
		<loadAudioBuffer_onError set="method" line="861">
			<f a="id:message">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</loadAudioBuffer_onError>
		<loadBytes_onComplete set="method" line="879">
			<f a="id:bytes">
				<c path="String"/>
				<x path="lime.utils.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</loadBytes_onComplete>
		<loadFont_onComplete set="method" line="885">
			<f a="id:font">
				<c path="String"/>
				<c path="lime.text.Font"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</loadFont_onComplete>
		<loadImage_onComplete set="method" line="891">
			<f a="id:image">
				<c path="String"/>
				<c path="lime.graphics.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</loadImage_onComplete>
		<loadText_onComplete set="method" line="897">
			<f a="id:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</loadText_onComplete>
		<load_onError set="method" line="903">
			<f a="id:message">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</load_onError>
		<load_onProgress set="method" line="915">
			<f a="id:bytesLoaded:bytesTotal">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</load_onProgress>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime.text.Font</e></m>
			<m n=":access"><e>lime.utils.Assets</e></m>
		</meta>
	</class>
	<class path="lime.utils.AssetManifest" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetManifest.hx">
		<fromBytes public="1" set="method" line="33" static="1">
			<f a="bytes:?rootPath" v=":null">
				<x path="lime.utils.Bytes"/>
				<c path="String"/>
				<c path="lime.utils.AssetManifest"/>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</fromBytes>
		<fromFile public="1" set="method" line="45" static="1">
			<f a="path:?rootPath" v=":null">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.utils.AssetManifest"/>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</fromFile>
		<loadFromBytes public="1" set="method" line="55" static="1">
			<f a="bytes:?rootPath" v=":null">
				<x path="lime.utils.Bytes"/>
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.utils.AssetManifest"/></c>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</loadFromBytes>
		<loadFromFile public="1" set="method" line="60" static="1">
			<f a="path:?rootPath" v=":null">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.app.Future"><c path="lime.utils.AssetManifest"/></c>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</loadFromFile>
		<parse public="1" set="method" line="73" static="1">
			<f a="data:?rootPath" v=":null">
				<c path="String"/>
				<c path="String"/>
				<c path="lime.utils.AssetManifest"/>
			</f>
			<meta><m n=":value"><e>{ rootPath : null }</e></m></meta>
		</parse>
		<__resolvePath set="method" line="149" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></__resolvePath>
		<__resolveRootPath set="method" line="189" static="1"><f a="rootPath:path">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></__resolveRootPath>
		<assets public="1"><c path="Array"><d/></c></assets>
		<libraryArgs public="1"><c path="Array"><c path="String"/></c></libraryArgs>
		<libraryType public="1"><c path="String"/></libraryType>
		<name public="1"><c path="String"/></name>
		<rootPath public="1"><c path="String"/></rootPath>
		<version public="1"><x path="Int"/></version>
		<serialize public="1" set="method" line="132"><f a=""><c path="String"/></f></serialize>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.utils.AssetType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetType.hx">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.utils._AssetType.AssetType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetType.hx" private="1" module="lime.utils.AssetType" extern="1" final="1">
	<BINARY public="1" get="inline" set="null" expr="cast &quot;BINARY&quot;" line="5" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "BINARY"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BINARY>
	<FONT public="1" get="inline" set="null" expr="cast &quot;FONT&quot;" line="6" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "FONT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FONT>
	<IMAGE public="1" get="inline" set="null" expr="cast &quot;IMAGE&quot;" line="7" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "IMAGE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IMAGE>
	<MANIFEST public="1" get="inline" set="null" expr="cast &quot;MANIFEST&quot;" line="8" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "MANIFEST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MANIFEST>
	<MUSIC public="1" get="inline" set="null" expr="cast &quot;MUSIC&quot;" line="9" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "MUSIC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MUSIC>
	<SOUND public="1" get="inline" set="null" expr="cast &quot;SOUND&quot;" line="10" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "SOUND"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SOUND>
	<TEMPLATE public="1" get="inline" set="null" expr="cast &quot;TEMPLATE&quot;" line="11" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "TEMPLATE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEMPLATE>
	<TEXT public="1" get="inline" set="null" expr="cast &quot;TEXT&quot;" line="12" static="1">
		<x path="lime.utils.AssetType"/>
		<meta>
			<m n=":value"><e>cast "TEXT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEXT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.utils._AssetType.AssetType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/AssetType.hx" private="1" module="lime.utils.AssetType" extern="1" final="1">
		<BINARY public="1" get="inline" set="null" expr="cast &quot;BINARY&quot;" line="5" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "BINARY"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BINARY>
		<FONT public="1" get="inline" set="null" expr="cast &quot;FONT&quot;" line="6" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "FONT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FONT>
		<IMAGE public="1" get="inline" set="null" expr="cast &quot;IMAGE&quot;" line="7" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "IMAGE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IMAGE>
		<MANIFEST public="1" get="inline" set="null" expr="cast &quot;MANIFEST&quot;" line="8" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "MANIFEST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MANIFEST>
		<MUSIC public="1" get="inline" set="null" expr="cast &quot;MUSIC&quot;" line="9" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "MUSIC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MUSIC>
		<SOUND public="1" get="inline" set="null" expr="cast &quot;SOUND&quot;" line="10" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "SOUND"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SOUND>
		<TEMPLATE public="1" get="inline" set="null" expr="cast &quot;TEMPLATE&quot;" line="11" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "TEMPLATE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEMPLATE>
		<TEXT public="1" get="inline" set="null" expr="cast &quot;TEXT&quot;" line="12" static="1">
			<x path="lime.utils.AssetType"/>
			<meta>
				<m n=":value"><e>cast "TEXT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEXT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.utils.Assets" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Assets.hx">
		<cache public="1" expr="new AssetCache()" line="39" static="1">
			<c path="lime.utils.AssetCache"/>
			<meta><m n=":value"><e>new AssetCache()</e></m></meta>
		</cache>
		<onChange public="1" expr="new Event&lt;Void&gt;()" line="40" static="1">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onChange>
		<bundlePaths expr="new Map&lt;String,String&gt;()" line="42" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,String>()]]></e></m></meta>
		</bundlePaths>
		<libraries set="null" expr="new Map&lt;String,AssetLibrary&gt;()" line="43" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="lime.utils.AssetLibrary"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,AssetLibrary>()]]></e></m></meta>
		</libraries>
		<libraryPaths expr="new Map&lt;String,String&gt;()" line="44" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,String>()]]></e></m></meta>
		</libraryPaths>
		<exists public="1" set="method" line="47" static="1">
			<f a="id:?type" v=":null">
				<c path="String"/>
				<x path="lime.utils.AssetType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</exists>
		<getAsset public="1" set="method" line="72" static="1">
			<f a="id:type:useCache">
				<c path="String"/>
				<x path="lime.utils.AssetType"/>
				<x path="Bool"/>
				<d/>
			</f>
			<haxe_doc>* Gets an instance of a cached or embedded asset
	 * @usage		var sound = Assets.getAsset("sound.wav", SOUND);
	 * @param	id		The ID or asset path for the asset
	 * @return		An Asset object, or null.</haxe_doc>
		</getAsset>
		<getAudioBuffer public="1" set="method" line="157" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.media.AudioBuffer"/>
			</f>
			<meta><m n=":value"><e>{ useCache : true }</e></m></meta>
			<haxe_doc>* Gets an instance of an embedded sound
	 * @usage		var sound = Assets.getAudioBuffer ("sound.wav");
	 * @param	id		The ID or asset path for the sound
	 * @return		A new Sound object</haxe_doc>
		</getAudioBuffer>
		<getBytes public="1" set="method" line="168" static="1">
			<f a="id">
				<c path="String"/>
				<x path="lime.utils.Bytes"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded binary asset
	 * @usage		var bytes = Assets.getBytes("file.zip");
	 * @param	id		The ID or asset path for the file
	 * @return		A new Bytes object</haxe_doc>
		</getBytes>
		<getFont public="1" set="method" line="179" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.text.Font"/>
			</f>
			<meta><m n=":value"><e>{ useCache : true }</e></m></meta>
			<haxe_doc>* Gets an instance of an embedded font
	 * @usage		var fontName = Assets.getFont("font.ttf").fontName;
	 * @param	id		The ID or asset path for the font
	 * @return		A new Font object</haxe_doc>
		</getFont>
		<getImage public="1" set="method" line="191" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":value"><e>{ useCache : true }</e></m></meta>
			<haxe_doc>* Gets an instance of an embedded bitmap
	 * @usage		var bitmap = new Bitmap(Assets.getBitmapData("image.jpg"));
	 * @param	id		The ID or asset path for the bitmap
	 * @param	useCache		(Optional) Whether to use BitmapData from the cache(Default: true)
	 * @return		A new BitmapData object</haxe_doc>
		</getImage>
		<getLibrary public="1" set="method" line="196" static="1"><f a="name">
	<c path="String"/>
	<c path="lime.utils.AssetLibrary"/>
</f></getLibrary>
		<getPath public="1" set="method" line="212" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets the file path (if available) for an asset
	 * @usage		var path = Assets.getPath("image.jpg");
	 * @param	id		The ID or asset path for the asset
	 * @return		The path to the asset (or null)</haxe_doc>
		</getPath>
		<getText public="1" set="method" line="243" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded text asset
	 * @usage		var text = Assets.getText("text.txt");
	 * @param	id		The ID or asset path for the file
	 * @return		A new String object</haxe_doc>
		</getText>
		<hasLibrary public="1" set="method" line="248" static="1"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasLibrary>
		<isLocal public="1" set="method" line="258" static="1">
			<f a="id:?type:?useCache" v=":null:true">
				<c path="String"/>
				<x path="lime.utils.AssetType"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ useCache : true, type : null }</e></m></meta>
		</isLocal>
		<isValidAudio set="method" line="273" static="1"><f a="buffer">
	<c path="lime.media.AudioBuffer"/>
	<x path="Bool"/>
</f></isValidAudio>
		<isValidImage set="method" line="280" static="1"><f a="image">
	<c path="lime.graphics.Image"/>
	<x path="Bool"/>
</f></isValidImage>
		<list public="1" set="method" line="287" static="1">
			<f a="?type" v="null">
				<x path="lime.utils.AssetType"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ type : null }</e></m></meta>
		</list>
		<loadAsset public="1" set="method" line="304" static="1"><f a="id:type:useCache">
	<c path="String"/>
	<x path="lime.utils.AssetType"/>
	<x path="Bool"/>
	<c path="lime.app.Future"><d/></c>
</f></loadAsset>
		<loadAudioBuffer public="1" set="method" line="376" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.app.Future"><c path="lime.media.AudioBuffer"/></c>
			</f>
			<meta><m n=":value"><e>{ useCache : true }</e></m></meta>
		</loadAudioBuffer>
		<loadBytes public="1" set="method" line="381" static="1"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><x path="lime.utils.Bytes"/></c>
</f></loadBytes>
		<loadFont public="1" set="method" line="386" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.app.Future"><c path="lime.text.Font"/></c>
			</f>
			<meta><m n=":value"><e>{ useCache : true }</e></m></meta>
		</loadFont>
		<loadImage public="1" set="method" line="391" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="lime.app.Future"><c path="lime.graphics.Image"/></c>
			</f>
			<meta><m n=":value"><e>{ useCache : true }</e></m></meta>
		</loadImage>
		<loadLibrary public="1" set="method" line="396" static="1"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><c path="lime.utils.AssetLibrary"/></c>
</f></loadLibrary>
		<loadText public="1" set="method" line="489" static="1"><f a="id">
	<c path="String"/>
	<c path="lime.app.Future"><c path="String"/></c>
</f></loadText>
		<registerLibrary public="1" set="method" line="494" static="1"><f a="name:library">
	<c path="String"/>
	<c path="lime.utils.AssetLibrary"/>
	<x path="Void"/>
</f></registerLibrary>
		<unloadLibrary public="1" set="method" line="516" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></unloadLibrary>
		<__cacheBreak set="method" line="537" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__cacheBreak>
		<__libraryNotFound set="method" line="556" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__libraryNotFound>
		<library_onChange set="method" line="574" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</library_onChange>
		<haxe_doc><![CDATA[* <p>The Assets class provides a cross-platform interface to access
 * embedded images, fonts, sounds and other resource files.</p>
 *
 * <p>The contents are populated automatically when an application
 * is compiled using the Lime command-line tools, based on the
 * contents of the project file.</p>
 *
 * <p>For most platforms, the assets are included in the same directory
 * or package as the application, and the paths are handled
 * automatically. For web content, the assets are preloaded before
 * the start of the rest of the application.</p>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
			<m n=":access"><e>lime.utils.AssetLibrary</e></m>
		</meta>
	</class>
	<class path="lime.utils._Assets.LibrarySymbol" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Assets.hx" private="1" module="lime.utils.Assets">
		<library public="1" set="null"><c path="lime.utils.AssetLibrary"/></library>
		<libraryName public="1" set="null"><c path="String"/></libraryName>
		<symbolName public="1" set="null"><c path="String"/></symbolName>
		<isLocal public="1" get="inline" set="null" line="599"><f a="?type">
	<c path="String"/>
	<x path="Bool"/>
</f></isLocal>
		<exists public="1" get="inline" set="null" line="602"><f a="?type">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<new public="1" get="inline" set="null" line="591"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.utils.BytePointer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/BytePointer.hx">
		<from>
			<icast><c path="lime.utils.BytePointerData"/></icast>
			<icast field="fromArrayBufferView"><c path="lime.utils.ArrayBufferView"/></icast>
			<icast field="fromArrayBuffer"><x path="lime.utils.ArrayBuffer"/></icast>
			<icast field="fromBytes"><c path="haxe.io.Bytes"/></icast>
			<icast field="fromBytesData"><t path="haxe.io.BytesData"/></icast>
			<icast field="fromLimeBytes"><t path="lime.utils._Bytes.LimeBytes"/></icast>
		</from>
		<this><c path="lime.utils.BytePointerData"/></this>
		<to>
			<icast><c path="lime.utils.BytePointerData"/></icast>
			<icast field="toUInt8Array"><x path="lime.utils.UInt8Array"/></icast>
			<icast field="toUInt8ClampedArray"><x path="lime.utils.UInt8ClampedArray"/></icast>
			<icast field="toInt8Array"><x path="lime.utils.Int8Array"/></icast>
			<icast field="toUInt16Array"><x path="lime.utils.UInt16Array"/></icast>
			<icast field="toInt16Array"><x path="lime.utils.Int16Array"/></icast>
			<icast field="toUInt32Array"><x path="lime.utils.UInt32Array"/></icast>
			<icast field="toInt32Array"><x path="lime.utils.Int32Array"/></icast>
			<icast field="toFloat32Array"><x path="lime.utils.Float32Array"/></icast>
			<icast field="toFloat64Array"><x path="lime.utils.Float64Array"/></icast>
		</to>
		<meta>
			<m n=":access"><e>haxe.io.Bytes</e></m>
			<m n=":access"><e>lime.utils.BytePointerData</e></m>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.utils._BytePointer.BytePointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/BytePointer.hx" private="1" module="lime.utils.BytePointer" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="?bytes:?offset" v="null:0">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="lime.utils.BytePointer"/>
		</f>
		<meta>
			<m n=":value"><e>{ offset : 0, bytes : null }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<set public="1" set="method" line="19" static="1"><f a="this:?bytes:?bufferView:?buffer:?offset">
	<c path="lime.utils.BytePointerData"/>
	<c path="haxe.io.Bytes"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="lime.utils.ArrayBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
	<__arrayGet get="inline" set="null" line="47" static="1">
		<f a="this:index">
			<c path="lime.utils.BytePointerData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</__arrayGet>
	<__arraySet get="inline" set="null" line="52" static="1">
		<f a="this:index:value">
			<c path="lime.utils.BytePointerData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</__arraySet>
	<fromArrayBufferView public="1" set="method" line="58" static="1">
		<f a="arrayBufferView">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="lime.utils.BytePointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromArrayBufferView>
	<fromArrayBuffer public="1" set="method" line="69" static="1">
		<f a="buffer">
			<x path="lime.utils.ArrayBuffer"/>
			<x path="lime.utils.BytePointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromArrayBuffer>
	<fromBytes public="1" set="method" line="80" static="1">
		<f a="bytes">
			<c path="haxe.io.Bytes"/>
			<x path="lime.utils.BytePointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromBytes>
	<fromBytesData public="1" set="method" line="85" static="1">
		<f a="bytesData">
			<t path="haxe.io.BytesData"/>
			<x path="lime.utils.BytePointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromBytesData>
	<fromFile public="1" set="method" line="92" static="1"><f a="path">
	<c path="String"/>
	<x path="lime.utils.BytePointer"/>
</f></fromFile>
	<fromLimeBytes public="1" set="method" line="97" static="1">
		<f a="bytes">
			<t path="lime.utils._Bytes.LimeBytes"/>
			<x path="lime.utils.BytePointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromLimeBytes>
	<toUInt8Array public="1" set="method" line="102" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toUInt8Array>
	<toUInt8ClampedArray public="1" set="method" line="111" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toUInt8ClampedArray>
	<toInt8Array public="1" set="method" line="122" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toInt8Array>
	<toUInt16Array public="1" set="method" line="133" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toUInt16Array>
	<toInt16Array public="1" set="method" line="144" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toInt16Array>
	<toUInt32Array public="1" set="method" line="155" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toUInt32Array>
	<toInt32Array public="1" set="method" line="166" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toInt32Array>
	<toFloat32Array public="1" set="method" line="177" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toFloat32Array>
	<toFloat64Array public="1" set="method" line="188" static="1">
		<f a="bytePointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta>
			<m n=":to"/>
			<m n=":noCompletion"/>
		</meta>
	</toFloat64Array>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>lime.utils.BytePointerData</e></m>
		<m n=":access"><e>haxe.io.Bytes</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.utils._BytePointer.BytePointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/BytePointer.hx" private="1" module="lime.utils.BytePointer" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="?bytes:?offset" v="null:0">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="lime.utils.BytePointer"/>
			</f>
			<meta>
				<m n=":value"><e>{ offset : 0, bytes : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<set public="1" set="method" line="19" static="1"><f a="this:?bytes:?bufferView:?buffer:?offset">
	<c path="lime.utils.BytePointerData"/>
	<c path="haxe.io.Bytes"/>
	<c path="lime.utils.ArrayBufferView"/>
	<x path="lime.utils.ArrayBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<__arrayGet get="inline" set="null" line="47" static="1">
			<f a="this:index">
				<c path="lime.utils.BytePointerData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</__arrayGet>
		<__arraySet get="inline" set="null" line="52" static="1">
			<f a="this:index:value">
				<c path="lime.utils.BytePointerData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</__arraySet>
		<fromArrayBufferView public="1" set="method" line="58" static="1">
			<f a="arrayBufferView">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="lime.utils.BytePointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromArrayBufferView>
		<fromArrayBuffer public="1" set="method" line="69" static="1">
			<f a="buffer">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="lime.utils.BytePointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromArrayBuffer>
		<fromBytes public="1" set="method" line="80" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="lime.utils.BytePointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromBytes>
		<fromBytesData public="1" set="method" line="85" static="1">
			<f a="bytesData">
				<t path="haxe.io.BytesData"/>
				<x path="lime.utils.BytePointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromBytesData>
		<fromFile public="1" set="method" line="92" static="1"><f a="path">
	<c path="String"/>
	<x path="lime.utils.BytePointer"/>
</f></fromFile>
		<fromLimeBytes public="1" set="method" line="97" static="1">
			<f a="bytes">
				<t path="lime.utils._Bytes.LimeBytes"/>
				<x path="lime.utils.BytePointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromLimeBytes>
		<toUInt8Array public="1" set="method" line="102" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toUInt8Array>
		<toUInt8ClampedArray public="1" set="method" line="111" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toUInt8ClampedArray>
		<toInt8Array public="1" set="method" line="122" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toInt8Array>
		<toUInt16Array public="1" set="method" line="133" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toUInt16Array>
		<toInt16Array public="1" set="method" line="144" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toInt16Array>
		<toUInt32Array public="1" set="method" line="155" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toUInt32Array>
		<toInt32Array public="1" set="method" line="166" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toInt32Array>
		<toFloat32Array public="1" set="method" line="177" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toFloat32Array>
		<toFloat64Array public="1" set="method" line="188" static="1">
			<f a="bytePointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta>
				<m n=":to"/>
				<m n=":noCompletion"/>
			</meta>
		</toFloat64Array>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime.utils.BytePointerData</e></m>
			<m n=":access"><e>haxe.io.Bytes</e></m>
		</meta>
	</class>
	<abstract path="lime.utils.Bytes" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Bytes.hx">
		<from><icast><t path="haxe.io._Bytes.HaxeBytes"/></icast></from>
		<this><t path="haxe.io._Bytes.HaxeBytes"/></this>
		<to><icast><t path="haxe.io._Bytes.HaxeBytes"/></icast></to>
		<meta>
			<m n=":access"><e>haxe.io.Bytes</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.utils._Bytes.Bytes_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Bytes.hx" private="1" module="lime.utils.Bytes" final="1">
	<_new public="1" set="method" line="19" static="1">
		<f a="length:bytesData">
			<x path="Int"/>
			<t path="haxe.io.BytesData"/>
			<x path="lime.utils.Bytes"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<alloc public="1" set="method" line="31" static="1"><f a="length">
	<x path="Int"/>
	<x path="lime.utils.Bytes"/>
</f></alloc>
	<compress public="1" set="method" line="39" static="1"><f a="this:algorithm">
	<t path="haxe.io._Bytes.HaxeBytes"/>
	<e path="lime.utils.CompressionAlgorithm"/>
	<x path="lime.utils.Bytes"/>
</f></compress>
	<decompress public="1" set="method" line="60" static="1"><f a="this:algorithm">
	<t path="haxe.io._Bytes.HaxeBytes"/>
	<e path="lime.utils.CompressionAlgorithm"/>
	<x path="lime.utils.Bytes"/>
</f></decompress>
	<fastGet public="1" get="inline" set="null" line="81" static="1"><f a="b:pos">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastGet>
	<fromBytes public="1" set="method" line="86" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="lime.utils.Bytes"/>
</f></fromBytes>
	<fromFile public="1" set="method" line="93" static="1"><f a="path">
	<c path="String"/>
	<x path="lime.utils.Bytes"/>
</f></fromFile>
	<loadFromBytes public="1" set="method" line="108" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.app.Future"><x path="lime.utils.Bytes"/></c>
</f></loadFromBytes>
	<loadFromFile public="1" set="method" line="113" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.app.Future"><x path="lime.utils.Bytes"/></c>
</f></loadFromFile>
	<ofData public="1" set="method" line="119" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<x path="lime.utils.Bytes"/>
</f></ofData>
	<ofString public="1" set="method" line="125" static="1"><f a="s">
	<c path="String"/>
	<x path="lime.utils.Bytes"/>
</f></ofString>
	<__fromNativePointer public="1" set="method" line="132" static="1"><f a="data:length">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Bytes"/>
</f></__fromNativePointer>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		<m n=":access"><e>haxe.io.Bytes</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.utils._Bytes.Bytes_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Bytes.hx" private="1" module="lime.utils.Bytes" final="1">
		<_new public="1" set="method" line="19" static="1">
			<f a="length:bytesData">
				<x path="Int"/>
				<t path="haxe.io.BytesData"/>
				<x path="lime.utils.Bytes"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<alloc public="1" set="method" line="31" static="1"><f a="length">
	<x path="Int"/>
	<x path="lime.utils.Bytes"/>
</f></alloc>
		<compress public="1" set="method" line="39" static="1"><f a="this:algorithm">
	<t path="haxe.io._Bytes.HaxeBytes"/>
	<e path="lime.utils.CompressionAlgorithm"/>
	<x path="lime.utils.Bytes"/>
</f></compress>
		<decompress public="1" set="method" line="60" static="1"><f a="this:algorithm">
	<t path="haxe.io._Bytes.HaxeBytes"/>
	<e path="lime.utils.CompressionAlgorithm"/>
	<x path="lime.utils.Bytes"/>
</f></decompress>
		<fastGet public="1" get="inline" set="null" line="81" static="1"><f a="b:pos">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastGet>
		<fromBytes public="1" set="method" line="86" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="lime.utils.Bytes"/>
</f></fromBytes>
		<fromFile public="1" set="method" line="93" static="1"><f a="path">
	<c path="String"/>
	<x path="lime.utils.Bytes"/>
</f></fromFile>
		<loadFromBytes public="1" set="method" line="108" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="lime.app.Future"><x path="lime.utils.Bytes"/></c>
</f></loadFromBytes>
		<loadFromFile public="1" set="method" line="113" static="1"><f a="path">
	<c path="String"/>
	<c path="lime.app.Future"><x path="lime.utils.Bytes"/></c>
</f></loadFromFile>
		<ofData public="1" set="method" line="119" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<x path="lime.utils.Bytes"/>
</f></ofData>
		<ofString public="1" set="method" line="125" static="1"><f a="s">
	<c path="String"/>
	<x path="lime.utils.Bytes"/>
</f></ofString>
		<__fromNativePointer public="1" set="method" line="132" static="1"><f a="data:length">
	<d/>
	<x path="Int"/>
	<x path="lime.utils.Bytes"/>
</f></__fromNativePointer>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>haxe.io.Bytes</e></m>
		</meta>
	</class>
	<enum path="lime.utils.CompressionAlgorithm" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<GZIP/>
		<LZMA/>
		<ZLIB/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="lime.utils.DataPointer" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/DataPointer.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromBytesPointer"><x path="lime.utils.BytePointer"/></icast>
			<icast field="fromArrayBufferView"><c path="lime.utils.ArrayBufferView"/></icast>
			<icast field="fromArrayBuffer"><x path="lime.utils.ArrayBuffer"/></icast>
			<icast field="fromBytes"><c path="haxe.io.Bytes"/></icast>
			<icast field="fromBytesData"><t path="haxe.io.BytesData"/></icast>
			<icast field="fromLimeBytes"><t path="lime.utils._Bytes.LimeBytes"/></icast>
			<icast field="fromCFFIPointer"><x path="lime.system.CFFIPointer"/></icast>
		</from>
		<this><t path="lime.utils._DataPointer.DataPointerType"/></this>
		<to><icast><t path="lime.utils._DataPointer.DataPointerType"/></icast></to>
		<meta>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
			<m n=":access"><e>haxe.io.Bytes</e></m>
			<m n=":transitive"/>
		</meta>
		<impl><class path="lime.utils._DataPointer.DataPointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/DataPointer.hx" private="1" module="lime.utils.DataPointer" final="1">
	<_new set="method" line="21" static="1">
		<f a="data">
			<d/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromFloat set="method" line="38" static="1">
		<f a="value">
			<x path="Float"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromFloat>
	<fromBytesPointer public="1" set="method" line="63" static="1">
		<f a="pointer">
			<x path="lime.utils.BytePointer"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromBytesPointer>
	<fromArrayBufferView public="1" set="method" line="77" static="1">
		<f a="arrayBufferView">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromArrayBufferView>
	<fromArrayBuffer public="1" set="method" line="91" static="1">
		<f a="buffer">
			<x path="lime.utils.ArrayBuffer"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromArrayBuffer>
	<fromBytes public="1" set="method" line="101" static="1">
		<f a="bytes">
			<c path="haxe.io.Bytes"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromBytes>
	<fromBytesData public="1" set="method" line="115" static="1">
		<f a="bytesData">
			<t path="haxe.io.BytesData"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromBytesData>
	<fromLimeBytes public="1" set="method" line="125" static="1">
		<f a="bytes">
			<t path="lime.utils._Bytes.LimeBytes"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromLimeBytes>
	<fromCFFIPointer public="1" set="method" line="131" static="1">
		<f a="pointer">
			<x path="lime.system.CFFIPointer"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":noCompletion"/>
		</meta>
	</fromCFFIPointer>
	<fromFile public="1" set="method" line="142" static="1"><f a="path">
	<c path="String"/>
	<x path="lime.utils.DataPointer"/>
</f></fromFile>
	<__withOffset set="method" line="151" static="1"><f a="data:offset">
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></__withOffset>
	<equals get="inline" set="null" line="162" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equals>
	<equalsPointer get="inline" set="null" line="167" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.DataPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsPointer>
	<greaterThan get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</greaterThan>
	<greaterThanPointer get="inline" set="null" line="178" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</greaterThanPointer>
	<greaterThanOrEqual get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</greaterThanOrEqual>
	<greaterThanOrEqualPointer get="inline" set="null" line="190" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</greaterThanOrEqualPointer>
	<lessThan get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lessThan>
	<lessThanPointer get="inline" set="null" line="202" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lessThanPointer>
	<lessThanOrEqual get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lessThanOrEqual>
	<lessThanOrEqualPointer get="inline" set="null" line="214" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.system.CFFIPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lessThanOrEqualPointer>
	<notEquals get="inline" set="null" line="220" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEquals>
	<notEqualsPointer get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.DataPointer"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsPointer>
	<plus get="inline" set="null" line="230" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</plus>
	<plusPointer get="inline" set="null" line="235" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</plusPointer>
	<minus get="inline" set="null" line="240" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="Int"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</minus>
	<minusPointer get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.DataPointer"/>
			<x path="lime.utils.DataPointer"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</minusPointer>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>haxe.io.Bytes</e></m>
		<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="lime.utils._DataPointer.DataPointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/DataPointer.hx" private="1" module="lime.utils.DataPointer" final="1">
		<_new set="method" line="21" static="1">
			<f a="data">
				<d/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromFloat set="method" line="38" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromFloat>
		<fromBytesPointer public="1" set="method" line="63" static="1">
			<f a="pointer">
				<x path="lime.utils.BytePointer"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromBytesPointer>
		<fromArrayBufferView public="1" set="method" line="77" static="1">
			<f a="arrayBufferView">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromArrayBufferView>
		<fromArrayBuffer public="1" set="method" line="91" static="1">
			<f a="buffer">
				<x path="lime.utils.ArrayBuffer"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromArrayBuffer>
		<fromBytes public="1" set="method" line="101" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromBytes>
		<fromBytesData public="1" set="method" line="115" static="1">
			<f a="bytesData">
				<t path="haxe.io.BytesData"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromBytesData>
		<fromLimeBytes public="1" set="method" line="125" static="1">
			<f a="bytes">
				<t path="lime.utils._Bytes.LimeBytes"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromLimeBytes>
		<fromCFFIPointer public="1" set="method" line="131" static="1">
			<f a="pointer">
				<x path="lime.system.CFFIPointer"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":noCompletion"/>
			</meta>
		</fromCFFIPointer>
		<fromFile public="1" set="method" line="142" static="1"><f a="path">
	<c path="String"/>
	<x path="lime.utils.DataPointer"/>
</f></fromFile>
		<__withOffset set="method" line="151" static="1"><f a="data:offset">
	<x path="lime.utils.DataPointer"/>
	<x path="Int"/>
	<x path="lime.utils.DataPointer"/>
</f></__withOffset>
		<equals get="inline" set="null" line="162" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equals>
		<equalsPointer get="inline" set="null" line="167" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsPointer>
		<greaterThan get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</greaterThan>
		<greaterThanPointer get="inline" set="null" line="178" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</greaterThanPointer>
		<greaterThanOrEqual get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</greaterThanOrEqual>
		<greaterThanOrEqualPointer get="inline" set="null" line="190" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</greaterThanOrEqualPointer>
		<lessThan get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lessThan>
		<lessThanPointer get="inline" set="null" line="202" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lessThanPointer>
		<lessThanOrEqual get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lessThanOrEqual>
		<lessThanOrEqualPointer get="inline" set="null" line="214" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.system.CFFIPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lessThanOrEqualPointer>
		<notEquals get="inline" set="null" line="220" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEquals>
		<notEqualsPointer get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsPointer>
		<plus get="inline" set="null" line="230" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</plus>
		<plusPointer get="inline" set="null" line="235" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</plusPointer>
		<minus get="inline" set="null" line="240" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="Int"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</minus>
		<minusPointer get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
				<x path="lime.utils.DataPointer"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</minusPointer>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.io.Bytes</e></m>
			<m n=":access"><e>lime._internal.backend.native.NativeCFFI</e></m>
		</meta>
	</class>
	<typedef path="lime.utils._DataPointer.DataPointerType" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/DataPointer.hx" private="1" module="lime.utils.DataPointer"><x path="Float"/></typedef>
	<abstract path="lime.utils.Float32Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Float32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._Float32Array.Float32Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Float32Array.hx" private="1" module="lime.utils.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="95" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<hello public="1" static="1"><x path="Int"/></hello>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="103" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="136" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="140" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="145" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<toString get="inline" set="null" line="151" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	<get_length get="inline" set="null" line="154" static="1">
		<f a="this">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
		</f>
		<meta><m n=":extern"/></meta>
	</get_length>
	<__get public="1" get="inline" set="null" line="159" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="166" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
</class></impl>
	</abstract>
	<class path="lime.utils._Float32Array.Float32Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Float32Array.hx" private="1" module="lime.utils.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<hello public="1" static="1"><x path="Int"/></hello>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="103" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="136" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="140" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="145" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<toString get="inline" set="null" line="151" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
		<get_length get="inline" set="null" line="154" static="1">
			<f a="this">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</get_length>
		<__get public="1" get="inline" set="null" line="159" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="166" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
	</class>
	<abstract path="lime.utils.Float64Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Float64Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._Float64Array.Float64Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Float64Array.hx" private="1" module="lime.utils.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="93" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="100" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="133" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="137" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Float64Array.Float64Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Float64Array.hx" private="1" module="lime.utils.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="133" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="137" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Int16Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int16Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._Int16Array.Int16Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int16Array.hx" private="1" module="lime.utils.Int16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="93" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="100" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="133" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="137" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int16Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int16Array.Int16Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int16Array.hx" private="1" module="lime.utils.Int16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="133" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="137" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int16Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Int32Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._Int32Array.Int32Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int32Array.hx" private="1" module="lime.utils.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="93" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="100" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="133" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="137" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int32Array.Int32Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int32Array.hx" private="1" module="lime.utils.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="133" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="137" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.Int8Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int8Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._Int8Array.Int8Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int8Array.hx" private="1" module="lime.utils.Int8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="91" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="98" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="131" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="135" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.Int8Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._Int8Array.Int8Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Int8Array.hx" private="1" module="lime.utils.Int8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="131" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="135" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.Int8Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<class path="lime.utils.Log" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Log.hx">
		<level public="1" static="1"><x path="lime.utils.LogLevel"/></level>
		<throwErrors public="1" expr="true" line="12" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</throwErrors>
		<debug public="1" set="method" line="15" static="1"><f a="message:?info">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></debug>
		<error public="1" set="method" line="27" static="1"><f a="message:?info">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></error>
		<info public="1" set="method" line="48" static="1"><f a="message:?info">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></info>
		<print public="1" get="inline" set="null" line="60" static="1"><f a="message">
	<d/>
	<x path="Void"/>
</f></print>
		<println public="1" get="inline" set="null" line="73" static="1"><f a="message">
	<d/>
	<x path="Void"/>
</f></println>
		<verbose public="1" set="method" line="86" static="1"><f a="message:?info">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></verbose>
		<warn public="1" set="method" line="94" static="1"><f a="message:?info">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></warn>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.utils.LogLevel" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/LogLevel.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<meta><m n=":enum"/></meta>
		<impl><class path="lime.utils._LogLevel.LogLevel_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/LogLevel.hx" private="1" module="lime.utils.LogLevel" final="1">
	<NONE public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="lime.utils.LogLevel"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NONE>
	<ERROR public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="lime.utils.LogLevel"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ERROR>
	<WARN public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
		<x path="lime.utils.LogLevel"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WARN>
	<INFO public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
		<x path="lime.utils.LogLevel"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INFO>
	<DEBUG public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
		<x path="lime.utils.LogLevel"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEBUG>
	<VERBOSE public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
		<x path="lime.utils.LogLevel"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VERBOSE>
	<gt get="inline" set="null" line="13" static="1">
		<f a="a:b">
			<x path="lime.utils.LogLevel"/>
			<x path="lime.utils.LogLevel"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="18" static="1">
		<f a="a:b">
			<x path="lime.utils.LogLevel"/>
			<x path="lime.utils.LogLevel"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="23" static="1">
		<f a="a:b">
			<x path="lime.utils.LogLevel"/>
			<x path="lime.utils.LogLevel"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="28" static="1">
		<f a="a:b">
			<x path="lime.utils.LogLevel"/>
			<x path="lime.utils.LogLevel"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="lime.utils._LogLevel.LogLevel_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/LogLevel.hx" private="1" module="lime.utils.LogLevel" final="1">
		<NONE public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="lime.utils.LogLevel"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NONE>
		<ERROR public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="lime.utils.LogLevel"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ERROR>
		<WARN public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
			<x path="lime.utils.LogLevel"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WARN>
		<INFO public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
			<x path="lime.utils.LogLevel"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INFO>
		<DEBUG public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
			<x path="lime.utils.LogLevel"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEBUG>
		<VERBOSE public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
			<x path="lime.utils.LogLevel"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VERBOSE>
		<gt get="inline" set="null" line="13" static="1">
			<f a="a:b">
				<x path="lime.utils.LogLevel"/>
				<x path="lime.utils.LogLevel"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="18" static="1">
			<f a="a:b">
				<x path="lime.utils.LogLevel"/>
				<x path="lime.utils.LogLevel"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="23" static="1">
			<f a="a:b">
				<x path="lime.utils.LogLevel"/>
				<x path="lime.utils.LogLevel"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="28" static="1">
			<f a="a:b">
				<x path="lime.utils.LogLevel"/>
				<x path="lime.utils.LogLevel"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="lime.utils.Preloader" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/Preloader.hx">
		<complete public="1" set="null"><x path="Bool"/></complete>
		<onComplete public="1" expr="new Event&lt;Void&gt;()">
			<c path="lime.app._Event_Void_Void"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Void>()]]></e></m></meta>
		</onComplete>
		<onProgress public="1" expr="new Event&lt;Int -&gt; Int&gt;()">
			<c path="lime.app._Event_Int_Int_Void"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e><![CDATA[new Event<Int -> Int>()]]></e></m></meta>
		</onProgress>
		<bytesLoaded>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</bytesLoaded>
		<bytesLoadedCache expr="new ObjectMap&lt;AssetLibrary,Int&gt;()">
			<c path="haxe.ds.ObjectMap">
				<c path="lime.utils.AssetLibrary"/>
				<x path="Int"/>
			</c>
			<meta>
				<m n=":value"><e><![CDATA[new ObjectMap<AssetLibrary,Int>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</bytesLoadedCache>
		<bytesLoadedCache2 expr="new Map&lt;String,Int&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Int"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Int>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</bytesLoadedCache2>
		<bytesTotal>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</bytesTotal>
		<bytesTotalCache expr="new Map&lt;String,Int&gt;()">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Int"/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<String,Int>()]]></e></m>
				<m n=":noCompletion"/>
			</meta>
		</bytesTotalCache>
		<initLibraryNames>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</initLibraryNames>
		<libraries>
			<c path="Array"><c path="lime.utils.AssetLibrary"/></c>
			<meta><m n=":noCompletion"/></meta>
		</libraries>
		<libraryNames>
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</libraryNames>
		<loadedLibraries>
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</loadedLibraries>
		<loadedStage>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</loadedStage>
		<preloadComplete>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</preloadComplete>
		<preloadStarted>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</preloadStarted>
		<simulateProgress>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</simulateProgress>
		<addLibrary public="1" set="method" line="110"><f a="library">
	<c path="lime.utils.AssetLibrary"/>
	<x path="Void"/>
</f></addLibrary>
		<addLibraryName public="1" set="method" line="115"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></addLibraryName>
		<load public="1" set="method" line="123"><f a=""><x path="Void"/></f></load>
		<loadedAssetLibrary set="method" line="187">
			<f a="?name" v="null">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ name : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</loadedAssetLibrary>
		<start set="method" line="208">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</start>
		<update set="method" line="223">
			<f a="loaded:total">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</update>
		<updateProgress set="method" line="226">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</updateProgress>
		<new public="1" set="method" line="52"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>lime.utils.AssetLibrary</e></m>
			<m n=":fileXml"><e>"tags=\"haxe,release\""</e></m>
			<m n=":noDebug"/>
		</meta>
	</class>
	<abstract path="lime.utils.UInt16Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt16Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._UInt16Array.UInt16Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt16Array.hx" private="1" module="lime.utils.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="93" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="100" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="133" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="137" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt16Array.UInt16Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt16Array.hx" private="1" module="lime.utils.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="133" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="137" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.UInt32Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt32Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._UInt32Array.UInt32Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt32Array.hx" private="1" module="lime.utils.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="93" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="100" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="133" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="137" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="153" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="160" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt32Array.UInt32Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt32Array.hx" private="1" module="lime.utils.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="133" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="137" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="142" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="148" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="153" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="160" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="166" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<abstract path="lime.utils.UInt8Array" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt8Array.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="lime.utils._UInt8Array.UInt8Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt8Array.hx" private="1" module="lime.utils.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="91" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="98" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="131" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="135" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="140" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<toString get="inline" set="null" line="146" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	<get_length get="inline" set="null" line="149" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="154" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="161" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt8Array.UInt8Array_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt8Array.hx" private="1" module="lime.utils.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="131" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="135" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="140" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<toString get="inline" set="null" line="146" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
		<get_length get="inline" set="null" line="149" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="154" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="161" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
	</class>
	<abstract path="lime.utils.UInt8ClampedArray" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt8ClampedArray.hx">
		<from><icast><c path="lime.utils.ArrayBufferView"/></icast></from>
		<this><c path="lime.utils.ArrayBufferView"/></this>
		<to><icast><c path="lime.utils.ArrayBufferView"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
			<m n=":arrayAccess"/>
		</meta>
		<impl><class path="lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt8ClampedArray.hx" private="1" module="lime.utils.UInt8ClampedArray" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="103" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" params="T" get="inline" set="null" line="110" static="1">
		<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
			<x path="Int"/>
			<x path="lime.utils.ArrayBuffer"/>
			<c path="Array"><c path="_new.T"/></c>
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta>
			<m n=":value"><e>{ byteoffset : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<subarray public="1" get="inline" set="null" line="143" static="1">
		<f a="this:begin:?end" v="::null">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta><m n=":value"><e>{ end : null }</e></m></meta>
	</subarray>
	<fromBytes public="1" get="inline" set="null" line="147" static="1">
		<f a="bytes:?byteOffset:?len" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="lime.utils.UInt8ClampedArray"/>
		</f>
		<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="152" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
	<get_length get="inline" set="null" line="158" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
	<__get public="1" get="inline" set="null" line="163" static="1">
		<f a="this:idx">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="Null"><x path="UInt"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__get>
	<__set public="1" get="inline" set="null" line="170" static="1">
		<f a="this:idx:val">
			<c path="lime.utils.ArrayBufferView"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":arrayAccess"/>
			<m n=":extern"/>
		</meta>
	</__set>
	<toString get="inline" set="null" line="176" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
</class></impl>
	</abstract>
	<class path="lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/lime/8.0.0/haxelib/src/lime/utils/UInt8ClampedArray.hx" private="1" module="lime.utils.UInt8ClampedArray" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="?elements:?buffer:?array:?view:?byteoffset:?len" v="::::0:">
				<x path="Int"/>
				<x path="lime.utils.ArrayBuffer"/>
				<c path="Array"><c path="_new.T"/></c>
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta>
				<m n=":value"><e>{ byteoffset : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<subarray public="1" get="inline" set="null" line="143" static="1">
			<f a="this:begin:?end" v="::null">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</subarray>
		<fromBytes public="1" get="inline" set="null" line="147" static="1">
			<f a="bytes:?byteOffset:?len" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="lime.utils.UInt8ClampedArray"/>
			</f>
			<meta><m n=":value"><e>{ byteOffset : 0 }</e></m></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="152" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<c path="haxe.io.Bytes"/>
</f></toBytes>
		<get_length get="inline" set="null" line="158" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Int"/>
</f></get_length>
		<__get public="1" get="inline" set="null" line="163" static="1">
			<f a="this:idx">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Null"><x path="UInt"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="170" static="1">
			<f a="this:idx:val">
				<c path="lime.utils.ArrayBufferView"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":arrayAccess"/>
				<m n=":extern"/>
			</meta>
		</__set>
		<toString get="inline" set="null" line="176" static="1"><f a="this">
	<c path="lime.utils.ArrayBufferView"/>
	<x path="Null"><c path="String"/></x>
</f></toString>
	</class>
	<class path="peote.view.BufferInterface" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/BufferInterface.hx" interface="1">
		<_gl>
			<x path="peote.view.PeoteGL"/>
			<meta><m n=":allow"><e>peote.view.Display</e></m></meta>
		</_gl>
		<setNewGLContext set="method">
			<f a="newGl">
				<x path="peote.view.PeoteGL"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>peote.view.Display</e></m></meta>
		</setNewGLContext>
		<getVertexShader set="method"><f a=""><c path="String"/></f></getVertexShader>
		<getFragmentShader set="method"><f a=""><c path="String"/></f></getFragmentShader>
		<getTextureIdentifiers set="method"><f a=""><c path="Array"><c path="String"/></c></f></getTextureIdentifiers>
		<getColorIdentifiers set="method"><f a=""><c path="Array"><c path="String"/></c></f></getColorIdentifiers>
		<getCustomIdentifiers set="method"><f a=""><c path="Array"><c path="String"/></c></f></getCustomIdentifiers>
		<getCustomVaryings set="method"><f a=""><c path="Array"><c path="String"/></c></f></getCustomVaryings>
		<getDefaultColorFormula set="method"><f a=""><c path="String"/></f></getDefaultColorFormula>
		<getDefaultFormulaVars set="method"><f a=""><c path="haxe.ds.StringMap"><x path="peote.view.Color"/></c></f></getDefaultFormulaVars>
		<getFormulas set="method"><f a=""><c path="haxe.ds.StringMap"><c path="String"/></c></f></getFormulas>
		<getAttributes set="method"><f a=""><c path="haxe.ds.StringMap"><c path="String"/></c></f></getAttributes>
		<getFormulaNames set="method"><f a=""><c path="haxe.ds.StringMap"><c path="String"/></c></f></getFormulaNames>
		<getFormulaVaryings set="method"><f a=""><c path="Array"><c path="String"/></c></f></getFormulaVaryings>
		<getFormulaConstants set="method"><f a=""><c path="Array"><c path="String"/></c></f></getFormulaConstants>
		<getFormulaCustoms set="method"><f a=""><c path="Array"><c path="String"/></c></f></getFormulaCustoms>
		<getMaxZindex set="method"><f a=""><x path="Int"/></f></getMaxZindex>
		<hasAlpha set="method"><f a=""><x path="Bool"/></f></hasAlpha>
		<hasZindex set="method"><f a=""><x path="Bool"/></f></hasZindex>
		<hasPicking set="method"><f a=""><x path="Bool"/></f></hasPicking>
		<hasTime set="method"><f a=""><x path="Bool"/></f></hasTime>
		<needFragmentPrecision set="method"><f a=""><x path="Bool"/></f></needFragmentPrecision>
		<getElementWithHighestZindex set="method">
			<f a="elementIndices">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":allow"><e>peote.view.PeoteView</e></m></meta>
		</getElementWithHighestZindex>
		<bindAttribLocations set="method"><f a="gl:glProgram">
	<x path="peote.view.PeoteGL"/>
	<x path="lime.graphics.opengl.GLProgram"/>
	<x path="Void"/>
</f></bindAttribLocations>
		<render set="method"><f a="peoteView:display:program">
	<c path="peote.view.PeoteView"/>
	<c path="peote.view.Display"/>
	<c path="peote.view.Program"/>
	<x path="Void"/>
</f></render>
		<pick set="method"><f a="peoteView:display:program:toElement">
	<c path="peote.view.PeoteView"/>
	<c path="peote.view.Display"/>
	<c path="peote.view.Program"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pick>
		<meta><m n=":allow"><e>peote.view.Program</e></m></meta>
	</class>
	<abstract path="peote.view.Color" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Color.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<impl><class path="peote.view._Color.Color_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Color.hx" private="1" module="peote.view.Color" final="1">
	<_new get="inline" set="null" line="6" static="1">
		<f a="rgba">
			<x path="Int"/>
			<x path="peote.view.Color"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<r public="1" get="accessor" set="accessor" static="1"><x path="Int"/></r>
	<g public="1" get="accessor" set="accessor" static="1"><x path="Int"/></g>
	<b public="1" get="accessor" set="accessor" static="1"><x path="Int"/></b>
	<a public="1" get="accessor" set="accessor" static="1"><x path="Int"/></a>
	<rgb public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgb>
	<argb public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argb>
	<red public="1" get="accessor" set="accessor" static="1"><x path="Int"/></red>
	<green public="1" get="accessor" set="accessor" static="1"><x path="Int"/></green>
	<blue public="1" get="accessor" set="accessor" static="1"><x path="Int"/></blue>
	<alpha public="1" get="accessor" set="accessor" static="1"><x path="Int"/></alpha>
	<get_r get="inline" set="null" line="21" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_r>
	<get_g get="inline" set="null" line="22" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_g>
	<get_b get="inline" set="null" line="23" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_b>
	<get_a get="inline" set="null" line="24" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_a>
	<get_rgb get="inline" set="null" line="26" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_rgb>
	<get_argb get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_argb>
	<get_red get="inline" set="null" line="29" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_red>
	<get_green get="inline" set="null" line="30" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_green>
	<get_blue get="inline" set="null" line="31" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_blue>
	<get_alpha get="inline" set="null" line="32" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_alpha>
	<set_r get="inline" set="null" line="34" static="1"><f a="this:r">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_r>
	<set_g get="inline" set="null" line="35" static="1"><f a="this:g">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_g>
	<set_b get="inline" set="null" line="36" static="1"><f a="this:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_b>
	<set_a get="inline" set="null" line="37" static="1"><f a="this:a">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_a>
	<set_rgb get="inline" set="null" line="39" static="1"><f a="this:rgb">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<set_argb get="inline" set="null" line="40" static="1"><f a="this:argb">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<set_red get="inline" set="null" line="42" static="1"><f a="this:r">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_red>
	<set_green get="inline" set="null" line="43" static="1"><f a="this:g">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_green>
	<set_blue get="inline" set="null" line="44" static="1"><f a="this:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_blue>
	<set_alpha get="inline" set="null" line="45" static="1"><f a="this:a">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_alpha>
	<setAlpha public="1" get="inline" set="null" line="48" static="1"><f a="this:a">
	<x path="Int"/>
	<x path="Float"/>
	<x path="peote.view.Color"/>
</f></setAlpha>
	<random public="1" get="inline" set="null" line="50" static="1"><f a=""><x path="peote.view.Color"/></f></random>
	<randomize public="1" get="inline" set="null" line="54" static="1"><f a="this">
	<x path="Int"/>
	<x path="Void"/>
</f></randomize>
	<toGLSL public="1" get="inline" set="null" line="58" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toGLSL>
	<BLACK public="1" get="inline" set="null" expr="0x000000ff" line="68" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x000000ff</e></m></meta>
	</BLACK>
	<RED public="1" get="inline" set="null" expr="0xff0000ff" line="69" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xff0000ff</e></m></meta>
	</RED>
	<GREEN public="1" get="inline" set="null" expr="0x00ff00ff" line="70" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x00ff00ff</e></m></meta>
	</GREEN>
	<YELLOW public="1" get="inline" set="null" expr="0xffff00ff" line="71" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xffff00ff</e></m></meta>
	</YELLOW>
	<BLUE public="1" get="inline" set="null" expr="0x0000ffff" line="72" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x0000ffff</e></m></meta>
	</BLUE>
	<LIME public="1" get="inline" set="null" expr="0xccff00ff" line="73" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xccff00ff</e></m></meta>
	</LIME>
	<MAGENTA public="1" get="inline" set="null" expr="0xff00ffff" line="74" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xff00ffff</e></m></meta>
	</MAGENTA>
	<CYAN public="1" get="inline" set="null" expr="0x00ffffff" line="75" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x00ffffff</e></m></meta>
	</CYAN>
	<WHITE public="1" get="inline" set="null" expr="0xffffffff" line="76" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xffffffff</e></m></meta>
	</WHITE>
	<GREY1 public="1" get="inline" set="null" expr="0x222222ff" line="77" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x222222ff</e></m></meta>
	</GREY1>
	<GREY2 public="1" get="inline" set="null" expr="0x444444ff" line="78" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x444444ff</e></m></meta>
	</GREY2>
	<GREY3 public="1" get="inline" set="null" expr="0x666666ff" line="79" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x666666ff</e></m></meta>
	</GREY3>
	<GREY4 public="1" get="inline" set="null" expr="0x888888ff" line="80" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0x888888ff</e></m></meta>
	</GREY4>
	<GREY5 public="1" get="inline" set="null" expr="0xaaaaaaff" line="81" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xaaaaaaff</e></m></meta>
	</GREY5>
	<GREY6 public="1" get="inline" set="null" expr="0xccccccff" line="82" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xccccccff</e></m></meta>
	</GREY6>
	<GREY7 public="1" get="inline" set="null" expr="0xeeeeeeff" line="83" static="1">
		<x path="peote.view.Color"/>
		<meta><m n=":value"><e>0xeeeeeeff</e></m></meta>
	</GREY7>
</class></impl>
	</abstract>
	<class path="peote.view._Color.Color_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Color.hx" private="1" module="peote.view.Color" final="1">
		<_new get="inline" set="null" line="6" static="1">
			<f a="rgba">
				<x path="Int"/>
				<x path="peote.view.Color"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<r public="1" get="accessor" set="accessor" static="1"><x path="Int"/></r>
		<g public="1" get="accessor" set="accessor" static="1"><x path="Int"/></g>
		<b public="1" get="accessor" set="accessor" static="1"><x path="Int"/></b>
		<a public="1" get="accessor" set="accessor" static="1"><x path="Int"/></a>
		<rgb public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgb>
		<argb public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argb>
		<red public="1" get="accessor" set="accessor" static="1"><x path="Int"/></red>
		<green public="1" get="accessor" set="accessor" static="1"><x path="Int"/></green>
		<blue public="1" get="accessor" set="accessor" static="1"><x path="Int"/></blue>
		<alpha public="1" get="accessor" set="accessor" static="1"><x path="Int"/></alpha>
		<get_r get="inline" set="null" line="21" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_r>
		<get_g get="inline" set="null" line="22" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_g>
		<get_b get="inline" set="null" line="23" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_b>
		<get_a get="inline" set="null" line="24" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_a>
		<get_rgb get="inline" set="null" line="26" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_rgb>
		<get_argb get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_argb>
		<get_red get="inline" set="null" line="29" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_red>
		<get_green get="inline" set="null" line="30" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_green>
		<get_blue get="inline" set="null" line="31" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_blue>
		<get_alpha get="inline" set="null" line="32" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_alpha>
		<set_r get="inline" set="null" line="34" static="1"><f a="this:r">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_r>
		<set_g get="inline" set="null" line="35" static="1"><f a="this:g">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_g>
		<set_b get="inline" set="null" line="36" static="1"><f a="this:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_b>
		<set_a get="inline" set="null" line="37" static="1"><f a="this:a">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_a>
		<set_rgb get="inline" set="null" line="39" static="1"><f a="this:rgb">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<set_argb get="inline" set="null" line="40" static="1"><f a="this:argb">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<set_red get="inline" set="null" line="42" static="1"><f a="this:r">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_red>
		<set_green get="inline" set="null" line="43" static="1"><f a="this:g">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_green>
		<set_blue get="inline" set="null" line="44" static="1"><f a="this:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_blue>
		<set_alpha get="inline" set="null" line="45" static="1"><f a="this:a">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_alpha>
		<setAlpha public="1" get="inline" set="null" line="48" static="1"><f a="this:a">
	<x path="Int"/>
	<x path="Float"/>
	<x path="peote.view.Color"/>
</f></setAlpha>
		<random public="1" get="inline" set="null" line="50" static="1"><f a=""><x path="peote.view.Color"/></f></random>
		<randomize public="1" get="inline" set="null" line="54" static="1"><f a="this">
	<x path="Int"/>
	<x path="Void"/>
</f></randomize>
		<toGLSL public="1" get="inline" set="null" line="58" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toGLSL>
		<BLACK public="1" get="inline" set="null" expr="0x000000ff" line="68" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x000000ff</e></m></meta>
		</BLACK>
		<RED public="1" get="inline" set="null" expr="0xff0000ff" line="69" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xff0000ff</e></m></meta>
		</RED>
		<GREEN public="1" get="inline" set="null" expr="0x00ff00ff" line="70" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x00ff00ff</e></m></meta>
		</GREEN>
		<YELLOW public="1" get="inline" set="null" expr="0xffff00ff" line="71" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xffff00ff</e></m></meta>
		</YELLOW>
		<BLUE public="1" get="inline" set="null" expr="0x0000ffff" line="72" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x0000ffff</e></m></meta>
		</BLUE>
		<LIME public="1" get="inline" set="null" expr="0xccff00ff" line="73" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xccff00ff</e></m></meta>
		</LIME>
		<MAGENTA public="1" get="inline" set="null" expr="0xff00ffff" line="74" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xff00ffff</e></m></meta>
		</MAGENTA>
		<CYAN public="1" get="inline" set="null" expr="0x00ffffff" line="75" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x00ffffff</e></m></meta>
		</CYAN>
		<WHITE public="1" get="inline" set="null" expr="0xffffffff" line="76" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xffffffff</e></m></meta>
		</WHITE>
		<GREY1 public="1" get="inline" set="null" expr="0x222222ff" line="77" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x222222ff</e></m></meta>
		</GREY1>
		<GREY2 public="1" get="inline" set="null" expr="0x444444ff" line="78" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x444444ff</e></m></meta>
		</GREY2>
		<GREY3 public="1" get="inline" set="null" expr="0x666666ff" line="79" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x666666ff</e></m></meta>
		</GREY3>
		<GREY4 public="1" get="inline" set="null" expr="0x888888ff" line="80" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x888888ff</e></m></meta>
		</GREY4>
		<GREY5 public="1" get="inline" set="null" expr="0xaaaaaaff" line="81" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xaaaaaaff</e></m></meta>
		</GREY5>
		<GREY6 public="1" get="inline" set="null" expr="0xccccccff" line="82" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xccccccff</e></m></meta>
		</GREY6>
		<GREY7 public="1" get="inline" set="null" expr="0xeeeeeeff" line="83" static="1">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0xeeeeeeff</e></m></meta>
		</GREY7>
	</class>
	<class path="peote.view.Display" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Display.hx">
		<width public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</width>
		<height public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</height>
		<x public="1" set="accessor" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</x>
		<set_x public="1" get="inline" set="null" line="14"><f a="_x">
	<x path="Int"/>
	<x path="Int"/>
</f></set_x>
		<y public="1" set="accessor" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</y>
		<set_y public="1" get="inline" set="null" line="19"><f a="_y">
	<x path="Int"/>
	<x path="Int"/>
</f></set_y>
		<xOffset public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</xOffset>
		<set_xOffset public="1" get="inline" set="null" line="24"><f a="xo">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xOffset>
		<yOffset public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</yOffset>
		<set_yOffset public="1" get="inline" set="null" line="32"><f a="yo">
	<x path="Float"/>
	<x path="Float"/>
</f></set_yOffset>
		<xz public="1" set="null" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</xz>
		<yz public="1" set="null" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</yz>
		<zoom public="1" set="accessor" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</zoom>
		<set_zoom public="1" get="inline" set="null" line="44"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_zoom>
		<xZoom public="1" set="accessor" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</xZoom>
		<set_xZoom public="1" get="inline" set="null" line="54"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xZoom>
		<yZoom public="1" set="accessor" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</yZoom>
		<set_yZoom public="1" get="inline" set="null" line="63"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_yZoom>
		<color public="1" set="accessor" expr="0x00000000">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x00000000</e></m></meta>
		</color>
		<set_color get="inline" set="null" line="73"><f a="c">
	<x path="peote.view.Color"/>
	<x path="peote.view.Color"/>
</f></set_color>
		<isVisible public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isVisible>
		<show public="1" set="method" line="84"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="85"><f a=""><x path="Void"/></f></hide>
		<backgroundAlpha public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</backgroundAlpha>
		<backgroundDepth public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</backgroundDepth>
		<backgroundEnabled public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</backgroundEnabled>
		<red expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</red>
		<green expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</green>
		<blue expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</blue>
		<alpha expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</alpha>
		<peoteView public="1" set="null" expr="null">
			<c path="peote.view.PeoteView"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</peoteView>
		<gl expr="null">
			<x path="peote.view.PeoteGL"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</gl>
		<programList><c path="peote.view.utils.RenderList_peote_view_Program"/></programList>
		<uniformBuffer><c path="peote.view.UniformBufferDisplay"/></uniformBuffer>
		<uniformBufferFB><c path="peote.view.UniformBufferDisplay"/></uniformBufferFB>
		<uniformBufferViewFB><c path="peote.view.UniformBufferView"/></uniformBufferViewFB>
		<fbTexture expr="null">
			<c path="peote.view.Texture"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</fbTexture>
		<isIn public="1" get="inline" set="null" line="138">
			<f a="peoteView">
				<c path="peote.view.PeoteView"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true is this display is inside the renderlist of a peoteView.
		@param peoteView PeoteView instance</haxe_doc>
		</isIn>
		<addToPeoteView public="1" set="method" line="148">
			<f a="peoteView:?atDisplay:?addBefore" v="::false">
				<c path="peote.view.PeoteView"/>
				<c path="peote.view.Display"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ addBefore : false }</e></m></meta>
			<haxe_doc>Adds this display to the RenderList of a PeoteView.
		Can be also used to change the order (relative to another display)if it's already added.
		@param peoteView PeoteView instance
		@param atDisplay (optional) to add or move before or after another display in the RenderList (by default at start or at end)
		@param addBefore (optional) if 'true' it's added before another display or at start of the Renderlist (by default it's added after atDisplay or at end)</haxe_doc>
		</addToPeoteView>
		<removeFromPeoteView public="1" set="method" line="167">
			<f a="peoteView">
				<c path="peote.view.PeoteView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes this display from the renderlist of a peoteView.
		@param peoteView PeoteView instance</haxe_doc>
		</removeFromPeoteView>
		<addToPeoteViewFramebuffer public="1" set="method" line="184">
			<f a="peoteView:?atDisplay:?addBefore" v="::false">
				<c path="peote.view.PeoteView"/>
				<c path="peote.view.Display"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ addBefore : false }</e></m></meta>
			<haxe_doc>Adds this display to the hidden framebuffer RenderList (what only render to textures) of a PeoteView.
		Can be also used to change the order (relative to another display) if it's already added.
		@param peoteView PeoteView instance
		@param atDisplay (optional) to add or move before or after another display in the framebuffer RenderList (by default at start or at end)
		@param addBefore (optional) if 'true' it's added before another display or at start of the framebuffer Renderlist (by default it's added after atDisplay or at end)</haxe_doc>
		</addToPeoteViewFramebuffer>
		<removeFromPeoteViewFramebuffer public="1" set="method" line="203">
			<f a="peoteView">
				<c path="peote.view.PeoteView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes this display from the hidden framebuffer RenderList (what only render to textures) of a peoteView.
		@param peoteView PeoteView instance</haxe_doc>
		</removeFromPeoteViewFramebuffer>
		<swapDisplay public="1" set="method" line="217">
			<f a="display">
				<c path="peote.view.Display"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swaps the order of this Display instances with another one inside the RenderList.
		@param  display Display instance</haxe_doc>
		</swapDisplay>
		<swapPrograms public="1" set="method" line="228">
			<f a="program:programToSwapWith">
				<c path="peote.view.Program"/>
				<c path="peote.view.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swaps the order of two Programs inside the RenderList.
		@param  program Program instance
		@param  programToSwapWith Program instance to swap with</haxe_doc>
		</swapPrograms>
		<setNewGLContext set="method" line="233"><f a="newGl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></setNewGLContext>
		<clearOldGLContext get="inline" set="null" line="255"><f a=""><x path="Void"/></f></clearOldGLContext>
		<hasProgram public="1" get="inline" set="null" line="271">
			<f a="program">
				<c path="peote.view.Program"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if a Program is added to the RenderList of this Display.
		@param program Program instance to check for</haxe_doc>
		</hasProgram>
		<addProgram public="1" set="method" line="281">
			<f a="program:?atProgram:?addBefore" v="::false">
				<c path="peote.view.Program"/>
				<c path="peote.view.Program"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ addBefore : false }</e></m></meta>
			<haxe_doc>Adds a Program to the RenderList of this Display.
		Can be also used to change the order relative to another program if it's already added.
		@param program Program instance to add into the RenderList or to change it's order
		@param atProgram (optional) to add or move the program before or after another program in the Renderlist (by default it's added at start or end)
		@param addBefore (optional) if 'true' it's added before another program or at start of the Renderlist (by default it's added after atProgram or at end of the list)</haxe_doc>
		</addProgram>
		<removeProgram public="1" set="method" line="290">
			<f a="program">
				<c path="peote.view.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a Program instance from the RenderList.
		@param program Program instance to remove</haxe_doc>
		</removeProgram>
		<setFramebuffer public="1" set="method" line="303">
			<f a="texture:?textureSlot:?peoteView">
				<c path="peote.view.Texture"/>
				<x path="Int"/>
				<c path="peote.view.PeoteView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a Texture to use as a framebuffer for renderToTexture()
		@param texture Texture instance to render into
		@param textureSlot number of texture-slot to render into (can be changed by set the 'framebufferTextureSlot' property)
		@param peoteView optional parameter that is need if the display not already added to a RenderList</haxe_doc>
		</setFramebuffer>
		<removeFramebuffer public="1" set="method" line="326">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears the framebuffer for renderToTexture()</haxe_doc>
		</removeFramebuffer>
		<framebufferTextureSlot public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</framebufferTextureSlot>
		<renderFramebufferEnabled public="1" set="accessor" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</renderFramebufferEnabled>
		<set_renderFramebufferEnabled get="inline" set="null" line="336"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_renderFramebufferEnabled>
		<_renderFramebufferEnabled expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</_renderFramebufferEnabled>
		<renderFramebufferSkipFrames public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</renderFramebufferSkipFrames>
		<renderFramebufferFrame expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</renderFramebufferFrame>
		<isPointInside public="1" get="inline" set="null" line="355">
			<f a="px:py:?peoteView" v="::null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="peote.view.PeoteView"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ peoteView : null }</e></m></meta>
			<haxe_doc>Gives true if a point at global screenposition px and py is inside the Display-area.
		@param px global x-position
		@param py global y-position
		@param peoteView (optional) if not already added to a peoteView you can set one here to include it's zoom and offset into calculation</haxe_doc>
		</isPointInside>
		<globalX public="1" get="inline" set="null" line="369">
			<f a="localX:?peoteView" v=":null">
				<x path="Float"/>
				<c path="peote.view.PeoteView"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ peoteView : null }</e></m></meta>
			<haxe_doc>Converts a local x-position from display-coordinates to the correspondending global screen ones.
		@param localX x-position inside of the display
		@param peoteView (optional) if not already added to a peoteView you can set one here to include it's zoom and offset into calculation</haxe_doc>
		</globalX>
		<localX public="1" get="inline" set="null" line="380">
			<f a="globalX:?peoteView" v=":null">
				<x path="Float"/>
				<c path="peote.view.PeoteView"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ peoteView : null }</e></m></meta>
			<haxe_doc>Converts a global x-position from screen-coordinates to the correspondending local display ones.
		@param globalX x-position at screen
		@param peoteView (optional) if not already added to a peoteView you can set one here to include it's zoom and offset into calculation</haxe_doc>
		</localX>
		<globalY public="1" get="inline" set="null" line="391">
			<f a="localY:?peoteView" v=":null">
				<x path="Float"/>
				<c path="peote.view.PeoteView"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ peoteView : null }</e></m></meta>
			<haxe_doc>Converts a local y-position from display-coordinates to the correspondending global screen ones.
		@param localY y-position inside of the display
		@param peoteView (optional) if not already added to a peoteView you can set one here to include it's zoom and offset into calculation</haxe_doc>
		</globalY>
		<localY public="1" get="inline" set="null" line="402">
			<f a="globalY:?peoteView" v=":null">
				<x path="Float"/>
				<c path="peote.view.PeoteView"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ peoteView : null }</e></m></meta>
			<haxe_doc>Converts a global y-position from screen-coordinates to the correspondending local display ones.
		@param globalY y-position at screen
		@param peoteView (optional) if not already added to a peoteView you can set one here to include it's zoom and offset into calculation</haxe_doc>
		</localY>
		<glScissor get="inline" set="null" line="413"><f a="gl:w:h:xo:yo:xz:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></glScissor>
		<programListItem><c path="peote.view.utils.RenderListItem_peote_view_Program"/></programListItem>
		<render get="inline" set="null" line="433"><f a="peoteView">
	<c path="peote.view.PeoteView"/>
	<x path="Void"/>
</f></render>
		<renderToTexture public="1" get="inline" set="null" line="465">
			<f a="peoteView:?textureSlot">
				<c path="peote.view.PeoteView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders the content of this Display into a texture.
		@param peoteView PeoteView instance
		@param slot (0 by default) the image-slot inside of the texture (if the framebuffer texture can contain more then one)</haxe_doc>
		</renderToTexture>
		<renderFramebuffer get="inline" set="null" line="468"><f a="peoteView">
	<c path="peote.view.PeoteView"/>
	<x path="Void"/>
</f></renderFramebuffer>
		<pick get="inline" set="null" line="488">
			<f a="xOff:yOff:peoteView:program:?toElement" v="::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<c path="peote.view.PeoteView"/>
				<c path="peote.view.Program"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toElement : -1 }</e></m></meta>
		</pick>
		<new public="1" set="method" line="117">
			<f a="x:y:width:height:?color" v="::::0x00000000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="peote.view.Color"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : 0x00000000 }</e></m></meta>
			<haxe_doc>A Display is an rectangular area inside of PeoteView where display objects can be zoomed and shifted inside of.
		It can contain one or more Programs to render.
		@param x x-position of the upper left corner
		@param y y-position of the upper left corner
		@param width horizontal size of the display
		@param height vertical size of the display
		@param color background color (no background by default or if it's transparency is 0)</haxe_doc>
		</new>
		<meta><m n=":allow"><e>peote.view</e></m></meta>
	</class>
	<abstract path="peote.view.Mask" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Mask.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="peote.view._Mask.Mask_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Mask.hx" private="1" module="peote.view.Mask" final="1">
	<OFF public="1" get="inline" set="null" expr="0" line="5" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>0</e></m></meta>
	</OFF>
	<USE public="1" get="inline" set="null" expr="1" line="6" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</USE>
	<DRAW public="1" get="inline" set="null" expr="2" line="7" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</DRAW>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="peote.view._Mask.Mask_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Mask.hx" private="1" module="peote.view.Mask" final="1">
		<OFF public="1" get="inline" set="null" expr="0" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</OFF>
		<USE public="1" get="inline" set="null" expr="1" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</USE>
		<DRAW public="1" get="inline" set="null" expr="2" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DRAW>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="peote.view.GLTexture" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><t path="lime.graphics.opengl.GLTexture"/></typedef>
	<typedef path="peote.view.GLFramebuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><t path="lime.graphics.opengl.GLFramebuffer"/></typedef>
	<typedef path="peote.view.GLProgram" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><x path="lime.graphics.opengl.GLProgram"/></typedef>
	<typedef path="peote.view.GLShader" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><x path="lime.graphics.opengl.GLShader"/></typedef>
	<typedef path="peote.view.GLUniformLocation" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><t path="lime.graphics.opengl.GLUniformLocation"/></typedef>
	<typedef path="peote.view.GLBuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><t path="lime.graphics.opengl.GLBuffer"/></typedef>
	<typedef path="peote.view.GLVertexArrayObject" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><t path="lime.graphics.opengl.GLVertexArrayObject"/></typedef>
	<typedef path="peote.view.GLRenderbuffer" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><t path="lime.graphics.opengl.GLRenderbuffer"/></typedef>
	<typedef path="peote.view.LimeGLRenderContext" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><x path="lime.graphics.OpenGLRenderContext"/></typedef>
	<abstract path="peote.view.PeoteGL" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx">
		<from>
			<icast><t path="peote.view.LimeGLRenderContext"/></icast>
			<icast field="fromRenderContext"><c path="lime.graphics.RenderContext"/></icast>
		</from>
		<this><t path="peote.view.LimeGLRenderContext"/></this>
		<to><icast><t path="peote.view.LimeGLRenderContext"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="peote.view._PeoteGL.PeoteGL_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" private="1" module="peote.view.PeoteGL" final="1">
	<texSubImage2D public="1" get="inline" set="null" line="77" static="1"><f a="this:target:level:x:y:width:height:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Void"/>
</f></texSubImage2D>
	<texSubImage2D_Float public="1" get="inline" set="null" line="80" static="1"><f a="this:target:level:x:y:width:height:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
	<x path="Void"/>
</f></texSubImage2D_Float>
	<readPixels public="1" get="inline" set="null" line="84" static="1"><f a="this:x:y:w:h:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Void"/>
</f></readPixels>
	<readPixels_Int32 public="1" get="inline" set="null" line="87" static="1"><f a="this:x:y:w:h:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
	<x path="Void"/>
</f></readPixels_Int32>
	<fromRenderContext set="method" line="107" static="1">
		<f a="context">
			<c path="lime.graphics.RenderContext"/>
			<x path="peote.view.PeoteGL"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRenderContext>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="peote.view._PeoteGL.PeoteGL_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" private="1" module="peote.view.PeoteGL" final="1">
		<texSubImage2D public="1" get="inline" set="null" line="77" static="1"><f a="this:target:level:x:y:width:height:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Void"/>
</f></texSubImage2D>
		<texSubImage2D_Float public="1" get="inline" set="null" line="80" static="1"><f a="this:target:level:x:y:width:height:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
	<x path="Void"/>
</f></texSubImage2D_Float>
		<readPixels public="1" get="inline" set="null" line="84" static="1"><f a="this:x:y:w:h:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Void"/>
</f></readPixels>
		<readPixels_Int32 public="1" get="inline" set="null" line="87" static="1"><f a="this:x:y:w:h:format:type:data">
	<t path="peote.view.LimeGLRenderContext"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
	<x path="Void"/>
</f></readPixels_Int32>
		<fromRenderContext set="method" line="107" static="1">
			<f a="context">
				<c path="lime.graphics.RenderContext"/>
				<x path="peote.view.PeoteGL"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRenderContext>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="peote.view.Version" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL">
		<isES3 set="accessor" expr="false" line="199" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isES3>
		<set_isES3 get="inline" set="null" line="200" static="1"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isES3>
		<isUBO get="inline" set="null" expr="false" line="216" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isUBO>
		<isINSTANCED get="inline" set="null" expr="false" line="221" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isINSTANCED>
		<isVAO get="inline" set="null" expr="false" line="226" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isVAO>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>peote.view</e></m>
		</meta>
	</class>
	<class path="peote.view.Precision" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL">
		<VertexFloat expr="{ high : 0, medium : 0, low : 0 }" line="234" static="1">
			<t path="peote.view.PrecType"/>
			<meta><m n=":value"><e>{ high : 0, medium : 0, low : 0 }</e></m></meta>
		</VertexFloat>
		<VertexInt expr="{ high : 0, medium : 0, low : 0 }" line="235" static="1">
			<t path="peote.view.PrecType"/>
			<meta><m n=":value"><e>{ high : 0, medium : 0, low : 0 }</e></m></meta>
		</VertexInt>
		<VertexSampler expr="{ high : 0, medium : 0, low : 0 }" line="236" static="1">
			<t path="peote.view.PrecType"/>
			<meta><m n=":value"><e>{ high : 0, medium : 0, low : 0 }</e></m></meta>
		</VertexSampler>
		<FragmentFloat expr="{ high : 0, medium : 0, low : 0 }" line="237" static="1">
			<t path="peote.view.PrecType"/>
			<meta><m n=":value"><e>{ high : 0, medium : 0, low : 0 }</e></m></meta>
		</FragmentFloat>
		<FragmentInt expr="{ high : 0, medium : 0, low : 0 }" line="238" static="1">
			<t path="peote.view.PrecType"/>
			<meta><m n=":value"><e>{ high : 0, medium : 0, low : 0 }</e></m></meta>
		</FragmentInt>
		<FragmentSampler expr="{ high : 0, medium : 0, low : 0 }" line="239" static="1">
			<t path="peote.view.PrecType"/>
			<meta><m n=":value"><e>{ high : 0, medium : 0, low : 0 }</e></m></meta>
		</FragmentSampler>
		<_init public="1" get="inline" set="null" line="241" static="1"><f a="gl:shaderType:t">
	<x path="peote.view.PeoteGL"/>
	<x path="Int"/>
	<t path="peote.view.PrecType"/>
	<x path="Void"/>
</f></_init>
		<init public="1" get="inline" set="null" line="250" static="1"><f a="gl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></init>
		<highest public="1" get="inline" set="null" line="259" static="1"><f a="t:p">
	<t path="peote.view.PrecType"/>
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></highest>
		<availVertexFloat public="1" get="inline" set="null" line="266" static="1"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></availVertexFloat>
		<availVertexInt public="1" get="inline" set="null" line="267" static="1"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></availVertexInt>
		<availVertexSampler public="1" get="inline" set="null" line="268" static="1"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></availVertexSampler>
		<availFragmentFloat public="1" get="inline" set="null" line="269" static="1"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></availFragmentFloat>
		<availFragmentInt public="1" get="inline" set="null" line="270" static="1"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></availFragmentInt>
		<availFragmentSampler public="1" get="inline" set="null" line="271" static="1"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></availFragmentSampler>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>peote.view</e></m>
		</meta>
	</class>
	<typedef path="peote.view.PrecType" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteGL.hx" module="peote.view.PeoteGL"><a>
	<medium><x path="Int"/></medium>
	<low><x path="Int"/></low>
	<high><x path="Int"/></high>
</a></typedef>
	<class path="peote.view.PeoteView" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/PeoteView.hx">
		<gl public="1" set="null"><x path="peote.view.PeoteGL"/></gl>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<color public="1" set="accessor" expr="0x000000FF">
			<x path="peote.view.Color"/>
			<meta><m n=":value"><e>0x000000FF</e></m></meta>
		</color>
		<set_color get="inline" set="null" line="32"><f a="c">
	<x path="peote.view.Color"/>
	<x path="peote.view.Color"/>
</f></set_color>
		<red expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</red>
		<green expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</green>
		<blue expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</blue>
		<alpha expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</alpha>
		<colorState expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</colorState>
		<glStateAlpha expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</glStateAlpha>
		<glStateDepth expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</glStateDepth>
		<maskState expr="Mask.OFF">
			<x path="peote.view.Mask"/>
			<meta><m n=":value"><e>Mask.OFF</e></m></meta>
		</maskState>
		<maxTextureImageUnits><x path="Int"/></maxTextureImageUnits>
		<glStateTexture><x path="haxe.ds.Vector"><t path="peote.view.GLTexture"/></x></glStateTexture>
		<isTextureStateChange public="1" set="method" line="51"><f a="activeTextureUnit:texture">
	<x path="Int"/>
	<c path="peote.view.Texture"/>
	<x path="Bool"/>
</f></isTextureStateChange>
		<xz public="1" set="null" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</xz>
		<yz public="1" set="null" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</yz>
		<zoom public="1" set="accessor" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</zoom>
		<set_zoom public="1" get="inline" set="null" line="69"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_zoom>
		<xZoom public="1" set="accessor" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</xZoom>
		<set_xZoom public="1" get="inline" set="null" line="76"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xZoom>
		<yZoom public="1" set="accessor" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</yZoom>
		<set_yZoom public="1" get="inline" set="null" line="82"><f a="z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_yZoom>
		<xOffset public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</xOffset>
		<set_xOffset public="1" get="inline" set="null" line="88"><f a="xo">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xOffset>
		<yOffset public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</yOffset>
		<set_yOffset public="1" get="inline" set="null" line="93"><f a="yo">
	<x path="Float"/>
	<x path="Float"/>
</f></set_yOffset>
		<displayList><c path="peote.view.utils.RenderList_peote_view_Display"/></displayList>
		<framebufferDisplayList><c path="peote.view.utils.RenderList_peote_view_Display"/></framebufferDisplayList>
		<background><c path="peote.view.utils.Background"/></background>
		<uniformBuffer><c path="peote.view.UniformBufferView"/></uniformBuffer>
		<isRun public="1" set="null" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isRun>
		<startTime expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</startTime>
		<stopTime expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</stopTime>
		<speed expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</speed>
		<time public="1" get="accessor" set="accessor"><x path="Float"/></time>
		<get_time public="1" get="inline" set="null" line="111"><f a=""><x path="Float"/></f></get_time>
		<set_time public="1" get="inline" set="null" line="115"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></set_time>
		<start public="1" set="method" line="120"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method" line="127"><f a=""><x path="Void"/></f></stop>
		<hasDisplay public="1" get="inline" set="null" line="200"><f a="display">
	<c path="peote.view.Display"/>
	<x path="Bool"/>
</f></hasDisplay>
		<addDisplay public="1" set="method" line="210">
			<f a="display:?atDisplay:?addBefore" v="::false">
				<c path="peote.view.Display"/>
				<c path="peote.view.Display"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ addBefore : false }</e></m></meta>
			<haxe_doc>Adds an Display instance to the RenderList.
		Can be also used to change the order (relative to another display) if it's already added.
		@param  display Display instance to add into the RenderList or to change it's order
		@param  atDisplay (optional) to add or move the display before or after another display in the Renderlist (at default it adds at start or end)
		@param  addBefore (optional) set to `true` to add the display before another display or at start of the Renderlist (at default it adds after atDisplay or at end of the list)</haxe_doc>
		</addDisplay>
		<removeDisplay public="1" set="method" line="218">
			<f a="display">
				<c path="peote.view.Display"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an Display instance from the RenderList.</haxe_doc>
		</removeDisplay>
		<swapDisplays public="1" set="method" line="228">
			<f a="display1:display2">
				<c path="peote.view.Display"/>
				<c path="peote.view.Display"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swaps two Display instances inside the RenderList.
		@param  display1 first Display instance
		@param  display2 second Display instance</haxe_doc>
		</swapDisplays>
		<addFramebufferDisplay public="1" set="method" line="240">
			<f a="display:?atDisplay:?addBefore" v="::false">
				<c path="peote.view.Display"/>
				<c path="peote.view.Display"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ addBefore : false }</e></m></meta>
			<haxe_doc>Adds an Display instance to the hidden framebuffer RenderList (what only render to textures).
		Can be also used to change the order (relative to another display) if it's already added.
		@param  display Display instance to add into the RenderList or to change it's order
		@param  atDisplay (optional) to add or move the display before or after another display in the Renderlist (at default it adds at start or end)
		@param  addBefore (optional) set to `true` to add the display before another display or at start of the Renderlist (at default it adds after atDisplay or at end of the list)</haxe_doc>
		</addFramebufferDisplay>
		<removeFramebufferDisplay public="1" set="method" line="248">
			<f a="display">
				<c path="peote.view.Display"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an Display instance from the hidden framebuffer RenderList (what only render to textures).</haxe_doc>
		</removeFramebufferDisplay>
		<setNewGLContext public="1" set="method" line="257">
			<f a="newGl">
				<x path="peote.view.PeoteGL"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the gl-context of the View and all contained Displays
		@param  newGl new opengl context</haxe_doc>
		</setNewGLContext>
		<clearOldGLContext set="method" line="274"><f a=""><x path="Void"/></f></clearOldGLContext>
		<resize public="1" set="method" line="283">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This function need to call if window-size is changed</haxe_doc>
		</resize>
		<globalX public="1" get="inline" set="null" line="295">
			<f a="localX">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a local x-position from view-coordinates to the correspondending global screen ones.
		@param localX x-position inside of the view</haxe_doc>
		</globalX>
		<localX public="1" get="inline" set="null" line="301">
			<f a="globalX">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a global x-position from screen-coordinates to the correspondending local view ones.
		@param globalX x-position at screen</haxe_doc>
		</localX>
		<globalY public="1" get="inline" set="null" line="307">
			<f a="localY">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a local y-position from view-coordinates to the correspondending global screen ones.
		@param localY y-position inside of the view</haxe_doc>
		</globalY>
		<localY public="1" get="inline" set="null" line="313">
			<f a="globalY">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a global y-position from screen-coordinates to the correspondending local view ones.
		@param globalY y-position at screen</haxe_doc>
		</localY>
		<pickFB><t path="peote.view.GLFramebuffer"/></pickFB>
		<pickTexture><t path="peote.view.GLTexture"/></pickTexture>
		<pickDepthBuffer><t path="lime.graphics.opengl.GLRenderbuffer"/></pickDepthBuffer>
		<pickInt32><x path="haxe.io.Int32Array"/></pickInt32>
		<pickUInt8><x path="haxe.io.UInt8Array"/></pickUInt8>
		<initGlPicking get="inline" set="null" line="326"><f a=""><x path="Void"/></f></initGlPicking>
		<getElementAt public="1" set="method" line="346">
			<f a="posX:posY:display:program">
				<x path="Float"/>
				<x path="Float"/>
				<c path="peote.view.Display"/>
				<c path="peote.view.Program"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Gets the Element-Index at a defined position on screen
		@param  posX x position in pixel
		@param  posY y position in pixel
		@param  display Display that contains the Program
		@param  program Program that contains the Buffer with Elements</haxe_doc>
		</getElementAt>
		<getAllElementsAt public="1" set="method" line="361">
			<f a="posX:posY:display:program">
				<x path="Float"/>
				<x path="Float"/>
				<c path="peote.view.Display"/>
				<c path="peote.view.Program"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Gets an array of Element-Indices at a defined position on screen.
		@param  posX x position in pixel
		@param  posY y position in pixel
		@param  display Display that contains the Program
		@param  program Program that contains the Buffer with Elements</haxe_doc>
		</getAllElementsAt>
		<pick set="method" line="374"><f a="posX:posY:display:program:toElement">
	<x path="Float"/>
	<x path="Float"/>
	<c path="peote.view.Display"/>
	<c path="peote.view.Program"/>
	<x path="Int"/>
	<x path="Int"/>
</f></pick>
		<setFramebuffer public="1" set="method" line="424">
			<f a="display:texture:?textureSlot">
				<c path="peote.view.Display"/>
				<c path="peote.view.Texture"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind a Texture to a Display to use as a framebuffer for renderToTexture()
		@param display Display
		@param texture Texture instance to render into
		@param textureSlot number of texture-slot to render into (can be changed by set the 'framebufferTextureSlot' property)</haxe_doc>
		</setFramebuffer>
		<renderToTexture public="1" set="method" line="434">
			<f a="display:?textureSlot">
				<c path="peote.view.Display"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders the content of a Display into a texture.
		@param display Display instance
		@param textureSlot number of texture-slot to render into (can be changed by set the 'framebufferTextureSlot' display property)</haxe_doc>
		</renderToTexture>
		<_renderToTexture get="inline" set="null" line="439"><f a="display:?textureSlot">
	<c path="peote.view.Display"/>
	<x path="Int"/>
	<x path="Void"/>
</f></_renderToTexture>
		<initGLViewport get="inline" set="null" line="499"><f a="w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initGLViewport>
		<setColor get="inline" set="null" line="529"><f a="enabled">
	<x path="Bool"/>
	<x path="Void"/>
</f></setColor>
		<setGLDepth get="inline" set="null" line="537"><f a="enabled">
	<x path="Bool"/>
	<x path="Void"/>
</f></setGLDepth>
		<setGLAlpha get="inline" set="null" line="548"><f a="enabled">
	<x path="Bool"/>
	<x path="Void"/>
</f></setGLAlpha>
		<setMask get="inline" set="null" line="559"><f a="mask:clearMask">
	<x path="peote.view.Mask"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMask>
		<displayListItem><c path="peote.view.utils.RenderListItem_peote_view_Display"/></displayListItem>
		<renderFramebuffer get="inline" set="null" line="590">
			<f a="?context" v="null">
				<c path="lime.graphics.RenderContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ context : null }</e></m></meta>
		</renderFramebuffer>
		<render public="1" set="method" line="607">
			<f a="?context" v="null">
				<c path="lime.graphics.RenderContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ context : null }</e></m></meta>
		</render>
		<renderPart public="1" get="inline" set="null" line="615"><f a=""><x path="Void"/></f></renderPart>
		<new public="1" set="method" line="134">
			<f a="window:?color:?registerEvents" v=":0x000000FF:true">
				<c path="lime.ui.Window"/>
				<x path="peote.view.Color"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ registerEvents : true, color : 0x000000FF }</e></m></meta>
		</new>
		<meta><m n=":allow"><e>peote.view</e></m></meta>
	</class>
	<class path="peote.view.ActiveTexture" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Program.hx" module="peote.view.Program">
		<unit public="1"><x path="Int"/></unit>
		<texture public="1"><c path="peote.view.Texture"/></texture>
		<uniformLoc public="1"><t path="peote.view.GLUniformLocation"/></uniformLoc>
		<new public="1" set="method" line="20"><f a="unit:texture:uniformLoc">
	<x path="Int"/>
	<c path="peote.view.Texture"/>
	<t path="peote.view.GLUniformLocation"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="peote.view.Program" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Program.hx">
		<colorEnabled public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</colorEnabled>
		<alphaEnabled public="1"><x path="Bool"/></alphaEnabled>
		<zIndexEnabled public="1"><x path="Bool"/></zIndexEnabled>
		<mask public="1" expr="Mask.OFF">
			<x path="peote.view.Mask"/>
			<meta><m n=":value"><e>Mask.OFF</e></m></meta>
		</mask>
		<clearMask public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</clearMask>
		<autoUpdateTextures public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</autoUpdateTextures>
		<isVisible public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isVisible>
		<show public="1" get="inline" set="null" line="39"><f a=""><x path="Void"/></f></show>
		<hide public="1" get="inline" set="null" line="40"><f a=""><x path="Void"/></f></hide>
		<displays expr="new Array&lt;Display&gt;()">
			<c path="Array"><c path="peote.view.Display"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Display>()]]></e></m></meta>
		</displays>
		<gl expr="null">
			<x path="peote.view.PeoteGL"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</gl>
		<glProgram expr="null">
			<t path="peote.view.GLProgram"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glProgram>
		<glProgramPicking expr="null">
			<t path="peote.view.GLProgram"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glProgramPicking>
		<glVertexShader expr="null">
			<t path="peote.view.GLShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glVertexShader>
		<glFragmentShader expr="null">
			<t path="peote.view.GLShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glFragmentShader>
		<glVertexShaderPicking expr="null">
			<t path="peote.view.GLShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glVertexShaderPicking>
		<glFragmentShaderPicking expr="null">
			<t path="peote.view.GLShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glFragmentShaderPicking>
		<buffer public="1" set="null"><c path="peote.view.BufferInterface"/></buffer>
		<glShaderConfig expr="{ isPICKING : false, isES3 : false, isINSTANCED : false, isUBO : false, IN : &quot;attribute&quot;, VARIN : &quot;varying&quot;, VAROUT : &quot;varying&quot;, hasTEXTURES : false, hasTEXTURE_FUNCTIONS : false, hasFRAGMENT_INJECTION : false, FRAGMENT_PROGRAM_UNIFORMS : &quot;&quot;, FRAGMENT_CALC_LAYER : &quot;&quot;, TEXTURES : [], TEXTURE_DEFAULTS : [], isDISCARD : true, DISCARD : &quot;0.0&quot;, isPIXELSNAPPING : false, PIXELDIVISOR : &quot;1.0&quot;, VERTEX_FLOAT_PRECISION : null, VERTEX_INT_PRECISION : null, VERTEX_SAMPLER_PRECISION : null, FRAGMENT_FLOAT_PRECISION : null, FRAGMENT_INT_PRECISION : null, FRAGMENT_SAMPLER_PRECISION : null, VERTEX_INJECTION : &quot;&quot;, FRAGMENT_INJECTION : &quot;&quot;, SIZE_FORMULA : null, POS_FORMULA : null, ROTZ_FORMULA : null, PIVOT_FORMULA : null, FORMULA_VARYINGS : { }, FORMULA_CONSTANTS : { }, FRAGMENT_EXTENSIONS : [] }">
			<a>
				<isUBO><x path="Bool"/></isUBO>
				<isPIXELSNAPPING><x path="Bool"/></isPIXELSNAPPING>
				<isPICKING><x path="Bool"/></isPICKING>
				<isINSTANCED><x path="Bool"/></isINSTANCED>
				<isES3><x path="Bool"/></isES3>
				<isDISCARD><x path="Bool"/></isDISCARD>
				<hasTEXTURE_FUNCTIONS><x path="Bool"/></hasTEXTURE_FUNCTIONS>
				<hasTEXTURES><x path="Bool"/></hasTEXTURES>
				<hasFRAGMENT_INJECTION><x path="Bool"/></hasFRAGMENT_INJECTION>
				<VERTEX_SAMPLER_PRECISION><x path="Null"><c path="String"/></x></VERTEX_SAMPLER_PRECISION>
				<VERTEX_INT_PRECISION><x path="Null"><c path="String"/></x></VERTEX_INT_PRECISION>
				<VERTEX_INJECTION><c path="String"/></VERTEX_INJECTION>
				<VERTEX_FLOAT_PRECISION><x path="Null"><c path="String"/></x></VERTEX_FLOAT_PRECISION>
				<VAROUT><c path="String"/></VAROUT>
				<VARIN><c path="String"/></VARIN>
				<TEXTURE_DEFAULTS><c path="Array"><a>
	<LAYER><x path="Int"/></LAYER>
	<DEFAULT_VALUE><c path="String"/></DEFAULT_VALUE>
</a></c></TEXTURE_DEFAULTS>
				<TEXTURES><c path="Array"><a>
	<USED_ID><x path="Bool"/></USED_ID>
	<USED><x path="Bool"/></USED>
	<UNITS><c path="Array"><a>
	<UNIT_VALUE><c path="String"/></UNIT_VALUE>
	<TILES_Y><c path="String"/></TILES_Y>
	<TILES_X><c path="String"/></TILES_X>
	<TEXTURE_WIDTH><c path="String"/></TEXTURE_WIDTH>
	<TEXTURE_HEIGHT><c path="String"/></TEXTURE_HEIGHT>
	<TEXTURE><c path="String"/></TEXTURE>
	<SLOT_WIDTH><c path="String"/></SLOT_WIDTH>
	<SLOT_HEIGHT><c path="String"/></SLOT_HEIGHT>
	<SLOTS_Y><c path="String"/></SLOTS_Y>
	<SLOTS_X><c path="String"/></SLOTS_X>
	<SLOTS_WIDTH><c path="String"/></SLOTS_WIDTH>
	<SLOTS_HEIGHT><c path="String"/></SLOTS_HEIGHT>
	<LAST><x path="Bool"/></LAST>
	<FIRST><x path="Bool"/></FIRST>
</a></c></UNITS>
	<LAYER><x path="Int"/></LAYER>
</a></c></TEXTURES>
				<SIZE_FORMULA><c path="String"/></SIZE_FORMULA>
				<ROTZ_FORMULA><c path="String"/></ROTZ_FORMULA>
				<POS_FORMULA><c path="String"/></POS_FORMULA>
				<PIXELDIVISOR><c path="String"/></PIXELDIVISOR>
				<PIVOT_FORMULA><c path="String"/></PIVOT_FORMULA>
				<IN><c path="String"/></IN>
				<FRAGMENT_SAMPLER_PRECISION><x path="Null"><c path="String"/></x></FRAGMENT_SAMPLER_PRECISION>
				<FRAGMENT_PROGRAM_UNIFORMS><c path="String"/></FRAGMENT_PROGRAM_UNIFORMS>
				<FRAGMENT_INT_PRECISION><x path="Null"><c path="String"/></x></FRAGMENT_INT_PRECISION>
				<FRAGMENT_INJECTION><c path="String"/></FRAGMENT_INJECTION>
				<FRAGMENT_FLOAT_PRECISION><x path="Null"><c path="String"/></x></FRAGMENT_FLOAT_PRECISION>
				<FRAGMENT_EXTENSIONS><c path="Array"><a><EXTENSION><c path="String"/></EXTENSION></a></c></FRAGMENT_EXTENSIONS>
				<FRAGMENT_CALC_LAYER><c path="String"/></FRAGMENT_CALC_LAYER>
				<FORMULA_VARYINGS><a/></FORMULA_VARYINGS>
				<FORMULA_CONSTANTS><a/></FORMULA_CONSTANTS>
				<DISCARD><c path="String"/></DISCARD>
			</a>
			<meta><m n=":value"><e>{ isPICKING : false, isES3 : false, isINSTANCED : false, isUBO : false, IN : "attribute", VARIN : "varying", VAROUT : "varying", hasTEXTURES : false, hasTEXTURE_FUNCTIONS : false, hasFRAGMENT_INJECTION : false, FRAGMENT_PROGRAM_UNIFORMS : "", FRAGMENT_CALC_LAYER : "", TEXTURES : [], TEXTURE_DEFAULTS : [], isDISCARD : true, DISCARD : "0.0", isPIXELSNAPPING : false, PIXELDIVISOR : "1.0", VERTEX_FLOAT_PRECISION : null, VERTEX_INT_PRECISION : null, VERTEX_SAMPLER_PRECISION : null, FRAGMENT_FLOAT_PRECISION : null, FRAGMENT_INT_PRECISION : null, FRAGMENT_SAMPLER_PRECISION : null, VERTEX_INJECTION : "", FRAGMENT_INJECTION : "", SIZE_FORMULA : null, POS_FORMULA : null, ROTZ_FORMULA : null, PIVOT_FORMULA : null, FORMULA_VARYINGS : { }, FORMULA_CONSTANTS : { }, FRAGMENT_EXTENSIONS : [] }</e></m></meta>
		</glShaderConfig>
		<textureList expr="new RenderList&lt;ActiveTexture&gt;(new Map&lt;ActiveTexture,RenderListItem&lt;ActiveTexture&gt;&gt;())">
			<c path="peote.view.utils.RenderList_peote_view_ActiveTexture"/>
			<meta><m n=":value"><e><![CDATA[new RenderList<ActiveTexture>(new Map<ActiveTexture,RenderListItem<ActiveTexture>>())]]></e></m></meta>
		</textureList>
		<textureListPicking expr="new RenderList&lt;ActiveTexture&gt;(new Map&lt;ActiveTexture,RenderListItem&lt;ActiveTexture&gt;&gt;())">
			<c path="peote.view.utils.RenderList_peote_view_ActiveTexture"/>
			<meta><m n=":value"><e><![CDATA[new RenderList<ActiveTexture>(new Map<ActiveTexture,RenderListItem<ActiveTexture>>())]]></e></m></meta>
		</textureListPicking>
		<textureLayers expr="new IntMap&lt;Array&lt;Texture&gt;&gt;()">
			<c path="haxe.ds.IntMap"><c path="Array"><c path="peote.view.Texture"/></c></c>
			<meta><m n=":value"><e><![CDATA[new IntMap<Array<Texture>>()]]></e></m></meta>
		</textureLayers>
		<activeTextures expr="new Array&lt;Texture&gt;()">
			<c path="Array"><c path="peote.view.Texture"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Texture>()]]></e></m></meta>
		</activeTextures>
		<activeUnits expr="new Array&lt;Int&gt;()">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Int>()]]></e></m></meta>
		</activeUnits>
		<colorIdentifiers><c path="Array"><c path="String"/></c></colorIdentifiers>
		<customIdentifiers><c path="Array"><c path="String"/></c></customIdentifiers>
		<customVaryings><c path="Array"><c path="String"/></c></customVaryings>
		<textureIdentifiers><c path="Array"><c path="String"/></c></textureIdentifiers>
		<customTextureIdentifiers expr="new Array&lt;String&gt;()">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<String>()]]></e></m></meta>
		</customTextureIdentifiers>
		<textureID_Defaults expr="new Array&lt;{ var layer : Int; var value : String}&gt;()">
			<c path="Array"><a>
	<value><c path="String"/></value>
	<layer><x path="Int"/></layer>
</a></c>
			<meta><m n=":value"><e><![CDATA[new Array<{ var layer : Int; var value : String}>()]]></e></m></meta>
		</textureID_Defaults>
		<used_by_ColorFormula expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</used_by_ColorFormula>
		<usedID_by_ColorFormula expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</usedID_by_ColorFormula>
		<defaultFormulaVars><c path="haxe.ds.StringMap"><x path="peote.view.Color"/></c></defaultFormulaVars>
		<defaultColorFormula><c path="String"/></defaultColorFormula>
		<colorFormula expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</colorFormula>
		<formula expr="new StringMap&lt;String&gt;()">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new StringMap<String>()]]></e></m></meta>
		</formula>
		<formulaHasChanged expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</formulaHasChanged>
		<fragmentFloatPrecision expr="null">
			<x path="Null"><c path="String"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</fragmentFloatPrecision>
		<hasFragmentInjection expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</hasFragmentInjection>
		<isIn public="1" get="inline" set="null" line="157"><f a="display">
	<c path="peote.view.Display"/>
	<x path="Bool"/>
</f></isIn>
		<addToDisplay public="1" set="method" line="160">
			<f a="display:?atProgram:?addBefore" v="::false">
				<c path="peote.view.Display"/>
				<c path="peote.view.Program"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ addBefore : false }</e></m></meta>
		</addToDisplay>
		<removeFromDisplay public="1" set="method" line="176"><f a="display">
	<c path="peote.view.Display"/>
	<x path="Void"/>
</f></removeFromDisplay>
		<setNewGLContext get="inline" set="null" line="185"><f a="newGl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></setNewGLContext>
		<clearOldGLContext get="inline" set="null" line="228"><f a=""><x path="Void"/></f></clearOldGLContext>
		<ready expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</ready>
		<reCreateProgram get="inline" set="null" line="237"><f a=""><x path="Void"/></f></reCreateProgram>
		<hasPicking get="inline" set="null" line="243"><f a=""><x path="Bool"/></f></hasPicking>
		<deleteProgram get="inline" set="null" line="246"><f a=""><x path="Void"/></f></deleteProgram>
		<createProgram get="inline" set="null" line="257"><f a=""><x path="Void"/></f></createProgram>
		<createProg set="method" line="263">
			<f a="?isPicking" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isPicking : false }</e></m></meta>
		</createProg>
		<uRESOLUTION><t path="peote.view.GLUniformLocation"/></uRESOLUTION>
		<uZOOM><t path="peote.view.GLUniformLocation"/></uZOOM>
		<uOFFSET><t path="peote.view.GLUniformLocation"/></uOFFSET>
		<uTIME><t path="peote.view.GLUniformLocation"/></uTIME>
		<uRESOLUTION_PICK><t path="peote.view.GLUniformLocation"/></uRESOLUTION_PICK>
		<uZOOM_PICK><t path="peote.view.GLUniformLocation"/></uZOOM_PICK>
		<uOFFSET_PICK><t path="peote.view.GLUniformLocation"/></uOFFSET_PICK>
		<uTIME_PICK><t path="peote.view.GLUniformLocation"/></uTIME_PICK>
		<uniformFloatsVertex expr="null">
			<c path="Array"><c path="peote.view.UniformFloat"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</uniformFloatsVertex>
		<uniformFloatsFragment expr="null">
			<c path="Array"><c path="peote.view.UniformFloat"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</uniformFloatsFragment>
		<uniformFloats expr="new Array&lt;UniformFloat&gt;()">
			<c path="Array"><c path="peote.view.UniformFloat"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<UniformFloat>()]]></e></m></meta>
		</uniformFloats>
		<uniformFloatLocations><c path="Array"><t path="peote.view.GLUniformLocation"/></c></uniformFloatLocations>
		<uniformFloatPickLocations><c path="Array"><t path="peote.view.GLUniformLocation"/></c></uniformFloatPickLocations>
		<parseColorFormula set="method" line="361"><f a=""><x path="Void"/></f></parseColorFormula>
		<setColorFormula public="1" set="method" line="456">
			<f a="?formula:?varDefaults:?autoUpdateTextures" v="&quot;&quot;:null:">
				<c path="String"/>
				<c path="haxe.ds.StringMap"><x path="peote.view.Color"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ varDefaults : null, formula : "" }</e></m></meta>
		</setColorFormula>
		<injectIntoVertexShader public="1" set="method" line="468">
			<f a="?glslCode:?uTimeUniformEnabled:?uniformFloats:?autoUpdateTextures" v="&quot;&quot;:false:null:">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Array"><c path="peote.view.UniformFloat"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ uniformFloats : null, uTimeUniformEnabled : false, glslCode : "" }</e></m></meta>
		</injectIntoVertexShader>
		<injectIntoFragmentShader public="1" set="method" line="476">
			<f a="?glslCode:?uTimeUniformEnabled:?uniformFloats:?autoUpdateTextures" v="&quot;&quot;:false:null:">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Array"><c path="peote.view.UniformFloat"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ uniformFloats : null, uTimeUniformEnabled : false, glslCode : "" }</e></m></meta>
		</injectIntoFragmentShader>
		<generateUniformFloatsGLSL set="method" line="484"><f a="uniformFloats">
	<c path="Array"><c path="peote.view.UniformFloat"/></c>
	<c path="String"/>
</f></generateUniformFloatsGLSL>
		<accumulateUniformsFloat set="method" line="491"><f a=""><x path="Void"/></f></accumulateUniformsFloat>
		<setFormula public="1" set="method" line="509"><f a="name:newFormula:?autoUpdateTextures">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFormula>
		<parseAndResolveFormulas set="method" line="541"><f a=""><x path="Void"/></f></parseAndResolveFormulas>
		<getTextureIndexByIdentifier set="method" line="610">
			<f a="identifier:?addNew" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ addNew : true }</e></m></meta>
		</getTextureIndexByIdentifier>
		<validatePrecision set="method" line="628"><f a="precision">
	<x path="Null"><c path="String"/></x>
	<x path="Null"><c path="String"/></x>
</f></validatePrecision>
		<setFragmentFloatPrecision public="1" set="method" line="639"><f a="?precision:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFragmentFloatPrecision>
		<setFragmentIntPrecision public="1" set="method" line="644"><f a="?precision:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFragmentIntPrecision>
		<setFragmentSamplerPrecision public="1" set="method" line="649"><f a="?precision:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFragmentSamplerPrecision>
		<setVertexFloatPrecision public="1" set="method" line="654"><f a="?precision:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setVertexFloatPrecision>
		<setVertexIntPrecision public="1" set="method" line="659"><f a="?precision:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setVertexIntPrecision>
		<setVertexSamplerPrecision public="1" set="method" line="664"><f a="?precision:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setVertexSamplerPrecision>
		<snapToPixel public="1" set="method" line="670"><f a="?pixelDivisor:?autoUpdateTextures">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></snapToPixel>
		<discardAtAlpha public="1" set="method" line="682"><f a="?atAlphaValue:?autoUpdateTextures">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></discardAtAlpha>
		<setTexture public="1" set="method" line="694"><f a="texture:identifier:?autoUpdateTextures">
	<c path="peote.view.Texture"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setTexture>
		<setMultiTexture public="1" set="method" line="704"><f a="textureUnits:identifier:?autoUpdateTextures">
	<c path="Array"><c path="peote.view.Texture"/></c>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMultiTexture>
		<addTexture public="1" set="method" line="720"><f a="texture:identifier:?autoUpdateTextures">
	<c path="peote.view.Texture"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addTexture>
		<removeTexture public="1" set="method" line="738"><f a="texture:identifier:?autoUpdateTextures">
	<c path="peote.view.Texture"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeTexture>
		<removeAllTexture public="1" set="method" line="753"><f a="identifier:?autoUpdateTextures">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeAllTexture>
		<checkAutoUpdate get="inline" set="null" line="764"><f a="autoUpdateTextures">
	<x path="Null"><x path="Bool"/></x>
	<x path="Void"/>
</f></checkAutoUpdate>
		<hasTexture public="1" set="method" line="772">
			<f a="texture:?identifier" v=":null">
				<c path="peote.view.Texture"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ identifier : null }</e></m></meta>
		</hasTexture>
		<updateTextures public="1" set="method" line="787"><f a=""><x path="Void"/></f></updateTextures>
		<setActiveTextureGlIndex public="1" set="method" line="900"><f a="texture:index">
	<c path="peote.view.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setActiveTextureGlIndex>
		<textureListItem><c path="peote.view.utils.RenderListItem_peote_view_ActiveTexture"/></textureListItem>
		<render_activeTextureUnits get="inline" set="null" line="926"><f a="peoteView:textureList">
	<c path="peote.view.PeoteView"/>
	<c path="peote.view.utils.RenderList_peote_view_ActiveTexture"/>
	<x path="Void"/>
</f></render_activeTextureUnits>
		<render get="inline" set="null" line="952"><f a="peoteView:display">
	<c path="peote.view.PeoteView"/>
	<c path="peote.view.Display"/>
	<x path="Void"/>
</f></render>
		<renderFramebuffer get="inline" set="null" line="1000"><f a="peoteView:display">
	<c path="peote.view.PeoteView"/>
	<c path="peote.view.Display"/>
	<x path="Void"/>
</f></renderFramebuffer>
		<pick get="inline" set="null" line="1035"><f a="xOff:yOff:peoteView:display:toElement">
	<x path="Float"/>
	<x path="Float"/>
	<c path="peote.view.PeoteView"/>
	<c path="peote.view.Display"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pick>
		<new public="1" set="method" line="123"><f a="buffer">
	<c path="peote.view.BufferInterface"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow">
	<e>peote.view</e>
	<e>peote.ui</e>
</m></meta>
	</class>
	<typedef path="peote.view.ImgProp" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Texture.hx" module="peote.view.Texture"><a><imageSlot><x path="Int"/></imageSlot></a></typedef>
	<class path="peote.view.Texture" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/Texture.hx">
		<imageToTexture get="inline" set="null" line="258" static="1">
			<f a="gl:glTexture:x:y:w:h:image:?createMipmaps:?useFloat" v=":::::::false:false">
				<x path="peote.view.PeoteGL"/>
				<t path="peote.view.GLTexture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="peote.view.TextureData"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useFloat : false, createMipmaps : false }</e></m></meta>
		</imageToTexture>
		<gl expr="null">
			<x path="peote.view.PeoteGL"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</gl>
		<glTexture public="1" set="null" expr="null">
			<t path="peote.view.GLTexture"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glTexture>
		<framebuffer expr="null">
			<t path="peote.view.GLFramebuffer"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</framebuffer>
		<glDepthBuffer expr="null">
			<t path="peote.view.GLRenderbuffer"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</glDepthBuffer>
		<clearOnRenderInto public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</clearOnRenderInto>
		<colorChannels public="1" set="null" expr="4">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</colorChannels>
		<width public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</width>
		<height public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</height>
		<imageSlots public="1" set="null" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</imageSlots>
		<freeSlots public="1" set="null" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</freeSlots>
		<slotsX public="1" set="null" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</slotsX>
		<slotsY public="1" set="null" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</slotsY>
		<slotWidth public="1" set="null"><x path="Int"/></slotWidth>
		<slotHeight public="1" set="null"><x path="Int"/></slotHeight>
		<tilesX public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</tilesX>
		<tilesY public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</tilesY>
		<images public="1" expr="new Map&lt;TextureData,ImgProp&gt;()">
			<x path="haxe.ds.Map">
				<x path="peote.view.TextureData"/>
				<t path="peote.view.ImgProp"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<TextureData,ImgProp>()]]></e></m></meta>
		</images>
		<createMipmaps public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</createMipmaps>
		<magFilter public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</magFilter>
		<minFilter public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</minFilter>
		<useFloat public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useFloat>
		<updated expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</updated>
		<programs expr="new Array&lt;Program&gt;()">
			<c path="Array"><c path="peote.view.Program"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Program>()]]></e></m></meta>
		</programs>
		<displays expr="new Array&lt;Display&gt;()">
			<c path="Array"><c path="peote.view.Display"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Display>()]]></e></m></meta>
		</displays>
		<usedByProgram public="1" get="inline" set="null" line="75"><f a="program">
	<c path="peote.view.Program"/>
	<x path="Bool"/>
</f></usedByProgram>
		<addToProgram get="inline" set="null" line="78"><f a="program">
	<c path="peote.view.Program"/>
	<x path="Void"/>
</f></addToProgram>
		<usedByDisplay public="1" get="inline" set="null" line="87"><f a="display">
	<c path="peote.view.Display"/>
	<x path="Bool"/>
</f></usedByDisplay>
		<removeFromProgram get="inline" set="null" line="90"><f a="program">
	<c path="peote.view.Program"/>
	<x path="Void"/>
</f></removeFromProgram>
		<addToDisplay get="inline" set="null" line="97"><f a="display">
	<c path="peote.view.Display"/>
	<x path="Void"/>
</f></addToDisplay>
		<removeFromDisplay get="inline" set="null" line="107"><f a="display">
	<c path="peote.view.Display"/>
	<x path="Void"/>
</f></removeFromDisplay>
		<createFramebuffer get="inline" set="null" line="115"><f a=""><x path="Void"/></f></createFramebuffer>
		<deleteFramebuffer get="inline" set="null" line="126"><f a=""><x path="Void"/></f></deleteFramebuffer>
		<setNewGLContext get="inline" set="null" line="139"><f a="newGl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></setNewGLContext>
		<clearOldGLContext get="inline" set="null" line="161"><f a=""><x path="Void"/></f></clearOldGLContext>
		<createTexture get="inline" set="null" line="171"><f a=""><x path="Void"/></f></createTexture>
		<readPixelsUInt8 public="1" set="method" line="180">
			<f a="x:y:w:h:?data" v="::::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ data : null }</e></m></meta>
		</readPixelsUInt8>
		<setImage public="1" set="method" line="198">
			<f a="image:?imageSlot:?tilesX:?tilesY" v=":0:null:null">
				<x path="peote.view.TextureData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tilesY : null, tilesX : null, imageSlot : 0 }</e></m></meta>
		</setImage>
		<removeImage public="1" set="method" line="216"><f a="image">
	<x path="peote.view.TextureData"/>
	<x path="Void"/>
</f></removeImage>
		<bufferImage set="method" line="242"><f a="image:imgProp">
	<x path="peote.view.TextureData"/>
	<t path="peote.view.ImgProp"/>
	<x path="Void"/>
</f></bufferImage>
		<new public="1" set="method" line="56">
			<f a="slotWidth:slotHeight:?imageSlots:?colorChannels:?createMipmaps:?minFilter:?magFilter:?useFloat:?maxTextureSize" v="::1:4:false:0:0:false:16384">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ maxTextureSize : 16384, useFloat : false, magFilter : 0, minFilter : 0, createMipmaps : false, colorChannels : 4, imageSlots : 1 }</e></m></meta>
		</new>
		<meta><m n=":allow"><e>peote.view</e></m></meta>
	</class>
	<abstract path="peote.view.TextureType" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx" module="peote.view.TextureData">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="peote.view._TextureData.TextureType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx" private="1" module="peote.view.TextureData" extern="1" final="1">
	<UINT public="1" get="inline" set="null" expr="cast 0" line="8" static="1">
		<x path="peote.view.TextureType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UINT>
	<FLOAT public="1" get="inline" set="null" expr="cast 1" line="9" static="1">
		<x path="peote.view.TextureType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FLOAT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="peote.view._TextureData.TextureType_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx" private="1" module="peote.view.TextureData" extern="1" final="1">
		<UINT public="1" get="inline" set="null" expr="cast 0" line="8" static="1">
			<x path="peote.view.TextureType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UINT>
		<FLOAT public="1" get="inline" set="null" expr="cast 1" line="9" static="1">
			<x path="peote.view.TextureType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FLOAT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="peote.view._TextureData.TextureDataImpl" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx" private="1" module="peote.view.TextureData">
		<width public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</width>
		<height public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</height>
		<slot public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</slot>
		<dataUInt8 public="1" expr="null">
			<x path="haxe.io.UInt8Array"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</dataUInt8>
		<dataFloat public="1" expr="null">
			<x path="haxe.io.Float32Array"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</dataFloat>
		<new public="1" set="method" line="32">
			<f a="width:height:?type:?data" v="::TextureType.UINT:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="peote.view.TextureType"/>
				<x path="haxe.io.UInt8Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : null, type : TextureType.UINT }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="peote.view.TextureData" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx">
		<from><icast field="fromLimeImage"><c path="lime.graphics.Image"/></icast></from>
		<this><c path="peote.view._TextureData.TextureDataImpl"/></this>
		<to><icast><c path="peote.view._TextureData.TextureDataImpl"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="peote.view._TextureData.TextureData_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx" private="1" module="peote.view.TextureData" final="1">
	<_new public="1" get="inline" set="null" line="47" static="1">
		<f a="width:height:?type:?data" v="::TextureType.UINT:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="peote.view.TextureType"/>
			<x path="haxe.io.UInt8Array"/>
			<x path="peote.view.TextureData"/>
		</f>
		<meta>
			<m n=":value"><e>{ data : null, type : TextureType.UINT }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromLimeImage public="1" set="method" line="53" static="1">
		<f a="image">
			<c path="lime.graphics.Image"/>
			<x path="peote.view.TextureData"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromLimeImage>
</class></impl>
	</abstract>
	<class path="peote.view._TextureData.TextureData_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/TextureData.hx" private="1" module="peote.view.TextureData" final="1">
		<_new public="1" get="inline" set="null" line="47" static="1">
			<f a="width:height:?type:?data" v="::TextureType.UINT:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="peote.view.TextureType"/>
				<x path="haxe.io.UInt8Array"/>
				<x path="peote.view.TextureData"/>
			</f>
			<meta>
				<m n=":value"><e>{ data : null, type : TextureType.UINT }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromLimeImage public="1" set="method" line="53" static="1">
			<f a="image">
				<c path="lime.graphics.Image"/>
				<x path="peote.view.TextureData"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromLimeImage>
	</class>
	<class path="peote.view.UniformBufferDisplay" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/UniformBufferDisplay.hx">
		<block public="1" get="inline" set="null" expr="1" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</block>
		<xOffestBufferPointer><x path="peote.view.utils.GLBufferPointer"/></xOffestBufferPointer>
		<yOffestBufferPointer><x path="peote.view.utils.GLBufferPointer"/></yOffestBufferPointer>
		<xZoomBufferPointer><x path="peote.view.utils.GLBufferPointer"/></xZoomBufferPointer>
		<yZoomBufferPointer><x path="peote.view.utils.GLBufferPointer"/></yZoomBufferPointer>
		<uniformBuffer public="1"><t path="peote.view.GLBuffer"/></uniformBuffer>
		<uniformBytes><t path="peote.view.utils.BufferBytes"/></uniformBytes>
		<updateXOffset public="1" get="inline" set="null" line="30"><f a="gl:xo">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateXOffset>
		<updateYOffset public="1" get="inline" set="null" line="39"><f a="gl:yo">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateYOffset>
		<updateZoom public="1" get="inline" set="null" line="48"><f a="gl:xz:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateZoom>
		<updateXZoom public="1" get="inline" set="null" line="56"><f a="gl:xz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateXZoom>
		<updateYZoom public="1" get="inline" set="null" line="63"><f a="gl:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateYZoom>
		<createGLBuffer public="1" set="method" line="71"><f a="gl:xOffest:yOffest:xz:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGLBuffer>
		<deleteGLBuffer public="1" set="method" line="83"><f a="gl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></deleteGLBuffer>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="peote.view.UniformBufferView" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/UniformBufferView.hx">
		<block public="1" get="inline" set="null" expr="0" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</block>
		<resolutionBufferPointer><x path="peote.view.utils.GLBufferPointer"/></resolutionBufferPointer>
		<xOffestBufferPointer><x path="peote.view.utils.GLBufferPointer"/></xOffestBufferPointer>
		<yOffestBufferPointer><x path="peote.view.utils.GLBufferPointer"/></yOffestBufferPointer>
		<xZoomBufferPointer><x path="peote.view.utils.GLBufferPointer"/></xZoomBufferPointer>
		<yZoomBufferPointer><x path="peote.view.utils.GLBufferPointer"/></yZoomBufferPointer>
		<uniformBuffer public="1"><t path="peote.view.GLBuffer"/></uniformBuffer>
		<uniformBytes><t path="peote.view.utils.BufferBytes"/></uniformBytes>
		<updateResolution public="1" get="inline" set="null" line="33"><f a="gl:width:height">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateResolution>
		<updateXOffset public="1" get="inline" set="null" line="41"><f a="gl:xOffset">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateXOffset>
		<updateYOffset public="1" get="inline" set="null" line="48"><f a="gl:yOffset">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateYOffset>
		<updateZoom public="1" get="inline" set="null" line="55"><f a="gl:xz:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateZoom>
		<updateXZoom public="1" get="inline" set="null" line="62"><f a="gl:xz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateXZoom>
		<updateYZoom public="1" get="inline" set="null" line="69"><f a="gl:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateYZoom>
		<createGLBuffer public="1" set="method" line="77"><f a="gl:width:height:xOffest:yOffest:xz:yz">
	<x path="peote.view.PeoteGL"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGLBuffer>
		<deleteGLBuffer public="1" set="method" line="102"><f a="gl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></deleteGLBuffer>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="peote.view.UniformFloat" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/UniformFloat.hx">
		<value public="1"><x path="Float"/></value>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" get="inline" set="null" line="11"><f a="name:value">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="peote.view.utils.Background" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/Background.hx">
		<aPOSITION get="inline" set="null" expr="0" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</aPOSITION>
		<gl><x path="peote.view.PeoteGL"/></gl>
		<buffer><t path="peote.view.GLBuffer"/></buffer>
		<glProgram><t path="peote.view.GLProgram"/></glProgram>
		<uRGBA><t path="peote.view.GLUniformLocation"/></uRGBA>
		<createBuffer public="1" set="method" line="29"><f a=""><x path="Void"/></f></createBuffer>
		<createProgram public="1" set="method" line="44"><f a=""><x path="Void"/></f></createProgram>
		<render public="1" set="method" line="97"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="22"><f a="gl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="peote.view.utils.BufferBytes" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/BufferBytes.hx"><c path="haxe.io.Bytes"/></typedef>
	<abstract path="peote.view.utils.GLBufferPointer" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/GLBufferPointer.hx">
		<from><icast><x path="lime.utils.DataPointer"/></icast></from>
		<this><x path="lime.utils.DataPointer"/></this>
		<to><icast><x path="lime.utils.DataPointer"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="peote.view.utils._GLBufferPointer.GLBufferPointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/GLBufferPointer.hx" private="1" module="peote.view.utils.GLBufferPointer" final="1"><_new public="1" get="inline" set="null" line="15" static="1">
	<f a="bytes:?offset:?size" v=":0:0">
		<t path="peote.view.utils.BufferBytes"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="peote.view.utils.GLBufferPointer"/>
	</f>
	<meta>
		<m n=":value"><e>{ size : 0, offset : 0 }</e></m>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="peote.view.utils._GLBufferPointer.GLBufferPointer_Impl_" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/GLBufferPointer.hx" private="1" module="peote.view.utils.GLBufferPointer" final="1"><_new public="1" get="inline" set="null" line="15" static="1">
	<f a="bytes:?offset:?size" v=":0:0">
		<t path="peote.view.utils.BufferBytes"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="peote.view.utils.GLBufferPointer"/>
	</f>
	<meta>
		<m n=":value"><e>{ size : 0, offset : 0 }</e></m>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<class path="peote.view.utils.GLTool" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/GLTool.hx">
		<clearGlErrorQueue public="1" set="method" line="13" static="1"><f a="gl">
	<x path="peote.view.PeoteGL"/>
	<x path="Void"/>
</f></clearGlErrorQueue>
		<getLastGlError public="1" set="method" line="19" static="1"><f a="gl">
	<x path="peote.view.PeoteGL"/>
	<x path="Int"/>
</f></getLastGlError>
		<createFramebuffer public="1" get="inline" set="null" line="32" static="1"><f a="gl:texture:depthBuffer:width:height">
	<x path="peote.view.PeoteGL"/>
	<t path="peote.view.GLTexture"/>
	<t path="lime.graphics.opengl.GLRenderbuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="peote.view.GLFramebuffer"/>
</f></createFramebuffer>
		<compileGLShader public="1" get="inline" set="null" line="98" static="1">
			<f a="gl:type:shaderSrc:?debug" v=":::false">
				<x path="peote.view.PeoteGL"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="peote.view.GLShader"/>
			</f>
			<meta><m n=":value"><e>{ debug : false }</e></m></meta>
		</compileGLShader>
		<linkGLProgram public="1" get="inline" set="null" line="115" static="1"><f a="gl:glProgram">
	<x path="peote.view.PeoteGL"/>
	<t path="peote.view.GLProgram"/>
	<x path="Bool"/>
</f></linkGLProgram>
		<rComments expr="new EReg(&quot;//.*?$&quot;, &quot;gm&quot;)" line="129" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>new EReg("//.*?$", "gm")</e></m></meta>
		</rComments>
		<rEmptylines expr="new EReg(&quot;([ \t]*\r?\n)+&quot;, &quot;g&quot;)" line="130" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>new EReg("([ \t]*\r?\n)+", "g")</e></m></meta>
		</rEmptylines>
		<rStartspaces expr="new EReg(&quot;^([ \t]*\r?\n)+&quot;, &quot;g&quot;)" line="131" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>new EReg("^([ \t]*\r?\n)+", "g")</e></m></meta>
		</rStartspaces>
		<parseShader public="1" get="inline" set="null" line="133" static="1"><f a="shader:conf">
	<c path="String"/>
	<d/>
	<c path="String"/>
</f></parseShader>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="peote.view.utils.RenderList" params="T" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/RenderList.hx">
		<first public="1" set="null" expr="null">
			<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderList.T"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</first>
		<last public="1" set="null" expr="null">
			<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderList.T"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</last>
		<itemMap public="1"><t path="Map">
	<c path="peote.view.utils.RenderList.T"/>
	<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderList.T"/></c>
</t></itemMap>
		<isEmpty public="1" get="accessor" set="null"><x path="Bool"/></isEmpty>
		<get_isEmpty get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></get_isEmpty>
		<add public="1" set="method" line="20"><f a="value:atValue:addBefore">
	<c path="peote.view.utils.RenderList.T"/>
	<c path="peote.view.utils.RenderList.T"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" line="65"><f a="value">
	<c path="peote.view.utils.RenderList.T"/>
	<x path="Void"/>
</f></remove>
		<swap public="1" set="method" line="76">
			<f a="a:b">
				<c path="peote.view.utils.RenderList.T"/>
				<c path="peote.view.utils.RenderList.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>peote.view.utils.RenderListItem</e></m></meta>
		</swap>
		<has public="1" set="method" line="89"><f a="value">
	<c path="peote.view.utils.RenderList.T"/>
	<x path="Bool"/>
</f></has>
		<removeItem get="inline" set="null" line="91"><f a="item">
	<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderList.T"/></c>
	<x path="Void"/>
</f></removeItem>
		<clear public="1" set="method" line="99"><f a=""><x path="Void"/></f></clear>
		<iterator public="1" get="inline" set="null" line="110">
			<f a=""><c path="peote.view.utils._RenderList.RenderListIterator"><c path="peote.view.utils.RenderList.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="14"><f a="itemMap">
	<t path="Map">
		<c path="peote.view.utils.RenderList.T"/>
		<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderList.T"/></c>
	</t>
	<x path="Void"/>
</f></new>
		<meta><m n=":generic"/></meta>
	</class>
	<class path="peote.view.utils._RenderList.RenderListIterator" params="T" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/RenderList.hx" private="1" module="peote.view.utils.RenderList">
		<item><c path="peote.view.utils.RenderListItem"><c path="peote.view.utils._RenderList.RenderListIterator.T"/></c></item>
		<hasNext public="1" get="inline" set="null" line="121"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="122"><f a=""><c path="peote.view.utils._RenderList.RenderListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="120"><f a="first">
	<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils._RenderList.RenderListIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="peote.view.utils.RenderListItem" params="T" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/RenderListItem.hx">
		<value public="1" set="null"><c path="peote.view.utils.RenderListItem.T"/></value>
		<next public="1" set="null"><c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderListItem.T"/></c></next>
		<prev public="1" set="null"><c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderListItem.T"/></c></prev>
		<unlink public="1" get="inline" set="null" line="19"><f a=""><x path="Void"/></f></unlink>
		<new public="1" get="inline" set="null" line="11"><f a="value:prev:next">
	<c path="peote.view.utils.RenderListItem.T"/>
	<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderListItem.T"/></c>
	<c path="peote.view.utils.RenderListItem"><c path="peote.view.utils.RenderListItem.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="peote.view.utils.TexUtils" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/TexUtils.hx">
		<createEmptyTexture public="1" set="method" line="11" static="1">
			<f a="gl:width:height:?colorChannels:?createMipmaps:?magFilter:?minFilter:?useFloat" v=":::4:false:0:0:false">
				<x path="peote.view.PeoteGL"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="peote.view.GLTexture"/>
			</f>
			<meta><m n=":value"><e>{ useFloat : false, minFilter : 0, magFilter : 0, createMipmaps : false, colorChannels : 4 }</e></m></meta>
		</createEmptyTexture>
		<createPickingTexture public="1" set="method" line="108" static="1">
			<f a="gl:?isRGBA32I" v=":false">
				<x path="peote.view.PeoteGL"/>
				<x path="Bool"/>
				<t path="peote.view.GLTexture"/>
			</f>
			<meta><m n=":value"><e>{ isRGBA32I : false }</e></m></meta>
		</createPickingTexture>
		<optimalTextureSize public="1" set="method" line="129" static="1">
			<f a="imageSlots:slotWidth:slotHeight:maxTextureSize:?errorIfNotFit:?debug" v="::::true:true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<a>
					<width><x path="Int"/></width>
					<slotsY><x path="Int"/></slotsY>
					<slotsX><x path="Int"/></slotsX>
					<imageSlots><x path="Int"/></imageSlots>
					<height><x path="Int"/></height>
				</a>
			</f>
			<meta><m n=":value"><e>{ debug : true, errorIfNotFit : true }</e></m></meta>
		</optimalTextureSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="peote.view.utils.Util" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/peote/view/utils/Util.hx">
		<camelCase public="1" get="inline" set="null" line="8" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></camelCase>
		<toFloatString public="1" get="inline" set="null" line="10" static="1"><f a="value">
	<d/>
	<c path="String"/>
</f></toFloatString>
		<color2vec4 public="1" get="inline" set="null" line="15" static="1"><f a="c">
	<x path="UInt"/>
	<c path="String"/>
</f></color2vec4>
		<isWrongIdentifier public="1" get="inline" set="null" line="21" static="1"><f a="identifier">
	<c path="String"/>
	<x path="Bool"/>
</f></isWrongIdentifier>
		<resolveFormulaCyclic public="1" set="method" line="26" static="1"><f a="formulas">
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Void"/>
</f></resolveFormulaCyclic>
		<resolveFormulaKey set="method" line="39" static="1"><f a="key:formulas:resolved:?fromKeys">
	<c path="String"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<a>
		<formula><c path="String"/></formula>
		<errVar><c path="String"/></errVar>
		<errKey><c path="String"/></errKey>
	</a>
</f></resolveFormulaKey>
		<resolveFormulaVars public="1" set="method" line="66" static="1"><f a="formulas:attribs">
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Void"/>
</f></resolveFormulaVars>
		<regexpIdentifier public="1" get="inline" set="null" line="78" static="1"><f a="identifier">
	<c path="String"/>
	<c path="EReg"/>
</f></regexpIdentifier>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY._Endian.Endian_Fields_" params="" file="src/pixelimageXY/Endian.hx" private="1" module="pixelimageXY.Endian" final="1">
		<isLittleEndian final="1" public="1" set="null" expr="(function() -&gt;  @:implicitReturn return {
	var a8 = new haxe.io.UInt8Array(4);
	return true;
})()" line="7" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e><![CDATA[(function() ->  @:implicitReturn return {
	var a8 = new haxe.io.UInt8Array(4);
	return true;
})()]]></e></m></meta>
			<haxe_doc>little endian most desktops and laptops, seems that canvas context is ABGR so this is used to detect conversion</haxe_doc>
		</isLittleEndian>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.ImageStruct" params="" file="src/pixelimageXY/ImageStruct.hx">
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<image public="1"><x path="haxe.io.UInt32Array"/></image>
		<transparent public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</transparent>
		<isLittle public="1"><x path="Bool"/></isLittle>
		<virtualX public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</virtualX>
		<virtualY public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</virtualY>
		<useVirtualPos public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useVirtualPos>
		<mask public="1"><x path="pixelimageXY.Pixelimage"/></mask>
		<useMask public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useMask>
		<new public="1" set="method" line="23"><f a="width:height:image">
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This struct is the base of Pixelimage and Pixelshape abstracts</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.Pixelimage" params="" file="src/pixelimageXY/Pixelimage.hx">
		<from><icast><c path="pixelimageXY.ImageStruct"/></icast></from>
		<this><c path="pixelimageXY.ImageStruct"/></this>
		<to><icast><c path="pixelimageXY.ImageStruct"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="pixelimageXY._Pixelimage.Pixelimage_Impl_" params="" file="src/pixelimageXY/Pixelimage.hx" private="1" module="pixelimageXY.Pixelimage" final="1">
	<width public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>provides the width used by the UInt32Array</haxe_doc>
	</width>
	<get_width get="inline" set="null" line="33" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
</f></get_width>
	<height public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>provides the height used by the UInt32Array</haxe_doc>
	</height>
	<get_height get="inline" set="null" line="39" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
</f></get_height>
	<setRelativePosition public="1" set="method" line="44" static="1">
		<f a="this:x:y:?update" v=":::false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ update : false }</e></m></meta>
		<haxe_doc>setting relative position provide a drawing offset, it must be positive
        update is no currentl use yet</haxe_doc>
	</setRelativePosition>
	<transparent public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<haxe_doc>transparent to false will allow setARGB to overwrite pixels, true will alpha blend them when new pixel is semi transparent</haxe_doc>
	</transparent>
	<get_transparent get="inline" set="null" line="57" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
</f></get_transparent>
	<set_transparent get="inline" set="null" line="58" static="1"><f a="this:v">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_transparent>
	<mask public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.Pixelimage"/></mask>
	<get_mask get="inline" set="null" line="64" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.Pixelimage"/>
</f></get_mask>
	<set_mask get="inline" set="null" line="65" static="1"><f a="this:v">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.Pixelimage"/>
	<x path="pixelimageXY.Pixelimage"/>
</f></set_mask>
	<image public="1" get="accessor" set="null" static="1"><x path="haxe.io.UInt32Array"/></image>
	<get_image get="inline" set="null" line="72" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="haxe.io.UInt32Array"/>
</f></get_image>
	<hasMask public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></hasMask>
	<set_hasMask get="inline" set="null" line="80" static="1"><f a="this:v">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_hasMask>
	<get_hasMask get="inline" set="null" line="91" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
</f></get_hasMask>
	<rectWindow get="accessor" set="accessor" static="1"><c path="pixelimageXY.algo.RectangleWindow"/></rectWindow>
	<get_rectWindow get="inline" set="null" line="93" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<c path="pixelimageXY.algo.RectangleWindow"/>
</f></get_rectWindow>
	<set_rectWindow get="inline" set="null" line="97" static="1">
		<f a="this:r">
			<c path="pixelimageXY.ImageStruct"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
		</f>
		<meta><m n=":access"><e>pixelImage.ImageStruct</e></m></meta>
	</set_rectWindow>
	<_new public="1" get="inline" set="null" line="113" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<pos4 get="inline" set="null" line="127" static="1">
		<f a="this:x:y:?off" v=":::0">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":value"><e>{ off : 0 }</e></m></meta>
		<haxe_doc>this provides a location for a UIn8 access of a color channel</haxe_doc>
	</pos4>
	<position public="1" get="inline" set="null" line="132" static="1">
		<f a="this:x:y">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>provides the location of the pixel after considering any relative internal x,y offset</haxe_doc>
	</position>
	<setPixel public="1" get="inline" set="null" line="173" static="1">
		<f a="this:x:y:color">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Provides a view for single color channel access, not usually used</haxe_doc>
	</setPixel>
	<zeroPixel public="1" get="inline" set="null" line="177" static="1"><f a="this:x:y">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></zeroPixel>
	<setARGB public="1" get="inline" set="null" line="185" static="1">
		<f a="this:x:y:color">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>The main way is set the pixel color at x, y
        applies an alpha blend if pixel is semi-transparent and if the pixelimage is transparent true</haxe_doc>
	</setARGB>
	<getPixel public="1" get="inline" set="null" line="195" static="1"><f a="this:x:y">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
	<getARGB public="1" get="inline" set="null" line="203" static="1">
		<f a="this:x:y">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
		</f>
		<haxe_doc>returns the current pixel colour, since canvas context is ABGR on little endian this will correct
        from the internal value</haxe_doc>
	</getARGB>
	<set_argbPixel public="1" get="inline" set="null" line="212" static="1">
		<f a="this:a:r:g:b:location">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>allows setting all 4 colour channels with a location
        @:see position   to obtain the location</haxe_doc>
	</set_argbPixel>
	<argbToPixel public="1" get="inline" set="null" line="220" static="1">
		<f a="this:a:r:g:b:location">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>used more internally to set colours from algorithms does not apply alpha blend</haxe_doc>
	</argbToPixel>
	<channelBlend public="1" get="inline" set="null" line="232" static="1">
		<f a="this:a:r:g:b:location">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>used internally is set colours from algorithms only applies alpha blend
        @see setARGB</haxe_doc>
	</channelBlend>
	<colorBlend public="1" get="inline" set="null" line="242" static="1">
		<f a="this:color:location">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>used internally to set colours from algorithms only applies 
        @see setARGB</haxe_doc>
	</colorBlend>
	<getPixelString public="1" get="inline" set="null" line="251" static="1">
		<f a="this:x:y">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>mainly used for color debugging provides getARGB in hex string format</haxe_doc>
	</getPixelString>
	<simpleRect public="1" get="inline" set="null" line="258" static="1">
		<f a="this:x:y:w:h:color">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>provides a simple filled Rectangle</haxe_doc>
	</simpleRect>
	<clearRect public="1" get="inline" set="null" line="275" static="1"><f a="this:x:y:w:h">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
	<flippedX public="1" get="inline" set="null" line="298" static="1">
		<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
		<haxe_doc>creates a new Pixelimage that is flipped horizonally.
        inPlace overwrites current.</haxe_doc>
	</flippedX>
	<flippedY public="1" get="inline" set="null" line="334" static="1">
		<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
		<haxe_doc>creates a new Pixelimage that is flipped vertically.
        inPlace overwrites current.</haxe_doc>
	</flippedY>
	<spunClock90 public="1" get="inline" set="null" line="370" static="1">
		<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		<haxe_doc>creates a new Pixelimage base on current image, rotated 90° clockwise</haxe_doc>
	</spunClock90>
	<spunAntiClock90 public="1" get="inline" set="null" line="397" static="1">
		<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</spunAntiClock90>
	<spun180 public="1" get="inline" set="null" line="424" static="1">
		<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</spun180>
	<scaleXY public="1" get="inline" set="null" line="449" static="1">
		<f a="this:sx:sy:?transparent:?includeMask" v=":::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</scaleXY>
	<rotateClockwiseDegrees public="1" get="inline" set="null" line="471" static="1">
		<f a="this:angle:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
	</rotateClockwiseDegrees>
	<rotateClockwiseRadians public="1" get="inline" set="null" line="489" static="1">
		<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
	</rotateClockwiseRadians>
	<rotate public="1" get="inline" set="null" line="508" static="1">
		<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
	</rotate>
	<scaleUpInt public="1" get="inline" set="null" line="578" static="1">
		<f a="this:?scaleW:?scaleH:?transparent:?includeMask" v=":2:2:false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, scaleH : 2, scaleW : 2 }</e></m></meta>
	</scaleUpInt>
	<patternRect public="1" get="inline" set="null" line="605" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></patternRect>
	<patternRectDown public="1" get="inline" set="null" line="635" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></patternRectDown>
	<fillSquare public="1" get="inline" set="null" line="669" static="1">
		<f a="this:x:y:d:color">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>provides a simple filled square a short cut 
        @see simpleRect</haxe_doc>
	</fillSquare>
	<fillTri public="1" get="inline" set="null" line="682" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		<haxe_doc>provides a filled triangle give a,b,c coordinates
        automagically rearranges coordinates so it always renders</haxe_doc>
	</fillTri>
	<tileTri public="1" get="inline" set="null" line="690" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</tileTri>
	<fillQuad public="1" get="inline" set="null" line="702" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		<haxe_doc>uses two triangles to create a filled quad using four coordinates a,b,c,d arranged clockwise</haxe_doc>
	</fillQuad>
	<tileQuad public="1" get="inline" set="null" line="713" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:tileImage:?hasHit" v="::::::::::false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</tileQuad>
	<fillGradTri public="1" get="inline" set="null" line="726" static="1">
		<f a="this:ax:ay:colA:bx:by:colB:cx:cy:colC:?hasHit" v="::::::::::true">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		<haxe_doc>creates a filled gradient triangle in OpenGL 3 color style for coordinates a,b,c
        with respective colors after coordinate pairs</haxe_doc>
	</fillGradTri>
	<imgTri public="1" get="inline" set="null" line="734" static="1">
		<f a="this:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::true">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</imgTri>
	<tileRect public="1" get="inline" set="null" line="741" static="1">
		<f a="this:x:y:wid:hi:tileImage:?hasHit" v="::::::false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</tileRect>
	<fillGradRect public="1" get="inline" set="null" line="752" static="1">
		<f a="this:x:y:wid:hi:colorA:colorB:colorC:colorD">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<a>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
				<dy><x path="Float"/></dy>
				<cy><x path="Float"/></cy>
				<cx><x path="Float"/></cx>
				<bx><x path="Float"/></bx>
				<ay><x path="Float"/></ay>
				<ax><x path="Float"/></ax>
			</a>
		</f>
		<haxe_doc>uses two triangles to form rectangle x,y,width,height with a,b,c,d clockwise gradient colours</haxe_doc>
	</fillGradRect>
	<fillGradQuad public="1" get="inline" set="null" line="773" static="1">
		<f a="this:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:?hasHit" v=":::::::::::::true">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		<haxe_doc>uses two triangle to form a quad with clockwise coordinates a,b,c,d
        with respective colours after each coordinate pair

        a better render maybe possible see commented out code in algo.QuadPixel and lerp code in algo.GeomPixel
        ( better render approach compiles but does not yet work, maybe easy? ).</haxe_doc>
	</fillGradQuad>
	<imgQuad public="1" get="inline" set="null" line="784" static="1">
		<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</imgQuad>
	<imgRect public="1" get="inline" set="null" line="793" static="1">
		<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?scaleX:?scaleY:?hasHit" v=":::::::0.:0.:0.:0.:0.:1.:1.:true">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, scaleY : 1., scaleX : 1., skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
	</imgRect>
	<imgNineSlice public="1" get="inline" set="null" line="869" static="1">
		<f a="this:texture:win:x:y:wid:hi:left:top:fat:tall:widNew:hiNew:leftNew:topNew:fatNew:tallNew:?hasHit" v=":::::::::::::::::false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</imgNineSlice>
	<fillLine public="1" get="inline" set="null" line="893" static="1">
		<f a="this:px:py:qx:qy:thick:color:?hasHit:?debugCorners" v=":::::::true:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : true }</e></m></meta>
		<haxe_doc>provides a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
	</fillLine>
	<tileLine public="1" get="inline" set="null" line="908" static="1">
		<f a="this:px:py:qx:qy:thick:tileImage:?hasHit:?debugCorners" v=":::::::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		<haxe_doc>tiles a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
	</tileLine>
	<fillGradLine public="1" get="inline" set="null" line="925" static="1">
		<f a="this:px:py:qx:qy:thick:colorA:colorB:colorC:colorD:?hasHit:?debugCorners" v="::::::::::false:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		<haxe_doc>provides a thick line using two gradient triangle vector p,q
        the four colors are arranged clockwise a,b,c,d
        debug corners draws coloured squares on the corners for development</haxe_doc>
	</fillGradLine>
	<putPixelImage public="1" get="inline" set="null" line="940" static="1">
		<f a="this:pixelImage:x:y:?useAvaliableMask:?forceClear" v="::::true:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
		<haxe_doc>used to draw one pixelimage on part of another, essentially it is a copy
        black transparent pixels are ignored.
        this is used also internally so that shapes can be composed with transparent false 
        useful for adding over and taking away parts of shapes before drawing on the main Pixelimage.</haxe_doc>
	</putPixelImage>
	<putPixelImageRect public="1" get="inline" set="null" line="959" static="1">
		<f a="this:pixelImage:x:y:rectLeft:rectTop:rectRight:rectBottom:?useAvaliableMask:?forceClear" v="::::::::true:false">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
	</putPixelImageRect>
	<transferClone public="1" get="inline" set="null" line="1025" static="1">
		<f a="this">
			<c path="pixelimageXY.ImageStruct"/>
			<x path="pixelimageXY.Pixelimage"/>
		</f>
		<haxe_doc>Currently library only supports Javascript target and puts the UInt32Array on the canvas context
        hope to add c++ and some toolkits later.</haxe_doc>
	</transferClone>
	<transferIn public="1" get="inline" set="null" line="1033" static="1"><f a="this:p">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Void"/>
</f></transferIn>
	<getBytes public="1" get="inline" set="null" line="1045" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
	<fromBytes public="1" get="inline" set="null" line="1050" static="1"><f a="this:bytes:pos">
	<c path="pixelimageXY.ImageStruct"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fromBytes>
	<fromBytesCameleon public="1" get="inline" set="null" line="1054" static="1"><f a="this:bytes">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.formats.BytesCameleon"/>
	<x path="Void"/>
</f></fromBytesCameleon>
</class></impl>
	</abstract>
	<class path="pixelimageXY._Pixelimage.Pixelimage_Impl_" params="" file="src/pixelimageXY/Pixelimage.hx" private="1" module="pixelimageXY.Pixelimage" final="1">
		<width public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>provides the width used by the UInt32Array</haxe_doc>
		</width>
		<get_width get="inline" set="null" line="33" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
</f></get_width>
		<height public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>provides the height used by the UInt32Array</haxe_doc>
		</height>
		<get_height get="inline" set="null" line="39" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
</f></get_height>
		<setRelativePosition public="1" set="method" line="44" static="1">
			<f a="this:x:y:?update" v=":::false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ update : false }</e></m></meta>
			<haxe_doc>setting relative position provide a drawing offset, it must be positive
        update is no currentl use yet</haxe_doc>
		</setRelativePosition>
		<transparent public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<haxe_doc>transparent to false will allow setARGB to overwrite pixels, true will alpha blend them when new pixel is semi transparent</haxe_doc>
		</transparent>
		<get_transparent get="inline" set="null" line="57" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
</f></get_transparent>
		<set_transparent get="inline" set="null" line="58" static="1"><f a="this:v">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_transparent>
		<mask public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.Pixelimage"/></mask>
		<get_mask get="inline" set="null" line="64" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.Pixelimage"/>
</f></get_mask>
		<set_mask get="inline" set="null" line="65" static="1"><f a="this:v">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.Pixelimage"/>
	<x path="pixelimageXY.Pixelimage"/>
</f></set_mask>
		<image public="1" get="accessor" set="null" static="1"><x path="haxe.io.UInt32Array"/></image>
		<get_image get="inline" set="null" line="72" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="haxe.io.UInt32Array"/>
</f></get_image>
		<hasMask public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></hasMask>
		<set_hasMask get="inline" set="null" line="80" static="1"><f a="this:v">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_hasMask>
		<get_hasMask get="inline" set="null" line="91" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Bool"/>
</f></get_hasMask>
		<rectWindow get="accessor" set="accessor" static="1"><c path="pixelimageXY.algo.RectangleWindow"/></rectWindow>
		<get_rectWindow get="inline" set="null" line="93" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<c path="pixelimageXY.algo.RectangleWindow"/>
</f></get_rectWindow>
		<set_rectWindow get="inline" set="null" line="97" static="1">
			<f a="this:r">
				<c path="pixelimageXY.ImageStruct"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
			</f>
			<meta><m n=":access"><e>pixelImage.ImageStruct</e></m></meta>
		</set_rectWindow>
		<_new public="1" get="inline" set="null" line="113" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<pos4 get="inline" set="null" line="127" static="1">
			<f a="this:x:y:?off" v=":::0">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ off : 0 }</e></m></meta>
			<haxe_doc>this provides a location for a UIn8 access of a color channel</haxe_doc>
		</pos4>
		<position public="1" get="inline" set="null" line="132" static="1">
			<f a="this:x:y">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>provides the location of the pixel after considering any relative internal x,y offset</haxe_doc>
		</position>
		<setPixel public="1" get="inline" set="null" line="173" static="1">
			<f a="this:x:y:color">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Provides a view for single color channel access, not usually used</haxe_doc>
		</setPixel>
		<zeroPixel public="1" get="inline" set="null" line="177" static="1"><f a="this:x:y">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></zeroPixel>
		<setARGB public="1" get="inline" set="null" line="185" static="1">
			<f a="this:x:y:color">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>The main way is set the pixel color at x, y
        applies an alpha blend if pixel is semi-transparent and if the pixelimage is transparent true</haxe_doc>
		</setARGB>
		<getPixel public="1" get="inline" set="null" line="195" static="1"><f a="this:x:y">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
		<getARGB public="1" get="inline" set="null" line="203" static="1">
			<f a="this:x:y">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
			</f>
			<haxe_doc>returns the current pixel colour, since canvas context is ABGR on little endian this will correct
        from the internal value</haxe_doc>
		</getARGB>
		<set_argbPixel public="1" get="inline" set="null" line="212" static="1">
			<f a="this:a:r:g:b:location">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>allows setting all 4 colour channels with a location
        @:see position   to obtain the location</haxe_doc>
		</set_argbPixel>
		<argbToPixel public="1" get="inline" set="null" line="220" static="1">
			<f a="this:a:r:g:b:location">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>used more internally to set colours from algorithms does not apply alpha blend</haxe_doc>
		</argbToPixel>
		<channelBlend public="1" get="inline" set="null" line="232" static="1">
			<f a="this:a:r:g:b:location">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>used internally is set colours from algorithms only applies alpha blend
        @see setARGB</haxe_doc>
		</channelBlend>
		<colorBlend public="1" get="inline" set="null" line="242" static="1">
			<f a="this:color:location">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>used internally to set colours from algorithms only applies 
        @see setARGB</haxe_doc>
		</colorBlend>
		<getPixelString public="1" get="inline" set="null" line="251" static="1">
			<f a="this:x:y">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>mainly used for color debugging provides getARGB in hex string format</haxe_doc>
		</getPixelString>
		<simpleRect public="1" get="inline" set="null" line="258" static="1">
			<f a="this:x:y:w:h:color">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>provides a simple filled Rectangle</haxe_doc>
		</simpleRect>
		<clearRect public="1" get="inline" set="null" line="275" static="1"><f a="this:x:y:w:h">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<flippedX public="1" get="inline" set="null" line="298" static="1">
			<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage that is flipped horizonally.
        inPlace overwrites current.</haxe_doc>
		</flippedX>
		<flippedY public="1" get="inline" set="null" line="334" static="1">
			<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage that is flipped vertically.
        inPlace overwrites current.</haxe_doc>
		</flippedY>
		<spunClock90 public="1" get="inline" set="null" line="370" static="1">
			<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage base on current image, rotated 90° clockwise</haxe_doc>
		</spunClock90>
		<spunAntiClock90 public="1" get="inline" set="null" line="397" static="1">
			<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</spunAntiClock90>
		<spun180 public="1" get="inline" set="null" line="424" static="1">
			<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</spun180>
		<scaleXY public="1" get="inline" set="null" line="449" static="1">
			<f a="this:sx:sy:?transparent:?includeMask" v=":::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</scaleXY>
		<rotateClockwiseDegrees public="1" get="inline" set="null" line="471" static="1">
			<f a="this:angle:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotateClockwiseDegrees>
		<rotateClockwiseRadians public="1" get="inline" set="null" line="489" static="1">
			<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotateClockwiseRadians>
		<rotate public="1" get="inline" set="null" line="508" static="1">
			<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotate>
		<scaleUpInt public="1" get="inline" set="null" line="578" static="1">
			<f a="this:?scaleW:?scaleH:?transparent:?includeMask" v=":2:2:false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, scaleH : 2, scaleW : 2 }</e></m></meta>
		</scaleUpInt>
		<patternRect public="1" get="inline" set="null" line="605" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></patternRect>
		<patternRectDown public="1" get="inline" set="null" line="635" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></patternRectDown>
		<fillSquare public="1" get="inline" set="null" line="669" static="1">
			<f a="this:x:y:d:color">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>provides a simple filled square a short cut 
        @see simpleRect</haxe_doc>
		</fillSquare>
		<fillTri public="1" get="inline" set="null" line="682" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
			<haxe_doc>provides a filled triangle give a,b,c coordinates
        automagically rearranges coordinates so it always renders</haxe_doc>
		</fillTri>
		<tileTri public="1" get="inline" set="null" line="690" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileTri>
		<fillQuad public="1" get="inline" set="null" line="702" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
			<haxe_doc>uses two triangles to create a filled quad using four coordinates a,b,c,d arranged clockwise</haxe_doc>
		</fillQuad>
		<tileQuad public="1" get="inline" set="null" line="713" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:tileImage:?hasHit" v="::::::::::false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileQuad>
		<fillGradTri public="1" get="inline" set="null" line="726" static="1">
			<f a="this:ax:ay:colA:bx:by:colB:cx:cy:colC:?hasHit" v="::::::::::true">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
			<haxe_doc>creates a filled gradient triangle in OpenGL 3 color style for coordinates a,b,c
        with respective colors after coordinate pairs</haxe_doc>
		</fillGradTri>
		<imgTri public="1" get="inline" set="null" line="734" static="1">
			<f a="this:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::true">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</imgTri>
		<tileRect public="1" get="inline" set="null" line="741" static="1">
			<f a="this:x:y:wid:hi:tileImage:?hasHit" v="::::::false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileRect>
		<fillGradRect public="1" get="inline" set="null" line="752" static="1">
			<f a="this:x:y:wid:hi:colorA:colorB:colorC:colorD">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<a>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
					<dy><x path="Float"/></dy>
					<cy><x path="Float"/></cy>
					<cx><x path="Float"/></cx>
					<bx><x path="Float"/></bx>
					<ay><x path="Float"/></ay>
					<ax><x path="Float"/></ax>
				</a>
			</f>
			<haxe_doc>uses two triangles to form rectangle x,y,width,height with a,b,c,d clockwise gradient colours</haxe_doc>
		</fillGradRect>
		<fillGradQuad public="1" get="inline" set="null" line="773" static="1">
			<f a="this:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:?hasHit" v=":::::::::::::true">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
			<haxe_doc>uses two triangle to form a quad with clockwise coordinates a,b,c,d
        with respective colours after each coordinate pair

        a better render maybe possible see commented out code in algo.QuadPixel and lerp code in algo.GeomPixel
        ( better render approach compiles but does not yet work, maybe easy? ).</haxe_doc>
		</fillGradQuad>
		<imgQuad public="1" get="inline" set="null" line="784" static="1">
			<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</imgQuad>
		<imgRect public="1" get="inline" set="null" line="793" static="1">
			<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?scaleX:?scaleY:?hasHit" v=":::::::0.:0.:0.:0.:0.:1.:1.:true">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, scaleY : 1., scaleX : 1., skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
		</imgRect>
		<imgNineSlice public="1" get="inline" set="null" line="869" static="1">
			<f a="this:texture:win:x:y:wid:hi:left:top:fat:tall:widNew:hiNew:leftNew:topNew:fatNew:tallNew:?hasHit" v=":::::::::::::::::false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</imgNineSlice>
		<fillLine public="1" get="inline" set="null" line="893" static="1">
			<f a="this:px:py:qx:qy:thick:color:?hasHit:?debugCorners" v=":::::::true:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : true }</e></m></meta>
			<haxe_doc>provides a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
		</fillLine>
		<tileLine public="1" get="inline" set="null" line="908" static="1">
			<f a="this:px:py:qx:qy:thick:tileImage:?hasHit:?debugCorners" v=":::::::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
			<haxe_doc>tiles a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
		</tileLine>
		<fillGradLine public="1" get="inline" set="null" line="925" static="1">
			<f a="this:px:py:qx:qy:thick:colorA:colorB:colorC:colorD:?hasHit:?debugCorners" v="::::::::::false:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
			<haxe_doc>provides a thick line using two gradient triangle vector p,q
        the four colors are arranged clockwise a,b,c,d
        debug corners draws coloured squares on the corners for development</haxe_doc>
		</fillGradLine>
		<putPixelImage public="1" get="inline" set="null" line="940" static="1">
			<f a="this:pixelImage:x:y:?useAvaliableMask:?forceClear" v="::::true:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
			<haxe_doc>used to draw one pixelimage on part of another, essentially it is a copy
        black transparent pixels are ignored.
        this is used also internally so that shapes can be composed with transparent false 
        useful for adding over and taking away parts of shapes before drawing on the main Pixelimage.</haxe_doc>
		</putPixelImage>
		<putPixelImageRect public="1" get="inline" set="null" line="959" static="1">
			<f a="this:pixelImage:x:y:rectLeft:rectTop:rectRight:rectBottom:?useAvaliableMask:?forceClear" v="::::::::true:false">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
		</putPixelImageRect>
		<transferClone public="1" get="inline" set="null" line="1025" static="1">
			<f a="this">
				<c path="pixelimageXY.ImageStruct"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<haxe_doc>Currently library only supports Javascript target and puts the UInt32Array on the canvas context
        hope to add c++ and some toolkits later.</haxe_doc>
		</transferClone>
		<transferIn public="1" get="inline" set="null" line="1033" static="1"><f a="this:p">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Void"/>
</f></transferIn>
		<getBytes public="1" get="inline" set="null" line="1045" static="1"><f a="this">
	<c path="pixelimageXY.ImageStruct"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<fromBytes public="1" get="inline" set="null" line="1050" static="1"><f a="this:bytes:pos">
	<c path="pixelimageXY.ImageStruct"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fromBytes>
		<fromBytesCameleon public="1" get="inline" set="null" line="1054" static="1"><f a="this:bytes">
	<c path="pixelimageXY.ImageStruct"/>
	<x path="pixelimageXY.formats.BytesCameleon"/>
	<x path="Void"/>
</f></fromBytesCameleon>
	</class>
	<class path="pixelimageXY.PixelimageDoc" params="" file="src/pixelimageXY/PixelimageDoc.hx">
		<main public="1" set="method" line="8" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<abstract path="pixelimageXY.Pixelshape" params="" file="src/pixelimageXY/Pixelshape.hx">
		<this><x path="pixelimageXY.Pixelimage"/></this>
		<to><icast><x path="pixelimageXY.Pixelimage"/></icast></to>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="pixelimageXY._Pixelshape.Pixelshape_Impl_" params="" file="src/pixelimageXY/Pixelshape.hx" private="1" module="pixelimageXY.Pixelshape" final="1">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.Pixelshape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<lineGrid public="1" get="inline" set="null" line="60" static="1"><f a="this:x:y:w:h:delta:thick:color">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGrid>
	<lineGridWH public="1" get="inline" set="null" line="71" static="1"><f a="this:x:y:w:h:deltaW:deltaH:thick:color">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGridWH>
	<fillRoundRect public="1" get="inline" set="null" line="102" static="1">
		<f a="this:x:y:hi:wid:color:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
	</fillRoundRect>
	<lineRoundRect public="1" get="inline" set="null" line="112" static="1">
		<f a="this:x:y:hi:wid:thick:color:?dx:?dy:?fat:?tall" v=":::::::-1.:-1.:-1.:-1.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
	</lineRoundRect>
	<fillGrad4RoundRect public="1" get="inline" set="null" line="132" static="1">
		<f a="this:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v=":::::::::-1.:-1.:-1.:-1.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
	</fillGrad4RoundRect>
	<lineGrad4RoundRect public="1" get="inline" set="null" line="142" static="1">
		<f a="this:x:y:hi:wid:thick:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v="::::::::::-1.:-1.:-1.:-1.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
	</lineGrad4RoundRect>
	<testFillSimonSaysQuadrant public="1" get="inline" set="null" line="152" static="1"><f a="this:cx:cy:radius">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></testFillSimonSaysQuadrant>
	<fillQuadrantI public="1" get="inline" set="null" line="162" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</fillQuadrantI>
	<tileQuadrantI public="1" get="inline" set="null" line="170" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</tileQuadrantI>
	<fillQuadrantII public="1" get="inline" set="null" line="177" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</fillQuadrantII>
	<tileQuadrantII public="1" get="inline" set="null" line="184" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</tileQuadrantII>
	<fillQuadrantIII public="1" get="inline" set="null" line="191" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</fillQuadrantIII>
	<tileQuadrantIII public="1" get="inline" set="null" line="198" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</tileQuadrantIII>
	<fillQuadrantIV public="1" get="inline" set="null" line="205" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</fillQuadrantIV>
	<tileQuadrantIV public="1" get="inline" set="null" line="212" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</tileQuadrantIV>
	<fillCircle public="1" get="inline" set="null" line="218" static="1">
		<f a="this:cx:cy:r:color:?phi" v=":::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":value"><e>{ phi : 0 }</e></m>
			<m n=":access"><e>pixelimage.Pixelimage.fillEllipseTri</e></m>
		</meta>
	</fillCircle>
	<fillEllipse public="1" get="inline" set="null" line="223" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":value"><e>{ phi : 0 }</e></m>
			<m n=":access"><e>pixelimage.Pixelimage.fillEllipseTri</e></m>
		</meta>
	</fillEllipse>
	<fillArrowHead public="1" get="inline" set="null" line="227" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillArrowHead>
	<fillPentagon public="1" get="inline" set="null" line="231" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillPentagon>
	<fillHexagon public="1" get="inline" set="null" line="235" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillHexagon>
	<fillHeptagon public="1" get="inline" set="null" line="239" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillHeptagon>
	<fillSeptagon public="1" get="inline" set="null" line="243" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillSeptagon>
	<fillOctagon public="1" get="inline" set="null" line="247" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillOctagon>
	<fillNonagon public="1" get="inline" set="null" line="251" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillNonagon>
	<fillEnneagon public="1" get="inline" set="null" line="255" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillEnneagon>
	<fillDecagon public="1" get="inline" set="null" line="259" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillDecagon>
	<fillHendecagon public="1" get="inline" set="null" line="263" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillHendecagon>
	<fillUndecagon public="1" get="inline" set="null" line="267" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillUndecagon>
	<fillDodecagon public="1" get="inline" set="null" line="271" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
	</fillDodecagon>
	<softFillQuint public="1" get="inline" set="null" line="282" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:softC:?hasHit" v=":::::::::::false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</softFillQuint>
	<fillSoftQuad public="1" get="inline" set="null" line="298" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</fillSoftQuad>
	<fillSoftQuadFudge public="1" get="inline" set="null" line="314" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</fillSoftQuadFudge>
	<fillSoftQuadQuarter public="1" get="inline" set="null" line="328" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</fillSoftQuadQuarter>
	<fillSoftLine public="1" get="inline" set="null" line="339" static="1">
		<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</fillSoftLine>
	<fillSoftLineLuxury public="1" get="inline" set="null" line="354" static="1">
		<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</fillSoftLineLuxury>
	<softFillTriangle public="1" get="inline" set="null" line="370" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:color:soft3:?softAB:?softBC:?softCA:?hasHit" v=":::::::::true:true:true:false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitTri"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
	</softFillTriangle>
	<sweepTri public="1" get="inline" set="null" line="383" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit" v="::::::::false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</sweepTri>
	<tileSweepTri public="1" get="inline" set="null" line="398" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit" v="::::::::false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitTri"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</tileSweepTri>
	<fillPie public="1" get="inline" set="null" line="414" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit:?targetError" v="::::::::false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
	</fillPie>
	<tilePie public="1" get="inline" set="null" line="455" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit:?targetError" v="::::::::false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
	</tilePie>
	<sweepGradTri public="1" get="inline" set="null" line="494" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:colA:colB:colC:?hasHit" v="::::::::::false">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</sweepGradTri>
	<fillRadialPie public="1" get="inline" set="null" line="509" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:centreColor:outerColor:?hasHit:?targetError" v=":::::::::false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
	</fillRadialPie>
	<imgQuadFudge public="1" get="inline" set="null" line="552" static="1">
		<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="pixelimageXY.Pixelimage"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		<haxe_doc>works with image Fudge of UV values, deprediated unless turns out useful in edge cases.</haxe_doc>
	</imgQuadFudge>
	<imgRectFudge public="1" get="inline" set="null" line="560" static="1">
		<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?hasHit" v=":::::::0.:0.:0.:0.:0.:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="pixelimageXY.Pixelimage"/>
			<c path="pixelimageXY.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
	</imgRectFudge>
	<fillArrow public="1" get="inline" set="null" line="619" static="1">
		<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::false:false:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		<haxe_doc>provides a thick arrow using two triangles vector p, q</haxe_doc>
	</fillArrow>
	<fillArrowBoth public="1" get="inline" set="null" line="624" static="1">
		<f a="this:px:py:qx:qy:thick:color:?hasHit" v=":::::::true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</fillArrowBoth>
	<fillFixArrow public="1" get="inline" set="null" line="629" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::::false:false:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
	</fillFixArrow>
	<fillFixArrowBoth public="1" get="inline" set="null" line="635" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?hasHit" v=":::::::::true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</fillFixArrowBoth>
	<fillSoftArrow public="1" get="inline" set="null" line="641" static="1">
		<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::false:false:40.:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
	</fillSoftArrow>
	<fillSoftArrowBoth public="1" get="inline" set="null" line="646" static="1">
		<f a="this:px:py:qx:qy:thick:color:?soft:?hasHit" v=":::::::40.:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
	</fillSoftArrowBoth>
	<fillSoftFixArrow public="1" get="inline" set="null" line="651" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::::false:false:40.:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
	</fillSoftFixArrow>
	<fillSoftFixArrowBoth public="1" get="inline" set="null" line="656" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?soft:?hasHit" v=":::::::::40.:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
	</fillSoftFixArrowBoth>
	<gradThickArrow public="1" get="inline" set="null" line="663" static="1">
		<f a="this:px:py:qx:qy:thick:color1:color2:?flare:reverseFlare:?hasHit" v="::::::::false::true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, flare : false }</e></m></meta>
	</gradThickArrow>
	<gradThickArrowBoth public="1" get="inline" set="null" line="668" static="1">
		<f a="this:px:py:qx:qy:thick:color1:color2:?hasHit" v="::::::::true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</gradThickArrowBoth>
	<gradThickFixArrow public="1" get="inline" set="null" line="673" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::::false:false:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
	</gradThickFixArrow>
	<gradThickFixArrowBoth public="1" get="inline" set="null" line="678" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?hasHit" v="::::::::::true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</gradThickFixArrowBoth>
	<fillEllipseTri public="1" get="inline" set="null" line="689" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?printSides:?targetError" v="::::::0:false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
		<haxe_doc>this is used for drawing a filled ellipse or circle ( using triangles ), it uses more sides when larger and can be tweaked with targetError
        drawn from the circles/ellipses centre, with rx and ry the radius, phi allows rotatation of ellipses
        setup so large ellipses automatically use more sides.</haxe_doc>
	</fillEllipseTri>
	<softFillEllipseTri public="1" get="inline" set="null" line="698" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?softC:?printSides:?targetError" v="::::::0:10:false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, softC : 10, phi : 0 }</e></m></meta>
	</softFillEllipseTri>
	<tileEllipseTri public="1" get="inline" set="null" line="707" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi:?printSides:?targetError" v="::::::0:false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
	</tileEllipseTri>
	<lineEllipseTri public="1" get="inline" set="null" line="725" static="1">
		<f a="this:cx:cy:rx:ry:drx:dry:color:?phi:?printSides:?targetError" v="::::::::0:false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
		<haxe_doc>this is provides a thick outline ellipse or circle ( using triangles ), large ones have more sides.
        @:see fillEllipseTri
        it uses a temp pixelimage with transparent false,
        and a second ellipse to remove the centre before copying over pixels
        setup so large ellipses automatically use more sides.
        for phi rotated ellipses it over estimates the temp pixelimage to be safe</haxe_doc>
	</lineEllipseTri>
	<fillRadialEllipseTri public="1" get="inline" set="null" line="764" static="1">
		<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::0.:0.:0:false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0, gy : 0., gx : 0. }</e></m></meta>
		<haxe_doc>provides a filled ellipse/circle using triangles and more sides for large with a radial color gradient from the centre 
        colorIn is the internal colour and colorOut the external one, gx and gy -1 to 1 provide offset centre
        there are lots of limitations, gx and gy max and min obviously look bad and may need to scale them to 0.7 for rotated ellipse</haxe_doc>
	</fillRadialEllipseTri>
	<lineRadialEllipseTri public="1" get="inline" set="null" line="780" static="1">
		<f a="this:cx:cy:rx:ry:drx:dry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::::0.:0.:0:false:1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0, gy : 0., gx : 0. }</e></m></meta>
		<haxe_doc>radial ellipse thick line 
        @see fillRadialEllipseTri</haxe_doc>
	</lineRadialEllipseTri>
	<fillRadialRectangle public="1" get="inline" set="null" line="819" static="1">
		<f a="this:x:y:wid:hi:colorIn:colorOut:?gx:?gy" v=":::::::0:0">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ gy : 0, gx : 0 }</e></m></meta>
		<haxe_doc>provides a radial colour gradient, it uses a temp pixelimage to draw a rectangle and then radial ellipse within.
        @:see fillRadialEllipseTri</haxe_doc>
	</fillRadialRectangle>
	<fillQuadrant public="1" get="inline" set="null" line="838" static="1">
		<f a="this:cx:cy:rx:ry:startAngle:color:?phi:?targetError" v="::::::::1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
		<haxe_doc>fill Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
	</fillQuadrant>
	<tileQuadrant public="1" get="inline" set="null" line="848" static="1">
		<f a="this:cx:cy:rx:ry:startAngle:tileImage:?phi:?targetError" v="::::::::1.05">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
		<haxe_doc>tiles Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
	</tileQuadrant>
	<fillPolyBuild public="1" get="inline" set="null" line="863" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?sides:?cornerUp" v="::::::0.:36:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		<haxe_doc>this provides building block for regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
	</fillPolyBuild>
	<softFillPolyBuild public="1" get="inline" set="null" line="870" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?sides:?softC:?cornerUp" v="::::::0.:36:10.:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, softC : 10., sides : 36, phi : 0. }</e></m></meta>
	</softFillPolyBuild>
	<tilePolyBuild public="1" get="inline" set="null" line="885" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi:?sides:?cornerUp" v="::::::0.:36:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		<haxe_doc>this provides building block for image tiled regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
	</tilePolyBuild>
	<fillRadialPolyon public="1" get="inline" set="null" line="898" static="1">
		<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:?cornerUp" v=":::::::0.:0.:0.:36:true">
			<x path="pixelimageXY.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0., gy : 0., gx : 0. }</e></m></meta>
		<haxe_doc>@see fillPolyBuild
        this is a version with radial gradient applied so the centre is one color, but only used gradient triangles so limited</haxe_doc>
	</fillRadialPolyon>
</class></impl>
	</abstract>
	<class path="pixelimageXY._Pixelshape.Pixelshape_Impl_" params="" file="src/pixelimageXY/Pixelshape.hx" private="1" module="pixelimageXY.Pixelshape" final="1">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.Pixelshape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<lineGrid public="1" get="inline" set="null" line="60" static="1"><f a="this:x:y:w:h:delta:thick:color">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGrid>
		<lineGridWH public="1" get="inline" set="null" line="71" static="1"><f a="this:x:y:w:h:deltaW:deltaH:thick:color">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGridWH>
		<fillRoundRect public="1" get="inline" set="null" line="102" static="1">
			<f a="this:x:y:hi:wid:color:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</fillRoundRect>
		<lineRoundRect public="1" get="inline" set="null" line="112" static="1">
			<f a="this:x:y:hi:wid:thick:color:?dx:?dy:?fat:?tall" v=":::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		</lineRoundRect>
		<fillGrad4RoundRect public="1" get="inline" set="null" line="132" static="1">
			<f a="this:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v=":::::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</fillGrad4RoundRect>
		<lineGrad4RoundRect public="1" get="inline" set="null" line="142" static="1">
			<f a="this:x:y:hi:wid:thick:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v="::::::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		</lineGrad4RoundRect>
		<testFillSimonSaysQuadrant public="1" get="inline" set="null" line="152" static="1"><f a="this:cx:cy:radius">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></testFillSimonSaysQuadrant>
		<fillQuadrantI public="1" get="inline" set="null" line="162" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</fillQuadrantI>
		<tileQuadrantI public="1" get="inline" set="null" line="170" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</tileQuadrantI>
		<fillQuadrantII public="1" get="inline" set="null" line="177" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</fillQuadrantII>
		<tileQuadrantII public="1" get="inline" set="null" line="184" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</tileQuadrantII>
		<fillQuadrantIII public="1" get="inline" set="null" line="191" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</fillQuadrantIII>
		<tileQuadrantIII public="1" get="inline" set="null" line="198" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</tileQuadrantIII>
		<fillQuadrantIV public="1" get="inline" set="null" line="205" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</fillQuadrantIV>
		<tileQuadrantIV public="1" get="inline" set="null" line="212" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</tileQuadrantIV>
		<fillCircle public="1" get="inline" set="null" line="218" static="1">
			<f a="this:cx:cy:r:color:?phi" v=":::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ phi : 0 }</e></m>
				<m n=":access"><e>pixelimage.Pixelimage.fillEllipseTri</e></m>
			</meta>
		</fillCircle>
		<fillEllipse public="1" get="inline" set="null" line="223" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ phi : 0 }</e></m>
				<m n=":access"><e>pixelimage.Pixelimage.fillEllipseTri</e></m>
			</meta>
		</fillEllipse>
		<fillArrowHead public="1" get="inline" set="null" line="227" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillArrowHead>
		<fillPentagon public="1" get="inline" set="null" line="231" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillPentagon>
		<fillHexagon public="1" get="inline" set="null" line="235" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillHexagon>
		<fillHeptagon public="1" get="inline" set="null" line="239" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillHeptagon>
		<fillSeptagon public="1" get="inline" set="null" line="243" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillSeptagon>
		<fillOctagon public="1" get="inline" set="null" line="247" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillOctagon>
		<fillNonagon public="1" get="inline" set="null" line="251" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillNonagon>
		<fillEnneagon public="1" get="inline" set="null" line="255" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillEnneagon>
		<fillDecagon public="1" get="inline" set="null" line="259" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillDecagon>
		<fillHendecagon public="1" get="inline" set="null" line="263" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillHendecagon>
		<fillUndecagon public="1" get="inline" set="null" line="267" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillUndecagon>
		<fillDodecagon public="1" get="inline" set="null" line="271" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0 }</e></m></meta>
		</fillDodecagon>
		<softFillQuint public="1" get="inline" set="null" line="282" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:softC:?hasHit" v=":::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</softFillQuint>
		<fillSoftQuad public="1" get="inline" set="null" line="298" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuad>
		<fillSoftQuadFudge public="1" get="inline" set="null" line="314" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadFudge>
		<fillSoftQuadQuarter public="1" get="inline" set="null" line="328" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadQuarter>
		<fillSoftLine public="1" get="inline" set="null" line="339" static="1">
			<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftLine>
		<fillSoftLineLuxury public="1" get="inline" set="null" line="354" static="1">
			<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftLineLuxury>
		<softFillTriangle public="1" get="inline" set="null" line="370" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:color:soft3:?softAB:?softBC:?softCA:?hasHit" v=":::::::::true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitTri"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
		</softFillTriangle>
		<sweepTri public="1" get="inline" set="null" line="383" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</sweepTri>
		<tileSweepTri public="1" get="inline" set="null" line="398" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitTri"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileSweepTri>
		<fillPie public="1" get="inline" set="null" line="414" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit:?targetError" v="::::::::false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
		</fillPie>
		<tilePie public="1" get="inline" set="null" line="455" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit:?targetError" v="::::::::false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
		</tilePie>
		<sweepGradTri public="1" get="inline" set="null" line="494" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:colA:colB:colC:?hasHit" v="::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</sweepGradTri>
		<fillRadialPie public="1" get="inline" set="null" line="509" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:centreColor:outerColor:?hasHit:?targetError" v=":::::::::false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
		</fillRadialPie>
		<imgQuadFudge public="1" get="inline" set="null" line="552" static="1">
			<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
			<haxe_doc>works with image Fudge of UV values, deprediated unless turns out useful in edge cases.</haxe_doc>
		</imgQuadFudge>
		<imgRectFudge public="1" get="inline" set="null" line="560" static="1">
			<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?hasHit" v=":::::::0.:0.:0.:0.:0.:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
		</imgRectFudge>
		<fillArrow public="1" get="inline" set="null" line="619" static="1">
			<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::false:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
			<haxe_doc>provides a thick arrow using two triangles vector p, q</haxe_doc>
		</fillArrow>
		<fillArrowBoth public="1" get="inline" set="null" line="624" static="1">
			<f a="this:px:py:qx:qy:thick:color:?hasHit" v=":::::::true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</fillArrowBoth>
		<fillFixArrow public="1" get="inline" set="null" line="629" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::::false:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		</fillFixArrow>
		<fillFixArrowBoth public="1" get="inline" set="null" line="635" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?hasHit" v=":::::::::true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</fillFixArrowBoth>
		<fillSoftArrow public="1" get="inline" set="null" line="641" static="1">
			<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::false:false:40.:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fillSoftArrow>
		<fillSoftArrowBoth public="1" get="inline" set="null" line="646" static="1">
			<f a="this:px:py:qx:qy:thick:color:?soft:?hasHit" v=":::::::40.:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
		</fillSoftArrowBoth>
		<fillSoftFixArrow public="1" get="inline" set="null" line="651" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::::false:false:40.:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fillSoftFixArrow>
		<fillSoftFixArrowBoth public="1" get="inline" set="null" line="656" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?soft:?hasHit" v=":::::::::40.:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
		</fillSoftFixArrowBoth>
		<gradThickArrow public="1" get="inline" set="null" line="663" static="1">
			<f a="this:px:py:qx:qy:thick:color1:color2:?flare:reverseFlare:?hasHit" v="::::::::false::true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, flare : false }</e></m></meta>
		</gradThickArrow>
		<gradThickArrowBoth public="1" get="inline" set="null" line="668" static="1">
			<f a="this:px:py:qx:qy:thick:color1:color2:?hasHit" v="::::::::true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</gradThickArrowBoth>
		<gradThickFixArrow public="1" get="inline" set="null" line="673" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::::false:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		</gradThickFixArrow>
		<gradThickFixArrowBoth public="1" get="inline" set="null" line="678" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?hasHit" v="::::::::::true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</gradThickFixArrowBoth>
		<fillEllipseTri public="1" get="inline" set="null" line="689" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?printSides:?targetError" v="::::::0:false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
			<haxe_doc>this is used for drawing a filled ellipse or circle ( using triangles ), it uses more sides when larger and can be tweaked with targetError
        drawn from the circles/ellipses centre, with rx and ry the radius, phi allows rotatation of ellipses
        setup so large ellipses automatically use more sides.</haxe_doc>
		</fillEllipseTri>
		<softFillEllipseTri public="1" get="inline" set="null" line="698" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?softC:?printSides:?targetError" v="::::::0:10:false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, softC : 10, phi : 0 }</e></m></meta>
		</softFillEllipseTri>
		<tileEllipseTri public="1" get="inline" set="null" line="707" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi:?printSides:?targetError" v="::::::0:false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
		</tileEllipseTri>
		<lineEllipseTri public="1" get="inline" set="null" line="725" static="1">
			<f a="this:cx:cy:rx:ry:drx:dry:color:?phi:?printSides:?targetError" v="::::::::0:false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
			<haxe_doc>this is provides a thick outline ellipse or circle ( using triangles ), large ones have more sides.
        @:see fillEllipseTri
        it uses a temp pixelimage with transparent false,
        and a second ellipse to remove the centre before copying over pixels
        setup so large ellipses automatically use more sides.
        for phi rotated ellipses it over estimates the temp pixelimage to be safe</haxe_doc>
		</lineEllipseTri>
		<fillRadialEllipseTri public="1" get="inline" set="null" line="764" static="1">
			<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::0.:0.:0:false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0, gy : 0., gx : 0. }</e></m></meta>
			<haxe_doc>provides a filled ellipse/circle using triangles and more sides for large with a radial color gradient from the centre 
        colorIn is the internal colour and colorOut the external one, gx and gy -1 to 1 provide offset centre
        there are lots of limitations, gx and gy max and min obviously look bad and may need to scale them to 0.7 for rotated ellipse</haxe_doc>
		</fillRadialEllipseTri>
		<lineRadialEllipseTri public="1" get="inline" set="null" line="780" static="1">
			<f a="this:cx:cy:rx:ry:drx:dry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::::0.:0.:0:false:1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0, gy : 0., gx : 0. }</e></m></meta>
			<haxe_doc>radial ellipse thick line 
        @see fillRadialEllipseTri</haxe_doc>
		</lineRadialEllipseTri>
		<fillRadialRectangle public="1" get="inline" set="null" line="819" static="1">
			<f a="this:x:y:wid:hi:colorIn:colorOut:?gx:?gy" v=":::::::0:0">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ gy : 0, gx : 0 }</e></m></meta>
			<haxe_doc>provides a radial colour gradient, it uses a temp pixelimage to draw a rectangle and then radial ellipse within.
        @:see fillRadialEllipseTri</haxe_doc>
		</fillRadialRectangle>
		<fillQuadrant public="1" get="inline" set="null" line="838" static="1">
			<f a="this:cx:cy:rx:ry:startAngle:color:?phi:?targetError" v="::::::::1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>fill Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
		</fillQuadrant>
		<tileQuadrant public="1" get="inline" set="null" line="848" static="1">
			<f a="this:cx:cy:rx:ry:startAngle:tileImage:?phi:?targetError" v="::::::::1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>tiles Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
		</tileQuadrant>
		<fillPolyBuild public="1" get="inline" set="null" line="863" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
			<haxe_doc>this provides building block for regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
		</fillPolyBuild>
		<softFillPolyBuild public="1" get="inline" set="null" line="870" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?sides:?softC:?cornerUp" v="::::::0.:36:10.:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, softC : 10., sides : 36, phi : 0. }</e></m></meta>
		</softFillPolyBuild>
		<tilePolyBuild public="1" get="inline" set="null" line="885" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
			<haxe_doc>this provides building block for image tiled regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
		</tilePolyBuild>
		<fillRadialPolyon public="1" get="inline" set="null" line="898" static="1">
			<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:?cornerUp" v=":::::::0.:0.:0.:36:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0., gy : 0., gx : 0. }</e></m></meta>
			<haxe_doc>@see fillPolyBuild
        this is a version with radial gradient applied so the centre is one color, but only used gradient triangles so limited</haxe_doc>
		</fillRadialPolyon>
	</class>
	<class path="pixelimageXY.algo._ArrowPixel.ArrowPixel_Fields_" params="" file="src/pixelimageXY/algo/ArrowPixel.hx" private="1" module="pixelimageXY.algo.ArrowPixel" final="1">
		<fillLineArrow public="1" get="inline" set="null" line="13" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::false:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</fillLineArrow>
		<fillSoftLineArrow public="1" get="inline" set="null" line="64" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::false:false:40.:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fillSoftLineArrow>
		<gradThickLineArrow public="1" get="inline" set="null" line="119" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::false:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</gradThickLineArrow>
		<fillLineArrowBoth public="1" get="inline" set="null" line="169" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?hasHit" v=":::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillLineArrowBoth>
		<fillSoftLineArrowBoth public="1" get="inline" set="null" line="235" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?soft:?hasHit" v=":::::::40.:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40. }</e></m></meta>
		</fillSoftLineArrowBoth>
		<gradThickLineArrowBoth public="1" get="inline" set="null" line="301" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color1:color2:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</gradThickLineArrowBoth>
		<fillLineFixedArrow public="1" get="inline" set="null" line="371" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::::false:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</fillLineFixedArrow>
		<fillSoftLineFixedArrow public="1" get="inline" set="null" line="433" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::::false:false:40.:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fillSoftLineFixedArrow>
		<gradThickLineFixedArrow public="1" get="inline" set="null" line="490" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::::false:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</gradThickLineFixedArrow>
		<fillLineFixedArrowBoth public="1" get="inline" set="null" line="550" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?hasHit" v=":::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillLineFixedArrowBoth>
		<fillSoftLineFixedArrowBoth public="1" get="inline" set="null" line="627" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?soft:?hasHit" v=":::::::::40.:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40. }</e></m></meta>
		</fillSoftLineFixedArrowBoth>
		<gradThickLineFixedArrowBoth public="1" get="inline" set="null" line="702" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?hasHit" v="::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</gradThickLineFixedArrowBoth>
	</class>
	<class path="pixelimageXY.algo.BarycentricCoordinates" params="" file="src/pixelimageXY/algo/Barycentric.hx" module="pixelimageXY.algo.Barycentric">
		<ratioA public="1"><x path="Float"/></ratioA>
		<ratioB public="1"><x path="Float"/></ratioB>
		<ratioC public="1"><x path="Float"/></ratioC>
		<new public="1" get="inline" set="null" line="13"><f a="ratioA:ratioB:ratioC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.algo.BaryCoordinates" params="" file="src/pixelimageXY/algo/Barycentric.hx" module="pixelimageXY.algo.Barycentric">
		<from><icast><c path="pixelimageXY.algo.BarycentricCoordinates"/></icast></from>
		<this><c path="pixelimageXY.algo.BarycentricCoordinates"/></this>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="pixelimageXY.algo._Barycentric.BaryCoordinates_Impl_" params="" file="src/pixelimageXY/algo/Barycentric.hx" private="1" module="pixelimageXY.algo.Barycentric" final="1">
	<_new public="1" get="inline" set="null" line="22" static="1">
		<f a="bary">
			<c path="pixelimageXY.algo.BarycentricCoordinates"/>
			<x path="pixelimageXY.algo.BaryCoordinates"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<inTriangle public="1" get="inline" set="null" line="27" static="1"><f a="this">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
</f></inTriangle>
	<min public="1" get="accessor" set="null" static="1"><x path="Float"/></min>
	<get_min get="inline" set="null" line="32" static="1"><f a="this">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_min>
	<max public="1" get="accessor" set="null" static="1"><x path="Float"/></max>
	<get_max get="inline" set="null" line="38" static="1"><f a="this">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_max>
	<isSoft public="1" get="inline" set="null" line="43" static="1"><f a="this:softAB:softBC:softCA">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></isSoft>
</class></impl>
	</abstract>
	<class path="pixelimageXY.algo._Barycentric.BaryCoordinates_Impl_" params="" file="src/pixelimageXY/algo/Barycentric.hx" private="1" module="pixelimageXY.algo.Barycentric" final="1">
		<_new public="1" get="inline" set="null" line="22" static="1">
			<f a="bary">
				<c path="pixelimageXY.algo.BarycentricCoordinates"/>
				<x path="pixelimageXY.algo.BaryCoordinates"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<inTriangle public="1" get="inline" set="null" line="27" static="1"><f a="this">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
</f></inTriangle>
		<min public="1" get="accessor" set="null" static="1"><x path="Float"/></min>
		<get_min get="inline" set="null" line="32" static="1"><f a="this">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_min>
		<max public="1" get="accessor" set="null" static="1"><x path="Float"/></max>
		<get_max get="inline" set="null" line="38" static="1"><f a="this">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_max>
		<isSoft public="1" get="inline" set="null" line="43" static="1"><f a="this:softAB:softBC:softCA">
	<c path="pixelimageXY.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></isSoft>
	</class>
	<class path="pixelimageXY.algo.Barycentric" params="" file="src/pixelimageXY/algo/Barycentric.hx">
		<ax public="1"><x path="Float"/></ax>
		<ay public="1"><x path="Float"/></ay>
		<bx public="1"><x path="Float"/></bx>
		<by public="1"><x path="Float"/></by>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<preCalculated public="1"><x path="Bool"/></preCalculated>
		<xIter3 public="1"><x path="pixelimageXY.iter.IteratorRange"/></xIter3>
		<yIter3 public="1"><x path="pixelimageXY.iter.IteratorRange"/></yIter3>
		<bcx><x path="Float"/></bcx>
		<bcy><x path="Float"/></bcy>
		<acx><x path="Float"/></acx>
		<acy><x path="Float"/></acy>
		<dot11><x path="Float"/></dot11>
		<dot12><x path="Float"/></dot12>
		<dot22><x path="Float"/></dot22>
		<denom1><x path="Float"/></denom1>
		<preCalculateValues public="1" get="inline" set="null" line="101"><f a=""><x path="Void"/></f></preCalculateValues>
		<getInsideRatios public="1" get="inline" set="null" line="115"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.algo.BaryCoordinates"/>
</f></getInsideRatios>
		<getRatios public="1" get="inline" set="null" line="128"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.algo.BaryCoordinates"/>
</f></getRatios>
		<centroidX public="1" get="accessor" set="null"><x path="Float"/></centroidX>
		<get_centroidX get="inline" set="null" line="139"><f a=""><x path="Float"/></f></get_centroidX>
		<centroidY public="1" get="accessor" set="null"><x path="Float"/></centroidY>
		<get_centroidY get="inline" set="null" line="143"><f a=""><x path="Float"/></f></get_centroidY>
		<new public="1" get="inline" set="null" line="88">
			<f a="ax:ay:bx:by:cx:cy:?preCalculated" v="::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.algo.CirclePixel" params="" file="src/pixelimageXY/algo/CirclePixel.hx">
		<_circleError public="1" expr="circleError">
			<f a="radius:?targetE:?minN:?maxN">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleError</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">circleError</font> module level field
       @param targetE defaults 1.05 adjust to change the quality of the circle
       @param minN defaults 12, minimum sides used
       @param maxN defaults 500, maximum sides used]]></haxe_doc>
		</_circleError>
		<_getSidesDivisible4 public="1" expr="getSidesDivisible4">
			<f a="rx:ry:targetError">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>getSidesDivisible4</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">getSidesDivisible4</font> module level field
       @param targetE defaults 1.05 adjust to change the quality of the circle
       @return uses min dimension for target diameter returns nearest divisble by 4]]></haxe_doc>
		</_getSidesDivisible4>
		<new public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._CirclePixel.CirclePixel_Fields_" params="" file="src/pixelimageXY/algo/CirclePixel.hx" private="1" module="pixelimageXY.algo.CirclePixel" final="1">
		<circleError public="1" get="inline" set="null" line="7" static="1">
			<f a="radius:?targetE:?minN:?maxN" v=":1.05:12:500">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ maxN : 500, minN : 12, targetE : 1.05 }</e></m></meta>
		</circleError>
		<getSidesDivisible4 public="1" get="inline" set="null" line="18" static="1">
			<f a="rx:ry:?targetError" v="::1.05">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
		</getSidesDivisible4>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.RectangleWindow" params="" file="src/pixelimageXY/algo/GeomPix.hx" module="pixelimageXY.algo.GeomPix">
		<minMax public="1" get="inline" set="null" line="21" static="1"><f a="x:y:maxX:maxY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.RectangleWindow"/>
</f></minMax>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<new public="1" get="inline" set="null" line="14"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.algo.GeomPix" params="" file="src/pixelimageXY/algo/GeomPix.hx">
		<_smootherStep public="1" expr="smootherStep">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>smootherStep</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">smoothStep</font> module level field]]></haxe_doc>
		</_smootherStep>
		<_lerp public="1" expr="lerp">
			<f a="a:b:t">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>lerp</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">lerp</font> module level field]]></haxe_doc>
		</_lerp>
		<_lerp4Colors public="1" expr="lerp4Colors">
			<f a="colorhiA:colorhiB:colorloC:colorloD:u:v:smooth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lerp4Colors</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">lerp4Colors</font> module level field
       @param smooth defaults to true]]></haxe_doc>
		</_lerp4Colors>
		<_cross2d public="1" expr="cross2d">
			<f a="ax:ay:bx:by">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cross2d</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">cross2d</font> module level field]]></haxe_doc>
		</_cross2d>
		<_dot public="1" expr="dot">
			<f a="ax:ay:bx:by">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>dot</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">dot</font> module level field]]></haxe_doc>
		</_dot>
		<_dotSame public="1" expr="dotSame">
			<f a="ax:ay">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>dotSame</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">dotSame</font> module level field]]></haxe_doc>
		</_dotSame>
		<_distanceSquarePointToSegment public="1" expr="distanceSquarePointToSegment">
			<f a="x:y:x1:y1:x2:y2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distanceSquarePointToSegment</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">distanceSquarePointToSegment</font> module level field]]></haxe_doc>
		</_distanceSquarePointToSegment>
		<_rotX public="1" expr="rotX">
			<f a="x:y:sin:cos">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rotX</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotX</font> module level field]]></haxe_doc>
		</_rotX>
		<_rotY public="1" expr="rotY">
			<f a="x:y:sin:cos">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rotY</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotY</font> module level field]]></haxe_doc>
		</_rotY>
		<new public="1" set="method" line="97">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._GeomPix.GeomPix_Fields_" params="" file="src/pixelimageXY/algo/GeomPix.hx" private="1" module="pixelimageXY.algo.GeomPix" final="1">
		<smootherStep public="1" get="inline" set="null" line="27" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
		<lerp public="1" get="inline" set="null" line="32" static="1"><f a="a:b:t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></lerp>
		<lerp4Colors public="1" get="inline" set="null" line="37" static="1">
			<f a="colorhiA:colorhiB:colorloC:colorloD:u:v:?smooth" v="::::::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</lerp4Colors>
		<lerp2Colors public="1" get="inline" set="null" line="44" static="1">
			<f a="colA:colB:t:?smooth" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</lerp2Colors>
		<cross2d public="1" get="inline" set="null" line="64" static="1"><f a="ax:ay:bx:by">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cross2d>
		<dot public="1" get="inline" set="null" line="67" static="1"><f a="ax:ay:bx:by">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dot>
		<dotSame public="1" get="inline" set="null" line="70" static="1"><f a="ax:ay">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dotSame>
		<distanceSquarePointToSegment public="1" get="inline" set="null" line="76" static="1"><f a="x:y:x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distanceSquarePointToSegment>
		<rotX public="1" get="inline" set="null" line="89" static="1"><f a="x:y:sin:cos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rotX>
		<rotY public="1" get="inline" set="null" line="93" static="1"><f a="x:y:sin:cos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rotY>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.IhitObj" params="" file="src/pixelimageXY/algo/IhitObj.hx" interface="1">
		<hit public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<undoImage public="1"><x path="Null"><x path="pixelimageXY.Pixelimage"/></x></undoImage>
		<undoX public="1"><x path="Int"/></undoX>
		<undoY public="1"><x path="Int"/></undoY>
	</class>
	<class path="pixelimageXY.algo.HitEllipse" params="" file="src/pixelimageXY/algo/HitEllipse.hx">
		<implements path="pixelimageXY.algo.IhitObj"/>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<rx public="1"><x path="Float"/></rx>
		<ry public="1"><x path="Float"/></ry>
		<phi public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</phi>
		<x_phi_rx><x path="Float"/></x_phi_rx>
		<x_phi_ry><x path="Float"/></x_phi_ry>
		<y_phi_rx><x path="Float"/></y_phi_rx>
		<y_phi_ry><x path="Float"/></y_phi_ry>
		<undoImage public="1" expr="null">
			<x path="Null"><x path="pixelimageXY.Pixelimage"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</undoImage>
		<undoX public="1"><x path="Int"/></undoX>
		<undoY public="1"><x path="Int"/></undoY>
		<hit public="1" get="inline" set="null" line="36"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new get="inline" set="null" line="17">
			<f a="cx:cy:rx:ry:?phi" v="::::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.algo.QuadPoints_" params="" file="src/pixelimageXY/algo/QuadPoints.hx" module="pixelimageXY.algo.QuadPoints">
		<ax public="1"><x path="Float"/></ax>
		<ay public="1"><x path="Float"/></ay>
		<bx public="1"><x path="Float"/></bx>
		<by public="1"><x path="Float"/></by>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<new public="1" get="inline" set="null" line="42"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.algo.HitQuad" params="" file="src/pixelimageXY/algo/HitQuad.hx">
		<extends path="pixelimageXY.algo.QuadPoints_"/>
		<implements path="pixelimageXY.algo.IhitObj"/>
		<triABD public="1"><c path="pixelimageXY.algo.HitTri"/></triABD>
		<triBCD public="1"><c path="pixelimageXY.algo.HitTri"/></triBCD>
		<xIter4 public="1"><x path="pixelimageXY.iter.IteratorRange"/></xIter4>
		<yIter4 public="1"><x path="pixelimageXY.iter.IteratorRange"/></yIter4>
		<undoImage public="1" expr="null">
			<x path="Null"><x path="pixelimageXY.Pixelimage"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</undoImage>
		<undoX public="1"><x path="Int"/></undoX>
		<undoY public="1"><x path="Int"/></undoY>
		<preCalculateValues public="1" get="inline" set="null" line="28"><f a=""><x path="Void"/></f></preCalculateValues>
		<hit public="1" get="inline" set="null" line="36"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<pushTriangles public="1" get="inline" set="null" line="50"><f a="arrTri">
	<c path="Array"><c path="pixelimageXY.algo.HitTri"/></c>
	<c path="Array"><c path="pixelimageXY.algo.HitTri"/></c>
</f></pushTriangles>
		<new public="1" get="inline" set="null" line="17">
			<f a="ax:ay:bx:by:cx:cy:dx:dy:?preCalculated" v="::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.algo.TriPoints_" params="" file="src/pixelimageXY/algo/TriPoints.hx" module="pixelimageXY.algo.TriPoints">
		<ax public="1"><x path="Float"/></ax>
		<ay public="1"><x path="Float"/></ay>
		<bx public="1"><x path="Float"/></bx>
		<by public="1"><x path="Float"/></by>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<new public="1" get="inline" set="null" line="19"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.algo.HitTri" params="" file="src/pixelimageXY/algo/HitTri.hx">
		<extends path="pixelimageXY.algo.TriPoints_"/>
		<implements path="pixelimageXY.algo.IhitObj"/>
		<preCalculated public="1"><x path="Bool"/></preCalculated>
		<s0><x path="Float"/></s0>
		<sx><x path="Float"/></sx>
		<sy><x path="Float"/></sy>
		<t0><x path="Float"/></t0>
		<tx><x path="Float"/></tx>
		<ty><x path="Float"/></ty>
		<A><x path="Float"/></A>
		<xIter3 public="1"><x path="pixelimageXY.iter.IteratorRange"/></xIter3>
		<yIter3 public="1"><x path="pixelimageXY.iter.IteratorRange"/></yIter3>
		<undoImage public="1" expr="null">
			<x path="Null"><x path="pixelimageXY.Pixelimage"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</undoImage>
		<undoX public="1"><x path="Int"/></undoX>
		<undoY public="1"><x path="Int"/></undoY>
		<preCalculateValues public="1" get="inline" set="null" line="33"><f a=""><x path="Void"/></f></preCalculateValues>
		<hit public="1" get="inline" set="null" line="46"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new public="1" get="inline" set="null" line="22">
			<f a="ax:ay:bx:by:cx:cy:?preCalculated" v="::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.algo.HitTriArray" params="" file="src/pixelimageXY/algo/HitTriArray.hx">
		<implements path="pixelimageXY.algo.IhitObj"/>
		<triArr public="1"><c path="Array"><c path="pixelimageXY.algo.HitTri"/></c></triArr>
		<xRange><x path="pixelimageXY.iter.IteratorRange"/></xRange>
		<yRange><x path="pixelimageXY.iter.IteratorRange"/></yRange>
		<undoImage public="1" expr="null">
			<x path="Null"><x path="pixelimageXY.Pixelimage"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</undoImage>
		<undoX public="1"><x path="Int"/></undoX>
		<undoY public="1"><x path="Int"/></undoY>
		<boundsCalculated public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</boundsCalculated>
		<calculateBounds get="inline" set="null" line="20"><f a=""><x path="Void"/></f></calculateBounds>
		<hit public="1" get="inline" set="null" line="41"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new public="1" get="inline" set="null" line="16"><f a="triArr">
	<c path="Array"><c path="pixelimageXY.algo.HitTri"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.algo.SampleData" params="" file="src/pixelimageXY/algo/HitTriScalar.hx" module="pixelimageXY.algo.HitTriScalar">
		<fractionTotal public="1"><x path="Float"/></fractionTotal>
		<averageX public="1"><x path="Float"/></averageX>
		<averageY public="1"><x path="Float"/></averageY>
		<notHit public="1"><x path="Bool"/></notHit>
		<new public="1" get="inline" set="null" line="15"><f a="fractionTotal:averageX:averageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.algo.HitTriScalar" params="" file="src/pixelimageXY/algo/HitTriScalar.hx">
		<from><icast><c path="pixelimageXY.algo.HitTri"/></icast></from>
		<this><c path="pixelimageXY.algo.HitTri"/></this>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="pixelimageXY.algo._HitTriScalar.HitTriScalar_Impl_" params="" file="src/pixelimageXY/algo/HitTriScalar.hx" private="1" module="pixelimageXY.algo.HitTriScalar" final="1">
	<centroidX public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidX>
	<get_centroidX get="inline" set="null" line="27" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></get_centroidX>
	<centroidY public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidY>
	<get_centroidY get="inline" set="null" line="31" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></get_centroidY>
	<medianABx public="1" set="method" line="34" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianABx>
	<medianBCx public="1" set="method" line="37" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianBCx>
	<medianCAx public="1" set="method" line="40" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianCAx>
	<medianABy public="1" set="method" line="43" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianABy>
	<medianBCy public="1" set="method" line="46" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianBCy>
	<medianCAy public="1" set="method" line="49" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianCAy>
	<scaled public="1" get="inline" set="null" line="53" static="1"><f a="this:scaleA:scaleB:scaleC">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.algo.HitTriScalar"/>
</f></scaled>
	<scalePoint get="inline" set="null" line="98" static="1"><f a="this:point:scale:centre">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scalePoint>
	<triangleSample public="1" get="inline" set="null" line="105" static="1"><f a="this:x:y">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.SampleData"/>
</f></triangleSample>
	<squareSample public="1" get="inline" set="null" line="148" static="1"><f a="this:x:y">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.SampleData"/>
</f></squareSample>
	<pentagonSample public="1" get="inline" set="null" line="198" static="1"><f a="this:x:y">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.SampleData"/>
</f></pentagonSample>
	<barycentric public="1" get="accessor" set="null" static="1"><c path="pixelimageXY.algo.Barycentric"/></barycentric>
	<get_barycentric get="inline" set="null" line="257" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<c path="pixelimageXY.algo.Barycentric"/>
</f></get_barycentric>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="pixelimageXY.algo._HitTriScalar.HitTriScalar_Impl_" params="" file="src/pixelimageXY/algo/HitTriScalar.hx" private="1" module="pixelimageXY.algo.HitTriScalar" final="1">
		<centroidX public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidX>
		<get_centroidX get="inline" set="null" line="27" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></get_centroidX>
		<centroidY public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidY>
		<get_centroidY get="inline" set="null" line="31" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></get_centroidY>
		<medianABx public="1" set="method" line="34" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianABx>
		<medianBCx public="1" set="method" line="37" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianBCx>
		<medianCAx public="1" set="method" line="40" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianCAx>
		<medianABy public="1" set="method" line="43" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianABy>
		<medianBCy public="1" set="method" line="46" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianBCy>
		<medianCAy public="1" set="method" line="49" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
</f></medianCAy>
		<scaled public="1" get="inline" set="null" line="53" static="1"><f a="this:scaleA:scaleB:scaleC">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.algo.HitTriScalar"/>
</f></scaled>
		<scalePoint get="inline" set="null" line="98" static="1"><f a="this:point:scale:centre">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scalePoint>
		<triangleSample public="1" get="inline" set="null" line="105" static="1"><f a="this:x:y">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.SampleData"/>
</f></triangleSample>
		<squareSample public="1" get="inline" set="null" line="148" static="1"><f a="this:x:y">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.SampleData"/>
</f></squareSample>
		<pentagonSample public="1" get="inline" set="null" line="198" static="1"><f a="this:x:y">
	<c path="pixelimageXY.algo.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="pixelimageXY.algo.SampleData"/>
</f></pentagonSample>
		<barycentric public="1" get="accessor" set="null" static="1"><c path="pixelimageXY.algo.Barycentric"/></barycentric>
		<get_barycentric get="inline" set="null" line="257" static="1"><f a="this">
	<c path="pixelimageXY.algo.HitTri"/>
	<c path="pixelimageXY.algo.Barycentric"/>
</f></get_barycentric>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.LinePixel" params="" file="src/pixelimageXY/algo/LinePixel.hx">
		<_rotateLine public="1" expr="rotateLine">
			<f a="pixelImage:px:py:thick:h:theta:color:hasHit:debugCorners">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>rotateLine</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_rotateLine>
		<_rotateTileLine public="1" expr="rotateTileLine">
			<f a="pixelImage:px:py:thick:h:theta:tileImage:hasHit:?debugCorners">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>rotateTileLine</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateTileLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_rotateTileLine>
		<_rotateGradLine public="1" expr="rotateGradLine">
			<f a="pixelImage:px:py:thick:h:theta:colorA:colorB:colorC:colorD:hasHit:?debugCorners">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>rotateGradLine</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_rotateGradLine>
		<new public="1" set="method" line="544">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._LinePixel.LinePixel_Fields_" params="" file="src/pixelimageXY/algo/LinePixel.hx" private="1" module="pixelimageXY.algo.LinePixel" final="1">
		<rotateLine public="1" get="inline" set="null" line="15" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?hasHit:?debugCorners" v=":::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		</rotateLine>
		<rotateSoftLine public="1" get="inline" set="null" line="69" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40.:true:true:true:true:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40. }</e></m></meta>
		</rotateSoftLine>
		<rotateSoftLineLuxury public="1" get="inline" set="null" line="123" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40.:true:true:true:true:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40. }</e></m></meta>
		</rotateSoftLineLuxury>
		<rotateSoftLinePartial public="1" get="inline" set="null" line="177" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit:?debugCorners" v=":::::::10.:true:true:true:true:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10. }</e></m></meta>
		</rotateSoftLinePartial>
		<rotateLineFlare public="1" get="inline" set="null" line="226" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:color:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rotateLineFlare>
		<rotateSoftLineFlare public="1" get="inline" set="null" line="274" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit" v="::::::::10.:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10. }</e></m></meta>
		</rotateSoftLineFlare>
		<rotateSoftLineFlarePartial public="1" get="inline" set="null" line="322" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit" v="::::::::10.:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10. }</e></m></meta>
		</rotateSoftLineFlarePartial>
		<rotateTileLine public="1" get="inline" set="null" line="367" static="1">
			<f a="pixelImage:px:py:thick:h:theta:tileImage:?hasHit:?debugCorners" v=":::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		</rotateTileLine>
		<rotateTileLineFlare public="1" get="inline" set="null" line="416" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:tileImage:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rotateTileLineFlare>
		<rotateGradLine public="1" get="inline" set="null" line="461" static="1">
			<f a="pixelImage:px:py:thick:h:theta:colorA:colorB:colorC:colorD:?hasHit:?debugCorners" v="::::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		</rotateGradLine>
		<rotateGradLineFlare public="1" get="inline" set="null" line="511" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:colorA:colorB:colorC:colorD:?hasHit" v=":::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rotateGradLineFlare>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="pixelimageXY.algo.Dig" params="" file="src/pixelimageXY/algo/MultiBool.hx" module="pixelimageXY.algo.MultiBool">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="pixelimageXY.algo._MultiBool.Dig_Impl_" params="" file="src/pixelimageXY/algo/MultiBool.hx" private="1" module="pixelimageXY.algo.MultiBool" extern="1" final="1">
	<_0 public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_0>
	<_1 public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_1>
	<_2 public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_2>
	<_3 public="1" get="inline" set="null" expr="cast 8" line="10" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_3>
	<_4 public="1" get="inline" set="null" expr="cast 16" line="11" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_4>
	<_5 public="1" get="inline" set="null" expr="cast 32" line="12" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_5>
	<_6 public="1" get="inline" set="null" expr="cast 64" line="13" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 64</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_6>
	<_7 public="1" get="inline" set="null" expr="cast 128" line="14" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 128</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_7>
	<_8 public="1" get="inline" set="null" expr="cast 264" line="15" static="1">
		<x path="pixelimageXY.algo.Dig"/>
		<meta>
			<m n=":value"><e>cast 264</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</_8>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="pixelimageXY.algo._MultiBool.Dig_Impl_" params="" file="src/pixelimageXY/algo/MultiBool.hx" private="1" module="pixelimageXY.algo.MultiBool" extern="1" final="1">
		<_0 public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_0>
		<_1 public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_1>
		<_2 public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_2>
		<_3 public="1" get="inline" set="null" expr="cast 8" line="10" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_3>
		<_4 public="1" get="inline" set="null" expr="cast 16" line="11" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_4>
		<_5 public="1" get="inline" set="null" expr="cast 32" line="12" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_5>
		<_6 public="1" get="inline" set="null" expr="cast 64" line="13" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 64</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_6>
		<_7 public="1" get="inline" set="null" expr="cast 128" line="14" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 128</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_7>
		<_8 public="1" get="inline" set="null" expr="cast 264" line="15" static="1">
			<x path="pixelimageXY.algo.Dig"/>
			<meta>
				<m n=":value"><e>cast 264</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</_8>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="pixelimageXY.algo.MultiBool" params="" file="src/pixelimageXY/algo/MultiBool.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<impl><class path="pixelimageXY.algo._MultiBool.MultiBool_Impl_" params="" file="src/pixelimageXY/algo/MultiBool.hx" private="1" module="pixelimageXY.algo.MultiBool" final="1">
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="?v" v="0">
			<x path="Int"/>
			<x path="pixelimageXY.algo.MultiBool"/>
		</f>
		<meta>
			<m n=":value"><e>{ v : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<trueMask public="1" get="inline" set="null" line="23" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Int"/>
</f></trueMask>
	<falseMask public="1" get="inline" set="null" line="28" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Int"/>
</f></falseMask>
	<toggle public="1" get="inline" set="null" line="33" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Int"/>
</f></toggle>
	<value public="1" get="inline" set="null" line="38" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Bool"/>
</f></value>
	<valueS public="1" get="inline" set="null" line="42" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<c path="String"/>
</f></valueS>
	<toString public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<trueTill0 public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill0>
	<trueTill1 public="1" get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill1>
	<trueTill2 public="1" get="inline" set="null" line="61" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill2>
	<trueTill3 public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill3>
	<trueTill4 public="1" get="inline" set="null" line="69" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill4>
	<trueTill5 public="1" get="inline" set="null" line="73" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill5>
	<trueTill6 public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill6>
	<trueTill7 public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill7>
	<trueTill8 public="1" get="inline" set="null" line="87" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill8>
	<trueTill public="1" get="inline" set="null" line="94" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Bool"/>
</f></trueTill>
</class></impl>
	</abstract>
	<class path="pixelimageXY.algo._MultiBool.MultiBool_Impl_" params="" file="src/pixelimageXY/algo/MultiBool.hx" private="1" module="pixelimageXY.algo.MultiBool" final="1">
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="?v" v="0">
				<x path="Int"/>
				<x path="pixelimageXY.algo.MultiBool"/>
			</f>
			<meta>
				<m n=":value"><e>{ v : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<trueMask public="1" get="inline" set="null" line="23" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Int"/>
</f></trueMask>
		<falseMask public="1" get="inline" set="null" line="28" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Int"/>
</f></falseMask>
		<toggle public="1" get="inline" set="null" line="33" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Int"/>
</f></toggle>
		<value public="1" get="inline" set="null" line="38" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Bool"/>
</f></value>
		<valueS public="1" get="inline" set="null" line="42" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<c path="String"/>
</f></valueS>
		<toString public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<trueTill0 public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill0>
		<trueTill1 public="1" get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill1>
		<trueTill2 public="1" get="inline" set="null" line="61" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill2>
		<trueTill3 public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill3>
		<trueTill4 public="1" get="inline" set="null" line="69" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill4>
		<trueTill5 public="1" get="inline" set="null" line="73" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill5>
		<trueTill6 public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill6>
		<trueTill7 public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill7>
		<trueTill8 public="1" get="inline" set="null" line="87" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></trueTill8>
		<trueTill public="1" get="inline" set="null" line="94" static="1"><f a="this:mask">
	<x path="Int"/>
	<x path="pixelimageXY.algo.Dig"/>
	<x path="Bool"/>
</f></trueTill>
	</class>
	<class path="pixelimageXY.algo.PentagonSampler" params="" file="src/pixelimageXY/algo/PentagonSampler.hx">
		<x0 public="1" get="accessor" set="null" static="1"><x path="Float"/></x0>
		<get_x0 public="1" get="inline" set="null" line="5" static="1"><f a=""><x path="Float"/></f></get_x0>
		<x1 public="1" get="accessor" set="null" static="1"><x path="Float"/></x1>
		<get_x1 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_x1>
		<x2 public="1" get="accessor" set="null" static="1"><x path="Float"/></x2>
		<get_x2 public="1" get="inline" set="null" line="13" static="1"><f a=""><x path="Float"/></f></get_x2>
		<x3 public="1" get="accessor" set="null" static="1"><x path="Float"/></x3>
		<get_x3 public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_x3>
		<x4 public="1" get="accessor" set="null" static="1"><x path="Float"/></x4>
		<get_x4 public="1" get="inline" set="null" line="21" static="1"><f a=""><x path="Float"/></f></get_x4>
		<y0 public="1" get="accessor" set="null" static="1"><x path="Float"/></y0>
		<get_y0 public="1" get="inline" set="null" line="25" static="1"><f a=""><x path="Float"/></f></get_y0>
		<y1 public="1" get="accessor" set="null" static="1"><x path="Float"/></y1>
		<get_y1 public="1" get="inline" set="null" line="29" static="1"><f a=""><x path="Float"/></f></get_y1>
		<y2 public="1" get="accessor" set="null" static="1"><x path="Float"/></y2>
		<get_y2 public="1" get="inline" set="null" line="33" static="1"><f a=""><x path="Float"/></f></get_y2>
		<y3 public="1" get="accessor" set="null" static="1"><x path="Float"/></y3>
		<get_y3 public="1" get="inline" set="null" line="37" static="1"><f a=""><x path="Float"/></f></get_y3>
		<y4 public="1" get="accessor" set="null" static="1"><x path="Float"/></y4>
		<get_y4 public="1" get="inline" set="null" line="41" static="1"><f a=""><x path="Float"/></f></get_y4>
		<getXs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getXs>
		<getYs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getYs>
	</class>
	<class path="pixelimageXY.algo.PolyPixel" params="" file="src/pixelimageXY/algo/PolyPixel.hx">
		<_fillPolygonBuild public="1" expr="fillPolygonBuild">
			<f a="pixelimage:cx:cy:rx:ry:color:?phi:?sides:cornerUp">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillPolygonBuild</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillPolygonBuild</font> module level field]]></haxe_doc>
		</_fillPolygonBuild>
		<_tilePolygonBuild public="1" expr="tilePolygonBuild">
			<f a="pixelimage:cx:cy:rx:ry:tileImage:?phi:?sides:cornerUp">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>tilePolygonBuild</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">tilePolygonBuild</font> module level field]]></haxe_doc>
		</_tilePolygonBuild>
		<_fillRadialPolyBuild public="1" expr="fillRadialPolyBuild">
			<f a="pixelimage:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:cornerUp">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillRadialPolyBuild</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillRadialPolyBuild</font> module level field]]></haxe_doc>
		</_fillRadialPolyBuild>
		<new public="1" set="method" line="250">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._PolyPixel.PolyPixel_Fields_" params="" file="src/pixelimageXY/algo/PolyPixel.hx" private="1" module="pixelimageXY.algo.PolyPixel" final="1">
		<fillPolygonBuild public="1" get="inline" set="null" line="13" static="1">
			<f a="pixelimage:cx:cy:rx:ry:color:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		</fillPolygonBuild>
		<softFillPolygonBuild public="1" get="inline" set="null" line="73" static="1">
			<f a="pixelimage:cx:cy:rx:ry:color:?phi:?sides:?softC:?cornerUp" v="::::::0.:36:10:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, softC : 10, sides : 36, phi : 0. }</e></m></meta>
		</softFillPolygonBuild>
		<tilePolygonBuild public="1" get="inline" set="null" line="132" static="1">
			<f a="pixelimage:cx:cy:rx:ry:tileImage:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		</tilePolygonBuild>
		<fillRadialPolyBuild public="1" get="inline" set="null" line="192" static="1">
			<f a="pixelimage:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:?cornerUp" v=":::::::0:0:0.:36:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0., gy : 0, gx : 0 }</e></m></meta>
		</fillRadialPolyBuild>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.QuadPixel" params="" file="src/pixelimageXY/algo/QuadPixel.hx">
		<_fillQuadrilateral public="1" expr="fillQuadrilateral">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:hasHit">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>fillQuadrilateral</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillQuadrilateral>
		<_tileQuadrilateral public="1" expr="tileQuadrilateral">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:tileImage:hasHit">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>tileQuadrilateral</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_tileQuadrilateral>
		<_fillGradQuadrilateral public="1" expr="fillGradQuadrilateral">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:hasHit">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>fillGradQuadrilateral</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillGradQuadrilateral>
		<new public="1" set="method" line="311">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._QuadPixel.QuadPixel_Fields_" params="" file="src/pixelimageXY/algo/QuadPixel.hx" private="1" module="pixelimageXY.algo.QuadPixel" final="1">
		<fillQuadrilateral public="1" get="inline" set="null" line="18" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillQuadrilateral>
		<fillSoftQuadrilateral public="1" get="inline" set="null" line="48" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadrilateral>
		<fillSoftQuadrilateralFudge public="1" get="inline" set="null" line="72" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadrilateralFudge>
		<fillSoftQuadrilateralQuarter public="1" get="inline" set="null" line="97" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadrilateralQuarter>
		<tileQuadrilateral public="1" get="inline" set="null" line="122" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:tileImage:?hasHit" v="::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileQuadrilateral>
		<fillGradQuadrilateral public="1" get="inline" set="null" line="141" static="1">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:?hasHit" v=":::::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillGradQuadrilateral>
		<imgQuadrilateralFudge public="1" get="inline" set="null" line="161" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</imgQuadrilateralFudge>
		<imgQuadrilateral public="1" get="inline" set="null" line="183" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?au:?av:?bu:?bv:?cu:?cv:?du:?dv:?hasHit" v=":::::::::::0.:0.:1.:0.:1.:1.:0.:1.:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, dv : 1., du : 0., cv : 1., cu : 1., bv : 0., bu : 1., av : 0., au : 0. }</e></m></meta>
		</imgQuadrilateral>
		<imageNineSlice public="1" get="inline" set="null" line="206" static="1">
			<f a="pixelImage:texture:win:x:y:wid:hi:left:top:fat:tall:widNew:hiNew:leftNew:topNew:fatNew:tallNew:?hasHit" v=":::::::::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</imageNineSlice>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.LineInfo" params="" file="src/pixelimageXY/algo/QuadPoints.hx" module="pixelimageXY.algo.QuadPoints">
		<px public="1"><x path="Float"/></px>
		<py public="1"><x path="Float"/></py>
		<thick public="1"><x path="Float"/></thick>
		<long public="1"><x path="Float"/></long>
		<theta public="1"><x path="Float"/></theta>
		<new public="1" get="inline" set="null" line="15"><f a="px:py:thick:long:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<abstract path="pixelimageXY.algo.QuadPoints" params="" file="src/pixelimageXY/algo/QuadPoints.hx">
		<from>
			<icast><c path="pixelimageXY.algo.QuadPoints_"/></icast>
			<icast field="fromLineInfo"><c path="pixelimageXY.algo.LineInfo"/></icast>
		</from>
		<this><c path="pixelimageXY.algo.QuadPoints_"/></this>
		<to><icast><c path="pixelimageXY.algo.QuadPoints_"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="pixelimageXY.algo._QuadPoints.QuadPoints_Impl_" params="" file="src/pixelimageXY/algo/QuadPoints.hx" private="1" module="pixelimageXY.algo.QuadPoints" final="1">
	<_new public="1" get="inline" set="null" line="56" static="1">
		<f a="qp">
			<c path="pixelimageXY.algo.QuadPoints_"/>
			<x path="pixelimageXY.algo.QuadPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromLineInfo public="1" get="inline" set="null" line="62" static="1">
		<f a="lineInfo">
			<c path="pixelimageXY.algo.LineInfo"/>
			<x path="pixelimageXY.algo.QuadPoints"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromLineInfo>
	<rotate public="1" get="inline" set="null" line="97" static="1"><f a="this:theta:centreX:centreY">
	<c path="pixelimageXY.algo.QuadPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<getHit public="1" get="inline" set="null" line="128" static="1">
		<f a="this:?preCalculated" v=":true">
			<c path="pixelimageXY.algo.QuadPoints_"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
	</getHit>
</class></impl>
	</abstract>
	<class path="pixelimageXY.algo._QuadPoints.QuadPoints_Impl_" params="" file="src/pixelimageXY/algo/QuadPoints.hx" private="1" module="pixelimageXY.algo.QuadPoints" final="1">
		<_new public="1" get="inline" set="null" line="56" static="1">
			<f a="qp">
				<c path="pixelimageXY.algo.QuadPoints_"/>
				<x path="pixelimageXY.algo.QuadPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromLineInfo public="1" get="inline" set="null" line="62" static="1">
			<f a="lineInfo">
				<c path="pixelimageXY.algo.LineInfo"/>
				<x path="pixelimageXY.algo.QuadPoints"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromLineInfo>
		<rotate public="1" get="inline" set="null" line="97" static="1"><f a="this:theta:centreX:centreY">
	<c path="pixelimageXY.algo.QuadPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<getHit public="1" get="inline" set="null" line="128" static="1">
			<f a="this:?preCalculated" v=":true">
				<c path="pixelimageXY.algo.QuadPoints_"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</getHit>
	</class>
	<class path="pixelimageXY.algo._QuadrantPixel.QuadrantPixel_Fields_" params="" file="src/pixelimageXY/algo/QuadrantPixel.hx" private="1" module="pixelimageXY.algo.QuadrantPixel" final="1">
		<solidQuadrant public="1" get="inline" set="null" line="15" static="1">
			<f a="pixelimage:cx:cy:rx:ry:startAngle:color:?phi:?targetError" v="::::::::1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>* fillQuadrant draws a quarter arc.
     *</haxe_doc>
		</solidQuadrant>
		<tileSolidQuadrant public="1" get="inline" set="null" line="62" static="1">
			<f a="pixelimage:cx:cy:rx:ry:startAngle:tileImage:?phi:?targetError" v="::::::::1.05">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>* fillQuadrant draws a quarter arc.
     *</haxe_doc>
		</tileSolidQuadrant>
	</class>
	<class path="pixelimageXY.algo._QuintPixel.QuintPixel_Fields_" params="" file="src/pixelimageXY/algo/QuintPixel.hx" private="1" module="pixelimageXY.algo.QuintPixel" final="1">
		<softFillQuintilateral public="1" get="inline" set="null" line="20" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?softC:?hasHit" v="::::::::::10:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softC : 10 }</e></m></meta>
		</softFillQuintilateral>
		<softFillQuintilateralPartial public="1" get="inline" set="null" line="63" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit" v="::::::::::10:true:true:true:true:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10 }</e></m></meta>
		</softFillQuintilateralPartial>
	</class>
	<class path="pixelimageXY.algo.RectanglePixel" params="" file="src/pixelimageXY/algo/RectanglePixel.hx">
		<_fillRadialRect public="1" expr="fillRadialRect">
			<f a="pixelimage:x:y:wid:hi:colorIn:colorOut:?gx:?gy:?edgePoints">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillRadialRect</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillRadialRect</font> module level field]]></haxe_doc>
		</_fillRadialRect>
		<new public="1" set="method" line="82">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._RectanglePixel.RectanglePixel_Fields_" params="" file="src/pixelimageXY/algo/RectanglePixel.hx" private="1" module="pixelimageXY.algo.RectanglePixel" final="1">
		<fillRadialRect public="1" get="inline" set="null" line="14" static="1">
			<f a="pixelimage:x:y:wid:hi:colorIn:colorOut:?gx:?gy:?edgePoints" v=":::::::0:0:4">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ edgePoints : 4, gy : 0, gx : 0 }</e></m></meta>
		</fillRadialRect>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.RoundRecPixel" params="" file="src/pixelimageXY/algo/RoundRecPixel.hx">
		<_fillRoundRectangle public="1" expr="fillRoundRectangle">
			<f a="pixelshape:x:y:wid:hi:color:?dx:?dy:?fat:?tall">
				<x path="pixelimageXY.Pixelshape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillRoundRectangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillRoundRectangle</font> module level field]]></haxe_doc>
		</_fillRoundRectangle>
		<_tileRoundRectangle public="1" expr="tileRoundRectangle">
			<f a="pixelshape:x:y:wid:hi:tileImage:?dx:?dy:?fat:?tall">
				<x path="pixelimageXY.Pixelshape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>tileRoundRectangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">tileRoundRectangle</font> module level field]]></haxe_doc>
		</_tileRoundRectangle>
		<_fillGrad4RoundRectangle public="1" expr="fillGrad4RoundRectangle">
			<f a="pixelshape:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall">
				<x path="pixelimageXY.Pixelshape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillGrad4RoundRectangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillGrad4RoundRectangle</font> module level field]]></haxe_doc>
		</_fillGrad4RoundRectangle>
		<new public="1" set="method" line="130">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._RoundRecPixel.RoundRecPixel_Fields_" params="" file="src/pixelimageXY/algo/RoundRecPixel.hx" private="1" module="pixelimageXY.algo.RoundRecPixel" final="1">
		<fillRoundRectangle public="1" get="inline" set="null" line="20" static="1">
			<f a="pixelshape:x:y:wid:hi:color:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelshape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</fillRoundRectangle>
		<tileRoundRectangle public="1" get="inline" set="null" line="60" static="1">
			<f a="pixelshape:x:y:wid:hi:tileImage:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelshape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</tileRoundRectangle>
		<fillGrad4RoundRectangle public="1" get="inline" set="null" line="100" static="1">
			<f a="pixelshape:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v=":::::::::-1.:-1.:-1.:-1.">
				<x path="pixelimageXY.Pixelshape"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</fillGrad4RoundRectangle>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo.SquareSampler" params="" file="src/pixelimageXY/algo/SquareSampler.hx">
		<x0 public="1" get="accessor" set="null" static="1"><x path="Float"/></x0>
		<get_x0 public="1" get="inline" set="null" line="5" static="1"><f a=""><x path="Float"/></f></get_x0>
		<x1 public="1" get="accessor" set="null" static="1"><x path="Float"/></x1>
		<get_x1 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_x1>
		<x2 public="1" get="accessor" set="null" static="1"><x path="Float"/></x2>
		<get_x2 public="1" get="inline" set="null" line="13" static="1"><f a=""><x path="Float"/></f></get_x2>
		<x3 public="1" get="accessor" set="null" static="1"><x path="Float"/></x3>
		<get_x3 public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_x3>
		<y0 public="1" get="accessor" set="null" static="1"><x path="Float"/></y0>
		<get_y0 public="1" get="inline" set="null" line="22" static="1"><f a=""><x path="Float"/></f></get_y0>
		<y1 public="1" get="accessor" set="null" static="1"><x path="Float"/></y1>
		<get_y1 public="1" get="inline" set="null" line="26" static="1"><f a=""><x path="Float"/></f></get_y1>
		<y2 public="1" get="accessor" set="null" static="1"><x path="Float"/></y2>
		<get_y2 public="1" get="inline" set="null" line="30" static="1"><f a=""><x path="Float"/></f></get_y2>
		<y3 public="1" get="accessor" set="null" static="1"><x path="Float"/></y3>
		<get_y3 public="1" get="inline" set="null" line="34" static="1"><f a=""><x path="Float"/></f></get_y3>
		<getXs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getXs>
		<getYs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getYs>
	</class>
	<class path="pixelimageXY.algo.TriPixel" params="" file="src/pixelimageXY/algo/TriPixel.hx">
		<_fillTriUnsafe public="1" expr="fillTriUnsafe">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:hasHit:hasUndo">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>fillTriUnsafe</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillTriUnsafe</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillTriUnsafe>
		<_tileTriUnsafe public="1" expr="tileTriUnsafe">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:tileImage:hasHit:hasUndo">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>tileTriUnsafe</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">tileTriUnsafe</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_tileTriUnsafe>
		<_fillGradTriangle public="1" expr="fillGradTriangle">
			<f a="pixelImage:ax:ay:colA:bx:by:colB:cx:cy:colC:hasHit:hasUndo">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>fillGradTriangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillGradTriangle</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillGradTriangle>
		<new public="1" set="method" line="1104">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.algo._TriPixel.TriPixel_Fields_" params="" file="src/pixelimageXY/algo/TriPixel.hx" private="1" module="pixelimageXY.algo.TriPixel" final="1">
		<fillTriangle public="1" get="inline" set="null" line="19" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
			<haxe_doc>provides a filled triangle give a,b,c coordinates
        automagically rearranges coordinates so it always renders</haxe_doc>
		</fillTriangle>
		<fillTriUnsafe public="1" get="inline" set="null" line="40" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</fillTriUnsafe>
		<fillTriangle2 public="1" get="inline" set="null" line="99" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriangle2>
		<fillTriUnsafe2 public="1" get="inline" set="null" line="120" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</fillTriUnsafe2>
		<tileTriangle public="1" get="inline" set="null" line="181" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileTriangle>
		<tileTriUnsafe public="1" get="inline" set="null" line="202" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:tileImage:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</tileTriUnsafe>
		<fillGradTriangle public="1" get="inline" set="null" line="263" static="1">
			<f a="pixelImage:ax:ay:colA:bx:by:colB:cx:cy:colC:?hasHit:?hasUndo" v="::::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</fillGradTriangle>
		<topRightImgTriFudge public="1" get="inline" set="null" line="327" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:cx:cy:?hasHit:?hasUndo" v=":::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</topRightImgTriFudge>
		<bottomLeftImgTriFudge public="1" get="inline" set="null" line="335" static="1">
			<f a="pixelImage:texture:win:dx:dy:cx:cy:ax:ay:?hasHit:?hasUndo" v=":::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</bottomLeftImgTriFudge>
		<uvTriangleFudge public="1" get="inline" set="null" line="347" static="1">
			<f a="pixelImage:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit:?hasUndo" v=":::::::::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
			<haxe_doc>This is the first attempt at UV mapping it does not swap A B and so does not work properly, but can be used with fudged triangles above.
        Likely will remove in future but keeping incase it is useful for edge cases.</haxe_doc>
		</uvTriangleFudge>
		<topLeftImgTri public="1" get="inline" set="null" line="400" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:dx:dy:?hasHit:?hasUndo" v=":::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</topLeftImgTri>
		<bottomRightImgTri public="1" get="inline" set="null" line="410" static="1">
			<f a="pixelImage:texture:win:bx:by:cx:cy:dx:dy:?hasHit:?hasUndo" v=":::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</bottomRightImgTri>
		<uvTriangle public="1" get="inline" set="null" line="420" static="1">
			<f a="pixelImage:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit:?hasUndo" v=":::::::::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</uvTriangle>
		<uvTriangleSoft3 public="1" get="inline" set="null" line="483" static="1">
			<f a="pixelImage:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:soft3:?hasHit:?hasUndo" v="::::::::::::::::false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false }</e></m></meta>
		</uvTriangleSoft3>
		<fillTriTwoSoft public="1" get="inline" set="null" line="569" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?softC:?hasHit" v="::::::::10:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softC : 10 }</e></m></meta>
		</fillTriTwoSoft>
		<fillTriSoftC public="1" get="inline" set="null" line="592" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?softC:?hasHit:?hasUndo" v="::::::::10:false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false, softC : 10 }</e></m></meta>
		</fillTriSoftC>
		<fillTriSoft3 public="1" get="inline" set="null" line="666" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?soft3:?softAB:?softBC:?softCA:?hasHit:?hasUndo" v="::::::::40:true:true:true:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false, softCA : true, softBC : true, softAB : true, soft3 : 40 }</e></m></meta>
		</fillTriSoft3>
		<fillQuarterSoft public="1" get="inline" set="null" line="783" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?soft3:?softAB:?softBC:?softCA:?hasHit:?hasUndo" v="::::::::40:true:true:true:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false, softCA : true, softBC : true, softAB : true, soft3 : 40 }</e></m></meta>
		</fillQuarterSoft>
		<fillTriExtra0 public="1" get="inline" set="null" line="879" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false }</e></m></meta>
		</fillTriExtra0>
		<fillTriExtra1 public="1" get="inline" set="null" line="950" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</fillTriExtra1>
		<uvTriangleTexture3 public="1" get="inline" set="null" line="1011" static="1">
			<f a="pixelImage:textureA:winA:textureB:winB:textureC:winC:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit:?hasUndo" v=":::::::::::::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="pixelimageXY.Pixelimage"/>
				<c path="pixelimageXY.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</uvTriangleTexture3>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.algo._TriPixelOld.TriPixelOld_Fields_" params="" file="src/pixelimageXY/algo/TriPixelOld.hx" private="1" module="pixelimageXY.algo.TriPixelOld" final="1">
		<fillTriUnsafe5 public="1" set="method" line="16" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</fillTriUnsafe5>
		<fillTriUnsafe6 public="1" set="method" line="173" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : false, hasHit : false }</e></m></meta>
		</fillTriUnsafe6>
	</class>
	<class path="pixelimageXY.algo._TriPixelSmooth.TriPixelSmooth_Fields_" params="" file="src/pixelimageXY/algo/TriPixelSmooth.hx" private="1" module="pixelimageXY.algo.TriPixelSmooth" final="1">
		<quadPentagonBarycentric public="1" get="inline" set="null" line="54" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</quadPentagonBarycentric>
		<triPentagonBarycentricBottom public="1" get="inline" set="null" line="68" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false }</e></m></meta>
		</triPentagonBarycentricBottom>
		<triPentagonBarycentricTop public="1" get="inline" set="null" line="96" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit:?hasUndo" v="::::::::false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false }</e></m></meta>
		</triPentagonBarycentricTop>
		<triPentagonBarycentic public="1" get="inline" set="null" line="128" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?softAB:?softBC:?softCA:?hasHit:?hasUndo" v="::::::::true:true:true:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
		</triPentagonBarycentic>
	</class>
	<class path="pixelimageXY.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_" params="" file="src/pixelimageXY/algo/TriPixelSmoothGrad.hx" private="1" module="pixelimageXY.algo.TriPixelSmoothGrad" final="1">
		<lineGradPentBary public="1" get="inline" set="null" line="19" static="1">
			<f a="pixelImage:px:py:thick:h:theta:colorA:colorB:colorC:colorD:?hasHit" v="::::::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</lineGradPentBary>
		<quadGradPentBary public="1" get="inline" set="null" line="28" static="1">
			<f a="pixelImage:q:colorA:colorB:colorC:colorD:?hasHit" v="::::::false">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.algo.QuadPoints"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</quadGradPentBary>
		<triGradPentBaryBottom public="1" get="inline" set="null" line="40" static="1">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:?hasHit:?hasUndo" v="::::::::::false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false }</e></m></meta>
		</triGradPentBaryBottom>
		<triGradPentBaryTop public="1" get="inline" set="null" line="65" static="1">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:?hasHit:?hasUndo" v="::::::::::false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false }</e></m></meta>
		</triGradPentBaryTop>
		<triGradPentBary public="1" get="inline" set="null" line="93" static="1">
			<f a="pixelImage:ax:ay:colA:bx:by:colB:cx:cy:colC:?softAB:?softBC:?softCA:?hasHit:?hasUndo" v="::::::::::true:true:true:false:true">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="pixelimageXY.algo.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasUndo : true, hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
		</triGradPentBary>
	</class>
	<abstract path="pixelimageXY.algo.TriPoints" params="" file="src/pixelimageXY/algo/TriPoints.hx">
		<from><icast><c path="pixelimageXY.algo.TriPoints_"/></icast></from>
		<this><c path="pixelimageXY.algo.TriPoints_"/></this>
		<to><icast><c path="pixelimageXY.algo.TriPoints_"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="pixelimageXY.algo._TriPoints.TriPoints_Impl_" params="" file="src/pixelimageXY/algo/TriPoints.hx" private="1" module="pixelimageXY.algo.TriPoints" final="1">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a="tp">
			<c path="pixelimageXY.algo.TriPoints_"/>
			<x path="pixelimageXY.algo.TriPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rotate public="1" get="inline" set="null" line="45" static="1"><f a="this:theta:centreX:centreY">
	<c path="pixelimageXY.algo.TriPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<getHit public="1" get="inline" set="null" line="70" static="1">
		<f a="this:?preCalculated" v=":true">
			<c path="pixelimageXY.algo.TriPoints_"/>
			<x path="Bool"/>
			<c path="pixelimageXY.algo.HitTri"/>
		</f>
		<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
	</getHit>
</class></impl>
	</abstract>
	<class path="pixelimageXY.algo._TriPoints.TriPoints_Impl_" params="" file="src/pixelimageXY/algo/TriPoints.hx" private="1" module="pixelimageXY.algo.TriPoints" final="1">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a="tp">
				<c path="pixelimageXY.algo.TriPoints_"/>
				<x path="pixelimageXY.algo.TriPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rotate public="1" get="inline" set="null" line="45" static="1"><f a="this:theta:centreX:centreY">
	<c path="pixelimageXY.algo.TriPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<getHit public="1" get="inline" set="null" line="70" static="1">
			<f a="this:?preCalculated" v=":true">
				<c path="pixelimageXY.algo.TriPoints_"/>
				<x path="Bool"/>
				<c path="pixelimageXY.algo.HitTri"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</getHit>
	</class>
	<class path="pixelimageXY.algo.TriangleSampler" params="" file="src/pixelimageXY/algo/TriangleSampler.hx">
		<x0 public="1" get="accessor" set="null" static="1"><x path="Float"/></x0>
		<get_x0 public="1" get="inline" set="null" line="5" static="1"><f a=""><x path="Float"/></f></get_x0>
		<x1 public="1" get="accessor" set="null" static="1"><x path="Float"/></x1>
		<get_x1 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_x1>
		<x2 public="1" get="accessor" set="null" static="1"><x path="Float"/></x2>
		<get_x2 public="1" get="inline" set="null" line="13" static="1"><f a=""><x path="Float"/></f></get_x2>
		<y0 public="1" get="accessor" set="null" static="1"><x path="Float"/></y0>
		<get_y0 public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_y0>
		<y1 public="1" get="accessor" set="null" static="1"><x path="Float"/></y1>
		<get_y1 public="1" get="inline" set="null" line="21" static="1"><f a=""><x path="Float"/></f></get_y1>
		<y2 public="1" get="accessor" set="null" static="1"><x path="Float"/></y2>
		<get_y2 public="1" get="inline" set="null" line="25" static="1"><f a=""><x path="Float"/></f></get_y2>
		<getXs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getXs>
		<getYs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getYs>
	</class>
	<class path="pixelimageXY.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_" params="" file="src/pixelimageXY/algo/Xiolin_Wu_Line.hx" private="1" module="pixelimageXY.algo.Xiolin_Wu_Line" final="1">
		<xWuLine public="1" get="inline" set="null" line="33" static="1">
			<f a="pixelImage:x0:y0:x1:y1:color:?brightRange" v="::::::0.25">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ brightRange : 0.25 }</e></m></meta>
		</xWuLine>
		<roundFloor public="1" get="inline" set="null" line="120" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></roundFloor>
		<fPart public="1" get="inline" set="null" line="125" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fPart>
		<rfPart public="1" get="inline" set="null" line="130" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></rfPart>
	</class>
	<class path="pixelimageXY.draw.DrawGradThickHelper" params="" file="src/pixelimageXY/draw/DrawGradThickHelper.hx">
		<implements path="justPath.ILinePathContext"/>
		<svgLinePath><c path="justPath.SvgLinePath"/></svgLinePath>
		<x0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x0>
		<y0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y0>
		<toggleDraw expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</toggleDraw>
		<strokeWidth><x path="Float"/></strokeWidth>
		<strokeTopColor public="1"><x path="Int"/></strokeTopColor>
		<strokeBottomColor public="1"><x path="Int"/></strokeBottomColor>
		<translateX><x path="Float"/></translateX>
		<translateY><x path="Float"/></translateY>
		<scaleX><x path="Float"/></scaleX>
		<scaleY><x path="Float"/></scaleY>
		<pixelImage><x path="pixelimageXY.Pixelimage"/></pixelImage>
		<info><c path="pixelimageXY.algo.HitQuad"/></info>
		<oldInfo><c path="pixelimageXY.algo.HitQuad"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="45"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="62"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="79"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<quadTo public="1" set="method" line="86"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method" line="90"><f a="x2:y2:x3:y3:x4:y4">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<quadThru public="1" set="method" line="94"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<archBezier public="1" get="inline" set="null" line="98"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></archBezier>
		<triangleArch public="1" get="inline" set="null" line="106"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangleArch>
		<new public="1" set="method" line="26">
			<f a="pixelImage:strokeWidth:strokeTopColor:strokeBottomColor:?translateX:?translateY:?scaleX:?scaleY" v="::::0.:0.:1.:1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.draw.DrawShapeHelper" params="" file="src/pixelimageXY/draw/DrawShapeHelper.hx">
		<implements path="justPath.ILinePathContext"/>
		<svgLinePath><c path="justPath.SvgLinePath"/></svgLinePath>
		<x0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x0>
		<y0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y0>
		<toggleDraw expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</toggleDraw>
		<strokeWidth><x path="Float"/></strokeWidth>
		<strokeColor><x path="Int"/></strokeColor>
		<translateX><x path="Float"/></translateX>
		<translateY><x path="Float"/></translateY>
		<scaleX><x path="Float"/></scaleX>
		<scaleY><x path="Float"/></scaleY>
		<pixelImage><x path="pixelimageXY.Pixelimage"/></pixelImage>
		<info><c path="pixelimageXY.algo.HitQuad"/></info>
		<oldInfo><c path="pixelimageXY.algo.HitQuad"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="42"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="63"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="80"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<quadTo public="1" set="method" line="87"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method" line="91"><f a="x2:y2:x3:y3:x4:y4">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<quadThru public="1" set="method" line="95"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<archBezier public="1" get="inline" set="null" line="99"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></archBezier>
		<triangleArch public="1" get="inline" set="null" line="107"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangleArch>
		<new public="1" set="method" line="25">
			<f a="pixelImage:strokeWidth:strokeColor:?translateX:?translateY:?scaleX:?scaleY" v=":::0.:0.:1.:1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.draw.DrawTileHelper" params="" file="src/pixelimageXY/draw/DrawTileHelper.hx">
		<implements path="justPath.ILinePathContext"/>
		<svgLinePath><c path="justPath.SvgLinePath"/></svgLinePath>
		<x0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x0>
		<y0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y0>
		<toggleDraw expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</toggleDraw>
		<strokeWidth><x path="Float"/></strokeWidth>
		<tileImageStroke><x path="pixelimageXY.Pixelimage"/></tileImageStroke>
		<translateX><x path="Float"/></translateX>
		<translateY><x path="Float"/></translateY>
		<scaleX><x path="Float"/></scaleX>
		<scaleY><x path="Float"/></scaleY>
		<pixelImage><x path="pixelimageXY.Pixelimage"/></pixelImage>
		<info><c path="pixelimageXY.algo.HitQuad"/></info>
		<oldInfo><c path="pixelimageXY.algo.HitQuad"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="41"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="58"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="74"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<quadTo public="1" set="method" line="81"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method" line="85"><f a="x2:y2:x3:y3:x4:y4">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<quadThru public="1" set="method" line="89"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<archBezier public="1" get="inline" set="null" line="93"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></archBezier>
		<triangleArch public="1" get="inline" set="null" line="101"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangleArch>
		<new public="1" set="method" line="25">
			<f a="pixelImage:strokeWidth:tileImageStroke:?translateX:?translateY:?scaleX:?scaleY" v=":::0.:0.:1.:1.">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.fontImage.CharPlacement1D" params="" file="src/pixelimageXY/fontImage/OneDfont.hx" module="pixelimageXY.fontImage.OneDfont">
		<currX public="1"><x path="Int"/></currX>
		<currY public="1"><x path="Int"/></currY>
		<minX public="1"><x path="Int"/></minX>
		<maxX public="1"><x path="Int"/></maxX>
		<new public="1" get="inline" set="null" line="10"><f a="currX:currY:minX:maxX">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="pixelimageXY.fontImage.OneDfont" params="" file="src/pixelimageXY/fontImage/OneDfont.hx">
		<fontImage public="1"><x path="pixelimageXY.Pixelimage"/></fontImage>
		<startingAscii public="1"><x path="Int"/></startingAscii>
		<markerColor public="1"><x path="Int"/></markerColor>
		<pairOffset public="1"><x path="Null"><c path="haxe.ds.StringMap"><x path="Int"/></c></x></pairOffset>
		<markers expr="[]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</markers>
		<findMarkers get="inline" set="null" line="38"><f a=""><x path="Void"/></f></findMarkers>
		<createPlacement public="1" get="inline" set="null" line="48">
			<f a="str:?spacingX" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="pixelimageXY.fontImage.CharPlacement1D"/></c>
			</f>
			<meta><m n=":value"><e>{ spacingX : 0 }</e></m></meta>
		</createPlacement>
		<drawString public="1" get="inline" set="null" line="98">
			<f a="str:?spacingX:?transparent" v=":0:false">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ transparent : false, spacingX : 0 }</e></m></meta>
			<haxe_doc>This is used to draw strings, but it is useful that 
        createPlacement and drawPlacement can be used separately 
        to allow for instance curved y placement</haxe_doc>
		</drawString>
		<drawCurveY public="1" get="inline" set="null" line="105">
			<f a="charPos:fy:?transparent" v="::false">
				<c path="Array"><c path="pixelimageXY.fontImage.CharPlacement1D"/></c>
				<f a="x">
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ transparent : false }</e></m></meta>
		</drawCurveY>
		<widthArrCharPlacement1D public="1" get="inline" set="null" line="124"><f a="charPos">
	<c path="Array"><c path="pixelimageXY.fontImage.CharPlacement1D"/></c>
	<x path="Int"/>
</f></widthArrCharPlacement1D>
		<drawPlacement public="1" get="inline" set="null" line="130">
			<f a="pixelImage:charPos:?yOffSet" v="::0">
				<x path="pixelimageXY.Pixelimage"/>
				<c path="Array"><c path="pixelimageXY.fontImage.CharPlacement1D"/></c>
				<x path="Int"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ yOffSet : 0 }</e></m></meta>
		</drawPlacement>
		<new public="1" set="method" line="30">
			<f a="fontImage:?startingAscii:?markerColor:?pairOffset" v=":33:0xFFFFFFFF:null">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.ds.StringMap"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pairOffset : null, markerColor : 0xFFFFFFFF, startingAscii : 33 }</e></m></meta>
			<haxe_doc>assumes font in a single row, with white marker pixels on the top pixel row to provide ascii start and end character information.
        currently setup that the last char is the spacebar one, as per current test data.</haxe_doc>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.fontImage._TestLem.TestLem_Fields_" params="" file="src/pixelimageXY/fontImage/TestLem.hx" private="1" module="pixelimageXY.fontImage.TestLem" final="1">
		<lemBlue public="1" set="method" line="6" static="1"><f a=""><c path="String"/></f></lemBlue>
		<lemYellow public="1" set="method" line="9" static="1"><f a=""><c path="String"/></f></lemYellow>
		<lemRed public="1" set="method" line="12" static="1"><f a=""><c path="String"/></f></lemRed>
		<lemCyan public="1" set="method" line="15" static="1"><f a=""><c path="String"/></f></lemCyan>
		<lemPurple public="1" set="method" line="18" static="1"><f a=""><c path="String"/></f></lemPurple>
		<lemOrange public="1" set="method" line="21" static="1"><f a=""><c path="String"/></f></lemOrange>
		<lemGreen public="1" set="method" line="24" static="1"><f a=""><c path="String"/></f></lemGreen>
	</class>
	<abstract path="pixelimageXY.formats.BytesCameleon" params="" file="src/pixelimageXY/formats/BytesCameleon.hx">
		<from><icast><c path="haxe.io.Bytes"/></icast></from>
		<this><c path="haxe.io.Bytes"/></this>
		<to><icast><c path="haxe.io.Bytes"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="pixelimageXY.formats._BytesCameleon.BytesCameleon_Impl_" params="" file="src/pixelimageXY/formats/BytesCameleon.hx" private="1" module="pixelimageXY.formats.BytesCameleon" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="bytes">
			<c path="haxe.io.Bytes"/>
			<x path="pixelimageXY.formats.BytesCameleon"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<ARGB_RGBA public="1" get="inline" set="null" line="11" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_RGBA>
	<RGBA_ARGB public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></RGBA_ARGB>
	<ARGB_BGRA public="1" get="inline" set="null" line="47" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_BGRA>
	<ARGB_ABGR public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_ABGR>
	<ABGR_ARGB public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_ARGB>
	<ABGR_RGBA public="1" get="inline" set="null" line="101" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_RGBA>
	<BGRA_ARGB public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_ARGB>
	<BGRA_RGBA public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_RGBA>
</class></impl>
	</abstract>
	<class path="pixelimageXY.formats._BytesCameleon.BytesCameleon_Impl_" params="" file="src/pixelimageXY/formats/BytesCameleon.hx" private="1" module="pixelimageXY.formats.BytesCameleon" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="pixelimageXY.formats.BytesCameleon"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<ARGB_RGBA public="1" get="inline" set="null" line="11" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_RGBA>
		<RGBA_ARGB public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></RGBA_ARGB>
		<ARGB_BGRA public="1" get="inline" set="null" line="47" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_BGRA>
		<ARGB_ABGR public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_ABGR>
		<ABGR_ARGB public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_ARGB>
		<ABGR_RGBA public="1" get="inline" set="null" line="101" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_RGBA>
		<BGRA_ARGB public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_ARGB>
		<BGRA_RGBA public="1" get="inline" set="null" line="137" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_RGBA>
	</class>
	<class path="pixelimageXY.formats._Format.Format_Fields_" params="" file="src/pixelimageXY/formats/Format.hx" private="1" module="pixelimageXY.formats.Format" final="1">
		<toPNG public="1" get="inline" set="null" line="13" static="1">
			<f a="pixelShape:name:?level" v="::9">
				<x path="pixelimageXY.Pixelshape"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
		</toPNG>
		<fromPNG public="1" get="inline" set="null" line="56" static="1">
			<f a="name:?transparent" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ transparent : true }</e></m></meta>
		</fromPNG>
		<get_dir public="1" set="method" line="75" static="1"><f a=""><c path="String"/></f></get_dir>
	</class>
	<class path="pixelimageXY.formats._PeoteImage.PeoteImage_Fields_" params="" file="src/pixelimageXY/formats/PeoteImage.hx" private="1" module="pixelimageXY.formats.PeoteImage" final="1">
		<toPeoteTextureData public="1" get="inline" set="null" line="12" static="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="peote.view.TextureData"/>
</f></toPeoteTextureData>
		<fromPeoteTextureFrame public="1" get="inline" set="null" line="34" static="1">
			<f a="texture:?transparent" v=":true">
				<c path="peote.view.Texture"/>
				<x path="Bool"/>
				<x path="pixelimageXY.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ transparent : true }</e></m></meta>
		</fromPeoteTextureFrame>
	</class>
	<class path="vision.ds._Image.Image_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Image.hx" private="1" module="vision.ds.Image" final="1">
		<OFFSET expr="4" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
			<haxe_doc>* the first 4 bytes represent width.</haxe_doc>
		</OFFSET>
		<underlying public="1" get="accessor" set="null" static="1">
			<x path="vision.ds.ByteArray"/>
			<haxe_doc>Returns the underlying type of this abstract.</haxe_doc>
		</underlying>
		<get_underlying get="inline" set="null" line="31" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="vision.ds.ByteArray"/>
</f></get_underlying>
		<width public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The width of the image.</haxe_doc>
		</width>
		<get_width get="inline" set="null" line="46" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
</f></get_width>
		<height public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The height of the image.</haxe_doc>
		</height>
		<get_height get="inline" set="null" line="62" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
</f></get_height>
		<_new public="1" get="inline" set="null" line="77" static="1">
			<f a="width:height:?color" v="::0x00000000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Image"/>
			</f>
			<meta>
				<m n=":value"><e>{ color : 0x00000000 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new image of the given size. Onces created, the image cannot be resized.

		@param width The width of the image.
		@param height The height of the image.
		@param color The color to fill the image with. if unspecified, the image is transparent.</haxe_doc>
		</_new>
		<getColorFromStartingBytePos get="inline" set="null" line="90" static="1"><f a="this:position">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
	<x path="vision.ds.Color"/>
</f></getColorFromStartingBytePos>
		<setColorFromStartingBytePos get="inline" set="null" line="95" static="1"><f a="this:position:c">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
	<x path="vision.ds.Color"/>
	<x path="vision.ds.Color"/>
</f></setColorFromStartingBytePos>
		<getPixel public="1" get="inline" set="null" line="114" static="1">
			<f a="this:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Gets the color of the pixel at the given coordinates.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the coordinates are out of bounds.
		@return The color of the pixel at the given coordinates.</haxe_doc>
		</getPixel>
		<getSafePixel public="1" get="inline" set="null" line="135" static="1">
			<f a="this:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Gets the color of the pixel at the given coordinates.

		Coordinates outside the bounds of the image are allowed.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@return The color of the pixel at the given coordinates.</haxe_doc>
		</getSafePixel>
		<getUnsafePixel get="inline" set="null" line="143" static="1">
			<f a="this:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":allow"><e>vision</e></m></meta>
		</getUnsafePixel>
		<getFloatingPixel public="1" get="inline" set="null" line="191" static="1">
			<f a="this:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc><![CDATA[Gets the color of the pixel at the given coordinates.
		These coordinates can also be of type `Float`, in which case
		the value returned should be an interpolation of the surrounding, physical pixels:

		### How Does This Work?

		Lets say we want the pixel at `(0.5, 0.5)`:
		```
		(0,0)   (1,0)                                     
														 
			  ·     < Y (0.5)                      
														 
		(0,1)   (1,1)                                     
			  ^                                           
			X (0.5)                                        
		```

		First, we're going to calculate the actual fraction - the means, extracting the numbers after the decimal point:

			final xFraction = x - Std.int(x);
			final yFraction = y - Std.int(y);


		Then, we just multiply each of the surrounding pixel's value by it's distance from the initial X value (using `xFraction` and `yFraction`):

			final pixelsBeforeYMultiplier = 1 - yFraction, pixelsAfterYMultiplier = yFraction;
			final pixelsBeforeXMultiplier = 1 - xFraction, pixelsAfterXMultiplier = xFraction;
			final bottomLayer = pixelsBeforeYMultiplier * (pixelsBeforeXMultiplier * getPixel(Std.int(x), Std.int(y)) + pixelsAfterXMultiplier * getPixel(Std.int(x) + 1, Std.int(y)));
			final topLayer = pixelsAfterYMultiplier * (pixelsBeforeXMultiplier * getPixel(Std.int(x), Std.int(y) + 1) + pixelsAfterXMultiplier * getPixel(Std.int(x) + 1, Std.int(y) + 1));


		And add the two layers to get the result:


			var finalColor:Color = Std.int(bottomLayer + topLayer);


		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the coordinates are out of bounds.
		@return The color of the pixel at the given coordinates.]]></haxe_doc>
		</getFloatingPixel>
		<setPixel public="1" get="inline" set="null" line="213" static="1">
			<f a="this:x:y:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the color of the pixel at the given coordinates.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.
		@param color The color to set the pixel to.

		@throws OutOfBounds if the pixel is out of bounds.</haxe_doc>
		</setPixel>
		<hasPixel public="1" get="inline" set="null" line="232" static="1">
			<f a="this:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if the given coordinates are within the bounds of the image.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@return True if the coordinates are within the bounds of the image.</haxe_doc>
		</hasPixel>
		<copyPixelFrom public="1" get="inline" set="null" line="246" static="1">
			<f a="this:image:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="vision.ds.Image"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Copies a pixel from the given image to this image.

		@param image The image to copy the pixel from.
		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the given coordinates are outside the bounds of one or both of the images
		@return The color of the pixel at the given coordinates.</haxe_doc>
		</copyPixelFrom>
		<copyPixelTo public="1" get="inline" set="null" line="262" static="1">
			<f a="this:image:x:y">
				<x path="vision.ds.ByteArray"/>
				<x path="vision.ds.Image"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Copies a pixel from the given image to this image.

		@param image The image to copy the pixel to.
		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the given coordinates are outside the bounds of one or both of the images
		@return The color of the pixel at the given coordinates.</haxe_doc>
		</copyPixelTo>
		<paintPixel public="1" get="inline" set="null" line="278" static="1">
			<f a="this:x:y:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the color of a pixel, but doesn't completely overwrite the pixel:

		- if the color of the new pixel is the same as the old pixel, the old pixel is kept.
		- if the alpha of the new pixel is 0, the old pixel is kept.
		- if the alpha of the new pixel is 255, the new pixel is kept.
		- if the alpha of the new pixel is between 0 and 255, the new pixel is blended with the old pixel.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.
		@param color The color to set the pixel to. pay attention to the alpha value.</haxe_doc>
		</paintPixel>
		<fillRect public="1" get="inline" set="null" line="298" static="1">
			<f a="this:x:y:width:height:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a rectangle of pixels to the given color, essentially filling it with the given color.

		@param rect The rectangle to fill: The fill starts at (x, y) and extends to (x + width, y + height), not including the endpoints.
		@param color The color to fill that rectangular portion with.</haxe_doc>
		</fillRect>
		<drawRect public="1" get="inline" set="null" line="314" static="1">
			<f a="this:x:y:width:height:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a rectangular outline of the given color.

		This function is a shortcut for just doing repeated calls to drawLine.

		@param rect The rectangle to draw the outline of.
		@param color The color to draw the outline with.</haxe_doc>
		</drawRect>
		<getImagePortion public="1" get="inline" set="null" line="329" static="1">
			<f a="this:rect">
				<x path="vision.ds.ByteArray"/>
				<c path="vision.ds.Rectangle"/>
				<x path="vision.ds.Image"/>
			</f>
			<haxe_doc>Returns a portion of the image, specified by a rectangle.

		@param rect The rectangle specifying the portion of the image to return.

		@throws OutOfBounds if the portion of the image to get is outside the bounds of the original image.
		@return A new image containing the specified portion of the original image.</haxe_doc>
		</getImagePortion>
		<setImagePortion public="1" get="inline" set="null" line="347" static="1">
			<f a="this:rect:image">
				<x path="vision.ds.ByteArray"/>
				<c path="vision.ds.Rectangle"/>
				<x path="vision.ds.Image"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a portion of the image, specified by a rectangle, to another image.

		@param rect The rectangle specifying the portion of the image to set.
		@param image The image to set the portion of the image to.

		@throws OutOfBounds if the portion of the image to set is outside the bounds of the original image.</haxe_doc>
		</setImagePortion>
		<drawLine public="1" get="inline" set="null" line="362" static="1">
			<f a="this:x1:y1:x2:y2:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a line from (x1, y1) to (x2, y2) using the given color.</haxe_doc>
		</drawLine>
		<drawRay2D public="1" get="inline" set="null" line="397" static="1">
			<f a="this:line:color">
				<x path="vision.ds.ByteArray"/>
				<c path="vision.ds.Ray2D"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws an intine line specified by a Ray2D object.

		**Notice** - The (0, 0) point is **not** the same is `image.getPixel(0, 0)`,
		but rather the bottom left corner of the image - `image.getPixel(0, image.height - 1)`.

		This "vertical flip" is done to match the way the ray is draw on the cartesian plane.

		@param line The line to draw.
		@param color The color to draw the line with.

		@see Ray2D</haxe_doc>
		</drawRay2D>
		<drawLine2D public="1" get="inline" set="null" line="436" static="1">
			<f a="this:line:color">
				<x path="vision.ds.ByteArray"/>
				<c path="vision.ds.Line2D"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a `Line2D` object using the given color.

		If the line segment is not completely within the image, 
		it doesn't throw an error, but just draws the part of the 
		line segment that is within the image.

		@param line The line segment to draw.
		@param color The color to draw the line segment with.

		@see Line2D</haxe_doc>
		</drawLine2D>
		<drawQuadraticBezier public="1" get="inline" set="null" line="475" static="1">
			<f a="this:line:control:color:?accuracy" v="::::1000">
				<x path="vision.ds.ByteArray"/>
				<c path="vision.ds.Line2D"/>
				<x path="vision.ds.IntPoint2D"/>
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ accuracy : 1000 }</e></m></meta>
			<haxe_doc>Draws a curved line specified by a line and one control point.

		This method draws a quadratic Bezier curve.

		@param line The line to draw.
		@param control The control point of the curve.
		@param color The color to draw the line with.
		@param accuracy The number of iterations to use when drawing the curve. the higher the number, the more iterations are used, and the more accurate the curve is. for example, accuracy of 100 will draw the curve with 100 iterations, and will draw 100 points on the curve. **default is 1000**

		@see Line2D</haxe_doc>
		</drawQuadraticBezier>
		<drawCubicBezier public="1" get="inline" set="null" line="514" static="1">
			<f a="this:line:control1:control2:color:?accuracy" v=":::::1000">
				<x path="vision.ds.ByteArray"/>
				<c path="vision.ds.Line2D"/>
				<x path="vision.ds.IntPoint2D"/>
				<x path="vision.ds.IntPoint2D"/>
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ accuracy : 1000 }</e></m></meta>
			<haxe_doc>Draws a curved line specified by a line and two control points.

		This method draws a cubic Bezier curve.

		@param line The line to draw.
		@param control1 The first control point of the curve.
		@param control2 The second control point of the curve.
		@param color The color to draw the curve with.
		@param accuracy The number of iterations to use when drawing the curve. the higher the number, the more iterations are used, and the more accurate the curve is. for example, accuracy of 100 will draw the curve with 100 iterations, and will draw 100 points on the curve. **default is 1000**

		@see Line2D</haxe_doc>
		</drawCubicBezier>
		<fillCircle public="1" get="inline" set="null" line="554" static="1">
			<f a="this:X:Y:r:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Fills a circle with the given color:

		 - The center of the circle is at (X, Y)
		 - The radius of the circle is r
		 - Anti-aliasing will not be used.

		@param x The x coordinate of the center of the circle.
		@param y The y coordinate of the center of the circle.
		@param r The radius of the circle.
		@param color The color to draw the circle with.</haxe_doc>
		</fillCircle>
		<drawCircle public="1" get="inline" set="null" line="597" static="1">
			<f a="this:X:Y:r:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a circle of the given color:

		 - The center of the circle is at (X, Y)
		 - The radius of the circle is r
		 - Anti-aliasing will not be used.

		@param x The x coordinate of the center of the circle.
		@param y The y coordinate of the center of the circle.
		@param r The radius of the circle.
		@param color The color to draw the circle with.</haxe_doc>
		</drawCircle>
		<drawEllipse public="1" get="inline" set="null" line="627" static="1">
			<f a="this:centerX:centerY:radiusX:radiusY:color">
				<x path="vision.ds.ByteArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws an ellipse of the given color:

		 - The center of the ellipse is at (X, Y)
		 - The radius of the ellipse is r
		 - Anti-aliasing will not be used.

		@param centerX The x coordinate of the center of the ellipse.
		@param centerY The y coordinate of the center of the ellipse.
		@param radiusX The x radius of the ellipse.
		@param radiusY The y radius of the ellipse.
		@param color The color to draw the ellipse with.</haxe_doc>
		</drawEllipse>
		<fillColorRecursive public="1" set="method" line="710" static="1">
			<f a="this:position:color">
				<x path="vision.ds.ByteArray"/>
				<x path="vision.ds.IntPoint2D"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Recursively fills a section of the image. the section filled has to match
		`position`'s color.

		when the fill encounters a color that is not `position`'s color, it
		will stop filling in that direction.

		**Warning** - this function is recursive. This function is not slow, but can trigger
		a stack overflow if used on large images. This is only here so an implementation will be available.

		@param position The position to start filling at. you can use a Point2D or IntPoint2D.
		@param color The color to fill with.</haxe_doc>
		</fillColorRecursive>
		<fillColor public="1" set="method" line="739" static="1">
			<f a="this:position:color">
				<x path="vision.ds.ByteArray"/>
				<x path="vision.ds.IntPoint2D"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Fills a section of the image. the section filled has to match
		`position`'s color.

		This uses the BFS `Breadth First Search` algorithm

		@param position The position to start filling at. you can use a Point2D or IntPoint2D.
		@param color The color to fill with.</haxe_doc>
		</fillColor>
		<fillUntilColor public="1" set="method" line="776" static="1">
			<f a="this:position:color:borderColor">
				<x path="vision.ds.ByteArray"/>
				<x path="vision.ds.IntPoint2D"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Fills a section of the image. the section filled has to be bordered by pixels of color `borderColor`.

		This uses the BFS `Breadth First Search` algorithm

		@param position The position to start filling at. you can use a Point2D or IntPoint2D.
		@param color The color to fill with.
		@param borderColor The color upon which to stop filling.</haxe_doc>
		</fillUntilColor>
		<clone public="1" set="method" line="816" static="1">
			<f a="this">
				<x path="vision.ds.ByteArray"/>
				<x path="vision.ds.Image"/>
			</f>
			<haxe_doc>Clones this image.

		Useful if you want to operate on `this` image, without modifying it:

			var blurred = Vision.gaussianBlur(image.clone());</haxe_doc>
		</clone>
		<mirror public="1" set="method" line="824" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="vision.ds.Image"/>
</f></mirror>
		<flip public="1" set="method" line="832" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="vision.ds.Image"/>
</f></flip>
		<resize public="1" get="inline" set="null" line="840" static="1"><f a="this:newWidth:newHeight:?algorithm">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="vision.ds.ImageResizeAlgorithm"/>
	<x path="vision.ds.Image"/>
</f></resize>
		<toString public="1" set="method" line="873" static="1">
			<f a="this:?special" v=":true">
				<x path="vision.ds.ByteArray"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ special : true }</e></m></meta>
			<haxe_doc>Gets the image as a string.

		@param special When using the `Console.hx` haxelib, images can be printed to the console
		with color. set this to false if you don't want this to happen. Set to `true` by default.</haxe_doc>
		</toString>
		<forEachPixel public="1" get="inline" set="null" line="889" static="1"><f a="this:callback">
	<x path="vision.ds.ByteArray"/>
	<f a="x:y:color">
		<x path="Int"/>
		<x path="Int"/>
		<x path="vision.ds.Color"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></forEachPixel>
		<iterator public="1" get="inline" set="null" line="897" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<t path="Iterator"><c path="vision.ds.Pixel"/></t>
</f></iterator>
		<toLimeImage public="1" set="method" line="941" static="1">
			<f a="this">
				<x path="vision.ds.ByteArray"/>
				<c path="lime.graphics.Image"/>
			</f>
			<meta><m n=":to"/></meta>
		</toLimeImage>
		<fromLimeImage public="1" set="method" line="945" static="1">
			<f a="image">
				<c path="lime.graphics.Image"/>
				<x path="vision.ds.Image"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromLimeImage>
		<from2DArray public="1" set="method" line="969" static="1">
			<f a="array">
				<c path="Array"><c path="Array"><x path="vision.ds.Color"/></c></c>
				<x path="vision.ds.Image"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2DArray>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.formats._VisionImage.VisionImage_Fields_" params="" file="src/pixelimageXY/formats/VisionImage.hx" private="1" module="pixelimageXY.formats.VisionImage" final="1">
		<imageOff final="1" public="1" set="null" expr="vision.ds.Image.OFFSET" line="7" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>vision.ds.Image.OFFSET</e></m>
				<m n=":access"><e>vision.ds.Image.OFFSET</e></m>
			</meta>
			<haxe_doc>Allows injection of Bytes data directly into the Image and direct extraction</haxe_doc>
		</imageOff>
		<imageLen public="1" get="inline" set="null" line="10" static="1"><f a="image">
	<x path="vision.ds.Image"/>
	<x path="Int"/>
</f></imageLen>
		<injectBytesInImage public="1" get="inline" set="null" line="13" static="1"><f a="bytes:image">
	<c path="haxe.io.Bytes"/>
	<x path="vision.ds.Image"/>
	<x path="Void"/>
</f></injectBytesInImage>
		<extractBytesFromImage public="1" get="inline" set="null" line="15" static="1"><f a="image">
	<x path="vision.ds.Image"/>
	<c path="haxe.io.Bytes"/>
</f></extractBytesFromImage>
	</class>
	<class path="pixelimageXY.iter.BoundIterator" params="" file="src/pixelimageXY/iter/BoundIterator.hx">
		<_boundIterator3 public="1" expr="boundIterator3">
			<f a="a:b:c">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":value"><e>boundIterator3</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">boundIterator3</font> module level field]]></haxe_doc>
		</_boundIterator3>
		<_boundIterator4 public="1" expr="boundIterator4">
			<f a="a:b:c:d">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":value"><e>boundIterator4</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillGrad4RoundRectangle</font> module level field]]></haxe_doc>
		</_boundIterator4>
		<_boundIteratorX public="1" expr="boundIteratorX">
			<f a="pMin:pMax">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":value"><e>boundIteratorX</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">boundIteratorX</font> module level field]]></haxe_doc>
		</_boundIteratorX>
		<new public="1" set="method" line="69">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.iter._BoundIterator.BoundIterator_Fields_" params="" file="src/pixelimageXY/iter/BoundIterator.hx" private="1" module="pixelimageXY.iter.BoundIterator" final="1">
		<boundIterator3 public="1" get="inline" set="null" line="8" static="1"><f a="a:b:c">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></boundIterator3>
		<boundIterator4 public="1" get="inline" set="null" line="27" static="1"><f a="a:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></boundIterator4>
		<boundIteratorX public="1" get="inline" set="null" line="52" static="1"><f a="pMin:pMax">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></boundIteratorX>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.iter.IntIterStart" params="" file="src/pixelimageXY/iter/IteratorRange.hx" module="pixelimageXY.iter.IteratorRange">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<new public="1" set="method" line="9"><f a="min_:max_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Like a normal IntIterator but allows access of start and max after construction and reuse.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="pixelimageXY.iter.IteratorRange" params="" file="src/pixelimageXY/iter/IteratorRange.hx">
		<from>
			<icast><c path="pixelimageXY.iter.IntIterStart"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="pixelimageXY.iter.IntIterStart"/></this>
		<to><icast field="toIterStart"><x path="pixelimageXY.iter.IteratorRange"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="pixelimageXY.iter._IteratorRange.IteratorRange_Impl_" params="" file="src/pixelimageXY/iter/IteratorRange.hx" private="1" module="pixelimageXY.iter.IteratorRange" final="1">
	<startLength public="1" get="inline" set="null" line="19" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></startLength>
	<_new public="1" get="inline" set="null" line="22" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="28" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="32" static="1">
		<f a="this">
			<c path="pixelimageXY.iter.IntIterStart"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<iterator public="1" get="inline" set="null" line="35" static="1"><f a="this">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
	<adding public="1" get="inline" set="null" line="39" static="1">
		<f a="a:b">
			<x path="pixelimageXY.iter.IteratorRange"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="43" static="1"><f a="this:b">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></add>
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="51" static="1"><f a="this">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="55" static="1"><f a="this:l">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<contains public="1" get="inline" set="null" line="60" static="1"><f a="this:v">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="64" static="1"><f a="this:v">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<isWithin public="1" get="inline" set="null" line="68" static="1"><f a="this:ir">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="72" static="1"><f a="this:v">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<addAssign public="1" get="inline" set="null" line="78" static="1">
		<f a="a:v">
			<x path="pixelimageXY.iter.IteratorRange"/>
			<x path="Int"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</addAssign>
	<minusAssign public="1" get="inline" set="null" line="84" static="1">
		<f a="a:v">
			<x path="pixelimageXY.iter.IteratorRange"/>
			<x path="Int"/>
			<x path="pixelimageXY.iter.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</minusAssign>
	<ifContainMove public="1" get="inline" set="null" line="88" static="1"><f a="this:v:amount">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="pixelimageXY.iter._IteratorRange.IteratorRange_Impl_" params="" file="src/pixelimageXY/iter/IteratorRange.hx" private="1" module="pixelimageXY.iter.IteratorRange" final="1">
		<startLength public="1" get="inline" set="null" line="19" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></startLength>
		<_new public="1" get="inline" set="null" line="22" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="28" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="32" static="1">
			<f a="this">
				<c path="pixelimageXY.iter.IntIterStart"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<iterator public="1" get="inline" set="null" line="35" static="1"><f a="this">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
		<adding public="1" get="inline" set="null" line="39" static="1">
			<f a="a:b">
				<x path="pixelimageXY.iter.IteratorRange"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="43" static="1"><f a="this:b">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
</f></add>
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="51" static="1"><f a="this">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="55" static="1"><f a="this:l">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<contains public="1" get="inline" set="null" line="60" static="1"><f a="this:v">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="64" static="1"><f a="this:v">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<isWithin public="1" get="inline" set="null" line="68" static="1"><f a="this:ir">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="pixelimageXY.iter.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="72" static="1"><f a="this:v">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<addAssign public="1" get="inline" set="null" line="78" static="1">
			<f a="a:v">
				<x path="pixelimageXY.iter.IteratorRange"/>
				<x path="Int"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</addAssign>
		<minusAssign public="1" get="inline" set="null" line="84" static="1">
			<f a="a:v">
				<x path="pixelimageXY.iter.IteratorRange"/>
				<x path="Int"/>
				<x path="pixelimageXY.iter.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</minusAssign>
		<ifContainMove public="1" get="inline" set="null" line="88" static="1"><f a="this:v:amount">
	<c path="pixelimageXY.iter.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="pixelimageXY.pixel.ColorHelp" params="" file="src/pixelimageXY/pixel/ColorHelp.hx">
		<rgbInt_ public="1" expr="rgbInt">
			<f a="c">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rgbInt</e></m></meta>
		</rgbInt_>
		<colorAlpha_ public="1" expr="colorAlpha">
			<f a="color:alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>colorAlpha</e></m></meta>
		</colorAlpha_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<argbInt_ public="1" expr="argbInt">
			<f a="a:r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbInt</e></m></meta>
		</argbInt_>
		<alphaAvg_ public="1" expr="alphaAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaAvg</e></m></meta>
		</alphaAvg_>
		<redAvg_ public="1" expr="redAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redAvg</e></m></meta>
		</redAvg_>
		<greenAvg_ public="1" expr="greenAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenAvg</e></m></meta>
		</greenAvg_>
		<blueAvg_ public="1" expr="blueAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueAvg</e></m></meta>
		</blueAvg_>
		<argbIntAvg_ public="1" expr="argbIntAvg">
			<f a="c0:c1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbIntAvg</e></m></meta>
		</argbIntAvg_>
		<new public="1" set="method" line="119">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.pixel._ColorHelp.ColorHelp_Fields_" params="" file="src/pixelimageXY/pixel/ColorHelp.hx" private="1" module="pixelimageXY.pixel.ColorHelp" final="1">
		<stringColor public="1" get="inline" set="null" line="6" static="1"><f a="col:?alpha">
	<x path="Int"/>
	<x path="Float"/>
	<c path="String"/>
</f></stringColor>
		<stringHashARGB public="1" get="inline" set="null" line="18" static="1"><f a="col">
	<x path="Int"/>
	<c path="String"/>
</f></stringHashARGB>
		<alphaChannel public="1" get="inline" set="null" line="21" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="24" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="27" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="30" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<AplusRGB public="1" get="inline" set="null" line="33" static="1"><f a="col:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></AplusRGB>
		<argbInt public="1" get="inline" set="null" line="36" static="1"><f a="a:r:g:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbInt>
		<avg public="1" get="inline" set="null" line="39" static="1"><f a="p:q">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></avg>
		<between public="1" get="inline" set="null" line="42" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</between>
		<alphaAvg public="1" get="inline" set="null" line="45" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alphaAvg>
		<alphaBetween public="1" get="inline" set="null" line="48" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</alphaBetween>
		<redAvg public="1" get="inline" set="null" line="51" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></redAvg>
		<redBetween public="1" get="inline" set="null" line="54" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</redBetween>
		<greenAvg public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></greenAvg>
		<greenBetween public="1" get="inline" set="null" line="60" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</greenBetween>
		<blueAvg public="1" get="inline" set="null" line="63" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></blueAvg>
		<blueBetween public="1" get="inline" set="null" line="66" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</blueBetween>
		<from_argb public="1" get="inline" set="null" line="69" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<argbIntAvg public="1" get="inline" set="null" line="75" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbIntAvg>
		<argbIntBetween public="1" get="inline" set="null" line="81" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</argbIntBetween>
		<hexToARGB public="1" get="inline" set="null" line="86" static="1"><f a="int">
	<x path="Int"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></hexToARGB>
		<toHexInt public="1" get="inline" set="null" line="95" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbInt public="1" get="inline" set="null" line="98" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></rgbInt>
		<getAlpha public="1" get="inline" set="null" line="102" static="1"><f a="c">
	<x path="Float"/>
	<x path="Float"/>
</f></getAlpha>
		<alpha1 public="1" get="inline" set="null" line="105" static="1"><f a=""><x path="Float"/></f></alpha1>
		<getColor public="1" get="inline" set="null" line="108" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></getColor>
		<colorAlpha public="1" get="inline" set="null" line="113" static="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colorAlpha>
		<colorIntAlpha public="1" get="inline" set="null" line="117" static="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></colorIntAlpha>
		<luminosityGrey public="1" get="inline" set="null" line="138" static="1">
			<f a="color:?useAlpha" v=":true">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ useAlpha : true }</e></m></meta>
		</luminosityGrey>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.pixel.PixAlgo" params="" file="src/pixelimageXY/pixel/PixAlgo.hx">
		<_boundChannel public="1" expr="boundChannel">
			<f a="f">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>boundChannel</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">boundChannel</font> module level field]]></haxe_doc>
		</_boundChannel>
		<_colBlendFunc public="1" expr="colBlendFunc">
			<f a="x1:x2:a3:a2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>colBlendFunc</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">colBlendFunc</font> module level field]]></haxe_doc>
		</_colBlendFunc>
		<_alphaBlendFunc public="1" expr="alphaBlendFunc">
			<f a="a3:a2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>alphaBlendFunc</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">alphaBlendFunc</font> module level field]]></haxe_doc>
		</_alphaBlendFunc>
		<_channelFloat public="1" expr="channelFloat">
			<f a="color">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>channelFloat</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">channelFloat</font> module level field]]></haxe_doc>
		</_channelFloat>
		<new public="1" set="method" line="17">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.pixel._PixAlgo.PixAlgo_Fields_" params="" file="src/pixelimageXY/pixel/PixAlgo.hx" private="1" module="pixelimageXY.pixel.PixAlgo" final="1">
		<boundChannel public="1" get="inline" set="null" line="4" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></boundChannel>
		<colBlendFunc public="1" get="inline" set="null" line="11" static="1"><f a="x1:x2:a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colBlendFunc>
		<alphaBlendFunc public="1" get="inline" set="null" line="13" static="1"><f a="a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></alphaBlendFunc>
		<channelFloat public="1" get="inline" set="null" line="15" static="1"><f a="color">
	<x path="Int"/>
	<x path="Float"/>
</f></channelFloat>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="pixelimageXY.pixel.Pixel28" params="" file="src/pixelimageXY/pixel/Pixel28.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>This is an abstract RGB or BGR pixel 
    not used much
    @see Pixel32</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.pixel._Pixel28.Pixel28_Impl_" params="" file="src/pixelimageXY/pixel/Pixel28.hx" private="1" module="pixelimageXY.pixel.Pixel28" final="1">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="pixelimageXY.pixel.Pixel28"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<c1 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c1>
	<get_c1 get="inline" set="null" line="18" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c1>
	<set_c1 get="inline" set="null" line="20" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c1>
	<c2 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c2>
	<get_c2 get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c2>
	<set_c2 get="inline" set="null" line="29" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c2>
	<c3 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c3>
	<get_c3 get="inline" set="null" line="36" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c3>
	<set_c3 get="inline" set="null" line="38" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c3>
	<flip13 public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel28"/>
</f></flip13>
	<transferColor public="1" get="inline" set="null" line="47" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel28"/>
</f></transferColor>
	<stringHash public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
	<fromChannels public="1" get="inline" set="null" line="53" static="1"><f a="ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel28"/>
</f></fromChannels>
</class></impl>
	</abstract>
	<class path="pixelimageXY.pixel._Pixel28.Pixel28_Impl_" params="" file="src/pixelimageXY/pixel/Pixel28.hx" private="1" module="pixelimageXY.pixel.Pixel28" final="1">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="pixelimageXY.pixel.Pixel28"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<c1 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c1>
		<get_c1 get="inline" set="null" line="18" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c1>
		<set_c1 get="inline" set="null" line="20" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c1>
		<c2 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c2>
		<get_c2 get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c2>
		<set_c2 get="inline" set="null" line="29" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c2>
		<c3 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c3>
		<get_c3 get="inline" set="null" line="36" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c3>
		<set_c3 get="inline" set="null" line="38" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c3>
		<flip13 public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel28"/>
</f></flip13>
		<transferColor public="1" get="inline" set="null" line="47" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel28"/>
</f></transferColor>
		<stringHash public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
		<fromChannels public="1" get="inline" set="null" line="53" static="1"><f a="ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel28"/>
</f></fromChannels>
	</class>
	<abstract path="pixelimageXY.pixel.Pixel32" params="" file="src/pixelimageXY/pixel/Pixel32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>provides an abstract 32 bit color ARGB or ABGR
    can decompose channels c0,c1,c2,c3
    transferColor is used to flip R and B when drawing and reading from the canvas ( as required endian )
    channelBlend and alphaBlend are algorthms to blend a semi transparent pixel over another it does not transfer color channels</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.pixel._Pixel32.Pixel32_Impl_" params="" file="src/pixelimageXY/pixel/Pixel32.hx" private="1" module="pixelimageXY.pixel.Pixel32" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hexChannel public="1" get="inline" set="null" line="22" static="1">
		<f a="this:i">
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
		</f>
		<haxe_doc><![CDATA[returns the 0x00 -> 0xFF number component
        in ARGB, 0 -> B, 1 -> G, 2 - R, 3 -> A]]></haxe_doc>
	</hexChannel>
	<c0 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c0>
	<get_c0 get="inline" set="null" line="39" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c0>
	<set_c0 get="inline" set="null" line="41" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c0>
	<c1 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c1>
	<get_c1 get="inline" set="null" line="48" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c1>
	<set_c1 get="inline" set="null" line="50" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c1>
	<c2 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c2>
	<get_c2 get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c2>
	<set_c2 get="inline" set="null" line="59" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c2>
	<c3 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c3>
	<get_c3 get="inline" set="null" line="66" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c3>
	<set_c3 get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c3>
	<flip13 public="1" get="inline" set="null" line="74" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></flip13>
	<transferColor public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></transferColor>
	<stringHash public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
	<isTransparent public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTransparent>
	<fromPixel28Alpha public="1" get="inline" set="null" line="86" static="1"><f a="col:alpha">
	<x path="pixelimageXY.pixel.Pixel28"/>
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></fromPixel28Alpha>
	<fromChannels public="1" get="inline" set="null" line="89" static="1"><f a="ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></fromChannels>
	<from_argb public="1" get="inline" set="null" line="92" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></from_argb>
	<maskPixel public="1" get="inline" set="null" line="98" static="1"><f a="this:m">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></maskPixel>
	<channelBlend public="1" get="inline" set="null" line="118" static="1"><f a="this:ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></channelBlend>
	<alphaBlend public="1" get="inline" set="null" line="136" static="1">
		<f a="this:rhs">
			<x path="Int"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
			<x path="pixelimageXY.pixel.Pixel32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</alphaBlend>
	<colBlendFunc get="inline" set="null" line="154" static="1"><f a="x1:x2:a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colBlendFunc>
	<alphaBlendFunc get="inline" set="null" line="157" static="1"><f a="a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></alphaBlendFunc>
</class></impl>
	</abstract>
	<class path="pixelimageXY.pixel._Pixel32.Pixel32_Impl_" params="" file="src/pixelimageXY/pixel/Pixel32.hx" private="1" module="pixelimageXY.pixel.Pixel32" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hexChannel public="1" get="inline" set="null" line="22" static="1">
			<f a="this:i">
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
			</f>
			<haxe_doc><![CDATA[returns the 0x00 -> 0xFF number component
        in ARGB, 0 -> B, 1 -> G, 2 - R, 3 -> A]]></haxe_doc>
		</hexChannel>
		<c0 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c0>
		<get_c0 get="inline" set="null" line="39" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c0>
		<set_c0 get="inline" set="null" line="41" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c0>
		<c1 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c1>
		<get_c1 get="inline" set="null" line="48" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c1>
		<set_c1 get="inline" set="null" line="50" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c1>
		<c2 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c2>
		<get_c2 get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c2>
		<set_c2 get="inline" set="null" line="59" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c2>
		<c3 public="1" get="accessor" set="accessor" static="1"><x path="pixelimageXY.pixel.PixelChannel"/></c3>
		<get_c3 get="inline" set="null" line="66" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></get_c3>
		<set_c3 get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
</f></set_c3>
		<flip13 public="1" get="inline" set="null" line="74" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></flip13>
		<transferColor public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></transferColor>
		<stringHash public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
		<isTransparent public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTransparent>
		<fromPixel28Alpha public="1" get="inline" set="null" line="86" static="1"><f a="col:alpha">
	<x path="pixelimageXY.pixel.Pixel28"/>
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></fromPixel28Alpha>
		<fromChannels public="1" get="inline" set="null" line="89" static="1"><f a="ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></fromChannels>
		<from_argb public="1" get="inline" set="null" line="92" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></from_argb>
		<maskPixel public="1" get="inline" set="null" line="98" static="1"><f a="this:m">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></maskPixel>
		<channelBlend public="1" get="inline" set="null" line="118" static="1"><f a="this:ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.PixelChannel"/>
	<x path="pixelimageXY.pixel.Pixel32"/>
</f></channelBlend>
		<alphaBlend public="1" get="inline" set="null" line="136" static="1">
			<f a="this:rhs">
				<x path="Int"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
				<x path="pixelimageXY.pixel.Pixel32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</alphaBlend>
		<colBlendFunc get="inline" set="null" line="154" static="1"><f a="x1:x2:a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colBlendFunc>
		<alphaBlendFunc get="inline" set="null" line="157" static="1"><f a="a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></alphaBlendFunc>
	</class>
	<abstract path="pixelimageXY.pixel.PixelChannel" params="" file="src/pixelimageXY/pixel/PixelChannel.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="toHexInt"><x path="Float"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="colIntToFloat"><x path="Float"/></icast>
			<icast field="stringHash"><c path="String"/></icast>
		</to>
		<haxe_doc>helper for working with colour channels
    so providing float ones for calculations and bounding for when converting back</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.pixel._PixelChannel.PixelChannel_Impl_" params="" file="src/pixelimageXY/pixel/PixelChannel.hx" private="1" module="pixelimageXY.pixel.PixelChannel" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toHexInt public="1" get="inline" set="null" line="14" static="1">
		<f a="c">
			<x path="Float"/>
			<x path="pixelimageXY.pixel.PixelChannel"/>
		</f>
		<meta><m n=":from"/></meta>
	</toHexInt>
	<colIntToFloat public="1" get="inline" set="null" line="17" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</colIntToFloat>
	<stringHash public="1" get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</stringHash>
	<boundChannel public="1" get="inline" set="null" line="22" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></boundChannel>
</class></impl>
	</abstract>
	<class path="pixelimageXY.pixel._PixelChannel.PixelChannel_Impl_" params="" file="src/pixelimageXY/pixel/PixelChannel.hx" private="1" module="pixelimageXY.pixel.PixelChannel" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toHexInt public="1" get="inline" set="null" line="14" static="1">
			<f a="c">
				<x path="Float"/>
				<x path="pixelimageXY.pixel.PixelChannel"/>
			</f>
			<meta><m n=":from"/></meta>
		</toHexInt>
		<colIntToFloat public="1" get="inline" set="null" line="17" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</colIntToFloat>
		<stringHash public="1" get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</stringHash>
		<boundChannel public="1" get="inline" set="null" line="22" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></boundChannel>
	</class>
	<class path="pixelimageXY.pixel.PixelsTransform" params="" file="src/pixelimageXY/pixel/PixelsTransform.hx">
		<_pixelsTransform public="1" expr="pixelsTransform">
			<f a="imageTarget:imageSource:transformFunc:xTarget:yTarget:xSource:ySource:w:h">
				<x path="pixelimageXY.Pixelimage"/>
				<x path="pixelimageXY.Pixelimage"/>
				<f a="colorTarget:colorSource">
					<x path="pixelimageXY.pixel.Pixel32"/>
					<x path="pixelimageXY.pixel.Pixel32"/>
					<x path="pixelimageXY.pixel.Pixel28"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>pixelsTransform</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">pixelsTransform</font> module level field]]></haxe_doc>
		</_pixelsTransform>
		<new public="1" set="method" line="32">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="pixelimageXY.pixel._PixelsTransform.PixelsTransform_Fields_" params="" file="src/pixelimageXY/pixel/PixelsTransform.hx" private="1" module="pixelimageXY.pixel.PixelsTransform" final="1">
		<pixelsTransform public="1" set="method" line="8" static="1"><f a="imageTarget:imageSource:transformFunc:xTarget:yTarget:xSource:ySource:w:h">
	<x path="pixelimageXY.Pixelimage"/>
	<x path="pixelimageXY.Pixelimage"/>
	<f a="colorTarget:colorSource">
		<x path="pixelimageXY.pixel.Pixel32"/>
		<x path="pixelimageXY.pixel.Pixel32"/>
		<x path="pixelimageXY.pixel.Pixel28"/>
	</f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></pixelsTransform>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.pixel._TwoGrad.TwoGrad_" params="" file="src/pixelimageXY/pixel/TwoGrad.hx" private="1" module="pixelimageXY.pixel.TwoGrad">
		<colorClock public="1"><x path="Int"/></colorClock>
		<colorAnti public="1"><x path="Int"/></colorAnti>
		<new public="1" set="method" line="8"><f a="colorClock:colorAnti">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.pixel.TwoGrad" params="" file="src/pixelimageXY/pixel/TwoGrad.hx">
		<from><icast><c path="pixelimageXY.pixel._TwoGrad.TwoGrad_"/></icast></from>
		<this><c path="pixelimageXY.pixel._TwoGrad.TwoGrad_"/></this>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>cornerContour.color.TwoGrad</e></m>
		</meta>
		<impl><class path="pixelimageXY.pixel._TwoGrad.TwoGrad_Impl_" params="" file="src/pixelimageXY/pixel/TwoGrad.hx" private="1" module="pixelimageXY.pixel.TwoGrad" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="colorClock:colorAnti">
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.pixel.TwoGrad"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<average public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<c path="pixelimageXY.pixel._TwoGrad.TwoGrad_"/>
	<x path="Int"/>
</f></average>
	<meta><m n=":access"><e>cornerContour.color.TwoGrad</e></m></meta>
</class></impl>
	</abstract>
	<class path="pixelimageXY.pixel._TwoGrad.TwoGrad_Impl_" params="" file="src/pixelimageXY/pixel/TwoGrad.hx" private="1" module="pixelimageXY.pixel.TwoGrad" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="colorClock:colorAnti">
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.pixel.TwoGrad"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<average public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<c path="pixelimageXY.pixel._TwoGrad.TwoGrad_"/>
	<x path="Int"/>
</f></average>
		<meta><m n=":access"><e>cornerContour.color.TwoGrad</e></m></meta>
	</class>
	<typedef path="pixelimageXY.rectPack2d.Atlas" params="" file="src/pixelimageXY/rectPack2d/AtlasBuilder.hx" module="pixelimageXY.rectPack2d.AtlasBuilder"><a>
	<jsonString><c path="String"/></jsonString>
	<imageWrapper><t path="pixelimageXY.rectPack2d.ImageWrapper"/></imageWrapper>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.ImageWrapper" params="" file="src/pixelimageXY/rectPack2d/AtlasBuilder.hx" module="pixelimageXY.rectPack2d.AtlasBuilder"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
	<drawCW set="method"><f a="fx:fy:fromImg">
	<x path="Int"/>
	<x path="Int"/>
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></drawCW>
	<drawACW set="method"><f a="fx:fy:fromImg">
	<x path="Int"/>
	<x path="Int"/>
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></drawACW>
	<draw set="method"><f a="fx:fy:fromImg">
	<x path="Int"/>
	<x path="Int"/>
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></draw>
</a></typedef>
	<class path="pixelimageXY.rectPack2d.AtlasBuilder" params="" file="src/pixelimageXY/rectPack2d/AtlasBuilder.hx">
		<blocks expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</blocks>
		<bins expr="new Array&lt;Bin&gt;()">
			<c path="Array"><c path="pixelimageXY.rectPack2d.Bin"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bin>()]]></e></m></meta>
		</bins>
		<names expr="new Array&lt;String&gt;()">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<String>()]]></e></m></meta>
		</names>
		<locations><c path="Array"><t path="pixelimageXY.rectPack2d.Location"/></c></locations>
		<arrImages><c path="Array"><t path="pixelimageXY.rectPack2d.ImageWrapper"/></c></arrImages>
		<tp expr="new TP()">
			<c path="pixelimageXY.rectPack2d.TP"/>
			<meta><m n=":value"><e>new TP()</e></m></meta>
		</tp>
		<wid><x path="Int"/></wid>
		<hi><x path="Null"><x path="Int"/></x></hi>
		<packSize><x path="Int"/></packSize>
		<reset public="1" set="method" line="37"><f a=""><x path="Void"/></f></reset>
		<generatePackingData public="1" set="method" line="45"><f a="arrImages_:names_:packSize_">
	<c path="Array"><t path="pixelimageXY.rectPack2d.ImageWrapper"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></generatePackingData>
		<createBlocks get="inline" set="null" line="54"><f a=""><x path="Void"/></f></createBlocks>
		<pack get="inline" set="null" line="62"><f a=""><x path="Void"/></f></pack>
		<getAtlas public="1" set="method" line="69">
			<f a="fileName:image:?locations_" v="::null">
				<c path="String"/>
				<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
				<c path="Array"><t path="pixelimageXY.rectPack2d.Location"/></c>
				<t path="pixelimageXY.rectPack2d.Atlas"/>
			</f>
			<meta><m n=":value"><e>{ locations_ : null }</e></m></meta>
		</getAtlas>
		<addMeta get="inline" set="null" line="79"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></addMeta>
		<renderToAtlas get="inline" set="null" line="83"><f a="image">
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></renderToAtlas>
		<addJSONBlock get="inline" set="null" line="108"><f a="name:location:block">
	<c path="String"/>
	<t path="pixelimageXY.rectPack2d.Location"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<c path="String"/>
</f></addJSONBlock>
		<renderBlock get="inline" set="null" line="117"><f a="image:name:id:left:top:wid:hi:flip">
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></renderBlock>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<haxe_doc>AtlasBuilder 
 *
 *  usage:
 *
 *  var atlasBuilder = new AtlasBuilder();
 *  var width = atlasBuilder.generatePackingData( arrImages, height ); // arrImages is array of image holders
 *  var img: ImageWrapper = new ImageHolder( height, width ); // image holder is your class.
 *  var atlas: Atlas = atlasBuilder.getAtlas( 'output.png', img );
 *</haxe_doc>
	</class>
	<typedef path="pixelimageXY.rectPack2d.ImageData" params="" file="src/pixelimageXY/rectPack2d/AtlasBuilder_wh.hx" module="pixelimageXY.rectPack2d.AtlasBuilder_wh"><a>
	<names><c path="Array"><c path="String"/></c></names>
	<images><c path="Array"><t path="pixelimageXY.rectPack2d.ImageWrapper"/></c></images>
</a></typedef>
	<class path="pixelimageXY.rectPack2d.AtlasBuilder_wh" params="" file="src/pixelimageXY/rectPack2d/AtlasBuilder_wh.hx">
		<blocks expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</blocks>
		<bins expr="new Array&lt;Bin&gt;()">
			<c path="Array"><c path="pixelimageXY.rectPack2d.Bin"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bin>()]]></e></m></meta>
		</bins>
		<imageData><t path="pixelimageXY.rectPack2d.ImageData"/></imageData>
		<locations><c path="Array"><t path="pixelimageXY.rectPack2d.Location"/></c></locations>
		<tp expr="new TP()">
			<c path="pixelimageXY.rectPack2d.TP"/>
			<meta><m n=":value"><e>new TP()</e></m></meta>
		</tp>
		<wid><x path="Int"/></wid>
		<hi><x path="Null"><x path="Int"/></x></hi>
		<packSize><x path="Int"/></packSize>
		<reset public="1" set="method" line="20"><f a=""><x path="Void"/></f></reset>
		<generatePackingData public="1" set="method" line="27"><f a="imageData_:packSize_">
	<t path="pixelimageXY.rectPack2d.ImageData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></generatePackingData>
		<createBlocks get="inline" set="null" line="35"><f a=""><x path="Void"/></f></createBlocks>
		<pack get="inline" set="null" line="44"><f a=""><x path="Void"/></f></pack>
		<getAtlas public="1" set="method" line="51">
			<f a="fileName:image:?locations_" v="::null">
				<c path="String"/>
				<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
				<c path="Array"><t path="pixelimageXY.rectPack2d.Location"/></c>
				<t path="pixelimageXY.rectPack2d.Atlas"/>
			</f>
			<meta><m n=":value"><e>{ locations_ : null }</e></m></meta>
		</getAtlas>
		<addMeta get="inline" set="null" line="61"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></addMeta>
		<renderToAtlas get="inline" set="null" line="65"><f a="image">
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></renderToAtlas>
		<addJSONBlock get="inline" set="null" line="90"><f a="name:location:block">
	<c path="String"/>
	<t path="pixelimageXY.rectPack2d.Location"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<c path="String"/>
</f></addJSONBlock>
		<renderBlock set="method" line="99"><f a="image:name:id:left:top:wid:hi:flip">
	<t path="pixelimageXY.rectPack2d.ImageWrapper"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></renderBlock>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="pixelimageXY.rectPack2d.Bin" params="" file="src/pixelimageXY/rectPack2d/Bin.hx">
		<size public="1"><x path="pixelimageXY.rectPack2d.WH"/></size>
		<rects public="1" expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</rects>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.BodyBuilder" params="" file="src/pixelimageXY/rectPack2d/BodyBuilder.hx">
		<blocks expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</blocks>
		<bins expr="new Array&lt;Bin&gt;()">
			<c path="Array"><c path="pixelimageXY.rectPack2d.Bin"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bin>()]]></e></m></meta>
		</bins>
		<locations><c path="Array"><t path="pixelimageXY.rectPack2d.Location"/></c></locations>
		<tp expr="new TP()">
			<c path="pixelimageXY.rectPack2d.TP"/>
			<meta><m n=":value"><e>new TP()</e></m></meta>
		</tp>
		<wid><x path="Int"/></wid>
		<hi><x path="Null"><x path="Int"/></x></hi>
		<packSize><x path="Int"/></packSize>
		<jsonString public="1"><c path="String"/></jsonString>
		<bodyFrames public="1"><c path="pixelimageXY.rectPack2d.BodyFrames"/></bodyFrames>
		<names><c path="Array"><c path="String"/></c></names>
		<reset public="1" set="method" line="17"><f a=""><x path="Void"/></f></reset>
		<generatePackingData public="1" set="method" line="26"><f a="names_:blocks_:packSize_">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></generatePackingData>
		<pack get="inline" set="null" line="34"><f a=""><x path="Void"/></f></pack>
		<build public="1" set="method" line="40">
			<f a="fileName:?locations_" v=":null">
				<c path="String"/>
				<c path="Array"><t path="pixelimageXY.rectPack2d.Location"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ locations_ : null }</e></m></meta>
		</build>
		<addMeta get="inline" set="null" line="47"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></addMeta>
		<renderToLimbs get="inline" set="null" line="51"><f a=""><x path="Void"/></f></renderToLimbs>
		<addJSONBlock get="inline" set="null" line="71"><f a="name:location:block">
	<c path="String"/>
	<t path="pixelimageXY.rectPack2d.Location"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<c path="String"/>
</f></addJSONBlock>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="pixelimageXY.rectPack2d.BodyFrames" params="" file="src/pixelimageXY/rectPack2d/BodyFrames.hx">
		<framesHolder><t path="pixelimageXY.rectPack2d.FramesHolder"/></framesHolder>
		<limbs public="1" expr="new Array&lt;LimbFrame&gt;()">
			<c path="Array"><c path="pixelimageXY.rectPack2d.LimbFrame"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<LimbFrame>()]]></e></m></meta>
		</limbs>
		<limbByName public="1" set="method" line="15"><f a="name">
	<c path="String"/>
	<c path="pixelimageXY.rectPack2d.LimbFrame"/>
</f></limbByName>
		<getNames public="1" set="method" line="25"><f a=""><c path="Array"><c path="String"/></c></f></getNames>
		<getNameString public="1" set="method" line="34"><f a=""><c path="String"/></f></getNameString>
		<new public="1" set="method" line="7"><f a="strJson">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.LTRB_" params="" file="src/pixelimageXY/rectPack2d/LTRB.hx" module="pixelimageXY.rectPack2d.LTRB">
		<l public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<t public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</t>
		<r public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</r>
		<b public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</b>
		<new public="1" get="inline" set="null" line="10"><f a="l:t:r:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.rectPack2d.LTRB" params="" file="src/pixelimageXY/rectPack2d/LTRB.hx">
		<from><icast><c path="pixelimageXY.rectPack2d.LTRB_"/></icast></from>
		<this><c path="pixelimageXY.rectPack2d.LTRB_"/></this>
		<to>
			<icast><c path="pixelimageXY.rectPack2d.LTRB_"/></icast>
			<icast field="toXYWH"><x path="pixelimageXY.rectPack2d.XYWH"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.rectPack2d._LTRB.LTRB_Impl_" params="" file="src/pixelimageXY/rectPack2d/LTRB.hx" private="1" module="pixelimageXY.rectPack2d.LTRB" final="1">
	<_new public="1" get="inline" set="null" line="22" static="1">
		<f a="l:t:r:b">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.rectPack2d.LTRB"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<w public="1" get="accessor" set="accessor" static="1"><x path="Int"/></w>
	<get_w get="inline" set="null" line="27" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_w>
	<set_w get="inline" set="null" line="31" static="1"><f a="this:ww">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_w>
	<h public="1" get="accessor" set="accessor" static="1"><x path="Int"/></h>
	<get_h get="inline" set="null" line="37" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_h>
	<set_h public="1" set="method" line="40" static="1"><f a="this:hh">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_h>
	<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
	<get_area public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_area>
	<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
	<get_perimeter public="1" get="inline" set="null" line="51" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_perimeter>
	<toXYWH public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="pixelimageXY.rectPack2d.LTRB_"/>
			<x path="pixelimageXY.rectPack2d.XYWH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toXYWH>
</class></impl>
	</abstract>
	<class path="pixelimageXY.rectPack2d._LTRB.LTRB_Impl_" params="" file="src/pixelimageXY/rectPack2d/LTRB.hx" private="1" module="pixelimageXY.rectPack2d.LTRB" final="1">
		<_new public="1" get="inline" set="null" line="22" static="1">
			<f a="l:t:r:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.rectPack2d.LTRB"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<w public="1" get="accessor" set="accessor" static="1"><x path="Int"/></w>
		<get_w get="inline" set="null" line="27" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_w>
		<set_w get="inline" set="null" line="31" static="1"><f a="this:ww">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_w>
		<h public="1" get="accessor" set="accessor" static="1"><x path="Int"/></h>
		<get_h get="inline" set="null" line="37" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_h>
		<set_h public="1" set="method" line="40" static="1"><f a="this:hh">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_h>
		<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
		<get_area public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_area>
		<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
		<get_perimeter public="1" get="inline" set="null" line="51" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_perimeter>
		<toXYWH public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="pixelimageXY.rectPack2d.LTRB_"/>
				<x path="pixelimageXY.rectPack2d.XYWH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toXYWH>
	</class>
	<class path="pixelimageXY.rectPack2d.LimbFrame" params="" file="src/pixelimageXY/rectPack2d/LimbFrame.hx">
		<name public="1"><c path="String"/></name>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<w public="1"><x path="Float"/></w>
		<h public="1"><x path="Float"/></h>
		<flipped public="1"><x path="Bool"/></flipped>
		<realW public="1"><x path="Float"/></realW>
		<realH public="1"><x path="Float"/></realH>
		<new public="1" set="method" line="12"><f a="frame_">
	<t path="pixelimageXY.rectPack2d.Frame"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.Node" params="" file="src/pixelimageXY/rectPack2d/Node.hx">
		<c0 public="1" expr="new PNode()">
			<c path="pixelimageXY.rectPack2d.PNode"/>
			<meta><m n=":value"><e>new PNode()</e></m></meta>
		</c0>
		<c1 public="1" expr="new PNode()">
			<c path="pixelimageXY.rectPack2d.PNode"/>
			<meta><m n=":value"><e>new PNode()</e></m></meta>
		</c1>
		<rc public="1"><x path="pixelimageXY.rectPack2d.LTRB"/></rc>
		<id public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</id>
		<reset public="1" set="method" line="11"><f a="wh">
	<x path="pixelimageXY.rectPack2d.WH"/>
	<x path="Void"/>
</f></reset>
		<insert public="1" set="method" line="16"><f a="rect">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<c path="pixelimageXY.rectPack2d.Node"/>
</f></insert>
		<delcheck set="method" line="51"><f a=""><x path="Void"/></f></delcheck>
		<new public="1" set="method" line="8"><f a="rc_">
	<x path="pixelimageXY.rectPack2d.LTRB"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.PNode" params="" file="src/pixelimageXY/rectPack2d/PNode.hx">
		<pn public="1" expr="null">
			<x path="Null"><c path="pixelimageXY.rectPack2d.Node"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</pn>
		<fill public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</fill>
		<init public="1" set="method" line="7"><f a="l:t:r:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></init>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.RectPack2d" params="" file="src/pixelimageXY/rectPack2d/RectPack2d.hx">
		<discardStep public="1" get="inline" set="null" expr="128" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</discardStep>
		<rect2D set="method" line="7" static="1"><f a="v:maxS:succ:unsucc">
	<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
	<x path="Int"/>
	<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
	<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
	<x path="pixelimageXY.rectPack2d.WH"/>
</f></rect2D>
		<pack public="1" set="method" line="99" static="1"><f a="v:maxS:bins">
	<c path="Array"><x path="pixelimageXY.rectPack2d.XYWHF"/></c>
	<x path="Int"/>
	<c path="Array"><c path="pixelimageXY.rectPack2d.Bin"/></c>
	<x path="Bool"/>
</f></pack>
		<new public="1" set="method" line="5"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.Sorts" params="" file="src/pixelimageXY/rectPack2d/Sorts.hx">
		<all public="1" get="inline" set="null" line="3" static="1"><f a=""><c path="Array"><f a=":">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></c></f></all>
		<area public="1" get="inline" set="null" line="9" static="1"><f a="a:b">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></area>
		<perimeter public="1" get="inline" set="null" line="21" static="1"><f a="a:b">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></perimeter>
		<maxSide public="1" get="inline" set="null" line="33" static="1"><f a="a:b">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></maxSide>
		<maxWidth public="1" get="inline" set="null" line="45" static="1"><f a="a:b">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></maxWidth>
		<maxHeight public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></maxHeight>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="pixelimageXY.rectPack2d.Location" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<h><x path="Float"/></h>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.FramesHolder" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<metaDetails><t path="pixelimageXY.rectPack2d.MetaDetails"/></metaDetails>
	<frames><c path="Array"><t path="pixelimageXY.rectPack2d.Frame"/></c></frames>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.Meta" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a><meta><t path="pixelimageXY.rectPack2d.MetaDetails"/></meta></a></typedef>
	<typedef path="pixelimageXY.rectPack2d.MetaDetails" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<version><c path="String"/></version>
	<size><t path="pixelimageXY.rectPack2d.Size"/></size>
	<scale><x path="Float"/></scale>
	<image><c path="String"/></image>
	<format><x path="pixelimageXY.rectPack2d.PixelFormat"/></format>
	<app><c path="String"/></app>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.Frame" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<imageName><c path="String"/></imageName>
	<frameContent><t path="pixelimageXY.rectPack2d.FrameContent"/></frameContent>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.FrameContent" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<trimmed><x path="Bool"/></trimmed>
	<spriteSourceSize><t path="pixelimageXY.rectPack2d.Dimensions"/></spriteSourceSize>
	<rotated><x path="Bool"/></rotated>
	<frame><t path="pixelimageXY.rectPack2d.Dimensions"/></frame>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.Dimensions" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
</a></typedef>
	<typedef path="pixelimageXY.rectPack2d.Size" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP"><a>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
</a></typedef>
	<abstract path="pixelimageXY.rectPack2d.PixelFormat" params="" file="src/pixelimageXY/rectPack2d/TP.hx" module="pixelimageXY.rectPack2d.TP">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="pixelimageXY.rectPack2d._TP.PixelFormat_Impl_" params="" file="src/pixelimageXY/rectPack2d/TP.hx" private="1" module="pixelimageXY.rectPack2d.TP" extern="1" final="1">
	<RGBA8888 public="1" get="inline" set="null" expr="cast &quot;RGBA8888&quot;" line="52" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA8888"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA8888>
	<RGBA4444 public="1" get="inline" set="null" expr="cast &quot;RGBA4444&quot;" line="53" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA4444"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA4444>
	<RGBA5551 public="1" get="inline" set="null" expr="cast &quot;RGBA5551&quot;" line="54" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA5551"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA5551>
	<RGBA5555 public="1" get="inline" set="null" expr="cast &quot;RGBA5555&quot;" line="55" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA5555"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA5555>
	<BGRA8888 public="1" get="inline" set="null" expr="cast &quot;BGRA8888&quot;" line="56" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "BGRA8888"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BGRA8888>
	<RGB888 public="1" get="inline" set="null" expr="cast &quot;RGB888&quot;" line="57" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGB888"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB888>
	<RGB565 public="1" get="inline" set="null" expr="cast &quot;RGB565&quot;" line="58" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGB565"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB565>
	<ALPHA public="1" get="inline" set="null" expr="cast &quot;ALPHA&quot;" line="59" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "ALPHA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALPHA>
	<ALPHA_INTENSITY public="1" get="inline" set="null" expr="cast &quot;ALPHA_INTENSITY&quot;" line="60" static="1">
		<x path="pixelimageXY.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "ALPHA_INTENSITY"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALPHA_INTENSITY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="pixelimageXY.rectPack2d._TP.PixelFormat_Impl_" params="" file="src/pixelimageXY/rectPack2d/TP.hx" private="1" module="pixelimageXY.rectPack2d.TP" extern="1" final="1">
		<RGBA8888 public="1" get="inline" set="null" expr="cast &quot;RGBA8888&quot;" line="52" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA8888"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA8888>
		<RGBA4444 public="1" get="inline" set="null" expr="cast &quot;RGBA4444&quot;" line="53" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA4444"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA4444>
		<RGBA5551 public="1" get="inline" set="null" expr="cast &quot;RGBA5551&quot;" line="54" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA5551"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA5551>
		<RGBA5555 public="1" get="inline" set="null" expr="cast &quot;RGBA5555&quot;" line="55" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA5555"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA5555>
		<BGRA8888 public="1" get="inline" set="null" expr="cast &quot;BGRA8888&quot;" line="56" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "BGRA8888"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BGRA8888>
		<RGB888 public="1" get="inline" set="null" expr="cast &quot;RGB888&quot;" line="57" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGB888"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB888>
		<RGB565 public="1" get="inline" set="null" expr="cast &quot;RGB565&quot;" line="58" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGB565"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB565>
		<ALPHA public="1" get="inline" set="null" expr="cast &quot;ALPHA&quot;" line="59" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "ALPHA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALPHA>
		<ALPHA_INTENSITY public="1" get="inline" set="null" expr="cast &quot;ALPHA_INTENSITY&quot;" line="60" static="1">
			<x path="pixelimageXY.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "ALPHA_INTENSITY"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALPHA_INTENSITY>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.TP" params="" file="src/pixelimageXY/rectPack2d/TP.hx">
		<frameHolderTraceImages public="1" set="method" line="152" static="1"><f a="framesHolder">
	<t path="pixelimageXY.rectPack2d.FramesHolder"/>
	<x path="Void"/>
</f></frameHolderTraceImages>
		<frameHolderToTP public="1" set="method" line="161" static="1"><f a="framesHolder">
	<t path="pixelimageXY.rectPack2d.FramesHolder"/>
	<c path="pixelimageXY.rectPack2d.TP"/>
</f></frameHolderToTP>
		<reconstruct public="1" set="method" line="189" static="1"><f a="atlasJson">
	<c path="String"/>
	<t path="pixelimageXY.rectPack2d.FramesHolder"/>
</f></reconstruct>
		<frames expr="new Array&lt;String&gt;()">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<String>()]]></e></m></meta>
		</frames>
		<meta><c path="String"/></meta>
		<resetFrames public="1" set="method" line="66"><f a=""><x path="Void"/></f></resetFrames>
		<frameDefine public="1" set="method" line="71">
			<f a="name:location:block:?x2:?trimmed_" v=":::false:false">
				<c path="String"/>
				<t path="pixelimageXY.rectPack2d.Location"/>
				<x path="pixelimageXY.rectPack2d.XYWHF"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ trimmed_ : false, x2 : false }</e></m></meta>
		</frameDefine>
		<metaDefine public="1" set="method" line="124">
			<f a="imageName_:width_:height_:?format_:?scale_" v=":::RGBA8888:1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.rectPack2d.PixelFormat"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ scale_ : 1, format_ : RGBA8888 }</e></m></meta>
		</metaDefine>
		<write public="1" set="method" line="143"><f a=""><c path="String"/></f></write>
		<framesHolderAdd public="1" set="method" line="168"><f a="framesHolder">
	<t path="pixelimageXY.rectPack2d.FramesHolder"/>
	<x path="Void"/>
</f></framesHolderAdd>
		<framesHolderToMeta public="1" set="method" line="184"><f a="framesHolder">
	<t path="pixelimageXY.rectPack2d.FramesHolder"/>
	<x path="Void"/>
</f></framesHolderToMeta>
		<new public="1" set="method" line="65"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.WH_" params="" file="src/pixelimageXY/rectPack2d/WH.hx" module="pixelimageXY.rectPack2d.WH">
		<w public="1"><x path="Int"/></w>
		<h public="1"><x path="Int"/></h>
		<new public="1" set="method" line="7">
			<f a="?w:?h" v="0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : 0, w : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.rectPack2d.WH" params="" file="src/pixelimageXY/rectPack2d/WH.hx">
		<from><icast><c path="pixelimageXY.rectPack2d.WH_"/></icast></from>
		<this><c path="pixelimageXY.rectPack2d.WH_"/></this>
		<to><icast><c path="pixelimageXY.rectPack2d.WH_"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.rectPack2d._WH.WH_Impl_" params="" file="src/pixelimageXY/rectPack2d/WH.hx" private="1" module="pixelimageXY.rectPack2d.WH" final="1">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.rectPack2d.WH"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
	<get_area public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_area>
	<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
	<get_perimeter public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_perimeter>
	<fits public="1" set="method" line="29" static="1"><f a="this:r">
	<c path="pixelimageXY.rectPack2d.WH_"/>
	<x path="pixelimageXY.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="pixelimageXY.rectPack2d._WH.WH_Impl_" params="" file="src/pixelimageXY/rectPack2d/WH.hx" private="1" module="pixelimageXY.rectPack2d.WH" final="1">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.rectPack2d.WH"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
		<get_area public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_area>
		<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
		<get_perimeter public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_perimeter>
		<fits public="1" set="method" line="29" static="1"><f a="this:r">
	<c path="pixelimageXY.rectPack2d.WH_"/>
	<x path="pixelimageXY.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="pixelimageXY.rectPack2d.XYWH_" params="" file="src/pixelimageXY/rectPack2d/XYWH.hx" module="pixelimageXY.rectPack2d.XYWH">
		<extends path="pixelimageXY.rectPack2d.WH_"/>
		<x public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</x>
		<y public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</y>
		<new public="1" set="method" line="8"><f a="x:y:w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.rectPack2d.XYWH" params="" file="src/pixelimageXY/rectPack2d/XYWH.hx">
		<from><icast><c path="pixelimageXY.rectPack2d.XYWH_"/></icast></from>
		<this><c path="pixelimageXY.rectPack2d.XYWH_"/></this>
		<to>
			<icast><c path="pixelimageXY.rectPack2d.XYWH_"/></icast>
			<icast field="toWH"><x path="pixelimageXY.rectPack2d.WH"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.rectPack2d._XYWH.XYWH_Impl_" params="" file="src/pixelimageXY/rectPack2d/XYWH.hx" private="1" module="pixelimageXY.rectPack2d.XYWH" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="x:y:w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.rectPack2d.XYWH"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<r public="1" get="accessor" set="accessor" static="1"><x path="Int"/></r>
	<get_r get="inline" set="null" line="23" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_r>
	<set_r get="inline" set="null" line="27" static="1"><f a="this:rr">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_r>
	<b public="1" get="accessor" set="accessor" static="1"><x path="Int"/></b>
	<get_b get="inline" set="null" line="33" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_b>
	<set_b get="inline" set="null" line="37" static="1"><f a="this:bb">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_b>
	<toWH public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<c path="pixelimageXY.rectPack2d.XYWH_"/>
			<x path="pixelimageXY.rectPack2d.WH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toWH>
</class></impl>
	</abstract>
	<class path="pixelimageXY.rectPack2d._XYWH.XYWH_Impl_" params="" file="src/pixelimageXY/rectPack2d/XYWH.hx" private="1" module="pixelimageXY.rectPack2d.XYWH" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.rectPack2d.XYWH"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<r public="1" get="accessor" set="accessor" static="1"><x path="Int"/></r>
		<get_r get="inline" set="null" line="23" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_r>
		<set_r get="inline" set="null" line="27" static="1"><f a="this:rr">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_r>
		<b public="1" get="accessor" set="accessor" static="1"><x path="Int"/></b>
		<get_b get="inline" set="null" line="33" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_b>
		<set_b get="inline" set="null" line="37" static="1"><f a="this:bb">
	<c path="pixelimageXY.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_b>
		<toWH public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<c path="pixelimageXY.rectPack2d.XYWH_"/>
				<x path="pixelimageXY.rectPack2d.WH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toWH>
	</class>
	<class path="pixelimageXY.rectPack2d.XYWHF_" params="" file="src/pixelimageXY/rectPack2d/XYWHF.hx" module="pixelimageXY.rectPack2d.XYWHF">
		<extends path="pixelimageXY.rectPack2d.XYWH_"/>
		<flipped public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</flipped>
		<id public="1"><x path="Int"/></id>
		<new public="1" set="method" line="8"><f a="id:x:y:w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="pixelimageXY.rectPack2d.XYWHF" params="" file="src/pixelimageXY/rectPack2d/XYWHF.hx">
		<from><icast><c path="pixelimageXY.rectPack2d.XYWHF_"/></icast></from>
		<this><c path="pixelimageXY.rectPack2d.XYWHF_"/></this>
		<to>
			<icast><c path="pixelimageXY.rectPack2d.XYWHF_"/></icast>
			<icast field="toXYWH"><x path="pixelimageXY.rectPack2d.XYWH"/></icast>
			<icast field="toWH"><x path="pixelimageXY.rectPack2d.WH"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="pixelimageXY.rectPack2d._XYWHF.XYWHF_Impl_" params="" file="src/pixelimageXY/rectPack2d/XYWHF.hx" private="1" module="pixelimageXY.rectPack2d.XYWHF" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="id:x:y:w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="pixelimageXY.rectPack2d.XYWHF"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<flip public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="Void"/>
</f></flip>
	<clone public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
</f></clone>
	<sorts public="1" get="inline" set="null" line="34" static="1"><f a=""><c path="Array"><f a=":">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></c></f></sorts>
	<toObject public="1" get="inline" set="null" line="38" static="1">
		<f a="this:?name" v=":&quot;&quot;">
			<c path="pixelimageXY.rectPack2d.XYWHF_"/>
			<c path="String"/>
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<width><x path="Int"/></width>
				<name><c path="String"/></name>
				<id><x path="Int"/></id>
				<height><x path="Int"/></height>
			</a>
		</f>
		<meta><m n=":value"><e>{ name : "" }</e></m></meta>
	</toObject>
	<string public="1" get="inline" set="null" line="42" static="1"><f a="this:name">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<c path="String"/>
	<c path="String"/>
</f></string>
	<toXYWH public="1" get="inline" set="null" line="47" static="1">
		<f a="this">
			<c path="pixelimageXY.rectPack2d.XYWHF_"/>
			<x path="pixelimageXY.rectPack2d.XYWH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toXYWH>
	<toWH public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<c path="pixelimageXY.rectPack2d.XYWHF_"/>
			<x path="pixelimageXY.rectPack2d.WH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toWH>
	<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
	<get_area public="1" get="inline" set="null" line="58" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_area>
	<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
	<get_perimeter public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_perimeter>
	<fits public="1" get="inline" set="null" line="67" static="1"><f a="this:r">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="pixelimageXY.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
</class></impl>
	</abstract>
	<class path="pixelimageXY.rectPack2d._XYWHF.XYWHF_Impl_" params="" file="src/pixelimageXY/rectPack2d/XYWHF.hx" private="1" module="pixelimageXY.rectPack2d.XYWHF" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="id:x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="pixelimageXY.rectPack2d.XYWHF"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<flip public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="Void"/>
</f></flip>
		<clone public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
</f></clone>
		<sorts public="1" get="inline" set="null" line="34" static="1"><f a=""><c path="Array"><f a=":">
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="pixelimageXY.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></c></f></sorts>
		<toObject public="1" get="inline" set="null" line="38" static="1">
			<f a="this:?name" v=":&quot;&quot;">
				<c path="pixelimageXY.rectPack2d.XYWHF_"/>
				<c path="String"/>
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<width><x path="Int"/></width>
					<name><c path="String"/></name>
					<id><x path="Int"/></id>
					<height><x path="Int"/></height>
				</a>
			</f>
			<meta><m n=":value"><e>{ name : "" }</e></m></meta>
		</toObject>
		<string public="1" get="inline" set="null" line="42" static="1"><f a="this:name">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<c path="String"/>
	<c path="String"/>
</f></string>
		<toXYWH public="1" get="inline" set="null" line="47" static="1">
			<f a="this">
				<c path="pixelimageXY.rectPack2d.XYWHF_"/>
				<x path="pixelimageXY.rectPack2d.XYWH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toXYWH>
		<toWH public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<c path="pixelimageXY.rectPack2d.XYWHF_"/>
				<x path="pixelimageXY.rectPack2d.WH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toWH>
		<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
		<get_area public="1" get="inline" set="null" line="58" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_area>
		<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
		<get_perimeter public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_perimeter>
		<fits public="1" get="inline" set="null" line="67" static="1"><f a="this:r">
	<c path="pixelimageXY.rectPack2d.XYWHF_"/>
	<x path="pixelimageXY.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
	</class>
	<class path="pixelimageXY.textureImage._TestNineSlice.TestNineSlice_Fields_" params="" file="src/pixelimageXY/textureImage/TestNineSlice.hx" private="1" module="pixelimageXY.textureImage.TestNineSlice" final="1"><testNineSliceButton public="1" set="method" line="3" static="1"><f a=""><c path="String"/></f></testNineSliceButton></class>
	<class path="pixelimageXY.textureImage._TestTiger.TestTiger_Fields_" params="" file="src/pixelimageXY/textureImage/TestTiger.hx" private="1" module="pixelimageXY.textureImage.TestTiger" final="1"><testTiger public="1" set="method" line="3" static="1"><f a=""><c path="String"/></f></testTiger></class>
	<class path="triangleGML.ShapeInterface" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/ShapeInterface.hx" interface="1">
		<setParameter public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<translate public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<hit public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<clear public="1" set="method"><f a="drawTool:color">
	<c path="triangleGML.ShapeInterface.DRAWTOOL"/>
	<x path="Int"/>
	<c path="triangleGML.ShapeInterface.DRAWTOOL"/>
</f></clear>
		<render public="1" set="method"><f a="drawTool">
	<c path="triangleGML.ShapeInterface.DRAWTOOL"/>
	<c path="triangleGML.ShapeInterface.DRAWTOOL"/>
</f></render>
		<setImage public="1" set="method"><f a="name:imageTool">
	<c path="String"/>
	<c path="triangleGML.ShapeInterface.IMAGETOOL"/>
	<c path="triangleGML.ShapeInterface.IMAGETOOL"/>
</f></setImage>
	</class>
	<class path="triangleGML.GroupShape" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/GroupShape.hx" abstract="1">
		<implements path="triangleGML.ShapeInterface">
			<c path="triangleGML.GroupShape.DRAWTOOL"/>
			<c path="triangleGML.GroupShape.IMAGETOOL"/>
		</implements>
		<isDirty expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isDirty>
		<visibility public="1"><x path="Bool"/></visibility>
		<opacity public="1"><x path="Float"/></opacity>
		<offX public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</offX>
		<offY public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</offY>
		<hitObj public="1" expr="null">
			<x path="Null"><c path="triangleGML.hitTest.IhitObj"><c path="triangleGML.GroupShape.DRAWTOOL"/></c></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</hitObj>
		<edgeSoft public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</edgeSoft>
		<externalSoft public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</externalSoft>
		<rotation public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</rotation>
		<transformCentreX public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</transformCentreX>
		<transformCentreY public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</transformCentreY>
		<skewX public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</skewX>
		<skewY public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</skewY>
		<scaleX public="1" expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
		</scaleX>
		<scaleY public="1" expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
		</scaleY>
		<setParameter public="1" set="method" line="28"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<translate public="1" set="method" line="61"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<render abstract="1" public="1" set="method"><f a="drawTool">
	<c path="triangleGML.GroupShape.DRAWTOOL"/>
	<c path="triangleGML.GroupShape.DRAWTOOL"/>
</f></render>
		<hit public="1" set="method" line="67"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<clear public="1" set="method" line="74"><f a="drawTool:color">
	<c path="triangleGML.GroupShape.DRAWTOOL"/>
	<x path="Int"/>
	<c path="triangleGML.GroupShape.DRAWTOOL"/>
</f></clear>
		<setImage public="1" set="method" line="77"><f a="name:imageTool">
	<c path="String"/>
	<c path="triangleGML.GroupShape.IMAGETOOL"/>
	<c path="triangleGML.GroupShape.IMAGETOOL"/>
</f></setImage>
		<new public="1" set="method" line="24">
			<f a="?opacity:?visibility" v="1.:true">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="triangleGML.BasicShape" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/BasicShape.hx" abstract="1">
		<extends path="triangleGML.GroupShape">
			<c path="triangleGML.BasicShape.DRAWTOOL"/>
			<c path="triangleGML.BasicShape.IMAGETOOL"/>
		</extends>
		<dashLength public="1" expr="2." line="7" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>2.</e></m></meta>
		</dashLength>
		<gapLength public="1" expr="1." line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
		</gapLength>
		<strokeColor public="1"><x path="Int"/></strokeColor>
		<strokeWidth public="1"><x path="Float"/></strokeWidth>
		<strokeDashGapArray public="1"><x path="Null"><c path="Array"><x path="triangleGML.DashGap"/></c></x></strokeDashGapArray>
		<setParameter public="1" set="method" line="33" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="26">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray" v="1.:true:0x000000:1.:null">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="triangleGML.FillForm" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/FillForm.hx" abstract="1">
		<extends path="triangleGML.BasicShape">
			<c path="triangleGML.FillForm.DRAWTOOL"/>
			<c path="triangleGML.FillForm.IMAGETOOL"/>
		</extends>
		<fill public="1"><x path="Int"/></fill>
		<setParameter public="1" set="method" line="20" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="16">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill" v="1.:true:0x000000:1.:null:0x000000">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fill : 0x000000, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="triangleGML.shape.form.ArcForm_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/form/ArcForm_.hx" abstract="1">
		<extends path="triangleGML.FillForm">
			<c path="triangleGML.shape.form.ArcForm_.DRAWTOOL"/>
			<c path="triangleGML.shape.form.ArcForm_.IMAGETOOL"/>
		</extends>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<startAngle public="1"><x path="Float"/></startAngle>
		<sweepAngle public="1"><x path="Float"/></sweepAngle>
		<arcType public="1"><x path="triangleGML.ArcType"/></arcType>
		<rx><x path="Float"/></rx>
		<ry><x path="Float"/></ry>
		<setParameter public="1" set="method" line="45" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="33">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?width:?height:?startAngle:?sweepAngle:?arcType" v="1.:true:0x000000:1.:null:0x000000:0.:0.:1.:1.:0.:0.:Pie">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="triangleGML.ArcType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ arcType : Pie, sweepAngle : 0., startAngle : 0., height : 1., width : 1., top : 0., left : 0., fill : 0x000000, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.ArcForm" params="" file="src/pixelimageXY/triangleGML/ArcForm.hx">
		<extends path="triangleGML.shape.form.ArcForm_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="8" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<chord set="method" line="23"><f a="temp">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Void"/>
</f></chord>
		<ellipse set="method" line="45"><f a="temp">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Void"/>
</f></ellipse>
		<pie set="method" line="49"><f a="temp">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Void"/>
</f></pie>
		<new public="1" set="method" line="7"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?width:?height:?startAngle:?sweepAngle:?arcType">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="triangleGML.ArcType"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.contour.ArrowShape_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/contour/ArrowShape_.hx" abstract="1">
		<extends path="triangleGML.BasicShape">
			<c path="triangleGML.shape.contour.ArrowShape_.DRAWTOOL"/>
			<c path="triangleGML.shape.contour.ArrowShape_.IMAGETOOL"/>
		</extends>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<both public="1"><x path="Bool"/></both>
		<flare public="1"><x path="Bool"/></flare>
		<reverseFlare public="1"><x path="Bool"/></reverseFlare>
		<arrowWidth public="1"><x path="Float"/></arrowWidth>
		<arrowHeight public="1"><x path="Float"/></arrowHeight>
		<setParameter public="1" set="method" line="44" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="32">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?both:?flare:?reverseFlare:?x1:?y1:?x2:?y2:?arrowWidth:?arrowHeight" v="1.:true:0xFFF00000:1.:null:false:false:false:0.:0.:0.:0.:0.:0.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ arrowHeight : 0., arrowWidth : 0., y2 : 0., x2 : 0., y1 : 0., x1 : 0., reverseFlare : false, flare : false, both : false, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0xFFF00000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.ArrowShape" params="" file="src/pixelimageXY/triangleGML/ArrowShape.hx">
		<extends path="triangleGML.shape.contour.ArrowShape_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="9" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?both:?flare:?reverseFlare:?x1:?y1:?x2:?y2:?arrowWidth:?arrowHeight">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.form.CircleForm_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/form/CircleForm_.hx" abstract="1">
		<extends path="triangleGML.FillForm">
			<c path="triangleGML.shape.form.CircleForm_.DRAWTOOL"/>
			<c path="triangleGML.shape.form.CircleForm_.IMAGETOOL"/>
		</extends>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<diameter public="1"><x path="Float"/></diameter>
		<setParameter public="1" set="method" line="26" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="20">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?diameter" v="1.:true:0x000000:1.:null:0x000000:0.:0.:1.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ diameter : 1., top : 0., left : 0., fill : 0x000000, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.CircleForm" params="" file="src/pixelimageXY/triangleGML/CircleForm.hx">
		<extends path="triangleGML.shape.form.CircleForm_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="7" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<buildCircle set="method" line="16"><f a="temp">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Void"/>
</f></buildCircle>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?diameter">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.form.EllipseForm_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/form/EllipseForm_.hx" abstract="1">
		<extends path="triangleGML.FillForm">
			<c path="triangleGML.shape.form.EllipseForm_.DRAWTOOL"/>
			<c path="triangleGML.shape.form.EllipseForm_.IMAGETOOL"/>
		</extends>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<setParameter public="1" set="method" line="29" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="22">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?width:?height" v="1.:true:0x000000:1.:null:0x000000:0.:0.:1.:1.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 1., width : 1., top : 0., left : 0., fill : 0x000000, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.EllipseForm" params="" file="src/pixelimageXY/triangleGML/EllipseForm.hx">
		<extends path="triangleGML.shape.form.EllipseForm_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="7" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?width:?height">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.BasicGradient" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/BasicGradient.hx" abstract="1">
		<extends path="triangleGML.GroupShape">
			<c path="triangleGML.BasicGradient.DRAWTOOL"/>
			<c path="triangleGML.BasicGradient.IMAGETOOL"/>
		</extends>
		<cornerColors public="1" expr="new Array&lt;Int&gt;()">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Int>()]]></e></m></meta>
		</cornerColors>
		<setParameter public="1" set="method" line="15" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="8">
			<f a="?opacity:?visibility:?cornerColors" v="1.:true:null">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerColors : null, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="triangleGML.shape.gradient.LineGradient_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/gradient/LineGradient_.hx" abstract="1">
		<extends path="triangleGML.BasicGradient">
			<c path="triangleGML.shape.gradient.LineGradient_.DRAWTOOL"/>
			<c path="triangleGML.shape.gradient.LineGradient_.IMAGETOOL"/>
		</extends>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<strokeWidth public="1"><x path="Float"/></strokeWidth>
		<setParameter public="1" set="method" line="31" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="23">
			<f a="?opacity:?visibility:?x1:?y1:?x2:?y2:?colorA:?colorB:?colorC:?colorD:?strokeWidth" v="1.:true:0.:0.:0.:0.:0xFFFF9900:0xFFBFFF00:0xFF00EAFF:0xFF7300FF:1.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strokeWidth : 1., colorD : 0xFF7300FF, colorC : 0xFF00EAFF, colorB : 0xFFBFFF00, colorA : 0xFFFF9900, y2 : 0., x2 : 0., y1 : 0., x1 : 0., visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.LineGradient" params="" file="src/pixelimageXY/triangleGML/LineGradient.hx">
		<extends path="triangleGML.shape.gradient.LineGradient_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<luxury public="1"><x path="Bool"/></luxury>
		<setParameter public="1" set="method" line="8" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<render public="1" set="method" line="17" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?x1:?y1:?x2:?y2:?colorA:?colorB:?colorC:?colorD:?strokeWidth">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="triangleGML.shape.contour.LineGridShape_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/contour/LineGridShape_.hx" abstract="1">
		<extends path="triangleGML.BasicShape">
			<c path="triangleGML.shape.contour.LineGridShape_.DRAWTOOL"/>
			<c path="triangleGML.shape.contour.LineGridShape_.IMAGETOOL"/>
		</extends>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<delta public="1"><x path="Float"/></delta>
		<deltaH public="1"><x path="Float"/></deltaH>
		<setParameter public="1" set="method" line="34" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="25">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?left:?top:?width:?height:?delta:?deltaH" v="1.:true:0xFFF00000:1.:null:0.:0.:1.:1.:1.:0.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ deltaH : 0., delta : 1., height : 1., width : 1., top : 0., left : 0., strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0xFFF00000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.LineGridShape" params="" file="src/pixelimageXY/triangleGML/LineGridShape.hx">
		<extends path="triangleGML.shape.contour.LineGridShape_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="8" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<new public="1" set="method" line="7"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?left:?top:?width:?height:?delta:?deltaH">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.contour.LineShape_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/contour/LineShape_.hx" abstract="1">
		<extends path="triangleGML.BasicShape">
			<c path="triangleGML.shape.contour.LineShape_.DRAWTOOL"/>
			<c path="triangleGML.shape.contour.LineShape_.IMAGETOOL"/>
		</extends>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<setParameter public="1" set="method" line="30" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="22">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?x1:?y1:?x2:?y2:?edgeSoft" v="1.:true:0xFFF00000:1.:null:0.:0.:0.:0.:0.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ edgeSoft : 0., y2 : 0., x2 : 0., y1 : 0., x1 : 0., strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0xFFF00000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.LineShape" params="" file="src/pixelimageXY/triangleGML/LineShape.hx">
		<extends path="triangleGML.shape.contour.LineShape_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<luxury public="1"><x path="Bool"/></luxury>
		<setParameter public="1" set="method" line="9" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<render public="1" set="method" line="18" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?x1:?y1:?x2:?y2:?edgeSoft">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.picture.NineSlicePicture_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/picture/NineSlicePicture_.hx" abstract="1">
		<extends path="triangleGML.FillForm">
			<c path="triangleGML.shape.picture.NineSlicePicture_.DRAWTOOL"/>
			<c path="triangleGML.shape.picture.NineSlicePicture_.IMAGETOOL"/>
		</extends>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<initWid public="1"><x path="Float"/></initWid>
		<initHi public="1"><x path="Float"/></initHi>
		<initLeft public="1"><x path="Float"/></initLeft>
		<initTop public="1"><x path="Float"/></initTop>
		<initFat public="1"><x path="Float"/></initFat>
		<initTall public="1"><x path="Float"/></initTall>
		<newWid public="1"><x path="Float"/></newWid>
		<newHi public="1"><x path="Float"/></newHi>
		<newLeft public="1"><x path="Float"/></newLeft>
		<newTop public="1"><x path="Float"/></newTop>
		<newFat public="1"><x path="Float"/></newFat>
		<newTall public="1"><x path="Float"/></newTall>
		<imageTexture public="1"><x path="Null"><c path="triangleGML.shape.picture.NineSlicePicture_.IMAGETOOL"/></x></imageTexture>
		<pictureX public="1"><x path="Float"/></pictureX>
		<pictureY public="1"><x path="Float"/></pictureY>
		<pictureWidth public="1"><x path="Float"/></pictureWidth>
		<pictureHeight public="1"><x path="Float"/></pictureHeight>
		<rounded public="1"><x path="Bool"/></rounded>
		<setParameter public="1" set="method" line="103" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="77">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?initWid:?initHi:?initLeft:?initTop:?initFat:?initTall:?newWid:?newHi:?newLeft:?newTop:?newFat:?newTall:?imageTexture:?pictureX:?pictureY:?pictureWidth:?pictureHeight:?rounded" v="1.:true:0x000000:1.:null:0x000000:0.:0.:4.:4.:1.:1.:2.:2.:4.:4.:0.5:0.5:3.:3.:null:0.:0.:0.:0.:false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="triangleGML.shape.picture.NineSlicePicture_.IMAGETOOL"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ rounded : false, pictureHeight : 0., pictureWidth : 0., pictureY : 0., pictureX : 0., imageTexture : null, newTall : 3., newFat : 3., newTop : 0.5, newLeft : 0.5, newHi : 4., newWid : 4., initTall : 2., initFat : 2., initTop : 1., initLeft : 1., initHi : 4., initWid : 4., top : 0., left : 0., fill : 0x000000, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.NineSlicePicture" params="" file="src/pixelimageXY/triangleGML/NineSlicePicture.hx">
		<extends path="triangleGML.shape.picture.NineSlicePicture_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<srcPicture public="1"><x path="Bool"/></srcPicture>
		<setParameter public="1" set="method" line="13" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<render public="1" set="method" line="25" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<setImage public="1" set="method" line="44" override="1"><f a="name:value">
	<c path="String"/>
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></setImage>
		<new public="1" set="method" line="9"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?initWid:?initHi:?initLeft:?initTop:?initFat:?initTall:?newWid:?newHi:?newLeft:?newTop:?newFat:?newTall:?imageTexture:?pictureX:?pictureY:?pictureWidth:?pictureHeight:?rounded">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.contour.QuadShape_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/contour/QuadShape_.hx" abstract="1">
		<extends path="triangleGML.BasicShape">
			<c path="triangleGML.shape.contour.QuadShape_.DRAWTOOL"/>
			<c path="triangleGML.shape.contour.QuadShape_.IMAGETOOL"/>
		</extends>
		<aX public="1"><x path="Float"/></aX>
		<aY public="1"><x path="Float"/></aY>
		<bX public="1"><x path="Float"/></bX>
		<bY public="1"><x path="Float"/></bY>
		<cX public="1"><x path="Float"/></cX>
		<cY public="1"><x path="Float"/></cY>
		<dX public="1"><x path="Float"/></dX>
		<dY public="1"><x path="Float"/></dY>
		<setParameter public="1" set="method" line="36" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="25">
			<f a="?opacity:?visibility:?strokeColor:?aX:?aY:?bX:?bY:?cX:?cY:?dX:?dY" v="1.:true:0xFFF00000:0.:0.:1.:0.:1.:1.:0.:1.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dY : 1., dX : 0., cY : 1., cX : 1., bY : 0., bX : 1., aY : 0., aX : 0., strokeColor : 0xFFF00000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.QuadShape" params="" file="src/pixelimageXY/triangleGML/QuadShape.hx">
		<extends path="triangleGML.shape.contour.QuadShape_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<luxury public="1"><x path="Bool"/></luxury>
		<setParameter public="1" set="method" line="8" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<render public="1" set="method" line="16" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<clear public="1" set="method" line="28" override="1"><f a="pixelShape:color">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Int"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></clear>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?strokeColor:?aX:?aY:?bX:?bY:?cX:?cY:?dX:?dY">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.shape.contour.QuintShape_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/contour/QuintShape_.hx" abstract="1">
		<extends path="triangleGML.BasicShape">
			<c path="triangleGML.shape.contour.QuintShape_.DRAWTOOL"/>
			<c path="triangleGML.shape.contour.QuintShape_.IMAGETOOL"/>
		</extends>
		<aX public="1"><x path="Float"/></aX>
		<aY public="1"><x path="Float"/></aY>
		<bX public="1"><x path="Float"/></bX>
		<bY public="1"><x path="Float"/></bY>
		<cX public="1"><x path="Float"/></cX>
		<cY public="1"><x path="Float"/></cY>
		<dX public="1"><x path="Float"/></dX>
		<dY public="1"><x path="Float"/></dY>
		<setParameter public="1" set="method" line="37" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="26">
			<f a="?opacity:?visibility:?strokeColor:?aX:?aY:?bX:?bY:?cX:?cY:?dX:?dY" v="1.:true:0xFFF00000:0.:0.:1.:0.:1.:1.:0.:1.">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dY : 1., dX : 0., cY : 1., cX : 1., bY : 0., bX : 1., aY : 0., aX : 0., strokeColor : 0xFFF00000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.QuintShape" params="" file="src/pixelimageXY/triangleGML/QuintShape.hx">
		<extends path="triangleGML.shape.contour.QuintShape_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="7" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<clear public="1" set="method" line="11" override="1"><f a="pixelShape:color">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="Int"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></clear>
		<new public="1" set="method" line="6"><f a="?opacity:?visibility:?strokeColor:?aX:?aY:?bX:?bY:?cX:?cY:?dX:?dY">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="triangleGML.shape.form.RectangleForm_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/shape/form/RectangleForm_.hx" abstract="1">
		<extends path="triangleGML.FillForm">
			<c path="triangleGML.shape.form.RectangleForm_.DRAWTOOL"/>
			<c path="triangleGML.shape.form.RectangleForm_.IMAGETOOL"/>
		</extends>
		<left public="1"><x path="Float"/></left>
		<top public="1"><x path="Float"/></top>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<rounded public="1"><x path="Bool"/></rounded>
		<setParameter public="1" set="method" line="32" override="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setParameter>
		<new public="1" set="method" line="24">
			<f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?width:?height:?rounded" v="1.:true:0x000000:1.:null:0x000000:0.:0.:1.:1.:false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="triangleGML.DashGap"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ rounded : false, height : 1., width : 1., top : 0., left : 0., fill : 0x000000, strokeDashGapArray : null, strokeWidth : 1., strokeColor : 0x000000, visibility : true, opacity : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="pixelimageXY.triangleGML.RectangleForm" params="" file="src/pixelimageXY/triangleGML/RectangleForm.hx">
		<extends path="triangleGML.shape.form.RectangleForm_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<render public="1" set="method" line="8" override="1"><f a="pixelShape">
	<x path="pixelimageXY.Pixelshape"/>
	<x path="pixelimageXY.Pixelshape"/>
</f></render>
		<new public="1" set="method" line="7"><f a="?opacity:?visibility:?strokeColor:?strokeWidth:?strokeDashGapArray:?fill:?left:?top:?width:?height:?rounded">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="Array"><x path="triangleGML.DashGap"/></c>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="triangleGML.TriangleGML_" params="DRAWTOOL:IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/TriangleGML_.hx" abstract="1">
		<drawTool><c path="triangleGML.TriangleGML_.DRAWTOOL"/></drawTool>
		<xml><c path="Xml"/></xml>
		<offX><x path="Float"/></offX>
		<offY><x path="Float"/></offY>
		<shapes public="1"><c path="Array"><c path="triangleGML.ShapeInterface">
	<c path="triangleGML.TriangleGML_.DRAWTOOL"/>
	<c path="triangleGML.TriangleGML_.IMAGETOOL"/>
</c></c></shapes>
		<imageResource public="1" expr="new haxe.ds.StringMap&lt;IMAGETOOL&gt;()">
			<c path="haxe.ds.StringMap"><c path="triangleGML.TriangleGML_.IMAGETOOL"/></c>
			<meta><m n=":value"><e><![CDATA[new haxe.ds.StringMap<IMAGETOOL>()]]></e></m></meta>
		</imageResource>
		<addImage public="1" set="method" line="14"><f a="name:imageTool">
	<c path="String"/>
	<c path="triangleGML.TriangleGML_.IMAGETOOL"/>
	<c path="triangleGML.TriangleGML_.IMAGETOOL"/>
</f></addImage>
		<addShape public="1" set="method" line="31">
			<f a="str:?x:?y" v=":0.:0.">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="triangleGML.TriangleGML_">
					<c path="triangleGML.TriangleGML_.DRAWTOOL"/>
					<c path="triangleGML.TriangleGML_.IMAGETOOL"/>
				</c>
			</f>
			<meta><m n=":value"><e>{ y : 0., x : 0. }</e></m></meta>
		</addShape>
		<process set="method" line="39"><f a=""><x path="Void"/></f></process>
		<processShape set="method" line="44"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></processShape>
		<processAttribute public="1" set="method" line="58"><f a="att:value:shape">
	<c path="String"/>
	<c path="String"/>
	<c path="triangleGML.ShapeInterface">
		<c path="triangleGML.TriangleGML_.DRAWTOOL"/>
		<c path="triangleGML.TriangleGML_.IMAGETOOL"/>
	</c>
	<x path="Void"/>
</f></processAttribute>
		<render public="1" set="method" line="69"><f a=""><x path="Void"/></f></render>
		<getTriangleGML abstract="1" public="1" set="method"><f a="nodeName">
	<c path="String"/>
	<c path="triangleGML.ShapeInterface">
		<c path="triangleGML.TriangleGML_.DRAWTOOL"/>
		<c path="triangleGML.TriangleGML_.IMAGETOOL"/>
	</c>
</f></getTriangleGML>
		<new public="1" set="method" line="21">
			<f a="drawTool:?xml:?x:?y" v=":null:0.:0.">
				<c path="triangleGML.TriangleGML_.DRAWTOOL"/>
				<c path="Xml"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0., x : 0., xml : null }</e></m></meta>
		</new>
	</class>
	<class path="pixelimageXY.triangleGML.TriangleGML" params="" file="src/pixelimageXY/triangleGML/TriangleGML.hx">
		<extends path="triangleGML.TriangleGML_">
			<x path="pixelimageXY.Pixelshape"/>
			<x path="pixelimageXY.Pixelshape"/>
		</extends>
		<getTriangleGML public="1" set="method" line="81" override="1"><f a="nodeName">
	<c path="String"/>
	<c path="triangleGML.ShapeInterface">
		<x path="pixelimageXY.Pixelshape"/>
		<x path="pixelimageXY.Pixelshape"/>
	</c>
</f></getTriangleGML>
		<new public="1" set="method" line="27"><f a="drawTool:?xml:?x:?y">
	<x path="pixelimageXY.Pixelshape"/>
	<c path="Xml"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/FileSystem.hx" extern="1">
		<exists public="1" set="method" line="30" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` exists.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="34" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="38" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `FileStat` information for the file or directory specified by
		`path`.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="60" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="64" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.</haxe_doc>
		</absolutePath>
		<kind get="inline" set="null" line="70" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></kind>
		<isDirectory public="1" set="method" line="74" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="78" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="92" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="96" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`. Only empty directories can
		be deleted.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="100" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`. `"."` and `".."` are not included in the output.

		If `path` does not denote a valid directory, an exception is thrown.</haxe_doc>
		</readDirectory>
		<makeCompatiblePath get="inline" set="null" line="104" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></makeCompatiblePath>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.Http" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/Http.hx">
		<extends path="haxe.http.HttpBase"/>
		<PROXY public="1" expr="null" line="46" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></responseHeaders>
		<chunk_size><x path="Null"><x path="Int"/></x></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<request public="1" set="method" line="56"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<customRequest public="1" set="method" line="90"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<writeBody set="method" line="255"><f a="body:fileInput:fileSize:boundary:sock">
	<x path="Null"><c path="haxe.io.BytesOutput"/></x>
	<x path="Null"><c path="haxe.io.Input"/></x>
	<x path="Int"/>
	<x path="Null"><c path="String"/></x>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></writeBody>
		<readHttpResponse set="method" line="280"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="422"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<new public="1" set="method" line="48"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="sys.io.File" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/io/File.hx" extern="1">
		<getContent public="1" set="method" line="29" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<getBytes public="1" set="method" line="33" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveContent public="1" set="method" line="38" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<saveBytes public="1" set="method" line="44" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="50" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ binary : true }</e></m>
			</meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="54" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ binary : true }</e></m>
			</meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="58" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ binary : true }</e></m>
			</meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<update public="1" set="method" line="62" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ binary : true }</e></m>
			</meta>
			<haxe_doc>Similar to `sys.io.File.append`. While `append` can only seek or write
		starting from the end of the file's previous contents, `update` can
		seek to any position, so the file's previous contents can be
		selectively overwritten.</haxe_doc>
		</update>
		<copy public="1" set="method" line="69" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/io/FileInput.hx" extern="1">
		<extends path="haxe.io.Input"/>
		<__f><d/></__f>
		<readByte public="1" set="method" line="36" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="47" override="1">
			<f a="s:p:l">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</readBytes>
		<close public="1" set="method" line="58" override="1"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="63"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="67"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method" line="71"><f a=""><x path="Bool"/></f></eof>
		<new set="method" line="32"><f a="f">
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<__f><d/></__f>
		<writeByte public="1" set="method" line="36" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="43" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="51" override="1"><f a=""><x path="Void"/></f></close>
		<new set="method" line="32"><f a="f">
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.net.Host" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/net/Host.hx">
		<host public="1" set="null">
			<c path="String"/>
			<haxe_doc>The provided host string.</haxe_doc>
		</host>
		<ip public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The actual IP corresponding to the host.</haxe_doc>
		</ip>
		<ipv6 set="null"><t path="haxe.io.BytesData"/></ipv6>
		<new public="1" set="method" line="35">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Host : the name can be an IP in the form "127.0.0.1" or an host name such as "google.com", in which case
		the corresponding IP address is resolved using DNS. An exception occur if the host name could not be found.</haxe_doc>
		</new>
		<haxe_doc>A given IP host name.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.net._Socket.SocketInput" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket" extern="1">
		<extends path="haxe.io.Input"/>
		<__s><d/></__s>
		<readByte public="1" set="method" line="37" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="50" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="67" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="33"><f a="s">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net._Socket.SocketOutput" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket" extern="1">
		<extends path="haxe.io.Output"/>
		<__s><d/></__s>
		<writeByte public="1" set="method" line="81" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="94" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="107" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="77"><f a="s">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.Socket" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/net/Socket.hx" extern="1">
		<select public="1" set="method" line="265" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets group is ready for the given operation:

		 - `read` contains sockets on which we want to wait for available data to be read,
		 - `write` contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
		 - `others` contains sockets on which we want to wait for exceptional conditions.
		 - `select` will block until one of the condition is met, in which case it will return the sockets for which the condition was true.

		In case a `timeout` (in seconds) is specified, select might wait at worst until the timeout expires.</haxe_doc>
		</select>
		<__s><d/></__s>
		<__timeout expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</__timeout>
		<__blocking expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</__blocking>
		<__fastSend expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</__fastSend>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retrieve your custom infos after a `select`.
	*</haxe_doc>
		</custom>
		<init set="method" line="133"><f a=""><x path="Void"/></f></init>
		<close public="1" set="method" line="145">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="157">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`,
		as it will always throw `haxe.io.Error.Blocked`. `input` methods should be used directly instead.</haxe_doc>
		</read>
		<write public="1" set="method" line="165">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`, as
		`haxe.io.Error.Blocked` may be thrown mid-write with no indication of how many bytes have been written.
		`output.writeBytes()` should be used instead as it returns this information.</haxe_doc>
		</write>
		<connect public="1" set="method" line="169">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't successfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="194">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="198">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="202">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="216">
			<f a=""><c path="sys.net.Socket"/></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="225">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="235">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the information about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="245">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout (in seconds) after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="250">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="254">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocked value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="259">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediately send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<new public="1" set="method" line="129">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.ssl.Certificate" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Certificate.hx" extern="1">
		<loadFile public="1" set="method" line="38" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadFile>
		<loadPath public="1" set="method" line="42" static="1"><f a="path">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadPath>
		<fromString public="1" set="method" line="46" static="1"><f a="str">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></fromString>
		<loadDefaults public="1" set="method" line="50" static="1"><f a=""><c path="sys.ssl.Certificate"/></f></loadDefaults>
		<__h><x path="Null"><c path="sys.ssl.Certificate"/></x></__h>
		<__x><d/></__x>
		<commonName public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></commonName>
		<altNames public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></altNames>
		<notBefore public="1" get="accessor" set="null"><c path="Date"/></notBefore>
		<notAfter public="1" get="accessor" set="null"><c path="Date"/></notAfter>
		<get_commonName set="method" line="94"><f a=""><x path="Null"><c path="String"/></x></f></get_commonName>
		<get_altNames set="method" line="98"><f a=""><c path="Array"><c path="String"/></c></f></get_altNames>
		<subject public="1" set="method" line="102"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></subject>
		<issuer public="1" set="method" line="106"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></issuer>
		<get_notBefore set="method" line="110"><f a=""><c path="Date"/></f></get_notBefore>
		<get_notAfter set="method" line="115"><f a=""><c path="Date"/></f></get_notAfter>
		<next public="1" set="method" line="120"><f a=""><x path="Null"><c path="sys.ssl.Certificate"/></x></f></next>
		<add public="1" set="method" line="125"><f a="pem">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<addDER public="1" set="method" line="129"><f a="der">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></addDER>
		<new set="method" line="33">
			<f a="x:?h">
				<d/>
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="sys.ssl._Key.PKEY" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Key.hx" private="1" module="sys.ssl.Key"><d/></typedef>
	<class path="sys.ssl.Key" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Key.hx" extern="1">
		<loadFile public="1" set="method" line="37" static="1"><f a="file:?isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></loadFile>
		<readPEM public="1" set="method" line="46" static="1"><f a="data:isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></readPEM>
		<readDER public="1" set="method" line="50" static="1"><f a="data:isPublic">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<c path="sys.ssl.Key"/>
</f></readDER>
		<__k><t path="sys.ssl._Key.PKEY"/></__k>
		<new set="method" line="33"><f a="k">
	<t path="sys.ssl._Key.PKEY"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="sys.ssl._Socket.SocketHandle" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket"><d/></typedef>
	<typedef path="sys.ssl._Socket.CONF" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket"><d/></typedef>
	<typedef path="sys.ssl._Socket.SSL" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket"><d/></typedef>
	<class path="sys.ssl._Socket.SocketInput" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket" extern="1">
		<extends path="haxe.io.Input"/>
		<__s>
			<c path="sys.ssl.Socket"/>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</__s>
		<readByte public="1" set="method" line="39" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="53" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="71" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="35"><f a="s">
	<c path="sys.ssl.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.ssl._Socket.SocketOutput" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket" extern="1">
		<extends path="haxe.io.Output"/>
		<__s>
			<c path="sys.ssl.Socket"/>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</__s>
		<writeByte public="1" set="method" line="85" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="99" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="111" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="81"><f a="s">
	<c path="sys.ssl.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.ssl.Socket" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/ssl/Socket.hx" extern="1">
		<extends path="sys.net.Socket"/>
		<DEFAULT_VERIFY_CERT public="1" expr="true" line="120" static="1">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":value"><e>true</e></m></meta>
		</DEFAULT_VERIFY_CERT>
		<DEFAULT_CA public="1" static="1"><x path="Null"><c path="sys.ssl.Certificate"/></x></DEFAULT_CA>
		<conf><t path="sys.ssl._Socket.CONF"/></conf>
		<ssl><t path="sys.ssl._Socket.SSL"/></ssl>
		<verifyCert public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>Define if peer certificate is verified during SSL handshake.</haxe_doc>
		</verifyCert>
		<caCert><x path="Null"><c path="sys.ssl.Certificate"/></x></caCert>
		<hostname><c path="String"/></hostname>
		<ownCert><x path="Null"><c path="sys.ssl.Certificate"/></x></ownCert>
		<ownKey><x path="Null"><c path="sys.ssl.Key"/></x></ownKey>
		<altSNIContexts><x path="Null"><c path="Array"><a>
	<match><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></match>
	<key><c path="sys.ssl.Key"/></key>
	<cert><c path="sys.ssl.Certificate"/></cert>
</a></c></x></altSNIContexts>
		<sniCallback><d/></sniCallback>
		<handshakeDone><x path="Bool"/></handshakeDone>
		<init set="method" line="138" override="1"><f a=""><x path="Void"/></f></init>
		<connect public="1" set="method" line="151" override="1"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<handshake public="1" set="method" line="173">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform the SSL handshake.</haxe_doc>
		</handshake>
		<setCA public="1" set="method" line="187">
			<f a="cert">
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the certificate chain for peer certificate verification.</haxe_doc>
		</setCA>
		<setHostname public="1" set="method" line="191">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the hostname for Server Name Indication TLS extension.</haxe_doc>
		</setHostname>
		<setCertificate public="1" set="method" line="195">
			<f a="cert:key">
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure own certificate and private key.</haxe_doc>
		</setCertificate>
		<read public="1" set="method" line="200" override="1"><f a=""><c path="String"/></f></read>
		<write public="1" set="method" line="208" override="1"><f a="content">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<close public="1" set="method" line="213" override="1"><f a=""><x path="Void"/></f></close>
		<addSNICertificate public="1" set="method" line="228">
			<f a="cbServernameMatch:cert:key">
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure additionals certificates and private keys for Server Name Indication extension.
		The callback may be called during handshake to determine the certificate to use.</haxe_doc>
		</addSNICertificate>
		<bind public="1" set="method" line="234" override="1"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind>
		<accept public="1" set="method" line="240" override="1"><f a=""><c path="sys.ssl.Socket"/></f></accept>
		<peerCertificate public="1" set="method" line="255">
			<f a=""><c path="sys.ssl.Certificate"/></f>
			<haxe_doc>Return the certificate received from the other side of a connection.</haxe_doc>
		</peerCertificate>
		<buildSSLConfig set="method" line="260"><f a="server">
	<x path="Bool"/>
	<t path="sys.ssl._Socket.CONF"/>
</f></buildSSLConfig>
		<new public="1" set="method" line="119"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A TLS socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread.Deque" params="T" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Deque.hx" extern="1">
		<q><d/></q>
		<add public="1" set="method" line="33">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Adds an element at the end of `this` Deque.

		(Java,Jvm): throws `java.lang.NullPointerException` if `i` is `null`.</haxe_doc>
		</add>
		<push public="1" set="method" line="37">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Adds an element at the front of `this` Deque.

		(Java,Jvm): throws `java.lang.NullPointerException` if `i` is `null`.</haxe_doc>
		</push>
		<pop public="1" set="method" line="41">
			<f a="block">
				<x path="Bool"/>
				<x path="Null"><c path="sys.thread.Deque.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tries to retrieve an element from the front of `this` Deque.

		If an element is available, it is removed from the queue and returned.

		If no element is available and `block` is `false`, `null` is returned.

		Otherwise, execution blocks until an element is available and returns it.</haxe_doc>
		</pop>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Deque instance which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>A Deque is a double-ended queue with a `pop` method that can block until
	an element is available. It is commonly used to synchronize threads.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="sys.thread.NextEventTime" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/thread/EventLoop.hx" module="sys.thread.EventLoop">
		<Now><haxe_doc>There's already an event waiting to be executed</haxe_doc></Now>
		<Never><haxe_doc>No new events are expected.</haxe_doc></Never>
		<AnyTime a="time">
			<x path="Null"><x path="Float"/></x>
			<haxe_doc>An event is expected to arrive at any time.
		If `time` is specified, then the event will be ready at that time for sure.</haxe_doc>
		</AnyTime>
		<At a="time">
			<x path="Float"/>
			<haxe_doc>An event is expected to be ready for execution at `time`.</haxe_doc>
		</At>
		<haxe_doc>When an event loop has an available event to execute.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="sys.thread.EventHandler" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/thread/EventLoop.hx" module="sys.thread.EventLoop">
		<from><icast><c path="sys.thread._EventLoop.RegularEvent"/></icast></from>
		<this><c path="sys.thread._EventLoop.RegularEvent"/></this>
		<to><icast><c path="sys.thread._EventLoop.RegularEvent"/></icast></to>
		<impl><class path="sys.thread._EventLoop.EventHandler_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="sys.thread._EventLoop.RegularEvent" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop">
		<nextRunTime public="1"><x path="Float"/></nextRunTime>
		<interval final="1" public="1"><x path="Float"/></interval>
		<run final="1" public="1"><f a=""><x path="Void"/></f></run>
		<next public="1"><x path="Null"><c path="sys.thread._EventLoop.RegularEvent"/></x></next>
		<cancelled public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</cancelled>
		<new public="1" set="method" line="286"><f a="run:nextRunTime:interval">
	<f a=""><x path="Void"/></f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.thread.Lock" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Lock.hx" extern="1">
		<l><d/></l>
		<wait public="1" set="method" line="33">
			<f a="?timeout" v="-1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ timeout : -1 }</e></m>
			</meta>
			<haxe_doc>Waits for the lock to be released, or `timeout` (in seconds)
		to expire. Returns `true` if the lock is released and `false`
		if a time-out occurs.</haxe_doc>
		</wait>
		<release public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Releases the lock once.

		The thread does not need to own the lock in order to release
		it. Each call to `release` allows exactly one call to `wait`
		to execute.</haxe_doc>
		</release>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new Lock which is initially locked.</haxe_doc>
		</new>
		<haxe_doc>A Lock allows blocking execution until it has been unlocked. It keeps track
	of how often `release` has been called, and blocks exactly as many `wait`
	calls.

	The order of the `release` and `wait` calls is irrelevant. That is, a Lock
	can be released before anyone waits for it. In that case, the `wait` call
	will execute immediately.

	Usage example:

	```haxe
	var lock = new Lock();
	var elements = [1, 2, 3];
	for (element in elements) {
		// Create one thread per element
		new Thread(function() {
			trace(element);
			Sys.sleep(1);
			// Release once per thread = 3 times
			lock.release();
		});
	}
	for (_ in elements) {
		// Wait 3 times
		lock.wait();
	}
	trace("All threads finished");
	```</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread.NoEventLoopException" params="" file="/home/nanjizal/haxe/versions/779b005/std/sys/thread/NoEventLoopException.hx">
		<extends path="haxe.Exception"/>
		<new public="1" set="method" line="6">
			<f a="?msg:?previous" v="&quot;Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop.&quot;:">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ msg : "Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop." }</e></m></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="sys.thread._Thread.ThreadImpl" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread"><c path="sys.thread._Thread.HaxeThread"/></typedef>
	<abstract path="sys.thread.Thread" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx">
		<from><icast><t path="sys.thread._Thread.ThreadImpl"/></icast></from>
		<this><t path="sys.thread._Thread.ThreadImpl"/></this>
		<impl><class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1">
	<events public="1" get="accessor" set="null" static="1"><c path="sys.thread.EventLoop"/></events>
	<get_events set="method" line="54" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread.EventLoop"/>
</f></get_events>
	<processEvents public="1" set="method" line="61" static="1">
		<f a=""><x path="Void"/></f>
		<meta><m n=":keep"/></meta>
	</processEvents>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1">
		<events public="1" get="accessor" set="null" static="1"><c path="sys.thread.EventLoop"/></events>
		<get_events set="method" line="54" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread.EventLoop"/>
</f></get_events>
		<processEvents public="1" set="method" line="61" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</processEvents>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="sys.thread._Thread.NativeThreadHandle" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<this><x path="sys.thread._Thread.NativeThreadHandle"/></this>
		<meta>
			<m n=":callable"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<typedef path="sys.thread._Thread.ThreadHandle" params="" file="/home/nanjizal/haxe/versions/779b005/std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread"><x path="sys.thread._Thread.NativeThreadHandle"/></typedef>
	<abstract path="triangleGML.ArcType" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/ArcType.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="triangleGML._ArcType.ArcType_Impl_" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/ArcType.hx" private="1" module="triangleGML.ArcType" extern="1" final="1">
	<Chord public="1" get="inline" set="null" expr="cast &quot;chord&quot;" line="4" static="1">
		<x path="triangleGML.ArcType"/>
		<meta>
			<m n=":value"><e>cast "chord"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Chord>
	<Ellipse public="1" get="inline" set="null" expr="cast &quot;ellipse&quot;" line="5" static="1">
		<x path="triangleGML.ArcType"/>
		<meta>
			<m n=":value"><e>cast "ellipse"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Ellipse>
	<Pie public="1" get="inline" set="null" expr="cast &quot;pie&quot;" line="6" static="1">
		<x path="triangleGML.ArcType"/>
		<meta>
			<m n=":value"><e>cast "pie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Pie>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="triangleGML._ArcType.ArcType_Impl_" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/ArcType.hx" private="1" module="triangleGML.ArcType" extern="1" final="1">
		<Chord public="1" get="inline" set="null" expr="cast &quot;chord&quot;" line="4" static="1">
			<x path="triangleGML.ArcType"/>
			<meta>
				<m n=":value"><e>cast "chord"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Chord>
		<Ellipse public="1" get="inline" set="null" expr="cast &quot;ellipse&quot;" line="5" static="1">
			<x path="triangleGML.ArcType"/>
			<meta>
				<m n=":value"><e>cast "ellipse"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Ellipse>
		<Pie public="1" get="inline" set="null" expr="cast &quot;pie&quot;" line="6" static="1">
			<x path="triangleGML.ArcType"/>
			<meta>
				<m n=":value"><e>cast "pie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Pie>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="triangleGML.DashGap" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/DashGap.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="triangleGML._DashGap.DashGap_Impl_" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/DashGap.hx" private="1" module="triangleGML.DashGap" extern="1" final="1">
	<DASH public="1" get="inline" set="null" expr="cast &quot;dash&quot;" line="4" static="1">
		<x path="triangleGML.DashGap"/>
		<meta>
			<m n=":value"><e>cast "dash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DASH>
	<GAP public="1" get="inline" set="null" expr="cast &quot;gap&quot;" line="5" static="1">
		<x path="triangleGML.DashGap"/>
		<meta>
			<m n=":value"><e>cast "gap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GAP>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="triangleGML._DashGap.DashGap_Impl_" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/DashGap.hx" private="1" module="triangleGML.DashGap" extern="1" final="1">
		<DASH public="1" get="inline" set="null" expr="cast &quot;dash&quot;" line="4" static="1">
			<x path="triangleGML.DashGap"/>
			<meta>
				<m n=":value"><e>cast "dash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DASH>
		<GAP public="1" get="inline" set="null" expr="cast &quot;gap&quot;" line="5" static="1">
			<x path="triangleGML.DashGap"/>
			<meta>
				<m n=":value"><e>cast "gap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GAP>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="triangleGML.TriangleGMLname" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/TriangleGML_.hx" module="triangleGML.TriangleGML_">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="triangleGML._TriangleGML_.TriangleGMLname_Impl_" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/TriangleGML_.hx" private="1" module="triangleGML.TriangleGML_" extern="1" final="1">
	<ARROW_SHAPE public="1" get="inline" set="null" expr="cast &quot;ArrowShape&quot;" line="75" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "ArrowShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARROW_SHAPE>
	<CUBIC_CURVE_SHAPE public="1" get="inline" set="null" expr="cast &quot;CubicCurveShape&quot;" line="76" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "CubicCurveShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CUBIC_CURVE_SHAPE>
	<ELLIPSE_SHAPE public="1" get="inline" set="null" expr="cast &quot;EllipseShape&quot;" line="77" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "EllipseShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ELLIPSE_SHAPE>
	<LINE_GRID_SHAPE public="1" get="inline" set="null" expr="cast &quot;LineGridShape&quot;" line="78" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "LineGridShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LINE_GRID_SHAPE>
	<LINE_SHAPE public="1" get="inline" set="null" expr="cast &quot;LineShape&quot;" line="79" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "LineShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LINE_SHAPE>
	<POLY_LINE_SHAPE public="1" get="inline" set="null" expr="cast &quot;PolyLineShape&quot;" line="80" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "PolyLineShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</POLY_LINE_SHAPE>
	<QUAD_CURVE_SHAPE public="1" get="inline" set="null" expr="cast &quot;QuadCurveShape&quot;" line="81" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "QuadCurveShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUAD_CURVE_SHAPE>
	<QUAD_SHAPE public="1" get="inline" set="null" expr="cast &quot;QuadShape&quot;" line="82" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "QuadShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUAD_SHAPE>
	<QUINT_SHAPE public="1" get="inline" set="null" expr="cast &quot;QuintShape&quot;" line="83" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "QuintShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUINT_SHAPE>
	<TRIANGLE_SHAPE public="1" get="inline" set="null" expr="cast &quot;TriangleShape&quot;" line="84" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "TriangleShape"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIANGLE_SHAPE>
	<ARC_FORM public="1" get="inline" set="null" expr="cast &quot;ArcForm&quot;" line="86" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "ArcForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARC_FORM>
	<CIRCLE_FORM public="1" get="inline" set="null" expr="cast &quot;CircleForm&quot;" line="87" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "CircleForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CIRCLE_FORM>
	<ELLIPSE_FORM public="1" get="inline" set="null" expr="cast &quot;EllipseForm&quot;" line="88" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "EllipseForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ELLIPSE_FORM>
	<PATH_ELEMENT_FORM public="1" get="inline" set="null" expr="cast &quot;PathElementForm&quot;" line="89" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "PathElementForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PATH_ELEMENT_FORM>
	<QUAD_FORM public="1" get="inline" set="null" expr="cast &quot;QuadForm&quot;" line="90" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "QuadForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUAD_FORM>
	<RECTANGLE_FORM public="1" get="inline" set="null" expr="cast &quot;RectangleForm&quot;" line="91" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "RectangleForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RECTANGLE_FORM>
	<SQUARE_FORM public="1" get="inline" set="null" expr="cast &quot;SquareForm&quot;" line="92" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "SquareForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SQUARE_FORM>
	<TRIANGLE_FORM public="1" get="inline" set="null" expr="cast &quot;TriangleForm&quot;" line="93" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "TriangleForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIANGLE_FORM>
	<VE_PATH_ELEMENT_FORM public="1" get="inline" set="null" expr="cast &quot;VePathElementForm&quot;" line="94" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "VePathElementForm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VE_PATH_ELEMENT_FORM>
	<ARROW_THICK_GRADIENT public="1" get="inline" set="null" expr="cast &quot;ArrowThickGradient&quot;" line="96" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "ArrowThickGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARROW_THICK_GRADIENT>
	<ELLIPSE_RADIAL_GRADIENT public="1" get="inline" set="null" expr="cast &quot;EllipseRadialGradient&quot;" line="97" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "EllipseRadialGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ELLIPSE_RADIAL_GRADIENT>
	<LINE_GRADIENT public="1" get="inline" set="null" expr="cast &quot;LineGradient&quot;" line="98" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "LineGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LINE_GRADIENT>
	<PATH_ELEMENT_THICK_GRADIENT public="1" get="inline" set="null" expr="cast &quot;PathElementThickGradient&quot;" line="99" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "PathElementThickGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PATH_ELEMENT_THICK_GRADIENT>
	<POLY_LINE_GRADIENT public="1" get="inline" set="null" expr="cast &quot;PolyLineGradient&quot;" line="100" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "PolyLineGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</POLY_LINE_GRADIENT>
	<QUAD_GRADIENT public="1" get="inline" set="null" expr="cast &quot;QuadGradient&quot;" line="101" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "QuadGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUAD_GRADIENT>
	<RECTANGLE_RADIAL_GRADIENT public="1" get="inline" set="null" expr="cast &quot;RectangleRadialGradient&quot;" line="102" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "RectangleRadialGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RECTANGLE_RADIAL_GRADIENT>
	<TRIANGLE_GRADIENT public="1" get="inline" set="null" expr="cast &quot;TriangleGradient&quot;" line="103" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "TriangleGradient"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIANGLE_GRADIENT>
	<ARC_PATTERN public="1" get="inline" set="null" expr="cast &quot;ArcPattern&quot;" line="105" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "ArcPattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARC_PATTERN>
	<CIRCLE_PATTERN public="1" get="inline" set="null" expr="cast &quot;CirclePattern&quot;" line="106" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "CirclePattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CIRCLE_PATTERN>
	<ELLIPSE_PATTERN public="1" get="inline" set="null" expr="cast &quot;EllipsePattern&quot;" line="107" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "EllipsePattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ELLIPSE_PATTERN>
	<LINE_PATTERN public="1" get="inline" set="null" expr="cast &quot;LinePattern&quot;" line="108" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "LinePattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LINE_PATTERN>
	<PATH_ELEMENT_PATTERN public="1" get="inline" set="null" expr="cast &quot;PathElementPattern&quot;" line="109" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "PathElementPattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PATH_ELEMENT_PATTERN>
	<QUAD_PATTERN public="1" get="inline" set="null" expr="cast &quot;QuadPattern&quot;" line="110" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "QuadPattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</QUAD_PATTERN>
	<RECTANGLE_PATTERN public="1" get="inline" set="null" expr="cast &quot;RectanglePattern&quot;" line="111" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "RectanglePattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RECTANGLE_PATTERN>
	<SQUARE_PATTERN public="1" get="inline" set="null" expr="cast &quot;SquarePattern&quot;" line="112" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "SquarePattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SQUARE_PATTERN>
	<TRIANGLE_PATTERN public="1" get="inline" set="null" expr="cast &quot;TrianglePattern&quot;" line="113" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "TrianglePattern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRIANGLE_PATTERN>
	<NINE_SLICE_PICTURE public="1" get="inline" set="null" expr="cast &quot;NineSlicePicture&quot;" line="115" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "NineSlicePicture"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NINE_SLICE_PICTURE>
	<RECTANGLE_PICTURE public="1" get="inline" set="null" expr="cast &quot;RectanglePicture&quot;" line="116" static="1">
		<x path="triangleGML.TriangleGMLname"/>
		<meta>
			<m n=":value"><e>cast "RectanglePicture"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RECTANGLE_PICTURE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="triangleGML._TriangleGML_.TriangleGMLname_Impl_" params="" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/TriangleGML_.hx" private="1" module="triangleGML.TriangleGML_" extern="1" final="1">
		<ARROW_SHAPE public="1" get="inline" set="null" expr="cast &quot;ArrowShape&quot;" line="75" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "ArrowShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARROW_SHAPE>
		<CUBIC_CURVE_SHAPE public="1" get="inline" set="null" expr="cast &quot;CubicCurveShape&quot;" line="76" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "CubicCurveShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CUBIC_CURVE_SHAPE>
		<ELLIPSE_SHAPE public="1" get="inline" set="null" expr="cast &quot;EllipseShape&quot;" line="77" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "EllipseShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ELLIPSE_SHAPE>
		<LINE_GRID_SHAPE public="1" get="inline" set="null" expr="cast &quot;LineGridShape&quot;" line="78" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "LineGridShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LINE_GRID_SHAPE>
		<LINE_SHAPE public="1" get="inline" set="null" expr="cast &quot;LineShape&quot;" line="79" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "LineShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LINE_SHAPE>
		<POLY_LINE_SHAPE public="1" get="inline" set="null" expr="cast &quot;PolyLineShape&quot;" line="80" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "PolyLineShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</POLY_LINE_SHAPE>
		<QUAD_CURVE_SHAPE public="1" get="inline" set="null" expr="cast &quot;QuadCurveShape&quot;" line="81" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "QuadCurveShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUAD_CURVE_SHAPE>
		<QUAD_SHAPE public="1" get="inline" set="null" expr="cast &quot;QuadShape&quot;" line="82" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "QuadShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUAD_SHAPE>
		<QUINT_SHAPE public="1" get="inline" set="null" expr="cast &quot;QuintShape&quot;" line="83" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "QuintShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUINT_SHAPE>
		<TRIANGLE_SHAPE public="1" get="inline" set="null" expr="cast &quot;TriangleShape&quot;" line="84" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "TriangleShape"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIANGLE_SHAPE>
		<ARC_FORM public="1" get="inline" set="null" expr="cast &quot;ArcForm&quot;" line="86" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "ArcForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARC_FORM>
		<CIRCLE_FORM public="1" get="inline" set="null" expr="cast &quot;CircleForm&quot;" line="87" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "CircleForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CIRCLE_FORM>
		<ELLIPSE_FORM public="1" get="inline" set="null" expr="cast &quot;EllipseForm&quot;" line="88" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "EllipseForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ELLIPSE_FORM>
		<PATH_ELEMENT_FORM public="1" get="inline" set="null" expr="cast &quot;PathElementForm&quot;" line="89" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "PathElementForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PATH_ELEMENT_FORM>
		<QUAD_FORM public="1" get="inline" set="null" expr="cast &quot;QuadForm&quot;" line="90" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "QuadForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUAD_FORM>
		<RECTANGLE_FORM public="1" get="inline" set="null" expr="cast &quot;RectangleForm&quot;" line="91" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "RectangleForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RECTANGLE_FORM>
		<SQUARE_FORM public="1" get="inline" set="null" expr="cast &quot;SquareForm&quot;" line="92" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "SquareForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SQUARE_FORM>
		<TRIANGLE_FORM public="1" get="inline" set="null" expr="cast &quot;TriangleForm&quot;" line="93" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "TriangleForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIANGLE_FORM>
		<VE_PATH_ELEMENT_FORM public="1" get="inline" set="null" expr="cast &quot;VePathElementForm&quot;" line="94" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "VePathElementForm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VE_PATH_ELEMENT_FORM>
		<ARROW_THICK_GRADIENT public="1" get="inline" set="null" expr="cast &quot;ArrowThickGradient&quot;" line="96" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "ArrowThickGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARROW_THICK_GRADIENT>
		<ELLIPSE_RADIAL_GRADIENT public="1" get="inline" set="null" expr="cast &quot;EllipseRadialGradient&quot;" line="97" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "EllipseRadialGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ELLIPSE_RADIAL_GRADIENT>
		<LINE_GRADIENT public="1" get="inline" set="null" expr="cast &quot;LineGradient&quot;" line="98" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "LineGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LINE_GRADIENT>
		<PATH_ELEMENT_THICK_GRADIENT public="1" get="inline" set="null" expr="cast &quot;PathElementThickGradient&quot;" line="99" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "PathElementThickGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PATH_ELEMENT_THICK_GRADIENT>
		<POLY_LINE_GRADIENT public="1" get="inline" set="null" expr="cast &quot;PolyLineGradient&quot;" line="100" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "PolyLineGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</POLY_LINE_GRADIENT>
		<QUAD_GRADIENT public="1" get="inline" set="null" expr="cast &quot;QuadGradient&quot;" line="101" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "QuadGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUAD_GRADIENT>
		<RECTANGLE_RADIAL_GRADIENT public="1" get="inline" set="null" expr="cast &quot;RectangleRadialGradient&quot;" line="102" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "RectangleRadialGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RECTANGLE_RADIAL_GRADIENT>
		<TRIANGLE_GRADIENT public="1" get="inline" set="null" expr="cast &quot;TriangleGradient&quot;" line="103" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "TriangleGradient"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIANGLE_GRADIENT>
		<ARC_PATTERN public="1" get="inline" set="null" expr="cast &quot;ArcPattern&quot;" line="105" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "ArcPattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARC_PATTERN>
		<CIRCLE_PATTERN public="1" get="inline" set="null" expr="cast &quot;CirclePattern&quot;" line="106" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "CirclePattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CIRCLE_PATTERN>
		<ELLIPSE_PATTERN public="1" get="inline" set="null" expr="cast &quot;EllipsePattern&quot;" line="107" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "EllipsePattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ELLIPSE_PATTERN>
		<LINE_PATTERN public="1" get="inline" set="null" expr="cast &quot;LinePattern&quot;" line="108" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "LinePattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LINE_PATTERN>
		<PATH_ELEMENT_PATTERN public="1" get="inline" set="null" expr="cast &quot;PathElementPattern&quot;" line="109" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "PathElementPattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PATH_ELEMENT_PATTERN>
		<QUAD_PATTERN public="1" get="inline" set="null" expr="cast &quot;QuadPattern&quot;" line="110" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "QuadPattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</QUAD_PATTERN>
		<RECTANGLE_PATTERN public="1" get="inline" set="null" expr="cast &quot;RectanglePattern&quot;" line="111" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "RectanglePattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RECTANGLE_PATTERN>
		<SQUARE_PATTERN public="1" get="inline" set="null" expr="cast &quot;SquarePattern&quot;" line="112" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "SquarePattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SQUARE_PATTERN>
		<TRIANGLE_PATTERN public="1" get="inline" set="null" expr="cast &quot;TrianglePattern&quot;" line="113" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "TrianglePattern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRIANGLE_PATTERN>
		<NINE_SLICE_PICTURE public="1" get="inline" set="null" expr="cast &quot;NineSlicePicture&quot;" line="115" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "NineSlicePicture"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NINE_SLICE_PICTURE>
		<RECTANGLE_PICTURE public="1" get="inline" set="null" expr="cast &quot;RectanglePicture&quot;" line="116" static="1">
			<x path="triangleGML.TriangleGMLname"/>
			<meta>
				<m n=":value"><e>cast "RectanglePicture"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RECTANGLE_PICTURE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="triangleGML.hitTest.IhitObj" params="IMAGETOOL" file="/home/nanjizal/haxey/pixelimage/triangleGML/triangleGML/src/triangleGML/hitTest/IhitObj.hx" interface="1">
		<hit public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<undoImage public="1"><x path="Null"><c path="triangleGML.hitTest.IhitObj.IMAGETOOL"/></x></undoImage>
		<undoX public="1"><x path="Int"/></undoX>
		<undoY public="1"><x path="Int"/></undoY>
	</class>
	<enum path="utils._MultipassTemplate.TemplateExpr" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/utils/MultipassTemplate.hx" private="1" module="utils.MultipassTemplate">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="utils._MultipassTemplate.TemplateExpr"/>
			<e path="utils._MultipassTemplate.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><t path="List"><e path="utils._MultipassTemplate.TemplateExpr"/></t></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="utils._MultipassTemplate.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<t path="List"><e path="utils._MultipassTemplate.TemplateExpr"/></t>
		</OpMacro>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="utils._MultipassTemplate.Token" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/utils/MultipassTemplate.hx" private="1" module="utils.MultipassTemplate"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="utils._MultipassTemplate.ExprToken" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/utils/MultipassTemplate.hx" private="1" module="utils.MultipassTemplate"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="utils.MultipassTemplate" params="" file="/home/nanjizal/haxe/haxe_libraries/peote-view/0.8.8/github/be5109f74eb01b6d74e37ea551b7c4e0855c76e6/src/utils/MultipassTemplate.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="57" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="61" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="67" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<expr><e path="utils._MultipassTemplate.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><t path="List"><d/></t></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="108">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="117"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="132"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="utils._MultipassTemplate.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="178"><f a="tokens">
	<t path="List"><t path="utils._MultipassTemplate.Token"/></t>
	<e path="utils._MultipassTemplate.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="193"><f a="tokens">
	<t path="List"><t path="utils._MultipassTemplate.Token"/></t>
	<e path="utils._MultipassTemplate.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="248"><f a="data">
	<c path="String"/>
	<f a=""><d/></f>
</f></parseExpr>
		<makeConst set="method" line="280"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="299"><f a="e:l">
	<f a=""><d/></f>
	<t path="List"><t path="utils._MultipassTemplate.ExprToken"/></t>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="313"><f a="l">
	<t path="List"><t path="utils._MultipassTemplate.ExprToken"/></t>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="317"><f a="l">
	<t path="List"><t path="utils._MultipassTemplate.ExprToken"/></t>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="363"><f a="e">
	<e path="utils._MultipassTemplate.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="85">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>
	
	This ist a modified version of the original haxe.Template to provide parsing in multiple passes.
	If a variable can not be found inside the context it will stay as it is and not replaced by null.]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.algorithms.BilinearInterpolation" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/algorithms/BilinearInterpolation.hx">
		<interpolate public="1" set="method" line="6" static="1"><f a="image:width:height">
	<x path="vision.ds.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="vision.ds.Image"/>
</f></interpolate>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.algorithms.Radix" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/algorithms/Radix.hx">
		<getMax params="T:Uint:Int64" set="method" line="34" static="1">
			<f a="array:?endIndex">
				<c path="Array"><c path="getMax.T"/></c>
				<x path="Int"/>
				<c path="getMax.T"/>
			</f>
			<haxe_doc>* Gets the maximum in array `array`.
	 * @param array an array of type `Int`, `Int64` or `UInt`
	 * @param endIndex optional, an index after which we stop checking for a maximum 
	 * (useful if the range in which the maximum value is present is known)</haxe_doc>
		</getMax>
		<countingSort params="T:Uint:Int64" set="method" line="52" static="1">
			<f a="array:exp:?endIndex">
				<c path="Array"><c path="countingSort.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="countingSort.T"/></c>
			</f>
			<haxe_doc>* Does a counting sort on `array` according to the digit's placement represented by `exp`
	 * @param array an array of type `Int`, `Int64` or `UInt`
	 * @param exp Represents the digit's "place" on which were going to count - `10` will count on the last digit, `100` will count on the second-to-last, etc.
	 * @param endIndex optional, an index after which we stop sorting</haxe_doc>
		</countingSort>
		<sort public="1" params="T:Uint:Int64" set="method" line="91" static="1">
			<f a="array">
				<c path="Array"><c path="sort.T"/></c>
				<c path="Array"><c path="sort.T"/></c>
			</f>
			<haxe_doc>Sorts an array of `Int`s / `UInt`s / `Int64` using **Radix Sort**.</haxe_doc>
		</sort>
		<haxe_doc>An implementation of radix sort in Haxe, by [Shahar Marcus](https://www.github.com/ShaharMS).

	Radix vs. ArraySort.sort:

	|Radix                                 | ArraySort.sort                |
	|:------------------------------------:|:-----------------------------:|
	|length: 38, time: 0.000s              | length: 38, time: 0.000s      |
	|length: 74, time: 0.000s              | length: 74, time: 0.000s      |
	|length: 146, time: 0.001s             | length: 146, time: 0.001s     |
	|length: 290, time: 0.001s             | length: 290, time: 0.002s     |
	|length: 578, time: 0.003s             | length: 578, time: 0.003s     |
	|length: 1154, time: 0.005s            | length: 1154, time: 0.006s    |
	|length: 2306, time: 0.01s             | length: 2306, time: 0.012s    |
	|length: 4610, time: 0.02s             | length: 4610, time: 0.022s    |
	|length: 9218, time: 0.0591s           | length: 9218, time: 0.048s    |
	|length: 18434, time: 0.0701s          | length: 18434, time: 0.0961s  |
	|length: 36866, time: 0.1614s          | length: 36866, time: 0.1882s  |
	|length: 73730, time: 0.3123s          | length: 73730, time: 0.3856s  |
	|length: 147458, time: 0.5837s         | length: 147458, time: 0.7417s |
	|length: 294914, time: 1.1621s         | length: 294914, time: 1.6143s |
	|length: 589826, time: 2.3471s         | length: 589826, time: 3.0588s |
	|length: 1179650, time: 4.7839s        | length: 1179650, time: 6.1441s|</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.ds.Array2D" params="T" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Array2D.hx">
		<inner public="1">
			<c path="Array"><c path="vision.ds.Array2D.T"/></c>
			<haxe_doc><![CDATA[The underlying `Array<T>` instance that holds the data.]]></haxe_doc>
		</inner>
		<width public="1" set="accessor">
			<x path="Int"/>
			<haxe_doc>The 2D array's width.</haxe_doc>
		</width>
		<height public="1" set="accessor">
			<x path="Int"/>
			<haxe_doc>The 2D array's height.</haxe_doc>
		</height>
		<length public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The amount of elements in this `Array2D`.</haxe_doc>
		</length>
		<get public="1" get="inline" set="null" line="47">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<c path="vision.ds.Array2D.T"/>
			</f>
			<haxe_doc>Gets the element at row `x`, column `y`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="54">
			<f a="x:y:val">
				<x path="Int"/>
				<x path="Int"/>
				<c path="vision.ds.Array2D.T"/>
				<c path="vision.ds.Array2D.T"/>
			</f>
			<haxe_doc>Sets the element at row `x`, column `y`</haxe_doc>
		</set>
		<iterator public="1" get="inline" set="null" line="65">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="vision.ds.Array2D.T"/></c></f>
			<haxe_doc><![CDATA[Returns an array iterator for this `Array2D`.
	    
		Values are iterated on from left to right, top to bottom:
		
		`(x, y)...(x + 5, y) -> (x, y + 1)...(x + 5, y + 1) -> (x, y + 2)...`]]></haxe_doc>
		</iterator>
		<get_length get="inline" set="null" line="69"><f a=""><x path="Int"/></f></get_length>
		<set_length get="inline" set="null" line="73"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<set_width get="inline" set="null" line="78"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<set_height get="inline" set="null" line="83"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<new public="1" get="inline" set="null" line="36">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Array2D` instance. The created array can be filled in with non-null values, and thats target-dependent:

		 - on dynamic targets, values are always `null`
		 - on static targets, `0`, `0.0` or `false` are filled in for Int, Float and Bool respectively. Other types are filled in with `null`
	    
	    @param width The array's width
	    @param height The array's height</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A 2D array, faster than an `Array<Array<T>>`.]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="vision.ds.ByteArray" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ByteArray.hx">
		<from><icast><c path="haxe.io.Bytes"/></icast></from>
		<this><c path="haxe.io.Bytes"/></this>
		<to><icast><c path="haxe.io.Bytes"/></icast></to>
		<haxe_doc>An abstract over `haxe.io.Bytes`, allows array access.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="vision.ds._ByteArray.ByteArray_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ByteArray.hx" private="1" module="vision.ds.ByteArray" final="1">
	<read get="inline" set="null" line="11" static="1">
		<f a="this:index">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</read>
	<write get="inline" set="null" line="15" static="1">
		<f a="this:index:value">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</write>
	<_new public="1" get="inline" set="null" line="22" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="vision.ds.ByteArray"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new `ByteArray`</haxe_doc>
	</_new>
</class></impl>
	</abstract>
	<class path="vision.ds._ByteArray.ByteArray_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ByteArray.hx" private="1" module="vision.ds.ByteArray" final="1">
		<read get="inline" set="null" line="11" static="1">
			<f a="this:index">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</read>
		<write get="inline" set="null" line="15" static="1">
			<f a="this:index:value">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</write>
		<_new public="1" get="inline" set="null" line="22" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="vision.ds.ByteArray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new `ByteArray`</haxe_doc>
		</_new>
	</class>
	<abstract path="vision.ds.Color" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Color.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<impl><class path="vision.ds._Color.Color_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Color.hx" private="1" module="vision.ds.Color" final="1">
	<TRANSPARENT public="1" get="inline" set="null" expr="0x00000000" line="19" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0x00000000</e></m></meta>
		<haxe_doc><![CDATA[&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;]]></haxe_doc>
	</TRANSPARENT>
	<WHITE public="1" get="inline" set="null" expr="0xFFFFFFFF" line="24" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/ffffff.png)![color](https://www.colorhexa.com/ffffff.png)</haxe_doc>
	</WHITE>
	<GRAY public="1" get="inline" set="null" expr="0xFF808080" line="29" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF808080</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/808080.png)![color](https://www.colorhexa.com/808080.png)</haxe_doc>
	</GRAY>
	<BLACK public="1" get="inline" set="null" expr="0xFF000000" line="34" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF000000</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/000000.png)![color](https://www.colorhexa.com/000000.png)</haxe_doc>
	</BLACK>
	<GREEN public="1" get="inline" set="null" expr="0xFF00FF00" line="39" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF00FF00</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/00ff00.png)![color](https://www.colorhexa.com/00ff00.png)</haxe_doc>
	</GREEN>
	<YELLOW public="1" get="inline" set="null" expr="0xFFFFFF00" line="44" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFFFF00</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FFFF00.png)![color](https://www.colorhexa.com/FFFF00.png)</haxe_doc>
	</YELLOW>
	<ORANGE public="1" get="inline" set="null" expr="0xFFFFA500" line="49" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFFA500</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FFA500.png)![color](https://www.colorhexa.com/FFA500.png)</haxe_doc>
	</ORANGE>
	<RED public="1" get="inline" set="null" expr="0xFFFF0000" line="54" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFF0000</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FF0000.png)![color](https://www.colorhexa.com/FF0000.png)</haxe_doc>
	</RED>
	<PURPLE public="1" get="inline" set="null" expr="0xFF800080" line="59" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF800080</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/800080.png)![color](https://www.colorhexa.com/800080.png)</haxe_doc>
	</PURPLE>
	<BLUE public="1" get="inline" set="null" expr="0xFF0000FF" line="64" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF0000FF</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/0000ff.png)![color](https://www.colorhexa.com/0000ff.png)</haxe_doc>
	</BLUE>
	<BROWN public="1" get="inline" set="null" expr="0xFF8B4513" line="69" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF8B4513</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/8B4513.png)![color](https://www.colorhexa.com/8B4513.png)</haxe_doc>
	</BROWN>
	<PINK public="1" get="inline" set="null" expr="0xFFFFC0CB" line="74" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFFC0CB</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FFC0CB.png)![color](https://www.colorhexa.com/FFC0CB.png)</haxe_doc>
	</PINK>
	<MAGENTA public="1" get="inline" set="null" expr="0xFFFF00FF" line="79" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFF00FF</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FF00FF.png)![color](https://www.colorhexa.com/FF00FF.png)</haxe_doc>
	</MAGENTA>
	<CYAN public="1" get="inline" set="null" expr="0xFF00FFFF" line="84" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF00FFFF</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/00FFFF.png)![color](https://www.colorhexa.com/00FFFF.png)</haxe_doc>
	</CYAN>
	<SILVER public="1" get="inline" set="null" expr="0xC0C0C0" line="89" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xC0C0C0</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/C0C0C0.png)![color](https://www.colorhexa.com/C0C0C0.png)</haxe_doc>
	</SILVER>
	<GOLD public="1" get="inline" set="null" expr="0xFFFFD700" line="94" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFFD700</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FFD700.png)![color](https://www.colorhexa.com/FFD700.png)</haxe_doc>
	</GOLD>
	<OLIVE public="1" get="inline" set="null" expr="0xFF808000" line="99" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF808000</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/808000.png)![color](https://www.colorhexa.com/808000.png)</haxe_doc>
	</OLIVE>
	<MAROON public="1" get="inline" set="null" expr="0xFF800000" line="104" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF800000</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/800000.png)![color](https://www.colorhexa.com/800000.png)</haxe_doc>
	</MAROON>
	<NAVY public="1" get="inline" set="null" expr="0xFF000080" line="109" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF000080</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/000080.png)![color](https://www.colorhexa.com/000080.png)</haxe_doc>
	</NAVY>
	<TEAL public="1" get="inline" set="null" expr="0xFF008080" line="114" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF008080</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/008080.png)![color](https://www.colorhexa.com/008080.png)</haxe_doc>
	</TEAL>
	<FUCHSIA public="1" get="inline" set="null" expr="0xFFFF00FF" line="119" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFFFF00FF</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/FF00FF.png)![color](https://www.colorhexa.com/FF00FF.png)</haxe_doc>
	</FUCHSIA>
	<AQUA public="1" get="inline" set="null" expr="0xFF00FFFF" line="124" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF00FFFF</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/00FFFF.png)![color](https://www.colorhexa.com/00FFFF.png)</haxe_doc>
	</AQUA>
	<LIME public="1" get="inline" set="null" expr="0xFF32CD32" line="129" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF32CD32</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/32CD32.png)![color](https://www.colorhexa.com/32CD32.png)</haxe_doc>
	</LIME>
	<ROYAL_BLUE public="1" get="inline" set="null" expr="0xFF4169E1" line="134" static="1">
		<x path="vision.ds.Color"/>
		<meta><m n=":value"><e>0xFF4169E1</e></m></meta>
		<haxe_doc>![color](https://www.colorhexa.com/4169E1.png)![color](https://www.colorhexa.com/4169E1.png)</haxe_doc>
	</ROYAL_BLUE>
	<red public="1" get="accessor" set="accessor" static="1"><x path="Int"/></red>
	<blue public="1" get="accessor" set="accessor" static="1"><x path="Int"/></blue>
	<green public="1" get="accessor" set="accessor" static="1"><x path="Int"/></green>
	<alpha public="1" get="accessor" set="accessor" static="1"><x path="Int"/></alpha>
	<redFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redFloat>
	<blueFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueFloat>
	<greenFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenFloat>
	<alphaFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaFloat>
	<cyan public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cyan>
	<magenta public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magenta>
	<yellow public="1" get="accessor" set="accessor" static="1"><x path="Float"/></yellow>
	<black public="1" get="accessor" set="accessor" static="1"><x path="Float"/></black>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="vision.ds.Color"/>
		<haxe_doc>The red, green and blue channels of this color as a 24 bit integer (from 0 to 0xFFFFFF, does not include alpha values)</haxe_doc>
	</rgb>
	<hue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The hue of the color in degrees (from 0 to 359)</haxe_doc>
	</hue>
	<saturation public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The saturation of the color (from 0 to 1)</haxe_doc>
	</saturation>
	<brightness public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The brightness (aka value) of the color (from 0 to 1)</haxe_doc>
	</brightness>
	<lightness public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc>The lightness of the color (from 0 to 1)</haxe_doc>
	</lightness>
	<COLOR_REGEX expr="~/^(0x|#)(([A-F0-9]{2}){3,4})$/" line="176" static="1">
		<c path="EReg"/>
		<meta><m n=":value"><e>~/^(0x|#)(([A-F0-9]{2}){3,4})$/</e></m></meta>
	</COLOR_REGEX>
	<fromInt public="1" get="inline" set="null" line="184" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Create a color from the least significant four bytes of an Int

		@param value Int with bytes in the format 0xAARRGGBB
		@return	The color as a Color</haxe_doc>
	</fromInt>
	<fromRGBA public="1" get="inline" set="null" line="197" static="1">
		<f a="Red:Green:Blue:?Alpha" v=":::255">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 255 }</e></m></meta>
		<haxe_doc>Generate a color from integer RGB values (0 to 255)

		@param Red	The red value of the color from 0 to 255
		@param Green	The green value of the color from 0 to 255
		@param Blue	The green value of the color from 0 to 255
		@param Alpha	How opaque the color should be, from 0 to 255
		@return The color as a Color</haxe_doc>
	</fromRGBA>
	<from8Bit public="1" get="inline" set="null" line="208" static="1">
		<f a="Value">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc><![CDATA[Generate a grayscale color from a single color channel value (0 to 255)

		@param Value	The channel value of the red, green & blue channels of the color
		@return The color as a Color]]></haxe_doc>
	</from8Bit>
	<fromRGBAFloat public="1" get="inline" set="null" line="222" static="1">
		<f a="Red:Green:Blue:?Alpha" v=":::1">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
		<haxe_doc>Generate a color from float RGB values (0 to 1)

		@param Red	The red value of the color from 0 to 1
		@param Green	The green value of the color from 0 to 1
		@param Blue	The green value of the color from 0 to 1
		@param Alpha	How opaque the color should be, from 0 to 1
		@return The color as a Color</haxe_doc>
	</fromRGBAFloat>
	<fromCMYK public="1" get="inline" set="null" line="237" static="1">
		<f a="Cyan:Magenta:Yellow:Black:?Alpha" v="::::1">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
		<haxe_doc>Generate a color from CMYK values (0 to 1)

		@param Cyan		The cyan value of the color from 0 to 1
		@param Magenta	The magenta value of the color from 0 to 1
		@param Yellow	The yellow value of the color from 0 to 1
		@param Black		The black value of the color from 0 to 1
		@param Alpha		How opaque the color should be, from 0 to 1
		@return The color as a Color</haxe_doc>
	</fromCMYK>
	<fromHSB public="1" set="method" line="251" static="1">
		<f a="Hue:Saturation:Brightness:?Alpha" v=":::1">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
		<haxe_doc>Generate a color from HSB (aka HSV) components.

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Brightness	(aka Value) A number between 0 and 1, indicating how bright the color should be.  0 is black, 1 is full bright.
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255.
		@return	The color as a Color</haxe_doc>
	</fromHSB>
	<fromHSL public="1" get="inline" set="null" line="265" static="1">
		<f a="Hue:Saturation:Lightness:?Alpha" v=":::1">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
		<haxe_doc>Generate a color from HSL components.

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Lightness	A number between 0 and 1, indicating the lightness of the color
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255.
		@return	The color as a Color</haxe_doc>
	</fromHSL>
	<fromString public="1" set="method" line="285" static="1">
		<f a="str">
			<c path="String"/>
			<x path="Null"><x path="vision.ds.Color"/></x>
		</f>
		<haxe_doc><![CDATA[Parses a `String` and returns a `Color` or `null` if the `String` couldn't be parsed.

		Examples (input -> output in hex):

		- `0x00FF00`    -> `0xFF00FF00`
		- `0xAA4578C2`  -> `0xAA4578C2`
		- `#0000FF`     -> `0xFF0000FF`
		- `#3F000011`   -> `0x3F000011`
		- `GRAY`        -> `0xFF808080`
		- `blue`        -> `0xFF0000FF`

		@param	str 	The string to be parsed
		@return	A `Color` or `null` if the `String` couldn't be parsed]]></haxe_doc>
	</fromString>
	<getHSBColorWheel public="1" set="method" line="306" static="1">
		<f a="?Alpha" v="255">
			<x path="Int"/>
			<c path="Array"><x path="vision.ds.Color"/></c>
		</f>
		<meta><m n=":value"><e>{ Alpha : 255 }</e></m></meta>
		<haxe_doc>Get HSB color wheel values in an array which will be 360 elements in size

		@param	Alpha Alpha value for each color of the color wheel, between 0 (transparent) and 255 (opaque)
		@return	HSB color wheel as Array of Colors</haxe_doc>
	</getHSBColorWheel>
	<interpolate public="1" get="inline" set="null" line="318" static="1">
		<f a="Color1:Color2:?Factor" v="::0.5">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Factor : 0.5 }</e></m></meta>
		<haxe_doc>Get an interpolated color based on two different colors.

		@param 	Color1 The first color
		@param 	Color2 The second color
		@param 	Factor Value from 0 to 1 representing how much to shift Color1 toward Color2
		@return	The interpolated color</haxe_doc>
	</interpolate>
	<gradient public="1" set="method" line="336" static="1">
		<f a="Color1:Color2:Steps:?Ease">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<c path="Array"><x path="vision.ds.Color"/></c>
		</f>
		<haxe_doc>Create a gradient from one color to another

		@param Color1 The color to shift from
		@param Color2 The color to shift to
		@param Steps How many colors the gradient should have
		@param Ease An optional easing function, such as those provided in FlxEase
		@return An array of colors of length Steps, shifting from Color1 to Color2</haxe_doc>
	</gradient>
	<multiply public="1" get="inline" set="null" line="356" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Multiply the RGB and alpha channels of two Colors</haxe_doc>
	</multiply>
	<add public="1" get="inline" set="null" line="365" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Add the RGB and alpha channels of two Colors</haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="373" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Subtract the RGB and alpha channels of one Color from another</haxe_doc>
	</subtract>
	<divide public="1" get="inline" set="null" line="378" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<getComplementHarmony public="1" get="inline" set="null" line="388" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Returns a Complementary Color Harmony of this color.
		A complementary hue is one directly opposite the color given on the color wheel

		@return	The complimentary color</haxe_doc>
	</getComplementHarmony>
	<getAnalogousHarmony public="1" get="inline" set="null" line="399" static="1">
		<f a="this:?Threshold" v=":30">
			<x path="Int"/>
			<x path="Int"/>
			<t path="vision.ds.Harmony"/>
		</f>
		<meta><m n=":value"><e>{ Threshold : 30 }</e></m></meta>
		<haxe_doc>Returns an Analogous Color Harmony for the given color.
		An Analogous harmony are hues adjacent to each other on the color wheel

		@param	Threshold Control how adjacent the colors will be (default +- 30 degrees)
		@return 	Object containing 3 properties: original (the original color), warmer (the warmer analogous color) and colder (the colder analogous color)</haxe_doc>
	</getAnalogousHarmony>
	<getSplitComplementHarmony public="1" get="inline" set="null" line="413" static="1">
		<f a="this:?Threshold" v=":30">
			<x path="Int"/>
			<x path="Int"/>
			<t path="vision.ds.Harmony"/>
		</f>
		<meta><m n=":value"><e>{ Threshold : 30 }</e></m></meta>
		<haxe_doc>Returns an Split Complement Color Harmony for this color.
		A Split Complement harmony are the two hues on either side of the color's Complement

		@param	Threshold Control how adjacent the colors will be to the Complement (default +- 30 degrees)
		@return 	Object containing 3 properties: original (the original color), warmer (the warmer analogous color) and colder (the colder analogous color)</haxe_doc>
	</getSplitComplementHarmony>
	<getTriadicHarmony public="1" get="inline" set="null" line="427" static="1">
		<f a="this">
			<x path="Int"/>
			<t path="vision.ds.TriadicHarmony"/>
		</f>
		<haxe_doc>Returns a Triadic Color Harmony for this color. A Triadic harmony are 3 hues equidistant
		from each other on the color wheel.

		@return 	Object containing 3 properties: color1 (the original color), color2 and color3 (the equidistant colors)</haxe_doc>
	</getTriadicHarmony>
	<to24Bit public="1" get="inline" set="null" line="439" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Return a 24 bit version of this color (i.e. without an alpha value)

		@return A 24 bit version of this color</haxe_doc>
	</to24Bit>
	<toHexString public="1" get="inline" set="null" line="450" static="1">
		<f a="this:?Alpha:?Prefix" v=":true:true">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ Prefix : true, Alpha : true }</e></m></meta>
		<haxe_doc>Return a String representation of the color in the format

		@param Alpha Whether to include the alpha value in the hes string
		@param Prefix Whether to include "0x" prefix at start of string
		@return	A string of length 10 in the format 0xAARRGGBB</haxe_doc>
	</toHexString>
	<toWebString public="1" get="inline" set="null" line="460" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Return a String representation of the color in the format #RRGGBB

		@return	A string of length 7 in the format #RRGGBB</haxe_doc>
	</toWebString>
	<darken public="1" set="method" line="470" static="1">
		<f a="this:?Factor" v=":0.2">
			<x path="Int"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Factor : 0.2 }</e></m></meta>
		<haxe_doc>Get a darkened version of this color

		@param	Factor Value from 0 to 1 of how much to progress toward black.
		@return 	A darkened version of this color</haxe_doc>
	</darken>
	<lighten public="1" get="inline" set="null" line="483" static="1">
		<f a="this:?Factor" v=":0.2">
			<x path="Int"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Factor : 0.2 }</e></m></meta>
		<haxe_doc>Get a lightened version of this color

		@param	Factor Value from 0 to 1 of how much to progress toward white.
		@return 	A lightened version of this color</haxe_doc>
	</lighten>
	<invert public="1" get="inline" set="null" line="495" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Get the inversion of this color

		@return The inversion of this color</haxe_doc>
	</invert>
	<setRGBA public="1" get="inline" set="null" line="511" static="1">
		<f a="this:Red:Green:Blue:?Alpha" v="::::255">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 255 }</e></m></meta>
		<haxe_doc>Set RGB values as integers (0 to 255)

		@param Red	The red value of the color from 0 to 255
		@param Green	The green value of the color from 0 to 255
		@param Blue	The green value of the color from 0 to 255
		@param Alpha	How opaque the color should be, from 0 to 255
		@return This color</haxe_doc>
	</setRGBA>
	<setRGBAFloat public="1" get="inline" set="null" line="528" static="1">
		<f a="this:Red:Green:Blue:?Alpha" v="::::1">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
		<haxe_doc>Set RGB values as floats (0 to 1)

		@param Red	The red value of the color from 0 to 1
		@param Green	The green value of the color from 0 to 1
		@param Blue	The green value of the color from 0 to 1
		@param Alpha	How opaque the color should be, from 0 to 1
		@return This color</haxe_doc>
	</setRGBAFloat>
	<setCMYK public="1" get="inline" set="null" line="546" static="1">
		<f a="this:Cyan:Magenta:Yellow:Black:?Alpha" v=":::::1">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
		<haxe_doc>Set CMYK values as floats (0 to 1)

		@param Cyan		The cyan value of the color from 0 to 1
		@param Magenta	The magenta value of the color from 0 to 1
		@param Yellow	The yellow value of the color from 0 to 1
		@param Black		The black value of the color from 0 to 1
		@param Alpha		How opaque the color should be, from 0 to 1
		@return This color</haxe_doc>
	</setCMYK>
	<setHSB public="1" get="inline" set="null" line="563" static="1">
		<f a="this:Hue:Saturation:Brightness:Alpha">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Set HSB (aka HSV) components

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Brightness	(aka Value) A number between 0 and 1, indicating how bright the color should be.  0 is black, 1 is full bright.
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255.
		@return	This color</haxe_doc>
	</setHSB>
	<setHSL public="1" get="inline" set="null" line="578" static="1">
		<f a="this:Hue:Saturation:Lightness:Alpha">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Set HSL components.

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Lightness	A number between 0 and 1, indicating the lightness of the color
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255
		@return	This color</haxe_doc>
	</setHSL>
	<setHSChromaMatch get="inline" set="null" line="587" static="1">
		<f a="this:Hue:Saturation:Chroma:Match:Alpha">
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Private utility function to perform common operations between setHSB and setHSL</haxe_doc>
	</setHSChromaMatch>
	<grayscale public="1" get="inline" set="null" line="611" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></grayscale>
	<_new public="1" get="inline" set="null" line="616" static="1">
		<f a="?value" v="0">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<getThis get="inline" set="null" line="620" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></getThis>
	<validate get="inline" set="null" line="628" static="1"><f a="this">
	<x path="Int"/>
	<x path="Void"/>
</f></validate>
	<get_red get="inline" set="null" line="634" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_red>
	<get_green get="inline" set="null" line="638" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_green>
	<get_blue get="inline" set="null" line="642" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_blue>
	<get_alpha get="inline" set="null" line="646" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_alpha>
	<get_redFloat get="inline" set="null" line="650" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_redFloat>
	<get_greenFloat get="inline" set="null" line="654" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_greenFloat>
	<get_blueFloat get="inline" set="null" line="658" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_blueFloat>
	<get_alphaFloat get="inline" set="null" line="662" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_alphaFloat>
	<set_red get="inline" set="null" line="666" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_red>
	<set_green get="inline" set="null" line="673" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_green>
	<set_blue get="inline" set="null" line="680" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_blue>
	<set_alpha get="inline" set="null" line="687" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_alpha>
	<set_redFloat get="inline" set="null" line="694" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redFloat>
	<set_greenFloat get="inline" set="null" line="699" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenFloat>
	<set_blueFloat get="inline" set="null" line="704" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueFloat>
	<set_alphaFloat get="inline" set="null" line="709" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaFloat>
	<get_cyan get="inline" set="null" line="714" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_cyan>
	<get_magenta get="inline" set="null" line="718" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_magenta>
	<get_yellow get="inline" set="null" line="722" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_yellow>
	<get_black get="inline" set="null" line="726" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_black>
	<set_cyan get="inline" set="null" line="730" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cyan>
	<set_magenta get="inline" set="null" line="735" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magenta>
	<set_yellow get="inline" set="null" line="740" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_yellow>
	<set_black get="inline" set="null" line="745" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_black>
	<get_hue set="method" line="750" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_hue>
	<get_brightness get="inline" set="null" line="760" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_brightness>
	<get_saturation get="inline" set="null" line="764" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_saturation>
	<get_lightness get="inline" set="null" line="768" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_lightness>
	<set_hue get="inline" set="null" line="772" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_hue>
	<set_saturation get="inline" set="null" line="777" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_saturation>
	<set_brightness get="inline" set="null" line="782" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_brightness>
	<set_lightness get="inline" set="null" line="787" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_lightness>
	<set_rgb get="inline" set="null" line="792" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="vision.ds.Color"/>
	<x path="vision.ds.Color"/>
</f></set_rgb>
	<get_rgb get="inline" set="null" line="798" static="1"><f a="this">
	<x path="Int"/>
	<x path="vision.ds.Color"/>
</f></get_rgb>
	<maxColor get="inline" set="null" line="802" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></maxColor>
	<minColor get="inline" set="null" line="806" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></minColor>
	<boundChannel get="inline" set="null" line="810" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></boundChannel>
	<toString public="1" set="method" line="814" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<toInt public="1" set="method" line="822" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<color_greater_than_color get="inline" set="null" line="831" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</color_greater_than_color>
	<color_greater_than_int get="inline" set="null" line="836" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</color_greater_than_int>
	<int_greater_than_color get="inline" set="null" line="841" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</int_greater_than_color>
	<color_greater_than_float get="inline" set="null" line="846" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</color_greater_than_float>
	<float_greater_than_color get="inline" set="null" line="851" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</float_greater_than_color>
	<color_greater_than_equal_color get="inline" set="null" line="856" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</color_greater_than_equal_color>
	<color_greater_than_equal_int get="inline" set="null" line="861" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</color_greater_than_equal_int>
	<int_greater_than_equal_color get="inline" set="null" line="866" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</int_greater_than_equal_color>
	<color_greater_than_equal_float get="inline" set="null" line="871" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</color_greater_than_equal_float>
	<float_greater_than_equal_color get="inline" set="null" line="876" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</float_greater_than_equal_color>
	<color_less_than_color get="inline" set="null" line="881" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</color_less_than_color>
	<color_less_than_int get="inline" set="null" line="886" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</color_less_than_int>
	<int_less_than_color get="inline" set="null" line="891" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</int_less_than_color>
	<color_less_than_float get="inline" set="null" line="896" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</color_less_than_float>
	<float_less_than_color get="inline" set="null" line="901" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</float_less_than_color>
	<color_less_than_equal_color get="inline" set="null" line="906" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</color_less_than_equal_color>
	<color_less_than_equal_int get="inline" set="null" line="911" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</color_less_than_equal_int>
	<int_less_than_equal_color get="inline" set="null" line="916" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</int_less_than_equal_color>
	<color_less_than_equal_float get="inline" set="null" line="921" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</color_less_than_equal_float>
	<float_less_than_equal_color get="inline" set="null" line="926" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</float_less_than_equal_color>
	<color_equal_color get="inline" set="null" line="931" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</color_equal_color>
	<color_equal_int get="inline" set="null" line="936" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</color_equal_int>
	<int_equal_color get="inline" set="null" line="941" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</int_equal_color>
	<color_equal_float get="inline" set="null" line="946" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</color_equal_float>
	<float_equal_color get="inline" set="null" line="951" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</float_equal_color>
	<color_not_equal_color get="inline" set="null" line="956" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</color_not_equal_color>
	<color_not_equal_int get="inline" set="null" line="961" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</color_not_equal_int>
	<int_not_equal_color get="inline" set="null" line="966" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</int_not_equal_color>
	<color_not_equal_float get="inline" set="null" line="971" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</color_not_equal_float>
	<float_not_equal_color get="inline" set="null" line="976" static="1">
		<f a="lhs:rhs">
			<x path="Float"/>
			<x path="vision.ds.Color"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</float_not_equal_color>
	<color_bitwise_and_color get="inline" set="null" line="981" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</color_bitwise_and_color>
	<color_bitwise_and_int get="inline" set="null" line="986" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</color_bitwise_and_int>
	<int_bitwise_and_color get="inline" set="null" line="991" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</int_bitwise_and_color>
	<color_bitwise_or_color get="inline" set="null" line="996" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</color_bitwise_or_color>
	<color_bitwise_or_int get="inline" set="null" line="1001" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</color_bitwise_or_int>
	<int_bitwise_or_color get="inline" set="null" line="1006" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</int_bitwise_or_color>
	<color_bitwise_xor_color get="inline" set="null" line="1011" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</color_bitwise_xor_color>
	<color_bitwise_xor_int get="inline" set="null" line="1016" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</color_bitwise_xor_int>
	<int_bitwise_xor_color get="inline" set="null" line="1021" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</int_bitwise_xor_color>
	<color_bitwise_left_shift_color get="inline" set="null" line="1026" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</color_bitwise_left_shift_color>
	<color_bitwise_left_shift_int get="inline" set="null" line="1031" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</color_bitwise_left_shift_int>
	<int_bitwise_left_shift_color get="inline" set="null" line="1036" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</int_bitwise_left_shift_color>
	<color_bitwise_right_shift_color get="inline" set="null" line="1041" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</color_bitwise_right_shift_color>
	<color_bitwise_right_shift_int get="inline" set="null" line="1046" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</color_bitwise_right_shift_int>
	<int_bitwise_right_shift_color get="inline" set="null" line="1051" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</int_bitwise_right_shift_color>
	<color_bitwise_unsigned_right_shift_color get="inline" set="null" line="1056" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</color_bitwise_unsigned_right_shift_color>
	<color_bitwise_unsigned_right_shift_int get="inline" set="null" line="1061" static="1">
		<f a="lhs:rhs">
			<x path="vision.ds.Color"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</color_bitwise_unsigned_right_shift_int>
	<int_bitwise_unsigned_right_shift_color get="inline" set="null" line="1066" static="1">
		<f a="lhs:rhs">
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</int_bitwise_unsigned_right_shift_color>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="vision.ds._Color.Color_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Color.hx" private="1" module="vision.ds.Color" final="1">
		<TRANSPARENT public="1" get="inline" set="null" expr="0x00000000" line="19" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0x00000000</e></m></meta>
			<haxe_doc><![CDATA[&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;  
		&nbsp;]]></haxe_doc>
		</TRANSPARENT>
		<WHITE public="1" get="inline" set="null" expr="0xFFFFFFFF" line="24" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFFFFFF</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/ffffff.png)![color](https://www.colorhexa.com/ffffff.png)</haxe_doc>
		</WHITE>
		<GRAY public="1" get="inline" set="null" expr="0xFF808080" line="29" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF808080</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/808080.png)![color](https://www.colorhexa.com/808080.png)</haxe_doc>
		</GRAY>
		<BLACK public="1" get="inline" set="null" expr="0xFF000000" line="34" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF000000</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/000000.png)![color](https://www.colorhexa.com/000000.png)</haxe_doc>
		</BLACK>
		<GREEN public="1" get="inline" set="null" expr="0xFF00FF00" line="39" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF00FF00</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/00ff00.png)![color](https://www.colorhexa.com/00ff00.png)</haxe_doc>
		</GREEN>
		<YELLOW public="1" get="inline" set="null" expr="0xFFFFFF00" line="44" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFFFF00</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FFFF00.png)![color](https://www.colorhexa.com/FFFF00.png)</haxe_doc>
		</YELLOW>
		<ORANGE public="1" get="inline" set="null" expr="0xFFFFA500" line="49" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFFA500</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FFA500.png)![color](https://www.colorhexa.com/FFA500.png)</haxe_doc>
		</ORANGE>
		<RED public="1" get="inline" set="null" expr="0xFFFF0000" line="54" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFF0000</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FF0000.png)![color](https://www.colorhexa.com/FF0000.png)</haxe_doc>
		</RED>
		<PURPLE public="1" get="inline" set="null" expr="0xFF800080" line="59" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF800080</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/800080.png)![color](https://www.colorhexa.com/800080.png)</haxe_doc>
		</PURPLE>
		<BLUE public="1" get="inline" set="null" expr="0xFF0000FF" line="64" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF0000FF</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/0000ff.png)![color](https://www.colorhexa.com/0000ff.png)</haxe_doc>
		</BLUE>
		<BROWN public="1" get="inline" set="null" expr="0xFF8B4513" line="69" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF8B4513</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/8B4513.png)![color](https://www.colorhexa.com/8B4513.png)</haxe_doc>
		</BROWN>
		<PINK public="1" get="inline" set="null" expr="0xFFFFC0CB" line="74" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFFC0CB</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FFC0CB.png)![color](https://www.colorhexa.com/FFC0CB.png)</haxe_doc>
		</PINK>
		<MAGENTA public="1" get="inline" set="null" expr="0xFFFF00FF" line="79" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFF00FF</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FF00FF.png)![color](https://www.colorhexa.com/FF00FF.png)</haxe_doc>
		</MAGENTA>
		<CYAN public="1" get="inline" set="null" expr="0xFF00FFFF" line="84" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF00FFFF</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/00FFFF.png)![color](https://www.colorhexa.com/00FFFF.png)</haxe_doc>
		</CYAN>
		<SILVER public="1" get="inline" set="null" expr="0xC0C0C0" line="89" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xC0C0C0</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/C0C0C0.png)![color](https://www.colorhexa.com/C0C0C0.png)</haxe_doc>
		</SILVER>
		<GOLD public="1" get="inline" set="null" expr="0xFFFFD700" line="94" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFFD700</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FFD700.png)![color](https://www.colorhexa.com/FFD700.png)</haxe_doc>
		</GOLD>
		<OLIVE public="1" get="inline" set="null" expr="0xFF808000" line="99" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF808000</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/808000.png)![color](https://www.colorhexa.com/808000.png)</haxe_doc>
		</OLIVE>
		<MAROON public="1" get="inline" set="null" expr="0xFF800000" line="104" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF800000</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/800000.png)![color](https://www.colorhexa.com/800000.png)</haxe_doc>
		</MAROON>
		<NAVY public="1" get="inline" set="null" expr="0xFF000080" line="109" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF000080</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/000080.png)![color](https://www.colorhexa.com/000080.png)</haxe_doc>
		</NAVY>
		<TEAL public="1" get="inline" set="null" expr="0xFF008080" line="114" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF008080</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/008080.png)![color](https://www.colorhexa.com/008080.png)</haxe_doc>
		</TEAL>
		<FUCHSIA public="1" get="inline" set="null" expr="0xFFFF00FF" line="119" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFFFF00FF</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/FF00FF.png)![color](https://www.colorhexa.com/FF00FF.png)</haxe_doc>
		</FUCHSIA>
		<AQUA public="1" get="inline" set="null" expr="0xFF00FFFF" line="124" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF00FFFF</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/00FFFF.png)![color](https://www.colorhexa.com/00FFFF.png)</haxe_doc>
		</AQUA>
		<LIME public="1" get="inline" set="null" expr="0xFF32CD32" line="129" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF32CD32</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/32CD32.png)![color](https://www.colorhexa.com/32CD32.png)</haxe_doc>
		</LIME>
		<ROYAL_BLUE public="1" get="inline" set="null" expr="0xFF4169E1" line="134" static="1">
			<x path="vision.ds.Color"/>
			<meta><m n=":value"><e>0xFF4169E1</e></m></meta>
			<haxe_doc>![color](https://www.colorhexa.com/4169E1.png)![color](https://www.colorhexa.com/4169E1.png)</haxe_doc>
		</ROYAL_BLUE>
		<red public="1" get="accessor" set="accessor" static="1"><x path="Int"/></red>
		<blue public="1" get="accessor" set="accessor" static="1"><x path="Int"/></blue>
		<green public="1" get="accessor" set="accessor" static="1"><x path="Int"/></green>
		<alpha public="1" get="accessor" set="accessor" static="1"><x path="Int"/></alpha>
		<redFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redFloat>
		<blueFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueFloat>
		<greenFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenFloat>
		<alphaFloat public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaFloat>
		<cyan public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cyan>
		<magenta public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magenta>
		<yellow public="1" get="accessor" set="accessor" static="1"><x path="Float"/></yellow>
		<black public="1" get="accessor" set="accessor" static="1"><x path="Float"/></black>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="vision.ds.Color"/>
			<haxe_doc>The red, green and blue channels of this color as a 24 bit integer (from 0 to 0xFFFFFF, does not include alpha values)</haxe_doc>
		</rgb>
		<hue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The hue of the color in degrees (from 0 to 359)</haxe_doc>
		</hue>
		<saturation public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The saturation of the color (from 0 to 1)</haxe_doc>
		</saturation>
		<brightness public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The brightness (aka value) of the color (from 0 to 1)</haxe_doc>
		</brightness>
		<lightness public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The lightness of the color (from 0 to 1)</haxe_doc>
		</lightness>
		<COLOR_REGEX expr="~/^(0x|#)(([A-F0-9]{2}){3,4})$/" line="176" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^(0x|#)(([A-F0-9]{2}){3,4})$/</e></m></meta>
		</COLOR_REGEX>
		<fromInt public="1" get="inline" set="null" line="184" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Create a color from the least significant four bytes of an Int

		@param value Int with bytes in the format 0xAARRGGBB
		@return	The color as a Color</haxe_doc>
		</fromInt>
		<fromRGBA public="1" get="inline" set="null" line="197" static="1">
			<f a="Red:Green:Blue:?Alpha" v=":::255">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 255 }</e></m></meta>
			<haxe_doc>Generate a color from integer RGB values (0 to 255)

		@param Red	The red value of the color from 0 to 255
		@param Green	The green value of the color from 0 to 255
		@param Blue	The green value of the color from 0 to 255
		@param Alpha	How opaque the color should be, from 0 to 255
		@return The color as a Color</haxe_doc>
		</fromRGBA>
		<from8Bit public="1" get="inline" set="null" line="208" static="1">
			<f a="Value">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc><![CDATA[Generate a grayscale color from a single color channel value (0 to 255)

		@param Value	The channel value of the red, green & blue channels of the color
		@return The color as a Color]]></haxe_doc>
		</from8Bit>
		<fromRGBAFloat public="1" get="inline" set="null" line="222" static="1">
			<f a="Red:Green:Blue:?Alpha" v=":::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
			<haxe_doc>Generate a color from float RGB values (0 to 1)

		@param Red	The red value of the color from 0 to 1
		@param Green	The green value of the color from 0 to 1
		@param Blue	The green value of the color from 0 to 1
		@param Alpha	How opaque the color should be, from 0 to 1
		@return The color as a Color</haxe_doc>
		</fromRGBAFloat>
		<fromCMYK public="1" get="inline" set="null" line="237" static="1">
			<f a="Cyan:Magenta:Yellow:Black:?Alpha" v="::::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
			<haxe_doc>Generate a color from CMYK values (0 to 1)

		@param Cyan		The cyan value of the color from 0 to 1
		@param Magenta	The magenta value of the color from 0 to 1
		@param Yellow	The yellow value of the color from 0 to 1
		@param Black		The black value of the color from 0 to 1
		@param Alpha		How opaque the color should be, from 0 to 1
		@return The color as a Color</haxe_doc>
		</fromCMYK>
		<fromHSB public="1" set="method" line="251" static="1">
			<f a="Hue:Saturation:Brightness:?Alpha" v=":::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
			<haxe_doc>Generate a color from HSB (aka HSV) components.

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Brightness	(aka Value) A number between 0 and 1, indicating how bright the color should be.  0 is black, 1 is full bright.
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255.
		@return	The color as a Color</haxe_doc>
		</fromHSB>
		<fromHSL public="1" get="inline" set="null" line="265" static="1">
			<f a="Hue:Saturation:Lightness:?Alpha" v=":::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
			<haxe_doc>Generate a color from HSL components.

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Lightness	A number between 0 and 1, indicating the lightness of the color
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255.
		@return	The color as a Color</haxe_doc>
		</fromHSL>
		<fromString public="1" set="method" line="285" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Null"><x path="vision.ds.Color"/></x>
			</f>
			<haxe_doc><![CDATA[Parses a `String` and returns a `Color` or `null` if the `String` couldn't be parsed.

		Examples (input -> output in hex):

		- `0x00FF00`    -> `0xFF00FF00`
		- `0xAA4578C2`  -> `0xAA4578C2`
		- `#0000FF`     -> `0xFF0000FF`
		- `#3F000011`   -> `0x3F000011`
		- `GRAY`        -> `0xFF808080`
		- `blue`        -> `0xFF0000FF`

		@param	str 	The string to be parsed
		@return	A `Color` or `null` if the `String` couldn't be parsed]]></haxe_doc>
		</fromString>
		<getHSBColorWheel public="1" set="method" line="306" static="1">
			<f a="?Alpha" v="255">
				<x path="Int"/>
				<c path="Array"><x path="vision.ds.Color"/></c>
			</f>
			<meta><m n=":value"><e>{ Alpha : 255 }</e></m></meta>
			<haxe_doc>Get HSB color wheel values in an array which will be 360 elements in size

		@param	Alpha Alpha value for each color of the color wheel, between 0 (transparent) and 255 (opaque)
		@return	HSB color wheel as Array of Colors</haxe_doc>
		</getHSBColorWheel>
		<interpolate public="1" get="inline" set="null" line="318" static="1">
			<f a="Color1:Color2:?Factor" v="::0.5">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Factor : 0.5 }</e></m></meta>
			<haxe_doc>Get an interpolated color based on two different colors.

		@param 	Color1 The first color
		@param 	Color2 The second color
		@param 	Factor Value from 0 to 1 representing how much to shift Color1 toward Color2
		@return	The interpolated color</haxe_doc>
		</interpolate>
		<gradient public="1" set="method" line="336" static="1">
			<f a="Color1:Color2:Steps:?Ease">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<c path="Array"><x path="vision.ds.Color"/></c>
			</f>
			<haxe_doc>Create a gradient from one color to another

		@param Color1 The color to shift from
		@param Color2 The color to shift to
		@param Steps How many colors the gradient should have
		@param Ease An optional easing function, such as those provided in FlxEase
		@return An array of colors of length Steps, shifting from Color1 to Color2</haxe_doc>
		</gradient>
		<multiply public="1" get="inline" set="null" line="356" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Multiply the RGB and alpha channels of two Colors</haxe_doc>
		</multiply>
		<add public="1" get="inline" set="null" line="365" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Add the RGB and alpha channels of two Colors</haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="373" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Subtract the RGB and alpha channels of one Color from another</haxe_doc>
		</subtract>
		<divide public="1" get="inline" set="null" line="378" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<getComplementHarmony public="1" get="inline" set="null" line="388" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Returns a Complementary Color Harmony of this color.
		A complementary hue is one directly opposite the color given on the color wheel

		@return	The complimentary color</haxe_doc>
		</getComplementHarmony>
		<getAnalogousHarmony public="1" get="inline" set="null" line="399" static="1">
			<f a="this:?Threshold" v=":30">
				<x path="Int"/>
				<x path="Int"/>
				<t path="vision.ds.Harmony"/>
			</f>
			<meta><m n=":value"><e>{ Threshold : 30 }</e></m></meta>
			<haxe_doc>Returns an Analogous Color Harmony for the given color.
		An Analogous harmony are hues adjacent to each other on the color wheel

		@param	Threshold Control how adjacent the colors will be (default +- 30 degrees)
		@return 	Object containing 3 properties: original (the original color), warmer (the warmer analogous color) and colder (the colder analogous color)</haxe_doc>
		</getAnalogousHarmony>
		<getSplitComplementHarmony public="1" get="inline" set="null" line="413" static="1">
			<f a="this:?Threshold" v=":30">
				<x path="Int"/>
				<x path="Int"/>
				<t path="vision.ds.Harmony"/>
			</f>
			<meta><m n=":value"><e>{ Threshold : 30 }</e></m></meta>
			<haxe_doc>Returns an Split Complement Color Harmony for this color.
		A Split Complement harmony are the two hues on either side of the color's Complement

		@param	Threshold Control how adjacent the colors will be to the Complement (default +- 30 degrees)
		@return 	Object containing 3 properties: original (the original color), warmer (the warmer analogous color) and colder (the colder analogous color)</haxe_doc>
		</getSplitComplementHarmony>
		<getTriadicHarmony public="1" get="inline" set="null" line="427" static="1">
			<f a="this">
				<x path="Int"/>
				<t path="vision.ds.TriadicHarmony"/>
			</f>
			<haxe_doc>Returns a Triadic Color Harmony for this color. A Triadic harmony are 3 hues equidistant
		from each other on the color wheel.

		@return 	Object containing 3 properties: color1 (the original color), color2 and color3 (the equidistant colors)</haxe_doc>
		</getTriadicHarmony>
		<to24Bit public="1" get="inline" set="null" line="439" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Return a 24 bit version of this color (i.e. without an alpha value)

		@return A 24 bit version of this color</haxe_doc>
		</to24Bit>
		<toHexString public="1" get="inline" set="null" line="450" static="1">
			<f a="this:?Alpha:?Prefix" v=":true:true">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ Prefix : true, Alpha : true }</e></m></meta>
			<haxe_doc>Return a String representation of the color in the format

		@param Alpha Whether to include the alpha value in the hes string
		@param Prefix Whether to include "0x" prefix at start of string
		@return	A string of length 10 in the format 0xAARRGGBB</haxe_doc>
		</toHexString>
		<toWebString public="1" get="inline" set="null" line="460" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Return a String representation of the color in the format #RRGGBB

		@return	A string of length 7 in the format #RRGGBB</haxe_doc>
		</toWebString>
		<darken public="1" set="method" line="470" static="1">
			<f a="this:?Factor" v=":0.2">
				<x path="Int"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Factor : 0.2 }</e></m></meta>
			<haxe_doc>Get a darkened version of this color

		@param	Factor Value from 0 to 1 of how much to progress toward black.
		@return 	A darkened version of this color</haxe_doc>
		</darken>
		<lighten public="1" get="inline" set="null" line="483" static="1">
			<f a="this:?Factor" v=":0.2">
				<x path="Int"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Factor : 0.2 }</e></m></meta>
			<haxe_doc>Get a lightened version of this color

		@param	Factor Value from 0 to 1 of how much to progress toward white.
		@return 	A lightened version of this color</haxe_doc>
		</lighten>
		<invert public="1" get="inline" set="null" line="495" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Get the inversion of this color

		@return The inversion of this color</haxe_doc>
		</invert>
		<setRGBA public="1" get="inline" set="null" line="511" static="1">
			<f a="this:Red:Green:Blue:?Alpha" v="::::255">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 255 }</e></m></meta>
			<haxe_doc>Set RGB values as integers (0 to 255)

		@param Red	The red value of the color from 0 to 255
		@param Green	The green value of the color from 0 to 255
		@param Blue	The green value of the color from 0 to 255
		@param Alpha	How opaque the color should be, from 0 to 255
		@return This color</haxe_doc>
		</setRGBA>
		<setRGBAFloat public="1" get="inline" set="null" line="528" static="1">
			<f a="this:Red:Green:Blue:?Alpha" v="::::1">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
			<haxe_doc>Set RGB values as floats (0 to 1)

		@param Red	The red value of the color from 0 to 1
		@param Green	The green value of the color from 0 to 1
		@param Blue	The green value of the color from 0 to 1
		@param Alpha	How opaque the color should be, from 0 to 1
		@return This color</haxe_doc>
		</setRGBAFloat>
		<setCMYK public="1" get="inline" set="null" line="546" static="1">
			<f a="this:Cyan:Magenta:Yellow:Black:?Alpha" v=":::::1">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":value"><e>{ Alpha : 1 }</e></m></meta>
			<haxe_doc>Set CMYK values as floats (0 to 1)

		@param Cyan		The cyan value of the color from 0 to 1
		@param Magenta	The magenta value of the color from 0 to 1
		@param Yellow	The yellow value of the color from 0 to 1
		@param Black		The black value of the color from 0 to 1
		@param Alpha		How opaque the color should be, from 0 to 1
		@return This color</haxe_doc>
		</setCMYK>
		<setHSB public="1" get="inline" set="null" line="563" static="1">
			<f a="this:Hue:Saturation:Brightness:Alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Set HSB (aka HSV) components

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Brightness	(aka Value) A number between 0 and 1, indicating how bright the color should be.  0 is black, 1 is full bright.
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255.
		@return	This color</haxe_doc>
		</setHSB>
		<setHSL public="1" get="inline" set="null" line="578" static="1">
			<f a="this:Hue:Saturation:Lightness:Alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Set HSL components.

		@param	Hue			A number between 0 and 360, indicating position on a color strip or wheel.
		@param	Saturation	A number between 0 and 1, indicating how colorful or gray the color should be.  0 is gray, 1 is vibrant.
		@param	Lightness	A number between 0 and 1, indicating the lightness of the color
		@param	Alpha		How opaque the color should be, either between 0 and 1 or 0 and 255
		@return	This color</haxe_doc>
		</setHSL>
		<setHSChromaMatch get="inline" set="null" line="587" static="1">
			<f a="this:Hue:Saturation:Chroma:Match:Alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="vision.ds.Color"/>
			</f>
			<haxe_doc>Private utility function to perform common operations between setHSB and setHSL</haxe_doc>
		</setHSChromaMatch>
		<grayscale public="1" get="inline" set="null" line="611" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></grayscale>
		<_new public="1" get="inline" set="null" line="616" static="1">
			<f a="?value" v="0">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<getThis get="inline" set="null" line="620" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></getThis>
		<validate get="inline" set="null" line="628" static="1"><f a="this">
	<x path="Int"/>
	<x path="Void"/>
</f></validate>
		<get_red get="inline" set="null" line="634" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_red>
		<get_green get="inline" set="null" line="638" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_green>
		<get_blue get="inline" set="null" line="642" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_blue>
		<get_alpha get="inline" set="null" line="646" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_alpha>
		<get_redFloat get="inline" set="null" line="650" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_redFloat>
		<get_greenFloat get="inline" set="null" line="654" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_greenFloat>
		<get_blueFloat get="inline" set="null" line="658" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_blueFloat>
		<get_alphaFloat get="inline" set="null" line="662" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_alphaFloat>
		<set_red get="inline" set="null" line="666" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_red>
		<set_green get="inline" set="null" line="673" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_green>
		<set_blue get="inline" set="null" line="680" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_blue>
		<set_alpha get="inline" set="null" line="687" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_alpha>
		<set_redFloat get="inline" set="null" line="694" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redFloat>
		<set_greenFloat get="inline" set="null" line="699" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenFloat>
		<set_blueFloat get="inline" set="null" line="704" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueFloat>
		<set_alphaFloat get="inline" set="null" line="709" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaFloat>
		<get_cyan get="inline" set="null" line="714" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_cyan>
		<get_magenta get="inline" set="null" line="718" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_magenta>
		<get_yellow get="inline" set="null" line="722" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_yellow>
		<get_black get="inline" set="null" line="726" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_black>
		<set_cyan get="inline" set="null" line="730" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cyan>
		<set_magenta get="inline" set="null" line="735" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magenta>
		<set_yellow get="inline" set="null" line="740" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_yellow>
		<set_black get="inline" set="null" line="745" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_black>
		<get_hue set="method" line="750" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_hue>
		<get_brightness get="inline" set="null" line="760" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_brightness>
		<get_saturation get="inline" set="null" line="764" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_saturation>
		<get_lightness get="inline" set="null" line="768" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></get_lightness>
		<set_hue get="inline" set="null" line="772" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_hue>
		<set_saturation get="inline" set="null" line="777" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_saturation>
		<set_brightness get="inline" set="null" line="782" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_brightness>
		<set_lightness get="inline" set="null" line="787" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_lightness>
		<set_rgb get="inline" set="null" line="792" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="vision.ds.Color"/>
	<x path="vision.ds.Color"/>
</f></set_rgb>
		<get_rgb get="inline" set="null" line="798" static="1"><f a="this">
	<x path="Int"/>
	<x path="vision.ds.Color"/>
</f></get_rgb>
		<maxColor get="inline" set="null" line="802" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></maxColor>
		<minColor get="inline" set="null" line="806" static="1"><f a="this">
	<x path="Int"/>
	<x path="Float"/>
</f></minColor>
		<boundChannel get="inline" set="null" line="810" static="1"><f a="this:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></boundChannel>
		<toString public="1" set="method" line="814" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<toInt public="1" set="method" line="822" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<color_greater_than_color get="inline" set="null" line="831" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</color_greater_than_color>
		<color_greater_than_int get="inline" set="null" line="836" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</color_greater_than_int>
		<int_greater_than_color get="inline" set="null" line="841" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</int_greater_than_color>
		<color_greater_than_float get="inline" set="null" line="846" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</color_greater_than_float>
		<float_greater_than_color get="inline" set="null" line="851" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</float_greater_than_color>
		<color_greater_than_equal_color get="inline" set="null" line="856" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</color_greater_than_equal_color>
		<color_greater_than_equal_int get="inline" set="null" line="861" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</color_greater_than_equal_int>
		<int_greater_than_equal_color get="inline" set="null" line="866" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</int_greater_than_equal_color>
		<color_greater_than_equal_float get="inline" set="null" line="871" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</color_greater_than_equal_float>
		<float_greater_than_equal_color get="inline" set="null" line="876" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</float_greater_than_equal_color>
		<color_less_than_color get="inline" set="null" line="881" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</color_less_than_color>
		<color_less_than_int get="inline" set="null" line="886" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</color_less_than_int>
		<int_less_than_color get="inline" set="null" line="891" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</int_less_than_color>
		<color_less_than_float get="inline" set="null" line="896" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</color_less_than_float>
		<float_less_than_color get="inline" set="null" line="901" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</float_less_than_color>
		<color_less_than_equal_color get="inline" set="null" line="906" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</color_less_than_equal_color>
		<color_less_than_equal_int get="inline" set="null" line="911" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</color_less_than_equal_int>
		<int_less_than_equal_color get="inline" set="null" line="916" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</int_less_than_equal_color>
		<color_less_than_equal_float get="inline" set="null" line="921" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</color_less_than_equal_float>
		<float_less_than_equal_color get="inline" set="null" line="926" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</float_less_than_equal_color>
		<color_equal_color get="inline" set="null" line="931" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</color_equal_color>
		<color_equal_int get="inline" set="null" line="936" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</color_equal_int>
		<int_equal_color get="inline" set="null" line="941" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</int_equal_color>
		<color_equal_float get="inline" set="null" line="946" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</color_equal_float>
		<float_equal_color get="inline" set="null" line="951" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</float_equal_color>
		<color_not_equal_color get="inline" set="null" line="956" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</color_not_equal_color>
		<color_not_equal_int get="inline" set="null" line="961" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</color_not_equal_int>
		<int_not_equal_color get="inline" set="null" line="966" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</int_not_equal_color>
		<color_not_equal_float get="inline" set="null" line="971" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</color_not_equal_float>
		<float_not_equal_color get="inline" set="null" line="976" static="1">
			<f a="lhs:rhs">
				<x path="Float"/>
				<x path="vision.ds.Color"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</float_not_equal_color>
		<color_bitwise_and_color get="inline" set="null" line="981" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</color_bitwise_and_color>
		<color_bitwise_and_int get="inline" set="null" line="986" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</color_bitwise_and_int>
		<int_bitwise_and_color get="inline" set="null" line="991" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</int_bitwise_and_color>
		<color_bitwise_or_color get="inline" set="null" line="996" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</color_bitwise_or_color>
		<color_bitwise_or_int get="inline" set="null" line="1001" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</color_bitwise_or_int>
		<int_bitwise_or_color get="inline" set="null" line="1006" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</int_bitwise_or_color>
		<color_bitwise_xor_color get="inline" set="null" line="1011" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</color_bitwise_xor_color>
		<color_bitwise_xor_int get="inline" set="null" line="1016" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</color_bitwise_xor_int>
		<int_bitwise_xor_color get="inline" set="null" line="1021" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</int_bitwise_xor_color>
		<color_bitwise_left_shift_color get="inline" set="null" line="1026" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</color_bitwise_left_shift_color>
		<color_bitwise_left_shift_int get="inline" set="null" line="1031" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</color_bitwise_left_shift_int>
		<int_bitwise_left_shift_color get="inline" set="null" line="1036" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</int_bitwise_left_shift_color>
		<color_bitwise_right_shift_color get="inline" set="null" line="1041" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</color_bitwise_right_shift_color>
		<color_bitwise_right_shift_int get="inline" set="null" line="1046" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</color_bitwise_right_shift_int>
		<int_bitwise_right_shift_color get="inline" set="null" line="1051" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</int_bitwise_right_shift_color>
		<color_bitwise_unsigned_right_shift_color get="inline" set="null" line="1056" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</color_bitwise_unsigned_right_shift_color>
		<color_bitwise_unsigned_right_shift_int get="inline" set="null" line="1061" static="1">
			<f a="lhs:rhs">
				<x path="vision.ds.Color"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</color_bitwise_unsigned_right_shift_int>
		<int_bitwise_unsigned_right_shift_color get="inline" set="null" line="1066" static="1">
			<f a="lhs:rhs">
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="vision.ds.Color"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</int_bitwise_unsigned_right_shift_color>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="vision.ds.Harmony" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Color.hx" module="vision.ds.Color"><a>
	<warmer><x path="vision.ds.Color"/></warmer>
	<original><x path="vision.ds.Color"/></original>
	<colder><x path="vision.ds.Color"/></colder>
</a></typedef>
	<typedef path="vision.ds.TriadicHarmony" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Color.hx" module="vision.ds.Color"><a>
	<color3><x path="vision.ds.Color"/></color3>
	<color2><x path="vision.ds.Color"/></color2>
	<color1><x path="vision.ds.Color"/></color1>
</a></typedef>
	<abstract path="vision.ds.Image" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Image.hx">
		<from>
			<icast field="fromLimeImage"><c path="lime.graphics.Image"/></icast>
			<icast field="from2DArray"><c path="Array"><c path="Array"><x path="vision.ds.Color"/></c></c></icast>
		</from>
		<this><x path="vision.ds.ByteArray"/></this>
		<to><icast field="toLimeImage"><c path="lime.graphics.Image"/></icast></to>
		<haxe_doc>Represents a 2D image, as a matrix of Colors.</haxe_doc>
		<impl><class path="vision.ds._Image.Image_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Image.hx" private="1" module="vision.ds.Image" final="1">
	<OFFSET expr="4" line="24" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
		<haxe_doc>* the first 4 bytes represent width.</haxe_doc>
	</OFFSET>
	<underlying public="1" get="accessor" set="null" static="1">
		<x path="vision.ds.ByteArray"/>
		<haxe_doc>Returns the underlying type of this abstract.</haxe_doc>
	</underlying>
	<get_underlying get="inline" set="null" line="31" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="vision.ds.ByteArray"/>
</f></get_underlying>
	<width public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The width of the image.</haxe_doc>
	</width>
	<get_width get="inline" set="null" line="46" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
</f></get_width>
	<height public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The height of the image.</haxe_doc>
	</height>
	<get_height get="inline" set="null" line="62" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
</f></get_height>
	<_new public="1" get="inline" set="null" line="77" static="1">
		<f a="width:height:?color" v="::0x00000000">
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Image"/>
		</f>
		<meta>
			<m n=":value"><e>{ color : 0x00000000 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new image of the given size. Onces created, the image cannot be resized.

		@param width The width of the image.
		@param height The height of the image.
		@param color The color to fill the image with. if unspecified, the image is transparent.</haxe_doc>
	</_new>
	<getColorFromStartingBytePos get="inline" set="null" line="90" static="1"><f a="this:position">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
	<x path="vision.ds.Color"/>
</f></getColorFromStartingBytePos>
	<setColorFromStartingBytePos get="inline" set="null" line="95" static="1"><f a="this:position:c">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
	<x path="vision.ds.Color"/>
	<x path="vision.ds.Color"/>
</f></setColorFromStartingBytePos>
	<getPixel public="1" get="inline" set="null" line="114" static="1">
		<f a="this:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Gets the color of the pixel at the given coordinates.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the coordinates are out of bounds.
		@return The color of the pixel at the given coordinates.</haxe_doc>
	</getPixel>
	<getSafePixel public="1" get="inline" set="null" line="135" static="1">
		<f a="this:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Gets the color of the pixel at the given coordinates.

		Coordinates outside the bounds of the image are allowed.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@return The color of the pixel at the given coordinates.</haxe_doc>
	</getSafePixel>
	<getUnsafePixel get="inline" set="null" line="143" static="1">
		<f a="this:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<meta><m n=":allow"><e>vision</e></m></meta>
	</getUnsafePixel>
	<getFloatingPixel public="1" get="inline" set="null" line="191" static="1">
		<f a="this:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc><![CDATA[Gets the color of the pixel at the given coordinates.
		These coordinates can also be of type `Float`, in which case
		the value returned should be an interpolation of the surrounding, physical pixels:

		### How Does This Work?

		Lets say we want the pixel at `(0.5, 0.5)`:
		```
		(0,0)   (1,0)                                     
														 
			  ·     < Y (0.5)                      
														 
		(0,1)   (1,1)                                     
			  ^                                           
			X (0.5)                                        
		```

		First, we're going to calculate the actual fraction - the means, extracting the numbers after the decimal point:

			final xFraction = x - Std.int(x);
			final yFraction = y - Std.int(y);


		Then, we just multiply each of the surrounding pixel's value by it's distance from the initial X value (using `xFraction` and `yFraction`):

			final pixelsBeforeYMultiplier = 1 - yFraction, pixelsAfterYMultiplier = yFraction;
			final pixelsBeforeXMultiplier = 1 - xFraction, pixelsAfterXMultiplier = xFraction;
			final bottomLayer = pixelsBeforeYMultiplier * (pixelsBeforeXMultiplier * getPixel(Std.int(x), Std.int(y)) + pixelsAfterXMultiplier * getPixel(Std.int(x) + 1, Std.int(y)));
			final topLayer = pixelsAfterYMultiplier * (pixelsBeforeXMultiplier * getPixel(Std.int(x), Std.int(y) + 1) + pixelsAfterXMultiplier * getPixel(Std.int(x) + 1, Std.int(y) + 1));


		And add the two layers to get the result:


			var finalColor:Color = Std.int(bottomLayer + topLayer);


		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the coordinates are out of bounds.
		@return The color of the pixel at the given coordinates.]]></haxe_doc>
	</getFloatingPixel>
	<setPixel public="1" get="inline" set="null" line="213" static="1">
		<f a="this:x:y:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the color of the pixel at the given coordinates.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.
		@param color The color to set the pixel to.

		@throws OutOfBounds if the pixel is out of bounds.</haxe_doc>
	</setPixel>
	<hasPixel public="1" get="inline" set="null" line="232" static="1">
		<f a="this:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Checks if the given coordinates are within the bounds of the image.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@return True if the coordinates are within the bounds of the image.</haxe_doc>
	</hasPixel>
	<copyPixelFrom public="1" get="inline" set="null" line="246" static="1">
		<f a="this:image:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="vision.ds.Image"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Copies a pixel from the given image to this image.

		@param image The image to copy the pixel from.
		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the given coordinates are outside the bounds of one or both of the images
		@return The color of the pixel at the given coordinates.</haxe_doc>
	</copyPixelFrom>
	<copyPixelTo public="1" get="inline" set="null" line="262" static="1">
		<f a="this:image:x:y">
			<x path="vision.ds.ByteArray"/>
			<x path="vision.ds.Image"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
		</f>
		<haxe_doc>Copies a pixel from the given image to this image.

		@param image The image to copy the pixel to.
		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.

		@throws OutOfBounds if the given coordinates are outside the bounds of one or both of the images
		@return The color of the pixel at the given coordinates.</haxe_doc>
	</copyPixelTo>
	<paintPixel public="1" get="inline" set="null" line="278" static="1">
		<f a="this:x:y:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the color of a pixel, but doesn't completely overwrite the pixel:

		- if the color of the new pixel is the same as the old pixel, the old pixel is kept.
		- if the alpha of the new pixel is 0, the old pixel is kept.
		- if the alpha of the new pixel is 255, the new pixel is kept.
		- if the alpha of the new pixel is between 0 and 255, the new pixel is blended with the old pixel.

		@param x The x coordinate of the pixel.
		@param y The y coordinate of the pixel.
		@param color The color to set the pixel to. pay attention to the alpha value.</haxe_doc>
	</paintPixel>
	<fillRect public="1" get="inline" set="null" line="298" static="1">
		<f a="this:x:y:width:height:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets a rectangle of pixels to the given color, essentially filling it with the given color.

		@param rect The rectangle to fill: The fill starts at (x, y) and extends to (x + width, y + height), not including the endpoints.
		@param color The color to fill that rectangular portion with.</haxe_doc>
	</fillRect>
	<drawRect public="1" get="inline" set="null" line="314" static="1">
		<f a="this:x:y:width:height:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Draws a rectangular outline of the given color.

		This function is a shortcut for just doing repeated calls to drawLine.

		@param rect The rectangle to draw the outline of.
		@param color The color to draw the outline with.</haxe_doc>
	</drawRect>
	<getImagePortion public="1" get="inline" set="null" line="329" static="1">
		<f a="this:rect">
			<x path="vision.ds.ByteArray"/>
			<c path="vision.ds.Rectangle"/>
			<x path="vision.ds.Image"/>
		</f>
		<haxe_doc>Returns a portion of the image, specified by a rectangle.

		@param rect The rectangle specifying the portion of the image to return.

		@throws OutOfBounds if the portion of the image to get is outside the bounds of the original image.
		@return A new image containing the specified portion of the original image.</haxe_doc>
	</getImagePortion>
	<setImagePortion public="1" get="inline" set="null" line="347" static="1">
		<f a="this:rect:image">
			<x path="vision.ds.ByteArray"/>
			<c path="vision.ds.Rectangle"/>
			<x path="vision.ds.Image"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets a portion of the image, specified by a rectangle, to another image.

		@param rect The rectangle specifying the portion of the image to set.
		@param image The image to set the portion of the image to.

		@throws OutOfBounds if the portion of the image to set is outside the bounds of the original image.</haxe_doc>
	</setImagePortion>
	<drawLine public="1" get="inline" set="null" line="362" static="1">
		<f a="this:x1:y1:x2:y2:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Draws a line from (x1, y1) to (x2, y2) using the given color.</haxe_doc>
	</drawLine>
	<drawRay2D public="1" get="inline" set="null" line="397" static="1">
		<f a="this:line:color">
			<x path="vision.ds.ByteArray"/>
			<c path="vision.ds.Ray2D"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Draws an intine line specified by a Ray2D object.

		**Notice** - The (0, 0) point is **not** the same is `image.getPixel(0, 0)`,
		but rather the bottom left corner of the image - `image.getPixel(0, image.height - 1)`.

		This "vertical flip" is done to match the way the ray is draw on the cartesian plane.

		@param line The line to draw.
		@param color The color to draw the line with.

		@see Ray2D</haxe_doc>
	</drawRay2D>
	<drawLine2D public="1" get="inline" set="null" line="436" static="1">
		<f a="this:line:color">
			<x path="vision.ds.ByteArray"/>
			<c path="vision.ds.Line2D"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Draws a `Line2D` object using the given color.

		If the line segment is not completely within the image, 
		it doesn't throw an error, but just draws the part of the 
		line segment that is within the image.

		@param line The line segment to draw.
		@param color The color to draw the line segment with.

		@see Line2D</haxe_doc>
	</drawLine2D>
	<drawQuadraticBezier public="1" get="inline" set="null" line="475" static="1">
		<f a="this:line:control:color:?accuracy" v="::::1000">
			<x path="vision.ds.ByteArray"/>
			<c path="vision.ds.Line2D"/>
			<x path="vision.ds.IntPoint2D"/>
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ accuracy : 1000 }</e></m></meta>
		<haxe_doc>Draws a curved line specified by a line and one control point.

		This method draws a quadratic Bezier curve.

		@param line The line to draw.
		@param control The control point of the curve.
		@param color The color to draw the line with.
		@param accuracy The number of iterations to use when drawing the curve. the higher the number, the more iterations are used, and the more accurate the curve is. for example, accuracy of 100 will draw the curve with 100 iterations, and will draw 100 points on the curve. **default is 1000**

		@see Line2D</haxe_doc>
	</drawQuadraticBezier>
	<drawCubicBezier public="1" get="inline" set="null" line="514" static="1">
		<f a="this:line:control1:control2:color:?accuracy" v=":::::1000">
			<x path="vision.ds.ByteArray"/>
			<c path="vision.ds.Line2D"/>
			<x path="vision.ds.IntPoint2D"/>
			<x path="vision.ds.IntPoint2D"/>
			<x path="vision.ds.Color"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ accuracy : 1000 }</e></m></meta>
		<haxe_doc>Draws a curved line specified by a line and two control points.

		This method draws a cubic Bezier curve.

		@param line The line to draw.
		@param control1 The first control point of the curve.
		@param control2 The second control point of the curve.
		@param color The color to draw the curve with.
		@param accuracy The number of iterations to use when drawing the curve. the higher the number, the more iterations are used, and the more accurate the curve is. for example, accuracy of 100 will draw the curve with 100 iterations, and will draw 100 points on the curve. **default is 1000**

		@see Line2D</haxe_doc>
	</drawCubicBezier>
	<fillCircle public="1" get="inline" set="null" line="554" static="1">
		<f a="this:X:Y:r:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Fills a circle with the given color:

		 - The center of the circle is at (X, Y)
		 - The radius of the circle is r
		 - Anti-aliasing will not be used.

		@param x The x coordinate of the center of the circle.
		@param y The y coordinate of the center of the circle.
		@param r The radius of the circle.
		@param color The color to draw the circle with.</haxe_doc>
	</fillCircle>
	<drawCircle public="1" get="inline" set="null" line="597" static="1">
		<f a="this:X:Y:r:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Draws a circle of the given color:

		 - The center of the circle is at (X, Y)
		 - The radius of the circle is r
		 - Anti-aliasing will not be used.

		@param x The x coordinate of the center of the circle.
		@param y The y coordinate of the center of the circle.
		@param r The radius of the circle.
		@param color The color to draw the circle with.</haxe_doc>
	</drawCircle>
	<drawEllipse public="1" get="inline" set="null" line="627" static="1">
		<f a="this:centerX:centerY:radiusX:radiusY:color">
			<x path="vision.ds.ByteArray"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Draws an ellipse of the given color:

		 - The center of the ellipse is at (X, Y)
		 - The radius of the ellipse is r
		 - Anti-aliasing will not be used.

		@param centerX The x coordinate of the center of the ellipse.
		@param centerY The y coordinate of the center of the ellipse.
		@param radiusX The x radius of the ellipse.
		@param radiusY The y radius of the ellipse.
		@param color The color to draw the ellipse with.</haxe_doc>
	</drawEllipse>
	<fillColorRecursive public="1" set="method" line="710" static="1">
		<f a="this:position:color">
			<x path="vision.ds.ByteArray"/>
			<x path="vision.ds.IntPoint2D"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Recursively fills a section of the image. the section filled has to match
		`position`'s color.

		when the fill encounters a color that is not `position`'s color, it
		will stop filling in that direction.

		**Warning** - this function is recursive. This function is not slow, but can trigger
		a stack overflow if used on large images. This is only here so an implementation will be available.

		@param position The position to start filling at. you can use a Point2D or IntPoint2D.
		@param color The color to fill with.</haxe_doc>
	</fillColorRecursive>
	<fillColor public="1" set="method" line="739" static="1">
		<f a="this:position:color">
			<x path="vision.ds.ByteArray"/>
			<x path="vision.ds.IntPoint2D"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Fills a section of the image. the section filled has to match
		`position`'s color.

		This uses the BFS `Breadth First Search` algorithm

		@param position The position to start filling at. you can use a Point2D or IntPoint2D.
		@param color The color to fill with.</haxe_doc>
	</fillColor>
	<fillUntilColor public="1" set="method" line="776" static="1">
		<f a="this:position:color:borderColor">
			<x path="vision.ds.ByteArray"/>
			<x path="vision.ds.IntPoint2D"/>
			<x path="vision.ds.Color"/>
			<x path="vision.ds.Color"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Fills a section of the image. the section filled has to be bordered by pixels of color `borderColor`.

		This uses the BFS `Breadth First Search` algorithm

		@param position The position to start filling at. you can use a Point2D or IntPoint2D.
		@param color The color to fill with.
		@param borderColor The color upon which to stop filling.</haxe_doc>
	</fillUntilColor>
	<clone public="1" set="method" line="816" static="1">
		<f a="this">
			<x path="vision.ds.ByteArray"/>
			<x path="vision.ds.Image"/>
		</f>
		<haxe_doc>Clones this image.

		Useful if you want to operate on `this` image, without modifying it:

			var blurred = Vision.gaussianBlur(image.clone());</haxe_doc>
	</clone>
	<mirror public="1" set="method" line="824" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="vision.ds.Image"/>
</f></mirror>
	<flip public="1" set="method" line="832" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<x path="vision.ds.Image"/>
</f></flip>
	<resize public="1" get="inline" set="null" line="840" static="1"><f a="this:newWidth:newHeight:?algorithm">
	<x path="vision.ds.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="vision.ds.ImageResizeAlgorithm"/>
	<x path="vision.ds.Image"/>
</f></resize>
	<toString public="1" set="method" line="873" static="1">
		<f a="this:?special" v=":true">
			<x path="vision.ds.ByteArray"/>
			<x path="Bool"/>
			<c path="String"/>
		</f>
		<meta><m n=":value"><e>{ special : true }</e></m></meta>
		<haxe_doc>Gets the image as a string.

		@param special When using the `Console.hx` haxelib, images can be printed to the console
		with color. set this to false if you don't want this to happen. Set to `true` by default.</haxe_doc>
	</toString>
	<forEachPixel public="1" get="inline" set="null" line="889" static="1"><f a="this:callback">
	<x path="vision.ds.ByteArray"/>
	<f a="x:y:color">
		<x path="Int"/>
		<x path="Int"/>
		<x path="vision.ds.Color"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></forEachPixel>
	<iterator public="1" get="inline" set="null" line="897" static="1"><f a="this">
	<x path="vision.ds.ByteArray"/>
	<t path="Iterator"><c path="vision.ds.Pixel"/></t>
</f></iterator>
	<toLimeImage public="1" set="method" line="941" static="1">
		<f a="this">
			<x path="vision.ds.ByteArray"/>
			<c path="lime.graphics.Image"/>
		</f>
		<meta><m n=":to"/></meta>
	</toLimeImage>
	<fromLimeImage public="1" set="method" line="945" static="1">
		<f a="image">
			<c path="lime.graphics.Image"/>
			<x path="vision.ds.Image"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromLimeImage>
	<from2DArray public="1" set="method" line="969" static="1">
		<f a="array">
			<c path="Array"><c path="Array"><x path="vision.ds.Color"/></c></c>
			<x path="vision.ds.Image"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2DArray>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="vision.ds._Image.PixelIterator" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Image.hx" private="1" module="vision.ds.Image">
		<i expr="4">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</i>
		<img><x path="vision.ds.Image"/></img>
		<next public="1" get="inline" set="null" line="995"><f a=""><c path="vision.ds.Pixel"/></f></next>
		<hasNext public="1" get="inline" set="null" line="1003"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" get="inline" set="null" line="991"><f a="img">
	<x path="vision.ds.Image"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="vision.ds.ImageFormat" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ImageFormat.hx">
		<this><x path="Int"/></this>
		<haxe_doc>The image format to encode in.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="vision.ds._ImageFormat.ImageFormat_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ImageFormat.hx" private="1" module="vision.ds.ImageFormat" extern="1" final="1">
	<PNG public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="vision.ds.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>PNG encoding</haxe_doc>
	</PNG>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="vision.ds._ImageFormat.ImageFormat_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ImageFormat.hx" private="1" module="vision.ds.ImageFormat" extern="1" final="1">
		<PNG public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="vision.ds.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>PNG encoding</haxe_doc>
		</PNG>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="vision.ds.ImageResizeAlgorithm" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ImageResizeAlgorithm.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>The resize algorithm to use when changing the size of images.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="vision.ds._ImageResizeAlgorithm.ImageResizeAlgorithm_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ImageResizeAlgorithm.hx" private="1" module="vision.ds.ImageResizeAlgorithm" extern="1" final="1">
	<NearestNeighbor public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="vision.ds.ImageResizeAlgorithm"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Nearest-Neighbor resizing. Works best for pixel art/resizing by powers of 2.</haxe_doc>
	</NearestNeighbor>
	<BilinearInterpolation public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="vision.ds.ImageResizeAlgorithm"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Bilinear Interpolation. The most reliable method for general resizing purposes. yields the "least lossless" result.</haxe_doc>
	</BilinearInterpolation>
	<BicubicInterpolation public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="vision.ds.ImageResizeAlgorithm"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Unimplemented.</haxe_doc>
	</BicubicInterpolation>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="vision.ds._ImageResizeAlgorithm.ImageResizeAlgorithm_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/ImageResizeAlgorithm.hx" private="1" module="vision.ds.ImageResizeAlgorithm" extern="1" final="1">
		<NearestNeighbor public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="vision.ds.ImageResizeAlgorithm"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Nearest-Neighbor resizing. Works best for pixel art/resizing by powers of 2.</haxe_doc>
		</NearestNeighbor>
		<BilinearInterpolation public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="vision.ds.ImageResizeAlgorithm"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Bilinear Interpolation. The most reliable method for general resizing purposes. yields the "least lossless" result.</haxe_doc>
		</BilinearInterpolation>
		<BicubicInterpolation public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="vision.ds.ImageResizeAlgorithm"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Unimplemented.</haxe_doc>
		</BicubicInterpolation>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="vision.ds._IntPoint2D.Impl" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/IntPoint2D.hx" private="1" module="vision.ds.IntPoint2D"><x path="haxe.Int64"/></typedef>
	<abstract path="vision.ds.IntPoint2D" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/IntPoint2D.hx">
		<from><icast field="fromPoint2D"><c path="vision.ds.Point2D"/></icast></from>
		<this><t path="vision.ds._IntPoint2D.Impl"/></this>
		<to><icast field="toPoint2D"><c path="vision.ds.Point2D"/></icast></to>
		<haxe_doc>A 2D point represented by two, 32-bit integers.</haxe_doc>
		<impl><class path="vision.ds._IntPoint2D.IntPoint2D_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/IntPoint2D.hx" private="1" module="vision.ds.IntPoint2D" final="1">
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>The `x` position of this `IntPoint2D`</haxe_doc>
	</x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>The `y` position of this `IntPoint2D`</haxe_doc>
	</y>
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a="x:y">
			<x path="Int"/>
			<x path="Int"/>
			<x path="vision.ds.IntPoint2D"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_y get="inline" set="null" line="46" static="1"><f a="this">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
</f></get_y>
	<get_x get="inline" set="null" line="54" static="1"><f a="this">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
</f></get_x>
	<set_y get="inline" set="null" line="62" static="1"><f a="this:y">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_y>
	<set_x get="inline" set="null" line="71" static="1"><f a="this:x">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_x>
	<toPoint2D public="1" get="inline" set="null" line="80" static="1">
		<f a="this">
			<t path="vision.ds._IntPoint2D.Impl"/>
			<c path="vision.ds.Point2D"/>
		</f>
		<meta><m n=":to"/></meta>
	</toPoint2D>
	<fromPoint2D public="1" get="inline" set="null" line="84" static="1">
		<f a="p">
			<c path="vision.ds.Point2D"/>
			<x path="vision.ds.IntPoint2D"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromPoint2D>
	<toString public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<t path="vision.ds._IntPoint2D.Impl"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a `String` representations of this `IntPoint2D`.</haxe_doc>
	</toString>
	<copy public="1" get="inline" set="null" line="98" static="1">
		<f a="this">
			<t path="vision.ds._IntPoint2D.Impl"/>
			<x path="vision.ds.IntPoint2D"/>
		</f>
		<haxe_doc>Returns a new `IntPoint2D` instance, similar to this one.</haxe_doc>
	</copy>
</class></impl>
	</abstract>
	<class path="vision.ds._IntPoint2D.IntPoint2D_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/IntPoint2D.hx" private="1" module="vision.ds.IntPoint2D" final="1">
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>The `x` position of this `IntPoint2D`</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>The `y` position of this `IntPoint2D`</haxe_doc>
		</y>
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.IntPoint2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_y get="inline" set="null" line="46" static="1"><f a="this">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
</f></get_y>
		<get_x get="inline" set="null" line="54" static="1"><f a="this">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
</f></get_x>
		<set_y get="inline" set="null" line="62" static="1"><f a="this:y">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_y>
		<set_x get="inline" set="null" line="71" static="1"><f a="this:x">
	<t path="vision.ds._IntPoint2D.Impl"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_x>
		<toPoint2D public="1" get="inline" set="null" line="80" static="1">
			<f a="this">
				<t path="vision.ds._IntPoint2D.Impl"/>
				<c path="vision.ds.Point2D"/>
			</f>
			<meta><m n=":to"/></meta>
		</toPoint2D>
		<fromPoint2D public="1" get="inline" set="null" line="84" static="1">
			<f a="p">
				<c path="vision.ds.Point2D"/>
				<x path="vision.ds.IntPoint2D"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromPoint2D>
		<toString public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<t path="vision.ds._IntPoint2D.Impl"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `String` representations of this `IntPoint2D`.</haxe_doc>
		</toString>
		<copy public="1" get="inline" set="null" line="98" static="1">
			<f a="this">
				<t path="vision.ds._IntPoint2D.Impl"/>
				<x path="vision.ds.IntPoint2D"/>
			</f>
			<haxe_doc>Returns a new `IntPoint2D` instance, similar to this one.</haxe_doc>
		</copy>
	</class>
	<class path="vision.ds.Line2D" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Line2D.hx">
		<fromRay2D public="1" get="inline" set="null" line="75" static="1">
			<f a="ray">
				<c path="vision.ds.Ray2D"/>
				<c path="vision.ds.Line2D"/>
			</f>
			<haxe_doc><![CDATA[Takes an instance of `Ray2D`, and returns a new `Line2D` with the same direction.

		The `start` & `end` point may not be consistent. Set them manually if you need to.]]></haxe_doc>
		</fromRay2D>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The distance between `start` and `end`</haxe_doc>
		</length>
		<slope public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The slope of the line stretched from `start` to `end`</haxe_doc>
		</slope>
		<degrees public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The degrees of the line stretched from `start` to `end`</haxe_doc>
		</degrees>
		<radians public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The radians of the line stretched from `start` to `end`</haxe_doc>
		</radians>
		<start public="1" set="accessor" expr="{ x : 0, y : 0 }">
			<c path="vision.ds.Point2D"/>
			<meta><m n=":value"><e>{ x : 0, y : 0 }</e></m></meta>
			<haxe_doc>The starting point of this `Line2D`.</haxe_doc>
		</start>
		<end public="1" set="accessor" expr="{ x : 0, y : 0 }">
			<c path="vision.ds.Point2D"/>
			<meta><m n=":value"><e>{ x : 0, y : 0 }</e></m></meta>
			<haxe_doc>The ending point of this `Line2D`.</haxe_doc>
		</end>
		<middle public="1" get="accessor" set="accessor">
			<c path="vision.ds.Point2D"/>
			<haxe_doc>The middle point of this `Line2D`</haxe_doc>
		</middle>
		<get_length get="inline" set="null" line="58"><f a=""><x path="Float"/></f></get_length>
		<toString public="1" get="inline" set="null" line="66">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Returns a `String` representation of this `Line2D`.</haxe_doc>
		</toString>
		<toRay2D public="1" get="inline" set="null" line="86">
			<f a=""><c path="vision.ds.Ray2D"/></f>
			<haxe_doc>Constructs a new `Ray2D` using this `Line2D`'s start point and slope.</haxe_doc>
		</toRay2D>
		<set_start get="inline" set="null" line="90"><f a="value">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
</f></set_start>
		<set_end get="inline" set="null" line="97"><f a="value">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
</f></set_end>
		<get_middle get="inline" set="null" line="104"><f a=""><c path="vision.ds.Point2D"/></f></get_middle>
		<set_middle get="inline" set="null" line="108"><f a="value">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
</f></set_middle>
		<new public="1" get="inline" set="null" line="48">
			<f a="start:end">
				<c path="vision.ds.Point2D"/>
				<c path="vision.ds.Point2D"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Constructs a new `Line2D` from two `Point2D`s</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Represents a 2-dimensional line, by `start` & `end` point]]></haxe_doc>
	</class>
	<typedef path="vision.ds.Matrix" params="T" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Matrix.hx">
		<x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><c path="vision.ds.Matrix.T"/></x></x>
		<haxe_doc><![CDATA[Simply a `typedef` for a 2D vector.

	```haxe
	Matrix<T> = Vector<Vector<T>>
	```]]></haxe_doc>
	</typedef>
	<class path="vision.ds.Pixel" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Pixel.hx">
		<x public="1">
			<x path="Int"/>
			<haxe_doc>The row on which the pixel is on</haxe_doc>
		</x>
		<y public="1">
			<x path="Int"/>
			<haxe_doc>The column on which the pixel is on</haxe_doc>
		</y>
		<color public="1">
			<x path="vision.ds.Color"/>
			<haxe_doc>The color of the pixel, in `ARGB` format.</haxe_doc>
		</color>
		<new public="1" get="inline" set="null" line="29">
			<f a="x:y:color">
				<x path="Int"/>
				<x path="Int"/>
				<x path="vision.ds.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param x The row on which the pixel is on 
		@param y The column on which the pixel is on 
		@param color The color of the pixel, in `ARGB` format.</haxe_doc>
		</new>
		<haxe_doc>A structure useful for representing a pixel in an image.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="vision.ds.Point2D" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Point2D.hx">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The x-coordinate of the point.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The y-coordinate of the point.</haxe_doc>
		</y>
		<toString public="1" get="inline" set="null" line="31">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representations of this `Point2D`.</haxe_doc>
		</toString>
		<copy public="1" get="inline" set="null" line="38">
			<f a=""><c path="vision.ds.Point2D"/></f>
			<haxe_doc>Returns a new `Point2D` instance, similar to this one.</haxe_doc>
		</copy>
		<new public="1" get="inline" set="null" line="23">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Initializes a new instance of the Point2D class with the specified x and y coordinates.

		you can construct a Point2D object by using the following syntax too:
		```haxe
		var point:Point2D = {x: 10, y: 20};
		```</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="vision.ds.Ray2D" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Ray2D.hx">
		<from2Points public="1" get="inline" set="null" line="66" static="1">
			<f a="point1:point2">
				<c path="vision.ds.Point2D"/>
				<c path="vision.ds.Point2D"/>
				<c path="vision.ds.Ray2D"/>
			</f>
			<haxe_doc>Constructs a `Ray2D` from 2 `Point2D`s</haxe_doc>
		</from2Points>
		<point public="1">
			<c path="vision.ds.Point2D"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>The `Point2D` used in the constructor</haxe_doc>
		</point>
		<slope public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>The direction of this `Ray2D`, in a rise-over-run format.</haxe_doc>
		</slope>
		<degrees public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>The direction of this `Ray2D`, in degrees</haxe_doc>
		</degrees>
		<radians public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>The direction of this `Ray2D`, in radians</haxe_doc>
		</radians>
		<yIntercept public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The `y` position in which `x = 0`</haxe_doc>
		</yIntercept>
		<xIntercept public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The `x` position in which `y = 0`</haxe_doc>
		</xIntercept>
		<getPointAtX public="1" get="inline" set="null" line="74">
			<f a="x">
				<x path="Float"/>
				<c path="vision.ds.Point2D"/>
			</f>
			<haxe_doc>Gets the point on this `Ray2D` at `(x, y)` when `x` is given.</haxe_doc>
		</getPointAtX>
		<getPointAtY public="1" get="inline" set="null" line="81">
			<f a="y">
				<x path="Float"/>
				<c path="vision.ds.Point2D"/>
			</f>
			<haxe_doc>Gets the point on this `Ray2D` at `(x, y)` when `y` is given.</haxe_doc>
		</getPointAtY>
		<intersect public="1" get="inline" set="null" line="93">
			<f a="ray">
				<c path="vision.ds.Ray2D"/>
				<c path="vision.ds.Point2D"/>
			</f>
			<haxe_doc>Gets the intersection point between `this` and `ray`.

		If `this` and `ray` don't intersect, `null` is returned.

		@param ray The second ray to intersect with
		@return A `Point2D` instance, `null` if `this` and `ray` don't intersect</haxe_doc>
		</intersect>
		<set_slope get="inline" set="null" line="100"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_slope>
		<set_degrees get="inline" set="null" line="106"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<set_radians get="inline" set="null" line="112"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_radians>
		<get_yIntercept get="inline" set="null" line="118"><f a=""><x path="Float"/></f></get_yIntercept>
		<get_xIntercept get="inline" set="null" line="126"><f a=""><x path="Float"/></f></get_xIntercept>
		<new public="1" get="inline" set="null" line="46">
			<f a="point:?m:?degrees:?radians">
				<c path="vision.ds.Point2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param point a point on the line
		@param m the slope of the line, optional - you can pass the angle/radians instead, and set this to null
		@param angle the angle of the line, optional - you can pass the slope/radians instead, and set this to null
		@param radians the radians of the line, optional - you can pass the slope/angle instead, and not set this</haxe_doc>
		</new>
		<haxe_doc>Represents a 2-dimensional ray on the cartesian coordinate system</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.ds.Rectangle" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/ds/Rectangle.hx">
		<x public="1">
			<x path="Int"/>
			<haxe_doc>The `x` position of this `Rectangle`</haxe_doc>
		</x>
		<y public="1">
			<x path="Int"/>
			<haxe_doc>The `y` position of this `Rectangle`</haxe_doc>
		</y>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>The `width` of this `Rectangle`</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>The `height` of this `Rectangle`</haxe_doc>
		</height>
		<new public="1" set="method" line="4">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":inheritDoc"/>
			</meta>
			<haxe_doc>@param height The `height` of this `Rectangle`
@param width The `width` of this `Rectangle`
@param y The `y` position of this `Rectangle`
@param x The `x` position of this `Rectangle`</haxe_doc>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="vision.exceptions.VisionException" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/exceptions/VisionException.hx">
		<extends path="haxe.Exception"/>
		<new public="1" set="method" line="22"><f a="message:type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A type of error, thrown by components of the `Vision` library</haxe_doc>
	</class>
	<class path="vision.exceptions.ImageLoadingFailed" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/exceptions/ImageLoadingFailed.hx">
		<extends path="vision.exceptions.VisionException"/>
		<new public="1" set="method" line="6"><f a="type:reason">
	<x path="vision.ds.ImageFormat"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.exceptions.ImageSavingFailed" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/exceptions/ImageSavingFailed.hx">
		<extends path="vision.exceptions.VisionException"/>
		<new public="1" set="method" line="6"><f a="type:reason">
	<x path="vision.ds.ImageFormat"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.exceptions.OutOfBounds" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/exceptions/OutOfBounds.hx">
		<extends path="vision.exceptions.VisionException"/>
		<new public="1" set="method" line="8"><f a="image:position">
	<x path="vision.ds.Image"/>
	<c path="vision.ds.Point2D"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.exceptions.Unimplemented" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/exceptions/Unimplemented.hx">
		<extends path="vision.exceptions.VisionException"/>
		<new public="1" set="method" line="4"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.tools.ImageTools" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/tools/ImageTools.hx">
		<defaultResizeAlgorithm public="1" expr="BilinearInterpolation" line="38" static="1">
			<x path="vision.ds.ImageResizeAlgorithm"/>
			<meta><m n=":value"><e>BilinearInterpolation</e></m></meta>
			<haxe_doc>* The default algorithm to use when resizing an image by "brute force" (setting its `width`/`height` when `vision_allow_resize` is defined)</haxe_doc>
		</defaultResizeAlgorithm>
		<loadFromFile public="1" set="method" line="58" static="1">
			<f a="?image:path:onComplete">
				<x path="vision.ds.Image"/>
				<c path="String"/>
				<f a="">
					<x path="vision.ds.Image"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Gets an image from a file. 

		the given path can be an absolute path or a relative path. a URL is valid too.  

		**Note: On `sys` targets, this function requires the `format` library, and only supports PNG.**

		To install:  
		  
		`haxelib install format`

		@param image optional, if you don't want to create a new image instance (usage: `image.loadFromFile("path/to/image.png")`)
		@param path the path to the image file. on js, it can only be a relative path/a URL

		@returns the image object.
		@throws LibraryRequired Thrown when used on `sys` targets without installing & including `format`
		@throws ImageLoadingFailed Thrown when trying to load a corrupted file.]]></haxe_doc>
		</loadFromFile>
		<saveToFile public="1" set="method" line="146" static="1">
			<f a="image:pathWithFileName:?saveFormat" v="::PNG">
				<x path="vision.ds.Image"/>
				<c path="String"/>
				<x path="vision.ds.ImageFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ saveFormat : PNG }</e></m></meta>
		</saveToFile>
		<addToScreen public="1" set="method" line="192" static="1">
			<f a="image:x:y:?units">
				<x path="vision.ds.Image"/>
				<x path="Int"/>
				<x path="Int"/>
				<a>
					<zIndex>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</zIndex>
					<yUnits>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</yUnits>
					<xUnits>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</xUnits>
				</a>
				<x path="vision.ds.Image"/>
			</f>
			<haxe_doc>Adds an `Image` to the screen.

		**Currently, this function only works on the web**, and
		it uses an absolutely positioned canvas element.

		#### Notice - JS Only

		if you want to use this function to add an image to a web page,
		and also want to use different units than pixels, you can use the `units` parameter.

			addToScreen(image, 50, 20, {xUnits: "vw", yUnits: "vh", zIndex: 1});

		@param image the image to add.
		@param x the x position of the image.
		@param y the y position of the image.

		@returns the image object.</haxe_doc>
		</addToScreen>
		<getNeighborsOfPixel public="1" get="inline" set="null" line="225" static="1"><f a="image:x:y:kernalSize">
	<x path="vision.ds.Image"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="vision.ds.Array2D"><x path="vision.ds.Color"/></c>
</f></getNeighborsOfPixel>
		<getNeighborsOfPixelIter public="1" get="inline" set="null" line="234" static="1">
			<f a="image:x:y:kernalSize:?circular" v="::::false">
				<x path="vision.ds.Image"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="Iterator"><x path="vision.ds.Color"/></t>
			</f>
			<meta><m n=":value"><e>{ circular : false }</e></m></meta>
		</getNeighborsOfPixelIter>
		<grayscalePixel public="1" get="inline" set="null" line="238" static="1"><f a="pixel">
	<x path="vision.ds.Color"/>
	<x path="vision.ds.Color"/>
</f></grayscalePixel>
		<fromLimeImage public="1" set="method" line="322" static="1"><f a="limeImage">
	<c path="lime.graphics.Image"/>
	<x path="vision.ds.Image"/>
</f></fromLimeImage>
		<toLimeImage public="1" set="method" line="332" static="1"><f a="image">
	<x path="vision.ds.Image"/>
	<c path="lime.graphics.Image"/>
</f></toLimeImage>
		<haxe_doc>A class used to provide extra utilities to the `Image` class.

	Those properties are not included because they are not needed for the basic functionality of that object.

	to use those utilities, use this class at the top of you file:

		using vision.tools.ImageTools;</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.tools._ImageTools.NeighborsIterator" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/tools/ImageTools.hx" private="1" module="vision.tools.ImageTools">
		<roundedDown><x path="Int"/></roundedDown>
		<image><x path="vision.ds.Image"/></image>
		<x><x path="Int"/></x>
		<y><x path="Int"/></y>
		<X><x path="Int"/></X>
		<Y><x path="Int"/></Y>
		<circular><x path="Bool"/></circular>
		<next public="1" get="inline" set="null" line="406"><f a=""><x path="vision.ds.Color"/></f></next>
		<hasNext public="1" get="inline" set="null" line="417"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" get="inline" set="null" line="396">
			<f a="image:x:y:kernalSize:?circular" v="::::false">
				<x path="vision.ds.Image"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ circular : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="vision.tools.MathTools" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/tools/MathTools.hx">
		<PI public="1" get="accessor" set="null" static="1"><x path="Float"/></PI>
		<PI_OVER_2 public="1" get="accessor" set="null" static="1"><x path="Float"/></PI_OVER_2>
		<NEGATIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></POSITIVE_INFINITY>
		<NaN public="1" get="accessor" set="null" static="1"><x path="Float"/></NaN>
		<distanceFromRayToPoint2D public="1" get="inline" set="null" line="36" static="1"><f a="ray:point">
	<c path="vision.ds.Ray2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></distanceFromRayToPoint2D>
		<intersectionBetweenRay2Ds public="1" get="inline" set="null" line="40" static="1"><f a="ray:ray2">
	<c path="vision.ds.Ray2D"/>
	<c path="vision.ds.Ray2D"/>
	<c path="vision.ds.Point2D"/>
</f></intersectionBetweenRay2Ds>
		<findPointAtDistanceUsingX public="1" get="inline" set="null" line="82" static="1">
			<f a="ray:startXPos:distance:?goPositive" v=":::true">
				<c path="vision.ds.Ray2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="vision.ds.Point2D"/>
			</f>
			<meta><m n=":value"><e>{ goPositive : true }</e></m></meta>
			<haxe_doc>* Gets the point on `ray` , which is `distance` points away
	 * from `startXPos`.
	 * 
	 * In order to avoid returning two points (since
	 * any point on the ray has 2 points with the exact same distance from it),
	 * you have the `goPositive` value.
	 * 
	 * 
	 * @param startXPos The `x` position to start from.
	 * @param distance The distance from `start` to the resulting point.
	 * @param goPositive Whether or not the resulting point is in front/behind `start`. `true` means in front, `false` means behind.</haxe_doc>
		</findPointAtDistanceUsingX>
		<findPointAtDistanceUsingY public="1" get="inline" set="null" line="106" static="1">
			<f a="ray:startYPos:distance:?goPositive" v=":::true">
				<c path="vision.ds.Ray2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="vision.ds.Point2D"/>
			</f>
			<meta><m n=":value"><e>{ goPositive : true }</e></m></meta>
			<haxe_doc>* Gets the point on `ray` , which is `distance` points away
	 * from `startYPos`.
	 * 
	 * In order to avoid returning two points (since
	 * any point on the ray has 2 points with the exact same distance from it),
	 * you have the `goPositive` value.
	 * 
	 * 
	 * @param startYPos The `y` position to start from.
	 * @param distance The distance from `start` to the resulting point.
	 * @param goPositive Whether or not the resulting point is in front/behind `start`. `true` means in front, `false` means behind.</haxe_doc>
		</findPointAtDistanceUsingY>
		<distanceFromLineToPoint2D public="1" get="inline" set="null" line="121" static="1"><f a="line:point">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></distanceFromLineToPoint2D>
		<distanceBetweenLines2D public="1" get="inline" set="null" line="131" static="1"><f a="line1:line2">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Line2D"/>
	<x path="Float"/>
</f></distanceBetweenLines2D>
		<radiansFromLineToPoint2D public="1" get="inline" set="null" line="144" static="1"><f a="line:point">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></radiansFromLineToPoint2D>
		<intersectionBetweenLine2Ds public="1" get="inline" set="null" line="148" static="1"><f a="line1:line2">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Point2D"/>
</f></intersectionBetweenLine2Ds>
		<mirrorInsideRectangle public="1" get="inline" set="null" line="174" static="1"><f a="line:rect">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Rectangle"/>
	<c path="vision.ds.Line2D"/>
</f></mirrorInsideRectangle>
		<flipInsideRectangle public="1" get="inline" set="null" line="183" static="1"><f a="line:rect">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Rectangle"/>
	<c path="vision.ds.Line2D"/>
</f></flipInsideRectangle>
		<invertInsideRectangle public="1" get="inline" set="null" line="192" static="1"><f a="line:rect">
	<c path="vision.ds.Line2D"/>
	<c path="vision.ds.Rectangle"/>
	<c path="vision.ds.Line2D"/>
</f></invertInsideRectangle>
		<distanceFromPointToRay2D public="1" get="inline" set="null" line="209" static="1"><f a="point:line">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Ray2D"/>
	<x path="Float"/>
</f></distanceFromPointToRay2D>
		<distanceFromPointToLine2D public="1" set="method" line="222" static="1"><f a="point:line">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Line2D"/>
	<x path="Float"/>
</f></distanceFromPointToLine2D>
		<radiansFromPointToLine2D public="1" get="inline" set="null" line="241" static="1"><f a="point:line">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Line2D"/>
	<x path="Float"/>
</f></radiansFromPointToLine2D>
		<radiansFromPointToPoint2D public="1" get="inline" set="null" line="247" static="1"><f a="point1:point2">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></radiansFromPointToPoint2D>
		<degreesFromPointToPoint2D public="1" get="inline" set="null" line="253" static="1"><f a="point1:point2">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></degreesFromPointToPoint2D>
		<slopeFromPointToPoint2D public="1" get="inline" set="null" line="257" static="1"><f a="point1:point2">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></slopeFromPointToPoint2D>
		<distanceBetweenPoints public="1" get="inline" set="null" line="262" static="1"><f a="point1:point2">
	<c path="vision.ds.Point2D"/>
	<c path="vision.ds.Point2D"/>
	<x path="Float"/>
</f></distanceBetweenPoints>
		<wrapInt public="1" get="inline" set="null" line="277" static="1">
			<f a="value:min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Ensures that the value is between min and max, by wrapping the value around
		when it is outside of the range.</haxe_doc>
		</wrapInt>
		<wrapFloat public="1" get="inline" set="null" line="290" static="1">
			<f a="value:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Ensures that the value is between min and max, by wrapping the value around
		when it is outside of the range.</haxe_doc>
		</wrapFloat>
		<boundInt public="1" set="method" line="302" static="1">
			<f a="value:min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Ensures that the value is between min and max, by bounding the value when it is outside of the range.</haxe_doc>
		</boundInt>
		<boundFloat public="1" set="method" line="309" static="1">
			<f a="value:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Ensures that the value is between min and max, by bounding the value when it is outside of the range.</haxe_doc>
		</boundFloat>
		<isPositive public="1" params="T" get="inline" set="null" line="316" static="1">
			<f a="number">
				<c path="isPositive.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if `number` is positive, `false` if negative</haxe_doc>
		</isPositive>
		<flatten public="1" params="T" get="inline" set="null" line="325" static="1">
			<f a="array">
				<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc><![CDATA[* Takes a 2D array and flattens it to a regular, 1D array.
	 * @param array
	 * @return Array<T>]]></haxe_doc>
			<overloads><flatten public="1" params="T" get="inline" set="null" line="337">
	<f a="matrix">
		<t path="vision.ds.Matrix"><c path="flatten.T"/></t>
		<x path="haxe.ds.Vector"><c path="flatten.T"/></x>
	</f>
	<haxe_doc><![CDATA[* Takes a Matrix and flattens it into a Vector.
	 * @param matrix
	 * @return Vector<T>]]></haxe_doc>
</flatten></overloads>
		</flatten>
		<raise public="1" params="T" get="inline" set="null" line="350" static="1">
			<f a="array:delimiter">
				<c path="Array"><c path="raise.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="raise.T"/></c></c>
			</f>
			<haxe_doc><![CDATA[* Takes a 1D array and turns it into a 2D array, while splitting into arrays every `delimiter` indexes
	 * @param array
	 * @param delimiter
	 * @return Array<T>]]></haxe_doc>
			<overloads><raise public="1" params="T" get="inline" set="null" line="365">
	<f a="vector:delimiter">
		<x path="haxe.ds.Vector"><c path="raise.T"/></x>
		<x path="Int"/>
		<t path="vision.ds.Matrix"><c path="raise.T"/></t>
	</f>
	<haxe_doc><![CDATA[* Takes a Vector and turns it into a Matrix, while splitting into vectors every `delimiter` indexes
	 * @param vector
	 * @param delimiter
	 * @return Array<T>]]></haxe_doc>
</raise></overloads>
		</raise>
		<slopeToDegrees public="1" get="inline" set="null" line="380" static="1"><f a="slope">
	<x path="Float"/>
	<x path="Float"/>
</f></slopeToDegrees>
		<slopeToRadians public="1" get="inline" set="null" line="384" static="1"><f a="slope">
	<x path="Float"/>
	<x path="Float"/>
</f></slopeToRadians>
		<degreesToSlope public="1" get="inline" set="null" line="388" static="1"><f a="degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></degreesToSlope>
		<degreesToRadians public="1" get="inline" set="null" line="392" static="1"><f a="degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></degreesToRadians>
		<radiansToDegrees public="1" get="inline" set="null" line="396" static="1"><f a="radians">
	<x path="Float"/>
	<x path="Float"/>
</f></radiansToDegrees>
		<radiansToSlope public="1" get="inline" set="null" line="400" static="1"><f a="radians">
	<x path="Float"/>
	<x path="Float"/>
</f></radiansToSlope>
		<cotan public="1" get="inline" set="null" line="404" static="1"><f a="radians">
	<x path="Float"/>
	<x path="Float"/>
</f></cotan>
		<cosec public="1" get="inline" set="null" line="408" static="1"><f a="radians">
	<x path="Float"/>
	<x path="Float"/>
</f></cosec>
		<sec public="1" get="inline" set="null" line="412" static="1"><f a="radians">
	<x path="Float"/>
	<x path="Float"/>
</f></sec>
		<truncate public="1" set="method" line="416" static="1"><f a="num:numbersAfterDecimal">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
</f></truncate>
		<minFloat public="1" get="inline" set="null" line="421" static="1">
			<f a="values">
				<x path="haxe.Rest"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<overloads><minFloat public="1" get="inline" set="null" line="430"><f a="values">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></minFloat></overloads>
		</minFloat>
		<min public="1" get="inline" set="null" line="439" static="1">
			<f a="values">
				<x path="haxe.Rest"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<overloads><min public="1" get="inline" set="null" line="448"><f a="values">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
</f></min></overloads>
		</min>
		<maxFloat public="1" get="inline" set="null" line="457" static="1">
			<f a="values">
				<x path="haxe.Rest"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<overloads><maxFloat public="1" get="inline" set="null" line="466"><f a="values">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></maxFloat></overloads>
		</maxFloat>
		<max public="1" get="inline" set="null" line="475" static="1">
			<f a="values">
				<x path="haxe.Rest"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<overloads><max public="1" get="inline" set="null" line="484"><f a="values">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
</f></max></overloads>
		</max>
		<isBetweenRanges public="1" set="method" line="493" static="1"><f a="value:ranges">
	<x path="Float"/>
	<x path="haxe.Rest"><a>
	<start><x path="Float"/></start>
	<end><x path="Float"/></end>
</a></x>
	<x path="Bool"/>
</f></isBetweenRanges>
		<average public="1" get="inline" set="null" line="508" static="1">
			<f a="values">
				<x path="haxe.Rest"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<overloads><average public="1" params="T:Uint:Int64:Float" get="inline" set="null" line="516"><f a="values">
	<c path="Array"><c path="average.T"/></c>
	<x path="Float"/>
</f></average></overloads>
		</average>
		<median public="1" params="T:Uint:Int64" get="inline" set="null" line="527" static="1">
			<f a="values">
				<x path="haxe.Rest"><c path="median.T"/></x>
				<c path="median.T"/>
			</f>
			<haxe_doc>* Gets the median of the given values. For large arrays, Radix sort is used to boost performance (1000 elements or above)</haxe_doc>
			<overloads>
				<median public="1" get="inline" set="null" line="560">
					<f a="values">
						<c path="Array"><x path="Float"/></c>
						<x path="Float"/>
					</f>
					<haxe_doc>* Gets the median of the given values.</haxe_doc>
				</median>
				<median public="1" params="T:UInt:Int64" get="inline" set="null" line="548">
					<f a="values">
						<c path="Array"><c path="median.T"/></c>
						<c path="median.T"/>
					</f>
					<haxe_doc>* Gets the median of the given values. For large arrays, Radix sort is used to boost performance (1000 elements or above)</haxe_doc>
				</median>
				<median public="1" get="inline" set="null" line="539">
					<f a="values">
						<x path="haxe.Rest"><x path="Float"/></x>
						<x path="Float"/>
					</f>
					<haxe_doc>* Gets the median of the given values.</haxe_doc>
				</median>
			</overloads>
		</median>
		<isInt public="1" get="inline" set="null" line="566" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></isInt>
		<clamp public="1" get="inline" set="null" line="570" static="1"><f a="value:mi:ma">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<get_NEGATIVE_INFINITY get="inline" set="null" line="579" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_NEGATIVE_INFINITY>
		<get_POSITIVE_INFINITY get="inline" set="null" line="580" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_POSITIVE_INFINITY>
		<get_NaN get="inline" set="null" line="581" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_NaN>
		<get_PI_OVER_2 get="inline" set="null" line="582" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_PI_OVER_2>
		<get_PI get="inline" set="null" line="583" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_PI>
		<abs public="1" get="inline" set="null" line="586" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" get="inline" set="null" line="589" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" get="inline" set="null" line="592" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" get="inline" set="null" line="595" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" get="inline" set="null" line="598" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" get="inline" set="null" line="601" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" get="inline" set="null" line="604" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<exp public="1" get="inline" set="null" line="607" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<floor public="1" get="inline" set="null" line="610" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" get="inline" set="null" line="613" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<pow public="1" get="inline" set="null" line="616" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" get="inline" set="null" line="619" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" get="inline" set="null" line="622" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" get="inline" set="null" line="625" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" get="inline" set="null" line="628" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" get="inline" set="null" line="631" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<ffloor public="1" get="inline" set="null" line="634" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="637" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="640" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" get="inline" set="null" line="643" static="1"><f a="f">
	<x path="Float"/>
	<x path="Bool"/>
</f></isFinite>
		<isNaN public="1" get="inline" set="null" line="646" static="1"><f a="f">
	<x path="Float"/>
	<x path="Bool"/>
</f></isNaN>
		<haxe_doc>A class consisting of a **b u n c h** of static methods for manipulating values,
	calculating distances, intersections, etc.

	This class is fully compatible with haxe's `Math` class. That means you don't have to use
	both at the same time.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="vision.tools.Number" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/tools/MathTools.hx" module="vision.tools.MathTools">
		<from>
			<icast><x path="Float"/></icast>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast><x path="Int"/></icast>
			<icast><x path="UInt"/></icast>
		</to>
		<impl><class path="vision.tools._MathTools.Number_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/tools/MathTools.hx" private="1" module="vision.tools.MathTools" extern="1" final="1"/></impl>
	</abstract>
	<class path="vision.tools._MathTools.Number_Impl_" params="" file="/home/nanjizal/haxe/haxelib/vision/1,1,0/src/vision/tools/MathTools.hx" private="1" module="vision.tools.MathTools" extern="1" final="1"/>
</haxe>