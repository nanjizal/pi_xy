// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__TriPixelOld_TriPixelOld_Fields_
#include <pi_xy/algo/_TriPixelOld/TriPixelOld_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5dfb5a19b5dac31e_15_fillTriUnsafe5,"pi_xy.algo._TriPixelOld.TriPixelOld_Fields_","fillTriUnsafe5",0xbfda270f,"pi_xy.algo._TriPixelOld.TriPixelOld_Fields_.fillTriUnsafe5","pi_xy/algo/TriPixelOld.hx",15,0x9b70dbc6)
HX_LOCAL_STACK_FRAME(_hx_pos_5dfb5a19b5dac31e_172_fillTriUnsafe6,"pi_xy.algo._TriPixelOld.TriPixelOld_Fields_","fillTriUnsafe6",0xbfda2710,"pi_xy.algo._TriPixelOld.TriPixelOld_Fields_.fillTriUnsafe6","pi_xy/algo/TriPixelOld.hx",172,0x9b70dbc6)
namespace pi_xy{
namespace algo{
namespace _TriPixelOld{

void TriPixelOld_Fields__obj::__construct() { }

Dynamic TriPixelOld_Fields__obj::__CreateEmpty() { return new TriPixelOld_Fields__obj; }

void *TriPixelOld_Fields__obj::_hx_vtable = 0;

Dynamic TriPixelOld_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriPixelOld_Fields__obj > _hx_result = new TriPixelOld_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TriPixelOld_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06f866ec;
}

 ::pi_xy::algo::HitTri TriPixelOld_Fields__obj::fillTriUnsafe5( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  __o_hasHit,::hx::Null< bool >  __o_hasUndo){
            		bool hasHit = __o_hasHit.Default(false);
            		bool hasUndo = __o_hasUndo.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5dfb5a19b5dac31e_15_fillTriUnsafe5)
HXLINE(  16)		bool transparent = pixelImage->transparent;
HXLINE(  17)		pixelImage->transparent = true;
HXLINE(  18)		int a = ((color >> 24) & 255);
HXLINE(  19)		int r = ((color >> 16) & 255);
HXLINE(  20)		int g = ((color >> 8) & 255);
HXLINE(  21)		int b = (color & 255);
HXLINE(  22)		Float s0 = ((ay * cx) - (ax * cy));
HXLINE(  23)		Float sx = (cy - ay);
HXLINE(  24)		Float sy = (ax - cx);
HXLINE(  25)		Float t0 = ((ax * by) - (ay * bx));
HXLINE(  26)		Float tx = (ay - by);
HXLINE(  27)		Float ty = (bx - ax);
HXLINE(  28)		Float A = ((((-(by) * cx) + (ay * (-(bx) + cx))) + (ax * (by - cy))) + (bx * cy));
HXLINE(  29)		 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  29)		if ((ax > bx)) {
HXLINE(  29)			if ((ax > cx)) {
HXLINE(  29)				int min;
HXDLIN(  29)				if ((bx > cx)) {
HXLINE(  29)					min = ::Math_obj::floor(cx);
            				}
            				else {
HXLINE(  29)					min = ::Math_obj::floor(bx);
            				}
HXDLIN(  29)				int ii_min = min;
HXDLIN(  29)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  29)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXLINE(  29)				int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  29)				int ii_max1 = ::Math_obj::ceil(cx);
HXDLIN(  29)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXLINE(  29)			if ((bx > cx)) {
HXLINE(  29)				int min1;
HXDLIN(  29)				if ((ax > cx)) {
HXLINE(  29)					min1 = ::Math_obj::floor(cx);
            				}
            				else {
HXLINE(  29)					min1 = ::Math_obj::ceil(ax);
            				}
HXDLIN(  29)				int ii_min2 = min1;
HXDLIN(  29)				int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  29)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXLINE(  29)				int ii_min3 = ::Math_obj::floor(ax);
HXDLIN(  29)				int ii_max3 = ::Math_obj::ceil(cx);
HXDLIN(  29)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXLINE(  30)		 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  30)		if ((ay > by)) {
HXLINE(  30)			if ((ay > cy)) {
HXLINE(  30)				int min2;
HXDLIN(  30)				if ((by > cy)) {
HXLINE(  30)					min2 = ::Math_obj::floor(cy);
            				}
            				else {
HXLINE(  30)					min2 = ::Math_obj::floor(by);
            				}
HXDLIN(  30)				int ii_min4 = min2;
HXDLIN(  30)				int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN(  30)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            			}
            			else {
HXLINE(  30)				int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  30)				int ii_max5 = ::Math_obj::ceil(cy);
HXDLIN(  30)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            			}
            		}
            		else {
HXLINE(  30)			if ((by > cy)) {
HXLINE(  30)				int min3;
HXDLIN(  30)				if ((ay > cy)) {
HXLINE(  30)					min3 = ::Math_obj::floor(cy);
            				}
            				else {
HXLINE(  30)					min3 = ::Math_obj::ceil(ay);
            				}
HXDLIN(  30)				int ii_min6 = min3;
HXDLIN(  30)				int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  30)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            			}
            			else {
HXLINE(  30)				int ii_min7 = ::Math_obj::floor(ay);
HXDLIN(  30)				int ii_max7 = ::Math_obj::ceil(cy);
HXDLIN(  30)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            			}
            		}
HXLINE(  31)		 ::pi_xy::ImageStruct undoImage = null();
HXLINE(  32)		if (hasUndo) {
HXLINE(  33)			int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  33)			int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  33)			 ::Dynamic imageType = null();
HXDLIN(  33)			 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  33)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  33)			::Dynamic undoImage1;
HXDLIN(  33)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE(  33)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  33)					 ::iterMagic::BytesImg b1 = byt;
HXDLIN(  33)					{
HXLINE(  33)						b1->width = width;
HXDLIN(  33)						b1->height = height;
HXDLIN(  33)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)						b1->data = ::haxe::io::Bytes_obj::alloc((b1->length * 4));
HXDLIN(  33)						{
HXLINE(  33)							int len = b1->length;
HXDLIN(  33)							int w = 0;
HXDLIN(  33)							{
HXLINE(  33)								int _g = 0;
HXDLIN(  33)								int _g1 = b1->height;
HXDLIN(  33)								while((_g < _g1)){
HXLINE(  33)									_g = (_g + 1);
HXDLIN(  33)									int y = (_g - 1);
HXDLIN(  33)									{
HXLINE(  33)										int _g2 = 0;
HXDLIN(  33)										int _g3 = b1->width;
HXDLIN(  33)										while((_g2 < _g3)){
HXLINE(  33)											_g2 = (_g2 + 1);
HXDLIN(  33)											int x = (_g2 - 1);
HXDLIN(  33)											{
HXLINE(  33)												w = (w + 1);
HXDLIN(  33)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  33)											{
HXLINE(  33)												w = (w + 1);
HXDLIN(  33)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  33)											{
HXLINE(  33)												w = (w + 1);
HXDLIN(  33)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  33)											{
HXLINE(  33)												w = (w + 1);
HXDLIN(  33)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  33)					undoImage1 = b1;
            				}
            				break;
            				case (int)1: {
HXLINE(  33)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)					 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN(  33)					{
HXLINE(  33)						a1->width = width;
HXDLIN(  33)						a1->height = height;
HXDLIN(  33)						a1->data = ::Array_obj< int >::__new(0);
HXDLIN(  33)						a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)						{
HXLINE(  33)							int _g4 = 0;
HXDLIN(  33)							int _g5 = a1->length;
HXDLIN(  33)							while((_g4 < _g5)){
HXLINE(  33)								_g4 = (_g4 + 1);
HXDLIN(  33)								int i = (_g4 - 1);
HXDLIN(  33)								a1->data[i] = 0;
            							}
            						}
            					}
HXDLIN(  33)					undoImage1 = a1;
            				}
            				break;
            				case (int)2: {
HXLINE(  33)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  33)					 ::iterMagic::U32ArrImg b2 = u32a;
HXDLIN(  33)					{
HXLINE(  33)						b2->width = width;
HXDLIN(  33)						b2->height = height;
HXDLIN(  33)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)						int size = (b2->length * 4);
HXDLIN(  33)						b2->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  33)						{
HXLINE(  33)							int _g6 = 0;
HXDLIN(  33)							int _g7 = b2->length;
HXDLIN(  33)							while((_g6 < _g7)){
HXLINE(  33)								_g6 = (_g6 + 1);
HXDLIN(  33)								int i1 = (_g6 - 1);
HXDLIN(  33)								{
HXLINE(  33)									 ::haxe::io::ArrayBufferViewImpl this2 = b2->data;
HXDLIN(  33)									bool undoImage2;
HXDLIN(  33)									if ((i1 >= 0)) {
HXLINE(  33)										undoImage2 = (i1 < (this2->byteLength >> 2));
            									}
            									else {
HXLINE(  33)										undoImage2 = false;
            									}
HXDLIN(  33)									if (undoImage2) {
HXLINE(  33)										 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  33)										int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  33)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  33)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  33)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  33)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  33)					undoImage1 = b2;
            				}
            				break;
            				case (int)3: {
HXLINE(  33)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)					 ::iterMagic::VecIntImg v = vec;
HXDLIN(  33)					{
HXLINE(  33)						v->width = width;
HXDLIN(  33)						v->height = height;
HXDLIN(  33)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  33)						{
HXLINE(  33)							int _g8 = 0;
HXDLIN(  33)							int _g9 = v->length;
HXDLIN(  33)							while((_g8 < _g9)){
HXLINE(  33)								_g8 = (_g8 + 1);
HXDLIN(  33)								int i2 = (_g8 - 1);
HXDLIN(  33)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN(  33)					undoImage1 = v;
            				}
            				break;
            				case (int)4: {
HXLINE(  33)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)					 ::iterMagic::StackIntImg b3 = sInt;
HXDLIN(  33)					{
HXLINE(  33)						b3->width = width;
HXDLIN(  33)						b3->height = height;
HXDLIN(  33)						b3->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)						b3->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  33)						{
HXLINE(  33)							int len1 = b3->length;
HXDLIN(  33)							 ::haxe::ds::GenericStack_Int d = b3->data;
HXDLIN(  33)							if (::hx::IsNull( d->head )) {
HXLINE(  33)								int _g10 = 0;
HXDLIN(  33)								int _g11 = len1;
HXDLIN(  33)								while((_g10 < _g11)){
HXLINE(  33)									_g10 = (_g10 + 1);
HXDLIN(  33)									int i3 = (_g10 - 1);
HXDLIN(  33)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE(  33)								int _g12 = 0;
HXDLIN(  33)								int _g13 = len1;
HXDLIN(  33)								while((_g12 < _g13)){
HXLINE(  33)									_g12 = (_g12 + 1);
HXDLIN(  33)									int i4 = (_g12 - 1);
HXDLIN(  33)									{
HXLINE(  33)										 ::haxe::ds::GenericCell_Int l = b3->data->head;
HXDLIN(  33)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  33)										{
HXLINE(  33)											int _g14 = 0;
HXDLIN(  33)											int _g15 = i4;
HXDLIN(  33)											while((_g14 < _g15)){
HXLINE(  33)												_g14 = (_g14 + 1);
HXDLIN(  33)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE(  33)										if (::hx::IsNull( prev )) {
HXLINE(  33)											b3->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  33)											l = null();
            										}
            										else {
HXLINE(  33)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  33)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  33)					undoImage1 = b3;
            				}
            				break;
            			}
HXDLIN(  33)			this1->image = undoImage1;
HXDLIN(  33)			this1->width = width;
HXDLIN(  33)			this1->height = height;
HXDLIN(  33)			this1->imageType = ( (int)(imageType) );
HXDLIN(  33)			undoImage = this1;
HXLINE(  34)			{
HXLINE(  34)				int rectLeft = xIter3->start;
HXDLIN(  34)				int rectTop = yIter3->start;
HXDLIN(  34)				int rectRight = xIter3->max;
HXDLIN(  34)				bool forceClear = false;
HXDLIN(  34)				{
HXLINE(  34)					int _g16 = rectTop;
HXDLIN(  34)					int _g17 = yIter3->max;
HXDLIN(  34)					while((_g16 < _g17)){
HXLINE(  34)						_g16 = (_g16 + 1);
HXDLIN(  34)						int dy = (_g16 - 1);
HXDLIN(  34)						{
HXLINE(  34)							int _g18 = rectLeft;
HXDLIN(  34)							int _g19 = rectRight;
HXDLIN(  34)							while((_g18 < _g19)){
HXLINE(  34)								_g18 = (_g18 + 1);
HXDLIN(  34)								int dx = (_g18 - 1);
HXDLIN(  34)								::Dynamic this3 = pixelImage->image;
HXDLIN(  34)								int index;
HXDLIN(  34)								if (pixelImage->useVirtualPos) {
HXLINE(  34)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx) - pixelImage->virtualX));
            								}
            								else {
HXLINE(  34)									index = ::Std_obj::_hx_int(( (Float)(((dy * pixelImage->width) + dx)) ));
            								}
HXDLIN(  34)								int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  34)								int col;
HXDLIN(  34)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  34)									col = c;
            								}
HXDLIN(  34)								bool _hx_tmp;
HXDLIN(  34)								if (pixelImage->useMask) {
HXLINE(  34)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE(  34)									_hx_tmp = false;
            								}
HXDLIN(  34)								if (_hx_tmp) {
HXLINE(  34)									 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN(  34)									::Dynamic this5 = this4->image;
HXDLIN(  34)									int index1;
HXDLIN(  34)									if (this4->useVirtualPos) {
HXLINE(  34)										index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx) - this4->virtualX));
            									}
            									else {
HXLINE(  34)										index1 = ::Std_obj::_hx_int(( (Float)(((dy * this4->width) + dx)) ));
            									}
HXDLIN(  34)									int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN(  34)									int v1;
HXDLIN(  34)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)										v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXLINE(  34)										v1 = c1;
            									}
HXDLIN(  34)									int maskPixel = v1;
HXDLIN(  34)									int this6 = col;
HXDLIN(  34)									if ((maskPixel == 0)) {
HXLINE(  34)										col = this6;
            									}
            									else {
HXLINE(  34)										Float m0;
HXDLIN(  34)										int this7 = ((maskPixel >> 24) & 255);
HXDLIN(  34)										if ((this7 == 0)) {
HXLINE(  34)											m0 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float m1;
HXDLIN(  34)										int this8 = ((maskPixel >> 16) & 255);
HXDLIN(  34)										if ((this8 == 0)) {
HXLINE(  34)											m1 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float m2;
HXDLIN(  34)										int this9 = ((maskPixel >> 8) & 255);
HXDLIN(  34)										if ((this9 == 0)) {
HXLINE(  34)											m2 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float m3;
HXDLIN(  34)										int this10 = (maskPixel & 255);
HXDLIN(  34)										if ((this10 == 0)) {
HXLINE(  34)											m3 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  34)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  34)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  34)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  34)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  34)								if ((col != 0)) {
HXLINE(  34)									int x1 = (dx - rectLeft);
HXDLIN(  34)									int y1 = (dy - rectTop);
HXDLIN(  34)									int c2 = col;
HXDLIN(  34)									bool _hx_tmp1;
HXDLIN(  34)									if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  34)										_hx_tmp1 = undoImage->transparent;
            									}
            									else {
HXLINE(  34)										_hx_tmp1 = false;
            									}
HXDLIN(  34)									if (_hx_tmp1) {
HXLINE(  34)										int location;
HXDLIN(  34)										if (undoImage->useVirtualPos) {
HXLINE(  34)											location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE(  34)											location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN(  34)										int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  34)										int this12;
HXDLIN(  34)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)											this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            										}
            										else {
HXLINE(  34)											this12 = this11;
            										}
HXDLIN(  34)										Float a11;
HXDLIN(  34)										int this13 = ((this12 >> 24) & 255);
HXDLIN(  34)										if ((this13 == 0)) {
HXLINE(  34)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float r1;
HXDLIN(  34)										int this14 = ((this12 >> 16) & 255);
HXDLIN(  34)										if ((this14 == 0)) {
HXLINE(  34)											r1 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float g1;
HXDLIN(  34)										int this15 = ((this12 >> 8) & 255);
HXDLIN(  34)										if ((this15 == 0)) {
HXLINE(  34)											g1 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float b11;
HXDLIN(  34)										int this16 = (this12 & 255);
HXDLIN(  34)										if ((this16 == 0)) {
HXLINE(  34)											b11 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float a2;
HXDLIN(  34)										int this17 = ((col >> 24) & 255);
HXDLIN(  34)										if ((this17 == 0)) {
HXLINE(  34)											a2 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float r2;
HXDLIN(  34)										int this18 = ((col >> 16) & 255);
HXDLIN(  34)										if ((this18 == 0)) {
HXLINE(  34)											r2 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float g2;
HXDLIN(  34)										int this19 = ((col >> 8) & 255);
HXDLIN(  34)										if ((this19 == 0)) {
HXLINE(  34)											g2 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float b21;
HXDLIN(  34)										int this20 = (col & 255);
HXDLIN(  34)										if ((this20 == 0)) {
HXLINE(  34)											b21 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN(  34)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  34)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  34)										int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  34)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  34)										int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  34)										{
HXLINE(  34)											int _hx_tmp2;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE(  34)												_hx_tmp2 = blended;
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            										}
            									}
            									else {
HXLINE(  34)										::Dynamic this21 = undoImage->image;
HXDLIN(  34)										int index2;
HXDLIN(  34)										if (undoImage->useVirtualPos) {
HXLINE(  34)											index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE(  34)											index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN(  34)										int _hx_tmp3;
HXDLIN(  34)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)											_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            										}
            										else {
HXLINE(  34)											_hx_tmp3 = c2;
            										}
HXDLIN(  34)										::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            									}
            								}
            								else {
HXLINE(  34)									if (forceClear) {
HXLINE(  34)										::Dynamic this22 = undoImage->image;
HXDLIN(  34)										int x2 = (dx - rectLeft);
HXDLIN(  34)										int y2 = (dy - rectTop);
HXDLIN(  34)										int index3;
HXDLIN(  34)										if (undoImage->useVirtualPos) {
HXLINE(  34)											index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            										}
            										else {
HXLINE(  34)											index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            										}
HXDLIN(  34)										::iterMagic::Iimg_obj::set(this22,index3,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  36)		Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(5) ));
HXLINE(  37)		Float omega = (theta / ( (Float)(3) ));
HXLINE(  38)		Float delta = ((Float)0.707);
HXLINE(  39)		Float x0 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE(  40)		Float y0 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE(  41)		omega = (omega + theta);
HXLINE(  42)		Float x11 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE(  43)		Float y11 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE(  44)		omega = (omega + theta);
HXLINE(  45)		Float x21 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE(  46)		Float y21 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE(  47)		omega = (omega + theta);
HXLINE(  48)		Float x3 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE(  49)		Float y3 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE(  50)		omega = (omega + theta);
HXLINE(  51)		Float x4 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE(  52)		Float y4 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE(  53)		Float s = ((Float)0.);
HXLINE(  54)		Float t = ((Float)0.);
HXLINE(  55)		Float sxx = ((Float)0.);
HXLINE(  56)		Float txx = ((Float)0.);
HXLINE(  57)		Float sxx0 = ((Float)0.);
HXLINE(  58)		Float sxx1 = ((Float)0.);
HXLINE(  59)		Float sxx2 = ((Float)0.);
HXLINE(  60)		Float sxx3 = ((Float)0.);
HXLINE(  61)		Float sxx4 = ((Float)0.);
HXLINE(  62)		Float sxx5 = ((Float)0.);
HXLINE(  63)		Float sxx6 = ((Float)0.);
HXLINE(  64)		Float txx0 = ((Float)0.);
HXLINE(  65)		Float txx1 = ((Float)0.);
HXLINE(  66)		Float txx2 = ((Float)0.);
HXLINE(  67)		Float txx3 = ((Float)0.);
HXLINE(  68)		Float txx4 = ((Float)0.);
HXLINE(  69)		Float txx5 = ((Float)0.);
HXLINE(  70)		Float txx6 = ((Float)0.);
HXLINE(  71)		{
HXLINE(  71)			int _g_min = xIter3->start;
HXDLIN(  71)			int _g_max = xIter3->max;
HXDLIN(  71)			while((_g_min < _g_max)){
HXLINE(  71)				_g_min = (_g_min + 1);
HXDLIN(  71)				int x5 = (_g_min - 1);
HXLINE(  72)				sxx0 = (sx * (x5 + x0));
HXLINE(  73)				sxx1 = (sx * (x5 + x11));
HXLINE(  74)				sxx2 = (sx * (x5 + x21));
HXLINE(  75)				sxx3 = (sx * (x5 + x3));
HXLINE(  76)				sxx4 = (sx * (x5 + x4));
HXLINE(  77)				sxx5 = (sx * ( (Float)(x5) ));
HXLINE(  78)				sxx6 = (sx * ( (Float)(x5) ));
HXLINE(  80)				txx0 = (tx * (x5 + x0));
HXLINE(  81)				txx1 = (tx * (x5 + x11));
HXLINE(  82)				txx2 = (tx * (x5 + x21));
HXLINE(  83)				txx3 = (tx * (x5 + x3));
HXLINE(  84)				txx4 = (tx * (x5 + x4));
HXLINE(  85)				txx5 = (tx * ( (Float)(x5) ));
HXLINE(  86)				txx6 = (tx * ( (Float)(x5) ));
HXLINE(  87)				{
HXLINE(  87)					int _g_min1 = yIter3->start;
HXDLIN(  87)					int _g_max1 = yIter3->max;
HXDLIN(  87)					while((_g_min1 < _g_max1)){
HXLINE(  87)						_g_min1 = (_g_min1 + 1);
HXDLIN(  87)						int y5 = (_g_min1 - 1);
HXLINE(  88)						s = ((s0 + sxx0) + (sy * (y5 + y0)));
HXLINE(  89)						t = ((t0 + txx0) + (ty * (y5 + y0)));
HXLINE(  90)						bool _hx_tmp4;
HXDLIN(  90)						if (!((s <= 0))) {
HXLINE(  90)							_hx_tmp4 = (t <= 0);
            						}
            						else {
HXLINE(  90)							_hx_tmp4 = true;
            						}
HXDLIN(  90)						if (!(_hx_tmp4)) {
HXLINE(  91)							if (((s + t) < A)) {
HXLINE(  92)								int i6 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN(  92)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE(  92)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE(  92)								int a5 = i6;
HXLINE(  93)								{
HXLINE(  93)									int location1;
HXDLIN(  93)									if (pixelImage->useVirtualPos) {
HXLINE(  93)										location1 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  93)										location1 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN(  93)									bool _hx_tmp5;
HXDLIN(  93)									if (pixelImage->transparent) {
HXLINE(  93)										_hx_tmp5 = (a5 < 254);
            									}
            									else {
HXLINE(  93)										_hx_tmp5 = false;
            									}
HXDLIN(  93)									if (_hx_tmp5) {
HXLINE(  93)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  93)										int old;
HXDLIN(  93)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  93)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE(  93)											old = this23;
            										}
HXDLIN(  93)										int rhs = ((((a5 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  93)										Float a12;
HXDLIN(  93)										int this24 = ((old >> 24) & 255);
HXDLIN(  93)										if ((this24 == 0)) {
HXLINE(  93)											a12 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float r11;
HXDLIN(  93)										int this25 = ((old >> 16) & 255);
HXDLIN(  93)										if ((this25 == 0)) {
HXLINE(  93)											r11 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float g11;
HXDLIN(  93)										int this26 = ((old >> 8) & 255);
HXDLIN(  93)										if ((this26 == 0)) {
HXLINE(  93)											g11 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float b12;
HXDLIN(  93)										int this27 = (old & 255);
HXDLIN(  93)										if ((this27 == 0)) {
HXLINE(  93)											b12 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float a21;
HXDLIN(  93)										int this28 = ((rhs >> 24) & 255);
HXDLIN(  93)										if ((this28 == 0)) {
HXLINE(  93)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float r21;
HXDLIN(  93)										int this29 = ((rhs >> 16) & 255);
HXDLIN(  93)										if ((this29 == 0)) {
HXLINE(  93)											r21 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float g21;
HXDLIN(  93)										int this30 = ((rhs >> 8) & 255);
HXDLIN(  93)										if ((this30 == 0)) {
HXLINE(  93)											g21 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float b22;
HXDLIN(  93)										int this31 = (rhs & 255);
HXDLIN(  93)										if ((this31 == 0)) {
HXLINE(  93)											b22 = ((Float)0.);
            										}
            										else {
HXLINE(  93)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  93)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN(  93)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  93)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  93)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  93)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  93)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  93)										{
HXLINE(  93)											int _hx_tmp6;
HXDLIN(  93)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  93)												_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE(  93)												_hx_tmp6 = blended1;
            											}
HXDLIN(  93)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp6);
            										}
            									}
            									else {
HXLINE(  93)										int value;
HXDLIN(  93)										if (pixelImage->isLittle) {
HXLINE(  93)											value = ((((a5 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE(  93)											value = ((((a5 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN(  93)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
HXLINE(  94)								{
HXLINE(  94)									int location2;
HXDLIN(  94)									if (pixelImage->useVirtualPos) {
HXLINE(  94)										location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  94)										location2 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN(  94)									bool _hx_tmp7;
HXDLIN(  94)									if (pixelImage->transparent) {
HXLINE(  94)										_hx_tmp7 = (a5 < 254);
            									}
            									else {
HXLINE(  94)										_hx_tmp7 = false;
            									}
HXDLIN(  94)									if (_hx_tmp7) {
HXLINE(  94)										int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  94)										int old1;
HXDLIN(  94)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  94)											old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            										}
            										else {
HXLINE(  94)											old1 = this32;
            										}
HXDLIN(  94)										int rhs1 = ((((a5 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  94)										Float a13;
HXDLIN(  94)										int this33 = ((old1 >> 24) & 255);
HXDLIN(  94)										if ((this33 == 0)) {
HXLINE(  94)											a13 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											a13 = (( (Float)(this33) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float r12;
HXDLIN(  94)										int this34 = ((old1 >> 16) & 255);
HXDLIN(  94)										if ((this34 == 0)) {
HXLINE(  94)											r12 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											r12 = (( (Float)(this34) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float g12;
HXDLIN(  94)										int this35 = ((old1 >> 8) & 255);
HXDLIN(  94)										if ((this35 == 0)) {
HXLINE(  94)											g12 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											g12 = (( (Float)(this35) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float b13;
HXDLIN(  94)										int this36 = (old1 & 255);
HXDLIN(  94)										if ((this36 == 0)) {
HXLINE(  94)											b13 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											b13 = (( (Float)(this36) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float a22;
HXDLIN(  94)										int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  94)										if ((this37 == 0)) {
HXLINE(  94)											a22 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float r22;
HXDLIN(  94)										int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  94)										if ((this38 == 0)) {
HXLINE(  94)											r22 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											r22 = (( (Float)(this38) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float g22;
HXDLIN(  94)										int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  94)										if ((this39 == 0)) {
HXLINE(  94)											g22 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											g22 = (( (Float)(this39) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float b23;
HXDLIN(  94)										int this40 = (rhs1 & 255);
HXDLIN(  94)										if ((this40 == 0)) {
HXLINE(  94)											b23 = ((Float)0.);
            										}
            										else {
HXLINE(  94)											b23 = (( (Float)(this40) ) / ( (Float)(255) ));
            										}
HXDLIN(  94)										Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN(  94)										int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  94)										int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  94)										int b6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  94)										int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  94)										int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b6);
HXDLIN(  94)										{
HXLINE(  94)											int _hx_tmp8;
HXDLIN(  94)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  94)												_hx_tmp8 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            											}
            											else {
HXLINE(  94)												_hx_tmp8 = blended2;
            											}
HXDLIN(  94)											::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp8);
            										}
            									}
            									else {
HXLINE(  94)										int value1;
HXDLIN(  94)										if (pixelImage->isLittle) {
HXLINE(  94)											value1 = ((((a5 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE(  94)											value1 = ((((a5 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN(  94)										::iterMagic::Iimg_obj::set(pixelImage->image,location2,value1);
            									}
            								}
            							}
            						}
HXLINE(  97)						s = ((s0 + sxx1) + (sy * (y5 + y11)));
HXLINE(  98)						t = ((t0 + txx1) + (ty * (y5 + y11)));
HXLINE(  99)						bool _hx_tmp9;
HXDLIN(  99)						if (!((s <= 0))) {
HXLINE(  99)							_hx_tmp9 = (t <= 0);
            						}
            						else {
HXLINE(  99)							_hx_tmp9 = true;
            						}
HXDLIN(  99)						if (!(_hx_tmp9)) {
HXLINE( 100)							if (((s + t) < A)) {
HXLINE( 101)								int i7 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN( 101)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 101)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 101)								int a51 = i7;
HXLINE( 102)								{
HXLINE( 102)									int location3;
HXDLIN( 102)									if (pixelImage->useVirtualPos) {
HXLINE( 102)										location3 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 102)										location3 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 102)									bool _hx_tmp10;
HXDLIN( 102)									if (pixelImage->transparent) {
HXLINE( 102)										_hx_tmp10 = (a51 < 254);
            									}
            									else {
HXLINE( 102)										_hx_tmp10 = false;
            									}
HXDLIN( 102)									if (_hx_tmp10) {
HXLINE( 102)										int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 102)										int old2;
HXDLIN( 102)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)											old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            										}
            										else {
HXLINE( 102)											old2 = this41;
            										}
HXDLIN( 102)										int rhs2 = ((((a51 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)										Float a14;
HXDLIN( 102)										int this42 = ((old2 >> 24) & 255);
HXDLIN( 102)										if ((this42 == 0)) {
HXLINE( 102)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											a14 = (( (Float)(this42) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float r13;
HXDLIN( 102)										int this43 = ((old2 >> 16) & 255);
HXDLIN( 102)										if ((this43 == 0)) {
HXLINE( 102)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											r13 = (( (Float)(this43) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float g13;
HXDLIN( 102)										int this44 = ((old2 >> 8) & 255);
HXDLIN( 102)										if ((this44 == 0)) {
HXLINE( 102)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											g13 = (( (Float)(this44) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float b14;
HXDLIN( 102)										int this45 = (old2 & 255);
HXDLIN( 102)										if ((this45 == 0)) {
HXLINE( 102)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											b14 = (( (Float)(this45) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float a23;
HXDLIN( 102)										int this46 = ((rhs2 >> 24) & 255);
HXDLIN( 102)										if ((this46 == 0)) {
HXLINE( 102)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float r23;
HXDLIN( 102)										int this47 = ((rhs2 >> 16) & 255);
HXDLIN( 102)										if ((this47 == 0)) {
HXLINE( 102)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											r23 = (( (Float)(this47) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float g23;
HXDLIN( 102)										int this48 = ((rhs2 >> 8) & 255);
HXDLIN( 102)										if ((this48 == 0)) {
HXLINE( 102)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											g23 = (( (Float)(this48) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float b24;
HXDLIN( 102)										int this49 = (rhs2 & 255);
HXDLIN( 102)										if ((this49 == 0)) {
HXLINE( 102)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 102)											b24 = (( (Float)(this49) ) / ( (Float)(255) ));
            										}
HXDLIN( 102)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 102)										int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 102)										int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 102)										int b7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 102)										int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 102)										int blended3 = ((((a8 << 24) | (r6 << 16)) | (g6 << 8)) | b7);
HXDLIN( 102)										{
HXLINE( 102)											int _hx_tmp11;
HXDLIN( 102)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)												_hx_tmp11 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 102)												_hx_tmp11 = blended3;
            											}
HXDLIN( 102)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp11);
            										}
            									}
            									else {
HXLINE( 102)										int value2;
HXDLIN( 102)										if (pixelImage->isLittle) {
HXLINE( 102)											value2 = ((((a51 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 102)											value2 = ((((a51 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 102)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value2);
            									}
            								}
HXLINE( 103)								{
HXLINE( 103)									int location4;
HXDLIN( 103)									if (pixelImage->useVirtualPos) {
HXLINE( 103)										location4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 103)										location4 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 103)									bool _hx_tmp12;
HXDLIN( 103)									if (pixelImage->transparent) {
HXLINE( 103)										_hx_tmp12 = (a51 < 254);
            									}
            									else {
HXLINE( 103)										_hx_tmp12 = false;
            									}
HXDLIN( 103)									if (_hx_tmp12) {
HXLINE( 103)										int this50 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN( 103)										int old3;
HXDLIN( 103)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)											old3 = ((((((this50 >> 24) & 255) << 24) | ((this50 & 255) << 16)) | (((this50 >> 8) & 255) << 8)) | ((this50 >> 16) & 255));
            										}
            										else {
HXLINE( 103)											old3 = this50;
            										}
HXDLIN( 103)										int rhs3 = ((((a51 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 103)										Float a15;
HXDLIN( 103)										int this51 = ((old3 >> 24) & 255);
HXDLIN( 103)										if ((this51 == 0)) {
HXLINE( 103)											a15 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											a15 = (( (Float)(this51) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float r14;
HXDLIN( 103)										int this52 = ((old3 >> 16) & 255);
HXDLIN( 103)										if ((this52 == 0)) {
HXLINE( 103)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											r14 = (( (Float)(this52) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float g14;
HXDLIN( 103)										int this53 = ((old3 >> 8) & 255);
HXDLIN( 103)										if ((this53 == 0)) {
HXLINE( 103)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											g14 = (( (Float)(this53) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float b15;
HXDLIN( 103)										int this54 = (old3 & 255);
HXDLIN( 103)										if ((this54 == 0)) {
HXLINE( 103)											b15 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											b15 = (( (Float)(this54) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float a24;
HXDLIN( 103)										int this55 = ((rhs3 >> 24) & 255);
HXDLIN( 103)										if ((this55 == 0)) {
HXLINE( 103)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											a24 = (( (Float)(this55) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float r24;
HXDLIN( 103)										int this56 = ((rhs3 >> 16) & 255);
HXDLIN( 103)										if ((this56 == 0)) {
HXLINE( 103)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											r24 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float g24;
HXDLIN( 103)										int this57 = ((rhs3 >> 8) & 255);
HXDLIN( 103)										if ((this57 == 0)) {
HXLINE( 103)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											g24 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float b25;
HXDLIN( 103)										int this58 = (rhs3 & 255);
HXDLIN( 103)										if ((this58 == 0)) {
HXLINE( 103)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 103)											b25 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 103)										Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN( 103)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 103)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 103)										int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a34) + (b25 * a24))));
HXDLIN( 103)										int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 103)										int blended4 = ((((a9 << 24) | (r7 << 16)) | (g7 << 8)) | b8);
HXDLIN( 103)										{
HXLINE( 103)											int _hx_tmp13;
HXDLIN( 103)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)												_hx_tmp13 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 103)												_hx_tmp13 = blended4;
            											}
HXDLIN( 103)											::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp13);
            										}
            									}
            									else {
HXLINE( 103)										int value3;
HXDLIN( 103)										if (pixelImage->isLittle) {
HXLINE( 103)											value3 = ((((a51 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 103)											value3 = ((((a51 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 103)										::iterMagic::Iimg_obj::set(pixelImage->image,location4,value3);
            									}
            								}
            							}
            						}
HXLINE( 106)						s = ((s0 + sxx2) + (sy * (y5 + y21)));
HXLINE( 107)						t = ((t0 + txx2) + (ty * (y5 + y21)));
HXLINE( 108)						bool _hx_tmp14;
HXDLIN( 108)						if (!((s <= 0))) {
HXLINE( 108)							_hx_tmp14 = (t <= 0);
            						}
            						else {
HXLINE( 108)							_hx_tmp14 = true;
            						}
HXDLIN( 108)						if (!(_hx_tmp14)) {
HXLINE( 109)							if (((s + t) < A)) {
HXLINE( 110)								int i8 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN( 110)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 110)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 110)								int a52 = i8;
HXLINE( 111)								{
HXLINE( 111)									int location5;
HXDLIN( 111)									if (pixelImage->useVirtualPos) {
HXLINE( 111)										location5 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 111)										location5 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 111)									bool _hx_tmp15;
HXDLIN( 111)									if (pixelImage->transparent) {
HXLINE( 111)										_hx_tmp15 = (a52 < 254);
            									}
            									else {
HXLINE( 111)										_hx_tmp15 = false;
            									}
HXDLIN( 111)									if (_hx_tmp15) {
HXLINE( 111)										int this59 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 111)										int old4;
HXDLIN( 111)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 111)											old4 = ((((((this59 >> 24) & 255) << 24) | ((this59 & 255) << 16)) | (((this59 >> 8) & 255) << 8)) | ((this59 >> 16) & 255));
            										}
            										else {
HXLINE( 111)											old4 = this59;
            										}
HXDLIN( 111)										int rhs4 = ((((a52 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 111)										Float a16;
HXDLIN( 111)										int this60 = ((old4 >> 24) & 255);
HXDLIN( 111)										if ((this60 == 0)) {
HXLINE( 111)											a16 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											a16 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float r15;
HXDLIN( 111)										int this61 = ((old4 >> 16) & 255);
HXDLIN( 111)										if ((this61 == 0)) {
HXLINE( 111)											r15 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											r15 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float g15;
HXDLIN( 111)										int this62 = ((old4 >> 8) & 255);
HXDLIN( 111)										if ((this62 == 0)) {
HXLINE( 111)											g15 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											g15 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float b16;
HXDLIN( 111)										int this63 = (old4 & 255);
HXDLIN( 111)										if ((this63 == 0)) {
HXLINE( 111)											b16 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											b16 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float a25;
HXDLIN( 111)										int this64 = ((rhs4 >> 24) & 255);
HXDLIN( 111)										if ((this64 == 0)) {
HXLINE( 111)											a25 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											a25 = (( (Float)(this64) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float r25;
HXDLIN( 111)										int this65 = ((rhs4 >> 16) & 255);
HXDLIN( 111)										if ((this65 == 0)) {
HXLINE( 111)											r25 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											r25 = (( (Float)(this65) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float g25;
HXDLIN( 111)										int this66 = ((rhs4 >> 8) & 255);
HXDLIN( 111)										if ((this66 == 0)) {
HXLINE( 111)											g25 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											g25 = (( (Float)(this66) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float b26;
HXDLIN( 111)										int this67 = (rhs4 & 255);
HXDLIN( 111)										if ((this67 == 0)) {
HXLINE( 111)											b26 = ((Float)0.);
            										}
            										else {
HXLINE( 111)											b26 = (( (Float)(this67) ) / ( (Float)(255) ));
            										}
HXDLIN( 111)										Float a35 = (a16 * (( (Float)(1) ) - a25));
HXDLIN( 111)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 111)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 111)										int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a35) + (b26 * a25))));
HXDLIN( 111)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 111)										int blended5 = ((((a10 << 24) | (r8 << 16)) | (g8 << 8)) | b9);
HXDLIN( 111)										{
HXLINE( 111)											int _hx_tmp16;
HXDLIN( 111)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 111)												_hx_tmp16 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXLINE( 111)												_hx_tmp16 = blended5;
            											}
HXDLIN( 111)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp16);
            										}
            									}
            									else {
HXLINE( 111)										int value4;
HXDLIN( 111)										if (pixelImage->isLittle) {
HXLINE( 111)											value4 = ((((a52 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 111)											value4 = ((((a52 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 111)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,value4);
            									}
            								}
HXLINE( 112)								{
HXLINE( 112)									int location6;
HXDLIN( 112)									if (pixelImage->useVirtualPos) {
HXLINE( 112)										location6 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 112)										location6 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 112)									bool _hx_tmp17;
HXDLIN( 112)									if (pixelImage->transparent) {
HXLINE( 112)										_hx_tmp17 = (a52 < 254);
            									}
            									else {
HXLINE( 112)										_hx_tmp17 = false;
            									}
HXDLIN( 112)									if (_hx_tmp17) {
HXLINE( 112)										int this68 = ::iterMagic::Iimg_obj::get(pixelImage->image,location6);
HXDLIN( 112)										int old5;
HXDLIN( 112)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)											old5 = ((((((this68 >> 24) & 255) << 24) | ((this68 & 255) << 16)) | (((this68 >> 8) & 255) << 8)) | ((this68 >> 16) & 255));
            										}
            										else {
HXLINE( 112)											old5 = this68;
            										}
HXDLIN( 112)										int rhs5 = ((((a52 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 112)										Float a17;
HXDLIN( 112)										int this69 = ((old5 >> 24) & 255);
HXDLIN( 112)										if ((this69 == 0)) {
HXLINE( 112)											a17 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											a17 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float r16;
HXDLIN( 112)										int this70 = ((old5 >> 16) & 255);
HXDLIN( 112)										if ((this70 == 0)) {
HXLINE( 112)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											r16 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float g16;
HXDLIN( 112)										int this71 = ((old5 >> 8) & 255);
HXDLIN( 112)										if ((this71 == 0)) {
HXLINE( 112)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											g16 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float b17;
HXDLIN( 112)										int this72 = (old5 & 255);
HXDLIN( 112)										if ((this72 == 0)) {
HXLINE( 112)											b17 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											b17 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float a26;
HXDLIN( 112)										int this73 = ((rhs5 >> 24) & 255);
HXDLIN( 112)										if ((this73 == 0)) {
HXLINE( 112)											a26 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											a26 = (( (Float)(this73) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float r26;
HXDLIN( 112)										int this74 = ((rhs5 >> 16) & 255);
HXDLIN( 112)										if ((this74 == 0)) {
HXLINE( 112)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											r26 = (( (Float)(this74) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float g26;
HXDLIN( 112)										int this75 = ((rhs5 >> 8) & 255);
HXDLIN( 112)										if ((this75 == 0)) {
HXLINE( 112)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											g26 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float b27;
HXDLIN( 112)										int this76 = (rhs5 & 255);
HXDLIN( 112)										if ((this76 == 0)) {
HXLINE( 112)											b27 = ((Float)0.);
            										}
            										else {
HXLINE( 112)											b27 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 112)										Float a36 = (a17 * (( (Float)(1) ) - a26));
HXDLIN( 112)										int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN( 112)										int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN( 112)										int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a36) + (b27 * a26))));
HXDLIN( 112)										int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN( 112)										int blended6 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b10);
HXDLIN( 112)										{
HXLINE( 112)											int _hx_tmp18;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)												_hx_tmp18 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 112)												_hx_tmp18 = blended6;
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(pixelImage->image,location6,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 112)										int value5;
HXDLIN( 112)										if (pixelImage->isLittle) {
HXLINE( 112)											value5 = ((((a52 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 112)											value5 = ((((a52 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 112)										::iterMagic::Iimg_obj::set(pixelImage->image,location6,value5);
            									}
            								}
            							}
            						}
HXLINE( 115)						s = ((s0 + sxx3) + (sy * (y5 + y3)));
HXLINE( 116)						t = ((t0 + txx3) + (ty * (y5 + y3)));
HXLINE( 117)						bool _hx_tmp19;
HXDLIN( 117)						if (!((s <= 0))) {
HXLINE( 117)							_hx_tmp19 = (t <= 0);
            						}
            						else {
HXLINE( 117)							_hx_tmp19 = true;
            						}
HXDLIN( 117)						if (!(_hx_tmp19)) {
HXLINE( 118)							if (((s + t) < A)) {
HXLINE( 119)								int i9 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN( 119)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 119)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 119)								int a53 = i9;
HXLINE( 120)								{
HXLINE( 120)									int location7;
HXDLIN( 120)									if (pixelImage->useVirtualPos) {
HXLINE( 120)										location7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 120)										location7 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 120)									bool _hx_tmp20;
HXDLIN( 120)									if (pixelImage->transparent) {
HXLINE( 120)										_hx_tmp20 = (a53 < 254);
            									}
            									else {
HXLINE( 120)										_hx_tmp20 = false;
            									}
HXDLIN( 120)									if (_hx_tmp20) {
HXLINE( 120)										int this77 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 120)										int old6;
HXDLIN( 120)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											old6 = ((((((this77 >> 24) & 255) << 24) | ((this77 & 255) << 16)) | (((this77 >> 8) & 255) << 8)) | ((this77 >> 16) & 255));
            										}
            										else {
HXLINE( 120)											old6 = this77;
            										}
HXDLIN( 120)										int rhs6 = ((((a53 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)										Float a19;
HXDLIN( 120)										int this78 = ((old6 >> 24) & 255);
HXDLIN( 120)										if ((this78 == 0)) {
HXLINE( 120)											a19 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											a19 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float r17;
HXDLIN( 120)										int this79 = ((old6 >> 16) & 255);
HXDLIN( 120)										if ((this79 == 0)) {
HXLINE( 120)											r17 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											r17 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float g17;
HXDLIN( 120)										int this80 = ((old6 >> 8) & 255);
HXDLIN( 120)										if ((this80 == 0)) {
HXLINE( 120)											g17 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											g17 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float b18;
HXDLIN( 120)										int this81 = (old6 & 255);
HXDLIN( 120)										if ((this81 == 0)) {
HXLINE( 120)											b18 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											b18 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float a27;
HXDLIN( 120)										int this82 = ((rhs6 >> 24) & 255);
HXDLIN( 120)										if ((this82 == 0)) {
HXLINE( 120)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											a27 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float r27;
HXDLIN( 120)										int this83 = ((rhs6 >> 16) & 255);
HXDLIN( 120)										if ((this83 == 0)) {
HXLINE( 120)											r27 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											r27 = (( (Float)(this83) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float g27;
HXDLIN( 120)										int this84 = ((rhs6 >> 8) & 255);
HXDLIN( 120)										if ((this84 == 0)) {
HXLINE( 120)											g27 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											g27 = (( (Float)(this84) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float b28;
HXDLIN( 120)										int this85 = (rhs6 & 255);
HXDLIN( 120)										if ((this85 == 0)) {
HXLINE( 120)											b28 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											b28 = (( (Float)(this85) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float a37 = (a19 * (( (Float)(1) ) - a27));
HXDLIN( 120)										int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN( 120)										int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN( 120)										int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a37) + (b28 * a27))));
HXDLIN( 120)										int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN( 120)										int blended7 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b19);
HXDLIN( 120)										{
HXLINE( 120)											int _hx_tmp21;
HXDLIN( 120)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)												_hx_tmp21 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXLINE( 120)												_hx_tmp21 = blended7;
            											}
HXDLIN( 120)											::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp21);
            										}
            									}
            									else {
HXLINE( 120)										int value6;
HXDLIN( 120)										if (pixelImage->isLittle) {
HXLINE( 120)											value6 = ((((a53 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 120)											value6 = ((((a53 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 120)										::iterMagic::Iimg_obj::set(pixelImage->image,location7,value6);
            									}
            								}
HXLINE( 121)								{
HXLINE( 121)									int location8;
HXDLIN( 121)									if (pixelImage->useVirtualPos) {
HXLINE( 121)										location8 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 121)										location8 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 121)									bool _hx_tmp22;
HXDLIN( 121)									if (pixelImage->transparent) {
HXLINE( 121)										_hx_tmp22 = (a53 < 254);
            									}
            									else {
HXLINE( 121)										_hx_tmp22 = false;
            									}
HXDLIN( 121)									if (_hx_tmp22) {
HXLINE( 121)										int this86 = ::iterMagic::Iimg_obj::get(pixelImage->image,location8);
HXDLIN( 121)										int old7;
HXDLIN( 121)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)											old7 = ((((((this86 >> 24) & 255) << 24) | ((this86 & 255) << 16)) | (((this86 >> 8) & 255) << 8)) | ((this86 >> 16) & 255));
            										}
            										else {
HXLINE( 121)											old7 = this86;
            										}
HXDLIN( 121)										int rhs7 = ((((a53 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 121)										Float a110;
HXDLIN( 121)										int this87 = ((old7 >> 24) & 255);
HXDLIN( 121)										if ((this87 == 0)) {
HXLINE( 121)											a110 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											a110 = (( (Float)(this87) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float r18;
HXDLIN( 121)										int this88 = ((old7 >> 16) & 255);
HXDLIN( 121)										if ((this88 == 0)) {
HXLINE( 121)											r18 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											r18 = (( (Float)(this88) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float g18;
HXDLIN( 121)										int this89 = ((old7 >> 8) & 255);
HXDLIN( 121)										if ((this89 == 0)) {
HXLINE( 121)											g18 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											g18 = (( (Float)(this89) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float b110;
HXDLIN( 121)										int this90 = (old7 & 255);
HXDLIN( 121)										if ((this90 == 0)) {
HXLINE( 121)											b110 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											b110 = (( (Float)(this90) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float a28;
HXDLIN( 121)										int this91 = ((rhs7 >> 24) & 255);
HXDLIN( 121)										if ((this91 == 0)) {
HXLINE( 121)											a28 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											a28 = (( (Float)(this91) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float r28;
HXDLIN( 121)										int this92 = ((rhs7 >> 16) & 255);
HXDLIN( 121)										if ((this92 == 0)) {
HXLINE( 121)											r28 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											r28 = (( (Float)(this92) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float g28;
HXDLIN( 121)										int this93 = ((rhs7 >> 8) & 255);
HXDLIN( 121)										if ((this93 == 0)) {
HXLINE( 121)											g28 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											g28 = (( (Float)(this93) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float b29;
HXDLIN( 121)										int this94 = (rhs7 & 255);
HXDLIN( 121)										if ((this94 == 0)) {
HXLINE( 121)											b29 = ((Float)0.);
            										}
            										else {
HXLINE( 121)											b29 = (( (Float)(this94) ) / ( (Float)(255) ));
            										}
HXDLIN( 121)										Float a38 = (a110 * (( (Float)(1) ) - a28));
HXDLIN( 121)										int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a28))));
HXDLIN( 121)										int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a28))));
HXDLIN( 121)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a38) + (b29 * a28))));
HXDLIN( 121)										int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a28)));
HXDLIN( 121)										int blended8 = ((((a29 << 24) | (r19 << 16)) | (g19 << 8)) | b20);
HXDLIN( 121)										{
HXLINE( 121)											int _hx_tmp23;
HXDLIN( 121)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)												_hx_tmp23 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            											}
            											else {
HXLINE( 121)												_hx_tmp23 = blended8;
            											}
HXDLIN( 121)											::iterMagic::Iimg_obj::set(pixelImage->image,location8,_hx_tmp23);
            										}
            									}
            									else {
HXLINE( 121)										int value7;
HXDLIN( 121)										if (pixelImage->isLittle) {
HXLINE( 121)											value7 = ((((a53 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 121)											value7 = ((((a53 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 121)										::iterMagic::Iimg_obj::set(pixelImage->image,location8,value7);
            									}
            								}
            							}
            						}
HXLINE( 124)						s = ((s0 + sxx4) + (sy * (y5 + y4)));
HXLINE( 125)						t = ((t0 + txx4) + (ty * (y5 + y4)));
HXLINE( 126)						bool _hx_tmp24;
HXDLIN( 126)						if (!((s <= 0))) {
HXLINE( 126)							_hx_tmp24 = (t <= 0);
            						}
            						else {
HXLINE( 126)							_hx_tmp24 = true;
            						}
HXDLIN( 126)						if (!(_hx_tmp24)) {
HXLINE( 127)							if (((s + t) < A)) {
HXLINE( 128)								int i10 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN( 128)								if ((i10 > 255)) {
HXLINE(  24)									i10 = 255;
            								}
HXLINE( 128)								if ((i10 < 0)) {
HXLINE(  25)									i10 = 0;
            								}
HXLINE( 128)								int a54 = i10;
HXLINE( 129)								{
HXLINE( 129)									int location9;
HXDLIN( 129)									if (pixelImage->useVirtualPos) {
HXLINE( 129)										location9 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 129)										location9 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 129)									bool _hx_tmp25;
HXDLIN( 129)									if (pixelImage->transparent) {
HXLINE( 129)										_hx_tmp25 = (a54 < 254);
            									}
            									else {
HXLINE( 129)										_hx_tmp25 = false;
            									}
HXDLIN( 129)									if (_hx_tmp25) {
HXLINE( 129)										int this95 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN( 129)										int old8;
HXDLIN( 129)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 129)											old8 = ((((((this95 >> 24) & 255) << 24) | ((this95 & 255) << 16)) | (((this95 >> 8) & 255) << 8)) | ((this95 >> 16) & 255));
            										}
            										else {
HXLINE( 129)											old8 = this95;
            										}
HXDLIN( 129)										int rhs8 = ((((a54 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 129)										Float a111;
HXDLIN( 129)										int this96 = ((old8 >> 24) & 255);
HXDLIN( 129)										if ((this96 == 0)) {
HXLINE( 129)											a111 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											a111 = (( (Float)(this96) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float r110;
HXDLIN( 129)										int this97 = ((old8 >> 16) & 255);
HXDLIN( 129)										if ((this97 == 0)) {
HXLINE( 129)											r110 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											r110 = (( (Float)(this97) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float g110;
HXDLIN( 129)										int this98 = ((old8 >> 8) & 255);
HXDLIN( 129)										if ((this98 == 0)) {
HXLINE( 129)											g110 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											g110 = (( (Float)(this98) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float b111;
HXDLIN( 129)										int this99 = (old8 & 255);
HXDLIN( 129)										if ((this99 == 0)) {
HXLINE( 129)											b111 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											b111 = (( (Float)(this99) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float a210;
HXDLIN( 129)										int this100 = ((rhs8 >> 24) & 255);
HXDLIN( 129)										if ((this100 == 0)) {
HXLINE( 129)											a210 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											a210 = (( (Float)(this100) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float r29;
HXDLIN( 129)										int this101 = ((rhs8 >> 16) & 255);
HXDLIN( 129)										if ((this101 == 0)) {
HXLINE( 129)											r29 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											r29 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float g29;
HXDLIN( 129)										int this102 = ((rhs8 >> 8) & 255);
HXDLIN( 129)										if ((this102 == 0)) {
HXLINE( 129)											g29 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											g29 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float b210;
HXDLIN( 129)										int this103 = (rhs8 & 255);
HXDLIN( 129)										if ((this103 == 0)) {
HXLINE( 129)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 129)											b210 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 129)										Float a39 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 129)										int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r29 * a210))));
HXDLIN( 129)										int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g29 * a210))));
HXDLIN( 129)										int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a39) + (b210 * a210))));
HXDLIN( 129)										int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN( 129)										int blended9 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b30);
HXDLIN( 129)										{
HXLINE( 129)											int _hx_tmp26;
HXDLIN( 129)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 129)												_hx_tmp26 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            											}
            											else {
HXLINE( 129)												_hx_tmp26 = blended9;
            											}
HXDLIN( 129)											::iterMagic::Iimg_obj::set(pixelImage->image,location9,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 129)										int value8;
HXDLIN( 129)										if (pixelImage->isLittle) {
HXLINE( 129)											value8 = ((((a54 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 129)											value8 = ((((a54 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 129)										::iterMagic::Iimg_obj::set(pixelImage->image,location9,value8);
            									}
            								}
HXLINE( 130)								{
HXLINE( 130)									int location10;
HXDLIN( 130)									if (pixelImage->useVirtualPos) {
HXLINE( 130)										location10 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 130)										location10 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 130)									bool _hx_tmp27;
HXDLIN( 130)									if (pixelImage->transparent) {
HXLINE( 130)										_hx_tmp27 = (a54 < 254);
            									}
            									else {
HXLINE( 130)										_hx_tmp27 = false;
            									}
HXDLIN( 130)									if (_hx_tmp27) {
HXLINE( 130)										int this104 = ::iterMagic::Iimg_obj::get(pixelImage->image,location10);
HXDLIN( 130)										int old9;
HXDLIN( 130)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 130)											old9 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            										}
            										else {
HXLINE( 130)											old9 = this104;
            										}
HXDLIN( 130)										int rhs9 = ((((a54 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 130)										Float a112;
HXDLIN( 130)										int this105 = ((old9 >> 24) & 255);
HXDLIN( 130)										if ((this105 == 0)) {
HXLINE( 130)											a112 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											a112 = (( (Float)(this105) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float r111;
HXDLIN( 130)										int this106 = ((old9 >> 16) & 255);
HXDLIN( 130)										if ((this106 == 0)) {
HXLINE( 130)											r111 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											r111 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float g111;
HXDLIN( 130)										int this107 = ((old9 >> 8) & 255);
HXDLIN( 130)										if ((this107 == 0)) {
HXLINE( 130)											g111 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											g111 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float b112;
HXDLIN( 130)										int this108 = (old9 & 255);
HXDLIN( 130)										if ((this108 == 0)) {
HXLINE( 130)											b112 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											b112 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float a211;
HXDLIN( 130)										int this109 = ((rhs9 >> 24) & 255);
HXDLIN( 130)										if ((this109 == 0)) {
HXLINE( 130)											a211 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											a211 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float r210;
HXDLIN( 130)										int this110 = ((rhs9 >> 16) & 255);
HXDLIN( 130)										if ((this110 == 0)) {
HXLINE( 130)											r210 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											r210 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float g210;
HXDLIN( 130)										int this111 = ((rhs9 >> 8) & 255);
HXDLIN( 130)										if ((this111 == 0)) {
HXLINE( 130)											g210 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											g210 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float b211;
HXDLIN( 130)										int this112 = (rhs9 & 255);
HXDLIN( 130)										if ((this112 == 0)) {
HXLINE( 130)											b211 = ((Float)0.);
            										}
            										else {
HXLINE( 130)											b211 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 130)										Float a310 = (a112 * (( (Float)(1) ) - a211));
HXDLIN( 130)										int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a211))));
HXDLIN( 130)										int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a211))));
HXDLIN( 130)										int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a310) + (b211 * a211))));
HXDLIN( 130)										int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 130)										int blended10 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b31);
HXDLIN( 130)										{
HXLINE( 130)											int _hx_tmp28;
HXDLIN( 130)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 130)												_hx_tmp28 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            											}
            											else {
HXLINE( 130)												_hx_tmp28 = blended10;
            											}
HXDLIN( 130)											::iterMagic::Iimg_obj::set(pixelImage->image,location10,_hx_tmp28);
            										}
            									}
            									else {
HXLINE( 130)										int value9;
HXDLIN( 130)										if (pixelImage->isLittle) {
HXLINE( 130)											value9 = ((((a54 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 130)											value9 = ((((a54 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 130)										::iterMagic::Iimg_obj::set(pixelImage->image,location10,value9);
            									}
            								}
            							}
            						}
HXLINE( 133)						s = ((s0 + sxx5) + (sy * ( (Float)(y5) )));
HXLINE( 134)						t = ((t0 + txx5) + (ty * ( (Float)(y5) )));
HXLINE( 135)						bool _hx_tmp29;
HXDLIN( 135)						if (!((s <= 0))) {
HXLINE( 135)							_hx_tmp29 = (t <= 0);
            						}
            						else {
HXLINE( 135)							_hx_tmp29 = true;
            						}
HXDLIN( 135)						if (!(_hx_tmp29)) {
HXLINE( 136)							if (((s + t) < A)) {
HXLINE( 137)								int i11 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN( 137)								if ((i11 > 255)) {
HXLINE(  24)									i11 = 255;
            								}
HXLINE( 137)								if ((i11 < 0)) {
HXLINE(  25)									i11 = 0;
            								}
HXLINE( 137)								int a55 = i11;
HXLINE( 138)								{
HXLINE( 138)									int location11;
HXDLIN( 138)									if (pixelImage->useVirtualPos) {
HXLINE( 138)										location11 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 138)										location11 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 138)									bool _hx_tmp30;
HXDLIN( 138)									if (pixelImage->transparent) {
HXLINE( 138)										_hx_tmp30 = (a55 < 254);
            									}
            									else {
HXLINE( 138)										_hx_tmp30 = false;
            									}
HXDLIN( 138)									if (_hx_tmp30) {
HXLINE( 138)										int this113 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN( 138)										int old10;
HXDLIN( 138)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)											old10 = ((((((this113 >> 24) & 255) << 24) | ((this113 & 255) << 16)) | (((this113 >> 8) & 255) << 8)) | ((this113 >> 16) & 255));
            										}
            										else {
HXLINE( 138)											old10 = this113;
            										}
HXDLIN( 138)										int rhs10 = ((((a55 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 138)										Float a113;
HXDLIN( 138)										int this114 = ((old10 >> 24) & 255);
HXDLIN( 138)										if ((this114 == 0)) {
HXLINE( 138)											a113 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											a113 = (( (Float)(this114) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float r112;
HXDLIN( 138)										int this115 = ((old10 >> 16) & 255);
HXDLIN( 138)										if ((this115 == 0)) {
HXLINE( 138)											r112 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											r112 = (( (Float)(this115) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float g112;
HXDLIN( 138)										int this116 = ((old10 >> 8) & 255);
HXDLIN( 138)										if ((this116 == 0)) {
HXLINE( 138)											g112 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											g112 = (( (Float)(this116) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float b113;
HXDLIN( 138)										int this117 = (old10 & 255);
HXDLIN( 138)										if ((this117 == 0)) {
HXLINE( 138)											b113 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											b113 = (( (Float)(this117) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float a212;
HXDLIN( 138)										int this118 = ((rhs10 >> 24) & 255);
HXDLIN( 138)										if ((this118 == 0)) {
HXLINE( 138)											a212 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											a212 = (( (Float)(this118) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float r211;
HXDLIN( 138)										int this119 = ((rhs10 >> 16) & 255);
HXDLIN( 138)										if ((this119 == 0)) {
HXLINE( 138)											r211 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											r211 = (( (Float)(this119) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float g211;
HXDLIN( 138)										int this120 = ((rhs10 >> 8) & 255);
HXDLIN( 138)										if ((this120 == 0)) {
HXLINE( 138)											g211 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											g211 = (( (Float)(this120) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float b212;
HXDLIN( 138)										int this121 = (rhs10 & 255);
HXDLIN( 138)										if ((this121 == 0)) {
HXLINE( 138)											b212 = ((Float)0.);
            										}
            										else {
HXLINE( 138)											b212 = (( (Float)(this121) ) / ( (Float)(255) ));
            										}
HXDLIN( 138)										Float a311 = (a113 * (( (Float)(1) ) - a212));
HXDLIN( 138)										int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a212))));
HXDLIN( 138)										int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a212))));
HXDLIN( 138)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a311) + (b212 * a212))));
HXDLIN( 138)										int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 138)										int blended11 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b32);
HXDLIN( 138)										{
HXLINE( 138)											int _hx_tmp31;
HXDLIN( 138)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)												_hx_tmp31 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            											}
            											else {
HXLINE( 138)												_hx_tmp31 = blended11;
            											}
HXDLIN( 138)											::iterMagic::Iimg_obj::set(pixelImage->image,location11,_hx_tmp31);
            										}
            									}
            									else {
HXLINE( 138)										int value10;
HXDLIN( 138)										if (pixelImage->isLittle) {
HXLINE( 138)											value10 = ((((a55 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 138)											value10 = ((((a55 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 138)										::iterMagic::Iimg_obj::set(pixelImage->image,location11,value10);
            									}
            								}
HXLINE( 139)								{
HXLINE( 139)									int location12;
HXDLIN( 139)									if (pixelImage->useVirtualPos) {
HXLINE( 139)										location12 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 139)										location12 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 139)									bool _hx_tmp32;
HXDLIN( 139)									if (pixelImage->transparent) {
HXLINE( 139)										_hx_tmp32 = (a55 < 254);
            									}
            									else {
HXLINE( 139)										_hx_tmp32 = false;
            									}
HXDLIN( 139)									if (_hx_tmp32) {
HXLINE( 139)										int this122 = ::iterMagic::Iimg_obj::get(pixelImage->image,location12);
HXDLIN( 139)										int old11;
HXDLIN( 139)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)											old11 = ((((((this122 >> 24) & 255) << 24) | ((this122 & 255) << 16)) | (((this122 >> 8) & 255) << 8)) | ((this122 >> 16) & 255));
            										}
            										else {
HXLINE( 139)											old11 = this122;
            										}
HXDLIN( 139)										int rhs11 = ((((a55 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 139)										Float a114;
HXDLIN( 139)										int this123 = ((old11 >> 24) & 255);
HXDLIN( 139)										if ((this123 == 0)) {
HXLINE( 139)											a114 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											a114 = (( (Float)(this123) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float r113;
HXDLIN( 139)										int this124 = ((old11 >> 16) & 255);
HXDLIN( 139)										if ((this124 == 0)) {
HXLINE( 139)											r113 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											r113 = (( (Float)(this124) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float g113;
HXDLIN( 139)										int this125 = ((old11 >> 8) & 255);
HXDLIN( 139)										if ((this125 == 0)) {
HXLINE( 139)											g113 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											g113 = (( (Float)(this125) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float b114;
HXDLIN( 139)										int this126 = (old11 & 255);
HXDLIN( 139)										if ((this126 == 0)) {
HXLINE( 139)											b114 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											b114 = (( (Float)(this126) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float a213;
HXDLIN( 139)										int this127 = ((rhs11 >> 24) & 255);
HXDLIN( 139)										if ((this127 == 0)) {
HXLINE( 139)											a213 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											a213 = (( (Float)(this127) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float r212;
HXDLIN( 139)										int this128 = ((rhs11 >> 16) & 255);
HXDLIN( 139)										if ((this128 == 0)) {
HXLINE( 139)											r212 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											r212 = (( (Float)(this128) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float g212;
HXDLIN( 139)										int this129 = ((rhs11 >> 8) & 255);
HXDLIN( 139)										if ((this129 == 0)) {
HXLINE( 139)											g212 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											g212 = (( (Float)(this129) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float b213;
HXDLIN( 139)										int this130 = (rhs11 & 255);
HXDLIN( 139)										if ((this130 == 0)) {
HXLINE( 139)											b213 = ((Float)0.);
            										}
            										else {
HXLINE( 139)											b213 = (( (Float)(this130) ) / ( (Float)(255) ));
            										}
HXDLIN( 139)										Float a312 = (a114 * (( (Float)(1) ) - a213));
HXDLIN( 139)										int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r212 * a213))));
HXDLIN( 139)										int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g212 * a213))));
HXDLIN( 139)										int b33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a312) + (b213 * a213))));
HXDLIN( 139)										int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 139)										int blended12 = ((((a42 << 24) | (r32 << 16)) | (g32 << 8)) | b33);
HXDLIN( 139)										{
HXLINE( 139)											int _hx_tmp33;
HXDLIN( 139)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)												_hx_tmp33 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE( 139)												_hx_tmp33 = blended12;
            											}
HXDLIN( 139)											::iterMagic::Iimg_obj::set(pixelImage->image,location12,_hx_tmp33);
            										}
            									}
            									else {
HXLINE( 139)										int value11;
HXDLIN( 139)										if (pixelImage->isLittle) {
HXLINE( 139)											value11 = ((((a55 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 139)											value11 = ((((a55 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 139)										::iterMagic::Iimg_obj::set(pixelImage->image,location12,value11);
            									}
            								}
            							}
            						}
HXLINE( 142)						s = ((s0 + sxx6) + (sy * ( (Float)(y5) )));
HXLINE( 143)						t = ((t0 + txx6) + (ty * ( (Float)(y5) )));
HXLINE( 144)						bool _hx_tmp34;
HXDLIN( 144)						if (!((s <= 0))) {
HXLINE( 144)							_hx_tmp34 = (t <= 0);
            						}
            						else {
HXLINE( 144)							_hx_tmp34 = true;
            						}
HXDLIN( 144)						if (!(_hx_tmp34)) {
HXLINE( 145)							if (((s + t) < A)) {
HXLINE( 146)								int i12 = ::Std_obj::_hx_int((( (Float)(a) ) / ( (Float)(14) )));
HXDLIN( 146)								if ((i12 > 255)) {
HXLINE(  24)									i12 = 255;
            								}
HXLINE( 146)								if ((i12 < 0)) {
HXLINE(  25)									i12 = 0;
            								}
HXLINE( 146)								int a56 = i12;
HXLINE( 147)								{
HXLINE( 147)									int location13;
HXDLIN( 147)									if (pixelImage->useVirtualPos) {
HXLINE( 147)										location13 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 147)										location13 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 147)									bool _hx_tmp35;
HXDLIN( 147)									if (pixelImage->transparent) {
HXLINE( 147)										_hx_tmp35 = (a56 < 254);
            									}
            									else {
HXLINE( 147)										_hx_tmp35 = false;
            									}
HXDLIN( 147)									if (_hx_tmp35) {
HXLINE( 147)										int this131 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN( 147)										int old12;
HXDLIN( 147)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 147)											old12 = ((((((this131 >> 24) & 255) << 24) | ((this131 & 255) << 16)) | (((this131 >> 8) & 255) << 8)) | ((this131 >> 16) & 255));
            										}
            										else {
HXLINE( 147)											old12 = this131;
            										}
HXDLIN( 147)										int rhs12 = ((((a56 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 147)										Float a115;
HXDLIN( 147)										int this132 = ((old12 >> 24) & 255);
HXDLIN( 147)										if ((this132 == 0)) {
HXLINE( 147)											a115 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											a115 = (( (Float)(this132) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float r114;
HXDLIN( 147)										int this133 = ((old12 >> 16) & 255);
HXDLIN( 147)										if ((this133 == 0)) {
HXLINE( 147)											r114 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											r114 = (( (Float)(this133) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float g114;
HXDLIN( 147)										int this134 = ((old12 >> 8) & 255);
HXDLIN( 147)										if ((this134 == 0)) {
HXLINE( 147)											g114 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											g114 = (( (Float)(this134) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float b115;
HXDLIN( 147)										int this135 = (old12 & 255);
HXDLIN( 147)										if ((this135 == 0)) {
HXLINE( 147)											b115 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											b115 = (( (Float)(this135) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float a214;
HXDLIN( 147)										int this136 = ((rhs12 >> 24) & 255);
HXDLIN( 147)										if ((this136 == 0)) {
HXLINE( 147)											a214 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											a214 = (( (Float)(this136) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float r213;
HXDLIN( 147)										int this137 = ((rhs12 >> 16) & 255);
HXDLIN( 147)										if ((this137 == 0)) {
HXLINE( 147)											r213 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											r213 = (( (Float)(this137) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float g213;
HXDLIN( 147)										int this138 = ((rhs12 >> 8) & 255);
HXDLIN( 147)										if ((this138 == 0)) {
HXLINE( 147)											g213 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											g213 = (( (Float)(this138) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float b214;
HXDLIN( 147)										int this139 = (rhs12 & 255);
HXDLIN( 147)										if ((this139 == 0)) {
HXLINE( 147)											b214 = ((Float)0.);
            										}
            										else {
HXLINE( 147)											b214 = (( (Float)(this139) ) / ( (Float)(255) ));
            										}
HXDLIN( 147)										Float a313 = (a115 * (( (Float)(1) ) - a214));
HXDLIN( 147)										int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a313) + (r213 * a214))));
HXDLIN( 147)										int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a313) + (g213 * a214))));
HXDLIN( 147)										int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a313) + (b214 * a214))));
HXDLIN( 147)										int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 147)										int blended13 = ((((a43 << 24) | (r33 << 16)) | (g33 << 8)) | b34);
HXDLIN( 147)										{
HXLINE( 147)											int _hx_tmp36;
HXDLIN( 147)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 147)												_hx_tmp36 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            											}
            											else {
HXLINE( 147)												_hx_tmp36 = blended13;
            											}
HXDLIN( 147)											::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp36);
            										}
            									}
            									else {
HXLINE( 147)										int value12;
HXDLIN( 147)										if (pixelImage->isLittle) {
HXLINE( 147)											value12 = ((((a56 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 147)											value12 = ((((a56 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 147)										::iterMagic::Iimg_obj::set(pixelImage->image,location13,value12);
            									}
            								}
HXLINE( 148)								{
HXLINE( 148)									int location14;
HXDLIN( 148)									if (pixelImage->useVirtualPos) {
HXLINE( 148)										location14 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 148)										location14 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            									}
HXDLIN( 148)									bool _hx_tmp37;
HXDLIN( 148)									if (pixelImage->transparent) {
HXLINE( 148)										_hx_tmp37 = (a56 < 254);
            									}
            									else {
HXLINE( 148)										_hx_tmp37 = false;
            									}
HXDLIN( 148)									if (_hx_tmp37) {
HXLINE( 148)										int this140 = ::iterMagic::Iimg_obj::get(pixelImage->image,location14);
HXDLIN( 148)										int old13;
HXDLIN( 148)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 148)											old13 = ((((((this140 >> 24) & 255) << 24) | ((this140 & 255) << 16)) | (((this140 >> 8) & 255) << 8)) | ((this140 >> 16) & 255));
            										}
            										else {
HXLINE( 148)											old13 = this140;
            										}
HXDLIN( 148)										int rhs13 = ((((a56 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 148)										Float a116;
HXDLIN( 148)										int this141 = ((old13 >> 24) & 255);
HXDLIN( 148)										if ((this141 == 0)) {
HXLINE( 148)											a116 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											a116 = (( (Float)(this141) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float r115;
HXDLIN( 148)										int this142 = ((old13 >> 16) & 255);
HXDLIN( 148)										if ((this142 == 0)) {
HXLINE( 148)											r115 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											r115 = (( (Float)(this142) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float g115;
HXDLIN( 148)										int this143 = ((old13 >> 8) & 255);
HXDLIN( 148)										if ((this143 == 0)) {
HXLINE( 148)											g115 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											g115 = (( (Float)(this143) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float b116;
HXDLIN( 148)										int this144 = (old13 & 255);
HXDLIN( 148)										if ((this144 == 0)) {
HXLINE( 148)											b116 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											b116 = (( (Float)(this144) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float a215;
HXDLIN( 148)										int this145 = ((rhs13 >> 24) & 255);
HXDLIN( 148)										if ((this145 == 0)) {
HXLINE( 148)											a215 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											a215 = (( (Float)(this145) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float r214;
HXDLIN( 148)										int this146 = ((rhs13 >> 16) & 255);
HXDLIN( 148)										if ((this146 == 0)) {
HXLINE( 148)											r214 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											r214 = (( (Float)(this146) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float g214;
HXDLIN( 148)										int this147 = ((rhs13 >> 8) & 255);
HXDLIN( 148)										if ((this147 == 0)) {
HXLINE( 148)											g214 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											g214 = (( (Float)(this147) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float b215;
HXDLIN( 148)										int this148 = (rhs13 & 255);
HXDLIN( 148)										if ((this148 == 0)) {
HXLINE( 148)											b215 = ((Float)0.);
            										}
            										else {
HXLINE( 148)											b215 = (( (Float)(this148) ) / ( (Float)(255) ));
            										}
HXDLIN( 148)										Float a314 = (a116 * (( (Float)(1) ) - a215));
HXDLIN( 148)										int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a314) + (r214 * a215))));
HXDLIN( 148)										int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a314) + (g214 * a215))));
HXDLIN( 148)										int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a314) + (b215 * a215))));
HXDLIN( 148)										int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 148)										int blended14 = ((((a44 << 24) | (r34 << 16)) | (g34 << 8)) | b35);
HXDLIN( 148)										{
HXLINE( 148)											int _hx_tmp38;
HXDLIN( 148)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 148)												_hx_tmp38 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            											}
            											else {
HXLINE( 148)												_hx_tmp38 = blended14;
            											}
HXDLIN( 148)											::iterMagic::Iimg_obj::set(pixelImage->image,location14,_hx_tmp38);
            										}
            									}
            									else {
HXLINE( 148)										int value13;
HXDLIN( 148)										if (pixelImage->isLittle) {
HXLINE( 148)											value13 = ((((a56 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 148)											value13 = ((((a56 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 148)										::iterMagic::Iimg_obj::set(pixelImage->image,location14,value13);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 153)		pixelImage->transparent = transparent;
HXLINE( 154)		if ((hasHit == true)) {
HXLINE( 155)			 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXLINE( 156)			if (hasUndo) {
HXLINE( 157)				v2->undoImage = undoImage;
HXLINE( 158)				v2->undoX = xIter3->start;
HXLINE( 159)				v2->undoY = yIter3->start;
            			}
HXLINE( 161)			return v2;
            		}
            		else {
HXLINE( 163)			return null();
            		}
HXLINE( 154)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(TriPixelOld_Fields__obj,fillTriUnsafe5,return )

 ::pi_xy::algo::HitTri TriPixelOld_Fields__obj::fillTriUnsafe6( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  __o_hasHit,::hx::Null< bool >  __o_hasUndo){
            		bool hasHit = __o_hasHit.Default(false);
            		bool hasUndo = __o_hasUndo.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5dfb5a19b5dac31e_172_fillTriUnsafe6)
HXLINE( 173)		bool transparent = pixelImage->transparent;
HXLINE( 174)		pixelImage->transparent = true;
HXLINE( 175)		int a = ((color >> 24) & 255);
HXLINE( 176)		int r = ((color >> 16) & 255);
HXLINE( 177)		int g = ((color >> 8) & 255);
HXLINE( 178)		int b = (color & 255);
HXLINE( 179)		Float s0 = ((ay * cx) - (ax * cy));
HXLINE( 180)		Float sx = (cy - ay);
HXLINE( 181)		Float sy = (ax - cx);
HXLINE( 182)		Float t0 = ((ax * by) - (ay * bx));
HXLINE( 183)		Float tx = (ay - by);
HXLINE( 184)		Float ty = (bx - ax);
HXLINE( 185)		Float A = ((((-(by) * cx) + (ay * (-(bx) + cx))) + (ax * (by - cy))) + (bx * cy));
HXLINE( 186)		 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 186)		if ((ax > bx)) {
HXLINE( 186)			if ((ax > cx)) {
HXLINE( 186)				int min;
HXDLIN( 186)				if ((bx > cx)) {
HXLINE( 186)					min = ::Math_obj::floor(cx);
            				}
            				else {
HXLINE( 186)					min = ::Math_obj::floor(bx);
            				}
HXDLIN( 186)				int ii_min = min;
HXDLIN( 186)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 186)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXLINE( 186)				int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 186)				int ii_max1 = ::Math_obj::ceil(cx);
HXDLIN( 186)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXLINE( 186)			if ((bx > cx)) {
HXLINE( 186)				int min1;
HXDLIN( 186)				if ((ax > cx)) {
HXLINE( 186)					min1 = ::Math_obj::floor(cx);
            				}
            				else {
HXLINE( 186)					min1 = ::Math_obj::ceil(ax);
            				}
HXDLIN( 186)				int ii_min2 = min1;
HXDLIN( 186)				int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 186)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXLINE( 186)				int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 186)				int ii_max3 = ::Math_obj::ceil(cx);
HXDLIN( 186)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXLINE( 187)		 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 187)		if ((ay > by)) {
HXLINE( 187)			if ((ay > cy)) {
HXLINE( 187)				int min2;
HXDLIN( 187)				if ((by > cy)) {
HXLINE( 187)					min2 = ::Math_obj::floor(cy);
            				}
            				else {
HXLINE( 187)					min2 = ::Math_obj::floor(by);
            				}
HXDLIN( 187)				int ii_min4 = min2;
HXDLIN( 187)				int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 187)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            			}
            			else {
HXLINE( 187)				int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 187)				int ii_max5 = ::Math_obj::ceil(cy);
HXDLIN( 187)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            			}
            		}
            		else {
HXLINE( 187)			if ((by > cy)) {
HXLINE( 187)				int min3;
HXDLIN( 187)				if ((ay > cy)) {
HXLINE( 187)					min3 = ::Math_obj::floor(cy);
            				}
            				else {
HXLINE( 187)					min3 = ::Math_obj::ceil(ay);
            				}
HXDLIN( 187)				int ii_min6 = min3;
HXDLIN( 187)				int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 187)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            			}
            			else {
HXLINE( 187)				int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 187)				int ii_max7 = ::Math_obj::ceil(cy);
HXDLIN( 187)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            			}
            		}
HXLINE( 188)		 ::pi_xy::ImageStruct undoImage = null();
HXLINE( 189)		if (hasUndo) {
HXLINE( 190)			int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 190)			int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 190)			 ::Dynamic imageType = null();
HXDLIN( 190)			 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 190)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 190)			::Dynamic undoImage1;
HXDLIN( 190)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE( 190)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 190)					 ::iterMagic::BytesImg b1 = byt;
HXDLIN( 190)					{
HXLINE( 190)						b1->width = width;
HXDLIN( 190)						b1->height = height;
HXDLIN( 190)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 190)						b1->data = ::haxe::io::Bytes_obj::alloc((b1->length * 4));
HXDLIN( 190)						{
HXLINE( 190)							int len = b1->length;
HXDLIN( 190)							int w = 0;
HXDLIN( 190)							{
HXLINE( 190)								int _g = 0;
HXDLIN( 190)								int _g1 = b1->height;
HXDLIN( 190)								while((_g < _g1)){
HXLINE( 190)									_g = (_g + 1);
HXDLIN( 190)									int y = (_g - 1);
HXDLIN( 190)									{
HXLINE( 190)										int _g2 = 0;
HXDLIN( 190)										int _g3 = b1->width;
HXDLIN( 190)										while((_g2 < _g3)){
HXLINE( 190)											_g2 = (_g2 + 1);
HXDLIN( 190)											int x = (_g2 - 1);
HXDLIN( 190)											{
HXLINE( 190)												w = (w + 1);
HXDLIN( 190)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 190)											{
HXLINE( 190)												w = (w + 1);
HXDLIN( 190)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 190)											{
HXLINE( 190)												w = (w + 1);
HXDLIN( 190)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 190)											{
HXLINE( 190)												w = (w + 1);
HXDLIN( 190)												b1->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 190)					undoImage1 = b1;
            				}
            				break;
            				case (int)1: {
HXLINE( 190)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 190)					 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 190)					{
HXLINE( 190)						a1->width = width;
HXDLIN( 190)						a1->height = height;
HXDLIN( 190)						a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 190)						a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 190)						{
HXLINE( 190)							int _g4 = 0;
HXDLIN( 190)							int _g5 = a1->length;
HXDLIN( 190)							while((_g4 < _g5)){
HXLINE( 190)								_g4 = (_g4 + 1);
HXDLIN( 190)								int i = (_g4 - 1);
HXDLIN( 190)								a1->data[i] = 0;
            							}
            						}
            					}
HXDLIN( 190)					undoImage1 = a1;
            				}
            				break;
            				case (int)2: {
HXLINE( 190)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 190)					 ::iterMagic::U32ArrImg b2 = u32a;
HXDLIN( 190)					{
HXLINE( 190)						b2->width = width;
HXDLIN( 190)						b2->height = height;
HXDLIN( 190)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 190)						int size = (b2->length * 4);
HXDLIN( 190)						b2->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 190)						{
HXLINE( 190)							int _g6 = 0;
HXDLIN( 190)							int _g7 = b2->length;
HXDLIN( 190)							while((_g6 < _g7)){
HXLINE( 190)								_g6 = (_g6 + 1);
HXDLIN( 190)								int i1 = (_g6 - 1);
HXDLIN( 190)								{
HXLINE( 190)									 ::haxe::io::ArrayBufferViewImpl this2 = b2->data;
HXDLIN( 190)									bool undoImage2;
HXDLIN( 190)									if ((i1 >= 0)) {
HXLINE( 190)										undoImage2 = (i1 < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 190)										undoImage2 = false;
            									}
HXDLIN( 190)									if (undoImage2) {
HXLINE( 190)										 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 190)										int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 190)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 190)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 190)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 190)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 190)					undoImage1 = b2;
            				}
            				break;
            				case (int)3: {
HXLINE( 190)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 190)					 ::iterMagic::VecIntImg v = vec;
HXDLIN( 190)					{
HXLINE( 190)						v->width = width;
HXDLIN( 190)						v->height = height;
HXDLIN( 190)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 190)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 190)						{
HXLINE( 190)							int _g8 = 0;
HXDLIN( 190)							int _g9 = v->length;
HXDLIN( 190)							while((_g8 < _g9)){
HXLINE( 190)								_g8 = (_g8 + 1);
HXDLIN( 190)								int i2 = (_g8 - 1);
HXDLIN( 190)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN( 190)					undoImage1 = v;
            				}
            				break;
            				case (int)4: {
HXLINE( 190)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 190)					 ::iterMagic::StackIntImg b3 = sInt;
HXDLIN( 190)					{
HXLINE( 190)						b3->width = width;
HXDLIN( 190)						b3->height = height;
HXDLIN( 190)						b3->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 190)						b3->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 190)						{
HXLINE( 190)							int len1 = b3->length;
HXDLIN( 190)							 ::haxe::ds::GenericStack_Int d = b3->data;
HXDLIN( 190)							if (::hx::IsNull( d->head )) {
HXLINE( 190)								int _g10 = 0;
HXDLIN( 190)								int _g11 = len1;
HXDLIN( 190)								while((_g10 < _g11)){
HXLINE( 190)									_g10 = (_g10 + 1);
HXDLIN( 190)									int i3 = (_g10 - 1);
HXDLIN( 190)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE( 190)								int _g12 = 0;
HXDLIN( 190)								int _g13 = len1;
HXDLIN( 190)								while((_g12 < _g13)){
HXLINE( 190)									_g12 = (_g12 + 1);
HXDLIN( 190)									int i4 = (_g12 - 1);
HXDLIN( 190)									{
HXLINE( 190)										 ::haxe::ds::GenericCell_Int l = b3->data->head;
HXDLIN( 190)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 190)										{
HXLINE( 190)											int _g14 = 0;
HXDLIN( 190)											int _g15 = i4;
HXDLIN( 190)											while((_g14 < _g15)){
HXLINE( 190)												_g14 = (_g14 + 1);
HXDLIN( 190)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE( 190)										if (::hx::IsNull( prev )) {
HXLINE( 190)											b3->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 190)											l = null();
            										}
            										else {
HXLINE( 190)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 190)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 190)					undoImage1 = b3;
            				}
            				break;
            			}
HXDLIN( 190)			this1->image = undoImage1;
HXDLIN( 190)			this1->width = width;
HXDLIN( 190)			this1->height = height;
HXDLIN( 190)			this1->imageType = ( (int)(imageType) );
HXDLIN( 190)			undoImage = this1;
HXLINE( 191)			{
HXLINE( 191)				int rectLeft = xIter3->start;
HXDLIN( 191)				int rectTop = yIter3->start;
HXDLIN( 191)				int rectRight = xIter3->max;
HXDLIN( 191)				bool forceClear = false;
HXDLIN( 191)				{
HXLINE( 191)					int _g16 = rectTop;
HXDLIN( 191)					int _g17 = yIter3->max;
HXDLIN( 191)					while((_g16 < _g17)){
HXLINE( 191)						_g16 = (_g16 + 1);
HXDLIN( 191)						int dy = (_g16 - 1);
HXDLIN( 191)						{
HXLINE( 191)							int _g18 = rectLeft;
HXDLIN( 191)							int _g19 = rectRight;
HXDLIN( 191)							while((_g18 < _g19)){
HXLINE( 191)								_g18 = (_g18 + 1);
HXDLIN( 191)								int dx = (_g18 - 1);
HXDLIN( 191)								::Dynamic this3 = pixelImage->image;
HXDLIN( 191)								int index;
HXDLIN( 191)								if (pixelImage->useVirtualPos) {
HXLINE( 191)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 191)									index = ::Std_obj::_hx_int(( (Float)(((dy * pixelImage->width) + dx)) ));
            								}
HXDLIN( 191)								int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 191)								int col;
HXDLIN( 191)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 191)									col = c;
            								}
HXDLIN( 191)								bool _hx_tmp;
HXDLIN( 191)								if (pixelImage->useMask) {
HXLINE( 191)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 191)									_hx_tmp = false;
            								}
HXDLIN( 191)								if (_hx_tmp) {
HXLINE( 191)									 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 191)									::Dynamic this5 = this4->image;
HXDLIN( 191)									int index1;
HXDLIN( 191)									if (this4->useVirtualPos) {
HXLINE( 191)										index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx) - this4->virtualX));
            									}
            									else {
HXLINE( 191)										index1 = ::Std_obj::_hx_int(( (Float)(((dy * this4->width) + dx)) ));
            									}
HXDLIN( 191)									int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 191)									int v1;
HXDLIN( 191)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)										v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXLINE( 191)										v1 = c1;
            									}
HXDLIN( 191)									int maskPixel = v1;
HXDLIN( 191)									int this6 = col;
HXDLIN( 191)									if ((maskPixel == 0)) {
HXLINE( 191)										col = this6;
            									}
            									else {
HXLINE( 191)										Float m0;
HXDLIN( 191)										int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 191)										if ((this7 == 0)) {
HXLINE( 191)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float m1;
HXDLIN( 191)										int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 191)										if ((this8 == 0)) {
HXLINE( 191)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float m2;
HXDLIN( 191)										int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 191)										if ((this9 == 0)) {
HXLINE( 191)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float m3;
HXDLIN( 191)										int this10 = (maskPixel & 255);
HXDLIN( 191)										if ((this10 == 0)) {
HXLINE( 191)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 191)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 191)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 191)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 191)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 191)								if ((col != 0)) {
HXLINE( 191)									int x1 = (dx - rectLeft);
HXDLIN( 191)									int y1 = (dy - rectTop);
HXDLIN( 191)									int c2 = col;
HXDLIN( 191)									bool _hx_tmp1;
HXDLIN( 191)									if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 191)										_hx_tmp1 = undoImage->transparent;
            									}
            									else {
HXLINE( 191)										_hx_tmp1 = false;
            									}
HXDLIN( 191)									if (_hx_tmp1) {
HXLINE( 191)										int location;
HXDLIN( 191)										if (undoImage->useVirtualPos) {
HXLINE( 191)											location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE( 191)											location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 191)										int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 191)										int this12;
HXDLIN( 191)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)											this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            										}
            										else {
HXLINE( 191)											this12 = this11;
            										}
HXDLIN( 191)										Float a11;
HXDLIN( 191)										int this13 = ((this12 >> 24) & 255);
HXDLIN( 191)										if ((this13 == 0)) {
HXLINE( 191)											a11 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float r1;
HXDLIN( 191)										int this14 = ((this12 >> 16) & 255);
HXDLIN( 191)										if ((this14 == 0)) {
HXLINE( 191)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float g1;
HXDLIN( 191)										int this15 = ((this12 >> 8) & 255);
HXDLIN( 191)										if ((this15 == 0)) {
HXLINE( 191)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float b11;
HXDLIN( 191)										int this16 = (this12 & 255);
HXDLIN( 191)										if ((this16 == 0)) {
HXLINE( 191)											b11 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float a2;
HXDLIN( 191)										int this17 = ((col >> 24) & 255);
HXDLIN( 191)										if ((this17 == 0)) {
HXLINE( 191)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float r2;
HXDLIN( 191)										int this18 = ((col >> 16) & 255);
HXDLIN( 191)										if ((this18 == 0)) {
HXLINE( 191)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float g2;
HXDLIN( 191)										int this19 = ((col >> 8) & 255);
HXDLIN( 191)										if ((this19 == 0)) {
HXLINE( 191)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float b21;
HXDLIN( 191)										int this20 = (col & 255);
HXDLIN( 191)										if ((this20 == 0)) {
HXLINE( 191)											b21 = ((Float)0.);
            										}
            										else {
HXLINE( 191)											b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN( 191)										Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 191)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 191)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 191)										int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 191)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 191)										int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 191)										{
HXLINE( 191)											int _hx_tmp2;
HXDLIN( 191)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)												_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 191)												_hx_tmp2 = blended;
            											}
HXDLIN( 191)											::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 191)										::Dynamic this21 = undoImage->image;
HXDLIN( 191)										int index2;
HXDLIN( 191)										if (undoImage->useVirtualPos) {
HXLINE( 191)											index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE( 191)											index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 191)										int _hx_tmp3;
HXDLIN( 191)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)											_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            										}
            										else {
HXLINE( 191)											_hx_tmp3 = c2;
            										}
HXDLIN( 191)										::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 191)									if (forceClear) {
HXLINE( 191)										::Dynamic this22 = undoImage->image;
HXDLIN( 191)										int x2 = (dx - rectLeft);
HXDLIN( 191)										int y2 = (dy - rectTop);
HXDLIN( 191)										int index3;
HXDLIN( 191)										if (undoImage->useVirtualPos) {
HXLINE( 191)											index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            										}
            										else {
HXLINE( 191)											index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            										}
HXDLIN( 191)										::iterMagic::Iimg_obj::set(this22,index3,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 193)		Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(5) ));
HXLINE( 194)		Float omega = (theta / ( (Float)(3) ));
HXLINE( 195)		Float delta = ((Float)0.7071);
HXLINE( 196)		Float x0 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE( 197)		Float y0 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE( 198)		omega = (omega + theta);
HXLINE( 199)		Float x11 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE( 200)		Float y11 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE( 201)		omega = (omega + theta);
HXLINE( 202)		Float x21 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE( 203)		Float y21 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE( 204)		omega = (omega + theta);
HXLINE( 205)		Float x3 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE( 206)		Float y3 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE( 207)		omega = (omega + theta);
HXLINE( 208)		Float x4 = (delta * ::Math_obj::cos((theta + omega)));
HXLINE( 209)		Float y4 = (delta * ::Math_obj::sin((theta + omega)));
HXLINE( 210)		Float s = ((Float)0.);
HXLINE( 211)		Float t = ((Float)0.);
HXLINE( 212)		Float sxx = ((Float)0.);
HXLINE( 213)		Float txx = ((Float)0.);
HXLINE( 214)		Float sxx0 = ((Float)0.);
HXLINE( 215)		Float sxx1 = ((Float)0.);
HXLINE( 216)		Float sxx2 = ((Float)0.);
HXLINE( 217)		Float sxx3 = ((Float)0.);
HXLINE( 218)		Float sxx4 = ((Float)0.);
HXLINE( 219)		Float sxx5 = ((Float)0.);
HXLINE( 220)		Float sxx6 = ((Float)0.);
HXLINE( 221)		Float txx0 = ((Float)0.);
HXLINE( 222)		Float txx1 = ((Float)0.);
HXLINE( 223)		Float txx2 = ((Float)0.);
HXLINE( 224)		Float txx3 = ((Float)0.);
HXLINE( 225)		Float txx4 = ((Float)0.);
HXLINE( 226)		Float txx5 = ((Float)0.);
HXLINE( 227)		Float txx6 = ((Float)0.);
HXLINE( 228)		Float a7 = ((Float)0.);
HXLINE( 229)		bool found = false;
HXLINE( 230)		bool on = false;
HXLINE( 231)		{
HXLINE( 231)			int _g_min = xIter3->start;
HXDLIN( 231)			int _g_max = xIter3->max;
HXDLIN( 231)			while((_g_min < _g_max)){
HXLINE( 231)				_g_min = (_g_min + 1);
HXDLIN( 231)				int x5 = (_g_min - 1);
HXLINE( 232)				sxx0 = (sx * (x5 + x0));
HXLINE( 233)				sxx1 = (sx * (x5 + x11));
HXLINE( 234)				sxx2 = (sx * (x5 + x21));
HXLINE( 235)				sxx3 = (sx * (x5 + x3));
HXLINE( 236)				sxx4 = (sx * (x5 + x4));
HXLINE( 237)				sxx5 = (sx * ( (Float)(x5) ));
HXLINE( 238)				sxx6 = (sx * ( (Float)(x5) ));
HXLINE( 240)				txx0 = (tx * (x5 + x0));
HXLINE( 241)				txx1 = (tx * (x5 + x11));
HXLINE( 242)				txx2 = (tx * (x5 + x21));
HXLINE( 243)				txx3 = (tx * (x5 + x3));
HXLINE( 244)				txx4 = (tx * (x5 + x4));
HXLINE( 245)				txx5 = (tx * ( (Float)(x5) ));
HXLINE( 246)				txx6 = (tx * ( (Float)(x5) ));
HXLINE( 247)				found = false;
HXLINE( 248)				on = false;
HXLINE( 249)				{
HXLINE( 249)					int _g_min1 = yIter3->start;
HXDLIN( 249)					int _g_max1 = yIter3->max;
HXDLIN( 249)					while((_g_min1 < _g_max1)){
HXLINE( 249)						_g_min1 = (_g_min1 + 1);
HXDLIN( 249)						int y5 = (_g_min1 - 1);
HXLINE( 250)						a7 = ((Float)0.);
HXLINE( 251)						s = ((s0 + sxx0) + (sy * (y5 + y0)));
HXLINE( 252)						t = ((t0 + txx0) + (ty * (y5 + y0)));
HXLINE( 253)						bool _hx_tmp4;
HXDLIN( 253)						if (!((s <= 0))) {
HXLINE( 253)							_hx_tmp4 = (t <= 0);
            						}
            						else {
HXLINE( 253)							_hx_tmp4 = true;
            						}
HXDLIN( 253)						if (!(_hx_tmp4)) {
HXLINE( 253)							if (((s + t) < A)) {
HXLINE( 253)								a7 = (a7 + ((Float)0.2));
            							}
            						}
HXLINE( 254)						s = ((s0 + sxx1) + (sy * (y5 + y11)));
HXLINE( 255)						t = ((t0 + txx1) + (ty * (y5 + y11)));
HXLINE( 256)						bool _hx_tmp5;
HXDLIN( 256)						if (!((s <= 0))) {
HXLINE( 256)							_hx_tmp5 = (t <= 0);
            						}
            						else {
HXLINE( 256)							_hx_tmp5 = true;
            						}
HXDLIN( 256)						if (!(_hx_tmp5)) {
HXLINE( 256)							if (((s + t) < A)) {
HXLINE( 256)								a7 = (a7 + ((Float)0.2));
            							}
            						}
HXLINE( 257)						s = ((s0 + sxx2) + (sy * (y5 + y21)));
HXLINE( 258)						t = ((t0 + txx2) + (ty * (y5 + y21)));
HXLINE( 259)						bool _hx_tmp6;
HXDLIN( 259)						if (!((s <= 0))) {
HXLINE( 259)							_hx_tmp6 = (t <= 0);
            						}
            						else {
HXLINE( 259)							_hx_tmp6 = true;
            						}
HXDLIN( 259)						if (!(_hx_tmp6)) {
HXLINE( 259)							if (((s + t) < A)) {
HXLINE( 259)								a7 = (a7 + ((Float)0.2));
            							}
            						}
HXLINE( 260)						s = ((s0 + sxx3) + (sy * (y5 + y3)));
HXLINE( 261)						t = ((t0 + txx3) + (ty * (y5 + y3)));
HXLINE( 262)						bool _hx_tmp7;
HXDLIN( 262)						if (!((s <= 0))) {
HXLINE( 262)							_hx_tmp7 = (t <= 0);
            						}
            						else {
HXLINE( 262)							_hx_tmp7 = true;
            						}
HXDLIN( 262)						if (!(_hx_tmp7)) {
HXLINE( 262)							if (((s + t) < A)) {
HXLINE( 262)								a7 = (a7 + ((Float)0.2));
            							}
            						}
HXLINE( 263)						s = ((s0 + sxx4) + (sy * (y5 + y4)));
HXLINE( 264)						t = ((t0 + txx4) + (ty * (y5 + y4)));
HXLINE( 265)						bool _hx_tmp8;
HXDLIN( 265)						if (!((s <= 0))) {
HXLINE( 265)							_hx_tmp8 = (t <= 0);
            						}
            						else {
HXLINE( 265)							_hx_tmp8 = true;
            						}
HXDLIN( 265)						if (!(_hx_tmp8)) {
HXLINE( 265)							if (((s + t) < A)) {
HXLINE( 265)								a7 = (a7 + ((Float)0.2));
            							}
            						}
HXLINE( 266)						s = ((s0 + sxx5) + (sy * ( (Float)(y5) )));
HXLINE( 267)						t = ((t0 + txx5) + (ty * ( (Float)(y5) )));
HXLINE( 268)						bool _hx_tmp9;
HXDLIN( 268)						if (!((s <= 0))) {
HXLINE( 268)							_hx_tmp9 = (t <= 0);
            						}
            						else {
HXLINE( 268)							_hx_tmp9 = true;
            						}
HXDLIN( 268)						if (!(_hx_tmp9)) {
HXLINE( 271)							if (((s + t) < A)) {
HXLINE( 272)								a7 = (a7 + ((Float)0.5));
HXLINE( 273)								bool found1 = found;
HXLINE( 279)								found = true;
            							}
            						}
HXLINE( 287)						if ((a7 != ((Float)0.))) {
HXLINE( 288)							int a5;
HXLINE( 289)							if ((a7 > ((Float)0.9))) {
HXLINE( 288)								a5 = a;
            							}
            							else {
HXLINE( 289)								int i6 = ::Std_obj::_hx_int((( (Float)(a) ) * a7));
HXDLIN( 289)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 289)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 288)								a5 = i6;
            							}
HXDLIN( 288)							int location1;
HXLINE( 290)							if (pixelImage->useVirtualPos) {
HXLINE( 288)								location1 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            							}
            							else {
HXLINE( 288)								location1 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x5)) ));
            							}
HXDLIN( 288)							bool _hx_tmp10;
HXDLIN( 288)							if (pixelImage->transparent) {
HXLINE( 288)								_hx_tmp10 = (a5 < 254);
            							}
            							else {
HXLINE( 288)								_hx_tmp10 = false;
            							}
HXDLIN( 288)							if (_hx_tmp10) {
HXLINE( 288)								int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 288)								int old;
HXDLIN( 288)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 288)									old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            								}
            								else {
HXLINE( 288)									old = this23;
            								}
HXDLIN( 288)								int rhs = ((((a5 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 288)								Float a12;
HXDLIN( 288)								int this24 = ((old >> 24) & 255);
HXDLIN( 288)								if ((this24 == 0)) {
HXLINE( 288)									a12 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float r11;
HXDLIN( 288)								int this25 = ((old >> 16) & 255);
HXDLIN( 288)								if ((this25 == 0)) {
HXLINE( 288)									r11 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float g11;
HXDLIN( 288)								int this26 = ((old >> 8) & 255);
HXDLIN( 288)								if ((this26 == 0)) {
HXLINE( 288)									g11 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float b12;
HXDLIN( 288)								int this27 = (old & 255);
HXDLIN( 288)								if ((this27 == 0)) {
HXLINE( 288)									b12 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float a21;
HXDLIN( 288)								int this28 = ((rhs >> 24) & 255);
HXDLIN( 288)								if ((this28 == 0)) {
HXLINE( 288)									a21 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float r21;
HXDLIN( 288)								int this29 = ((rhs >> 16) & 255);
HXDLIN( 288)								if ((this29 == 0)) {
HXLINE( 288)									r21 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float g21;
HXDLIN( 288)								int this30 = ((rhs >> 8) & 255);
HXDLIN( 288)								if ((this30 == 0)) {
HXLINE( 288)									g21 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float b22;
HXDLIN( 288)								int this31 = (rhs & 255);
HXDLIN( 288)								if ((this31 == 0)) {
HXLINE( 288)									b22 = ((Float)0.);
            								}
            								else {
HXLINE( 288)									b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            								}
HXDLIN( 288)								Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 288)								int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 288)								int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 288)								int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 288)								int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 288)								int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 288)								{
HXLINE( 288)									int _hx_tmp11;
HXDLIN( 288)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 288)										_hx_tmp11 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            									}
            									else {
HXLINE( 288)										_hx_tmp11 = blended1;
            									}
HXDLIN( 288)									::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp11);
            								}
            							}
            							else {
HXLINE( 288)								int value;
HXDLIN( 288)								if (pixelImage->isLittle) {
HXLINE( 288)									value = ((((a5 << 24) | (b << 16)) | (g << 8)) | r);
            								}
            								else {
HXLINE( 288)									value = ((((a5 << 24) | (r << 16)) | (g << 8)) | b);
            								}
HXDLIN( 288)								::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 295)		pixelImage->transparent = transparent;
HXLINE( 296)		if ((hasHit == true)) {
HXLINE( 297)			 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXLINE( 298)			if (hasUndo) {
HXLINE( 299)				v2->undoImage = undoImage;
HXLINE( 300)				v2->undoX = xIter3->start;
HXLINE( 301)				v2->undoY = yIter3->start;
            			}
HXLINE( 303)			return v2;
            		}
            		else {
HXLINE( 305)			return null();
            		}
HXLINE( 296)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(TriPixelOld_Fields__obj,fillTriUnsafe6,return )


TriPixelOld_Fields__obj::TriPixelOld_Fields__obj()
{
}

bool TriPixelOld_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"fillTriUnsafe5") ) { outValue = fillTriUnsafe5_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillTriUnsafe6") ) { outValue = fillTriUnsafe6_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TriPixelOld_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TriPixelOld_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class TriPixelOld_Fields__obj::__mClass;

static ::String TriPixelOld_Fields__obj_sStaticFields[] = {
	HX_("fillTriUnsafe5",c7,5b,9d,06),
	HX_("fillTriUnsafe6",c8,5b,9d,06),
	::String(null())
};

void TriPixelOld_Fields__obj::__register()
{
	TriPixelOld_Fields__obj _hx_dummy;
	TriPixelOld_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._TriPixelOld.TriPixelOld_Fields_",26,84,d4,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TriPixelOld_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TriPixelOld_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TriPixelOld_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriPixelOld_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriPixelOld_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _TriPixelOld
