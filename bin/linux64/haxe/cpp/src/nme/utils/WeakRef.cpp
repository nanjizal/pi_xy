// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_utils_WeakRef
#include <nme/utils/WeakRef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6992b30353514cc1_19_new,"nme.utils.WeakRef","new",0xc61df128,"nme.utils.WeakRef.new","nme/utils/WeakRef.hx",19,0x4996a88a)
HX_LOCAL_STACK_FRAME(_hx_pos_6992b30353514cc1_40_get,"nme.utils.WeakRef","get",0xc618a15e,"nme.utils.WeakRef.get","nme/utils/WeakRef.hx",40,0x4996a88a)
HX_LOCAL_STACK_FRAME(_hx_pos_6992b30353514cc1_62_toString,"nme.utils.WeakRef","toString",0x9950dae4,"nme.utils.WeakRef.toString","nme/utils/WeakRef.hx",62,0x4996a88a)
namespace nme{
namespace utils{

void WeakRef_obj::__construct( ::Dynamic inObject,::hx::Null< bool >  __o_inMakeWeak){
            		bool inMakeWeak = __o_inMakeWeak.Default(true);
            	HX_STACKFRAME(&_hx_pos_6992b30353514cc1_19_new)
HXDLIN(  19)		if (inMakeWeak) {
HXLINE(  22)			this->weakRef =  ::__hxcpp_weak_ref_create(inObject);
HXLINE(  26)			this->hardRef = null();
            		}
            		else {
HXLINE(  31)			this->weakRef = null();
HXLINE(  35)			this->hardRef = inObject;
            		}
            	}

Dynamic WeakRef_obj::__CreateEmpty() { return new WeakRef_obj; }

void *WeakRef_obj::_hx_vtable = 0;

Dynamic WeakRef_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WeakRef_obj > _hx_result = new WeakRef_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool WeakRef_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5e8a7cec;
}

 ::Dynamic WeakRef_obj::get(){
            	HX_STACKFRAME(&_hx_pos_6992b30353514cc1_40_get)
HXLINE(  41)		if (::hx::IsNotNull( this->hardRef )) {
HXLINE(  42)			return this->hardRef;
            		}
HXLINE(  45)		if (::hx::IsNull( this->weakRef )) {
HXLINE(  46)			return null();
            		}
HXLINE(  47)		 ::Dynamic result =  ::__hxcpp_weak_ref_get(this->weakRef);
HXLINE(  48)		if (::hx::IsNull( result )) {
HXLINE(  49)			this->weakRef = null();
            		}
HXLINE(  58)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeakRef_obj,get,return )

::String WeakRef_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_6992b30353514cc1_62_toString)
HXLINE(  63)		if (::hx::IsNotNull( this->hardRef )) {
HXLINE(  64)			return (HX_("",00,00,00,00) + ::Std_obj::string(this->hardRef));
            		}
HXLINE(  66)		return ((HX_("WeakRef(",2d,30,1b,73) + ::Std_obj::string(this->get())) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeakRef_obj,toString,return )


::hx::ObjectPtr< WeakRef_obj > WeakRef_obj::__new( ::Dynamic inObject,::hx::Null< bool >  __o_inMakeWeak) {
	::hx::ObjectPtr< WeakRef_obj > __this = new WeakRef_obj();
	__this->__construct(inObject,__o_inMakeWeak);
	return __this;
}

::hx::ObjectPtr< WeakRef_obj > WeakRef_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inObject,::hx::Null< bool >  __o_inMakeWeak) {
	WeakRef_obj *__this = (WeakRef_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WeakRef_obj), true, "nme.utils.WeakRef"));
	*(void **)__this = WeakRef_obj::_hx_vtable;
	__this->__construct(inObject,__o_inMakeWeak);
	return __this;
}

WeakRef_obj::WeakRef_obj()
{
}

void WeakRef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WeakRef);
	HX_MARK_MEMBER_NAME(hardRef,"hardRef");
	HX_MARK_MEMBER_NAME(weakRef,"weakRef");
	HX_MARK_END_CLASS();
}

void WeakRef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(hardRef,"hardRef");
	HX_VISIT_MEMBER_NAME(weakRef,"weakRef");
}

::hx::Val WeakRef_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hardRef") ) { return ::hx::Val( hardRef ); }
		if (HX_FIELD_EQ(inName,"weakRef") ) { return ::hx::Val( weakRef ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WeakRef_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hardRef") ) { hardRef=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weakRef") ) { weakRef=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WeakRef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("hardRef",28,47,5c,93));
	outFields->push(HX_("weakRef",bb,4f,5c,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WeakRef_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WeakRef_obj,hardRef),HX_("hardRef",28,47,5c,93)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WeakRef_obj,weakRef),HX_("weakRef",bb,4f,5c,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WeakRef_obj_sStaticStorageInfo = 0;
#endif

static ::String WeakRef_obj_sMemberFields[] = {
	HX_("hardRef",28,47,5c,93),
	HX_("weakRef",bb,4f,5c,d7),
	HX_("get",96,80,4e,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class WeakRef_obj::__mClass;

void WeakRef_obj::__register()
{
	WeakRef_obj _hx_dummy;
	WeakRef_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.utils.WeakRef",36,7d,3c,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WeakRef_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WeakRef_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WeakRef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WeakRef_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace utils
