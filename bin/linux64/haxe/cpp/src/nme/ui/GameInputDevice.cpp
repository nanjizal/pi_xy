// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputControl
#include <nme/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputDevice
#include <nme/ui/GameInputDevice.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_7_new,"nme.ui.GameInputDevice","new",0x4b5a464e,"nme.ui.GameInputDevice.new","nme/ui/GameInputDevice.hx",7,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_44_toString,"nme.ui.GameInputDevice","toString",0x21d01bfe,"nme.ui.GameInputDevice.toString","nme/ui/GameInputDevice.hx",44,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_46_getButtonAt,"nme.ui.GameInputDevice","getButtonAt",0xb4995229,"nme.ui.GameInputDevice.getButtonAt","nme/ui/GameInputDevice.hx",46,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_48_getAxisAt,"nme.ui.GameInputDevice","getAxisAt",0xee89a598,"nme.ui.GameInputDevice.getAxisAt","nme/ui/GameInputDevice.hx",48,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_50_getCachedSamples,"nme.ui.GameInputDevice","getCachedSamples",0x20e3c423,"nme.ui.GameInputDevice.getCachedSamples","nme/ui/GameInputDevice.hx",50,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_53_isButtonDown,"nme.ui.GameInputDevice","isButtonDown",0x70c1ec50,"nme.ui.GameInputDevice.isButtonDown","nme/ui/GameInputDevice.hx",53,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_59_readDPadUp,"nme.ui.GameInputDevice","readDPadUp",0x426c8352,"nme.ui.GameInputDevice.readDPadUp","nme/ui/GameInputDevice.hx",59,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_60_readDPadDown,"nme.ui.GameInputDevice","readDPadDown",0x0dd48119,"nme.ui.GameInputDevice.readDPadDown","nme/ui/GameInputDevice.hx",60,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_61_readDPadLeft,"nme.ui.GameInputDevice","readDPadLeft",0x131690be,"nme.ui.GameInputDevice.readDPadLeft","nme/ui/GameInputDevice.hx",61,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_62_readDPadRight,"nme.ui.GameInputDevice","readDPadRight",0x17b52345,"nme.ui.GameInputDevice.readDPadRight","nme/ui/GameInputDevice.hx",62,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_64_getX0,"nme.ui.GameInputDevice","getX0",0x8362ec5c,"nme.ui.GameInputDevice.getX0","nme/ui/GameInputDevice.hx",64,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_65_getY0,"nme.ui.GameInputDevice","getY0",0x8362ed3b,"nme.ui.GameInputDevice.getY0","nme/ui/GameInputDevice.hx",65,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_67_isLeft,"nme.ui.GameInputDevice","isLeft",0x35183fe3,"nme.ui.GameInputDevice.isLeft","nme/ui/GameInputDevice.hx",67,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_68_isRight,"nme.ui.GameInputDevice","isRight",0xb72cb480,"nme.ui.GameInputDevice.isRight","nme/ui/GameInputDevice.hx",68,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_69_isUp,"nme.ui.GameInputDevice","isUp",0xa05faf37,"nme.ui.GameInputDevice.isUp","nme/ui/GameInputDevice.hx",69,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_70_isDown,"nme.ui.GameInputDevice","isDown",0x2fd6303e,"nme.ui.GameInputDevice.isDown","nme/ui/GameInputDevice.hx",70,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_72_getDx,"nme.ui.GameInputDevice","getDx",0x8362db38,"nme.ui.GameInputDevice.getDx","nme/ui/GameInputDevice.hx",72,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_73_getDy,"nme.ui.GameInputDevice","getDy",0x8362db39,"nme.ui.GameInputDevice.getDy","nme/ui/GameInputDevice.hx",73,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_76_getControlAt,"nme.ui.GameInputDevice","getControlAt",0x8ecdee8c,"nme.ui.GameInputDevice.getControlAt","nme/ui/GameInputDevice.hx",76,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_83_startCachingSamples,"nme.ui.GameInputDevice","startCachingSamples",0xd20bc4ba,"nme.ui.GameInputDevice.startCachingSamples","nme/ui/GameInputDevice.hx",83,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_87_stopCachingSamples,"nme.ui.GameInputDevice","stopCachingSamples",0x61ff0c3e,"nme.ui.GameInputDevice.stopCachingSamples","nme/ui/GameInputDevice.hx",87,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_92_get_numControls,"nme.ui.GameInputDevice","get_numControls",0x730b3161,"nme.ui.GameInputDevice.get_numControls","nme/ui/GameInputDevice.hx",92,0x8e92db82)
HX_LOCAL_STACK_FRAME(_hx_pos_47ae22b3b2affc7c_9_boot,"nme.ui.GameInputDevice","boot",0x9bbc3e84,"nme.ui.GameInputDevice.boot","nme/ui/GameInputDevice.hx",9,0x8e92db82)
namespace nme{
namespace ui{

void GameInputDevice_obj::__construct(::String id,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_7_new)
HXLINE(  19)		this->nmeControls = ::Array_obj< ::Dynamic>::__new();
HXLINE(  18)		this->nmeButton =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  17)		this->nmeAxis =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  26)		this->id = id;
HXLINE(  27)		this->name = name;
HXLINE(  28)		 ::nme::ui::GameInputControl control;
HXLINE(  29)		{
HXLINE(  30)			{
HXLINE(  31)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("AXIS_",9e,28,6e,a7) + 0),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE(  32)				this->nmeAxis->set(0,control);
HXLINE(  33)				this->nmeControls->push(control);
            			}
HXLINE(  30)			{
HXLINE(  31)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("AXIS_",9e,28,6e,a7) + 1),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE(  32)				this->nmeAxis->set(1,control);
HXLINE(  33)				this->nmeControls->push(control);
            			}
HXLINE(  30)			{
HXLINE(  31)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("AXIS_",9e,28,6e,a7) + 2),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE(  32)				this->nmeAxis->set(2,control);
HXLINE(  33)				this->nmeControls->push(control);
            			}
HXLINE(  30)			{
HXLINE(  31)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("AXIS_",9e,28,6e,a7) + 3),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE(  32)				this->nmeAxis->set(3,control);
HXLINE(  33)				this->nmeControls->push(control);
            			}
HXLINE(  30)			{
HXLINE(  31)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("AXIS_",9e,28,6e,a7) + 4),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE(  32)				this->nmeAxis->set(4,control);
HXLINE(  33)				this->nmeControls->push(control);
            			}
HXLINE(  30)			{
HXLINE(  31)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("AXIS_",9e,28,6e,a7) + 5),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE(  32)				this->nmeAxis->set(5,control);
HXLINE(  33)				this->nmeControls->push(control);
            			}
            		}
HXLINE(  36)		{
HXLINE(  36)			int _g = 0;
HXDLIN(  36)			while((_g < 15)){
HXLINE(  36)				_g = (_g + 1);
HXDLIN(  36)				int i = (_g - 1);
HXLINE(  38)				control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(HX_("BUTTON_",2d,26,49,4a) + i),( (Float)(0) ),( (Float)(1) ),null());
HXLINE(  39)				this->nmeButton->set(i,control);
HXLINE(  40)				this->nmeControls->push(control);
            			}
            		}
            	}

Dynamic GameInputDevice_obj::__CreateEmpty() { return new GameInputDevice_obj; }

void *GameInputDevice_obj::_hx_vtable = 0;

Dynamic GameInputDevice_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameInputDevice_obj > _hx_result = new GameInputDevice_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GameInputDevice_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02280a18;
}

::String GameInputDevice_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_44_toString)
HXDLIN(  44)		return ((((HX_("GameInputDevice(",1a,bf,18,52) + this->id) + HX_(":",3a,00,00,00)) + this->name) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,toString,return )

 ::nme::ui::GameInputControl GameInputDevice_obj::getButtonAt(int i){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_46_getButtonAt)
HXDLIN(  46)		bool _hx_tmp;
HXDLIN(  46)		if ((i >= 0)) {
HXDLIN(  46)			_hx_tmp = (i < 15);
            		}
            		else {
HXDLIN(  46)			_hx_tmp = false;
            		}
HXDLIN(  46)		if (_hx_tmp) {
HXDLIN(  46)			return this->nmeControls->__get((i + 6)).StaticCast<  ::nme::ui::GameInputControl >();
            		}
            		else {
HXDLIN(  46)			return null();
            		}
HXDLIN(  46)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameInputDevice_obj,getButtonAt,return )

 ::nme::ui::GameInputControl GameInputDevice_obj::getAxisAt(int i){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_48_getAxisAt)
HXDLIN(  48)		bool _hx_tmp;
HXDLIN(  48)		if ((i >= 0)) {
HXDLIN(  48)			_hx_tmp = (i < 6);
            		}
            		else {
HXDLIN(  48)			_hx_tmp = false;
            		}
HXDLIN(  48)		if (_hx_tmp) {
HXDLIN(  48)			return this->nmeControls->__get(i).StaticCast<  ::nme::ui::GameInputControl >();
            		}
            		else {
HXDLIN(  48)			return null();
            		}
HXDLIN(  48)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameInputDevice_obj,getAxisAt,return )

int GameInputDevice_obj::getCachedSamples( ::nme::utils::ByteArray data,::hx::Null< bool >  __o_append){
            		bool append = __o_append.Default(false);
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_50_getCachedSamples)
HXDLIN(  50)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameInputDevice_obj,getCachedSamples,return )

bool GameInputDevice_obj::isButtonDown(int buttonId){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_53_isButtonDown)
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if ((buttonId >= 0)) {
HXLINE(  54)			_hx_tmp = (buttonId >= 15);
            		}
            		else {
HXLINE(  54)			_hx_tmp = true;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  55)			return false;
            		}
HXLINE(  56)		return (this->nmeControls->__get((buttonId + 6)).StaticCast<  ::nme::ui::GameInputControl >()->value > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameInputDevice_obj,isButtonDown,return )

bool GameInputDevice_obj::readDPadUp(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_59_readDPadUp)
HXDLIN(  59)		return this->isButtonDown(11);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,readDPadUp,return )

bool GameInputDevice_obj::readDPadDown(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_60_readDPadDown)
HXDLIN(  60)		return this->isButtonDown(12);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,readDPadDown,return )

bool GameInputDevice_obj::readDPadLeft(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_61_readDPadLeft)
HXDLIN(  61)		return this->isButtonDown(13);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,readDPadLeft,return )

bool GameInputDevice_obj::readDPadRight(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_62_readDPadRight)
HXDLIN(  62)		return this->isButtonDown(14);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,readDPadRight,return )

Float GameInputDevice_obj::getX0(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_64_getX0)
HXDLIN(  64)		return this->nmeControls->__get(0).StaticCast<  ::nme::ui::GameInputControl >()->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,getX0,return )

Float GameInputDevice_obj::getY0(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_65_getY0)
HXDLIN(  65)		return this->nmeControls->__get(1).StaticCast<  ::nme::ui::GameInputControl >()->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,getY0,return )

bool GameInputDevice_obj::isLeft(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_67_isLeft)
HXDLIN(  67)		if (!((this->getX0() < ((Float)-0.5)))) {
HXDLIN(  67)			return this->readDPadLeft();
            		}
            		else {
HXDLIN(  67)			return true;
            		}
HXDLIN(  67)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,isLeft,return )

bool GameInputDevice_obj::isRight(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_68_isRight)
HXDLIN(  68)		if (!((this->getX0() > ((Float)0.5)))) {
HXDLIN(  68)			return this->readDPadRight();
            		}
            		else {
HXDLIN(  68)			return true;
            		}
HXDLIN(  68)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,isRight,return )

bool GameInputDevice_obj::isUp(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_69_isUp)
HXDLIN(  69)		if (!((this->getY0() < ((Float)-0.5)))) {
HXDLIN(  69)			return this->readDPadUp();
            		}
            		else {
HXDLIN(  69)			return true;
            		}
HXDLIN(  69)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,isUp,return )

bool GameInputDevice_obj::isDown(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_70_isDown)
HXDLIN(  70)		if (!((this->getY0() > ((Float)0.5)))) {
HXDLIN(  70)			return this->readDPadDown();
            		}
            		else {
HXDLIN(  70)			return true;
            		}
HXDLIN(  70)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,isDown,return )

int GameInputDevice_obj::getDx(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_72_getDx)
HXDLIN(  72)		int _hx_tmp;
HXDLIN(  72)		if (this->isLeft()) {
HXDLIN(  72)			_hx_tmp = -1;
            		}
            		else {
HXDLIN(  72)			_hx_tmp = 0;
            		}
HXDLIN(  72)		int _hx_tmp1;
HXDLIN(  72)		if (this->isRight()) {
HXDLIN(  72)			_hx_tmp1 = 1;
            		}
            		else {
HXDLIN(  72)			_hx_tmp1 = 0;
            		}
HXDLIN(  72)		return (_hx_tmp + _hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,getDx,return )

int GameInputDevice_obj::getDy(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_73_getDy)
HXDLIN(  73)		int _hx_tmp;
HXDLIN(  73)		if (this->isUp()) {
HXDLIN(  73)			_hx_tmp = -1;
            		}
            		else {
HXDLIN(  73)			_hx_tmp = 0;
            		}
HXDLIN(  73)		int _hx_tmp1;
HXDLIN(  73)		if (this->isDown()) {
HXDLIN(  73)			_hx_tmp1 = 1;
            		}
            		else {
HXDLIN(  73)			_hx_tmp1 = 0;
            		}
HXDLIN(  73)		return (_hx_tmp + _hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,getDy,return )

 ::nme::ui::GameInputControl GameInputDevice_obj::getControlAt(int i){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_76_getControlAt)
HXLINE(  77)		bool _hx_tmp;
HXDLIN(  77)		if ((i >= 0)) {
HXLINE(  77)			_hx_tmp = (i < this->nmeControls->length);
            		}
            		else {
HXLINE(  77)			_hx_tmp = false;
            		}
HXDLIN(  77)		if (_hx_tmp) {
HXLINE(  78)			return this->nmeControls->__get(i).StaticCast<  ::nme::ui::GameInputControl >();
            		}
HXLINE(  79)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameInputDevice_obj,getControlAt,return )

void GameInputDevice_obj::startCachingSamples(int numSamples,::Array< ::String > controls){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_83_startCachingSamples)
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameInputDevice_obj,startCachingSamples,(void))

void GameInputDevice_obj::stopCachingSamples(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_87_stopCachingSamples)
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,stopCachingSamples,(void))

int GameInputDevice_obj::get_numControls(){
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_92_get_numControls)
HXDLIN(  92)		return this->nmeControls->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInputDevice_obj,get_numControls,return )

int GameInputDevice_obj::MAX_BUFFER_SIZE;


::hx::ObjectPtr< GameInputDevice_obj > GameInputDevice_obj::__new(::String id,::String name) {
	::hx::ObjectPtr< GameInputDevice_obj > __this = new GameInputDevice_obj();
	__this->__construct(id,name);
	return __this;
}

::hx::ObjectPtr< GameInputDevice_obj > GameInputDevice_obj::__alloc(::hx::Ctx *_hx_ctx,::String id,::String name) {
	GameInputDevice_obj *__this = (GameInputDevice_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameInputDevice_obj), true, "nme.ui.GameInputDevice"));
	*(void **)__this = GameInputDevice_obj::_hx_vtable;
	__this->__construct(id,name);
	return __this;
}

GameInputDevice_obj::GameInputDevice_obj()
{
}

void GameInputDevice_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameInputDevice);
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(sampleInterval,"sampleInterval");
	HX_MARK_MEMBER_NAME(nmeAxis,"nmeAxis");
	HX_MARK_MEMBER_NAME(nmeButton,"nmeButton");
	HX_MARK_MEMBER_NAME(nmeControls,"nmeControls");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_END_CLASS();
}

void GameInputDevice_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(sampleInterval,"sampleInterval");
	HX_VISIT_MEMBER_NAME(nmeAxis,"nmeAxis");
	HX_VISIT_MEMBER_NAME(nmeButton,"nmeButton");
	HX_VISIT_MEMBER_NAME(nmeControls,"nmeControls");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
}

::hx::Val GameInputDevice_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"isUp") ) { return ::hx::Val( isUp_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"getX0") ) { return ::hx::Val( getX0_dyn() ); }
		if (HX_FIELD_EQ(inName,"getY0") ) { return ::hx::Val( getY0_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDx") ) { return ::hx::Val( getDx_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDy") ) { return ::hx::Val( getDy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isLeft") ) { return ::hx::Val( isLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"isDown") ) { return ::hx::Val( isDown_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"nmeAxis") ) { return ::hx::Val( nmeAxis ); }
		if (HX_FIELD_EQ(inName,"isRight") ) { return ::hx::Val( isRight_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeButton") ) { return ::hx::Val( nmeButton ); }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"getAxisAt") ) { return ::hx::Val( getAxisAt_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDPadUp") ) { return ::hx::Val( readDPadUp_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numControls") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numControls() ); }
		if (HX_FIELD_EQ(inName,"nmeControls") ) { return ::hx::Val( nmeControls ); }
		if (HX_FIELD_EQ(inName,"getButtonAt") ) { return ::hx::Val( getButtonAt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isButtonDown") ) { return ::hx::Val( isButtonDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"readDPadDown") ) { return ::hx::Val( readDPadDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"readDPadLeft") ) { return ::hx::Val( readDPadLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"getControlAt") ) { return ::hx::Val( getControlAt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readDPadRight") ) { return ::hx::Val( readDPadRight_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sampleInterval") ) { return ::hx::Val( sampleInterval ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numControls") ) { return ::hx::Val( get_numControls_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCachedSamples") ) { return ::hx::Val( getCachedSamples_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stopCachingSamples") ) { return ::hx::Val( stopCachingSamples_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"startCachingSamples") ) { return ::hx::Val( startCachingSamples_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GameInputDevice_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"MAX_BUFFER_SIZE") ) { outValue = ( MAX_BUFFER_SIZE ); return true; }
	}
	return false;
}

::hx::Val GameInputDevice_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeAxis") ) { nmeAxis=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeButton") ) { nmeButton=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nmeControls") ) { nmeControls=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sampleInterval") ) { sampleInterval=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GameInputDevice_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"MAX_BUFFER_SIZE") ) { MAX_BUFFER_SIZE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void GameInputDevice_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("numControls",dc,d6,d2,23));
	outFields->push(HX_("sampleInterval",8f,cf,73,9c));
	outFields->push(HX_("nmeAxis",07,3b,ea,c5));
	outFields->push(HX_("nmeButton",d8,65,a2,74));
	outFields->push(HX_("nmeControls",dc,cf,f3,89));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameInputDevice_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(GameInputDevice_obj,enabled),HX_("enabled",81,04,31,7e)},
	{::hx::fsString,(int)offsetof(GameInputDevice_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(GameInputDevice_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsInt,(int)offsetof(GameInputDevice_obj,sampleInterval),HX_("sampleInterval",8f,cf,73,9c)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(GameInputDevice_obj,nmeAxis),HX_("nmeAxis",07,3b,ea,c5)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(GameInputDevice_obj,nmeButton),HX_("nmeButton",d8,65,a2,74)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(GameInputDevice_obj,nmeControls),HX_("nmeControls",dc,cf,f3,89)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(GameInputDevice_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GameInputDevice_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &GameInputDevice_obj::MAX_BUFFER_SIZE,HX_("MAX_BUFFER_SIZE",25,86,77,ea)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GameInputDevice_obj_sMemberFields[] = {
	HX_("enabled",81,04,31,7e),
	HX_("id",db,5b,00,00),
	HX_("name",4b,72,ff,48),
	HX_("sampleInterval",8f,cf,73,9c),
	HX_("nmeAxis",07,3b,ea,c5),
	HX_("nmeButton",d8,65,a2,74),
	HX_("nmeControls",dc,cf,f3,89),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("toString",ac,d0,6e,38),
	HX_("getButtonAt",3b,3e,26,82),
	HX_("getAxisAt",2a,09,c9,a2),
	HX_("getCachedSamples",d1,d6,6b,23),
	HX_("isButtonDown",fe,8f,83,7e),
	HX_("readDPadUp",80,3f,a4,45),
	HX_("readDPadDown",c7,24,96,1b),
	HX_("readDPadLeft",6c,34,d8,20),
	HX_("readDPadRight",d7,b7,62,13),
	HX_("getX0",ee,9e,60,91),
	HX_("getY0",cd,9f,60,91),
	HX_("isLeft",11,cd,16,65),
	HX_("isRight",92,af,e9,85),
	HX_("isUp",e5,f4,be,45),
	HX_("isDown",6c,bd,d4,5f),
	HX_("getDx",ca,8d,60,91),
	HX_("getDy",cb,8d,60,91),
	HX_("getControlAt",3a,92,8f,9c),
	HX_("startCachingSamples",cc,12,5e,6d),
	HX_("stopCachingSamples",6c,a6,b3,24),
	HX_("get_numControls",73,8e,b4,e4),
	::String(null()) };

static void GameInputDevice_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameInputDevice_obj::MAX_BUFFER_SIZE,"MAX_BUFFER_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameInputDevice_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameInputDevice_obj::MAX_BUFFER_SIZE,"MAX_BUFFER_SIZE");
};

#endif

::hx::Class GameInputDevice_obj::__mClass;

static ::String GameInputDevice_obj_sStaticFields[] = {
	HX_("MAX_BUFFER_SIZE",25,86,77,ea),
	::String(null())
};

void GameInputDevice_obj::__register()
{
	GameInputDevice_obj _hx_dummy;
	GameInputDevice_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.ui.GameInputDevice",5c,c7,d1,b9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GameInputDevice_obj::__GetStatic;
	__mClass->mSetStaticField = &GameInputDevice_obj::__SetStatic;
	__mClass->mMarkFunc = GameInputDevice_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GameInputDevice_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameInputDevice_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameInputDevice_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameInputDevice_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameInputDevice_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameInputDevice_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GameInputDevice_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_47ae22b3b2affc7c_9_boot)
HXDLIN(   9)		MAX_BUFFER_SIZE = 32000;
            	}
}

} // end namespace nme
} // end namespace ui
