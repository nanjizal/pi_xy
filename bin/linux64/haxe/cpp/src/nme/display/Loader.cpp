// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_display_Bitmap
#include <nme/display/Bitmap.h>
#endif
#ifndef INCLUDED_nme_display_BitmapData
#include <nme/display/BitmapData.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_Loader
#include <nme/display/Loader.h>
#endif
#ifndef INCLUDED_nme_display_LoaderInfo
#include <nme/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_nme_display_PixelSnapping
#include <nme/display/PixelSnapping.h>
#endif
#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_net_URLLoader
#include <nme/net/URLLoader.h>
#endif
#ifndef INCLUDED_nme_net_URLRequest
#include <nme/net/URLRequest.h>
#endif
#ifndef INCLUDED_nme_system_LoaderContext
#include <nme/system/LoaderContext.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_48e3198ff5d296c0_27_new,"nme.display.Loader","new",0xc1adc179,"nme.display.Loader.new","nme/display/Loader.hx",27,0x6c3b36d5)
HX_LOCAL_STACK_FRAME(_hx_pos_48e3198ff5d296c0_36_doLoad,"nme.display.Loader","doLoad",0x50f443d8,"nme.display.Loader.doLoad","nme/display/Loader.hx",36,0x6c3b36d5)
HX_LOCAL_STACK_FRAME(_hx_pos_48e3198ff5d296c0_65_load,"nme.display.Loader","load",0xb5109eed,"nme.display.Loader.load","nme/display/Loader.hx",65,0x6c3b36d5)
HX_LOCAL_STACK_FRAME(_hx_pos_48e3198ff5d296c0_71_loadBytes,"nme.display.Loader","loadBytes",0x674c9e3e,"nme.display.Loader.loadBytes","nme/display/Loader.hx",71,0x6c3b36d5)
HX_LOCAL_STACK_FRAME(_hx_pos_48e3198ff5d296c0_82_unload,"nme.display.Loader","unload",0x9ec5a586,"nme.display.Loader.unload","nme/display/Loader.hx",82,0x6c3b36d5)
HX_LOCAL_STACK_FRAME(_hx_pos_48e3198ff5d296c0_106_onData,"nme.display.Loader","onData",0x1e266370,"nme.display.Loader.onData","nme/display/Loader.hx",106,0x6c3b36d5)
namespace nme{
namespace display{

void Loader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_48e3198ff5d296c0_27_new)
HXLINE(  28)		super::__construct();
HXLINE(  30)		this->contentLoaderInfo = ::nme::display::LoaderInfo_obj::create(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  32)		this->contentLoaderInfo->nmeOnComplete = this->doLoad_dyn();
            	}

Dynamic Loader_obj::__CreateEmpty() { return new Loader_obj; }

void *Loader_obj::_hx_vtable = 0;

Dynamic Loader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Loader_obj > _hx_result = new Loader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Loader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ff07575) {
		if (inClassId<=(int)0x048b25c1) {
			if (inClassId<=(int)0x02dcb893) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x02dcb893;
			} else {
				return inClassId==(int)0x048b25c1;
			}
		} else {
			return inClassId==(int)0x0ff07575;
		}
	} else {
		if (inClassId<=(int)0x5a2ce121) {
			return inClassId==(int)0x169017a6 || inClassId==(int)0x5a2ce121;
		} else {
			return inClassId==(int)0x5e732244;
		}
	}
}

bool Loader_obj::doLoad( ::nme::utils::ByteArray inBytes){
            	HX_GC_STACKFRAME(&_hx_pos_48e3198ff5d296c0_36_doLoad)
HXLINE(  37)		if (::hx::IsNull( inBytes )) {
HXLINE(  38)			return false;
            		}
HXLINE(  40)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  42)			this->nmeImage = ::nme::display::BitmapData_obj::loadFromBytes(inBytes,null(),null());
HXLINE(  43)			 ::nme::display::Bitmap bmp =  ::nme::display::Bitmap_obj::__alloc( HX_CTX ,this->nmeImage,null(),null());
HXLINE(  44)			this->content = bmp;
HXLINE(  45)			this->contentLoaderInfo->content = bmp;
HXLINE(  47)			while((this->get_numChildren() > 0)){
HXLINE(  49)				this->removeChildAt(0);
            			}
HXLINE(  52)			this->addChild(bmp);
HXLINE(  53)			return true;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  55)				{
HXLINE(  55)					null();
            				}
HXLINE(  58)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  40)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,doLoad,return )

void Loader_obj::load( ::nme::net::URLRequest request, ::nme::_hx_system::LoaderContext context){
            	HX_STACKFRAME(&_hx_pos_48e3198ff5d296c0_65_load)
HXDLIN(  65)		this->contentLoaderInfo->load(request);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Loader_obj,load,(void))

void Loader_obj::loadBytes( ::nme::utils::ByteArray bytes, ::nme::_hx_system::LoaderContext context){
            	HX_GC_STACKFRAME(&_hx_pos_48e3198ff5d296c0_71_loadBytes)
HXDLIN(  71)		if (this->doLoad(bytes)) {
HXLINE(  72)			 ::nme::events::Event event =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null());
HXLINE(  73)			event->set_currentTarget(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  74)			this->contentLoaderInfo->dispatchEvent(event);
            		}
            		else {
HXLINE(  76)			this->contentLoaderInfo->DispatchIOErrorEvent();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Loader_obj,loadBytes,(void))

void Loader_obj::unload(){
            	HX_GC_STACKFRAME(&_hx_pos_48e3198ff5d296c0_82_unload)
HXDLIN(  82)		if ((this->get_numChildren() > 0)) {
HXLINE(  84)			while((this->get_numChildren() > 0)){
HXLINE(  86)				this->removeChildAt(0);
            			}
HXLINE(  90)			{
HXLINE(  91)				this->contentLoaderInfo->url = null();
HXLINE(  92)				this->contentLoaderInfo->contentType = null();
HXLINE(  93)				this->contentLoaderInfo->content = null();
HXLINE(  94)				this->contentLoaderInfo->bytesLoaded = (this->contentLoaderInfo->bytesTotal = 0);
HXLINE(  95)				this->contentLoaderInfo->width = 0;
HXLINE(  96)				this->contentLoaderInfo->height = 0;
            			}
HXLINE(  98)			 ::nme::events::Event event =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("unload",ff,a0,8c,65),null(),null());
HXLINE(  99)			event->set_currentTarget(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 100)			this->dispatchEvent(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Loader_obj,unload,(void))

void Loader_obj::onData( ::nme::events::Event event){
            	HX_STACKFRAME(&_hx_pos_48e3198ff5d296c0_106_onData)
HXLINE( 107)		event->stopImmediatePropagation();
HXLINE( 108)		this->doLoad(this->contentLoaderInfo->get_bytes());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,onData,(void))


::hx::ObjectPtr< Loader_obj > Loader_obj::__new() {
	::hx::ObjectPtr< Loader_obj > __this = new Loader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Loader_obj > Loader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Loader_obj *__this = (Loader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Loader_obj), true, "nme.display.Loader"));
	*(void **)__this = Loader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Loader_obj::Loader_obj()
{
}

void Loader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Loader);
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(contentLoaderInfo,"contentLoaderInfo");
	HX_MARK_MEMBER_NAME(nmeImage,"nmeImage");
	 ::nme::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Loader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(contentLoaderInfo,"contentLoaderInfo");
	HX_VISIT_MEMBER_NAME(nmeImage,"nmeImage");
	 ::nme::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Loader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"doLoad") ) { return ::hx::Val( doLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return ::hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"onData") ) { return ::hx::Val( onData_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nmeImage") ) { return ::hx::Val( nmeImage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return ::hx::Val( loadBytes_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"contentLoaderInfo") ) { return ::hx::Val( contentLoaderInfo ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Loader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast<  ::nme::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nmeImage") ) { nmeImage=inValue.Cast<  ::nme::display::BitmapData >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"contentLoaderInfo") ) { contentLoaderInfo=inValue.Cast<  ::nme::display::LoaderInfo >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Loader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("contentLoaderInfo",ba,64,65,14));
	outFields->push(HX_("nmeImage",35,9a,f2,fa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Loader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::display::DisplayObject */ ,(int)offsetof(Loader_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsObject /*  ::nme::display::LoaderInfo */ ,(int)offsetof(Loader_obj,contentLoaderInfo),HX_("contentLoaderInfo",ba,64,65,14)},
	{::hx::fsObject /*  ::nme::display::BitmapData */ ,(int)offsetof(Loader_obj,nmeImage),HX_("nmeImage",35,9a,f2,fa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Loader_obj_sStaticStorageInfo = 0;
#endif

static ::String Loader_obj_sMemberFields[] = {
	HX_("content",39,8d,77,19),
	HX_("contentLoaderInfo",ba,64,65,14),
	HX_("nmeImage",35,9a,f2,fa),
	HX_("doLoad",51,3f,bb,17),
	HX_("load",26,9a,b7,47),
	HX_("loadBytes",65,54,cf,d8),
	HX_("unload",ff,a0,8c,65),
	HX_("onData",e9,5e,ed,e4),
	::String(null()) };

::hx::Class Loader_obj::__mClass;

void Loader_obj::__register()
{
	Loader_obj _hx_dummy;
	Loader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.Loader",07,91,87,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Loader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Loader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Loader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Loader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace display
