// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_utils_ArrayBufferView
#include <nme/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_nme_utils_UInt8Array
#include <nme/utils/UInt8Array.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0ae936a798dc2d08_16_new,"nme.utils.UInt8Array","new",0xf3024792,"nme.utils.UInt8Array.new","nme/utils/UInt8Array.hx",16,0xf55a481c)
HX_LOCAL_STACK_FRAME(_hx_pos_0ae936a798dc2d08_57_subarray,"nme.utils.UInt8Array","subarray",0x13db87a7,"nme.utils.UInt8Array.subarray","nme/utils/UInt8Array.hx",57,0xf55a481c)
HX_LOCAL_STACK_FRAME(_hx_pos_0ae936a798dc2d08_64___get,"nme.utils.UInt8Array","__get",0xc6cb0928,"nme.utils.UInt8Array.__get","nme/utils/UInt8Array.hx",64,0xf55a481c)
HX_LOCAL_STACK_FRAME(_hx_pos_0ae936a798dc2d08_67___set,"nme.utils.UInt8Array","__set",0xc6d42434,"nme.utils.UInt8Array.__set","nme/utils/UInt8Array.hx",67,0xf55a481c)
HX_LOCAL_STACK_FRAME(_hx_pos_0ae936a798dc2d08_54_fromBytes,"nme.utils.UInt8Array","fromBytes",0x34b3db53,"nme.utils.UInt8Array.fromBytes","nme/utils/UInt8Array.hx",54,0xf55a481c)
HX_LOCAL_STACK_FRAME(_hx_pos_0ae936a798dc2d08_7_boot,"nme.utils.UInt8Array","boot",0xa71558c0,"nme.utils.UInt8Array.boot","nme/utils/UInt8Array.hx",7,0xf55a481c)
namespace nme{
namespace utils{

void UInt8Array_obj::__construct( ::Dynamic inBufferOrArray,::hx::Null< int >  __o_inStart, ::Dynamic inElements){
            		int inStart = __o_inStart.Default(0);
            	HX_STACKFRAME(&_hx_pos_0ae936a798dc2d08_16_new)
HXLINE(  17)		this->BYTES_PER_ELEMENT = 1;
HXLINE(  19)		if (::Std_obj::isOfType(inBufferOrArray,::hx::ClassOf< int >())) {
HXLINE(  21)			super::__construct((this->length = ::Std_obj::_hx_int(( (Float)(inBufferOrArray) ))),null(),null());
            		}
            		else {
HXLINE(  23)			if (::Std_obj::isOfType(inBufferOrArray,::hx::ArrayBase::__mClass)) {
HXLINE(  25)				::Array< int > ints = ( (::Array< int >)(inBufferOrArray) );
HXLINE(  26)				if (::hx::IsNotNull( inElements )) {
HXLINE(  27)					this->length = ( (int)(inElements) );
            				}
            				else {
HXLINE(  29)					this->length = (ints->length - inStart);
            				}
HXLINE(  31)				super::__construct(this->length,null(),null());
HXLINE(  37)				{
HXLINE(  37)					int _g = 0;
HXDLIN(  37)					int _g1 = this->length;
HXDLIN(  37)					while((_g < _g1)){
HXLINE(  37)						_g = (_g + 1);
HXDLIN(  37)						int i = (_g - 1);
HXLINE(  40)						 ::__hxcpp_memory_set_byte(this->bytes,i,ints->__get((i + inStart)));
            					}
            				}
            			}
            			else {
HXLINE(  48)				super::__construct(inBufferOrArray,inStart,inElements);
HXLINE(  49)				this->length = this->byteLength;
            			}
            		}
            	}

Dynamic UInt8Array_obj::__CreateEmpty() { return new UInt8Array_obj; }

void *UInt8Array_obj::_hx_vtable = 0;

Dynamic UInt8Array_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UInt8Array_obj > _hx_result = new UInt8Array_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool UInt8Array_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1273bee7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1273bee7;
	} else {
		return inClassId==(int)0x198f0caa;
	}
}

 ::nme::utils::UInt8Array UInt8Array_obj::subarray(::hx::Null< int >  __o_start, ::Dynamic end){
            		int start = __o_start.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_0ae936a798dc2d08_57_subarray)
HXLINE(  58)		if (::hx::IsNull( end )) {
HXLINE(  59)			end = this->length;
            		}
HXLINE(  60)		return  ::nme::utils::UInt8Array_obj::__alloc( HX_CTX ,this->buffer,(start + this->byteOffset),(( (int)(end) ) - start));
            	}


HX_DEFINE_DYNAMIC_FUNC2(UInt8Array_obj,subarray,return )

int UInt8Array_obj::__get(int index){
            	HX_STACKFRAME(&_hx_pos_0ae936a798dc2d08_64___get)
HXDLIN(  64)		return  ::__hxcpp_memory_get_byte(this->bytes,(index + this->byteOffset));
            	}


HX_DEFINE_DYNAMIC_FUNC1(UInt8Array_obj,__get,return )

int UInt8Array_obj::__set(int index,int v){
            	HX_STACKFRAME(&_hx_pos_0ae936a798dc2d08_67___set)
HXDLIN(  67)		 ::__hxcpp_memory_set_byte(this->bytes,(index + this->byteOffset),v);
HXDLIN(  67)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC2(UInt8Array_obj,__set,return )

int UInt8Array_obj::SBYTES_PER_ELEMENT;

 ::nme::utils::UInt8Array UInt8Array_obj::fromBytes( ::haxe::io::Bytes bytes,::hx::Null< int >  __o_byteOffset, ::Dynamic len){
            		int byteOffset = __o_byteOffset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_0ae936a798dc2d08_54_fromBytes)
HXDLIN(  54)		return  ::nme::utils::UInt8Array_obj::__alloc( HX_CTX ,bytes,byteOffset,len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UInt8Array_obj,fromBytes,return )


::hx::ObjectPtr< UInt8Array_obj > UInt8Array_obj::__new( ::Dynamic inBufferOrArray,::hx::Null< int >  __o_inStart, ::Dynamic inElements) {
	::hx::ObjectPtr< UInt8Array_obj > __this = new UInt8Array_obj();
	__this->__construct(inBufferOrArray,__o_inStart,inElements);
	return __this;
}

::hx::ObjectPtr< UInt8Array_obj > UInt8Array_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inBufferOrArray,::hx::Null< int >  __o_inStart, ::Dynamic inElements) {
	UInt8Array_obj *__this = (UInt8Array_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UInt8Array_obj), true, "nme.utils.UInt8Array"));
	*(void **)__this = UInt8Array_obj::_hx_vtable;
	__this->__construct(inBufferOrArray,__o_inStart,inElements);
	return __this;
}

UInt8Array_obj::UInt8Array_obj()
{
}

::hx::Val UInt8Array_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__get") ) { return ::hx::Val( __get_dyn() ); }
		if (HX_FIELD_EQ(inName,"__set") ) { return ::hx::Val( __set_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subarray") ) { return ::hx::Val( subarray_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"BYTES_PER_ELEMENT") ) { return ::hx::Val( BYTES_PER_ELEMENT ); }
	}
	return super::__Field(inName,inCallProp);
}

bool UInt8Array_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
	}
	return false;
}

::hx::Val UInt8Array_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"BYTES_PER_ELEMENT") ) { BYTES_PER_ELEMENT=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UInt8Array_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("BYTES_PER_ELEMENT",a6,04,1d,cc));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo UInt8Array_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(UInt8Array_obj,BYTES_PER_ELEMENT),HX_("BYTES_PER_ELEMENT",a6,04,1d,cc)},
	{::hx::fsInt,(int)offsetof(UInt8Array_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo UInt8Array_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &UInt8Array_obj::SBYTES_PER_ELEMENT,HX_("SBYTES_PER_ELEMENT",f3,76,83,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String UInt8Array_obj_sMemberFields[] = {
	HX_("BYTES_PER_ELEMENT",a6,04,1d,cc),
	HX_("length",e6,94,07,9f),
	HX_("subarray",19,54,81,07),
	HX_("__get",76,e1,2a,f2),
	HX_("__set",82,fc,33,f2),
	::String(null()) };

static void UInt8Array_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UInt8Array_obj::SBYTES_PER_ELEMENT,"SBYTES_PER_ELEMENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UInt8Array_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UInt8Array_obj::SBYTES_PER_ELEMENT,"SBYTES_PER_ELEMENT");
};

#endif

::hx::Class UInt8Array_obj::__mClass;

static ::String UInt8Array_obj_sStaticFields[] = {
	HX_("SBYTES_PER_ELEMENT",f3,76,83,c2),
	HX_("fromBytes",a1,f2,20,72),
	::String(null())
};

void UInt8Array_obj::__register()
{
	UInt8Array_obj _hx_dummy;
	UInt8Array_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.utils.UInt8Array",a0,d6,06,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UInt8Array_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UInt8Array_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(UInt8Array_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UInt8Array_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UInt8Array_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UInt8Array_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UInt8Array_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UInt8Array_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void UInt8Array_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0ae936a798dc2d08_7_boot)
HXDLIN(   7)		SBYTES_PER_ELEMENT = 1;
            	}
}

} // end namespace nme
} // end namespace utils
