// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Assets
#include <nme/Assets.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_Memory
#include <nme/Memory.h>
#endif
#ifndef INCLUDED_nme_display_BitmapData
#include <nme/display/BitmapData.h>
#endif
#ifndef INCLUDED_nme_display_BlendMode
#include <nme/display/BlendMode.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_filters_BitmapFilter
#include <nme/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_nme_geom_ColorTransform
#include <nme/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_nme_geom_Matrix
#include <nme/geom/Matrix.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif
#ifndef INCLUDED_nme_image_PixelFormat
#include <nme/image/PixelFormat.h>
#endif
#ifndef INCLUDED_nme_utils_ArrayBufferView
#include <nme/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_nme_utils_UInt8Array
#include <nme/utils/UInt8Array.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bd8716f63573e375_74_new,"nme.display.BitmapData","new",0x6354841f,"nme.display.BitmapData.new","nme/display/BitmapData.hx",74,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_136_clear,"nme.display.BitmapData","clear",0xf3bfd30c,"nme.display.BitmapData.clear","nme/display/BitmapData.hx",136,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_141_colorTransform,"nme.display.BitmapData","colorTransform",0x11b8ce2a,"nme.display.BitmapData.colorTransform","nme/display/BitmapData.hx",141,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_146_copyChannel,"nme.display.BitmapData","copyChannel",0xb46f884d,"nme.display.BitmapData.copyChannel","nme/display/BitmapData.hx",146,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_151_copyPixels,"nme.display.BitmapData","copyPixels",0x31dd26e3,"nme.display.BitmapData.copyPixels","nme/display/BitmapData.hx",151,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_157_createHardwareSurface,"nme.display.BitmapData","createHardwareSurface",0x95153c48,"nme.display.BitmapData.createHardwareSurface","nme/display/BitmapData.hx",157,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_162_destroyHardwareSurface,"nme.display.BitmapData","destroyHardwareSurface",0xc713542c,"nme.display.BitmapData.destroyHardwareSurface","nme/display/BitmapData.hx",162,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_166_dispose,"nme.display.BitmapData","dispose",0x51ab7fde,"nme.display.BitmapData.dispose","nme/display/BitmapData.hx",166,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_173_dumpBits,"nme.display.BitmapData","dumpBits",0x937ba63b,"nme.display.BitmapData.dumpBits","nme/display/BitmapData.hx",173,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_178_encode,"nme.display.BitmapData","encode",0x4654dfb7,"nme.display.BitmapData.encode","nme/display/BitmapData.hx",178,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_183_fillRect,"nme.display.BitmapData","fillRect",0x69799d28,"nme.display.BitmapData.fillRect","nme/display/BitmapData.hx",183,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_191_fillRectEx,"nme.display.BitmapData","fillRectEx",0xf0f973bb,"nme.display.BitmapData.fillRectEx","nme/display/BitmapData.hx",191,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_197_floodFill,"nme.display.BitmapData","floodFill",0x85171060,"nme.display.BitmapData.floodFill","nme/display/BitmapData.hx",197,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_202_getColorBoundsRect,"nme.display.BitmapData","getColorBoundsRect",0xc79808a7,"nme.display.BitmapData.getColorBoundsRect","nme/display/BitmapData.hx",202,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_210_getPixel,"nme.display.BitmapData","getPixel",0x1f3b2df1,"nme.display.BitmapData.getPixel","nme/display/BitmapData.hx",210,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_215_getPixel32,"nme.display.BitmapData","getPixel32",0xc6d778d0,"nme.display.BitmapData.getPixel32","nme/display/BitmapData.hx",215,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_219_getPixels,"nme.display.BitmapData","getPixels",0x348d0562,"nme.display.BitmapData.getPixels","nme/display/BitmapData.hx",219,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_226_getVector,"nme.display.BitmapData","getVector",0x3f40c6f8,"nme.display.BitmapData.getVector","nme/display/BitmapData.hx",226,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_247_nmeDrawToSurface,"nme.display.BitmapData","nmeDrawToSurface",0x35c83709,"nme.display.BitmapData.nmeDrawToSurface","nme/display/BitmapData.hx",247,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_256_nmeLoadFromBytes,"nme.display.BitmapData","nmeLoadFromBytes",0x3e4a4956,"nme.display.BitmapData.nmeLoadFromBytes","nme/display/BitmapData.hx",256,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_261_scroll,"nme.display.BitmapData","scroll",0x93d5c5ae,"nme.display.BitmapData.scroll","nme/display/BitmapData.hx",261,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_267_setFlags,"nme.display.BitmapData","setFlags",0x0d80ec26,"nme.display.BitmapData.setFlags","nme/display/BitmapData.hx",267,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_272_getFlags,"nme.display.BitmapData","getFlags",0x5f2392b2,"nme.display.BitmapData.getFlags","nme/display/BitmapData.hx",272,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_279_setPixel,"nme.display.BitmapData","setPixel",0xcd988765,"nme.display.BitmapData.setPixel","nme/display/BitmapData.hx",279,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_284_setPixel32,"nme.display.BitmapData","setPixel32",0xca551744,"nme.display.BitmapData.setPixel32","nme/display/BitmapData.hx",284,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_288_setPixels,"nme.display.BitmapData","setPixels",0x17ddf16e,"nme.display.BitmapData.setPixels","nme/display/BitmapData.hx",288,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_296_setVector,"nme.display.BitmapData","setVector",0x2291b304,"nme.display.BitmapData.setVector","nme/display/BitmapData.hx",296,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_317_get_data,"nme.display.BitmapData","get_data",0xbede6994,"nme.display.BitmapData.get_data","nme/display/BitmapData.hx",317,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_330_getData,"nme.display.BitmapData","getData",0xab45051f,"nme.display.BitmapData.getData","nme/display/BitmapData.hx",330,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_338_getDataHandle,"nme.display.BitmapData","getDataHandle",0xce021e27,"nme.display.BitmapData.getDataHandle","nme/display/BitmapData.hx",338,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_345_getBytes,"nme.display.BitmapData","getBytes",0x1a2f6fd6,"nme.display.BitmapData.getBytes","nme/display/BitmapData.hx",345,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_356_getUInts8,"nme.display.BitmapData","getUInts8",0xc0f28894,"nme.display.BitmapData.getUInts8","nme/display/BitmapData.hx",356,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_366_setData,"nme.display.BitmapData","setData",0x9e46962b,"nme.display.BitmapData.setData","nme/display/BitmapData.hx",366,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_373_setUInts8,"nme.display.BitmapData","setUInts8",0xa44374a0,"nme.display.BitmapData.setUInts8","nme/display/BitmapData.hx",373,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_380_getFloats32,"nme.display.BitmapData","getFloats32",0x9523e12b,"nme.display.BitmapData.getFloats32","nme/display/BitmapData.hx",380,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_387_setFloats32,"nme.display.BitmapData","setFloats32",0x9f90e837,"nme.display.BitmapData.setFloats32","nme/display/BitmapData.hx",387,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_394_setFormat,"nme.display.BitmapData","setFormat",0x88c29178,"nme.display.BitmapData.setFormat","nme/display/BitmapData.hx",394,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_398_set_format,"nme.display.BitmapData","set_format",0xe1026f95,"nme.display.BitmapData.set_format","nme/display/BitmapData.hx",398,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_405_get_format,"nme.display.BitmapData","get_format",0xdd84d121,"nme.display.BitmapData.get_format","nme/display/BitmapData.hx",405,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_413_noise,"nme.display.BitmapData","noise",0x4b26f119,"nme.display.BitmapData.noise","nme/display/BitmapData.hx",413,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_417_get_rect,"nme.display.BitmapData","get_rect",0xc822608e,"nme.display.BitmapData.get_rect","nme/display/BitmapData.hx",417,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_418_get_width,"nme.display.BitmapData","get_width",0x39989f5c,"nme.display.BitmapData.get_width","nme/display/BitmapData.hx",418,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_419_get_height,"nme.display.BitmapData","get_height",0xe24249d1,"nme.display.BitmapData.get_height","nme/display/BitmapData.hx",419,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_420_get_transparent,"nme.display.BitmapData","get_transparent",0x68fab928,"nme.display.BitmapData.get_transparent","nme/display/BitmapData.hx",420,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_421_get_premultipliedAlpha,"nme.display.BitmapData","get_premultipliedAlpha",0xb5230712,"nme.display.BitmapData.get_premultipliedAlpha","nme/display/BitmapData.hx",421,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_423_set_premultipliedAlpha,"nme.display.BitmapData","set_premultipliedAlpha",0xe8ce8386,"nme.display.BitmapData.set_premultipliedAlpha","nme/display/BitmapData.hx",423,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_429_get_mipmaps,"nme.display.BitmapData","get_mipmaps",0x8cd714c1,"nme.display.BitmapData.get_mipmaps","nme/display/BitmapData.hx",429,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_432_set_mipmaps,"nme.display.BitmapData","set_mipmaps",0x97441bcd,"nme.display.BitmapData.set_mipmaps","nme/display/BitmapData.hx",432,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_447_applyFilter,"nme.display.BitmapData","applyFilter",0x52b8ea85,"nme.display.BitmapData.applyFilter","nme/display/BitmapData.hx",447,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_451_clone,"nme.display.BitmapData","clone",0xf3c774dc,"nme.display.BitmapData.clone","nme/display/BitmapData.hx",451,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_459_cloneRect,"nme.display.BitmapData","cloneRect",0x41398c20,"nme.display.BitmapData.cloneRect","nme/display/BitmapData.hx",459,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_475_draw,"nme.display.BitmapData","draw",0x800cbf65,"nme.display.BitmapData.draw","nme/display/BitmapData.hx",475,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_479_unmultiplyAlpha,"nme.display.BitmapData","unmultiplyAlpha",0xadf59ee0,"nme.display.BitmapData.unmultiplyAlpha","nme/display/BitmapData.hx",479,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_517_threshold,"nme.display.BitmapData","threshold",0x603050aa,"nme.display.BitmapData.threshold","nme/display/BitmapData.hx",517,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_677__self_threshold,"nme.display.BitmapData","_self_threshold",0x6d3450d6,"nme.display.BitmapData._self_threshold","nme/display/BitmapData.hx",677,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_726_generateFilterRect,"nme.display.BitmapData","generateFilterRect",0xc54787b2,"nme.display.BitmapData.generateFilterRect","nme/display/BitmapData.hx",726,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_767_save,"nme.display.BitmapData","save",0x89ea1e9e,"nme.display.BitmapData.save","nme/display/BitmapData.hx",767,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_795_lock,"nme.display.BitmapData","lock",0x85542f4c,"nme.display.BitmapData.lock","nme/display/BitmapData.hx",795,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_800_unlock,"nme.display.BitmapData","unlock",0xb1fd9065,"nme.display.BitmapData.unlock","nme/display/BitmapData.hx",800,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_806_toString,"nme.display.BitmapData","toString",0x352f288d,"nme.display.BitmapData.toString","nme/display/BitmapData.hx",806,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_106_createPremultiplied,"nme.display.BitmapData","createPremultiplied",0x17668e79,"nme.display.BitmapData.createPremultiplied","nme/display/BitmapData.hx",106,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_111_createGrey,"nme.display.BitmapData","createGrey",0x4668669c,"nme.display.BitmapData.createGrey","nme/display/BitmapData.hx",111,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_116_createAlpha,"nme.display.BitmapData","createAlpha",0xdc9ae981,"nme.display.BitmapData.createAlpha","nme/display/BitmapData.hx",116,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_123_createUInt16,"nme.display.BitmapData","createUInt16",0x01c4d55c,"nme.display.BitmapData.createUInt16","nme/display/BitmapData.hx",123,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_129_createUInt32,"nme.display.BitmapData","createUInt32",0x01c4d716,"nme.display.BitmapData.createUInt32","nme/display/BitmapData.hx",129,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_470_createColor,"nme.display.BitmapData","createColor",0x0560b386,"nme.display.BitmapData.createColor","nme/display/BitmapData.hx",470,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_481_extractAlpha,"nme.display.BitmapData","extractAlpha",0x077c12be,"nme.display.BitmapData.extractAlpha","nme/display/BitmapData.hx",481,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_483_extractColor,"nme.display.BitmapData","extractColor",0x3041dcc3,"nme.display.BitmapData.extractColor","nme/display/BitmapData.hx",483,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_488_sameValue,"nme.display.BitmapData","sameValue",0x75b0e72a,"nme.display.BitmapData.sameValue","nme/display/BitmapData.hx",488,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_498_flip_pixel4,"nme.display.BitmapData","flip_pixel4",0x8fc9583f,"nme.display.BitmapData.flip_pixel4","nme/display/BitmapData.hx",498,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_614_ucompare,"nme.display.BitmapData","ucompare",0xa43798b1,"nme.display.BitmapData.ucompare","nme/display/BitmapData.hx",614,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_733_getRGBAPixels,"nme.display.BitmapData","getRGBAPixels",0x5bb34b96,"nme.display.BitmapData.getRGBAPixels","nme/display/BitmapData.hx",733,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_754_load,"nme.display.BitmapData","load",0x85542d87,"nme.display.BitmapData.load","nme/display/BitmapData.hx",754,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_779_loadFromBytes,"nme.display.BitmapData","loadFromBytes",0xc2773c1a,"nme.display.BitmapData.loadFromBytes","nme/display/BitmapData.hx",779,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_791_loadFromHaxeBytes,"nme.display.BitmapData","loadFromHaxeBytes",0x2224b194,"nme.display.BitmapData.loadFromHaxeBytes","nme/display/BitmapData.hx",791,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_22_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",22,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_23_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",23,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_25_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",25,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_26_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",26,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_29_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",29,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_30_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",30,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_31_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",31,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_33_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",33,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_34_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",34,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_35_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",35,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_36_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",36,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_39_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",39,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_40_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",40,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_41_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",41,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_42_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",42,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_43_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",43,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_44_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",44,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_45_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",45,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_47_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",47,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_49_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",49,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_52_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",52,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_53_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",53,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_54_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",54,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_55_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",55,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_56_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",56,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_57_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",57,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_59_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",59,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_60_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",60,0xf75b41ef)
HX_LOCAL_STACK_FRAME(_hx_pos_eab2b44a4d15a9ad_9_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/PrimeLoader.hx",9,0xcf416155)
HX_LOCAL_STACK_FRAME(_hx_pos_bd8716f63573e375_848_boot,"nme.display.BitmapData","boot",0x7eb81793,"nme.display.BitmapData.boot","nme/display/BitmapData.hx",848,0xf75b41ef)
namespace nme{
namespace display{

void BitmapData_obj::__construct(int inWidth,int inHeight,::hx::Null< bool >  __o_inTransparent, ::Dynamic inFillARGB,::hx::Null< int >  __o_inPixelFormat){
            		bool inTransparent = __o_inTransparent.Default(true);
            		int inPixelFormat = __o_inPixelFormat.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_74_new)
HXLINE(  75)		this->nmeHandle = null();
HXLINE(  77)		int pixelFormat;
HXDLIN(  77)		if ((inPixelFormat != -1)) {
HXLINE(  77)			pixelFormat = inPixelFormat;
            		}
            		else {
HXLINE(  78)			if (!(inTransparent)) {
HXLINE(  77)				pixelFormat = 0;
            			}
            			else {
HXLINE(  79)				if (::nme::display::BitmapData_obj::defaultPremultiplied) {
HXLINE(  77)					pixelFormat = 2;
            				}
            				else {
HXLINE(  77)					pixelFormat = 1;
            				}
            			}
            		}
HXLINE(  82)		bool _hx_tmp;
HXDLIN(  82)		bool _hx_tmp1;
HXDLIN(  82)		if ((inWidth > 0)) {
HXLINE(  82)			_hx_tmp1 = (inHeight > 0);
            		}
            		else {
HXLINE(  82)			_hx_tmp1 = false;
            		}
HXDLIN(  82)		if (_hx_tmp1) {
HXLINE(  82)			_hx_tmp = (pixelFormat != -1);
            		}
            		else {
HXLINE(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  84)			int rgb;
HXDLIN(  84)			if (::hx::IsNull( inFillARGB )) {
HXLINE(  84)				rgb = 0;
            			}
            			else {
HXLINE(  84)				rgb = ( (int)(inFillARGB) );
            			}
HXLINE(  86)			this->nmeHandle = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_create(inWidth,inHeight,pixelFormat,rgb,::hx::IsNotNull( inFillARGB ))) );
            		}
HXLINE(  89)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE(  91)			bool _hx_tmp2;
HXDLIN(  91)			if ((inPixelFormat == -1)) {
HXLINE(  91)				_hx_tmp2 = !(inTransparent);
            			}
            			else {
HXLINE(  91)				_hx_tmp2 = true;
            			}
HXDLIN(  91)			if (_hx_tmp2) {
HXLINE(  92)				int _hx_tmp3 = this->getFlags();
HXDLIN(  92)				this->setFlags((_hx_tmp3 | ::nme::display::BitmapData_obj::FLAG_FIXED_FORMAT));
            			}
HXLINE(  94)			::hx::Class className = ::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  95)			if (::Reflect_obj::hasField(className,HX_("resourceName",39,7a,62,90))) {
HXLINE(  97)				::String resoName = ( (::String)(::Reflect_obj::field(className,HX_("resourceName",39,7a,62,90))) );
HXLINE(  98)				{
HXLINE(  98)					 ::nme::utils::ByteArray inBytes = ::nme::utils::ByteArray_obj::fromBytes(::nme::Assets_obj::getResource(resoName));
HXDLIN(  98)					 ::nme::utils::ByteArray inRawAlpha = null();
HXDLIN(  98)					 ::Dynamic onAppData = null();
HXDLIN(  98)					this->nmeHandle = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_from_bytes(::hx::DynamicPtr(inBytes),::hx::DynamicPtr(inRawAlpha),::hx::DynamicPtr(onAppData))) );
            				}
            			}
            		}
HXLINE( 101)		bool _hx_tmp4;
HXDLIN( 101)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 101)			_hx_tmp4 = ::nme::display::BitmapData_obj::defaultMipmaps;
            		}
            		else {
HXLINE( 101)			_hx_tmp4 = false;
            		}
HXDLIN( 101)		if (_hx_tmp4) {
HXLINE( 102)			this->set_mipmaps(true);
            		}
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02e44101;
}

static ::nme::display::IBitmapDrawable_obj _hx_nme_display_BitmapData__hx_nme_display_IBitmapDrawable= {
	( void (::hx::Object::*)( ::Dynamic, ::nme::geom::Matrix, ::nme::geom::ColorTransform,::String, ::nme::geom::Rectangle,bool))&::nme::display::BitmapData_obj::nmeDrawToSurface,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xfe58bb1a: return &_hx_nme_display_BitmapData__hx_nme_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::clear(int color){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_136_clear)
HXDLIN( 136)		::nme::display::BitmapData_obj::nme_bitmap_data_clear(::hx::DynamicPtr(this->nmeHandle),color);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,clear,(void))

void BitmapData_obj::colorTransform( ::nme::geom::Rectangle rect, ::nme::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_141_colorTransform)
HXDLIN( 141)		::nme::display::BitmapData_obj::nme_bitmap_data_color_transform(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect),::hx::DynamicPtr(colorTransform));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

void BitmapData_obj::copyChannel( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint,int inSourceChannel,int inDestChannel){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_146_copyChannel)
HXDLIN( 146)		::nme::display::BitmapData_obj::nme_bitmap_data_copy_channel(::hx::DynamicPtr(sourceBitmapData->nmeHandle),::hx::DynamicPtr(sourceRect),::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(destPoint),inSourceChannel,inDestChannel);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint, ::nme::display::BitmapData alphaBitmapData, ::nme::geom::Point alphaPoint,::hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_151_copyPixels)
HXDLIN( 151)		::nme::display::BitmapData_obj::nme_bitmap_data_copy(::hx::DynamicPtr(sourceBitmapData->nmeHandle),::hx::DynamicPtr(sourceRect),::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(destPoint),mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::createHardwareSurface(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_157_createHardwareSurface)
HXDLIN( 157)		::nme::display::BitmapData_obj::nme_bitmap_data_create_hardware_surface(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,createHardwareSurface,(void))

void BitmapData_obj::destroyHardwareSurface(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_162_destroyHardwareSurface)
HXDLIN( 162)		::nme::display::BitmapData_obj::nme_bitmap_data_destroy_hardware_surface(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,destroyHardwareSurface,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_166_dispose)
HXLINE( 167)		::nme::display::BitmapData_obj::nme_bitmap_data_dispose(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 168)		this->nmeHandle = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::dumpBits(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_173_dumpBits)
HXDLIN( 173)		::nme::display::BitmapData_obj::nme_bitmap_data_dump_bits(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dumpBits,(void))

 ::nme::utils::ByteArray BitmapData_obj::encode(::String inFormat,::hx::Null< Float >  __o_inQuality){
            		Float inQuality = __o_inQuality.Default(((Float)0.9));
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_178_encode)
HXDLIN( 178)		return ( ( ::nme::utils::ByteArray)(::nme::display::BitmapData_obj::nme_bitmap_data_encode(this->nmeHandle,inFormat,inQuality)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::nme::geom::Rectangle rect,int inColour){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_183_fillRect)
HXLINE( 184)		int a = ::hx::UShr(inColour,24);
HXLINE( 185)		int c = (inColour & 16777215);
HXLINE( 186)		::nme::display::BitmapData_obj::nme_bitmap_data_fill(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect),c,a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::fillRectEx( ::nme::geom::Rectangle rect,int inColour,::hx::Null< int >  __o_inAlpha){
            		int inAlpha = __o_inAlpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_191_fillRectEx)
HXDLIN( 191)		::nme::display::BitmapData_obj::nme_bitmap_data_fill(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect),inColour,inAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fillRectEx,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_197_floodFill)
HXDLIN( 197)		::nme::display::BitmapData_obj::nme_bitmap_data_flood_fill(::hx::DynamicPtr(this->nmeHandle),x,y,color);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::nme::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,::hx::Null< bool >  __o_findColor){
            		bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_202_getColorBoundsRect)
HXLINE( 203)		 ::nme::geom::Rectangle result =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 204)		::nme::display::BitmapData_obj::nme_bitmap_data_get_color_bounds_rect(::hx::DynamicPtr(this->nmeHandle),mask,color,findColor,::hx::DynamicPtr(result));
HXLINE( 205)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_210_getPixel)
HXDLIN( 210)		return ::nme::display::BitmapData_obj::nme_bitmap_data_get_pixel(::hx::DynamicPtr(this->nmeHandle),x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_215_getPixel32)
HXDLIN( 215)		return ::nme::display::BitmapData_obj::nme_bitmap_data_get_pixel32(::hx::DynamicPtr(this->nmeHandle),x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::nme::utils::ByteArray BitmapData_obj::getPixels( ::nme::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_219_getPixels)
HXLINE( 220)		 ::nme::utils::ByteArray result = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_get_pixels(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect))) );
HXLINE( 221)		if (::hx::IsNotNull( result )) {
HXLINE( 221)			result->position = result->length;
            		}
HXLINE( 222)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

::Array< int > BitmapData_obj::getVector( ::nme::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_226_getVector)
HXLINE( 227)		int pixels = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 229)		if ((pixels < 1)) {
HXLINE( 229)			return ::Array_obj< int >::__new(0);
            		}
HXLINE( 231)		::Array< int > result = ::Array_obj< int >::__new();
HXLINE( 232)		result[(pixels - 1)] = 0;
HXLINE( 235)		::nme::display::BitmapData_obj::nme_bitmap_data_get_array(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect),::hx::DynamicPtr(result));
HXLINE( 242)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

void BitmapData_obj::nmeDrawToSurface( ::Dynamic inSurface, ::nme::geom::Matrix matrix, ::nme::geom::ColorTransform colorTransform,::String blendMode, ::nme::geom::Rectangle clipRect,bool smoothing){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_247_nmeDrawToSurface)
HXLINE( 249)		int blendIndex = 0;
HXLINE( 250)		::nme::display::BitmapData_obj::nme_render_surface_to_surface(::hx::DynamicPtr(inSurface),::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(matrix),::hx::DynamicPtr(colorTransform),blendIndex,::hx::DynamicPtr(clipRect),smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,nmeDrawToSurface,(void))

void BitmapData_obj::nmeLoadFromBytes( ::nme::utils::ByteArray inBytes, ::nme::utils::ByteArray inRawAlpha, ::Dynamic onAppData){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_256_nmeLoadFromBytes)
HXDLIN( 256)		this->nmeHandle = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_from_bytes(::hx::DynamicPtr(inBytes),::hx::DynamicPtr(inRawAlpha),::hx::DynamicPtr(onAppData))) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,nmeLoadFromBytes,(void))

void BitmapData_obj::scroll(int inDX,int inDY){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_261_scroll)
HXDLIN( 261)		::nme::display::BitmapData_obj::nme_bitmap_data_scroll(::hx::DynamicPtr(this->nmeHandle),inDX,inDY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setFlags(int inFlags){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_267_setFlags)
HXDLIN( 267)		::nme::display::BitmapData_obj::nme_bitmap_data_set_flags(::hx::DynamicPtr(this->nmeHandle),inFlags);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,setFlags,(void))

int BitmapData_obj::getFlags(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_272_getFlags)
HXDLIN( 272)		return ::nme::display::BitmapData_obj::nme_bitmap_data_get_flags(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getFlags,return )

void BitmapData_obj::setPixel(int inX,int inY,int inColour){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_279_setPixel)
HXDLIN( 279)		::nme::display::BitmapData_obj::nme_bitmap_data_set_pixel(::hx::DynamicPtr(this->nmeHandle),inX,inY,inColour);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int inX,int inY,int inColour){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_284_setPixel32)
HXDLIN( 284)		::nme::display::BitmapData_obj::nme_bitmap_data_set_pixel32(::hx::DynamicPtr(this->nmeHandle),inX,inY,inColour);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::nme::geom::Rectangle rect, ::nme::utils::ByteArray pixels){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_288_setPixels)
HXLINE( 289)		int size = ::Std_obj::_hx_int(((rect->width * rect->height) * ( (Float)(4) )));
HXLINE( 290)		pixels->checkData(::Std_obj::_hx_int(( (Float)(size) )));
HXLINE( 291)		::nme::display::BitmapData_obj::nme_bitmap_data_set_bytes(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect),::hx::DynamicPtr(pixels),pixels->position);
HXLINE( 292)		 ::nme::utils::ByteArray pixels1 = pixels;
HXDLIN( 292)		pixels1->position = (pixels1->position + size);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::nme::geom::Rectangle rect,::Array< int > inPixels){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_296_setVector)
HXLINE( 297)		if (::hx::IsNull( rect )) {
HXLINE( 298)			int rect1 = this->get_width();
HXDLIN( 298)			rect =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,rect1,this->get_height());
            		}
HXLINE( 300)		int count = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 302)		if ((inPixels->length < count)) {
HXLINE( 302)			return;
            		}
HXLINE( 305)		::nme::display::BitmapData_obj::nme_bitmap_data_set_array(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect),::hx::DynamicPtr(inPixels));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

 ::nme::utils::UInt8Array BitmapData_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_317_get_data)
HXDLIN( 317)		return ::nme::utils::UInt8Array_obj::fromBytes(this->getPixels(null()),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_data,return )

void BitmapData_obj::getData( ::Dynamic dataHandle,::hx::Null< int >  __o_inPixelFormat,::hx::Null< int >  __o_dataOffset,::hx::Null< int >  __o_dataStride,::hx::Null< int >  __o_subSample){
            		int inPixelFormat = __o_inPixelFormat.Default(-1);
            		int dataOffset = __o_dataOffset.Default(0);
            		int dataStride = __o_dataStride.Default(0);
            		int subSample = __o_subSample.Default(1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_330_getData)
HXLINE( 331)		int pf;
HXDLIN( 331)		if ((inPixelFormat == -1)) {
HXLINE( 331)			pf = this->get_format();
            		}
            		else {
HXLINE( 331)			pf = inPixelFormat;
            		}
HXLINE( 332)		::nme::display::BitmapData_obj::nme_bitmap_data_get_uints8(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(dataHandle),dataOffset,dataStride,pf,subSample);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,getData,(void))

 ::Dynamic BitmapData_obj::getDataHandle(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_338_getDataHandle)
HXDLIN( 338)		return ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_get_data_handle(::hx::DynamicPtr(this->nmeHandle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getDataHandle,return )

 ::nme::utils::ByteArray BitmapData_obj::getBytes(::hx::Null< int >  __o_inPixelFormat){
            		int inPixelFormat = __o_inPixelFormat.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_345_getBytes)
HXLINE( 346)		int pf;
HXDLIN( 346)		if ((inPixelFormat == -1)) {
HXLINE( 346)			pf = this->get_format();
            		}
            		else {
HXLINE( 346)			pf = inPixelFormat;
            		}
HXLINE( 347)		int size = this->get_width();
HXDLIN( 347)		int size1 = (size * this->get_height());
HXDLIN( 347)		int size2 = (size1 * ::nme::image::PixelFormat_obj::getPixelSize(pf));
HXLINE( 348)		 ::nme::utils::ByteArray result =  ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,size2,null());
HXLINE( 349)		this->getData(result,pf,null(),null(),null());
HXLINE( 350)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getBytes,return )

void BitmapData_obj::getUInts8( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,::hx::Null< int >  __o_subSample){
            		int subSample = __o_subSample.Default(1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_356_getUInts8)
HXDLIN( 356)		this->getData(dataHandle,pixelFormat,dataOffset,dataStride,subSample);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,getUInts8,(void))

void BitmapData_obj::setData( ::Dynamic dataHandle,::hx::Null< int >  __o_inPixelFormat,::hx::Null< int >  __o_dataOffset,::hx::Null< int >  __o_dataStride,::hx::Null< int >  __o_expand){
            		int inPixelFormat = __o_inPixelFormat.Default(-1);
            		int dataOffset = __o_dataOffset.Default(0);
            		int dataStride = __o_dataStride.Default(0);
            		int expand = __o_expand.Default(1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_366_setData)
HXLINE( 367)		int pf;
HXDLIN( 367)		if ((inPixelFormat == -1)) {
HXLINE( 367)			pf = this->get_format();
            		}
            		else {
HXLINE( 367)			pf = inPixelFormat;
            		}
HXLINE( 368)		::nme::display::BitmapData_obj::nme_bitmap_data_set_uints8(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(dataHandle),dataOffset,dataStride,pf,expand);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,setData,(void))

void BitmapData_obj::setUInts8( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,::hx::Null< int >  __o_expand){
            		int expand = __o_expand.Default(1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_373_setUInts8)
HXDLIN( 373)		this->setData(dataHandle,pixelFormat,dataOffset,dataStride,expand);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,setUInts8,(void))

void BitmapData_obj::getFloats32( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,int transform,::hx::Null< int >  __o_subSample, ::nme::geom::Rectangle subrect){
            		int subSample = __o_subSample.Default(1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_380_getFloats32)
HXDLIN( 380)		::nme::display::BitmapData_obj::nme_bitmap_data_get_floats32(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(dataHandle),dataOffset,dataStride,pixelFormat,transform,subSample,::hx::DynamicPtr(subrect));
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,getFloats32,(void))

void BitmapData_obj::setFloats32( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,int transform,::hx::Null< int >  __o_expand, ::nme::geom::Rectangle subrect){
            		int expand = __o_expand.Default(1);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_387_setFloats32)
HXDLIN( 387)		::nme::display::BitmapData_obj::nme_bitmap_data_set_floats32(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(dataHandle),dataOffset,dataStride,pixelFormat,transform,expand,::hx::DynamicPtr(subrect));
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,setFloats32,(void))

void BitmapData_obj::setFormat(int format,::hx::Null< bool >  __o_inConvert){
            		bool inConvert = __o_inConvert.Default(true);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_394_setFormat)
HXDLIN( 394)		::nme::display::BitmapData_obj::nme_bitmap_data_set_format(::hx::DynamicPtr(this->nmeHandle),format,inConvert);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setFormat,(void))

int BitmapData_obj::set_format(int format){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_398_set_format)
HXLINE( 399)		this->setFormat(format,null());
HXLINE( 400)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,set_format,return )

int BitmapData_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_405_get_format)
HXDLIN( 405)		return ::nme::display::BitmapData_obj::nme_bitmap_data_get_format(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_format,return )

void BitmapData_obj::noise(int randomSeed,::hx::Null< int >  __o_low,::hx::Null< int >  __o_high,::hx::Null< int >  __o_channelOptions,::hx::Null< bool >  __o_grayScale){
            		int low = __o_low.Default(0);
            		int high = __o_high.Default(255);
            		int channelOptions = __o_channelOptions.Default(7);
            		bool grayScale = __o_grayScale.Default(false);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_413_noise)
HXDLIN( 413)		::nme::display::BitmapData_obj::nme_bitmap_data_noise(::hx::DynamicPtr(this->nmeHandle),randomSeed,low,high,channelOptions,grayScale);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

 ::nme::geom::Rectangle BitmapData_obj::get_rect(){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_417_get_rect)
HXDLIN( 417)		int _hx_tmp = this->get_width();
HXDLIN( 417)		return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,_hx_tmp,this->get_height());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_rect,return )

int BitmapData_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_418_get_width)
HXDLIN( 418)		return ::nme::display::BitmapData_obj::nme_bitmap_data_width(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_width,return )

int BitmapData_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_419_get_height)
HXDLIN( 419)		return ::nme::display::BitmapData_obj::nme_bitmap_data_height(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_height,return )

bool BitmapData_obj::get_transparent(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_420_get_transparent)
HXDLIN( 420)		return ::nme::display::BitmapData_obj::nme_bitmap_data_get_transparent(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_transparent,return )

bool BitmapData_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_421_get_premultipliedAlpha)
HXDLIN( 421)		return ::nme::display::BitmapData_obj::nme_bitmap_data_get_prem_alpha(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_premultipliedAlpha,return )

bool BitmapData_obj::set_premultipliedAlpha(bool inVal){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_423_set_premultipliedAlpha)
HXLINE( 424)		::nme::display::BitmapData_obj::nme_bitmap_data_set_prem_alpha(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 425)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,set_premultipliedAlpha,return )

bool BitmapData_obj::get_mipmaps(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_429_get_mipmaps)
HXDLIN( 429)		int _hx_tmp = this->getFlags();
HXDLIN( 429)		return ((_hx_tmp & ::nme::display::BitmapData_obj::FLAG_MIPMAPS) > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,get_mipmaps,return )

bool BitmapData_obj::set_mipmaps(bool inMipmaps){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_432_set_mipmaps)
HXLINE( 433)		int f = this->getFlags();
HXLINE( 434)		if ((((f & ::nme::display::BitmapData_obj::FLAG_MIPMAPS) != 0) != inMipmaps)) {
HXLINE( 436)			if (inMipmaps) {
HXLINE( 437)				this->setFlags((f | ::nme::display::BitmapData_obj::FLAG_MIPMAPS));
            			}
            			else {
HXLINE( 439)				this->setFlags((f & ~(::nme::display::BitmapData_obj::FLAG_MIPMAPS)));
            			}
            		}
HXLINE( 442)		return inMipmaps;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,set_mipmaps,return )

void BitmapData_obj::applyFilter( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint, ::nme::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_447_applyFilter)
HXDLIN( 447)		::nme::display::BitmapData_obj::nme_bitmap_data_apply_filter(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(sourceBitmapData->nmeHandle),::hx::DynamicPtr(sourceRect),::hx::DynamicPtr(destPoint),::hx::DynamicPtr(filter));
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::nme::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_451_clone)
HXLINE( 452)		 ::nme::display::BitmapData bm =  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,0,0,false,0,-1);
HXLINE( 453)		bm->nmeHandle = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_clone(::hx::DynamicPtr(this->nmeHandle))) );
HXLINE( 454)		bm->set_mipmaps(this->get_mipmaps());
HXLINE( 455)		return bm;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

 ::nme::display::BitmapData BitmapData_obj::cloneRect(int x0,int y0,int inWidth,int inHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_459_cloneRect)
HXLINE( 460)		bool result = this->get_transparent();
HXDLIN( 460)		 ::nme::display::BitmapData result1 =  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,inWidth,inHeight,result,0,this->get_format());
HXLINE( 462)		 ::nme::geom::Rectangle _hx_tmp =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,inWidth,inHeight);
HXDLIN( 462)		result1->copyPixels(::hx::ObjectPtr<OBJ_>(this),_hx_tmp, ::nme::geom::Point_obj::__alloc( HX_CTX ,0,0),null(),null(),false);
HXLINE( 463)		result1->set_mipmaps(this->get_mipmaps());
HXLINE( 465)		return result1;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,cloneRect,return )

void BitmapData_obj::draw(::Dynamic source, ::nme::geom::Matrix matrix, ::nme::geom::ColorTransform colorTransform, ::nme::display::BlendMode blendMode, ::nme::geom::Rectangle clipRect,::hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_475_draw)
HXDLIN( 475)		 ::Dynamic _hx_tmp = this->nmeHandle;
HXDLIN( 475)		::nme::display::IBitmapDrawable_obj::nmeDrawToSurface(source,_hx_tmp,matrix,colorTransform,::Std_obj::string(blendMode),clipRect,smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::unmultiplyAlpha(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_479_unmultiplyAlpha)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,unmultiplyAlpha,(void))

int BitmapData_obj::threshold( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint,::String operation,int threshold,::hx::Null< int >  __o_color,::hx::Null< int >  __o_mask,::hx::Null< bool >  __o_copySource){
            		int color = __o_color.Default(0);
            		int mask = __o_mask.Default(-1);
            		bool copySource = __o_copySource.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_517_threshold)
HXLINE( 520)		bool _hx_tmp;
HXDLIN( 520)		bool _hx_tmp1;
HXDLIN( 520)		bool _hx_tmp2;
HXDLIN( 520)		if (::hx::IsInstanceEq( sourceBitmapData,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 520)			_hx_tmp2 = sourceRect->equals(this->get_rect());
            		}
            		else {
HXLINE( 520)			_hx_tmp2 = false;
            		}
HXDLIN( 520)		if (_hx_tmp2) {
HXLINE( 520)			_hx_tmp1 = (destPoint->x == 0);
            		}
            		else {
HXLINE( 520)			_hx_tmp1 = false;
            		}
HXDLIN( 520)		if (_hx_tmp1) {
HXLINE( 520)			_hx_tmp = (destPoint->y == 0);
            		}
            		else {
HXLINE( 520)			_hx_tmp = false;
            		}
HXDLIN( 520)		if (_hx_tmp) {
HXLINE( 521)			return this->_self_threshold(operation,threshold,color,mask);
            		}
HXLINE( 524)		int sx = ::Std_obj::_hx_int(sourceRect->x);
HXLINE( 525)		int sy = ::Std_obj::_hx_int(sourceRect->y);
HXLINE( 526)		int sw = ::Std_obj::_hx_int(( (Float)(sourceBitmapData->get_width()) ));
HXLINE( 527)		int sh = ::Std_obj::_hx_int(( (Float)(sourceBitmapData->get_height()) ));
HXLINE( 529)		int dx = ::Std_obj::_hx_int(destPoint->x);
HXLINE( 530)		int dy = ::Std_obj::_hx_int(destPoint->y);
HXLINE( 532)		int bw = ((this->get_width() - sw) - dx);
HXLINE( 533)		int bh = ((this->get_height() - sh) - dy);
HXLINE( 535)		int dw;
HXDLIN( 535)		if ((bw < 0)) {
HXLINE( 535)			dw = (sw + ((this->get_width() - sw) - dx));
            		}
            		else {
HXLINE( 535)			dw = sw;
            		}
HXLINE( 536)		int dh;
HXDLIN( 536)		if ((bw < 0)) {
HXLINE( 536)			dh = (sh + ((this->get_height() - sh) - dy));
            		}
            		else {
HXLINE( 536)			dh = sh;
            		}
HXLINE( 538)		int hits = 0;
HXLINE( 541)		threshold = (((((threshold & 255) << 24) | (((threshold >> 8) & 255) << 16)) | (((threshold >> 16) & 255) << 8)) | ((threshold >> 24) & 255));
HXLINE( 542)		color = (((((color & 255) << 24) | (((color >> 8) & 255) << 16)) | (((color >> 16) & 255) << 8)) | ((color >> 24) & 255));
HXLINE( 547)		int canvas_mem = ((sw * sh) * 4);
HXLINE( 548)		int source_mem = 0;
HXLINE( 549)		if (copySource) {
HXLINE( 550)			source_mem = ((sw * sh) * 4);
            		}
HXLINE( 553)		int total_mem = (canvas_mem + source_mem);
HXLINE( 554)		 ::nme::utils::ByteArray mem =  ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 555)		mem->setLength(total_mem);
HXLINE( 558)		mem->position = 0;
HXLINE( 559)		 ::nme::display::BitmapData bd1 = sourceBitmapData->clone();
HXLINE( 560)		mem->writeBytes(bd1->getPixels(sourceRect),null(),null());
HXLINE( 561)		mem->position = canvas_mem;
HXLINE( 562)		if (copySource) {
HXLINE( 563)			 ::nme::display::BitmapData bd2 = sourceBitmapData->clone();
HXLINE( 564)			mem->writeBytes(bd2->getPixels(sourceRect),null(),null());
            		}
HXLINE( 567)		mem->position = 0;
HXLINE( 570)		::nme::Memory_obj::select(mem);
HXLINE( 572)		int thresh_mask = (threshold & mask);
HXLINE( 575)		{
HXLINE( 575)			int _g = 0;
HXDLIN( 575)			int _g1 = dh;
HXDLIN( 575)			while((_g < _g1)){
HXLINE( 575)				_g = (_g + 1);
HXDLIN( 575)				int yy = (_g - 1);
HXLINE( 576)				{
HXLINE( 576)					int _g2 = 0;
HXDLIN( 576)					int _g3 = dw;
HXDLIN( 576)					while((_g2 < _g3)){
HXLINE( 576)						_g2 = (_g2 + 1);
HXDLIN( 576)						int xx = (_g2 - 1);
HXLINE( 577)						int pos = (((xx + sx) + ((yy + sy) * sw)) * 4);
HXLINE( 578)						int pixelValue =  ::__hxcpp_memory_get_i32(pos);
HXLINE( 579)						int pix_mask = (pixelValue & mask);
HXLINE( 581)						int i = ::nme::display::BitmapData_obj::ucompare(pix_mask,thresh_mask);
HXLINE( 582)						bool test = false;
HXLINE( 583)						if ((operation == HX_("==",60,35,00,00))) {
HXLINE( 583)							test = (i == 0);
            						}
            						else {
HXLINE( 584)							if ((operation == HX_("<",3c,00,00,00))) {
HXLINE( 584)								test = (i == -1);
            							}
            							else {
HXLINE( 585)								if ((operation == HX_(">",3e,00,00,00))) {
HXLINE( 585)									test = (i == 1);
            								}
            								else {
HXLINE( 586)									if ((operation == HX_("!=",fc,1c,00,00))) {
HXLINE( 586)										test = (i != 0);
            									}
            									else {
HXLINE( 587)										if ((operation == HX_("<=",81,34,00,00))) {
HXLINE( 587)											if ((i != 0)) {
HXLINE( 587)												test = (i == -1);
            											}
            											else {
HXLINE( 587)												test = true;
            											}
            										}
            										else {
HXLINE( 588)											if ((operation == HX_(">=",3f,36,00,00))) {
HXLINE( 588)												if ((i != 0)) {
HXLINE( 588)													test = (i == 1);
            												}
            												else {
HXLINE( 588)													test = true;
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE( 589)						if (test) {
HXLINE( 590)							 ::__hxcpp_memory_set_i32(pos,color);
HXLINE( 591)							hits = (hits + 1);
            						}
            						else {
HXLINE( 592)							if (copySource) {
HXLINE( 593)								int source_color =  ::__hxcpp_memory_get_i32((canvas_mem + pos));
HXLINE( 594)								 ::__hxcpp_memory_set_i32(pos,source_color);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 598)		mem->position = 0;
HXLINE( 599)		bd1->setPixels(sourceRect,mem);
HXLINE( 600)		this->copyPixels(bd1,bd1->get_rect(),destPoint,null(),null(),null());
HXLINE( 601)		::nme::Memory_obj::select(null());
HXLINE( 602)		return hits;
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

int BitmapData_obj::_self_threshold(::String operation,int threshold,::hx::Null< int >  __o_color,::hx::Null< int >  __o_mask){
            		int color = __o_color.Default(0);
            		int mask = __o_mask.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_677__self_threshold)
HXLINE( 678)		int hits = 0;
HXLINE( 681)		threshold = (((((threshold & 255) << 24) | (((threshold >> 8) & 255) << 16)) | (((threshold >> 16) & 255) << 8)) | ((threshold >> 24) & 255));
HXLINE( 682)		color = (((((color & 255) << 24) | (((color >> 8) & 255) << 16)) | (((color >> 16) & 255) << 8)) | ((color >> 24) & 255));
HXLINE( 685)		 ::nme::utils::ByteArray mem =  ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 687)		int _hx_tmp = this->get_width();
HXDLIN( 687)		mem->setLength(((_hx_tmp * this->get_height()) * 4));
HXLINE( 690)		 ::nme::utils::ByteArray mem1 = this->getPixels(this->get_rect());
HXLINE( 691)		mem1->position = 0;
HXLINE( 694)		::nme::Memory_obj::select(mem1);
HXLINE( 696)		int thresh_mask = (threshold & mask);
HXLINE( 698)		{
HXLINE( 698)			int _g = 0;
HXDLIN( 698)			int _g1 = this->get_height();
HXDLIN( 698)			while((_g < _g1)){
HXLINE( 698)				_g = (_g + 1);
HXDLIN( 698)				int yy = (_g - 1);
HXLINE( 699)				int width_yy = (this->get_width() * yy);
HXLINE( 700)				{
HXLINE( 700)					int _g2 = 0;
HXDLIN( 700)					int _g3 = this->get_width();
HXDLIN( 700)					while((_g2 < _g3)){
HXLINE( 700)						_g2 = (_g2 + 1);
HXDLIN( 700)						int xx = (_g2 - 1);
HXLINE( 701)						int pos = ((width_yy + xx) * 4);
HXLINE( 702)						int pixelValue =  ::__hxcpp_memory_get_i32(pos);
HXLINE( 703)						int pix_mask = (pixelValue & mask);
HXLINE( 705)						int i = ::nme::display::BitmapData_obj::ucompare(pix_mask,thresh_mask);
HXLINE( 706)						bool test = false;
HXLINE( 707)						if ((operation == HX_("==",60,35,00,00))) {
HXLINE( 707)							test = (i == 0);
            						}
            						else {
HXLINE( 708)							if ((operation == HX_("<",3c,00,00,00))) {
HXLINE( 708)								test = (i == -1);
            							}
            							else {
HXLINE( 709)								if ((operation == HX_(">",3e,00,00,00))) {
HXLINE( 709)									test = (i == 1);
            								}
            								else {
HXLINE( 710)									if ((operation == HX_("!=",fc,1c,00,00))) {
HXLINE( 710)										test = (i != 0);
            									}
            									else {
HXLINE( 711)										if ((operation == HX_("<=",81,34,00,00))) {
HXLINE( 711)											if ((i != 0)) {
HXLINE( 711)												test = (i == -1);
            											}
            											else {
HXLINE( 711)												test = true;
            											}
            										}
            										else {
HXLINE( 712)											if ((operation == HX_(">=",3f,36,00,00))) {
HXLINE( 712)												if ((i != 0)) {
HXLINE( 712)													test = (i == 1);
            												}
            												else {
HXLINE( 712)													test = true;
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE( 713)						if (test) {
HXLINE( 714)							 ::__hxcpp_memory_set_i32(pos,color);
HXLINE( 715)							hits = (hits + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE( 719)		mem1->position = 0;
HXLINE( 720)		this->setPixels(this->get_rect(),mem1);
HXLINE( 721)		::nme::Memory_obj::select(null());
HXLINE( 722)		return hits;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,_self_threshold,return )

 ::nme::geom::Rectangle BitmapData_obj::generateFilterRect( ::nme::geom::Rectangle sourceRect, ::nme::filters::BitmapFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_726_generateFilterRect)
HXLINE( 727)		 ::nme::geom::Rectangle result =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 728)		::nme::display::BitmapData_obj::nme_bitmap_data_generate_filter_rect(::hx::DynamicPtr(sourceRect),::hx::DynamicPtr(filter),::hx::DynamicPtr(result));
HXLINE( 729)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

void BitmapData_obj::save(::String inFilename,::hx::Null< Float >  __o_inQuality){
            		Float inQuality = __o_inQuality.Default(((Float)0.9));
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_767_save)
HXLINE( 768)		::String ext;
HXDLIN( 768)		if ((inFilename.length > 3)) {
HXLINE( 768)			ext = inFilename.substr((inFilename.length - 3),null()).toLowerCase();
            		}
            		else {
HXLINE( 768)			ext = HX_("png",a9,5c,55,00);
            		}
HXLINE( 769)		bool _hx_tmp;
HXDLIN( 769)		if ((ext != HX_("jpg",e1,d0,50,00))) {
HXLINE( 769)			_hx_tmp = (ext == HX_("peg",d2,54,55,00));
            		}
            		else {
HXLINE( 769)			_hx_tmp = true;
            		}
HXDLIN( 769)		if (_hx_tmp) {
HXLINE( 770)			ext = HX_("jpg",e1,d0,50,00);
            		}
            		else {
HXLINE( 772)			ext = HX_("png",a9,5c,55,00);
            		}
HXLINE( 773)		 ::nme::utils::ByteArray bytes = this->encode(ext,inQuality);
HXLINE( 774)		bytes->writeFile(inFilename);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,save,(void))

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_795_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::unlock( ::nme::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_800_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

::String BitmapData_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_806_toString)
HXDLIN( 806)		::String _hx_tmp = ((HX_("BitmapData(",2f,e4,10,f9) + this->get_width()) + HX_(",",2c,00,00,00));
HXDLIN( 806)		return ((_hx_tmp + this->get_height()) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,toString,return )

::String BitmapData_obj::PNG;

::String BitmapData_obj::JPG;

int BitmapData_obj::TRANSPARENT;

int BitmapData_obj::HARDWARE;

int BitmapData_obj::FLAG_NOREPEAT_NONPOT;

int BitmapData_obj::FLAG_FIXED_FORMAT;

int BitmapData_obj::FLAG_MIPMAPS;

int BitmapData_obj::CHANNEL_RED;

int BitmapData_obj::CHANNEL_GREEN;

int BitmapData_obj::CHANNEL_BLUE;

int BitmapData_obj::CHANNEL_ALPHA;

int BitmapData_obj::FLOAT_UNSCALED;

int BitmapData_obj::FLOAT_ZERO_MEAN;

int BitmapData_obj::FLOAT_128_MEAN;

int BitmapData_obj::FLOAT_UNIT_SCALE;

int BitmapData_obj::FLOAT_STD_SCALE;

int BitmapData_obj::FLOAT_SWIZZLE_RGB;

int BitmapData_obj::FLOAT_100_SCALE;

int BitmapData_obj::FLOAT_NORM;

int BitmapData_obj::FLOAT_EXPAND;

int BitmapData_obj::CLEAR;

int BitmapData_obj::BLACK;

int BitmapData_obj::WHITE;

int BitmapData_obj::RED;

int BitmapData_obj::GREEN;

int BitmapData_obj::BLUE;

bool BitmapData_obj::defaultPremultiplied;

bool BitmapData_obj::defaultMipmaps;

 ::nme::display::BitmapData BitmapData_obj::createPremultiplied(int width,int height,::hx::Null< int >  __o_inArgb){
            		int inArgb = __o_inArgb.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_106_createPremultiplied)
HXDLIN( 106)		return  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,inArgb,2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,createPremultiplied,return )

 ::nme::display::BitmapData BitmapData_obj::createGrey(int width,int height, ::Dynamic inLuma){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_111_createGrey)
HXDLIN( 111)		return  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,width,height,false,inLuma,4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,createGrey,return )

 ::nme::display::BitmapData BitmapData_obj::createAlpha(int width,int height,::hx::Null< int >  __o_inAlpha){
            		int inAlpha = __o_inAlpha.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_116_createAlpha)
HXDLIN( 116)		return  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,width,height,false,((inAlpha & 255) << 24),3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,createAlpha,return )

 ::nme::display::BitmapData BitmapData_obj::createUInt16(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_123_createUInt16)
HXDLIN( 123)		return  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,width,height,false,null(),10);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,createUInt16,return )

 ::nme::display::BitmapData BitmapData_obj::createUInt32(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_129_createUInt32)
HXDLIN( 129)		return  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,width,height,false,null(),11);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,createUInt32,return )

int BitmapData_obj::createColor(int inRGB,::hx::Null< int >  __o_inAlpha){
            		int inAlpha = __o_inAlpha.Default(255);
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_470_createColor)
HXDLIN( 470)		return (inRGB | (inAlpha << 24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,createColor,return )

int BitmapData_obj::extractAlpha(int v){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_481_extractAlpha)
HXDLIN( 481)		return ::hx::UShr(v,24);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,extractAlpha,return )

int BitmapData_obj::extractColor(int v){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_483_extractColor)
HXDLIN( 483)		return (v & 16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,extractColor,return )

bool BitmapData_obj::sameValue(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_488_sameValue)
HXDLIN( 488)		return (a == b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,sameValue,return )

int BitmapData_obj::flip_pixel4(int pix4){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_498_flip_pixel4)
HXDLIN( 498)		return (((((pix4 & 255) << 24) | (((pix4 >> 8) & 255) << 16)) | (((pix4 >> 16) & 255) << 8)) | ((pix4 >> 24) & 255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,flip_pixel4,return )

int BitmapData_obj::ucompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_614_ucompare)
HXLINE( 615)		int tmp1 = ((n1 >> 24) & 255);
HXLINE( 616)		int tmp2 = ((n2 >> 24) & 255);
HXLINE( 627)		if ((tmp1 != tmp2)) {
HXLINE( 629)			if ((tmp1 > tmp2)) {
HXLINE( 629)				return 1;
            			}
            			else {
HXLINE( 629)				return -1;
            			}
            		}
            		else {
HXLINE( 633)			tmp1 = ((n1 >> 16) & 255);
HXLINE( 634)			tmp2 = ((n2 >> 16) & 255);
HXLINE( 636)			if ((tmp1 != tmp2)) {
HXLINE( 637)				if ((tmp1 > tmp2)) {
HXLINE( 637)					return 1;
            				}
            				else {
HXLINE( 637)					return -1;
            				}
            			}
            			else {
HXLINE( 642)				tmp1 = ((n1 >> 8) & 255);
HXLINE( 643)				tmp2 = ((n2 >> 8) & 255);
HXLINE( 645)				if ((tmp1 != tmp2)) {
HXLINE( 646)					if ((tmp1 > tmp2)) {
HXLINE( 646)						return 1;
            					}
            					else {
HXLINE( 646)						return -1;
            					}
            				}
            				else {
HXLINE( 650)					tmp1 = (n1 & 255);
HXLINE( 651)					tmp2 = (n2 & 255);
HXLINE( 653)					if ((tmp1 != tmp2)) {
HXLINE( 654)						if ((tmp1 > tmp2)) {
HXLINE( 654)							return 1;
            						}
            						else {
HXLINE( 654)							return -1;
            						}
            					}
            					else {
HXLINE( 658)						return 0;
            					}
            				}
            			}
            		}
HXLINE( 627)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,ucompare,return )

 ::nme::utils::ByteArray BitmapData_obj::getRGBAPixels( ::nme::display::BitmapData bitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_733_getRGBAPixels)
HXLINE( 734)		int p = bitmapData->get_width();
HXDLIN( 734)		 ::nme::utils::ByteArray p1 = bitmapData->getPixels( ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,p,bitmapData->get_height()));
HXLINE( 735)		int num = bitmapData->get_width();
HXDLIN( 735)		int num1 = (num * bitmapData->get_height());
HXLINE( 737)		{
HXLINE( 737)			int _g = 0;
HXDLIN( 737)			int _g1 = num1;
HXDLIN( 737)			while((_g < _g1)){
HXLINE( 737)				_g = (_g + 1);
HXDLIN( 737)				int i = (_g - 1);
HXLINE( 739)				int alpha = p1->__get((i * 4));
HXLINE( 740)				int red = p1->__get(((i * 4) + 1));
HXLINE( 741)				int green = p1->__get(((i * 4) + 2));
HXLINE( 742)				int blue = p1->__get(((i * 4) + 3));
HXLINE( 744)				p1->__set((i * 4),red);
HXLINE( 745)				p1->__set(((i * 4) + 1),green);
HXLINE( 746)				p1->__set(((i * 4) + 2),blue);
HXLINE( 747)				p1->__set(((i * 4) + 3),alpha);
            			}
            		}
HXLINE( 750)		return p1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getRGBAPixels,return )

 ::nme::display::BitmapData BitmapData_obj::load(::String inFilename,::hx::Null< int >  __o_format, ::Dynamic inOnMarker){
            		int format = __o_format.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_754_load)
HXLINE( 755)		 ::nme::display::BitmapData result =  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,0,0,null(),null(),null());
HXLINE( 756)		result->nmeHandle = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_load(::hx::DynamicPtr(inFilename),::hx::DynamicPtr(format),::hx::DynamicPtr(inOnMarker))) );
HXLINE( 757)		bool _hx_tmp;
HXDLIN( 757)		if ((result->get_width() >= 1)) {
HXLINE( 757)			_hx_tmp = (result->get_height() < 1);
            		}
            		else {
HXLINE( 757)			_hx_tmp = true;
            		}
HXDLIN( 757)		if (_hx_tmp) {
HXLINE( 758)			return null();
            		}
HXLINE( 759)		bool _hx_tmp1;
HXDLIN( 759)		if (::hx::IsNotNull( result->nmeHandle )) {
HXLINE( 759)			_hx_tmp1 = ::nme::display::BitmapData_obj::defaultMipmaps;
            		}
            		else {
HXLINE( 759)			_hx_tmp1 = false;
            		}
HXDLIN( 759)		if (_hx_tmp1) {
HXLINE( 760)			result->set_mipmaps(true);
            		}
HXLINE( 761)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,load,return )

 ::nme::display::BitmapData BitmapData_obj::loadFromBytes( ::nme::utils::ByteArray inBytes, ::nme::utils::ByteArray inRawAlpha, ::Dynamic inOnMarker){
            	HX_GC_STACKFRAME(&_hx_pos_bd8716f63573e375_779_loadFromBytes)
HXLINE( 780)		 ::nme::display::BitmapData result =  ::nme::display::BitmapData_obj::__alloc( HX_CTX ,0,0,null(),null(),null());
HXLINE( 781)		result->nmeHandle = ( ( ::Dynamic)(::nme::display::BitmapData_obj::nme_bitmap_data_from_bytes(::hx::DynamicPtr(inBytes),::hx::DynamicPtr(inRawAlpha),::hx::DynamicPtr(inOnMarker))) );
HXLINE( 782)		bool _hx_tmp;
HXDLIN( 782)		if ((result->get_width() >= 1)) {
HXLINE( 782)			_hx_tmp = (result->get_height() < 1);
            		}
            		else {
HXLINE( 782)			_hx_tmp = true;
            		}
HXDLIN( 782)		if (_hx_tmp) {
HXLINE( 783)			return null();
            		}
HXLINE( 784)		bool _hx_tmp1;
HXDLIN( 784)		if (::hx::IsNotNull( result->nmeHandle )) {
HXLINE( 784)			_hx_tmp1 = ::nme::display::BitmapData_obj::defaultMipmaps;
            		}
            		else {
HXLINE( 784)			_hx_tmp1 = false;
            		}
HXDLIN( 784)		if (_hx_tmp1) {
HXLINE( 785)			result->set_mipmaps(true);
            		}
HXLINE( 786)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,loadFromBytes,return )

 ::nme::display::BitmapData BitmapData_obj::loadFromHaxeBytes( ::haxe::io::Bytes inBytes, ::haxe::io::Bytes inRawAlpha, ::Dynamic inOnMarker){
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_791_loadFromHaxeBytes)
HXDLIN( 791)		 ::nme::utils::ByteArray _hx_tmp = ::nme::utils::ByteArray_obj::fromBytes(inBytes);
HXDLIN( 791)		 ::nme::utils::ByteArray _hx_tmp1;
HXDLIN( 791)		if (::hx::IsNull( inRawAlpha )) {
HXDLIN( 791)			_hx_tmp1 = null();
            		}
            		else {
HXDLIN( 791)			_hx_tmp1 = ::nme::utils::ByteArray_obj::fromBytes(inRawAlpha);
            		}
HXDLIN( 791)		return ::nme::display::BitmapData_obj::loadFromBytes(_hx_tmp,_hx_tmp1,inOnMarker);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,loadFromHaxeBytes,return )

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_apply_filter;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_generate_filter_rect;

::cpp::Function<  ::hx::Object *  (int,int,int,int,bool) > BitmapData_obj::nme_bitmap_data_create;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_load;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_from_bytes;

::cpp::Function< void  ( ::hx::Object *,int) > BitmapData_obj::nme_bitmap_data_clear;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_clone;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_color_transform;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > BitmapData_obj::nme_bitmap_data_copy;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int,int) > BitmapData_obj::nme_bitmap_data_copy_channel;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > BitmapData_obj::nme_bitmap_data_fill;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_pixels;

::cpp::Function< int  ( ::hx::Object *,int,int) > BitmapData_obj::nme_bitmap_data_get_pixel;

::cpp::Function< int  ( ::hx::Object *,int,int) > BitmapData_obj::nme_bitmap_data_get_pixel32;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_array;

::cpp::Function< void  ( ::hx::Object *,int,int,bool, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_color_bounds_rect;

::cpp::Function< void  ( ::hx::Object *,int,int) > BitmapData_obj::nme_bitmap_data_scroll;

::cpp::Function< void  ( ::hx::Object *,int,int,int) > BitmapData_obj::nme_bitmap_data_set_pixel;

::cpp::Function< void  ( ::hx::Object *,int,int,int) > BitmapData_obj::nme_bitmap_data_set_pixel32;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,int) > BitmapData_obj::nme_bitmap_data_set_bytes;

::cpp::Function< void  ( ::hx::Object *,int,bool) > BitmapData_obj::nme_bitmap_data_set_format;

::cpp::Function< int  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_format;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_set_array;

::cpp::Function< void  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_create_hardware_surface;

::cpp::Function< void  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_destroy_hardware_surface;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *,bool) > BitmapData_obj::nme_render_surface_to_surface;

::cpp::Function< int  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_height;

::cpp::Function< int  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_width;

::cpp::Function< bool  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_transparent;

::cpp::Function< void  ( ::hx::Object *,int) > BitmapData_obj::nme_bitmap_data_set_flags;

::cpp::Function< int  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_flags;

 ::Dynamic BitmapData_obj::nme_bitmap_data_encode;

::cpp::Function< void  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_dump_bits;

::cpp::Function< void  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_dispose;

::cpp::Function< void  ( ::hx::Object *,int,int,int,int,bool) > BitmapData_obj::nme_bitmap_data_noise;

::cpp::Function< void  ( ::hx::Object *,int,int,int) > BitmapData_obj::nme_bitmap_data_flood_fill;

::cpp::Function< bool  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_prem_alpha;

::cpp::Function< void  ( ::hx::Object *,bool) > BitmapData_obj::nme_bitmap_data_set_prem_alpha;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_floats32;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > BitmapData_obj::nme_bitmap_data_set_floats32;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > BitmapData_obj::nme_bitmap_data_get_uints8;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > BitmapData_obj::nme_bitmap_data_set_uints8;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > BitmapData_obj::nme_bitmap_data_get_data_handle;


::hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int inWidth,int inHeight,::hx::Null< bool >  __o_inTransparent, ::Dynamic inFillARGB,::hx::Null< int >  __o_inPixelFormat) {
	::hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(inWidth,inHeight,__o_inTransparent,inFillARGB,__o_inPixelFormat);
	return __this;
}

::hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(::hx::Ctx *_hx_ctx,int inWidth,int inHeight,::hx::Null< bool >  __o_inTransparent, ::Dynamic inFillARGB,::hx::Null< int >  __o_inPixelFormat) {
	BitmapData_obj *__this = (BitmapData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "nme.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(inWidth,inHeight,__o_inTransparent,inFillARGB,__o_inPixelFormat);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(data,"data");
}

::hx::Val BitmapData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_rect() : rect ); }
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_data() : data ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return ::hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_width() : width ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return ::hx::Val( noise_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_height() : height ); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_format() ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return ::hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return ::hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return ::hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipmaps") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_mipmaps() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getData") ) { return ::hx::Val( getData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setData") ) { return ::hx::Val( setData_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dumpBits") ) { return ::hx::Val( dumpBits_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return ::hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return ::hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFlags") ) { return ::hx::Val( setFlags_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFlags") ) { return ::hx::Val( getFlags_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return ::hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return ::hx::Val( get_data_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBytes") ) { return ::hx::Val( getBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return ::hx::Val( get_rect_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return ::hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return ::hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return ::hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return ::hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return ::hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUInts8") ) { return ::hx::Val( getUInts8_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUInts8") ) { return ::hx::Val( setUInts8_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFormat") ) { return ::hx::Val( setFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"cloneRect") ) { return ::hx::Val( cloneRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return ::hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return ::hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRectEx") ) { return ::hx::Val( fillRectEx_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return ::hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return ::hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return ::hx::Val( set_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return ::hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_transparent() : transparent ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return ::hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloats32") ) { return ::hx::Val( getFloats32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFloats32") ) { return ::hx::Val( setFloats32_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mipmaps") ) { return ::hx::Val( get_mipmaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mipmaps") ) { return ::hx::Val( set_mipmaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return ::hx::Val( applyFilter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getDataHandle") ) { return ::hx::Val( getDataHandle_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return ::hx::Val( colorTransform_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_transparent") ) { return ::hx::Val( get_transparent_dyn() ); }
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { return ::hx::Val( unmultiplyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"_self_threshold") ) { return ::hx::Val( _self_threshold_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nmeDrawToSurface") ) { return ::hx::Val( nmeDrawToSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeLoadFromBytes") ) { return ::hx::Val( nmeLoadFromBytes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_premultipliedAlpha() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return ::hx::Val( getColorBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return ::hx::Val( generateFilterRect_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createHardwareSurface") ) { return ::hx::Val( createHardwareSurface_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"destroyHardwareSurface") ) { return ::hx::Val( destroyHardwareSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return ::hx::Val( get_premultipliedAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_premultipliedAlpha") ) { return ::hx::Val( set_premultipliedAlpha_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"RED") ) { outValue = ( RED ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BLUE") ) { outValue = ( BLUE ); return true; }
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"CLEAR") ) { outValue = ( CLEAR ); return true; }
		if (HX_FIELD_EQ(inName,"BLACK") ) { outValue = ( BLACK ); return true; }
		if (HX_FIELD_EQ(inName,"WHITE") ) { outValue = ( WHITE ); return true; }
		if (HX_FIELD_EQ(inName,"GREEN") ) { outValue = ( GREEN ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"HARDWARE") ) { outValue = ( HARDWARE ); return true; }
		if (HX_FIELD_EQ(inName,"ucompare") ) { outValue = ucompare_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sameValue") ) { outValue = sameValue_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createGrey") ) { outValue = createGrey_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { outValue = ( TRANSPARENT ); return true; }
		if (HX_FIELD_EQ(inName,"createAlpha") ) { outValue = createAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createColor") ) { outValue = createColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flip_pixel4") ) { outValue = flip_pixel4_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"FLAG_MIPMAPS") ) { outValue = ( FLAG_MIPMAPS ); return true; }
		if (HX_FIELD_EQ(inName,"createUInt16") ) { outValue = createUInt16_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createUInt32") ) { outValue = createUInt32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extractAlpha") ) { outValue = extractAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extractColor") ) { outValue = extractColor_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getRGBAPixels") ) { outValue = getRGBAPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultMipmaps") ) { outValue = ( defaultMipmaps ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"FLAG_FIXED_FORMAT") ) { outValue = ( FLAG_FIXED_FORMAT ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromHaxeBytes") ) { outValue = loadFromHaxeBytes_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createPremultiplied") ) { outValue = createPremultiplied_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"FLAG_NOREPEAT_NONPOT") ) { outValue = ( FLAG_NOREPEAT_NONPOT ); return true; }
		if (HX_FIELD_EQ(inName,"defaultPremultiplied") ) { outValue = ( defaultPremultiplied ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_load") ) { outValue = ( nme_bitmap_data_load ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_copy") ) { outValue = ( nme_bitmap_data_copy ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_fill") ) { outValue = ( nme_bitmap_data_fill ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_clear") ) { outValue = ( nme_bitmap_data_clear ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_clone") ) { outValue = ( nme_bitmap_data_clone ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_width") ) { outValue = ( nme_bitmap_data_width ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_noise") ) { outValue = ( nme_bitmap_data_noise ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_create") ) { outValue = ( nme_bitmap_data_create ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_scroll") ) { outValue = ( nme_bitmap_data_scroll ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_height") ) { outValue = ( nme_bitmap_data_height ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_encode") ) { outValue = ( nme_bitmap_data_encode ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_dispose") ) { outValue = ( nme_bitmap_data_dispose ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_pixel") ) { outValue = ( nme_bitmap_data_get_pixel ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_array") ) { outValue = ( nme_bitmap_data_get_array ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_pixel") ) { outValue = ( nme_bitmap_data_set_pixel ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_bytes") ) { outValue = ( nme_bitmap_data_set_bytes ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_array") ) { outValue = ( nme_bitmap_data_set_array ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_flags") ) { outValue = ( nme_bitmap_data_set_flags ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_flags") ) { outValue = ( nme_bitmap_data_get_flags ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_dump_bits") ) { outValue = ( nme_bitmap_data_dump_bits ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_from_bytes") ) { outValue = ( nme_bitmap_data_from_bytes ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_pixels") ) { outValue = ( nme_bitmap_data_get_pixels ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_format") ) { outValue = ( nme_bitmap_data_set_format ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_format") ) { outValue = ( nme_bitmap_data_get_format ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_flood_fill") ) { outValue = ( nme_bitmap_data_flood_fill ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_uints8") ) { outValue = ( nme_bitmap_data_get_uints8 ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_uints8") ) { outValue = ( nme_bitmap_data_set_uints8 ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_pixel32") ) { outValue = ( nme_bitmap_data_get_pixel32 ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_pixel32") ) { outValue = ( nme_bitmap_data_set_pixel32 ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_apply_filter") ) { outValue = ( nme_bitmap_data_apply_filter ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_copy_channel") ) { outValue = ( nme_bitmap_data_copy_channel ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_floats32") ) { outValue = ( nme_bitmap_data_get_floats32 ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_floats32") ) { outValue = ( nme_bitmap_data_set_floats32 ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_render_surface_to_surface") ) { outValue = ( nme_render_surface_to_surface ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_prem_alpha") ) { outValue = ( nme_bitmap_data_get_prem_alpha ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_prem_alpha") ) { outValue = ( nme_bitmap_data_set_prem_alpha ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_color_transform") ) { outValue = ( nme_bitmap_data_color_transform ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_transparent") ) { outValue = ( nme_bitmap_data_get_transparent ); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_data_handle") ) { outValue = ( nme_bitmap_data_get_data_handle ); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_generate_filter_rect") ) { outValue = ( nme_bitmap_data_generate_filter_rect ); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_color_bounds_rect") ) { outValue = ( nme_bitmap_data_get_color_bounds_rect ); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_create_hardware_surface") ) { outValue = ( nme_bitmap_data_create_hardware_surface ); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_destroy_hardware_surface") ) { outValue = ( nme_bitmap_data_destroy_hardware_surface ); return true; }
	}
	return false;
}

::hx::Val BitmapData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::nme::utils::UInt8Array >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_format(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipmaps") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_mipmaps(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_premultipliedAlpha(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"RED") ) { RED=ioValue.Cast< int >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BLUE") ) { BLUE=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"CLEAR") ) { CLEAR=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"BLACK") ) { BLACK=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"WHITE") ) { WHITE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"GREEN") ) { GREEN=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"HARDWARE") ) { HARDWARE=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { TRANSPARENT=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"FLAG_MIPMAPS") ) { FLAG_MIPMAPS=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultMipmaps") ) { defaultMipmaps=ioValue.Cast< bool >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"FLAG_FIXED_FORMAT") ) { FLAG_FIXED_FORMAT=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"FLAG_NOREPEAT_NONPOT") ) { FLAG_NOREPEAT_NONPOT=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultPremultiplied") ) { defaultPremultiplied=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_load") ) { nme_bitmap_data_load=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_copy") ) { nme_bitmap_data_copy=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_fill") ) { nme_bitmap_data_fill=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_clear") ) { nme_bitmap_data_clear=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_clone") ) { nme_bitmap_data_clone=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_width") ) { nme_bitmap_data_width=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_noise") ) { nme_bitmap_data_noise=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int,int,int,bool) > >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_create") ) { nme_bitmap_data_create=ioValue.Cast< ::cpp::Function<  ::hx::Object *  (int,int,int,int,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_scroll") ) { nme_bitmap_data_scroll=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_height") ) { nme_bitmap_data_height=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_encode") ) { nme_bitmap_data_encode=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_dispose") ) { nme_bitmap_data_dispose=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_pixel") ) { nme_bitmap_data_get_pixel=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_array") ) { nme_bitmap_data_get_array=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_pixel") ) { nme_bitmap_data_set_pixel=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_bytes") ) { nme_bitmap_data_set_bytes=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_array") ) { nme_bitmap_data_set_array=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_flags") ) { nme_bitmap_data_set_flags=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_flags") ) { nme_bitmap_data_get_flags=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_dump_bits") ) { nme_bitmap_data_dump_bits=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_from_bytes") ) { nme_bitmap_data_from_bytes=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_pixels") ) { nme_bitmap_data_get_pixels=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_format") ) { nme_bitmap_data_set_format=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_format") ) { nme_bitmap_data_get_format=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_flood_fill") ) { nme_bitmap_data_flood_fill=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_uints8") ) { nme_bitmap_data_get_uints8=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_uints8") ) { nme_bitmap_data_set_uints8=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_pixel32") ) { nme_bitmap_data_get_pixel32=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_pixel32") ) { nme_bitmap_data_set_pixel32=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int,int) > >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_apply_filter") ) { nme_bitmap_data_apply_filter=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_copy_channel") ) { nme_bitmap_data_copy_channel=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_floats32") ) { nme_bitmap_data_get_floats32=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_floats32") ) { nme_bitmap_data_set_floats32=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_render_surface_to_surface") ) { nme_render_surface_to_surface=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *,bool) > >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_prem_alpha") ) { nme_bitmap_data_get_prem_alpha=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_set_prem_alpha") ) { nme_bitmap_data_set_prem_alpha=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_color_transform") ) { nme_bitmap_data_color_transform=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_transparent") ) { nme_bitmap_data_get_transparent=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_data_handle") ) { nme_bitmap_data_get_data_handle=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > >(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_generate_filter_rect") ) { nme_bitmap_data_generate_filter_rect=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_get_color_bounds_rect") ) { nme_bitmap_data_get_color_bounds_rect=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int,bool, ::hx::Object *) > >(); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_create_hardware_surface") ) { nme_bitmap_data_create_hardware_surface=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"nme_bitmap_data_destroy_hardware_surface") ) { nme_bitmap_data_destroy_hardware_surface=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("transparent",52,2b,ba,22));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("format",37,8f,8e,fd));
	outFields->push(HX_("premultipliedAlpha",28,8e,5c,1a));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("mipmaps",eb,a9,53,75));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,rect),HX_("rect",24,4d,a7,4b)},
	{::hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_("transparent",52,2b,ba,22)},
	{::hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BitmapData_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsObject /*  ::nme::utils::UInt8Array */ ,(int)offsetof(BitmapData_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &BitmapData_obj::PNG,HX_("PNG",89,f8,3c,00)},
	{::hx::fsString,(void *) &BitmapData_obj::JPG,HX_("JPG",c1,6c,38,00)},
	{::hx::fsInt,(void *) &BitmapData_obj::TRANSPARENT,HX_("TRANSPARENT",32,37,f6,f8)},
	{::hx::fsInt,(void *) &BitmapData_obj::HARDWARE,HX_("HARDWARE",a8,72,59,cf)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLAG_NOREPEAT_NONPOT,HX_("FLAG_NOREPEAT_NONPOT",98,eb,da,ab)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLAG_FIXED_FORMAT,HX_("FLAG_FIXED_FORMAT",b5,91,b9,a3)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLAG_MIPMAPS,HX_("FLAG_MIPMAPS",f8,36,1c,bf)},
	{::hx::fsInt,(void *) &BitmapData_obj::CHANNEL_RED,HX_("CHANNEL_RED",55,1c,7a,0f)},
	{::hx::fsInt,(void *) &BitmapData_obj::CHANNEL_GREEN,HX_("CHANNEL_GREEN",c7,fe,a9,2a)},
	{::hx::fsInt,(void *) &BitmapData_obj::CHANNEL_BLUE,HX_("CHANNEL_BLUE",f6,a2,d0,70)},
	{::hx::fsInt,(void *) &BitmapData_obj::CHANNEL_ALPHA,HX_("CHANNEL_ALPHA",62,97,53,b2)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_UNSCALED,HX_("FLOAT_UNSCALED",16,14,0e,eb)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_ZERO_MEAN,HX_("FLOAT_ZERO_MEAN",39,02,96,c6)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_128_MEAN,HX_("FLOAT_128_MEAN",f0,c6,1b,af)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_UNIT_SCALE,HX_("FLOAT_UNIT_SCALE",52,a4,ee,e5)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_STD_SCALE,HX_("FLOAT_STD_SCALE",ab,02,0c,8c)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_SWIZZLE_RGB,HX_("FLOAT_SWIZZLE_RGB",49,77,2c,01)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_100_SCALE,HX_("FLOAT_100_SCALE",19,bd,36,3d)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_NORM,HX_("FLOAT_NORM",1f,9b,62,e6)},
	{::hx::fsInt,(void *) &BitmapData_obj::FLOAT_EXPAND,HX_("FLOAT_EXPAND",fd,95,a0,cc)},
	{::hx::fsInt,(void *) &BitmapData_obj::CLEAR,HX_("CLEAR",6d,a9,49,c6)},
	{::hx::fsInt,(void *) &BitmapData_obj::BLACK,HX_("BLACK",9f,0d,e0,32)},
	{::hx::fsInt,(void *) &BitmapData_obj::WHITE,HX_("WHITE",89,82,ab,47)},
	{::hx::fsInt,(void *) &BitmapData_obj::RED,HX_("RED",31,75,3e,00)},
	{::hx::fsInt,(void *) &BitmapData_obj::GREEN,HX_("GREEN",a3,46,db,17)},
	{::hx::fsInt,(void *) &BitmapData_obj::BLUE,HX_("BLUE",9a,0a,da,2b)},
	{::hx::fsBool,(void *) &BitmapData_obj::defaultPremultiplied,HX_("defaultPremultiplied",d5,43,a0,f5)},
	{::hx::fsBool,(void *) &BitmapData_obj::defaultMipmaps,HX_("defaultMipmaps",2a,03,94,a4)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_apply_filter,HX_("nme_bitmap_data_apply_filter",e7,e5,5a,ae)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_generate_filter_rect,HX_("nme_bitmap_data_generate_filter_rect",3f,d5,6f,31)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  (int,int,int,int,bool) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_create,HX_("nme_bitmap_data_create",ba,14,74,43)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_load,HX_("nme_bitmap_data_load",64,bc,e0,98)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_from_bytes,HX_("nme_bitmap_data_from_bytes",54,45,10,ca)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_clear,HX_("nme_bitmap_data_clear",8f,45,30,fb)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_clone,HX_("nme_bitmap_data_clone",5f,e7,37,fb)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_color_transform,HX_("nme_bitmap_data_color_transform",d2,7e,4f,30)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_copy,HX_("nme_bitmap_data_copy",f3,dd,ed,92)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_copy_channel,HX_("nme_bitmap_data_copy_channel",37,e3,43,71)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_fill,HX_("nme_bitmap_data_fill",c1,f0,e4,94)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_pixels,HX_("nme_bitmap_data_get_pixels",b4,c3,12,7f)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_pixel,HX_("nme_bitmap_data_get_pixel",df,1f,e9,cc)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_pixel32,HX_("nme_bitmap_data_get_pixel32",3e,42,58,b1)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_array,HX_("nme_bitmap_data_get_array",f2,c6,d4,2f)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int,bool, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_color_bounds_rect,HX_("nme_bitmap_data_get_color_bounds_rect",2b,fd,24,ae)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_scroll,HX_("nme_bitmap_data_scroll",cb,85,c9,0e)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_pixel,HX_("nme_bitmap_data_set_pixel",eb,0b,3a,b0)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_pixel32,HX_("nme_bitmap_data_set_pixel32",4a,49,c5,bb)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_bytes,HX_("nme_bitmap_data_set_bytes",d0,4d,2e,ab)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,bool) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_format,HX_("nme_bitmap_data_set_format",32,02,75,f3)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_format,HX_("nme_bitmap_data_get_format",be,63,f7,ef)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_array,HX_("nme_bitmap_data_set_array",fe,b2,25,13)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_create_hardware_surface,HX_("nme_bitmap_data_create_hardware_surface",bb,72,c0,82)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_destroy_hardware_surface,HX_("nme_bitmap_data_destroy_hardware_surface",b9,07,98,4b)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *,bool) > */ ,(void *) &BitmapData_obj::nme_render_surface_to_surface,HX_("nme_render_surface_to_surface",4b,6f,6a,5d)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_height,HX_("nme_bitmap_data_height",a5,b5,b0,c9)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_width,HX_("nme_bitmap_data_width",08,8a,37,7d)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_transparent,HX_("nme_bitmap_data_get_transparent",6b,8d,fe,19)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_flags,HX_("nme_bitmap_data_set_flags",ac,70,22,f0)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_flags,HX_("nme_bitmap_data_get_flags",a0,84,d1,0c)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BitmapData_obj::nme_bitmap_data_encode,HX_("nme_bitmap_data_encode",d4,9f,48,c1)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_dump_bits,HX_("nme_bitmap_data_dump_bits",33,3a,bb,c1)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_dispose,HX_("nme_bitmap_data_dispose",21,d9,ff,6b)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int,int,int,bool) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_noise,HX_("nme_bitmap_data_noise",9c,63,97,52)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_flood_fill,HX_("nme_bitmap_data_flood_fill",a2,6c,90,64)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_prem_alpha,HX_("nme_bitmap_data_get_prem_alpha",10,dd,98,67)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_prem_alpha,HX_("nme_bitmap_data_set_prem_alpha",84,c5,b8,87)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_floats32,HX_("nme_bitmap_data_get_floats32",fd,57,53,db)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_floats32,HX_("nme_bitmap_data_set_floats32",71,7b,4c,f0)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_uints8,HX_("nme_bitmap_data_get_uints8",06,d7,4a,78)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_set_uints8,HX_("nme_bitmap_data_set_uints8",7a,75,c8,7b)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > */ ,(void *) &BitmapData_obj::nme_bitmap_data_get_data_handle,HX_("nme_bitmap_data_get_data_handle",76,1a,53,92)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("rect",24,4d,a7,4b),
	HX_("transparent",52,2b,ba,22),
	HX_("width",06,b6,62,ca),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("data",2a,56,63,42),
	HX_("clear",8d,71,5b,48),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("createHardwareSurface",c9,ac,29,88),
	HX_("destroyHardwareSurface",8b,54,e1,85),
	HX_("dispose",9f,80,4c,bb),
	HX_("dumpBits",5a,4e,bb,96),
	HX_("encode",16,f2,e3,f9),
	HX_("fillRect",47,45,b9,6c),
	HX_("fillRectEx",9a,a1,8a,01),
	HX_("floodFill",61,83,8a,59),
	HX_("getColorBoundsRect",86,ad,e8,80),
	HX_("getPixel",10,d6,7a,22),
	HX_("getPixel32",af,a6,68,d7),
	HX_("getPixels",63,78,00,09),
	HX_("getVector",f9,39,b4,13),
	HX_("nmeDrawToSurface",28,96,2b,08),
	HX_("nmeLoadFromBytes",75,a8,ad,10),
	HX_("scroll",0d,d8,64,47),
	HX_("setFlags",45,94,c0,10),
	HX_("getFlags",d1,3a,63,62),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("setVector",05,26,05,f7),
	HX_("get_data",b3,11,1e,c2),
	HX_("getData",e0,05,e6,14),
	HX_("getDataHandle",a8,a5,11,00),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getUInts8",95,fb,65,95),
	HX_("setData",ec,96,e7,07),
	HX_("setUInts8",a1,e7,b6,78),
	HX_("getFloats32",6c,d6,9a,03),
	HX_("setFloats32",78,dd,07,0e),
	HX_("setFormat",79,04,36,5d),
	HX_("set_format",74,9d,93,f1),
	HX_("get_format",00,ff,15,ee),
	HX_("noise",9a,8f,c2,9f),
	HX_("get_rect",ad,08,62,cb),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_transparent",e9,e2,9b,e3),
	HX_("get_premultipliedAlpha",71,07,f1,73),
	HX_("set_premultipliedAlpha",e5,83,9c,a7),
	HX_("get_mipmaps",02,0a,4e,fb),
	HX_("set_mipmaps",0e,11,bb,05),
	HX_("applyFilter",c6,df,2f,c1),
	HX_("clone",5d,13,63,48),
	HX_("cloneRect",21,ff,ac,15),
	HX_("draw",04,2c,70,42),
	HX_("unmultiplyAlpha",a1,c8,96,28),
	HX_("threshold",ab,c3,a3,34),
	HX_("_self_threshold",97,7a,d5,e7),
	HX_("generateFilterRect",91,2c,98,7e),
	HX_("save",3d,8b,4d,4c),
	HX_("lock",eb,9b,b7,47),
	HX_("unlock",c4,a2,8c,65),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::PNG,"PNG");
	HX_MARK_MEMBER_NAME(BitmapData_obj::JPG,"JPG");
	HX_MARK_MEMBER_NAME(BitmapData_obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(BitmapData_obj::HARDWARE,"HARDWARE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLAG_NOREPEAT_NONPOT,"FLAG_NOREPEAT_NONPOT");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLAG_FIXED_FORMAT,"FLAG_FIXED_FORMAT");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLAG_MIPMAPS,"FLAG_MIPMAPS");
	HX_MARK_MEMBER_NAME(BitmapData_obj::CHANNEL_RED,"CHANNEL_RED");
	HX_MARK_MEMBER_NAME(BitmapData_obj::CHANNEL_GREEN,"CHANNEL_GREEN");
	HX_MARK_MEMBER_NAME(BitmapData_obj::CHANNEL_BLUE,"CHANNEL_BLUE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::CHANNEL_ALPHA,"CHANNEL_ALPHA");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_UNSCALED,"FLOAT_UNSCALED");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_ZERO_MEAN,"FLOAT_ZERO_MEAN");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_128_MEAN,"FLOAT_128_MEAN");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_UNIT_SCALE,"FLOAT_UNIT_SCALE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_STD_SCALE,"FLOAT_STD_SCALE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_SWIZZLE_RGB,"FLOAT_SWIZZLE_RGB");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_100_SCALE,"FLOAT_100_SCALE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_NORM,"FLOAT_NORM");
	HX_MARK_MEMBER_NAME(BitmapData_obj::FLOAT_EXPAND,"FLOAT_EXPAND");
	HX_MARK_MEMBER_NAME(BitmapData_obj::CLEAR,"CLEAR");
	HX_MARK_MEMBER_NAME(BitmapData_obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(BitmapData_obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::RED,"RED");
	HX_MARK_MEMBER_NAME(BitmapData_obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(BitmapData_obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::defaultPremultiplied,"defaultPremultiplied");
	HX_MARK_MEMBER_NAME(BitmapData_obj::defaultMipmaps,"defaultMipmaps");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_apply_filter,"nme_bitmap_data_apply_filter");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_generate_filter_rect,"nme_bitmap_data_generate_filter_rect");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_create,"nme_bitmap_data_create");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_load,"nme_bitmap_data_load");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_from_bytes,"nme_bitmap_data_from_bytes");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_clear,"nme_bitmap_data_clear");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_clone,"nme_bitmap_data_clone");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_color_transform,"nme_bitmap_data_color_transform");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_copy,"nme_bitmap_data_copy");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_copy_channel,"nme_bitmap_data_copy_channel");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_fill,"nme_bitmap_data_fill");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_pixels,"nme_bitmap_data_get_pixels");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_pixel,"nme_bitmap_data_get_pixel");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_pixel32,"nme_bitmap_data_get_pixel32");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_array,"nme_bitmap_data_get_array");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_color_bounds_rect,"nme_bitmap_data_get_color_bounds_rect");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_scroll,"nme_bitmap_data_scroll");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_pixel,"nme_bitmap_data_set_pixel");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_pixel32,"nme_bitmap_data_set_pixel32");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_bytes,"nme_bitmap_data_set_bytes");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_format,"nme_bitmap_data_set_format");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_format,"nme_bitmap_data_get_format");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_array,"nme_bitmap_data_set_array");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_create_hardware_surface,"nme_bitmap_data_create_hardware_surface");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_destroy_hardware_surface,"nme_bitmap_data_destroy_hardware_surface");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_render_surface_to_surface,"nme_render_surface_to_surface");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_height,"nme_bitmap_data_height");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_width,"nme_bitmap_data_width");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_transparent,"nme_bitmap_data_get_transparent");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_flags,"nme_bitmap_data_set_flags");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_flags,"nme_bitmap_data_get_flags");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_encode,"nme_bitmap_data_encode");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_dump_bits,"nme_bitmap_data_dump_bits");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_dispose,"nme_bitmap_data_dispose");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_noise,"nme_bitmap_data_noise");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_flood_fill,"nme_bitmap_data_flood_fill");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_prem_alpha,"nme_bitmap_data_get_prem_alpha");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_prem_alpha,"nme_bitmap_data_set_prem_alpha");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_floats32,"nme_bitmap_data_get_floats32");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_floats32,"nme_bitmap_data_set_floats32");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_uints8,"nme_bitmap_data_get_uints8");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_uints8,"nme_bitmap_data_set_uints8");
	HX_MARK_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_data_handle,"nme_bitmap_data_get_data_handle");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::PNG,"PNG");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::JPG,"JPG");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::HARDWARE,"HARDWARE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLAG_NOREPEAT_NONPOT,"FLAG_NOREPEAT_NONPOT");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLAG_FIXED_FORMAT,"FLAG_FIXED_FORMAT");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLAG_MIPMAPS,"FLAG_MIPMAPS");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::CHANNEL_RED,"CHANNEL_RED");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::CHANNEL_GREEN,"CHANNEL_GREEN");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::CHANNEL_BLUE,"CHANNEL_BLUE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::CHANNEL_ALPHA,"CHANNEL_ALPHA");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_UNSCALED,"FLOAT_UNSCALED");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_ZERO_MEAN,"FLOAT_ZERO_MEAN");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_128_MEAN,"FLOAT_128_MEAN");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_UNIT_SCALE,"FLOAT_UNIT_SCALE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_STD_SCALE,"FLOAT_STD_SCALE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_SWIZZLE_RGB,"FLOAT_SWIZZLE_RGB");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_100_SCALE,"FLOAT_100_SCALE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_NORM,"FLOAT_NORM");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::FLOAT_EXPAND,"FLOAT_EXPAND");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::CLEAR,"CLEAR");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::defaultPremultiplied,"defaultPremultiplied");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::defaultMipmaps,"defaultMipmaps");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_apply_filter,"nme_bitmap_data_apply_filter");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_generate_filter_rect,"nme_bitmap_data_generate_filter_rect");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_create,"nme_bitmap_data_create");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_load,"nme_bitmap_data_load");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_from_bytes,"nme_bitmap_data_from_bytes");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_clear,"nme_bitmap_data_clear");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_clone,"nme_bitmap_data_clone");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_color_transform,"nme_bitmap_data_color_transform");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_copy,"nme_bitmap_data_copy");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_copy_channel,"nme_bitmap_data_copy_channel");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_fill,"nme_bitmap_data_fill");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_pixels,"nme_bitmap_data_get_pixels");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_pixel,"nme_bitmap_data_get_pixel");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_pixel32,"nme_bitmap_data_get_pixel32");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_array,"nme_bitmap_data_get_array");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_color_bounds_rect,"nme_bitmap_data_get_color_bounds_rect");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_scroll,"nme_bitmap_data_scroll");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_pixel,"nme_bitmap_data_set_pixel");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_pixel32,"nme_bitmap_data_set_pixel32");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_bytes,"nme_bitmap_data_set_bytes");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_format,"nme_bitmap_data_set_format");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_format,"nme_bitmap_data_get_format");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_array,"nme_bitmap_data_set_array");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_create_hardware_surface,"nme_bitmap_data_create_hardware_surface");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_destroy_hardware_surface,"nme_bitmap_data_destroy_hardware_surface");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_render_surface_to_surface,"nme_render_surface_to_surface");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_height,"nme_bitmap_data_height");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_width,"nme_bitmap_data_width");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_transparent,"nme_bitmap_data_get_transparent");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_flags,"nme_bitmap_data_set_flags");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_flags,"nme_bitmap_data_get_flags");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_encode,"nme_bitmap_data_encode");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_dump_bits,"nme_bitmap_data_dump_bits");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_dispose,"nme_bitmap_data_dispose");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_noise,"nme_bitmap_data_noise");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_flood_fill,"nme_bitmap_data_flood_fill");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_prem_alpha,"nme_bitmap_data_get_prem_alpha");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_prem_alpha,"nme_bitmap_data_set_prem_alpha");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_floats32,"nme_bitmap_data_get_floats32");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_floats32,"nme_bitmap_data_set_floats32");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_uints8,"nme_bitmap_data_get_uints8");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_set_uints8,"nme_bitmap_data_set_uints8");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::nme_bitmap_data_get_data_handle,"nme_bitmap_data_get_data_handle");
};

#endif

::hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_("PNG",89,f8,3c,00),
	HX_("JPG",c1,6c,38,00),
	HX_("TRANSPARENT",32,37,f6,f8),
	HX_("HARDWARE",a8,72,59,cf),
	HX_("FLAG_NOREPEAT_NONPOT",98,eb,da,ab),
	HX_("FLAG_FIXED_FORMAT",b5,91,b9,a3),
	HX_("FLAG_MIPMAPS",f8,36,1c,bf),
	HX_("CHANNEL_RED",55,1c,7a,0f),
	HX_("CHANNEL_GREEN",c7,fe,a9,2a),
	HX_("CHANNEL_BLUE",f6,a2,d0,70),
	HX_("CHANNEL_ALPHA",62,97,53,b2),
	HX_("FLOAT_UNSCALED",16,14,0e,eb),
	HX_("FLOAT_ZERO_MEAN",39,02,96,c6),
	HX_("FLOAT_128_MEAN",f0,c6,1b,af),
	HX_("FLOAT_UNIT_SCALE",52,a4,ee,e5),
	HX_("FLOAT_STD_SCALE",ab,02,0c,8c),
	HX_("FLOAT_SWIZZLE_RGB",49,77,2c,01),
	HX_("FLOAT_100_SCALE",19,bd,36,3d),
	HX_("FLOAT_NORM",1f,9b,62,e6),
	HX_("FLOAT_EXPAND",fd,95,a0,cc),
	HX_("CLEAR",6d,a9,49,c6),
	HX_("BLACK",9f,0d,e0,32),
	HX_("WHITE",89,82,ab,47),
	HX_("RED",31,75,3e,00),
	HX_("GREEN",a3,46,db,17),
	HX_("BLUE",9a,0a,da,2b),
	HX_("defaultPremultiplied",d5,43,a0,f5),
	HX_("defaultMipmaps",2a,03,94,a4),
	HX_("createPremultiplied",ba,2c,a6,84),
	HX_("createGrey",7b,94,f9,56),
	HX_("createAlpha",c2,de,11,4b),
	HX_("createUInt16",fb,78,64,3b),
	HX_("createUInt32",b5,7a,64,3b),
	HX_("createColor",c7,a8,d7,73),
	HX_("extractAlpha",5d,b6,1b,41),
	HX_("extractColor",62,80,e1,69),
	HX_("sameValue",2b,5a,24,4a),
	HX_("flip_pixel4",80,4d,40,fe),
	HX_("ucompare",d0,40,77,a7),
	HX_("getRGBAPixels",17,d3,c2,8d),
	HX_("load",26,9a,b7,47),
	HX_("loadFromBytes",9b,c3,86,f4),
	HX_("loadFromHaxeBytes",95,8d,b4,66),
	HX_("nme_bitmap_data_apply_filter",e7,e5,5a,ae),
	HX_("nme_bitmap_data_generate_filter_rect",3f,d5,6f,31),
	HX_("nme_bitmap_data_create",ba,14,74,43),
	HX_("nme_bitmap_data_load",64,bc,e0,98),
	HX_("nme_bitmap_data_from_bytes",54,45,10,ca),
	HX_("nme_bitmap_data_clear",8f,45,30,fb),
	HX_("nme_bitmap_data_clone",5f,e7,37,fb),
	HX_("nme_bitmap_data_color_transform",d2,7e,4f,30),
	HX_("nme_bitmap_data_copy",f3,dd,ed,92),
	HX_("nme_bitmap_data_copy_channel",37,e3,43,71),
	HX_("nme_bitmap_data_fill",c1,f0,e4,94),
	HX_("nme_bitmap_data_get_pixels",b4,c3,12,7f),
	HX_("nme_bitmap_data_get_pixel",df,1f,e9,cc),
	HX_("nme_bitmap_data_get_pixel32",3e,42,58,b1),
	HX_("nme_bitmap_data_get_array",f2,c6,d4,2f),
	HX_("nme_bitmap_data_get_color_bounds_rect",2b,fd,24,ae),
	HX_("nme_bitmap_data_scroll",cb,85,c9,0e),
	HX_("nme_bitmap_data_set_pixel",eb,0b,3a,b0),
	HX_("nme_bitmap_data_set_pixel32",4a,49,c5,bb),
	HX_("nme_bitmap_data_set_bytes",d0,4d,2e,ab),
	HX_("nme_bitmap_data_set_format",32,02,75,f3),
	HX_("nme_bitmap_data_get_format",be,63,f7,ef),
	HX_("nme_bitmap_data_set_array",fe,b2,25,13),
	HX_("nme_bitmap_data_create_hardware_surface",bb,72,c0,82),
	HX_("nme_bitmap_data_destroy_hardware_surface",b9,07,98,4b),
	HX_("nme_render_surface_to_surface",4b,6f,6a,5d),
	HX_("nme_bitmap_data_height",a5,b5,b0,c9),
	HX_("nme_bitmap_data_width",08,8a,37,7d),
	HX_("nme_bitmap_data_get_transparent",6b,8d,fe,19),
	HX_("nme_bitmap_data_set_flags",ac,70,22,f0),
	HX_("nme_bitmap_data_get_flags",a0,84,d1,0c),
	HX_("nme_bitmap_data_encode",d4,9f,48,c1),
	HX_("nme_bitmap_data_dump_bits",33,3a,bb,c1),
	HX_("nme_bitmap_data_dispose",21,d9,ff,6b),
	HX_("nme_bitmap_data_noise",9c,63,97,52),
	HX_("nme_bitmap_data_flood_fill",a2,6c,90,64),
	HX_("nme_bitmap_data_get_prem_alpha",10,dd,98,67),
	HX_("nme_bitmap_data_set_prem_alpha",84,c5,b8,87),
	HX_("nme_bitmap_data_get_floats32",fd,57,53,db),
	HX_("nme_bitmap_data_set_floats32",71,7b,4c,f0),
	HX_("nme_bitmap_data_get_uints8",06,d7,4a,78),
	HX_("nme_bitmap_data_set_uints8",7a,75,c8,7b),
	HX_("nme_bitmap_data_get_data_handle",76,1a,53,92),
	::String(null())
};

void BitmapData_obj::__register()
{
	BitmapData_obj _hx_dummy;
	BitmapData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.BitmapData",ad,88,62,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_22_boot)
HXDLIN(  22)		PNG = HX_("png",a9,5c,55,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_23_boot)
HXDLIN(  23)		JPG = HX_("jpg",e1,d0,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_25_boot)
HXDLIN(  25)		TRANSPARENT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_26_boot)
HXDLIN(  26)		HARDWARE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_29_boot)
HXDLIN(  29)		FLAG_NOREPEAT_NONPOT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_30_boot)
HXDLIN(  30)		FLAG_FIXED_FORMAT = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_31_boot)
HXDLIN(  31)		FLAG_MIPMAPS = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_33_boot)
HXDLIN(  33)		CHANNEL_RED = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_34_boot)
HXDLIN(  34)		CHANNEL_GREEN = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_35_boot)
HXDLIN(  35)		CHANNEL_BLUE = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_36_boot)
HXDLIN(  36)		CHANNEL_ALPHA = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_39_boot)
HXDLIN(  39)		FLOAT_UNSCALED = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_40_boot)
HXDLIN(  40)		FLOAT_ZERO_MEAN = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_41_boot)
HXDLIN(  41)		FLOAT_128_MEAN = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_42_boot)
HXDLIN(  42)		FLOAT_UNIT_SCALE = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_43_boot)
HXDLIN(  43)		FLOAT_STD_SCALE = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_44_boot)
HXDLIN(  44)		FLOAT_SWIZZLE_RGB = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_45_boot)
HXDLIN(  45)		FLOAT_100_SCALE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_47_boot)
HXDLIN(  47)		FLOAT_NORM = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_49_boot)
HXDLIN(  49)		FLOAT_EXPAND = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_52_boot)
HXDLIN(  52)		CLEAR = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_53_boot)
HXDLIN(  53)		BLACK = -16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_54_boot)
HXDLIN(  54)		WHITE = -16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_55_boot)
HXDLIN(  55)		RED = -65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_56_boot)
HXDLIN(  56)		GREEN = -16711936;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_57_boot)
HXDLIN(  57)		BLUE = -16776961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_59_boot)
HXDLIN(  59)		defaultPremultiplied = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_60_boot)
HXDLIN(  60)		defaultMipmaps = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_apply_filter = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_apply_filter",e7,e5,5a,ae),HX_("ooooov",67,bb,ca,94),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_generate_filter_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_generate_filter_rect",3f,d5,6f,31),HX_("ooov",47,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_create = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_create",ba,14,74,43),HX_("iiiibo",8d,35,43,b6),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_load = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_load",64,bc,e0,98),HX_("oooo",40,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_from_bytes = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_from_bytes",54,45,10,ca),HX_("oooo",40,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_clear = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_clear",8f,45,30,fb),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_clone = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_clone",5f,e7,37,fb),HX_("oo",20,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_color_transform = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_color_transform",d2,7e,4f,30),HX_("ooov",47,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_copy = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_copy",f3,dd,ed,92),HX_("oooobv",14,b0,ca,94),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_copy_channel = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_copy_channel",37,e3,43,71),HX_("ooooiiv",56,a6,94,9c),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_fill = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_fill",c1,f0,e4,94),HX_("ooiiv",76,1b,29,33),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_pixels = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_pixels",b4,c3,12,7f),HX_("ooo",4f,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_pixel = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_pixel",df,1f,e9,cc),HX_("oiii",7a,b7,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_pixel32 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_pixel32",3e,42,58,b1),HX_("oiii",7a,b7,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_array = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_array",f2,c6,d4,2f),HX_("ooov",47,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_color_bounds_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_color_bounds_rect",2b,fd,24,ae),HX_("oiibov",5a,1b,62,1c),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_scroll = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_scroll",cb,85,c9,0e),HX_("oiiv",87,b7,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_pixel = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_pixel",eb,0b,3a,b0),HX_("oiiiv",bc,d3,31,2f),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_pixel32 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_pixel32",4a,49,c5,bb),HX_("oiiiv",bc,d3,31,2f),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_bytes = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_bytes",d0,4d,2e,ab),HX_("oooiv",fc,a8,2d,33),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_format = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_format",32,02,75,f3),HX_("oibv",6e,b1,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_format = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_format",be,63,f7,ef),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_array = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_array",fe,b2,25,13),HX_("ooov",47,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_create_hardware_surface = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_create_hardware_surface",bb,72,c0,82),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_destroy_hardware_surface = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_destroy_hardware_surface",b9,07,98,4b),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_render_surface_to_surface = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_render_surface_to_surface",4b,6f,6a,5d),HX_("ooooiobv",7a,61,81,65),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_height = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_height",a5,b5,b0,c9),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_width = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_width",08,8a,37,7d),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_transparent = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_transparent",6b,8d,fe,19),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_flags = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_flags",ac,70,22,f0),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_flags = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_flags",a0,84,d1,0c),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bd8716f63573e375_848_boot)
HXDLIN( 848)		nme_bitmap_data_encode = ::nme::Loader_obj::load(HX_("nme_bitmap_data_encode",d4,9f,48,c1),3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_dump_bits = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_dump_bits",33,3a,bb,c1),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_dispose = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_dispose",21,d9,ff,6b),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_noise = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_noise",9c,63,97,52),HX_("oiiiibv",43,b3,11,be),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_flood_fill = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_flood_fill",a2,6c,90,64),HX_("oiiiv",bc,d3,31,2f),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_prem_alpha = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_prem_alpha",10,dd,98,67),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_prem_alpha = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_prem_alpha",84,c5,b8,87),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_floats32 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_floats32",fd,57,53,db),HX_("ooiiiiiov",f0,f8,1c,08),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_floats32 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_floats32",71,7b,4c,f0),HX_("ooiiiiiov",f0,f8,1c,08),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_uints8 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_uints8",06,d7,4a,78),HX_("ooiiiiv",96,e3,35,24),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_set_uints8 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_set_uints8",7a,75,c8,7b),HX_("ooiiiiv",96,e3,35,24),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_eab2b44a4d15a9ad_9_boot)
HXDLIN(   9)		nme_bitmap_data_get_data_handle = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_bitmap_data_get_data_handle",76,1a,53,92),HX_("oo",20,61,00,00),false);
            	}
}

} // end namespace nme
} // end namespace display
