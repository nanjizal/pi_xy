// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_12_new,"nme.geom.Point","new",0x75d26518,"nme.geom.Point.new","nme/geom/Point.hx",12,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_19_add,"nme.geom.Point","add",0x75c886d9,"nme.geom.Point.add","nme/geom/Point.hx",19,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_24_scaled,"nme.geom.Point","scaled",0x169b18e2,"nme.geom.Point.scaled","nme/geom/Point.hx",24,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_30_clone,"nme.geom.Point","clone",0x0a3a4615,"nme.geom.Point.clone","nme/geom/Point.hx",30,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_33_setTo,"nme.geom.Point","setTo",0x3c06c475,"nme.geom.Point.setTo","nme/geom/Point.hx",33,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_40_copyFrom,"nme.geom.Point","copyFrom",0x0d345c07,"nme.geom.Point.copyFrom","nme/geom/Point.hx",40,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_46_dist,"nme.geom.Point","dist",0x9bacf3ae,"nme.geom.Point.dist","nme/geom/Point.hx",46,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_53_dist2,"nme.geom.Point","dist2",0x9ba844c4,"nme.geom.Point.dist2","nme/geom/Point.hx",53,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_68_equals,"nme.geom.Point","equals",0x9a681c87,"nme.geom.Point.equals","nme/geom/Point.hx",68,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_78_normalize,"nme.geom.Point","normalize",0x9fb42645,"nme.geom.Point.normalize","nme/geom/Point.hx",78,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_91_offset,"nme.geom.Point","offset",0x3ab4c5db,"nme.geom.Point.offset","nme/geom/Point.hx",91,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_103_subtract,"nme.geom.Point","subtract",0x3ce4c55c,"nme.geom.Point.subtract","nme/geom/Point.hx",103,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_108_toString,"nme.geom.Point","toString",0x7d4220f4,"nme.geom.Point.toString","nme/geom/Point.hx",108,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_112_get_length,"nme.geom.Point","get_length",0x2c0cf6f7,"nme.geom.Point.get_length","nme/geom/Point.hx",112,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_60_distance,"nme.geom.Point","distance",0xb0cce37d,"nme.geom.Point.distance","nme/geom/Point.hx",60,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_73_interpolate,"nme.geom.Point","interpolate",0x70e8e179,"nme.geom.Point.interpolate","nme/geom/Point.hx",73,0x9abd81b8)
HX_LOCAL_STACK_FRAME(_hx_pos_fd6010c72f6ebdf4_98_polar,"nme.geom.Point","polar",0x88692276,"nme.geom.Point.polar","nme/geom/Point.hx",98,0x9abd81b8)
namespace nme{
namespace geom{

void Point_obj::__construct(::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY){
            		Float inX = __o_inX.Default(0);
            		Float inY = __o_inY.Default(0);
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_12_new)
HXLINE(  13)		this->x = inX;
HXLINE(  14)		this->y = inY;
            	}

Dynamic Point_obj::__CreateEmpty() { return new Point_obj; }

void *Point_obj::_hx_vtable = 0;

Dynamic Point_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Point_obj > _hx_result = new Point_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Point_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7aecdaa6;
}

 ::nme::geom::Point Point_obj::add( ::nme::geom::Point v){
            	HX_GC_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_19_add)
HXDLIN(  19)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(v->x + this->x),(v->y + this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,add,return )

 ::nme::geom::Point Point_obj::scaled(Float scale){
            	HX_GC_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_24_scaled)
HXDLIN(  24)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(this->x * scale),(this->y * scale));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,scaled,return )

 ::nme::geom::Point Point_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_30_clone)
HXDLIN(  30)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point_obj,clone,return )

 ::nme::geom::Point Point_obj::setTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_33_setTo)
HXLINE(  34)		this->x = inX;
HXLINE(  35)		this->y = inY;
HXLINE(  36)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Point_obj,setTo,return )

void Point_obj::copyFrom( ::nme::geom::Point sourcePoint){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_40_copyFrom)
HXLINE(  41)		this->x = sourcePoint->x;
HXLINE(  42)		this->y = sourcePoint->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,copyFrom,(void))

Float Point_obj::dist( ::nme::geom::Point pt2){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_46_dist)
HXLINE(  47)		Float dx = (this->x - pt2->x);
HXLINE(  48)		Float dy = (this->y - pt2->y);
HXLINE(  49)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,dist,return )

Float Point_obj::dist2( ::nme::geom::Point pt2){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_53_dist2)
HXLINE(  54)		Float dx = (this->x - pt2->x);
HXLINE(  55)		Float dy = (this->y - pt2->y);
HXLINE(  56)		return ((dx * dx) + (dy * dy));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,dist2,return )

bool Point_obj::equals( ::nme::geom::Point toCompare){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_68_equals)
HXDLIN(  68)		if ((toCompare->x == this->x)) {
HXDLIN(  68)			return (toCompare->y == this->y);
            		}
            		else {
HXDLIN(  68)			return false;
            		}
HXDLIN(  68)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,equals,return )

void Point_obj::normalize(Float thickness){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_78_normalize)
HXDLIN(  78)		bool _hx_tmp;
HXDLIN(  78)		if ((this->x == 0)) {
HXDLIN(  78)			_hx_tmp = (this->y == 0);
            		}
            		else {
HXDLIN(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  80)			return;
            		}
            		else {
HXLINE(  84)			Float norm = (thickness / ::Math_obj::sqrt(((this->x * this->x) + (this->y * this->y))));
HXLINE(  85)			 ::nme::geom::Point _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  85)			_hx_tmp1->x = (_hx_tmp1->x * norm);
HXLINE(  86)			 ::nme::geom::Point _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)			_hx_tmp2->y = (_hx_tmp2->y * norm);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,normalize,(void))

void Point_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_91_offset)
HXLINE(  92)		 ::nme::geom::Point _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  92)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE(  93)		 ::nme::geom::Point _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  93)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Point_obj,offset,(void))

 ::nme::geom::Point Point_obj::subtract( ::nme::geom::Point v){
            	HX_GC_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_103_subtract)
HXDLIN( 103)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(this->x - v->x),(this->y - v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,subtract,return )

::String Point_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_108_toString)
HXDLIN( 108)		return ((((HX_("(x=",ed,c2,1e,00) + this->x) + HX_(", y=",18,15,2e,1d)) + this->y) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point_obj,toString,return )

Float Point_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_112_get_length)
HXDLIN( 112)		return ::Math_obj::sqrt(((this->x * this->x) + (this->y * this->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point_obj,get_length,return )

Float Point_obj::distance( ::nme::geom::Point pt1, ::nme::geom::Point pt2){
            	HX_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_60_distance)
HXLINE(  61)		Float dx = (pt1->x - pt2->x);
HXLINE(  62)		Float dy = (pt1->y - pt2->y);
HXLINE(  63)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Point_obj,distance,return )

 ::nme::geom::Point Point_obj::interpolate( ::nme::geom::Point pt1, ::nme::geom::Point pt2,Float f){
            	HX_GC_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_73_interpolate)
HXDLIN(  73)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(pt2->x + (f * (pt1->x - pt2->x))),(pt2->y + (f * (pt1->y - pt2->y))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Point_obj,interpolate,return )

 ::nme::geom::Point Point_obj::polar(Float len,Float angle){
            	HX_GC_STACKFRAME(&_hx_pos_fd6010c72f6ebdf4_98_polar)
HXDLIN(  98)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(len * ::Math_obj::cos(angle)),(len * ::Math_obj::sin(angle)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Point_obj,polar,return )


::hx::ObjectPtr< Point_obj > Point_obj::__new(::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY) {
	::hx::ObjectPtr< Point_obj > __this = new Point_obj();
	__this->__construct(__o_inX,__o_inY);
	return __this;
}

::hx::ObjectPtr< Point_obj > Point_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY) {
	Point_obj *__this = (Point_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Point_obj), false, "nme.geom.Point"));
	*(void **)__this = Point_obj::_hx_vtable;
	__this->__construct(__o_inX,__o_inY);
	return __this;
}

Point_obj::Point_obj()
{
}

::hx::Val Point_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dist") ) { return ::hx::Val( dist_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return ::hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"dist2") ) { return ::hx::Val( dist2_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"scaled") ) { return ::hx::Val( scaled_dyn() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return ::hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return ::hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return ::hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Point_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"polar") ) { outValue = polar_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
	}
	return false;
}

::hx::Val Point_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Point_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Point_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Point_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Point_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Point_obj_sStaticStorageInfo = 0;
#endif

static ::String Point_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("add",21,f2,49,00),
	HX_("scaled",9a,ea,25,3c),
	HX_("clone",5d,13,63,48),
	HX_("setTo",bd,91,2f,7a),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("dist",66,67,69,42),
	HX_("dist2",0c,12,d1,d9),
	HX_("equals",3f,ee,f2,bf),
	HX_("normalize",8d,37,a1,ab),
	HX_("offset",93,97,3f,60),
	HX_("subtract",14,75,11,f8),
	HX_("toString",ac,d0,6e,38),
	HX_("get_length",af,04,8f,8f),
	::String(null()) };

::hx::Class Point_obj::__mClass;

static ::String Point_obj_sStaticFields[] = {
	HX_("distance",35,93,f9,6b),
	HX_("interpolate",c1,d4,32,1f),
	HX_("polar",be,ef,91,c6),
	::String(null())
};

void Point_obj::__register()
{
	Point_obj _hx_dummy;
	Point_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.geom.Point",26,39,cc,48);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Point_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Point_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Point_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Point_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Point_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Point_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace geom
