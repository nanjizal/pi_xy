// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_events_ErrorEvent
#include <nme/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_IOErrorEvent
#include <nme/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c89eb34d8b8598fe_11_new,"nme.events.IOErrorEvent","new",0xf7d69377,"nme.events.IOErrorEvent.new","nme/events/IOErrorEvent.hx",11,0x80bfb9b9)
HX_LOCAL_STACK_FRAME(_hx_pos_c89eb34d8b8598fe_16_clone,"nme.events.IOErrorEvent","clone",0x386e0a34,"nme.events.IOErrorEvent.clone","nme/events/IOErrorEvent.hx",16,0x80bfb9b9)
HX_LOCAL_STACK_FRAME(_hx_pos_c89eb34d8b8598fe_21_toString,"nme.events.IOErrorEvent","toString",0x933e7a35,"nme.events.IOErrorEvent.toString","nme/events/IOErrorEvent.hx",21,0x80bfb9b9)
HX_LOCAL_STACK_FRAME(_hx_pos_c89eb34d8b8598fe_7_boot,"nme.events.IOErrorEvent","boot",0xdc03753b,"nme.events.IOErrorEvent.boot","nme/events/IOErrorEvent.hx",7,0x80bfb9b9)
namespace nme{
namespace events{

void IOErrorEvent_obj::__construct(::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id){
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            		int id = __o_id.Default(0);
            	HX_STACKFRAME(&_hx_pos_c89eb34d8b8598fe_11_new)
HXDLIN(  11)		super::__construct(inType,bubbles,cancelable,text,id);
            	}

Dynamic IOErrorEvent_obj::__CreateEmpty() { return new IOErrorEvent_obj; }

void *IOErrorEvent_obj::_hx_vtable = 0;

Dynamic IOErrorEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IOErrorEvent_obj > _hx_result = new IOErrorEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool IOErrorEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x28319617) {
		if (inClassId<=(int)0x113d0d1f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
		} else {
			return inClassId==(int)0x28319617;
		}
	} else {
		return inClassId==(int)0x4d3203b2 || inClassId==(int)0x5bff200d;
	}
}

 ::nme::events::Event IOErrorEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_c89eb34d8b8598fe_16_clone)
HXDLIN(  16)		::String _hx_tmp = this->get_type();
HXDLIN(  16)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  16)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  16)		return  ::nme::events::IOErrorEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->text,this->errorID);
            	}


::String IOErrorEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_c89eb34d8b8598fe_21_toString)
HXDLIN(  21)		::String _hx_tmp = ((HX_("[IOErrorEvent type=",f6,1f,72,9b) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  21)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  21)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" text=",d0,d6,04,d9));
HXDLIN(  21)		return ((((_hx_tmp2 + this->text) + HX_(" errorID=",5a,81,5e,3d)) + this->errorID) + HX_("]",5d,00,00,00));
            	}


::String IOErrorEvent_obj::IO_ERROR;


::hx::ObjectPtr< IOErrorEvent_obj > IOErrorEvent_obj::__new(::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id) {
	::hx::ObjectPtr< IOErrorEvent_obj > __this = new IOErrorEvent_obj();
	__this->__construct(inType,__o_bubbles,__o_cancelable,__o_text,__o_id);
	return __this;
}

::hx::ObjectPtr< IOErrorEvent_obj > IOErrorEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id) {
	IOErrorEvent_obj *__this = (IOErrorEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IOErrorEvent_obj), true, "nme.events.IOErrorEvent"));
	*(void **)__this = IOErrorEvent_obj::_hx_vtable;
	__this->__construct(inType,__o_bubbles,__o_cancelable,__o_text,__o_id);
	return __this;
}

IOErrorEvent_obj::IOErrorEvent_obj()
{
}

::hx::Val IOErrorEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *IOErrorEvent_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo IOErrorEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &IOErrorEvent_obj::IO_ERROR,HX_("IO_ERROR",4f,7b,81,11)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String IOErrorEvent_obj_sMemberFields[] = {
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void IOErrorEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IOErrorEvent_obj::IO_ERROR,"IO_ERROR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IOErrorEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IOErrorEvent_obj::IO_ERROR,"IO_ERROR");
};

#endif

::hx::Class IOErrorEvent_obj::__mClass;

static ::String IOErrorEvent_obj_sStaticFields[] = {
	HX_("IO_ERROR",4f,7b,81,11),
	::String(null())
};

void IOErrorEvent_obj::__register()
{
	IOErrorEvent_obj _hx_dummy;
	IOErrorEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.IOErrorEvent",05,0c,24,c7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IOErrorEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(IOErrorEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IOErrorEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IOErrorEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IOErrorEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IOErrorEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IOErrorEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IOErrorEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c89eb34d8b8598fe_7_boot)
HXDLIN(   7)		IO_ERROR = HX_("ioError",02,fe,41,76);
            	}
}

} // end namespace nme
} // end namespace events
