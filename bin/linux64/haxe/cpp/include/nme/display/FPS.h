// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_FPS
#define INCLUDED_nme_display_FPS

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_text_TextField
#include <nme/text/TextField.h>
#endif
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,FPS)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,text,TextField)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FPS_obj : public  ::nme::text::TextField_obj
{
	public:
		typedef  ::nme::text::TextField_obj super;
		typedef FPS_obj OBJ_;
		FPS_obj();

	public:
		enum { _hx_ClassId = 0x18fc9d4d };

		void __construct(::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY,::hx::Null< int >  __o_inCol);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.FPS")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.FPS"); }
		static ::hx::ObjectPtr< FPS_obj > __new(::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY,::hx::Null< int >  __o_inCol);
		static ::hx::ObjectPtr< FPS_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY,::hx::Null< int >  __o_inCol);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FPS_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FPS",c9,63,35,00); }

		::Array< Float > times;
		Float get_currentFPS();
		::Dynamic get_currentFPS_dyn();

		void onEnter( ::Dynamic _);
		::Dynamic onEnter_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_FPS */ 
