// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_868a4e1e42a5e8d9_19_new,"pi_xy.algo.TriPoints_","new",0xda3e7397,"pi_xy.algo.TriPoints_.new","pi_xy/algo/TriPoints.hx",19,0xc7fc0864)
namespace pi_xy{
namespace algo{

void TriPoints__obj::__construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy){
            	HX_STACKFRAME(&_hx_pos_868a4e1e42a5e8d9_19_new)
HXLINE(  20)		bool adjustWinding = (((((ax * by) - (bx * ay)) + ((bx * cy) - (cx * by))) + ((cx * ay) - (ax * cy))) > 0);
HXLINE(  21)		if (!(adjustWinding)) {
HXLINE(  22)			Float bx_ = bx;
HXLINE(  23)			Float by_ = by;
HXLINE(  24)			bx = cx;
HXLINE(  25)			by = cy;
HXLINE(  26)			cx = bx_;
HXLINE(  27)			cy = by_;
            		}
HXLINE(  29)		this->ax = ax;
HXLINE(  30)		this->ay = ay;
HXLINE(  31)		this->bx = bx;
HXLINE(  32)		this->by = by;
HXLINE(  33)		this->cx = cx;
HXLINE(  34)		this->cy = cy;
            	}

Dynamic TriPoints__obj::__CreateEmpty() { return new TriPoints__obj; }

void *TriPoints__obj::_hx_vtable = 0;

Dynamic TriPoints__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriPoints__obj > _hx_result = new TriPoints__obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool TriPoints__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c0be2ab;
}


TriPoints__obj::TriPoints__obj()
{
}

::hx::Val TriPoints__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { return ::hx::Val( ax ); }
		if (HX_FIELD_EQ(inName,"ay") ) { return ::hx::Val( ay ); }
		if (HX_FIELD_EQ(inName,"bx") ) { return ::hx::Val( bx ); }
		if (HX_FIELD_EQ(inName,"by") ) { return ::hx::Val( by ); }
		if (HX_FIELD_EQ(inName,"cx") ) { return ::hx::Val( cx ); }
		if (HX_FIELD_EQ(inName,"cy") ) { return ::hx::Val( cy ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TriPoints__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { ax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ay") ) { ay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bx") ) { bx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"by") ) { by=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx") ) { cx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy") ) { cy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TriPoints__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ax",f7,54,00,00));
	outFields->push(HX_("ay",f8,54,00,00));
	outFields->push(HX_("bx",d6,55,00,00));
	outFields->push(HX_("by",d7,55,00,00));
	outFields->push(HX_("cx",b5,56,00,00));
	outFields->push(HX_("cy",b6,56,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TriPoints__obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(TriPoints__obj,ax),HX_("ax",f7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(TriPoints__obj,ay),HX_("ay",f8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(TriPoints__obj,bx),HX_("bx",d6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(TriPoints__obj,by),HX_("by",d7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(TriPoints__obj,cx),HX_("cx",b5,56,00,00)},
	{::hx::fsFloat,(int)offsetof(TriPoints__obj,cy),HX_("cy",b6,56,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TriPoints__obj_sStaticStorageInfo = 0;
#endif

static ::String TriPoints__obj_sMemberFields[] = {
	HX_("ax",f7,54,00,00),
	HX_("ay",f8,54,00,00),
	HX_("bx",d6,55,00,00),
	HX_("by",d7,55,00,00),
	HX_("cx",b5,56,00,00),
	HX_("cy",b6,56,00,00),
	::String(null()) };

::hx::Class TriPoints__obj::__mClass;

void TriPoints__obj::__register()
{
	TriPoints__obj _hx_dummy;
	TriPoints__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.TriPoints_",25,5c,d1,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TriPoints__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TriPoints__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriPoints__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriPoints__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
