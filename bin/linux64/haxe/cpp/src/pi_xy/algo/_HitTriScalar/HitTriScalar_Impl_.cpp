// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_Barycentric
#include <pi_xy/algo/Barycentric.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_SampleData
#include <pi_xy/algo/SampleData.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__HitTriScalar_HitTriScalar_Impl_
#include <pi_xy/algo/_HitTriScalar/HitTriScalar_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_28_get_centroidX,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","get_centroidX",0x24e680a4,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.get_centroidX","pi_xy/algo/HitTriScalar.hx",28,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_32_get_centroidY,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","get_centroidY",0x24e680a5,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.get_centroidY","pi_xy/algo/HitTriScalar.hx",32,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_35_medianABx,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","medianABx",0x5f55e1e2,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.medianABx","pi_xy/algo/HitTriScalar.hx",35,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_38_medianBCx,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","medianBCx",0x5f56a502,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.medianBCx","pi_xy/algo/HitTriScalar.hx",38,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_41_medianCAx,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","medianCAx",0x5f576585,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.medianCAx","pi_xy/algo/HitTriScalar.hx",41,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_44_medianABy,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","medianABy",0x5f55e1e3,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.medianABy","pi_xy/algo/HitTriScalar.hx",44,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_47_medianBCy,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","medianBCy",0x5f56a503,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.medianBCy","pi_xy/algo/HitTriScalar.hx",47,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_50_medianCAy,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","medianCAy",0x5f576586,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.medianCAy","pi_xy/algo/HitTriScalar.hx",50,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_53_scaled,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","scaled",0xd6549145,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.scaled","pi_xy/algo/HitTriScalar.hx",53,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_98_scalePoint,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","scalePoint",0x2ac23991,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.scalePoint","pi_xy/algo/HitTriScalar.hx",98,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_105_triangleSample,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","triangleSample",0x55d1a2bd,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.triangleSample","pi_xy/algo/HitTriScalar.hx",105,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_148_squareSample,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","squareSample",0x8f802192,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.squareSample","pi_xy/algo/HitTriScalar.hx",148,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_198_pentagonSample,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","pentagonSample",0xf7a57c75,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.pentagonSample","pi_xy/algo/HitTriScalar.hx",198,0x64798946)
HX_LOCAL_STACK_FRAME(_hx_pos_bd06c1d9564eb2d6_258_get_barycentric,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_","get_barycentric",0x70115b6a,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_.get_barycentric","pi_xy/algo/HitTriScalar.hx",258,0x64798946)
namespace pi_xy{
namespace algo{
namespace _HitTriScalar{

void HitTriScalar_Impl__obj::__construct() { }

Dynamic HitTriScalar_Impl__obj::__CreateEmpty() { return new HitTriScalar_Impl__obj; }

void *HitTriScalar_Impl__obj::_hx_vtable = 0;

Dynamic HitTriScalar_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitTriScalar_Impl__obj > _hx_result = new HitTriScalar_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HitTriScalar_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ac3906d;
}

Float HitTriScalar_Impl__obj::get_centroidX( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_28_get_centroidX)
HXDLIN(  28)		return (((this1->ax + this1->bx) + this1->cx) / ( (Float)(3) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,get_centroidX,return )

Float HitTriScalar_Impl__obj::get_centroidY( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_32_get_centroidY)
HXDLIN(  32)		return (((this1->ay + this1->by) + this1->cy) / ( (Float)(3) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,get_centroidY,return )

Float HitTriScalar_Impl__obj::medianABx( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_35_medianABx)
HXDLIN(  35)		return ((this1->ax + this1->bx) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,medianABx,return )

Float HitTriScalar_Impl__obj::medianBCx( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_38_medianBCx)
HXDLIN(  38)		return ((this1->bx + this1->cx) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,medianBCx,return )

Float HitTriScalar_Impl__obj::medianCAx( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_41_medianCAx)
HXDLIN(  41)		return ((this1->cx + this1->ax) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,medianCAx,return )

Float HitTriScalar_Impl__obj::medianABy( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_44_medianABy)
HXDLIN(  44)		return ((this1->ay + this1->by) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,medianABy,return )

Float HitTriScalar_Impl__obj::medianBCy( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_47_medianBCy)
HXDLIN(  47)		return ((this1->by + this1->cy) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,medianBCy,return )

Float HitTriScalar_Impl__obj::medianCAy( ::pi_xy::algo::HitTri this1){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_50_medianCAy)
HXDLIN(  50)		return ((this1->cy + this1->ay) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,medianCAy,return )

 ::pi_xy::algo::HitTri HitTriScalar_Impl__obj::scaled( ::pi_xy::algo::HitTri this1,Float scaleA,Float scaleB,Float scaleC){
            	HX_GC_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_53_scaled)
HXLINE(  54)		Float x0 = ((Float)0.);
HXLINE(  55)		Float y0 = ((Float)0.);
HXLINE(  56)		bool isScaledA = (scaleA != ((Float)1.));
HXLINE(  57)		bool isScaledB = (scaleB != ((Float)1.));
HXLINE(  58)		bool isScaledC = (scaleC != ((Float)1.));
HXLINE(  59)		if (isScaledA) {
HXLINE(  59)			if (isScaledB) {
HXLINE(  59)				if (isScaledC) {
HXLINE(  82)					x0 = (((this1->ax + this1->bx) + this1->cx) / ( (Float)(3) ));
HXLINE(  83)					y0 = (((this1->ay + this1->by) + this1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x0 = this1->cx;
HXLINE(  80)					y0 = this1->cy;
            				}
            			}
            			else {
HXLINE(  59)				if (isScaledC) {
HXLINE(  76)					x0 = this1->bx;
HXLINE(  77)					y0 = this1->by;
            				}
            				else {
HXLINE(  73)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(this1);
HXLINE(  74)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(this1);
            				}
            			}
            		}
            		else {
HXLINE(  59)			if (isScaledB) {
HXLINE(  59)				if (isScaledC) {
HXLINE(  70)					x0 = this1->ax;
HXLINE(  71)					y0 = this1->ay;
            				}
            				else {
HXLINE(  67)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(this1);
HXLINE(  68)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(this1);
            				}
            			}
            			else {
HXLINE(  59)				if (isScaledC) {
HXLINE(  64)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(this1);
HXLINE(  65)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(this1);
            				}
            				else {
HXLINE(  61)					x0 = (((this1->ax + this1->bx) + this1->cx) / ( (Float)(3) ));
HXLINE(  62)					y0 = (((this1->ay + this1->by) + this1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  86)		Float ax_;
HXDLIN(  86)		if (isScaledA) {
HXLINE(  86)			Float point = this1->ax;
HXDLIN(  86)			point = (point - x0);
HXDLIN(  86)			point = (point * scaleA);
HXDLIN(  86)			point = (point + x0);
HXDLIN(  86)			ax_ = point;
            		}
            		else {
HXLINE(  86)			ax_ = this1->ax;
            		}
HXLINE(  87)		Float ay_;
HXDLIN(  87)		if (isScaledA) {
HXLINE(  87)			Float point1 = this1->ay;
HXDLIN(  87)			point1 = (point1 - y0);
HXDLIN(  87)			point1 = (point1 * scaleA);
HXDLIN(  87)			point1 = (point1 + y0);
HXDLIN(  87)			ay_ = point1;
            		}
            		else {
HXLINE(  87)			ay_ = this1->ay;
            		}
HXLINE(  88)		Float bx_;
HXDLIN(  88)		if (isScaledB) {
HXLINE(  88)			Float point2 = this1->bx;
HXDLIN(  88)			point2 = (point2 - x0);
HXDLIN(  88)			point2 = (point2 * scaleB);
HXDLIN(  88)			point2 = (point2 + x0);
HXDLIN(  88)			bx_ = point2;
            		}
            		else {
HXLINE(  88)			bx_ = this1->bx;
            		}
HXLINE(  89)		Float by_;
HXDLIN(  89)		if (isScaledB) {
HXLINE(  89)			Float point3 = this1->by;
HXDLIN(  89)			point3 = (point3 - y0);
HXDLIN(  89)			point3 = (point3 * scaleB);
HXDLIN(  89)			point3 = (point3 + y0);
HXDLIN(  89)			by_ = point3;
            		}
            		else {
HXLINE(  89)			by_ = this1->by;
            		}
HXLINE(  90)		Float cx_;
HXDLIN(  90)		if (isScaledC) {
HXLINE(  90)			Float point4 = this1->cx;
HXDLIN(  90)			point4 = (point4 - x0);
HXDLIN(  90)			point4 = (point4 * scaleC);
HXDLIN(  90)			point4 = (point4 + x0);
HXDLIN(  90)			cx_ = point4;
            		}
            		else {
HXLINE(  90)			cx_ = this1->cx;
            		}
HXLINE(  91)		Float cy_;
HXDLIN(  91)		if (isScaledC) {
HXLINE(  91)			Float point5 = this1->cy;
HXDLIN(  91)			point5 = (point5 - y0);
HXDLIN(  91)			point5 = (point5 * scaleC);
HXDLIN(  91)			point5 = (point5 + y0);
HXDLIN(  91)			cy_ = point5;
            		}
            		else {
HXLINE(  91)			cy_ = this1->cy;
            		}
HXLINE(  94)		return  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_,by_,cx_,cy_,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(HitTriScalar_Impl__obj,scaled,return )

Float HitTriScalar_Impl__obj::scalePoint( ::pi_xy::algo::HitTri this1,Float point,Float scale,Float centre){
            	HX_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_98_scalePoint)
HXLINE(  99)		point = (point - centre);
HXLINE( 100)		point = (point * scale);
HXLINE( 101)		point = (point + centre);
HXLINE( 102)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(HitTriScalar_Impl__obj,scalePoint,return )

 ::pi_xy::algo::SampleData HitTriScalar_Impl__obj::triangleSample( ::pi_xy::algo::HitTri this1,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_105_triangleSample)
HXLINE( 106)		Float x0 = ((Float)-0.66446302438867455);
HXLINE( 107)		Float y0 = ((Float)0.241844762647975359);
HXLINE( 108)		Float x1 = ((Float)-0.664463024388674772);
HXLINE( 109)		Float y1 = ((Float)-0.241844762647974887);
HXLINE( 110)		Float x2 = ((Float)-0.353553390593274064);
HXLINE( 111)		Float y2 = ((Float)-0.612372435695794248);
HXLINE( 112)		Float averageX = ((Float)0.);
HXLINE( 113)		Float averageY = ((Float)0.);
HXLINE( 114)		int hits = 0;
HXLINE( 115)		Float fractionTotal = ((Float)0.);
HXLINE( 116)		Float step = ((Float)0.333333333333333315);
HXLINE( 117)		Float x3 = (x + x0);
HXDLIN( 117)		Float y3 = (y + y0);
HXDLIN( 117)		bool _hx_tmp;
HXDLIN( 117)		bool _hx_tmp1;
HXDLIN( 117)		 ::pi_xy::iter::IntIterStart this2 = this1->xIter3;
HXDLIN( 117)		bool _hx_tmp2;
HXDLIN( 117)		if ((x3 > (this2->start - 1))) {
HXLINE( 117)			_hx_tmp2 = (x3 < (this2->max + 1));
            		}
            		else {
HXLINE( 117)			_hx_tmp2 = false;
            		}
HXDLIN( 117)		if (_hx_tmp2) {
HXLINE( 117)			 ::pi_xy::iter::IntIterStart this3 = this1->yIter3;
HXDLIN( 117)			if ((y3 > (this3->start - 1))) {
HXLINE( 117)				_hx_tmp1 = (y3 < (this3->max + 1));
            			}
            			else {
HXLINE( 117)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 117)			_hx_tmp1 = false;
            		}
HXDLIN( 117)		if (_hx_tmp1) {
HXLINE( 117)			Float s = ((this1->s0 + (this1->sx * x3)) + (this1->sy * y3));
HXDLIN( 117)			Float t = ((this1->t0 + (this1->tx * x3)) + (this1->ty * y3));
HXDLIN( 117)			bool _hx_tmp3;
HXDLIN( 117)			if (!((s <= 0))) {
HXLINE( 117)				_hx_tmp3 = (t <= 0);
            			}
            			else {
HXLINE( 117)				_hx_tmp3 = true;
            			}
HXDLIN( 117)			if (_hx_tmp3) {
HXLINE( 117)				_hx_tmp = false;
            			}
            			else {
HXLINE( 117)				if (((s + t) < this1->A)) {
HXLINE( 117)					_hx_tmp = true;
            				}
            				else {
HXLINE( 117)					_hx_tmp = false;
            				}
            			}
            		}
            		else {
HXLINE( 117)			_hx_tmp = false;
            		}
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 118)			hits = (hits + 1);
HXLINE( 119)			averageX = (averageX + x0);
HXLINE( 120)			averageY = (averageY + y0);
HXLINE( 121)			fractionTotal = (fractionTotal + step);
            		}
HXLINE( 123)		Float x4 = (x + x1);
HXDLIN( 123)		Float y4 = (y + y1);
HXDLIN( 123)		bool _hx_tmp4;
HXDLIN( 123)		bool _hx_tmp5;
HXDLIN( 123)		 ::pi_xy::iter::IntIterStart this4 = this1->xIter3;
HXDLIN( 123)		bool _hx_tmp6;
HXDLIN( 123)		if ((x4 > (this4->start - 1))) {
HXLINE( 123)			_hx_tmp6 = (x4 < (this4->max + 1));
            		}
            		else {
HXLINE( 123)			_hx_tmp6 = false;
            		}
HXDLIN( 123)		if (_hx_tmp6) {
HXLINE( 123)			 ::pi_xy::iter::IntIterStart this5 = this1->yIter3;
HXDLIN( 123)			if ((y4 > (this5->start - 1))) {
HXLINE( 123)				_hx_tmp5 = (y4 < (this5->max + 1));
            			}
            			else {
HXLINE( 123)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE( 123)			_hx_tmp5 = false;
            		}
HXDLIN( 123)		if (_hx_tmp5) {
HXLINE( 123)			Float s1 = ((this1->s0 + (this1->sx * x4)) + (this1->sy * y4));
HXDLIN( 123)			Float t1 = ((this1->t0 + (this1->tx * x4)) + (this1->ty * y4));
HXDLIN( 123)			bool _hx_tmp7;
HXDLIN( 123)			if (!((s1 <= 0))) {
HXLINE( 123)				_hx_tmp7 = (t1 <= 0);
            			}
            			else {
HXLINE( 123)				_hx_tmp7 = true;
            			}
HXDLIN( 123)			if (_hx_tmp7) {
HXLINE( 123)				_hx_tmp4 = false;
            			}
            			else {
HXLINE( 123)				if (((s1 + t1) < this1->A)) {
HXLINE( 123)					_hx_tmp4 = true;
            				}
            				else {
HXLINE( 123)					_hx_tmp4 = false;
            				}
            			}
            		}
            		else {
HXLINE( 123)			_hx_tmp4 = false;
            		}
HXDLIN( 123)		if (_hx_tmp4) {
HXLINE( 124)			hits = (hits + 1);
HXLINE( 125)			averageX = (averageX + x1);
HXLINE( 126)			averageY = (averageY + y1);
HXLINE( 127)			fractionTotal = (fractionTotal + step);
            		}
HXLINE( 129)		Float x5 = (x + x2);
HXDLIN( 129)		Float y5 = (y + y2);
HXDLIN( 129)		bool _hx_tmp8;
HXDLIN( 129)		bool _hx_tmp9;
HXDLIN( 129)		 ::pi_xy::iter::IntIterStart this6 = this1->xIter3;
HXDLIN( 129)		bool _hx_tmp10;
HXDLIN( 129)		if ((x5 > (this6->start - 1))) {
HXLINE( 129)			_hx_tmp10 = (x5 < (this6->max + 1));
            		}
            		else {
HXLINE( 129)			_hx_tmp10 = false;
            		}
HXDLIN( 129)		if (_hx_tmp10) {
HXLINE( 129)			 ::pi_xy::iter::IntIterStart this7 = this1->yIter3;
HXDLIN( 129)			if ((y5 > (this7->start - 1))) {
HXLINE( 129)				_hx_tmp9 = (y5 < (this7->max + 1));
            			}
            			else {
HXLINE( 129)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE( 129)			_hx_tmp9 = false;
            		}
HXDLIN( 129)		if (_hx_tmp9) {
HXLINE( 129)			Float s2 = ((this1->s0 + (this1->sx * x5)) + (this1->sy * y5));
HXDLIN( 129)			Float t2 = ((this1->t0 + (this1->tx * x5)) + (this1->ty * y5));
HXDLIN( 129)			bool _hx_tmp11;
HXDLIN( 129)			if (!((s2 <= 0))) {
HXLINE( 129)				_hx_tmp11 = (t2 <= 0);
            			}
            			else {
HXLINE( 129)				_hx_tmp11 = true;
            			}
HXDLIN( 129)			if (_hx_tmp11) {
HXLINE( 129)				_hx_tmp8 = false;
            			}
            			else {
HXLINE( 129)				if (((s2 + t2) < this1->A)) {
HXLINE( 129)					_hx_tmp8 = true;
            				}
            				else {
HXLINE( 129)					_hx_tmp8 = false;
            				}
            			}
            		}
            		else {
HXLINE( 129)			_hx_tmp8 = false;
            		}
HXDLIN( 129)		if (_hx_tmp8) {
HXLINE( 130)			hits = (hits + 1);
HXLINE( 131)			averageX = (averageX + x2);
HXLINE( 132)			averageY = (averageY + y2);
HXLINE( 133)			fractionTotal = (fractionTotal + step);
            		}
HXLINE( 135)		if ((hits != 0)) {
HXLINE( 136)			averageX = (x + (averageX / ( (Float)(hits) )));
HXLINE( 137)			averageY = (y + (averageY / ( (Float)(hits) )));
            		}
            		else {
HXLINE( 139)			averageX = x;
HXLINE( 140)			averageY = y;
            		}
HXLINE( 142)		return  ::pi_xy::algo::SampleData_obj::__alloc( HX_CTX ,fractionTotal,averageX,averageY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HitTriScalar_Impl__obj,triangleSample,return )

 ::pi_xy::algo::SampleData HitTriScalar_Impl__obj::squareSample( ::pi_xy::algo::HitTri this1,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_148_squareSample)
HXLINE( 149)		Float x0 = ((Float)-0.353553390593273564);
HXLINE( 150)		Float y0 = ((Float)0.61237243569579447);
HXLINE( 151)		Float x1 = ((Float)-0.612372435695794359);
HXLINE( 152)		Float y1 = ((Float)0.353553390593273953);
HXLINE( 153)		Float x2 = ((Float)-0.707106781186547462);
HXLINE( 154)		Float y2 = ((Float)8.65956056235493163e-17);
HXLINE( 155)		Float x3 = ((Float)-0.612372435695794581);
HXLINE( 156)		Float y3 = ((Float)-0.353553390593273509);
HXLINE( 157)		Float averageX = ((Float)0.);
HXLINE( 158)		Float averageY = ((Float)0.);
HXLINE( 159)		int hits = 0;
HXLINE( 160)		Float fractionTotal = ((Float)0.);
HXLINE( 161)		Float x4 = (x + x0);
HXDLIN( 161)		Float y4 = (y + y0);
HXDLIN( 161)		bool _hx_tmp;
HXDLIN( 161)		bool _hx_tmp1;
HXDLIN( 161)		 ::pi_xy::iter::IntIterStart this2 = this1->xIter3;
HXDLIN( 161)		bool _hx_tmp2;
HXDLIN( 161)		if ((x4 > (this2->start - 1))) {
HXLINE( 161)			_hx_tmp2 = (x4 < (this2->max + 1));
            		}
            		else {
HXLINE( 161)			_hx_tmp2 = false;
            		}
HXDLIN( 161)		if (_hx_tmp2) {
HXLINE( 161)			 ::pi_xy::iter::IntIterStart this3 = this1->yIter3;
HXDLIN( 161)			if ((y4 > (this3->start - 1))) {
HXLINE( 161)				_hx_tmp1 = (y4 < (this3->max + 1));
            			}
            			else {
HXLINE( 161)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 161)			_hx_tmp1 = false;
            		}
HXDLIN( 161)		if (_hx_tmp1) {
HXLINE( 161)			Float s = ((this1->s0 + (this1->sx * x4)) + (this1->sy * y4));
HXDLIN( 161)			Float t = ((this1->t0 + (this1->tx * x4)) + (this1->ty * y4));
HXDLIN( 161)			bool _hx_tmp3;
HXDLIN( 161)			if (!((s <= 0))) {
HXLINE( 161)				_hx_tmp3 = (t <= 0);
            			}
            			else {
HXLINE( 161)				_hx_tmp3 = true;
            			}
HXDLIN( 161)			if (_hx_tmp3) {
HXLINE( 161)				_hx_tmp = false;
            			}
            			else {
HXLINE( 161)				if (((s + t) < this1->A)) {
HXLINE( 161)					_hx_tmp = true;
            				}
            				else {
HXLINE( 161)					_hx_tmp = false;
            				}
            			}
            		}
            		else {
HXLINE( 161)			_hx_tmp = false;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXLINE( 162)			hits = (hits + 1);
HXLINE( 163)			averageX = (averageX + x0);
HXLINE( 164)			averageY = (averageY + y0);
HXLINE( 165)			fractionTotal = (fractionTotal + ((Float)0.25));
            		}
HXLINE( 167)		Float x5 = (x + x1);
HXDLIN( 167)		Float y5 = (y + y1);
HXDLIN( 167)		bool _hx_tmp4;
HXDLIN( 167)		bool _hx_tmp5;
HXDLIN( 167)		 ::pi_xy::iter::IntIterStart this4 = this1->xIter3;
HXDLIN( 167)		bool _hx_tmp6;
HXDLIN( 167)		if ((x5 > (this4->start - 1))) {
HXLINE( 167)			_hx_tmp6 = (x5 < (this4->max + 1));
            		}
            		else {
HXLINE( 167)			_hx_tmp6 = false;
            		}
HXDLIN( 167)		if (_hx_tmp6) {
HXLINE( 167)			 ::pi_xy::iter::IntIterStart this5 = this1->yIter3;
HXDLIN( 167)			if ((y5 > (this5->start - 1))) {
HXLINE( 167)				_hx_tmp5 = (y5 < (this5->max + 1));
            			}
            			else {
HXLINE( 167)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE( 167)			_hx_tmp5 = false;
            		}
HXDLIN( 167)		if (_hx_tmp5) {
HXLINE( 167)			Float s1 = ((this1->s0 + (this1->sx * x5)) + (this1->sy * y5));
HXDLIN( 167)			Float t1 = ((this1->t0 + (this1->tx * x5)) + (this1->ty * y5));
HXDLIN( 167)			bool _hx_tmp7;
HXDLIN( 167)			if (!((s1 <= 0))) {
HXLINE( 167)				_hx_tmp7 = (t1 <= 0);
            			}
            			else {
HXLINE( 167)				_hx_tmp7 = true;
            			}
HXDLIN( 167)			if (_hx_tmp7) {
HXLINE( 167)				_hx_tmp4 = false;
            			}
            			else {
HXLINE( 167)				if (((s1 + t1) < this1->A)) {
HXLINE( 167)					_hx_tmp4 = true;
            				}
            				else {
HXLINE( 167)					_hx_tmp4 = false;
            				}
            			}
            		}
            		else {
HXLINE( 167)			_hx_tmp4 = false;
            		}
HXDLIN( 167)		if (_hx_tmp4) {
HXLINE( 168)			hits = (hits + 1);
HXLINE( 169)			averageX = (averageX + x1);
HXLINE( 170)			averageY = (averageY + y1);
HXLINE( 171)			fractionTotal = (fractionTotal + ((Float)0.25));
            		}
HXLINE( 173)		Float x6 = (x + x2);
HXDLIN( 173)		Float y6 = (y + y2);
HXDLIN( 173)		bool _hx_tmp8;
HXDLIN( 173)		bool _hx_tmp9;
HXDLIN( 173)		 ::pi_xy::iter::IntIterStart this6 = this1->xIter3;
HXDLIN( 173)		bool _hx_tmp10;
HXDLIN( 173)		if ((x6 > (this6->start - 1))) {
HXLINE( 173)			_hx_tmp10 = (x6 < (this6->max + 1));
            		}
            		else {
HXLINE( 173)			_hx_tmp10 = false;
            		}
HXDLIN( 173)		if (_hx_tmp10) {
HXLINE( 173)			 ::pi_xy::iter::IntIterStart this7 = this1->yIter3;
HXDLIN( 173)			if ((y6 > (this7->start - 1))) {
HXLINE( 173)				_hx_tmp9 = (y6 < (this7->max + 1));
            			}
            			else {
HXLINE( 173)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE( 173)			_hx_tmp9 = false;
            		}
HXDLIN( 173)		if (_hx_tmp9) {
HXLINE( 173)			Float s2 = ((this1->s0 + (this1->sx * x6)) + (this1->sy * y6));
HXDLIN( 173)			Float t2 = ((this1->t0 + (this1->tx * x6)) + (this1->ty * y6));
HXDLIN( 173)			bool _hx_tmp11;
HXDLIN( 173)			if (!((s2 <= 0))) {
HXLINE( 173)				_hx_tmp11 = (t2 <= 0);
            			}
            			else {
HXLINE( 173)				_hx_tmp11 = true;
            			}
HXDLIN( 173)			if (_hx_tmp11) {
HXLINE( 173)				_hx_tmp8 = false;
            			}
            			else {
HXLINE( 173)				if (((s2 + t2) < this1->A)) {
HXLINE( 173)					_hx_tmp8 = true;
            				}
            				else {
HXLINE( 173)					_hx_tmp8 = false;
            				}
            			}
            		}
            		else {
HXLINE( 173)			_hx_tmp8 = false;
            		}
HXDLIN( 173)		if (_hx_tmp8) {
HXLINE( 174)			hits = (hits + 1);
HXLINE( 175)			averageX = (averageX + x2);
HXLINE( 176)			averageY = (averageY + y2);
HXLINE( 177)			fractionTotal = (fractionTotal + ((Float)0.25));
            		}
HXLINE( 179)		Float x7 = (x + x3);
HXDLIN( 179)		Float y7 = (y + y3);
HXDLIN( 179)		bool _hx_tmp12;
HXDLIN( 179)		bool _hx_tmp13;
HXDLIN( 179)		 ::pi_xy::iter::IntIterStart this8 = this1->xIter3;
HXDLIN( 179)		bool _hx_tmp14;
HXDLIN( 179)		if ((x7 > (this8->start - 1))) {
HXLINE( 179)			_hx_tmp14 = (x7 < (this8->max + 1));
            		}
            		else {
HXLINE( 179)			_hx_tmp14 = false;
            		}
HXDLIN( 179)		if (_hx_tmp14) {
HXLINE( 179)			 ::pi_xy::iter::IntIterStart this9 = this1->yIter3;
HXDLIN( 179)			if ((y7 > (this9->start - 1))) {
HXLINE( 179)				_hx_tmp13 = (y7 < (this9->max + 1));
            			}
            			else {
HXLINE( 179)				_hx_tmp13 = false;
            			}
            		}
            		else {
HXLINE( 179)			_hx_tmp13 = false;
            		}
HXDLIN( 179)		if (_hx_tmp13) {
HXLINE( 179)			Float s3 = ((this1->s0 + (this1->sx * x7)) + (this1->sy * y7));
HXDLIN( 179)			Float t3 = ((this1->t0 + (this1->tx * x7)) + (this1->ty * y7));
HXDLIN( 179)			bool _hx_tmp15;
HXDLIN( 179)			if (!((s3 <= 0))) {
HXLINE( 179)				_hx_tmp15 = (t3 <= 0);
            			}
            			else {
HXLINE( 179)				_hx_tmp15 = true;
            			}
HXDLIN( 179)			if (_hx_tmp15) {
HXLINE( 179)				_hx_tmp12 = false;
            			}
            			else {
HXLINE( 179)				if (((s3 + t3) < this1->A)) {
HXLINE( 179)					_hx_tmp12 = true;
            				}
            				else {
HXLINE( 179)					_hx_tmp12 = false;
            				}
            			}
            		}
            		else {
HXLINE( 179)			_hx_tmp12 = false;
            		}
HXDLIN( 179)		if (_hx_tmp12) {
HXLINE( 180)			hits = (hits + 1);
HXLINE( 181)			averageX = (averageX + x3);
HXLINE( 182)			averageY = (averageY + y3);
HXLINE( 183)			fractionTotal = (fractionTotal + ((Float)0.25));
            		}
HXLINE( 185)		if ((hits != 0)) {
HXLINE( 186)			averageX = (x + (averageX / ( (Float)(hits) )));
HXLINE( 187)			averageY = (y + (averageY / ( (Float)(hits) )));
            		}
            		else {
HXLINE( 189)			averageX = x;
HXLINE( 190)			averageY = y;
            		}
HXLINE( 192)		return  ::pi_xy::algo::SampleData_obj::__alloc( HX_CTX ,fractionTotal,averageX,averageY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HitTriScalar_Impl__obj,squareSample,return )

 ::pi_xy::algo::SampleData HitTriScalar_Impl__obj::pentagonSample( ::pi_xy::algo::HitTri this1,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_198_pentagonSample)
HXLINE( 199)		Float x0 = ((Float)-0.0739127852035666);
HXLINE( 200)		Float y0 = ((Float)0.703233176253404202);
HXLINE( 201)		Float x1 = ((Float)-0.353553390593273564);
HXLINE( 202)		Float y1 = ((Float)0.61237243569579447);
HXLINE( 203)		Float x2 = ((Float)-0.572061402817684139);
HXLINE( 204)		Float y2 = ((Float)0.415626937777453465);
HXLINE( 205)		Float x3 = ((Float)-0.691654801480225401);
HXLINE( 206)		Float y3 = ((Float)0.147015766465198733);
HXLINE( 207)		Float x4 = ((Float)-0.691654801480225512);
HXLINE( 208)		Float y4 = ((Float)-0.147015766465198261);
HXLINE( 209)		Float averageX = ((Float)0.);
HXLINE( 210)		Float averageY = ((Float)0.);
HXLINE( 211)		int hits = 0;
HXLINE( 212)		Float fractionTotal = ((Float)0.);
HXLINE( 213)		Float x5 = (x + x0);
HXDLIN( 213)		Float y5 = (y + y0);
HXDLIN( 213)		bool _hx_tmp;
HXDLIN( 213)		bool _hx_tmp1;
HXDLIN( 213)		 ::pi_xy::iter::IntIterStart this2 = this1->xIter3;
HXDLIN( 213)		bool _hx_tmp2;
HXDLIN( 213)		if ((x5 > (this2->start - 1))) {
HXLINE( 213)			_hx_tmp2 = (x5 < (this2->max + 1));
            		}
            		else {
HXLINE( 213)			_hx_tmp2 = false;
            		}
HXDLIN( 213)		if (_hx_tmp2) {
HXLINE( 213)			 ::pi_xy::iter::IntIterStart this3 = this1->yIter3;
HXDLIN( 213)			if ((y5 > (this3->start - 1))) {
HXLINE( 213)				_hx_tmp1 = (y5 < (this3->max + 1));
            			}
            			else {
HXLINE( 213)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 213)			_hx_tmp1 = false;
            		}
HXDLIN( 213)		if (_hx_tmp1) {
HXLINE( 213)			Float s = ((this1->s0 + (this1->sx * x5)) + (this1->sy * y5));
HXDLIN( 213)			Float t = ((this1->t0 + (this1->tx * x5)) + (this1->ty * y5));
HXDLIN( 213)			bool _hx_tmp3;
HXDLIN( 213)			if (!((s <= 0))) {
HXLINE( 213)				_hx_tmp3 = (t <= 0);
            			}
            			else {
HXLINE( 213)				_hx_tmp3 = true;
            			}
HXDLIN( 213)			if (_hx_tmp3) {
HXLINE( 213)				_hx_tmp = false;
            			}
            			else {
HXLINE( 213)				if (((s + t) < this1->A)) {
HXLINE( 213)					_hx_tmp = true;
            				}
            				else {
HXLINE( 213)					_hx_tmp = false;
            				}
            			}
            		}
            		else {
HXLINE( 213)			_hx_tmp = false;
            		}
HXDLIN( 213)		if (_hx_tmp) {
HXLINE( 214)			hits = (hits + 1);
HXLINE( 215)			averageX = (averageX + x0);
HXLINE( 216)			averageY = (averageY + y0);
HXLINE( 217)			fractionTotal = (fractionTotal + ((Float)0.2));
            		}
HXLINE( 219)		Float x6 = (x + x1);
HXDLIN( 219)		Float y6 = (y + y1);
HXDLIN( 219)		bool _hx_tmp4;
HXDLIN( 219)		bool _hx_tmp5;
HXDLIN( 219)		 ::pi_xy::iter::IntIterStart this4 = this1->xIter3;
HXDLIN( 219)		bool _hx_tmp6;
HXDLIN( 219)		if ((x6 > (this4->start - 1))) {
HXLINE( 219)			_hx_tmp6 = (x6 < (this4->max + 1));
            		}
            		else {
HXLINE( 219)			_hx_tmp6 = false;
            		}
HXDLIN( 219)		if (_hx_tmp6) {
HXLINE( 219)			 ::pi_xy::iter::IntIterStart this5 = this1->yIter3;
HXDLIN( 219)			if ((y6 > (this5->start - 1))) {
HXLINE( 219)				_hx_tmp5 = (y6 < (this5->max + 1));
            			}
            			else {
HXLINE( 219)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE( 219)			_hx_tmp5 = false;
            		}
HXDLIN( 219)		if (_hx_tmp5) {
HXLINE( 219)			Float s1 = ((this1->s0 + (this1->sx * x6)) + (this1->sy * y6));
HXDLIN( 219)			Float t1 = ((this1->t0 + (this1->tx * x6)) + (this1->ty * y6));
HXDLIN( 219)			bool _hx_tmp7;
HXDLIN( 219)			if (!((s1 <= 0))) {
HXLINE( 219)				_hx_tmp7 = (t1 <= 0);
            			}
            			else {
HXLINE( 219)				_hx_tmp7 = true;
            			}
HXDLIN( 219)			if (_hx_tmp7) {
HXLINE( 219)				_hx_tmp4 = false;
            			}
            			else {
HXLINE( 219)				if (((s1 + t1) < this1->A)) {
HXLINE( 219)					_hx_tmp4 = true;
            				}
            				else {
HXLINE( 219)					_hx_tmp4 = false;
            				}
            			}
            		}
            		else {
HXLINE( 219)			_hx_tmp4 = false;
            		}
HXDLIN( 219)		if (_hx_tmp4) {
HXLINE( 220)			hits = (hits + 1);
HXLINE( 221)			averageX = (averageX + x1);
HXLINE( 222)			averageY = (averageY + y1);
HXLINE( 223)			fractionTotal = (fractionTotal + ((Float)0.2));
            		}
HXLINE( 225)		Float x7 = (x + x2);
HXDLIN( 225)		Float y7 = (y + y2);
HXDLIN( 225)		bool _hx_tmp8;
HXDLIN( 225)		bool _hx_tmp9;
HXDLIN( 225)		 ::pi_xy::iter::IntIterStart this6 = this1->xIter3;
HXDLIN( 225)		bool _hx_tmp10;
HXDLIN( 225)		if ((x7 > (this6->start - 1))) {
HXLINE( 225)			_hx_tmp10 = (x7 < (this6->max + 1));
            		}
            		else {
HXLINE( 225)			_hx_tmp10 = false;
            		}
HXDLIN( 225)		if (_hx_tmp10) {
HXLINE( 225)			 ::pi_xy::iter::IntIterStart this7 = this1->yIter3;
HXDLIN( 225)			if ((y7 > (this7->start - 1))) {
HXLINE( 225)				_hx_tmp9 = (y7 < (this7->max + 1));
            			}
            			else {
HXLINE( 225)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE( 225)			_hx_tmp9 = false;
            		}
HXDLIN( 225)		if (_hx_tmp9) {
HXLINE( 225)			Float s2 = ((this1->s0 + (this1->sx * x7)) + (this1->sy * y7));
HXDLIN( 225)			Float t2 = ((this1->t0 + (this1->tx * x7)) + (this1->ty * y7));
HXDLIN( 225)			bool _hx_tmp11;
HXDLIN( 225)			if (!((s2 <= 0))) {
HXLINE( 225)				_hx_tmp11 = (t2 <= 0);
            			}
            			else {
HXLINE( 225)				_hx_tmp11 = true;
            			}
HXDLIN( 225)			if (_hx_tmp11) {
HXLINE( 225)				_hx_tmp8 = false;
            			}
            			else {
HXLINE( 225)				if (((s2 + t2) < this1->A)) {
HXLINE( 225)					_hx_tmp8 = true;
            				}
            				else {
HXLINE( 225)					_hx_tmp8 = false;
            				}
            			}
            		}
            		else {
HXLINE( 225)			_hx_tmp8 = false;
            		}
HXDLIN( 225)		if (_hx_tmp8) {
HXLINE( 226)			hits = (hits + 1);
HXLINE( 227)			averageX = (averageX + x2);
HXLINE( 228)			averageY = (averageY + y2);
HXLINE( 229)			fractionTotal = (fractionTotal + ((Float)0.2));
            		}
HXLINE( 231)		Float x8 = (x + x3);
HXDLIN( 231)		Float y8 = (y + y3);
HXDLIN( 231)		bool _hx_tmp12;
HXDLIN( 231)		bool _hx_tmp13;
HXDLIN( 231)		 ::pi_xy::iter::IntIterStart this8 = this1->xIter3;
HXDLIN( 231)		bool _hx_tmp14;
HXDLIN( 231)		if ((x8 > (this8->start - 1))) {
HXLINE( 231)			_hx_tmp14 = (x8 < (this8->max + 1));
            		}
            		else {
HXLINE( 231)			_hx_tmp14 = false;
            		}
HXDLIN( 231)		if (_hx_tmp14) {
HXLINE( 231)			 ::pi_xy::iter::IntIterStart this9 = this1->yIter3;
HXDLIN( 231)			if ((y8 > (this9->start - 1))) {
HXLINE( 231)				_hx_tmp13 = (y8 < (this9->max + 1));
            			}
            			else {
HXLINE( 231)				_hx_tmp13 = false;
            			}
            		}
            		else {
HXLINE( 231)			_hx_tmp13 = false;
            		}
HXDLIN( 231)		if (_hx_tmp13) {
HXLINE( 231)			Float s3 = ((this1->s0 + (this1->sx * x8)) + (this1->sy * y8));
HXDLIN( 231)			Float t3 = ((this1->t0 + (this1->tx * x8)) + (this1->ty * y8));
HXDLIN( 231)			bool _hx_tmp15;
HXDLIN( 231)			if (!((s3 <= 0))) {
HXLINE( 231)				_hx_tmp15 = (t3 <= 0);
            			}
            			else {
HXLINE( 231)				_hx_tmp15 = true;
            			}
HXDLIN( 231)			if (_hx_tmp15) {
HXLINE( 231)				_hx_tmp12 = false;
            			}
            			else {
HXLINE( 231)				if (((s3 + t3) < this1->A)) {
HXLINE( 231)					_hx_tmp12 = true;
            				}
            				else {
HXLINE( 231)					_hx_tmp12 = false;
            				}
            			}
            		}
            		else {
HXLINE( 231)			_hx_tmp12 = false;
            		}
HXDLIN( 231)		if (_hx_tmp12) {
HXLINE( 232)			hits = (hits + 1);
HXLINE( 233)			averageX = (averageX + x3);
HXLINE( 234)			averageY = (averageY + y3);
HXLINE( 235)			fractionTotal = (fractionTotal + ((Float)0.2));
            		}
HXLINE( 237)		Float x9 = (x + x4);
HXDLIN( 237)		Float y9 = (y + y4);
HXDLIN( 237)		bool _hx_tmp16;
HXDLIN( 237)		bool _hx_tmp17;
HXDLIN( 237)		 ::pi_xy::iter::IntIterStart this10 = this1->xIter3;
HXDLIN( 237)		bool _hx_tmp18;
HXDLIN( 237)		if ((x9 > (this10->start - 1))) {
HXLINE( 237)			_hx_tmp18 = (x9 < (this10->max + 1));
            		}
            		else {
HXLINE( 237)			_hx_tmp18 = false;
            		}
HXDLIN( 237)		if (_hx_tmp18) {
HXLINE( 237)			 ::pi_xy::iter::IntIterStart this11 = this1->yIter3;
HXDLIN( 237)			if ((y9 > (this11->start - 1))) {
HXLINE( 237)				_hx_tmp17 = (y9 < (this11->max + 1));
            			}
            			else {
HXLINE( 237)				_hx_tmp17 = false;
            			}
            		}
            		else {
HXLINE( 237)			_hx_tmp17 = false;
            		}
HXDLIN( 237)		if (_hx_tmp17) {
HXLINE( 237)			Float s4 = ((this1->s0 + (this1->sx * x9)) + (this1->sy * y9));
HXDLIN( 237)			Float t4 = ((this1->t0 + (this1->tx * x9)) + (this1->ty * y9));
HXDLIN( 237)			bool _hx_tmp19;
HXDLIN( 237)			if (!((s4 <= 0))) {
HXLINE( 237)				_hx_tmp19 = (t4 <= 0);
            			}
            			else {
HXLINE( 237)				_hx_tmp19 = true;
            			}
HXDLIN( 237)			if (_hx_tmp19) {
HXLINE( 237)				_hx_tmp16 = false;
            			}
            			else {
HXLINE( 237)				if (((s4 + t4) < this1->A)) {
HXLINE( 237)					_hx_tmp16 = true;
            				}
            				else {
HXLINE( 237)					_hx_tmp16 = false;
            				}
            			}
            		}
            		else {
HXLINE( 237)			_hx_tmp16 = false;
            		}
HXDLIN( 237)		if (_hx_tmp16) {
HXLINE( 238)			hits = (hits + 1);
HXLINE( 239)			averageX = (averageX + x4);
HXLINE( 240)			averageY = (averageY + y4);
HXLINE( 241)			fractionTotal = (fractionTotal + ((Float)0.2));
            		}
HXLINE( 243)		if ((hits != 0)) {
HXLINE( 244)			averageX = (x + (averageX / ( (Float)(hits) )));
HXLINE( 245)			averageY = (y + (averageY / ( (Float)(hits) )));
            		}
            		else {
HXLINE( 247)			averageX = x;
HXLINE( 248)			averageY = y;
            		}
HXLINE( 250)		return  ::pi_xy::algo::SampleData_obj::__alloc( HX_CTX ,fractionTotal,averageX,averageY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HitTriScalar_Impl__obj,pentagonSample,return )

 ::pi_xy::algo::Barycentric HitTriScalar_Impl__obj::get_barycentric( ::pi_xy::algo::HitTri this1){
            	HX_GC_STACKFRAME(&_hx_pos_bd06c1d9564eb2d6_258_get_barycentric)
HXDLIN( 258)		return  ::pi_xy::algo::Barycentric_obj::__alloc( HX_CTX ,this1->ax,this1->ay,this1->bx,this1->by,this1->cx,this1->cy,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HitTriScalar_Impl__obj,get_barycentric,return )


HitTriScalar_Impl__obj::HitTriScalar_Impl__obj()
{
}

bool HitTriScalar_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"scaled") ) { outValue = scaled_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"medianABx") ) { outValue = medianABx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"medianBCx") ) { outValue = medianBCx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"medianCAx") ) { outValue = medianCAx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"medianABy") ) { outValue = medianABy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"medianBCy") ) { outValue = medianBCy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"medianCAy") ) { outValue = medianCAy_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scalePoint") ) { outValue = scalePoint_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"squareSample") ) { outValue = squareSample_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_centroidX") ) { outValue = get_centroidX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_centroidY") ) { outValue = get_centroidY_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"triangleSample") ) { outValue = triangleSample_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pentagonSample") ) { outValue = pentagonSample_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_barycentric") ) { outValue = get_barycentric_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HitTriScalar_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *HitTriScalar_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class HitTriScalar_Impl__obj::__mClass;

static ::String HitTriScalar_Impl__obj_sStaticFields[] = {
	HX_("get_centroidX",ef,2b,a2,12),
	HX_("get_centroidY",f0,2b,a2,12),
	HX_("medianABx",ad,4b,51,be),
	HX_("medianBCx",cd,0e,52,be),
	HX_("medianCAx",50,cf,52,be),
	HX_("medianABy",ae,4b,51,be),
	HX_("medianBCy",ce,0e,52,be),
	HX_("medianCAy",51,cf,52,be),
	HX_("scaled",9a,ea,25,3c),
	HX_("scalePoint",66,61,c3,e7),
	HX_("triangleSample",12,d9,4b,6c),
	HX_("squareSample",a7,a8,fa,6c),
	HX_("pentagonSample",ca,b2,1f,0e),
	HX_("get_barycentric",75,af,86,04),
	::String(null())
};

void HitTriScalar_Impl__obj::__register()
{
	HitTriScalar_Impl__obj _hx_dummy;
	HitTriScalar_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._HitTriScalar.HitTriScalar_Impl_",63,12,d5,1d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HitTriScalar_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(HitTriScalar_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< HitTriScalar_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitTriScalar_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitTriScalar_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _HitTriScalar
