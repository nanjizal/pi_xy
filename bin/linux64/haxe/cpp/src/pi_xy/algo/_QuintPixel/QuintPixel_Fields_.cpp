// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__QuintPixel_QuintPixel_Fields_
#include <pi_xy/algo/_QuintPixel/QuintPixel_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_62f087480b4d42cb_20_softFillQuintilateral,"pi_xy.algo._QuintPixel.QuintPixel_Fields_","softFillQuintilateral",0x4a80fa88,"pi_xy.algo._QuintPixel.QuintPixel_Fields_.softFillQuintilateral","pi_xy/algo/QuintPixel.hx",20,0x1cc13e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_62f087480b4d42cb_63_softFillQuintilateralPartial,"pi_xy.algo._QuintPixel.QuintPixel_Fields_","softFillQuintilateralPartial",0x63bce5d9,"pi_xy.algo._QuintPixel.QuintPixel_Fields_.softFillQuintilateralPartial","pi_xy/algo/QuintPixel.hx",63,0x1cc13e8f)
namespace pi_xy{
namespace algo{
namespace _QuintPixel{

void QuintPixel_Fields__obj::__construct() { }

Dynamic QuintPixel_Fields__obj::__CreateEmpty() { return new QuintPixel_Fields__obj; }

void *QuintPixel_Fields__obj::_hx_vtable = 0;

Dynamic QuintPixel_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuintPixel_Fields__obj > _hx_result = new QuintPixel_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool QuintPixel_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e48798e;
}

 ::pi_xy::algo::HitQuad QuintPixel_Fields__obj::softFillQuintilateral( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,int color,::hx::Null< Float >  __o_softC,::hx::Null< bool >  __o_hasHit){
            		Float softC = __o_softC.Default(10);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_62f087480b4d42cb_20_softFillQuintilateral)
HXLINE(  23)		Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXLINE(  24)		Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXLINE(  28)		{
HXLINE(  28)			bool hasUndo = false;
HXDLIN(  28)			int aA = ((color >> 24) & 255);
HXDLIN(  28)			int rA = ((color >> 16) & 255);
HXDLIN(  28)			int gA = ((color >> 8) & 255);
HXDLIN(  28)			int bA = (color & 255);
HXDLIN(  28)			Float bcx = (ax - bx);
HXDLIN(  28)			Float bcy = (ay - by);
HXDLIN(  28)			Float acx = (ex - bx);
HXDLIN(  28)			Float acy = (ey - by);
HXDLIN(  28)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  28)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  28)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  28)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  28)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  28)			if ((ex > ax)) {
HXLINE(  28)				if ((ex > bx)) {
HXLINE(  28)					int min;
HXDLIN(  28)					if ((ax > bx)) {
HXLINE(  28)						min = ::Math_obj::floor(bx);
            					}
            					else {
HXLINE(  28)						min = ::Math_obj::floor(ax);
            					}
HXDLIN(  28)					int ii_min = min;
HXDLIN(  28)					int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  28)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE(  28)					int ii_min1 = ::Math_obj::floor(ax);
HXDLIN(  28)					int ii_max1 = ::Math_obj::ceil(bx);
HXDLIN(  28)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE(  28)				if ((ax > bx)) {
HXLINE(  28)					int min1;
HXDLIN(  28)					if ((ex > bx)) {
HXLINE(  28)						min1 = ::Math_obj::floor(bx);
            					}
            					else {
HXLINE(  28)						min1 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  28)					int ii_min2 = min1;
HXDLIN(  28)					int ii_max2 = ::Math_obj::ceil(ax);
HXDLIN(  28)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE(  28)					int ii_min3 = ::Math_obj::floor(ex);
HXDLIN(  28)					int ii_max3 = ::Math_obj::ceil(bx);
HXDLIN(  28)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  28)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  28)			if ((ey > ay)) {
HXLINE(  28)				if ((ey > by)) {
HXLINE(  28)					int min2;
HXDLIN(  28)					if ((ay > by)) {
HXLINE(  28)						min2 = ::Math_obj::floor(by);
            					}
            					else {
HXLINE(  28)						min2 = ::Math_obj::floor(ay);
            					}
HXDLIN(  28)					int ii_min4 = min2;
HXDLIN(  28)					int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN(  28)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE(  28)					int ii_min5 = ::Math_obj::floor(ay);
HXDLIN(  28)					int ii_max5 = ::Math_obj::ceil(by);
HXDLIN(  28)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE(  28)				if ((ay > by)) {
HXLINE(  28)					int min3;
HXDLIN(  28)					if ((ey > by)) {
HXLINE(  28)						min3 = ::Math_obj::floor(by);
            					}
            					else {
HXLINE(  28)						min3 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  28)					int ii_min6 = min3;
HXDLIN(  28)					int ii_max6 = ::Math_obj::ceil(ay);
HXDLIN(  28)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE(  28)					int ii_min7 = ::Math_obj::floor(ey);
HXDLIN(  28)					int ii_max7 = ::Math_obj::ceil(by);
HXDLIN(  28)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN(  28)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  28)			if (hasUndo) {
HXLINE(  28)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  28)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  28)				 ::Dynamic imageType = null();
HXDLIN(  28)				 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  28)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  28)				::Dynamic undoImage1;
HXDLIN(  28)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE(  28)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  28)						 ::iterMagic::BytesImg b = byt;
HXDLIN(  28)						{
HXLINE(  28)							b->width = width;
HXDLIN(  28)							b->height = height;
HXDLIN(  28)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  28)							{
HXLINE(  28)								int len = b->length;
HXDLIN(  28)								int w = 0;
HXDLIN(  28)								{
HXLINE(  28)									int _g = 0;
HXDLIN(  28)									int _g1 = b->height;
HXDLIN(  28)									while((_g < _g1)){
HXLINE(  28)										_g = (_g + 1);
HXDLIN(  28)										int y = (_g - 1);
HXDLIN(  28)										{
HXLINE(  28)											int _g2 = 0;
HXDLIN(  28)											int _g3 = b->width;
HXDLIN(  28)											while((_g2 < _g3)){
HXLINE(  28)												_g2 = (_g2 + 1);
HXDLIN(  28)												int x = (_g2 - 1);
HXDLIN(  28)												{
HXLINE(  28)													w = (w + 1);
HXDLIN(  28)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  28)												{
HXLINE(  28)													w = (w + 1);
HXDLIN(  28)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  28)												{
HXLINE(  28)													w = (w + 1);
HXDLIN(  28)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  28)												{
HXLINE(  28)													w = (w + 1);
HXDLIN(  28)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  28)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXLINE(  28)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)						 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  28)						{
HXLINE(  28)							a->width = width;
HXDLIN(  28)							a->height = height;
HXDLIN(  28)							a->data = ::Array_obj< int >::__new(0);
HXDLIN(  28)							a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)							{
HXLINE(  28)								int _g4 = 0;
HXDLIN(  28)								int _g5 = a->length;
HXDLIN(  28)								while((_g4 < _g5)){
HXLINE(  28)									_g4 = (_g4 + 1);
HXDLIN(  28)									int i = (_g4 - 1);
HXDLIN(  28)									a->data[i] = 0;
            								}
            							}
            						}
HXDLIN(  28)						undoImage1 = a;
            					}
            					break;
            					case (int)2: {
HXLINE(  28)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  28)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  28)						{
HXLINE(  28)							b1->width = width;
HXDLIN(  28)							b1->height = height;
HXDLIN(  28)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)							int size = (b1->length * 4);
HXDLIN(  28)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  28)							{
HXLINE(  28)								int _g6 = 0;
HXDLIN(  28)								int _g7 = b1->length;
HXDLIN(  28)								while((_g6 < _g7)){
HXLINE(  28)									_g6 = (_g6 + 1);
HXDLIN(  28)									int i1 = (_g6 - 1);
HXDLIN(  28)									{
HXLINE(  28)										 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  28)										bool undoImage2;
HXDLIN(  28)										if ((i1 >= 0)) {
HXLINE(  28)											undoImage2 = (i1 < (this2->byteLength >> 2));
            										}
            										else {
HXLINE(  28)											undoImage2 = false;
            										}
HXDLIN(  28)										if (undoImage2) {
HXLINE(  28)											 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  28)											int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  28)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  28)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  28)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  28)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  28)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXLINE(  28)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)						 ::iterMagic::VecIntImg v = vec;
HXDLIN(  28)						{
HXLINE(  28)							v->width = width;
HXDLIN(  28)							v->height = height;
HXDLIN(  28)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  28)							{
HXLINE(  28)								int _g8 = 0;
HXDLIN(  28)								int _g9 = v->length;
HXDLIN(  28)								while((_g8 < _g9)){
HXLINE(  28)									_g8 = (_g8 + 1);
HXDLIN(  28)									int i2 = (_g8 - 1);
HXDLIN(  28)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN(  28)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE(  28)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  28)						{
HXLINE(  28)							b2->width = width;
HXDLIN(  28)							b2->height = height;
HXDLIN(  28)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  28)							{
HXLINE(  28)								int len1 = b2->length;
HXDLIN(  28)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  28)								if (::hx::IsNull( d->head )) {
HXLINE(  28)									int _g10 = 0;
HXDLIN(  28)									int _g11 = len1;
HXDLIN(  28)									while((_g10 < _g11)){
HXLINE(  28)										_g10 = (_g10 + 1);
HXDLIN(  28)										int i3 = (_g10 - 1);
HXDLIN(  28)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE(  28)									int _g12 = 0;
HXDLIN(  28)									int _g13 = len1;
HXDLIN(  28)									while((_g12 < _g13)){
HXLINE(  28)										_g12 = (_g12 + 1);
HXDLIN(  28)										int i4 = (_g12 - 1);
HXDLIN(  28)										{
HXLINE(  28)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  28)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  28)											{
HXLINE(  28)												int _g14 = 0;
HXDLIN(  28)												int _g15 = i4;
HXDLIN(  28)												while((_g14 < _g15)){
HXLINE(  28)													_g14 = (_g14 + 1);
HXDLIN(  28)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE(  28)											if (::hx::IsNull( prev )) {
HXLINE(  28)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  28)												l = null();
            											}
            											else {
HXLINE(  28)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  28)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  28)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN(  28)				this1->image = undoImage1;
HXDLIN(  28)				this1->width = width;
HXDLIN(  28)				this1->height = height;
HXDLIN(  28)				this1->imageType = ( (int)(imageType) );
HXDLIN(  28)				undoImage = this1;
HXDLIN(  28)				{
HXLINE(  28)					int rectLeft = xIter3->start;
HXDLIN(  28)					int rectTop = yIter3->start;
HXDLIN(  28)					int rectRight = xIter3->max;
HXDLIN(  28)					bool forceClear = false;
HXDLIN(  28)					{
HXLINE(  28)						int _g16 = rectTop;
HXDLIN(  28)						int _g17 = yIter3->max;
HXDLIN(  28)						while((_g16 < _g17)){
HXLINE(  28)							_g16 = (_g16 + 1);
HXDLIN(  28)							int dy1 = (_g16 - 1);
HXDLIN(  28)							{
HXLINE(  28)								int _g18 = rectLeft;
HXDLIN(  28)								int _g19 = rectRight;
HXDLIN(  28)								while((_g18 < _g19)){
HXLINE(  28)									_g18 = (_g18 + 1);
HXDLIN(  28)									int dx1 = (_g18 - 1);
HXDLIN(  28)									::Dynamic this3 = pixelImage->image;
HXDLIN(  28)									int index;
HXDLIN(  28)									if (pixelImage->useVirtualPos) {
HXLINE(  28)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  28)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            									}
HXDLIN(  28)									int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  28)									int col;
HXDLIN(  28)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  28)										col = c;
            									}
HXDLIN(  28)									bool _hx_tmp;
HXDLIN(  28)									if (pixelImage->useMask) {
HXLINE(  28)										_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  28)										_hx_tmp = false;
            									}
HXDLIN(  28)									if (_hx_tmp) {
HXLINE(  28)										 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN(  28)										::Dynamic this5 = this4->image;
HXDLIN(  28)										int index1;
HXDLIN(  28)										if (this4->useVirtualPos) {
HXLINE(  28)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            										}
            										else {
HXLINE(  28)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            										}
HXDLIN(  28)										int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN(  28)										int v1;
HXDLIN(  28)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE(  28)											v1 = c1;
            										}
HXDLIN(  28)										int maskPixel = v1;
HXDLIN(  28)										int this6 = col;
HXDLIN(  28)										if ((maskPixel == 0)) {
HXLINE(  28)											col = this6;
            										}
            										else {
HXLINE(  28)											Float m0;
HXDLIN(  28)											int this7 = ((maskPixel >> 24) & 255);
HXDLIN(  28)											if ((this7 == 0)) {
HXLINE(  28)												m0 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float m1;
HXDLIN(  28)											int this8 = ((maskPixel >> 16) & 255);
HXDLIN(  28)											if ((this8 == 0)) {
HXLINE(  28)												m1 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float m2;
HXDLIN(  28)											int this9 = ((maskPixel >> 8) & 255);
HXDLIN(  28)											if ((this9 == 0)) {
HXLINE(  28)												m2 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float m3;
HXDLIN(  28)											int this10 = (maskPixel & 255);
HXDLIN(  28)											if ((this10 == 0)) {
HXLINE(  28)												m3 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  28)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  28)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  28)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  28)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  28)									if ((col != 0)) {
HXLINE(  28)										int x1 = (dx1 - rectLeft);
HXDLIN(  28)										int y1 = (dy1 - rectTop);
HXDLIN(  28)										int c2 = col;
HXDLIN(  28)										bool _hx_tmp1;
HXDLIN(  28)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  28)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXLINE(  28)											_hx_tmp1 = false;
            										}
HXDLIN(  28)										if (_hx_tmp1) {
HXLINE(  28)											int location;
HXDLIN(  28)											if (undoImage->useVirtualPos) {
HXLINE(  28)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE(  28)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  28)											int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  28)											int this12;
HXDLIN(  28)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)												this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            											}
            											else {
HXLINE(  28)												this12 = this11;
            											}
HXDLIN(  28)											Float a1;
HXDLIN(  28)											int this13 = ((this12 >> 24) & 255);
HXDLIN(  28)											if ((this13 == 0)) {
HXLINE(  28)												a1 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												a1 = (( (Float)(this13) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float r1;
HXDLIN(  28)											int this14 = ((this12 >> 16) & 255);
HXDLIN(  28)											if ((this14 == 0)) {
HXLINE(  28)												r1 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float g1;
HXDLIN(  28)											int this15 = ((this12 >> 8) & 255);
HXDLIN(  28)											if ((this15 == 0)) {
HXLINE(  28)												g1 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float b11;
HXDLIN(  28)											int this16 = (this12 & 255);
HXDLIN(  28)											if ((this16 == 0)) {
HXLINE(  28)												b11 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float a2;
HXDLIN(  28)											int this17 = ((col >> 24) & 255);
HXDLIN(  28)											if ((this17 == 0)) {
HXLINE(  28)												a2 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float r2;
HXDLIN(  28)											int this18 = ((col >> 16) & 255);
HXDLIN(  28)											if ((this18 == 0)) {
HXLINE(  28)												r2 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float g2;
HXDLIN(  28)											int this19 = ((col >> 8) & 255);
HXDLIN(  28)											if ((this19 == 0)) {
HXLINE(  28)												g2 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float b21;
HXDLIN(  28)											int this20 = (col & 255);
HXDLIN(  28)											if ((this20 == 0)) {
HXLINE(  28)												b21 = ((Float)0.);
            											}
            											else {
HXLINE(  28)												b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN(  28)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  28)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  28)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  28)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  28)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  28)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  28)											{
HXLINE(  28)												int _hx_tmp2;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE(  28)													_hx_tmp2 = blended;
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXLINE(  28)											::Dynamic this21 = undoImage->image;
HXDLIN(  28)											int index2;
HXDLIN(  28)											if (undoImage->useVirtualPos) {
HXLINE(  28)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE(  28)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  28)											int _hx_tmp3;
HXDLIN(  28)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE(  28)												_hx_tmp3 = c2;
            											}
HXDLIN(  28)											::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            										}
            									}
            									else {
HXLINE(  28)										if (forceClear) {
HXLINE(  28)											::Dynamic this22 = undoImage->image;
HXDLIN(  28)											int x2 = (dx1 - rectLeft);
HXDLIN(  28)											int y2 = (dy1 - rectTop);
HXDLIN(  28)											int index3;
HXDLIN(  28)											if (undoImage->useVirtualPos) {
HXLINE(  28)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXLINE(  28)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN(  28)											::iterMagic::Iimg_obj::set(this22,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  28)			bool found = false;
HXDLIN(  28)			{
HXLINE(  28)				int _g_min = xIter3->start;
HXDLIN(  28)				int _g_max = xIter3->max;
HXDLIN(  28)				while((_g_min < _g_max)){
HXLINE(  28)					_g_min = (_g_min + 1);
HXDLIN(  28)					int px = (_g_min - 1);
HXDLIN(  28)					Float pcx = (( (Float)(px) ) - bx);
HXLINE( 619)					found = false;
HXLINE(  28)					{
HXLINE(  28)						int _g_min1 = yIter3->start;
HXDLIN(  28)						int _g_max1 = yIter3->max;
HXDLIN(  28)						while((_g_min1 < _g_max1)){
HXLINE(  28)							_g_min1 = (_g_min1 + 1);
HXDLIN(  28)							int py = (_g_min1 - 1);
HXDLIN(  28)							Float pcy = (( (Float)(py) ) - by);
HXDLIN(  28)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  28)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  28)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  28)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  28)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  28)							bool _hx_tmp4;
HXDLIN(  28)							bool _hx_tmp5;
HXDLIN(  28)							if ((ratioA >= 0)) {
HXLINE(  28)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXLINE(  28)								_hx_tmp5 = false;
            							}
HXDLIN(  28)							if (_hx_tmp5) {
HXLINE(  28)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXLINE(  28)								_hx_tmp4 = false;
            							}
HXDLIN(  28)							if (_hx_tmp4) {
HXLINE(  28)								int i6 = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN(  28)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE(  28)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE(  28)								int a5 = i6;
HXDLIN(  28)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  28)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE(  28)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE(  28)								int r3 = i7;
HXDLIN(  28)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  28)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE(  28)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE(  28)								int g3 = i8;
HXDLIN(  28)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  28)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE(  28)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE(  28)								int b4 = i9;
HXDLIN(  28)								{
HXLINE(  28)									int location1;
HXDLIN(  28)									if (pixelImage->useVirtualPos) {
HXLINE(  28)										location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  28)										location1 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            									}
HXDLIN(  28)									bool _hx_tmp6;
HXDLIN(  28)									if (pixelImage->transparent) {
HXLINE(  28)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXLINE(  28)										_hx_tmp6 = false;
            									}
HXDLIN(  28)									if (_hx_tmp6) {
HXLINE(  28)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  28)										int old;
HXDLIN(  28)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE(  28)											old = this23;
            										}
HXDLIN(  28)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  28)										Float a11;
HXDLIN(  28)										int this24 = ((old >> 24) & 255);
HXDLIN(  28)										if ((this24 == 0)) {
HXLINE(  28)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											a11 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float r11;
HXDLIN(  28)										int this25 = ((old >> 16) & 255);
HXDLIN(  28)										if ((this25 == 0)) {
HXLINE(  28)											r11 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float g11;
HXDLIN(  28)										int this26 = ((old >> 8) & 255);
HXDLIN(  28)										if ((this26 == 0)) {
HXLINE(  28)											g11 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float b12;
HXDLIN(  28)										int this27 = (old & 255);
HXDLIN(  28)										if ((this27 == 0)) {
HXLINE(  28)											b12 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float a21;
HXDLIN(  28)										int this28 = ((rhs >> 24) & 255);
HXDLIN(  28)										if ((this28 == 0)) {
HXLINE(  28)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float r21;
HXDLIN(  28)										int this29 = ((rhs >> 16) & 255);
HXDLIN(  28)										if ((this29 == 0)) {
HXLINE(  28)											r21 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float g21;
HXDLIN(  28)										int this30 = ((rhs >> 8) & 255);
HXDLIN(  28)										if ((this30 == 0)) {
HXLINE(  28)											g21 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float b22;
HXDLIN(  28)										int this31 = (rhs & 255);
HXDLIN(  28)										if ((this31 == 0)) {
HXLINE(  28)											b22 = ((Float)0.);
            										}
            										else {
HXLINE(  28)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  28)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  28)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  28)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  28)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  28)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  28)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  28)										{
HXLINE(  28)											int _hx_tmp7;
HXDLIN(  28)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE(  28)												_hx_tmp7 = blended1;
            											}
HXDLIN(  28)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE(  28)										int value;
HXDLIN(  28)										if (pixelImage->isLittle) {
HXLINE(  28)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXLINE(  28)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN(  28)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
HXLINE( 633)								found = true;
            							}
            							else {
HXLINE(  28)								if (found) {
HXLINE(  28)									goto _hx_goto_11;
            								}
            							}
            						}
            						_hx_goto_11:;
            					}
            				}
            			}
HXDLIN(  28)			if ((hasHit == false)) {
HXLINE(  28)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,ax,ay,bx,by,true);
HXDLIN(  28)				if (hasUndo) {
HXLINE(  28)					v2->undoImage = undoImage;
HXDLIN(  28)					v2->undoX = xIter3->start;
HXDLIN(  28)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXLINE(  30)		{
HXLINE(  30)			bool hasUndo1 = false;
HXDLIN(  30)			int aA1 = ((color >> 24) & 255);
HXDLIN(  30)			int rA1 = ((color >> 16) & 255);
HXDLIN(  30)			int gA1 = ((color >> 8) & 255);
HXDLIN(  30)			int bA1 = (color & 255);
HXDLIN(  30)			Float bcx1 = (bx - cx);
HXDLIN(  30)			Float bcy1 = (by - cy);
HXDLIN(  30)			Float acx1 = (ex - cx);
HXDLIN(  30)			Float acy1 = (ey - cy);
HXDLIN(  30)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  30)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  30)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  30)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  30)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  30)			if ((ex > bx)) {
HXLINE(  30)				if ((ex > cx)) {
HXLINE(  30)					int min4;
HXDLIN(  30)					if ((bx > cx)) {
HXLINE(  30)						min4 = ::Math_obj::floor(cx);
            					}
            					else {
HXLINE(  30)						min4 = ::Math_obj::floor(bx);
            					}
HXDLIN(  30)					int ii_min8 = min4;
HXDLIN(  30)					int ii_max8 = ::Math_obj::ceil(ex);
HXDLIN(  30)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE(  30)					int ii_min9 = ::Math_obj::floor(bx);
HXDLIN(  30)					int ii_max9 = ::Math_obj::ceil(cx);
HXDLIN(  30)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE(  30)				if ((bx > cx)) {
HXLINE(  30)					int min5;
HXDLIN(  30)					if ((ex > cx)) {
HXLINE(  30)						min5 = ::Math_obj::floor(cx);
            					}
            					else {
HXLINE(  30)						min5 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  30)					int ii_min10 = min5;
HXDLIN(  30)					int ii_max10 = ::Math_obj::ceil(bx);
HXDLIN(  30)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE(  30)					int ii_min11 = ::Math_obj::floor(ex);
HXDLIN(  30)					int ii_max11 = ::Math_obj::ceil(cx);
HXDLIN(  30)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  30)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  30)			if ((ey > by)) {
HXLINE(  30)				if ((ey > cy)) {
HXLINE(  30)					int min6;
HXDLIN(  30)					if ((by > cy)) {
HXLINE(  30)						min6 = ::Math_obj::floor(cy);
            					}
            					else {
HXLINE(  30)						min6 = ::Math_obj::floor(by);
            					}
HXDLIN(  30)					int ii_min12 = min6;
HXDLIN(  30)					int ii_max12 = ::Math_obj::ceil(ey);
HXDLIN(  30)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE(  30)					int ii_min13 = ::Math_obj::floor(by);
HXDLIN(  30)					int ii_max13 = ::Math_obj::ceil(cy);
HXDLIN(  30)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE(  30)				if ((by > cy)) {
HXLINE(  30)					int min7;
HXDLIN(  30)					if ((ey > cy)) {
HXLINE(  30)						min7 = ::Math_obj::floor(cy);
            					}
            					else {
HXLINE(  30)						min7 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  30)					int ii_min14 = min7;
HXDLIN(  30)					int ii_max14 = ::Math_obj::ceil(by);
HXDLIN(  30)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE(  30)					int ii_min15 = ::Math_obj::floor(ey);
HXDLIN(  30)					int ii_max15 = ::Math_obj::ceil(cy);
HXDLIN(  30)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN(  30)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  30)			if (hasUndo1) {
HXLINE(  30)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  30)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  30)				 ::Dynamic imageType1 = null();
HXDLIN(  30)				 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  30)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  30)				::Dynamic undoImage4;
HXDLIN(  30)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE(  30)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  30)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  30)						{
HXLINE(  30)							b6->width = width1;
HXDLIN(  30)							b6->height = height1;
HXDLIN(  30)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  30)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  30)							{
HXLINE(  30)								int len2 = b6->length;
HXDLIN(  30)								int w1 = 0;
HXDLIN(  30)								{
HXLINE(  30)									int _g20 = 0;
HXDLIN(  30)									int _g21 = b6->height;
HXDLIN(  30)									while((_g20 < _g21)){
HXLINE(  30)										_g20 = (_g20 + 1);
HXDLIN(  30)										int y3 = (_g20 - 1);
HXDLIN(  30)										{
HXLINE(  30)											int _g22 = 0;
HXDLIN(  30)											int _g23 = b6->width;
HXDLIN(  30)											while((_g22 < _g23)){
HXLINE(  30)												_g22 = (_g22 + 1);
HXDLIN(  30)												int x3 = (_g22 - 1);
HXDLIN(  30)												{
HXLINE(  30)													w1 = (w1 + 1);
HXDLIN(  30)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  30)												{
HXLINE(  30)													w1 = (w1 + 1);
HXDLIN(  30)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  30)												{
HXLINE(  30)													w1 = (w1 + 1);
HXDLIN(  30)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  30)												{
HXLINE(  30)													w1 = (w1 + 1);
HXDLIN(  30)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  30)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE(  30)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  30)						{
HXLINE(  30)							a7->width = width1;
HXDLIN(  30)							a7->height = height1;
HXDLIN(  30)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  30)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  30)							{
HXLINE(  30)								int _g24 = 0;
HXDLIN(  30)								int _g25 = a7->length;
HXDLIN(  30)								while((_g24 < _g25)){
HXLINE(  30)									_g24 = (_g24 + 1);
HXDLIN(  30)									int i10 = (_g24 - 1);
HXDLIN(  30)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN(  30)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXLINE(  30)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  30)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  30)						{
HXLINE(  30)							b7->width = width1;
HXDLIN(  30)							b7->height = height1;
HXDLIN(  30)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  30)							int size1 = (b7->length * 4);
HXDLIN(  30)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  30)							{
HXLINE(  30)								int _g26 = 0;
HXDLIN(  30)								int _g27 = b7->length;
HXDLIN(  30)								while((_g26 < _g27)){
HXLINE(  30)									_g26 = (_g26 + 1);
HXDLIN(  30)									int i11 = (_g26 - 1);
HXDLIN(  30)									{
HXLINE(  30)										 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN(  30)										bool undoImage5;
HXDLIN(  30)										if ((i11 >= 0)) {
HXLINE(  30)											undoImage5 = (i11 < (this33->byteLength >> 2));
            										}
            										else {
HXLINE(  30)											undoImage5 = false;
            										}
HXDLIN(  30)										if (undoImage5) {
HXLINE(  30)											 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN(  30)											int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN(  30)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  30)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  30)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  30)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  30)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE(  30)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  30)						{
HXLINE(  30)							v3->width = width1;
HXDLIN(  30)							v3->height = height1;
HXDLIN(  30)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  30)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  30)							{
HXLINE(  30)								int _g28 = 0;
HXDLIN(  30)								int _g29 = v3->length;
HXDLIN(  30)								while((_g28 < _g29)){
HXLINE(  30)									_g28 = (_g28 + 1);
HXDLIN(  30)									int i12 = (_g28 - 1);
HXDLIN(  30)									v3->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN(  30)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXLINE(  30)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  30)						{
HXLINE(  30)							b8->width = width1;
HXDLIN(  30)							b8->height = height1;
HXDLIN(  30)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  30)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  30)							{
HXLINE(  30)								int len3 = b8->length;
HXDLIN(  30)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  30)								if (::hx::IsNull( d1->head )) {
HXLINE(  30)									int _g30 = 0;
HXDLIN(  30)									int _g31 = len3;
HXDLIN(  30)									while((_g30 < _g31)){
HXLINE(  30)										_g30 = (_g30 + 1);
HXDLIN(  30)										int i13 = (_g30 - 1);
HXDLIN(  30)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE(  30)									int _g32 = 0;
HXDLIN(  30)									int _g33 = len3;
HXDLIN(  30)									while((_g32 < _g33)){
HXLINE(  30)										_g32 = (_g32 + 1);
HXDLIN(  30)										int i14 = (_g32 - 1);
HXDLIN(  30)										{
HXLINE(  30)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  30)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  30)											{
HXLINE(  30)												int _g34 = 0;
HXDLIN(  30)												int _g35 = i14;
HXDLIN(  30)												while((_g34 < _g35)){
HXLINE(  30)													_g34 = (_g34 + 1);
HXDLIN(  30)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  30)											if (::hx::IsNull( prev1 )) {
HXLINE(  30)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  30)												l1 = null();
            											}
            											else {
HXLINE(  30)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  30)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  30)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN(  30)				this32->image = undoImage4;
HXDLIN(  30)				this32->width = width1;
HXDLIN(  30)				this32->height = height1;
HXDLIN(  30)				this32->imageType = ( (int)(imageType1) );
HXDLIN(  30)				undoImage3 = this32;
HXDLIN(  30)				{
HXLINE(  30)					int rectLeft1 = xIter31->start;
HXDLIN(  30)					int rectTop1 = yIter31->start;
HXDLIN(  30)					int rectRight1 = xIter31->max;
HXDLIN(  30)					bool forceClear1 = false;
HXDLIN(  30)					{
HXLINE(  30)						int _g36 = rectTop1;
HXDLIN(  30)						int _g37 = yIter31->max;
HXDLIN(  30)						while((_g36 < _g37)){
HXLINE(  30)							_g36 = (_g36 + 1);
HXDLIN(  30)							int dy2 = (_g36 - 1);
HXDLIN(  30)							{
HXLINE(  30)								int _g38 = rectLeft1;
HXDLIN(  30)								int _g39 = rectRight1;
HXDLIN(  30)								while((_g38 < _g39)){
HXLINE(  30)									_g38 = (_g38 + 1);
HXDLIN(  30)									int dx2 = (_g38 - 1);
HXDLIN(  30)									::Dynamic this34 = pixelImage->image;
HXDLIN(  30)									int index4;
HXDLIN(  30)									if (pixelImage->useVirtualPos) {
HXLINE(  30)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  30)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            									}
HXDLIN(  30)									int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN(  30)									int col1;
HXDLIN(  30)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE(  30)										col1 = c3;
            									}
HXDLIN(  30)									bool _hx_tmp8;
HXDLIN(  30)									if (pixelImage->useMask) {
HXLINE(  30)										_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  30)										_hx_tmp8 = false;
            									}
HXDLIN(  30)									if (_hx_tmp8) {
HXLINE(  30)										 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN(  30)										::Dynamic this36 = this35->image;
HXDLIN(  30)										int index5;
HXDLIN(  30)										if (this35->useVirtualPos) {
HXLINE(  30)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            										}
            										else {
HXLINE(  30)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            										}
HXDLIN(  30)										int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN(  30)										int v4;
HXDLIN(  30)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)											v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE(  30)											v4 = c4;
            										}
HXDLIN(  30)										int maskPixel1 = v4;
HXDLIN(  30)										int this37 = col1;
HXDLIN(  30)										if ((maskPixel1 == 0)) {
HXLINE(  30)											col1 = this37;
            										}
            										else {
HXLINE(  30)											Float m01;
HXDLIN(  30)											int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN(  30)											if ((this38 == 0)) {
HXLINE(  30)												m01 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float m11;
HXDLIN(  30)											int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN(  30)											if ((this39 == 0)) {
HXLINE(  30)												m11 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float m21;
HXDLIN(  30)											int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN(  30)											if ((this40 == 0)) {
HXLINE(  30)												m21 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float m31;
HXDLIN(  30)											int this41 = (maskPixel1 & 255);
HXDLIN(  30)											if ((this41 == 0)) {
HXLINE(  30)												m31 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN(  30)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN(  30)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN(  30)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN(  30)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  30)									if ((col1 != 0)) {
HXLINE(  30)										int x4 = (dx2 - rectLeft1);
HXDLIN(  30)										int y4 = (dy2 - rectTop1);
HXDLIN(  30)										int c5 = col1;
HXDLIN(  30)										bool _hx_tmp9;
HXDLIN(  30)										if ((((c5 >> 24) & 255) < 254)) {
HXLINE(  30)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXLINE(  30)											_hx_tmp9 = false;
            										}
HXDLIN(  30)										if (_hx_tmp9) {
HXLINE(  30)											int location2;
HXDLIN(  30)											if (undoImage3->useVirtualPos) {
HXLINE(  30)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE(  30)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  30)											int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  30)											int this43;
HXDLIN(  30)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)												this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            											}
            											else {
HXLINE(  30)												this43 = this42;
            											}
HXDLIN(  30)											Float a12;
HXDLIN(  30)											int this44 = ((this43 >> 24) & 255);
HXDLIN(  30)											if ((this44 == 0)) {
HXLINE(  30)												a12 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												a12 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float r12;
HXDLIN(  30)											int this45 = ((this43 >> 16) & 255);
HXDLIN(  30)											if ((this45 == 0)) {
HXLINE(  30)												r12 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float g12;
HXDLIN(  30)											int this46 = ((this43 >> 8) & 255);
HXDLIN(  30)											if ((this46 == 0)) {
HXLINE(  30)												g12 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float b13;
HXDLIN(  30)											int this47 = (this43 & 255);
HXDLIN(  30)											if ((this47 == 0)) {
HXLINE(  30)												b13 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float a22;
HXDLIN(  30)											int this48 = ((col1 >> 24) & 255);
HXDLIN(  30)											if ((this48 == 0)) {
HXLINE(  30)												a22 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float r22;
HXDLIN(  30)											int this49 = ((col1 >> 16) & 255);
HXDLIN(  30)											if ((this49 == 0)) {
HXLINE(  30)												r22 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float g22;
HXDLIN(  30)											int this50 = ((col1 >> 8) & 255);
HXDLIN(  30)											if ((this50 == 0)) {
HXLINE(  30)												g22 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float b23;
HXDLIN(  30)											int this51 = (col1 & 255);
HXDLIN(  30)											if ((this51 == 0)) {
HXLINE(  30)												b23 = ((Float)0.);
            											}
            											else {
HXLINE(  30)												b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN(  30)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  30)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  30)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  30)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  30)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  30)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  30)											{
HXLINE(  30)												int _hx_tmp10;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													_hx_tmp10 = blended2;
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXLINE(  30)											::Dynamic this52 = undoImage3->image;
HXDLIN(  30)											int index6;
HXDLIN(  30)											if (undoImage3->useVirtualPos) {
HXLINE(  30)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE(  30)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  30)											int _hx_tmp11;
HXDLIN(  30)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE(  30)												_hx_tmp11 = c5;
            											}
HXDLIN(  30)											::iterMagic::Iimg_obj::set(this52,index6,_hx_tmp11);
            										}
            									}
            									else {
HXLINE(  30)										if (forceClear1) {
HXLINE(  30)											::Dynamic this53 = undoImage3->image;
HXDLIN(  30)											int x5 = (dx2 - rectLeft1);
HXDLIN(  30)											int y5 = (dy2 - rectTop1);
HXDLIN(  30)											int index7;
HXDLIN(  30)											if (undoImage3->useVirtualPos) {
HXLINE(  30)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXLINE(  30)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN(  30)											::iterMagic::Iimg_obj::set(this53,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  30)			bool found1 = false;
HXDLIN(  30)			{
HXLINE(  30)				int _g_min2 = xIter31->start;
HXDLIN(  30)				int _g_max2 = xIter31->max;
HXDLIN(  30)				while((_g_min2 < _g_max2)){
HXLINE(  30)					_g_min2 = (_g_min2 + 1);
HXDLIN(  30)					int px1 = (_g_min2 - 1);
HXDLIN(  30)					Float pcx1 = (( (Float)(px1) ) - cx);
HXLINE( 619)					found1 = false;
HXLINE(  30)					{
HXLINE(  30)						int _g_min3 = yIter31->start;
HXDLIN(  30)						int _g_max3 = yIter31->max;
HXDLIN(  30)						while((_g_min3 < _g_max3)){
HXLINE(  30)							_g_min3 = (_g_min3 + 1);
HXDLIN(  30)							int py1 = (_g_min3 - 1);
HXDLIN(  30)							Float pcy1 = (( (Float)(py1) ) - cy);
HXDLIN(  30)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  30)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  30)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  30)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  30)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  30)							bool _hx_tmp12;
HXDLIN(  30)							bool _hx_tmp13;
HXDLIN(  30)							if ((ratioA1 >= 0)) {
HXLINE(  30)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXLINE(  30)								_hx_tmp13 = false;
            							}
HXDLIN(  30)							if (_hx_tmp13) {
HXLINE(  30)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXLINE(  30)								_hx_tmp12 = false;
            							}
HXDLIN(  30)							if (_hx_tmp12) {
HXLINE(  30)								int i16 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB1)));
HXDLIN(  30)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE(  30)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE(  30)								int a9 = i16;
HXDLIN(  30)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  30)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE(  30)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE(  30)								int r6 = i17;
HXDLIN(  30)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  30)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE(  30)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE(  30)								int g6 = i18;
HXDLIN(  30)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  30)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE(  30)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE(  30)								int b10 = i19;
HXDLIN(  30)								{
HXLINE(  30)									int location3;
HXDLIN(  30)									if (pixelImage->useVirtualPos) {
HXLINE(  30)										location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  30)										location3 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN(  30)									bool _hx_tmp14;
HXDLIN(  30)									if (pixelImage->transparent) {
HXLINE(  30)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXLINE(  30)										_hx_tmp14 = false;
            									}
HXDLIN(  30)									if (_hx_tmp14) {
HXLINE(  30)										int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  30)										int old1;
HXDLIN(  30)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)											old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            										}
            										else {
HXLINE(  30)											old1 = this54;
            										}
HXDLIN(  30)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  30)										Float a13;
HXDLIN(  30)										int this55 = ((old1 >> 24) & 255);
HXDLIN(  30)										if ((this55 == 0)) {
HXLINE(  30)											a13 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											a13 = (( (Float)(this55) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float r13;
HXDLIN(  30)										int this56 = ((old1 >> 16) & 255);
HXDLIN(  30)										if ((this56 == 0)) {
HXLINE(  30)											r13 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float g13;
HXDLIN(  30)										int this57 = ((old1 >> 8) & 255);
HXDLIN(  30)										if ((this57 == 0)) {
HXLINE(  30)											g13 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float b14;
HXDLIN(  30)										int this58 = (old1 & 255);
HXDLIN(  30)										if ((this58 == 0)) {
HXLINE(  30)											b14 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float a23;
HXDLIN(  30)										int this59 = ((rhs1 >> 24) & 255);
HXDLIN(  30)										if ((this59 == 0)) {
HXLINE(  30)											a23 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float r23;
HXDLIN(  30)										int this60 = ((rhs1 >> 16) & 255);
HXDLIN(  30)										if ((this60 == 0)) {
HXLINE(  30)											r23 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float g23;
HXDLIN(  30)										int this61 = ((rhs1 >> 8) & 255);
HXDLIN(  30)										if ((this61 == 0)) {
HXLINE(  30)											g23 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float b24;
HXDLIN(  30)										int this62 = (rhs1 & 255);
HXDLIN(  30)										if ((this62 == 0)) {
HXLINE(  30)											b24 = ((Float)0.);
            										}
            										else {
HXLINE(  30)											b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN(  30)										Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  30)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  30)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  30)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  30)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  30)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN(  30)										{
HXLINE(  30)											int _hx_tmp15;
HXDLIN(  30)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE(  30)												_hx_tmp15 = blended3;
            											}
HXDLIN(  30)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXLINE(  30)										int value1;
HXDLIN(  30)										if (pixelImage->isLittle) {
HXLINE(  30)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE(  30)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN(  30)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            									}
            								}
HXLINE( 633)								found1 = true;
            							}
            							else {
HXLINE(  30)								if (found1) {
HXLINE(  30)									goto _hx_goto_23;
            								}
            							}
            						}
            						_hx_goto_23:;
            					}
            				}
            			}
HXDLIN(  30)			if ((hasHit == false)) {
HXLINE(  30)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,bx,by,cx,cy,true);
HXDLIN(  30)				if (hasUndo1) {
HXLINE(  30)					v5->undoImage = undoImage3;
HXDLIN(  30)					v5->undoX = xIter31->start;
HXDLIN(  30)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXLINE(  32)		{
HXLINE(  32)			bool hasUndo2 = false;
HXDLIN(  32)			int aA2 = ((color >> 24) & 255);
HXDLIN(  32)			int rA2 = ((color >> 16) & 255);
HXDLIN(  32)			int gA2 = ((color >> 8) & 255);
HXDLIN(  32)			int bA2 = (color & 255);
HXDLIN(  32)			Float bcx2 = (cx - dx);
HXDLIN(  32)			Float bcy2 = (cy - dy);
HXDLIN(  32)			Float acx2 = (ex - dx);
HXDLIN(  32)			Float acy2 = (ey - dy);
HXDLIN(  32)			Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  32)			Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  32)			Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  32)			Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  32)			 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  32)			if ((ex > cx)) {
HXLINE(  32)				if ((ex > dx)) {
HXLINE(  32)					int min8;
HXDLIN(  32)					if ((cx > dx)) {
HXLINE(  32)						min8 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE(  32)						min8 = ::Math_obj::floor(cx);
            					}
HXDLIN(  32)					int ii_min16 = min8;
HXDLIN(  32)					int ii_max16 = ::Math_obj::ceil(ex);
HXDLIN(  32)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE(  32)					int ii_min17 = ::Math_obj::floor(cx);
HXDLIN(  32)					int ii_max17 = ::Math_obj::ceil(dx);
HXDLIN(  32)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE(  32)				if ((cx > dx)) {
HXLINE(  32)					int min9;
HXDLIN(  32)					if ((ex > dx)) {
HXLINE(  32)						min9 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE(  32)						min9 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  32)					int ii_min18 = min9;
HXDLIN(  32)					int ii_max18 = ::Math_obj::ceil(cx);
HXDLIN(  32)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE(  32)					int ii_min19 = ::Math_obj::floor(ex);
HXDLIN(  32)					int ii_max19 = ::Math_obj::ceil(dx);
HXDLIN(  32)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN(  32)			 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  32)			if ((ey > cy)) {
HXLINE(  32)				if ((ey > dy)) {
HXLINE(  32)					int min10;
HXDLIN(  32)					if ((cy > dy)) {
HXLINE(  32)						min10 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE(  32)						min10 = ::Math_obj::floor(cy);
            					}
HXDLIN(  32)					int ii_min20 = min10;
HXDLIN(  32)					int ii_max20 = ::Math_obj::ceil(ey);
HXDLIN(  32)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE(  32)					int ii_min21 = ::Math_obj::floor(cy);
HXDLIN(  32)					int ii_max21 = ::Math_obj::ceil(dy);
HXDLIN(  32)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE(  32)				if ((cy > dy)) {
HXLINE(  32)					int min11;
HXDLIN(  32)					if ((ey > dy)) {
HXLINE(  32)						min11 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE(  32)						min11 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  32)					int ii_min22 = min11;
HXDLIN(  32)					int ii_max22 = ::Math_obj::ceil(cy);
HXDLIN(  32)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE(  32)					int ii_min23 = ::Math_obj::floor(ey);
HXDLIN(  32)					int ii_max23 = ::Math_obj::ceil(dy);
HXDLIN(  32)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
HXDLIN(  32)			 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  32)			if (hasUndo2) {
HXLINE(  32)				int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  32)				int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  32)				 ::Dynamic imageType2 = null();
HXDLIN(  32)				 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  32)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  32)				::Dynamic undoImage7;
HXDLIN(  32)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXLINE(  32)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  32)						 ::iterMagic::BytesImg b16 = byt2;
HXDLIN(  32)						{
HXLINE(  32)							b16->width = width2;
HXDLIN(  32)							b16->height = height2;
HXDLIN(  32)							b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  32)							b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN(  32)							{
HXLINE(  32)								int len4 = b16->length;
HXDLIN(  32)								int w2 = 0;
HXDLIN(  32)								{
HXLINE(  32)									int _g40 = 0;
HXDLIN(  32)									int _g41 = b16->height;
HXDLIN(  32)									while((_g40 < _g41)){
HXLINE(  32)										_g40 = (_g40 + 1);
HXDLIN(  32)										int y6 = (_g40 - 1);
HXDLIN(  32)										{
HXLINE(  32)											int _g42 = 0;
HXDLIN(  32)											int _g43 = b16->width;
HXDLIN(  32)											while((_g42 < _g43)){
HXLINE(  32)												_g42 = (_g42 + 1);
HXDLIN(  32)												int x6 = (_g42 - 1);
HXDLIN(  32)												{
HXLINE(  32)													w2 = (w2 + 1);
HXDLIN(  32)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  32)												{
HXLINE(  32)													w2 = (w2 + 1);
HXDLIN(  32)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  32)												{
HXLINE(  32)													w2 = (w2 + 1);
HXDLIN(  32)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  32)												{
HXLINE(  32)													w2 = (w2 + 1);
HXDLIN(  32)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  32)						undoImage7 = b16;
            					}
            					break;
            					case (int)1: {
HXLINE(  32)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  32)						 ::iterMagic::ArrIntImg a14 = arrI2;
HXDLIN(  32)						{
HXLINE(  32)							a14->width = width2;
HXDLIN(  32)							a14->height = height2;
HXDLIN(  32)							a14->data = ::Array_obj< int >::__new(0);
HXDLIN(  32)							a14->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  32)							{
HXLINE(  32)								int _g44 = 0;
HXDLIN(  32)								int _g45 = a14->length;
HXDLIN(  32)								while((_g44 < _g45)){
HXLINE(  32)									_g44 = (_g44 + 1);
HXDLIN(  32)									int i20 = (_g44 - 1);
HXDLIN(  32)									a14->data[i20] = 0;
            								}
            							}
            						}
HXDLIN(  32)						undoImage7 = a14;
            					}
            					break;
            					case (int)2: {
HXLINE(  32)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  32)						 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN(  32)						{
HXLINE(  32)							b17->width = width2;
HXDLIN(  32)							b17->height = height2;
HXDLIN(  32)							b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  32)							int size2 = (b17->length * 4);
HXDLIN(  32)							b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  32)							{
HXLINE(  32)								int _g46 = 0;
HXDLIN(  32)								int _g47 = b17->length;
HXDLIN(  32)								while((_g46 < _g47)){
HXLINE(  32)									_g46 = (_g46 + 1);
HXDLIN(  32)									int i21 = (_g46 - 1);
HXDLIN(  32)									{
HXLINE(  32)										 ::haxe::io::ArrayBufferViewImpl this64 = b17->data;
HXDLIN(  32)										bool undoImage8;
HXDLIN(  32)										if ((i21 >= 0)) {
HXLINE(  32)											undoImage8 = (i21 < (this64->byteLength >> 2));
            										}
            										else {
HXLINE(  32)											undoImage8 = false;
            										}
HXDLIN(  32)										if (undoImage8) {
HXLINE(  32)											 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN(  32)											int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN(  32)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  32)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  32)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  32)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  32)						undoImage7 = b17;
            					}
            					break;
            					case (int)3: {
HXLINE(  32)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  32)						 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN(  32)						{
HXLINE(  32)							v6->width = width2;
HXDLIN(  32)							v6->height = height2;
HXDLIN(  32)							v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  32)							v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  32)							{
HXLINE(  32)								int _g48 = 0;
HXDLIN(  32)								int _g49 = v6->length;
HXDLIN(  32)								while((_g48 < _g49)){
HXLINE(  32)									_g48 = (_g48 + 1);
HXDLIN(  32)									int i22 = (_g48 - 1);
HXDLIN(  32)									v6->data->__unsafe_set(i22,0);
            								}
            							}
            						}
HXDLIN(  32)						undoImage7 = v6;
            					}
            					break;
            					case (int)4: {
HXLINE(  32)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  32)						 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN(  32)						{
HXLINE(  32)							b18->width = width2;
HXDLIN(  32)							b18->height = height2;
HXDLIN(  32)							b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  32)							b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  32)							{
HXLINE(  32)								int len5 = b18->length;
HXDLIN(  32)								 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN(  32)								if (::hx::IsNull( d2->head )) {
HXLINE(  32)									int _g50 = 0;
HXDLIN(  32)									int _g51 = len5;
HXDLIN(  32)									while((_g50 < _g51)){
HXLINE(  32)										_g50 = (_g50 + 1);
HXDLIN(  32)										int i23 = (_g50 - 1);
HXDLIN(  32)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXLINE(  32)									int _g52 = 0;
HXDLIN(  32)									int _g53 = len5;
HXDLIN(  32)									while((_g52 < _g53)){
HXLINE(  32)										_g52 = (_g52 + 1);
HXDLIN(  32)										int i24 = (_g52 - 1);
HXDLIN(  32)										{
HXLINE(  32)											 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN(  32)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  32)											{
HXLINE(  32)												int _g54 = 0;
HXDLIN(  32)												int _g55 = i24;
HXDLIN(  32)												while((_g54 < _g55)){
HXLINE(  32)													_g54 = (_g54 + 1);
HXDLIN(  32)													int i25 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE(  32)											if (::hx::IsNull( prev2 )) {
HXLINE(  32)												b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  32)												l2 = null();
            											}
            											else {
HXLINE(  32)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  32)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  32)						undoImage7 = b18;
            					}
            					break;
            				}
HXDLIN(  32)				this63->image = undoImage7;
HXDLIN(  32)				this63->width = width2;
HXDLIN(  32)				this63->height = height2;
HXDLIN(  32)				this63->imageType = ( (int)(imageType2) );
HXDLIN(  32)				undoImage6 = this63;
HXDLIN(  32)				{
HXLINE(  32)					int rectLeft2 = xIter32->start;
HXDLIN(  32)					int rectTop2 = yIter32->start;
HXDLIN(  32)					int rectRight2 = xIter32->max;
HXDLIN(  32)					bool forceClear2 = false;
HXDLIN(  32)					{
HXLINE(  32)						int _g56 = rectTop2;
HXDLIN(  32)						int _g57 = yIter32->max;
HXDLIN(  32)						while((_g56 < _g57)){
HXLINE(  32)							_g56 = (_g56 + 1);
HXDLIN(  32)							int dy3 = (_g56 - 1);
HXDLIN(  32)							{
HXLINE(  32)								int _g58 = rectLeft2;
HXDLIN(  32)								int _g59 = rectRight2;
HXDLIN(  32)								while((_g58 < _g59)){
HXLINE(  32)									_g58 = (_g58 + 1);
HXDLIN(  32)									int dx3 = (_g58 - 1);
HXDLIN(  32)									::Dynamic this65 = pixelImage->image;
HXDLIN(  32)									int index8;
HXDLIN(  32)									if (pixelImage->useVirtualPos) {
HXLINE(  32)										index8 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx3) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  32)										index8 = ::Std_obj::_hx_int(( (Float)(((dy3 * pixelImage->width) + dx3)) ));
            									}
HXDLIN(  32)									int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN(  32)									int col2;
HXDLIN(  32)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)										col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            									}
            									else {
HXLINE(  32)										col2 = c6;
            									}
HXDLIN(  32)									bool _hx_tmp16;
HXDLIN(  32)									if (pixelImage->useMask) {
HXLINE(  32)										_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  32)										_hx_tmp16 = false;
            									}
HXDLIN(  32)									if (_hx_tmp16) {
HXLINE(  32)										 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN(  32)										::Dynamic this67 = this66->image;
HXDLIN(  32)										int index9;
HXDLIN(  32)										if (this66->useVirtualPos) {
HXLINE(  32)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx3) - this66->virtualX));
            										}
            										else {
HXLINE(  32)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this66->width) + dx3)) ));
            										}
HXDLIN(  32)										int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN(  32)										int v7;
HXDLIN(  32)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)											v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            										}
            										else {
HXLINE(  32)											v7 = c7;
            										}
HXDLIN(  32)										int maskPixel2 = v7;
HXDLIN(  32)										int this68 = col2;
HXDLIN(  32)										if ((maskPixel2 == 0)) {
HXLINE(  32)											col2 = this68;
            										}
            										else {
HXLINE(  32)											Float m02;
HXDLIN(  32)											int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN(  32)											if ((this69 == 0)) {
HXLINE(  32)												m02 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float m12;
HXDLIN(  32)											int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN(  32)											if ((this70 == 0)) {
HXLINE(  32)												m12 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float m22;
HXDLIN(  32)											int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN(  32)											if ((this71 == 0)) {
HXLINE(  32)												m22 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float m32;
HXDLIN(  32)											int this72 = (maskPixel2 & 255);
HXDLIN(  32)											if ((this72 == 0)) {
HXLINE(  32)												m32 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN(  32)											int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN(  32)											int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN(  32)											int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN(  32)											col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  32)									if ((col2 != 0)) {
HXLINE(  32)										int x7 = (dx3 - rectLeft2);
HXDLIN(  32)										int y7 = (dy3 - rectTop2);
HXDLIN(  32)										int c8 = col2;
HXDLIN(  32)										bool _hx_tmp17;
HXDLIN(  32)										if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  32)											_hx_tmp17 = undoImage6->transparent;
            										}
            										else {
HXLINE(  32)											_hx_tmp17 = false;
            										}
HXDLIN(  32)										if (_hx_tmp17) {
HXLINE(  32)											int location4;
HXDLIN(  32)											if (undoImage6->useVirtualPos) {
HXLINE(  32)												location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            											}
            											else {
HXLINE(  32)												location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            											}
HXDLIN(  32)											int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  32)											int this74;
HXDLIN(  32)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)												this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            											}
            											else {
HXLINE(  32)												this74 = this73;
            											}
HXDLIN(  32)											Float a15;
HXDLIN(  32)											int this75 = ((this74 >> 24) & 255);
HXDLIN(  32)											if ((this75 == 0)) {
HXLINE(  32)												a15 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												a15 = (( (Float)(this75) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float r14;
HXDLIN(  32)											int this76 = ((this74 >> 16) & 255);
HXDLIN(  32)											if ((this76 == 0)) {
HXLINE(  32)												r14 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float g14;
HXDLIN(  32)											int this77 = ((this74 >> 8) & 255);
HXDLIN(  32)											if ((this77 == 0)) {
HXLINE(  32)												g14 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float b19;
HXDLIN(  32)											int this78 = (this74 & 255);
HXDLIN(  32)											if ((this78 == 0)) {
HXLINE(  32)												b19 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												b19 = (( (Float)(this78) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float a24;
HXDLIN(  32)											int this79 = ((col2 >> 24) & 255);
HXDLIN(  32)											if ((this79 == 0)) {
HXLINE(  32)												a24 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float r24;
HXDLIN(  32)											int this80 = ((col2 >> 16) & 255);
HXDLIN(  32)											if ((this80 == 0)) {
HXLINE(  32)												r24 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float g24;
HXDLIN(  32)											int this81 = ((col2 >> 8) & 255);
HXDLIN(  32)											if ((this81 == 0)) {
HXLINE(  32)												g24 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float b25;
HXDLIN(  32)											int this82 = (col2 & 255);
HXDLIN(  32)											if ((this82 == 0)) {
HXLINE(  32)												b25 = ((Float)0.);
            											}
            											else {
HXLINE(  32)												b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN(  32)											Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  32)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  32)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  32)											int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN(  32)											int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  32)											int blended4 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN(  32)											{
HXLINE(  32)												int _hx_tmp18;
HXDLIN(  32)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)													_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE(  32)													_hx_tmp18 = blended4;
            												}
HXDLIN(  32)												::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            											}
            										}
            										else {
HXLINE(  32)											::Dynamic this83 = undoImage6->image;
HXDLIN(  32)											int index10;
HXDLIN(  32)											if (undoImage6->useVirtualPos) {
HXLINE(  32)												index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            											}
            											else {
HXLINE(  32)												index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            											}
HXDLIN(  32)											int _hx_tmp19;
HXDLIN(  32)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)												_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            											}
            											else {
HXLINE(  32)												_hx_tmp19 = c8;
            											}
HXDLIN(  32)											::iterMagic::Iimg_obj::set(this83,index10,_hx_tmp19);
            										}
            									}
            									else {
HXLINE(  32)										if (forceClear2) {
HXLINE(  32)											::Dynamic this84 = undoImage6->image;
HXDLIN(  32)											int x8 = (dx3 - rectLeft2);
HXDLIN(  32)											int y8 = (dy3 - rectTop2);
HXDLIN(  32)											int index11;
HXDLIN(  32)											if (undoImage6->useVirtualPos) {
HXLINE(  32)												index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            											}
            											else {
HXLINE(  32)												index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            											}
HXDLIN(  32)											::iterMagic::Iimg_obj::set(this84,index11,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  32)			bool found2 = false;
HXDLIN(  32)			{
HXLINE(  32)				int _g_min4 = xIter32->start;
HXDLIN(  32)				int _g_max4 = xIter32->max;
HXDLIN(  32)				while((_g_min4 < _g_max4)){
HXLINE(  32)					_g_min4 = (_g_min4 + 1);
HXDLIN(  32)					int px2 = (_g_min4 - 1);
HXDLIN(  32)					Float pcx2 = (( (Float)(px2) ) - dx);
HXLINE( 619)					found2 = false;
HXLINE(  32)					{
HXLINE(  32)						int _g_min5 = yIter32->start;
HXDLIN(  32)						int _g_max5 = yIter32->max;
HXDLIN(  32)						while((_g_min5 < _g_max5)){
HXLINE(  32)							_g_min5 = (_g_min5 + 1);
HXDLIN(  32)							int py2 = (_g_min5 - 1);
HXDLIN(  32)							Float pcy2 = (( (Float)(py2) ) - dy);
HXDLIN(  32)							Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  32)							Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  32)							Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  32)							Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  32)							Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  32)							bool _hx_tmp20;
HXDLIN(  32)							bool _hx_tmp21;
HXDLIN(  32)							if ((ratioA2 >= 0)) {
HXLINE(  32)								_hx_tmp21 = (ratioB2 >= 0);
            							}
            							else {
HXLINE(  32)								_hx_tmp21 = false;
            							}
HXDLIN(  32)							if (_hx_tmp21) {
HXLINE(  32)								_hx_tmp20 = (ratioC2 >= 0);
            							}
            							else {
HXLINE(  32)								_hx_tmp20 = false;
            							}
HXDLIN(  32)							if (_hx_tmp20) {
HXLINE(  32)								int i26 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (softC * ratioB2)));
HXDLIN(  32)								if ((i26 > 255)) {
HXLINE(  24)									i26 = 255;
            								}
HXLINE(  32)								if ((i26 < 0)) {
HXLINE(  25)									i26 = 0;
            								}
HXLINE(  32)								int a17 = i26;
HXDLIN(  32)								int i27 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  32)								if ((i27 > 255)) {
HXLINE(  24)									i27 = 255;
            								}
HXLINE(  32)								if ((i27 < 0)) {
HXLINE(  25)									i27 = 0;
            								}
HXLINE(  32)								int r9 = i27;
HXDLIN(  32)								int i28 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  32)								if ((i28 > 255)) {
HXLINE(  24)									i28 = 255;
            								}
HXLINE(  32)								if ((i28 < 0)) {
HXLINE(  25)									i28 = 0;
            								}
HXLINE(  32)								int g9 = i28;
HXDLIN(  32)								int i29 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  32)								if ((i29 > 255)) {
HXLINE(  24)									i29 = 255;
            								}
HXLINE(  32)								if ((i29 < 0)) {
HXLINE(  25)									i29 = 0;
            								}
HXLINE(  32)								int b26 = i29;
HXDLIN(  32)								{
HXLINE(  32)									int location5;
HXDLIN(  32)									if (pixelImage->useVirtualPos) {
HXLINE(  32)										location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  32)										location5 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN(  32)									bool _hx_tmp22;
HXDLIN(  32)									if (pixelImage->transparent) {
HXLINE(  32)										_hx_tmp22 = (a17 < 254);
            									}
            									else {
HXLINE(  32)										_hx_tmp22 = false;
            									}
HXDLIN(  32)									if (_hx_tmp22) {
HXLINE(  32)										int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  32)										int old2;
HXDLIN(  32)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)											old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            										}
            										else {
HXLINE(  32)											old2 = this85;
            										}
HXDLIN(  32)										int rhs2 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN(  32)										Float a18;
HXDLIN(  32)										int this86 = ((old2 >> 24) & 255);
HXDLIN(  32)										if ((this86 == 0)) {
HXLINE(  32)											a18 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											a18 = (( (Float)(this86) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float r15;
HXDLIN(  32)										int this87 = ((old2 >> 16) & 255);
HXDLIN(  32)										if ((this87 == 0)) {
HXLINE(  32)											r15 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float g15;
HXDLIN(  32)										int this88 = ((old2 >> 8) & 255);
HXDLIN(  32)										if ((this88 == 0)) {
HXLINE(  32)											g15 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float b110;
HXDLIN(  32)										int this89 = (old2 & 255);
HXDLIN(  32)										if ((this89 == 0)) {
HXLINE(  32)											b110 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											b110 = (( (Float)(this89) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float a25;
HXDLIN(  32)										int this90 = ((rhs2 >> 24) & 255);
HXDLIN(  32)										if ((this90 == 0)) {
HXLINE(  32)											a25 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float r25;
HXDLIN(  32)										int this91 = ((rhs2 >> 16) & 255);
HXDLIN(  32)										if ((this91 == 0)) {
HXLINE(  32)											r25 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float g25;
HXDLIN(  32)										int this92 = ((rhs2 >> 8) & 255);
HXDLIN(  32)										if ((this92 == 0)) {
HXLINE(  32)											g25 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float b27;
HXDLIN(  32)										int this93 = (rhs2 & 255);
HXDLIN(  32)										if ((this93 == 0)) {
HXLINE(  32)											b27 = ((Float)0.);
            										}
            										else {
HXLINE(  32)											b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            										}
HXDLIN(  32)										Float a35 = (a18 * (( (Float)(1) ) - a25));
HXDLIN(  32)										int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  32)										int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  32)										int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN(  32)										int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  32)										int blended5 = ((((a19 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN(  32)										{
HXLINE(  32)											int _hx_tmp23;
HXDLIN(  32)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  32)												_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXLINE(  32)												_hx_tmp23 = blended5;
            											}
HXDLIN(  32)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp23);
            										}
            									}
            									else {
HXLINE(  32)										int value2;
HXDLIN(  32)										if (pixelImage->isLittle) {
HXLINE(  32)											value2 = ((((a17 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            										}
            										else {
HXLINE(  32)											value2 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            										}
HXDLIN(  32)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            									}
            								}
HXLINE( 633)								found2 = true;
            							}
            							else {
HXLINE(  32)								if (found2) {
HXLINE(  32)									goto _hx_goto_35;
            								}
            							}
            						}
            						_hx_goto_35:;
            					}
            				}
            			}
HXDLIN(  32)			if ((hasHit == false)) {
HXLINE(  32)				 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,cx,cy,dx,dy,true);
HXDLIN(  32)				if (hasUndo2) {
HXLINE(  32)					v8->undoImage = undoImage6;
HXDLIN(  32)					v8->undoX = xIter32->start;
HXDLIN(  32)					v8->undoY = yIter32->start;
            				}
            			}
            		}
HXLINE(  34)		{
HXLINE(  34)			bool hasUndo3 = false;
HXDLIN(  34)			int aA3 = ((color >> 24) & 255);
HXDLIN(  34)			int rA3 = ((color >> 16) & 255);
HXDLIN(  34)			int gA3 = ((color >> 8) & 255);
HXDLIN(  34)			int bA3 = (color & 255);
HXDLIN(  34)			Float bcx3 = (dx - ax);
HXDLIN(  34)			Float bcy3 = (dy - ay);
HXDLIN(  34)			Float acx3 = (ex - ax);
HXDLIN(  34)			Float acy3 = (ey - ay);
HXDLIN(  34)			Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  34)			Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  34)			Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  34)			Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  34)			 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  34)			if ((ex > dx)) {
HXLINE(  34)				if ((ex > ax)) {
HXLINE(  34)					int min12;
HXDLIN(  34)					if ((dx > ax)) {
HXLINE(  34)						min12 = ::Math_obj::floor(ax);
            					}
            					else {
HXLINE(  34)						min12 = ::Math_obj::floor(dx);
            					}
HXDLIN(  34)					int ii_min24 = min12;
HXDLIN(  34)					int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN(  34)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            				}
            				else {
HXLINE(  34)					int ii_min25 = ::Math_obj::floor(dx);
HXDLIN(  34)					int ii_max25 = ::Math_obj::ceil(ax);
HXDLIN(  34)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            				}
            			}
            			else {
HXLINE(  34)				if ((dx > ax)) {
HXLINE(  34)					int min13;
HXDLIN(  34)					if ((ex > ax)) {
HXLINE(  34)						min13 = ::Math_obj::floor(ax);
            					}
            					else {
HXLINE(  34)						min13 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  34)					int ii_min26 = min13;
HXDLIN(  34)					int ii_max26 = ::Math_obj::ceil(dx);
HXDLIN(  34)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            				}
            				else {
HXLINE(  34)					int ii_min27 = ::Math_obj::floor(ex);
HXDLIN(  34)					int ii_max27 = ::Math_obj::ceil(ax);
HXDLIN(  34)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            				}
            			}
HXDLIN(  34)			 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  34)			if ((ey > dy)) {
HXLINE(  34)				if ((ey > ay)) {
HXLINE(  34)					int min14;
HXDLIN(  34)					if ((dy > ay)) {
HXLINE(  34)						min14 = ::Math_obj::floor(ay);
            					}
            					else {
HXLINE(  34)						min14 = ::Math_obj::floor(dy);
            					}
HXDLIN(  34)					int ii_min28 = min14;
HXDLIN(  34)					int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN(  34)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            				}
            				else {
HXLINE(  34)					int ii_min29 = ::Math_obj::floor(dy);
HXDLIN(  34)					int ii_max29 = ::Math_obj::ceil(ay);
HXDLIN(  34)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            				}
            			}
            			else {
HXLINE(  34)				if ((dy > ay)) {
HXLINE(  34)					int min15;
HXDLIN(  34)					if ((ey > ay)) {
HXLINE(  34)						min15 = ::Math_obj::floor(ay);
            					}
            					else {
HXLINE(  34)						min15 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  34)					int ii_min30 = min15;
HXDLIN(  34)					int ii_max30 = ::Math_obj::ceil(dy);
HXDLIN(  34)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            				}
            				else {
HXLINE(  34)					int ii_min31 = ::Math_obj::floor(ey);
HXDLIN(  34)					int ii_max31 = ::Math_obj::ceil(ay);
HXDLIN(  34)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            				}
            			}
HXDLIN(  34)			 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  34)			if (hasUndo3) {
HXLINE(  34)				int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  34)				int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  34)				 ::Dynamic imageType3 = null();
HXDLIN(  34)				 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  34)				if (::hx::IsNull( imageType3 )) {
HXLINE(  54)					imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  34)				::Dynamic undoImage10;
HXDLIN(  34)				switch((int)(( (int)(imageType3) ))){
            					case (int)0: {
HXLINE(  34)						 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  34)						 ::iterMagic::BytesImg b29 = byt3;
HXDLIN(  34)						{
HXLINE(  34)							b29->width = width3;
HXDLIN(  34)							b29->height = height3;
HXDLIN(  34)							b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  34)							b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN(  34)							{
HXLINE(  34)								int len6 = b29->length;
HXDLIN(  34)								int w3 = 0;
HXDLIN(  34)								{
HXLINE(  34)									int _g60 = 0;
HXDLIN(  34)									int _g61 = b29->height;
HXDLIN(  34)									while((_g60 < _g61)){
HXLINE(  34)										_g60 = (_g60 + 1);
HXDLIN(  34)										int y9 = (_g60 - 1);
HXDLIN(  34)										{
HXLINE(  34)											int _g62 = 0;
HXDLIN(  34)											int _g63 = b29->width;
HXDLIN(  34)											while((_g62 < _g63)){
HXLINE(  34)												_g62 = (_g62 + 1);
HXDLIN(  34)												int x9 = (_g62 - 1);
HXDLIN(  34)												{
HXLINE(  34)													w3 = (w3 + 1);
HXDLIN(  34)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  34)												{
HXLINE(  34)													w3 = (w3 + 1);
HXDLIN(  34)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  34)												{
HXLINE(  34)													w3 = (w3 + 1);
HXDLIN(  34)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  34)												{
HXLINE(  34)													w3 = (w3 + 1);
HXDLIN(  34)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  34)						undoImage10 = b29;
            					}
            					break;
            					case (int)1: {
HXLINE(  34)						 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  34)						 ::iterMagic::ArrIntImg a20 = arrI3;
HXDLIN(  34)						{
HXLINE(  34)							a20->width = width3;
HXDLIN(  34)							a20->height = height3;
HXDLIN(  34)							a20->data = ::Array_obj< int >::__new(0);
HXDLIN(  34)							a20->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  34)							{
HXLINE(  34)								int _g64 = 0;
HXDLIN(  34)								int _g65 = a20->length;
HXDLIN(  34)								while((_g64 < _g65)){
HXLINE(  34)									_g64 = (_g64 + 1);
HXDLIN(  34)									int i30 = (_g64 - 1);
HXDLIN(  34)									a20->data[i30] = 0;
            								}
            							}
            						}
HXDLIN(  34)						undoImage10 = a20;
            					}
            					break;
            					case (int)2: {
HXLINE(  34)						 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  34)						 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN(  34)						{
HXLINE(  34)							b30->width = width3;
HXDLIN(  34)							b30->height = height3;
HXDLIN(  34)							b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  34)							int size3 = (b30->length * 4);
HXDLIN(  34)							b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  34)							{
HXLINE(  34)								int _g66 = 0;
HXDLIN(  34)								int _g67 = b30->length;
HXDLIN(  34)								while((_g66 < _g67)){
HXLINE(  34)									_g66 = (_g66 + 1);
HXDLIN(  34)									int i31 = (_g66 - 1);
HXDLIN(  34)									{
HXLINE(  34)										 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN(  34)										bool undoImage11;
HXDLIN(  34)										if ((i31 >= 0)) {
HXLINE(  34)											undoImage11 = (i31 < (this95->byteLength >> 2));
            										}
            										else {
HXLINE(  34)											undoImage11 = false;
            										}
HXDLIN(  34)										if (undoImage11) {
HXLINE(  34)											 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN(  34)											int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN(  34)											_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  34)											_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  34)											_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  34)											_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  34)						undoImage10 = b30;
            					}
            					break;
            					case (int)3: {
HXLINE(  34)						 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  34)						 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN(  34)						{
HXLINE(  34)							v9->width = width3;
HXDLIN(  34)							v9->height = height3;
HXDLIN(  34)							v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  34)							v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  34)							{
HXLINE(  34)								int _g68 = 0;
HXDLIN(  34)								int _g69 = v9->length;
HXDLIN(  34)								while((_g68 < _g69)){
HXLINE(  34)									_g68 = (_g68 + 1);
HXDLIN(  34)									int i32 = (_g68 - 1);
HXDLIN(  34)									v9->data->__unsafe_set(i32,0);
            								}
            							}
            						}
HXDLIN(  34)						undoImage10 = v9;
            					}
            					break;
            					case (int)4: {
HXLINE(  34)						 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  34)						 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN(  34)						{
HXLINE(  34)							b31->width = width3;
HXDLIN(  34)							b31->height = height3;
HXDLIN(  34)							b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  34)							b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  34)							{
HXLINE(  34)								int len7 = b31->length;
HXDLIN(  34)								 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN(  34)								if (::hx::IsNull( d3->head )) {
HXLINE(  34)									int _g70 = 0;
HXDLIN(  34)									int _g71 = len7;
HXDLIN(  34)									while((_g70 < _g71)){
HXLINE(  34)										_g70 = (_g70 + 1);
HXDLIN(  34)										int i33 = (_g70 - 1);
HXDLIN(  34)										d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            									}
            								}
            								else {
HXLINE(  34)									int _g72 = 0;
HXDLIN(  34)									int _g73 = len7;
HXDLIN(  34)									while((_g72 < _g73)){
HXLINE(  34)										_g72 = (_g72 + 1);
HXDLIN(  34)										int i34 = (_g72 - 1);
HXDLIN(  34)										{
HXLINE(  34)											 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN(  34)											 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  34)											{
HXLINE(  34)												int _g74 = 0;
HXDLIN(  34)												int _g75 = i34;
HXDLIN(  34)												while((_g74 < _g75)){
HXLINE(  34)													_g74 = (_g74 + 1);
HXDLIN(  34)													int i35 = (_g74 - 1);
HXLINE( 345)													prev3 = l3;
HXLINE( 346)													l3 = l3->next;
            												}
            											}
HXLINE(  34)											if (::hx::IsNull( prev3 )) {
HXLINE(  34)												b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  34)												l3 = null();
            											}
            											else {
HXLINE(  34)												prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  34)												l3 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  34)						undoImage10 = b31;
            					}
            					break;
            				}
HXDLIN(  34)				this94->image = undoImage10;
HXDLIN(  34)				this94->width = width3;
HXDLIN(  34)				this94->height = height3;
HXDLIN(  34)				this94->imageType = ( (int)(imageType3) );
HXDLIN(  34)				undoImage9 = this94;
HXDLIN(  34)				{
HXLINE(  34)					int rectLeft3 = xIter33->start;
HXDLIN(  34)					int rectTop3 = yIter33->start;
HXDLIN(  34)					int rectRight3 = xIter33->max;
HXDLIN(  34)					bool forceClear3 = false;
HXDLIN(  34)					{
HXLINE(  34)						int _g76 = rectTop3;
HXDLIN(  34)						int _g77 = yIter33->max;
HXDLIN(  34)						while((_g76 < _g77)){
HXLINE(  34)							_g76 = (_g76 + 1);
HXDLIN(  34)							int dy4 = (_g76 - 1);
HXDLIN(  34)							{
HXLINE(  34)								int _g78 = rectLeft3;
HXDLIN(  34)								int _g79 = rectRight3;
HXDLIN(  34)								while((_g78 < _g79)){
HXLINE(  34)									_g78 = (_g78 + 1);
HXDLIN(  34)									int dx4 = (_g78 - 1);
HXDLIN(  34)									::Dynamic this96 = pixelImage->image;
HXDLIN(  34)									int index12;
HXDLIN(  34)									if (pixelImage->useVirtualPos) {
HXLINE(  34)										index12 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  34)										index12 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            									}
HXDLIN(  34)									int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN(  34)									int col3;
HXDLIN(  34)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)										col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            									}
            									else {
HXLINE(  34)										col3 = c9;
            									}
HXDLIN(  34)									bool _hx_tmp24;
HXDLIN(  34)									if (pixelImage->useMask) {
HXLINE(  34)										_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  34)										_hx_tmp24 = false;
            									}
HXDLIN(  34)									if (_hx_tmp24) {
HXLINE(  34)										 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN(  34)										::Dynamic this98 = this97->image;
HXDLIN(  34)										int index13;
HXDLIN(  34)										if (this97->useVirtualPos) {
HXLINE(  34)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx4) - this97->virtualX));
            										}
            										else {
HXLINE(  34)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this97->width) + dx4)) ));
            										}
HXDLIN(  34)										int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN(  34)										int v10;
HXDLIN(  34)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)											v10 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            										}
            										else {
HXLINE(  34)											v10 = c10;
            										}
HXDLIN(  34)										int maskPixel3 = v10;
HXDLIN(  34)										int this99 = col3;
HXDLIN(  34)										if ((maskPixel3 == 0)) {
HXLINE(  34)											col3 = this99;
            										}
            										else {
HXLINE(  34)											Float m03;
HXDLIN(  34)											int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN(  34)											if ((this100 == 0)) {
HXLINE(  34)												m03 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float m13;
HXDLIN(  34)											int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN(  34)											if ((this101 == 0)) {
HXLINE(  34)												m13 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float m23;
HXDLIN(  34)											int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN(  34)											if ((this102 == 0)) {
HXLINE(  34)												m23 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float m33;
HXDLIN(  34)											int this103 = (maskPixel3 & 255);
HXDLIN(  34)											if ((this103 == 0)) {
HXLINE(  34)												m33 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN(  34)											int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN(  34)											int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN(  34)											int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN(  34)											col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  34)									if ((col3 != 0)) {
HXLINE(  34)										int x10 = (dx4 - rectLeft3);
HXDLIN(  34)										int y10 = (dy4 - rectTop3);
HXDLIN(  34)										int c11 = col3;
HXDLIN(  34)										bool _hx_tmp25;
HXDLIN(  34)										if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  34)											_hx_tmp25 = undoImage9->transparent;
            										}
            										else {
HXLINE(  34)											_hx_tmp25 = false;
            										}
HXDLIN(  34)										if (_hx_tmp25) {
HXLINE(  34)											int location6;
HXDLIN(  34)											if (undoImage9->useVirtualPos) {
HXLINE(  34)												location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            											}
            											else {
HXLINE(  34)												location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            											}
HXDLIN(  34)											int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  34)											int this105;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            											}
            											else {
HXLINE(  34)												this105 = this104;
            											}
HXDLIN(  34)											Float a110;
HXDLIN(  34)											int this106 = ((this105 >> 24) & 255);
HXDLIN(  34)											if ((this106 == 0)) {
HXLINE(  34)												a110 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												a110 = (( (Float)(this106) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float r16;
HXDLIN(  34)											int this107 = ((this105 >> 16) & 255);
HXDLIN(  34)											if ((this107 == 0)) {
HXLINE(  34)												r16 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float g16;
HXDLIN(  34)											int this108 = ((this105 >> 8) & 255);
HXDLIN(  34)											if ((this108 == 0)) {
HXLINE(  34)												g16 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float b111;
HXDLIN(  34)											int this109 = (this105 & 255);
HXDLIN(  34)											if ((this109 == 0)) {
HXLINE(  34)												b111 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												b111 = (( (Float)(this109) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float a26;
HXDLIN(  34)											int this110 = ((col3 >> 24) & 255);
HXDLIN(  34)											if ((this110 == 0)) {
HXLINE(  34)												a26 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												a26 = (( (Float)(this110) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float r26;
HXDLIN(  34)											int this111 = ((col3 >> 16) & 255);
HXDLIN(  34)											if ((this111 == 0)) {
HXLINE(  34)												r26 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float g26;
HXDLIN(  34)											int this112 = ((col3 >> 8) & 255);
HXDLIN(  34)											if ((this112 == 0)) {
HXLINE(  34)												g26 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float b210;
HXDLIN(  34)											int this113 = (col3 & 255);
HXDLIN(  34)											if ((this113 == 0)) {
HXLINE(  34)												b210 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  34)											int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  34)											int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  34)											int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a26))));
HXDLIN(  34)											int a27 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  34)											int blended6 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN(  34)											{
HXLINE(  34)												int _hx_tmp26;
HXDLIN(  34)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)													_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            												}
            												else {
HXLINE(  34)													_hx_tmp26 = blended6;
            												}
HXDLIN(  34)												::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            											}
            										}
            										else {
HXLINE(  34)											::Dynamic this114 = undoImage9->image;
HXDLIN(  34)											int index14;
HXDLIN(  34)											if (undoImage9->useVirtualPos) {
HXLINE(  34)												index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            											}
            											else {
HXLINE(  34)												index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            											}
HXDLIN(  34)											int _hx_tmp27;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            											}
            											else {
HXLINE(  34)												_hx_tmp27 = c11;
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(this114,index14,_hx_tmp27);
            										}
            									}
            									else {
HXLINE(  34)										if (forceClear3) {
HXLINE(  34)											::Dynamic this115 = undoImage9->image;
HXDLIN(  34)											int x11 = (dx4 - rectLeft3);
HXDLIN(  34)											int y11 = (dy4 - rectTop3);
HXDLIN(  34)											int index15;
HXDLIN(  34)											if (undoImage9->useVirtualPos) {
HXLINE(  34)												index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            											}
            											else {
HXLINE(  34)												index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(this115,index15,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  34)			bool found3 = false;
HXDLIN(  34)			{
HXLINE(  34)				int _g_min6 = xIter33->start;
HXDLIN(  34)				int _g_max6 = xIter33->max;
HXDLIN(  34)				while((_g_min6 < _g_max6)){
HXLINE(  34)					_g_min6 = (_g_min6 + 1);
HXDLIN(  34)					int px3 = (_g_min6 - 1);
HXDLIN(  34)					Float pcx3 = (( (Float)(px3) ) - ax);
HXLINE( 619)					found3 = false;
HXLINE(  34)					{
HXLINE(  34)						int _g_min7 = yIter33->start;
HXDLIN(  34)						int _g_max7 = yIter33->max;
HXDLIN(  34)						while((_g_min7 < _g_max7)){
HXLINE(  34)							_g_min7 = (_g_min7 + 1);
HXDLIN(  34)							int py3 = (_g_min7 - 1);
HXDLIN(  34)							Float pcy3 = (( (Float)(py3) ) - ay);
HXDLIN(  34)							Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  34)							Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  34)							Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  34)							Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  34)							Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  34)							bool _hx_tmp28;
HXDLIN(  34)							bool _hx_tmp29;
HXDLIN(  34)							if ((ratioA3 >= 0)) {
HXLINE(  34)								_hx_tmp29 = (ratioB3 >= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp29 = false;
            							}
HXDLIN(  34)							if (_hx_tmp29) {
HXLINE(  34)								_hx_tmp28 = (ratioC3 >= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp28 = false;
            							}
HXDLIN(  34)							if (_hx_tmp28) {
HXLINE(  34)								int i36 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (softC * ratioB3)));
HXDLIN(  34)								if ((i36 > 255)) {
HXLINE(  24)									i36 = 255;
            								}
HXLINE(  34)								if ((i36 < 0)) {
HXLINE(  25)									i36 = 0;
            								}
HXLINE(  34)								int a28 = i36;
HXDLIN(  34)								int i37 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  34)								if ((i37 > 255)) {
HXLINE(  24)									i37 = 255;
            								}
HXLINE(  34)								if ((i37 < 0)) {
HXLINE(  25)									i37 = 0;
            								}
HXLINE(  34)								int r18 = i37;
HXDLIN(  34)								int i38 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  34)								if ((i38 > 255)) {
HXLINE(  24)									i38 = 255;
            								}
HXLINE(  34)								if ((i38 < 0)) {
HXLINE(  25)									i38 = 0;
            								}
HXLINE(  34)								int g18 = i38;
HXDLIN(  34)								int i39 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  34)								if ((i39 > 255)) {
HXLINE(  24)									i39 = 255;
            								}
HXLINE(  34)								if ((i39 < 0)) {
HXLINE(  25)									i39 = 0;
            								}
HXLINE(  34)								int b33 = i39;
HXDLIN(  34)								{
HXLINE(  34)									int location7;
HXDLIN(  34)									if (pixelImage->useVirtualPos) {
HXLINE(  34)										location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  34)										location7 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            									}
HXDLIN(  34)									bool _hx_tmp30;
HXDLIN(  34)									if (pixelImage->transparent) {
HXLINE(  34)										_hx_tmp30 = (a28 < 254);
            									}
            									else {
HXLINE(  34)										_hx_tmp30 = false;
            									}
HXDLIN(  34)									if (_hx_tmp30) {
HXLINE(  34)										int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN(  34)										int old3;
HXDLIN(  34)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)											old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            										}
            										else {
HXLINE(  34)											old3 = this116;
            										}
HXDLIN(  34)										int rhs3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN(  34)										Float a111;
HXDLIN(  34)										int this117 = ((old3 >> 24) & 255);
HXDLIN(  34)										if ((this117 == 0)) {
HXLINE(  34)											a111 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											a111 = (( (Float)(this117) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float r19;
HXDLIN(  34)										int this118 = ((old3 >> 16) & 255);
HXDLIN(  34)										if ((this118 == 0)) {
HXLINE(  34)											r19 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float g19;
HXDLIN(  34)										int this119 = ((old3 >> 8) & 255);
HXDLIN(  34)										if ((this119 == 0)) {
HXLINE(  34)											g19 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float b112;
HXDLIN(  34)										int this120 = (old3 & 255);
HXDLIN(  34)										if ((this120 == 0)) {
HXLINE(  34)											b112 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											b112 = (( (Float)(this120) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float a29;
HXDLIN(  34)										int this121 = ((rhs3 >> 24) & 255);
HXDLIN(  34)										if ((this121 == 0)) {
HXLINE(  34)											a29 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											a29 = (( (Float)(this121) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float r27;
HXDLIN(  34)										int this122 = ((rhs3 >> 16) & 255);
HXDLIN(  34)										if ((this122 == 0)) {
HXLINE(  34)											r27 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float g27;
HXDLIN(  34)										int this123 = ((rhs3 >> 8) & 255);
HXDLIN(  34)										if ((this123 == 0)) {
HXLINE(  34)											g27 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float b211;
HXDLIN(  34)										int this124 = (rhs3 & 255);
HXDLIN(  34)										if ((this124 == 0)) {
HXLINE(  34)											b211 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float a37 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  34)										int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a29))));
HXDLIN(  34)										int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a29))));
HXDLIN(  34)										int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a29))));
HXDLIN(  34)										int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a29)));
HXDLIN(  34)										int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN(  34)										{
HXLINE(  34)											int _hx_tmp31;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXLINE(  34)												_hx_tmp31 = blended7;
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp31);
            										}
            									}
            									else {
HXLINE(  34)										int value3;
HXDLIN(  34)										if (pixelImage->isLittle) {
HXLINE(  34)											value3 = ((((a28 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            										}
            										else {
HXLINE(  34)											value3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            										}
HXDLIN(  34)										::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            									}
            								}
HXLINE( 633)								found3 = true;
            							}
            							else {
HXLINE(  34)								if (found3) {
HXLINE(  34)									goto _hx_goto_47;
            								}
            							}
            						}
            						_hx_goto_47:;
            					}
            				}
            			}
HXDLIN(  34)			if ((hasHit == false)) {
HXLINE(  34)				 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,dx,dy,ax,ay,true);
HXDLIN(  34)				if (hasUndo3) {
HXLINE(  34)					v11->undoImage = undoImage9;
HXDLIN(  34)					v11->undoX = xIter33->start;
HXDLIN(  34)					v11->undoY = yIter33->start;
            				}
            			}
            		}
HXLINE(  43)		if ((hasHit == true)) {
HXLINE(  44)			 ::pi_xy::algo::HitQuad v12 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE(  45)			return v12;
            		}
            		else {
HXLINE(  47)			return null();
            		}
HXLINE(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(QuintPixel_Fields__obj,softFillQuintilateral,return )

 ::pi_xy::algo::HitQuad QuintPixel_Fields__obj::softFillQuintilateralPartial( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,int color,::hx::Null< Float >  __o_softC,::hx::Null< bool >  __o_softTop,::hx::Null< bool >  __o_softRight,::hx::Null< bool >  __o_softBottom,::hx::Null< bool >  __o_softLeft,::hx::Null< bool >  __o_hasHit){
            		Float softC = __o_softC.Default(10);
            		bool softTop = __o_softTop.Default(true);
            		bool softRight = __o_softRight.Default(true);
            		bool softBottom = __o_softBottom.Default(true);
            		bool softLeft = __o_softLeft.Default(true);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_62f087480b4d42cb_63_softFillQuintilateralPartial)
HXLINE(  66)		Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXLINE(  67)		Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXLINE(  71)		if (softTop) {
HXLINE(  72)			bool hasUndo = false;
HXDLIN(  72)			int aA = ((color >> 24) & 255);
HXDLIN(  72)			int rA = ((color >> 16) & 255);
HXDLIN(  72)			int gA = ((color >> 8) & 255);
HXDLIN(  72)			int bA = (color & 255);
HXDLIN(  72)			Float bcx = (ax - bx);
HXDLIN(  72)			Float bcy = (ay - by);
HXDLIN(  72)			Float acx = (ex - bx);
HXDLIN(  72)			Float acy = (ey - by);
HXDLIN(  72)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  72)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  72)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  72)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  72)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  72)			if ((ex > ax)) {
HXLINE(  72)				if ((ex > bx)) {
HXLINE(  72)					int min;
HXDLIN(  72)					if ((ax > bx)) {
HXLINE(  72)						min = ::Math_obj::floor(bx);
            					}
            					else {
HXLINE(  72)						min = ::Math_obj::floor(ax);
            					}
HXDLIN(  72)					int ii_min = min;
HXDLIN(  72)					int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  72)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE(  72)					int ii_min1 = ::Math_obj::floor(ax);
HXDLIN(  72)					int ii_max1 = ::Math_obj::ceil(bx);
HXDLIN(  72)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE(  72)				if ((ax > bx)) {
HXLINE(  72)					int min1;
HXDLIN(  72)					if ((ex > bx)) {
HXLINE(  72)						min1 = ::Math_obj::floor(bx);
            					}
            					else {
HXLINE(  72)						min1 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  72)					int ii_min2 = min1;
HXDLIN(  72)					int ii_max2 = ::Math_obj::ceil(ax);
HXDLIN(  72)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE(  72)					int ii_min3 = ::Math_obj::floor(ex);
HXDLIN(  72)					int ii_max3 = ::Math_obj::ceil(bx);
HXDLIN(  72)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  72)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  72)			if ((ey > ay)) {
HXLINE(  72)				if ((ey > by)) {
HXLINE(  72)					int min2;
HXDLIN(  72)					if ((ay > by)) {
HXLINE(  72)						min2 = ::Math_obj::floor(by);
            					}
            					else {
HXLINE(  72)						min2 = ::Math_obj::floor(ay);
            					}
HXDLIN(  72)					int ii_min4 = min2;
HXDLIN(  72)					int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN(  72)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE(  72)					int ii_min5 = ::Math_obj::floor(ay);
HXDLIN(  72)					int ii_max5 = ::Math_obj::ceil(by);
HXDLIN(  72)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE(  72)				if ((ay > by)) {
HXLINE(  72)					int min3;
HXDLIN(  72)					if ((ey > by)) {
HXLINE(  72)						min3 = ::Math_obj::floor(by);
            					}
            					else {
HXLINE(  72)						min3 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  72)					int ii_min6 = min3;
HXDLIN(  72)					int ii_max6 = ::Math_obj::ceil(ay);
HXDLIN(  72)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE(  72)					int ii_min7 = ::Math_obj::floor(ey);
HXDLIN(  72)					int ii_max7 = ::Math_obj::ceil(by);
HXDLIN(  72)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN(  72)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  72)			if (hasUndo) {
HXLINE(  72)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  72)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  72)				 ::Dynamic imageType = null();
HXDLIN(  72)				 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  72)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  72)				::Dynamic undoImage1;
HXDLIN(  72)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE(  72)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  72)						 ::iterMagic::BytesImg b = byt;
HXDLIN(  72)						{
HXLINE(  72)							b->width = width;
HXDLIN(  72)							b->height = height;
HXDLIN(  72)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  72)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  72)							{
HXLINE(  72)								int len = b->length;
HXDLIN(  72)								int w = 0;
HXDLIN(  72)								{
HXLINE(  72)									int _g = 0;
HXDLIN(  72)									int _g1 = b->height;
HXDLIN(  72)									while((_g < _g1)){
HXLINE(  72)										_g = (_g + 1);
HXDLIN(  72)										int y = (_g - 1);
HXDLIN(  72)										{
HXLINE(  72)											int _g2 = 0;
HXDLIN(  72)											int _g3 = b->width;
HXDLIN(  72)											while((_g2 < _g3)){
HXLINE(  72)												_g2 = (_g2 + 1);
HXDLIN(  72)												int x = (_g2 - 1);
HXDLIN(  72)												{
HXLINE(  72)													w = (w + 1);
HXDLIN(  72)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  72)												{
HXLINE(  72)													w = (w + 1);
HXDLIN(  72)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  72)												{
HXLINE(  72)													w = (w + 1);
HXDLIN(  72)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  72)												{
HXLINE(  72)													w = (w + 1);
HXDLIN(  72)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  72)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXLINE(  72)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  72)						 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  72)						{
HXLINE(  72)							a->width = width;
HXDLIN(  72)							a->height = height;
HXDLIN(  72)							a->data = ::Array_obj< int >::__new(0);
HXDLIN(  72)							a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  72)							{
HXLINE(  72)								int _g4 = 0;
HXDLIN(  72)								int _g5 = a->length;
HXDLIN(  72)								while((_g4 < _g5)){
HXLINE(  72)									_g4 = (_g4 + 1);
HXDLIN(  72)									int i = (_g4 - 1);
HXDLIN(  72)									a->data[i] = 0;
            								}
            							}
            						}
HXDLIN(  72)						undoImage1 = a;
            					}
            					break;
            					case (int)2: {
HXLINE(  72)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  72)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  72)						{
HXLINE(  72)							b1->width = width;
HXDLIN(  72)							b1->height = height;
HXDLIN(  72)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  72)							int size = (b1->length * 4);
HXDLIN(  72)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  72)							{
HXLINE(  72)								int _g6 = 0;
HXDLIN(  72)								int _g7 = b1->length;
HXDLIN(  72)								while((_g6 < _g7)){
HXLINE(  72)									_g6 = (_g6 + 1);
HXDLIN(  72)									int i1 = (_g6 - 1);
HXDLIN(  72)									{
HXLINE(  72)										 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  72)										bool undoImage2;
HXDLIN(  72)										if ((i1 >= 0)) {
HXLINE(  72)											undoImage2 = (i1 < (this2->byteLength >> 2));
            										}
            										else {
HXLINE(  72)											undoImage2 = false;
            										}
HXDLIN(  72)										if (undoImage2) {
HXLINE(  72)											 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  72)											int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  72)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  72)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  72)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  72)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  72)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXLINE(  72)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  72)						 ::iterMagic::VecIntImg v = vec;
HXDLIN(  72)						{
HXLINE(  72)							v->width = width;
HXDLIN(  72)							v->height = height;
HXDLIN(  72)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  72)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  72)							{
HXLINE(  72)								int _g8 = 0;
HXDLIN(  72)								int _g9 = v->length;
HXDLIN(  72)								while((_g8 < _g9)){
HXLINE(  72)									_g8 = (_g8 + 1);
HXDLIN(  72)									int i2 = (_g8 - 1);
HXDLIN(  72)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN(  72)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE(  72)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  72)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  72)						{
HXLINE(  72)							b2->width = width;
HXDLIN(  72)							b2->height = height;
HXDLIN(  72)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  72)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  72)							{
HXLINE(  72)								int len1 = b2->length;
HXDLIN(  72)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  72)								if (::hx::IsNull( d->head )) {
HXLINE(  72)									int _g10 = 0;
HXDLIN(  72)									int _g11 = len1;
HXDLIN(  72)									while((_g10 < _g11)){
HXLINE(  72)										_g10 = (_g10 + 1);
HXDLIN(  72)										int i3 = (_g10 - 1);
HXDLIN(  72)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE(  72)									int _g12 = 0;
HXDLIN(  72)									int _g13 = len1;
HXDLIN(  72)									while((_g12 < _g13)){
HXLINE(  72)										_g12 = (_g12 + 1);
HXDLIN(  72)										int i4 = (_g12 - 1);
HXDLIN(  72)										{
HXLINE(  72)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  72)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  72)											{
HXLINE(  72)												int _g14 = 0;
HXDLIN(  72)												int _g15 = i4;
HXDLIN(  72)												while((_g14 < _g15)){
HXLINE(  72)													_g14 = (_g14 + 1);
HXDLIN(  72)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE(  72)											if (::hx::IsNull( prev )) {
HXLINE(  72)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  72)												l = null();
            											}
            											else {
HXLINE(  72)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  72)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  72)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN(  72)				this1->image = undoImage1;
HXDLIN(  72)				this1->width = width;
HXDLIN(  72)				this1->height = height;
HXDLIN(  72)				this1->imageType = ( (int)(imageType) );
HXDLIN(  72)				undoImage = this1;
HXDLIN(  72)				{
HXLINE(  72)					int rectLeft = xIter3->start;
HXDLIN(  72)					int rectTop = yIter3->start;
HXDLIN(  72)					int rectRight = xIter3->max;
HXDLIN(  72)					bool forceClear = false;
HXDLIN(  72)					{
HXLINE(  72)						int _g16 = rectTop;
HXDLIN(  72)						int _g17 = yIter3->max;
HXDLIN(  72)						while((_g16 < _g17)){
HXLINE(  72)							_g16 = (_g16 + 1);
HXDLIN(  72)							int dy1 = (_g16 - 1);
HXDLIN(  72)							{
HXLINE(  72)								int _g18 = rectLeft;
HXDLIN(  72)								int _g19 = rectRight;
HXDLIN(  72)								while((_g18 < _g19)){
HXLINE(  72)									_g18 = (_g18 + 1);
HXDLIN(  72)									int dx1 = (_g18 - 1);
HXDLIN(  72)									::Dynamic this3 = pixelImage->image;
HXDLIN(  72)									int index;
HXDLIN(  72)									if (pixelImage->useVirtualPos) {
HXLINE(  72)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  72)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            									}
HXDLIN(  72)									int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  72)									int col;
HXDLIN(  72)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  72)										col = c;
            									}
HXDLIN(  72)									bool _hx_tmp;
HXDLIN(  72)									if (pixelImage->useMask) {
HXLINE(  72)										_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  72)										_hx_tmp = false;
            									}
HXDLIN(  72)									if (_hx_tmp) {
HXLINE(  72)										 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN(  72)										::Dynamic this5 = this4->image;
HXDLIN(  72)										int index1;
HXDLIN(  72)										if (this4->useVirtualPos) {
HXLINE(  72)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            										}
            										else {
HXLINE(  72)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            										}
HXDLIN(  72)										int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN(  72)										int v1;
HXDLIN(  72)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE(  72)											v1 = c1;
            										}
HXDLIN(  72)										int maskPixel = v1;
HXDLIN(  72)										int this6 = col;
HXDLIN(  72)										if ((maskPixel == 0)) {
HXLINE(  72)											col = this6;
            										}
            										else {
HXLINE(  72)											Float m0;
HXDLIN(  72)											int this7 = ((maskPixel >> 24) & 255);
HXDLIN(  72)											if ((this7 == 0)) {
HXLINE(  72)												m0 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float m1;
HXDLIN(  72)											int this8 = ((maskPixel >> 16) & 255);
HXDLIN(  72)											if ((this8 == 0)) {
HXLINE(  72)												m1 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float m2;
HXDLIN(  72)											int this9 = ((maskPixel >> 8) & 255);
HXDLIN(  72)											if ((this9 == 0)) {
HXLINE(  72)												m2 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float m3;
HXDLIN(  72)											int this10 = (maskPixel & 255);
HXDLIN(  72)											if ((this10 == 0)) {
HXLINE(  72)												m3 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  72)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  72)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  72)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  72)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  72)									if ((col != 0)) {
HXLINE(  72)										int x1 = (dx1 - rectLeft);
HXDLIN(  72)										int y1 = (dy1 - rectTop);
HXDLIN(  72)										int c2 = col;
HXDLIN(  72)										bool _hx_tmp1;
HXDLIN(  72)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  72)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXLINE(  72)											_hx_tmp1 = false;
            										}
HXDLIN(  72)										if (_hx_tmp1) {
HXLINE(  72)											int location;
HXDLIN(  72)											if (undoImage->useVirtualPos) {
HXLINE(  72)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE(  72)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  72)											int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  72)											int this12;
HXDLIN(  72)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)												this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            											}
            											else {
HXLINE(  72)												this12 = this11;
            											}
HXDLIN(  72)											Float a1;
HXDLIN(  72)											int this13 = ((this12 >> 24) & 255);
HXDLIN(  72)											if ((this13 == 0)) {
HXLINE(  72)												a1 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												a1 = (( (Float)(this13) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float r1;
HXDLIN(  72)											int this14 = ((this12 >> 16) & 255);
HXDLIN(  72)											if ((this14 == 0)) {
HXLINE(  72)												r1 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float g1;
HXDLIN(  72)											int this15 = ((this12 >> 8) & 255);
HXDLIN(  72)											if ((this15 == 0)) {
HXLINE(  72)												g1 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float b11;
HXDLIN(  72)											int this16 = (this12 & 255);
HXDLIN(  72)											if ((this16 == 0)) {
HXLINE(  72)												b11 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float a2;
HXDLIN(  72)											int this17 = ((col >> 24) & 255);
HXDLIN(  72)											if ((this17 == 0)) {
HXLINE(  72)												a2 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float r2;
HXDLIN(  72)											int this18 = ((col >> 16) & 255);
HXDLIN(  72)											if ((this18 == 0)) {
HXLINE(  72)												r2 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float g2;
HXDLIN(  72)											int this19 = ((col >> 8) & 255);
HXDLIN(  72)											if ((this19 == 0)) {
HXLINE(  72)												g2 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float b21;
HXDLIN(  72)											int this20 = (col & 255);
HXDLIN(  72)											if ((this20 == 0)) {
HXLINE(  72)												b21 = ((Float)0.);
            											}
            											else {
HXLINE(  72)												b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN(  72)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  72)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  72)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  72)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  72)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  72)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  72)											{
HXLINE(  72)												int _hx_tmp2;
HXDLIN(  72)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE(  72)													_hx_tmp2 = blended;
            												}
HXDLIN(  72)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXLINE(  72)											::Dynamic this21 = undoImage->image;
HXDLIN(  72)											int index2;
HXDLIN(  72)											if (undoImage->useVirtualPos) {
HXLINE(  72)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE(  72)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  72)											int _hx_tmp3;
HXDLIN(  72)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE(  72)												_hx_tmp3 = c2;
            											}
HXDLIN(  72)											::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            										}
            									}
            									else {
HXLINE(  72)										if (forceClear) {
HXLINE(  72)											::Dynamic this22 = undoImage->image;
HXDLIN(  72)											int x2 = (dx1 - rectLeft);
HXDLIN(  72)											int y2 = (dy1 - rectTop);
HXDLIN(  72)											int index3;
HXDLIN(  72)											if (undoImage->useVirtualPos) {
HXLINE(  72)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXLINE(  72)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN(  72)											::iterMagic::Iimg_obj::set(this22,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  72)			bool found = false;
HXDLIN(  72)			{
HXLINE(  72)				int _g_min = xIter3->start;
HXDLIN(  72)				int _g_max = xIter3->max;
HXDLIN(  72)				while((_g_min < _g_max)){
HXLINE(  72)					_g_min = (_g_min + 1);
HXDLIN(  72)					int px = (_g_min - 1);
HXDLIN(  72)					Float pcx = (( (Float)(px) ) - bx);
HXLINE( 619)					found = false;
HXLINE(  72)					{
HXLINE(  72)						int _g_min1 = yIter3->start;
HXDLIN(  72)						int _g_max1 = yIter3->max;
HXDLIN(  72)						while((_g_min1 < _g_max1)){
HXLINE(  72)							_g_min1 = (_g_min1 + 1);
HXDLIN(  72)							int py = (_g_min1 - 1);
HXDLIN(  72)							Float pcy = (( (Float)(py) ) - by);
HXDLIN(  72)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  72)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  72)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  72)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  72)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  72)							bool _hx_tmp4;
HXDLIN(  72)							bool _hx_tmp5;
HXDLIN(  72)							if ((ratioA >= 0)) {
HXLINE(  72)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXLINE(  72)								_hx_tmp5 = false;
            							}
HXDLIN(  72)							if (_hx_tmp5) {
HXLINE(  72)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXLINE(  72)								_hx_tmp4 = false;
            							}
HXDLIN(  72)							if (_hx_tmp4) {
HXLINE(  72)								int i6 = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN(  72)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE(  72)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE(  72)								int a5 = i6;
HXDLIN(  72)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  72)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE(  72)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE(  72)								int r3 = i7;
HXDLIN(  72)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  72)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE(  72)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE(  72)								int g3 = i8;
HXDLIN(  72)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  72)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE(  72)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE(  72)								int b4 = i9;
HXDLIN(  72)								{
HXLINE(  72)									int location1;
HXDLIN(  72)									if (pixelImage->useVirtualPos) {
HXLINE(  72)										location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  72)										location1 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            									}
HXDLIN(  72)									bool _hx_tmp6;
HXDLIN(  72)									if (pixelImage->transparent) {
HXLINE(  72)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXLINE(  72)										_hx_tmp6 = false;
            									}
HXDLIN(  72)									if (_hx_tmp6) {
HXLINE(  72)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  72)										int old;
HXDLIN(  72)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE(  72)											old = this23;
            										}
HXDLIN(  72)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  72)										Float a11;
HXDLIN(  72)										int this24 = ((old >> 24) & 255);
HXDLIN(  72)										if ((this24 == 0)) {
HXLINE(  72)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											a11 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float r11;
HXDLIN(  72)										int this25 = ((old >> 16) & 255);
HXDLIN(  72)										if ((this25 == 0)) {
HXLINE(  72)											r11 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float g11;
HXDLIN(  72)										int this26 = ((old >> 8) & 255);
HXDLIN(  72)										if ((this26 == 0)) {
HXLINE(  72)											g11 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float b12;
HXDLIN(  72)										int this27 = (old & 255);
HXDLIN(  72)										if ((this27 == 0)) {
HXLINE(  72)											b12 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float a21;
HXDLIN(  72)										int this28 = ((rhs >> 24) & 255);
HXDLIN(  72)										if ((this28 == 0)) {
HXLINE(  72)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float r21;
HXDLIN(  72)										int this29 = ((rhs >> 16) & 255);
HXDLIN(  72)										if ((this29 == 0)) {
HXLINE(  72)											r21 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float g21;
HXDLIN(  72)										int this30 = ((rhs >> 8) & 255);
HXDLIN(  72)										if ((this30 == 0)) {
HXLINE(  72)											g21 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float b22;
HXDLIN(  72)										int this31 = (rhs & 255);
HXDLIN(  72)										if ((this31 == 0)) {
HXLINE(  72)											b22 = ((Float)0.);
            										}
            										else {
HXLINE(  72)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  72)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  72)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  72)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  72)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  72)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  72)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  72)										{
HXLINE(  72)											int _hx_tmp7;
HXDLIN(  72)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE(  72)												_hx_tmp7 = blended1;
            											}
HXDLIN(  72)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE(  72)										int value;
HXDLIN(  72)										if (pixelImage->isLittle) {
HXLINE(  72)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXLINE(  72)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN(  72)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
HXLINE( 633)								found = true;
            							}
            							else {
HXLINE(  72)								if (found) {
HXLINE(  72)									goto _hx_goto_60;
            								}
            							}
            						}
            						_hx_goto_60:;
            					}
            				}
            			}
HXDLIN(  72)			{
HXLINE(  72)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,ax,ay,bx,by,true);
HXDLIN(  72)				if (hasUndo) {
HXLINE(  72)					v2->undoImage = undoImage;
HXDLIN(  72)					v2->undoX = xIter3->start;
HXDLIN(  72)					v2->undoY = yIter3->start;
            				}
            			}
            		}
            		else {
HXLINE(  74)			Float bx1 = ax;
HXDLIN(  74)			Float by1 = ay;
HXDLIN(  74)			Float cx1 = bx;
HXDLIN(  74)			Float cy1 = by;
HXDLIN(  74)			bool hasUndo1 = false;
HXDLIN(  74)			bool adjustWinding = (((((ex * by1) - (bx1 * ey)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ey) - (ex * cy1))) > 0);
HXDLIN(  74)			if (!(adjustWinding)) {
HXLINE(  74)				Float bx_ = bx1;
HXDLIN(  74)				Float by_ = by1;
HXLINE(  25)				bx1 = cx1;
HXLINE(  26)				by1 = cy1;
HXLINE(  27)				cx1 = bx_;
HXLINE(  28)				cy1 = by_;
            			}
HXLINE(  74)			{
HXLINE(  74)				Float s0 = ((ey * cx1) - (ex * cy1));
HXDLIN(  74)				Float sx = (cy1 - ey);
HXDLIN(  74)				Float sy = (ex - cx1);
HXDLIN(  74)				Float t0 = ((ex * by1) - (ey * bx1));
HXDLIN(  74)				Float tx = (ey - by1);
HXDLIN(  74)				Float ty = (bx1 - ex);
HXDLIN(  74)				Float A = ((((-(by1) * cx1) + (ey * (-(bx1) + cx1))) + (ex * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  74)				 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  74)				if ((ex > bx1)) {
HXLINE(  74)					if ((ex > cx1)) {
HXLINE(  74)						int min4;
HXDLIN(  74)						if ((bx1 > cx1)) {
HXLINE(  74)							min4 = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE(  74)							min4 = ::Math_obj::floor(bx1);
            						}
HXDLIN(  74)						int ii_min8 = min4;
HXDLIN(  74)						int ii_max8 = ::Math_obj::ceil(ex);
HXDLIN(  74)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            					}
            					else {
HXLINE(  74)						int ii_min9 = ::Math_obj::floor(bx1);
HXDLIN(  74)						int ii_max9 = ::Math_obj::ceil(cx1);
HXDLIN(  74)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            					}
            				}
            				else {
HXLINE(  74)					if ((bx1 > cx1)) {
HXLINE(  74)						int min5;
HXDLIN(  74)						if ((ex > cx1)) {
HXLINE(  74)							min5 = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE(  74)							min5 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  74)						int ii_min10 = min5;
HXDLIN(  74)						int ii_max10 = ::Math_obj::ceil(bx1);
HXDLIN(  74)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            					}
            					else {
HXLINE(  74)						int ii_min11 = ::Math_obj::floor(ex);
HXDLIN(  74)						int ii_max11 = ::Math_obj::ceil(cx1);
HXDLIN(  74)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            					}
            				}
HXDLIN(  74)				 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  74)				if ((ey > by1)) {
HXLINE(  74)					if ((ey > cy1)) {
HXLINE(  74)						int min6;
HXDLIN(  74)						if ((by1 > cy1)) {
HXLINE(  74)							min6 = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE(  74)							min6 = ::Math_obj::floor(by1);
            						}
HXDLIN(  74)						int ii_min12 = min6;
HXDLIN(  74)						int ii_max12 = ::Math_obj::ceil(ey);
HXDLIN(  74)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            					}
            					else {
HXLINE(  74)						int ii_min13 = ::Math_obj::floor(by1);
HXDLIN(  74)						int ii_max13 = ::Math_obj::ceil(cy1);
HXDLIN(  74)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            					}
            				}
            				else {
HXLINE(  74)					if ((by1 > cy1)) {
HXLINE(  74)						int min7;
HXDLIN(  74)						if ((ey > cy1)) {
HXLINE(  74)							min7 = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE(  74)							min7 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  74)						int ii_min14 = min7;
HXDLIN(  74)						int ii_max14 = ::Math_obj::ceil(by1);
HXDLIN(  74)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            					}
            					else {
HXLINE(  74)						int ii_min15 = ::Math_obj::floor(ey);
HXDLIN(  74)						int ii_max15 = ::Math_obj::ceil(cy1);
HXDLIN(  74)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            					}
            				}
HXDLIN(  74)				 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  74)				if (hasUndo1) {
HXLINE(  74)					int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  74)					int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  74)					 ::Dynamic imageType1 = null();
HXDLIN(  74)					 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  74)					if (::hx::IsNull( imageType1 )) {
HXLINE(  54)						imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  74)					::Dynamic undoImage4;
HXDLIN(  74)					switch((int)(( (int)(imageType1) ))){
            						case (int)0: {
HXLINE(  74)							 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  74)							 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  74)							{
HXLINE(  74)								b6->width = width1;
HXDLIN(  74)								b6->height = height1;
HXDLIN(  74)								b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  74)								b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  74)								{
HXLINE(  74)									int len2 = b6->length;
HXDLIN(  74)									int w1 = 0;
HXDLIN(  74)									{
HXLINE(  74)										int _g20 = 0;
HXDLIN(  74)										int _g21 = b6->height;
HXDLIN(  74)										while((_g20 < _g21)){
HXLINE(  74)											_g20 = (_g20 + 1);
HXDLIN(  74)											int y3 = (_g20 - 1);
HXDLIN(  74)											{
HXLINE(  74)												int _g22 = 0;
HXDLIN(  74)												int _g23 = b6->width;
HXDLIN(  74)												while((_g22 < _g23)){
HXLINE(  74)													_g22 = (_g22 + 1);
HXDLIN(  74)													int x3 = (_g22 - 1);
HXDLIN(  74)													{
HXLINE(  74)														w1 = (w1 + 1);
HXDLIN(  74)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  74)													{
HXLINE(  74)														w1 = (w1 + 1);
HXDLIN(  74)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  74)													{
HXLINE(  74)														w1 = (w1 + 1);
HXDLIN(  74)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  74)													{
HXLINE(  74)														w1 = (w1 + 1);
HXDLIN(  74)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  74)							undoImage4 = b6;
            						}
            						break;
            						case (int)1: {
HXLINE(  74)							 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  74)							 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  74)							{
HXLINE(  74)								a7->width = width1;
HXDLIN(  74)								a7->height = height1;
HXDLIN(  74)								a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  74)								a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  74)								{
HXLINE(  74)									int _g24 = 0;
HXDLIN(  74)									int _g25 = a7->length;
HXDLIN(  74)									while((_g24 < _g25)){
HXLINE(  74)										_g24 = (_g24 + 1);
HXDLIN(  74)										int i10 = (_g24 - 1);
HXDLIN(  74)										a7->data[i10] = 0;
            									}
            								}
            							}
HXDLIN(  74)							undoImage4 = a7;
            						}
            						break;
            						case (int)2: {
HXLINE(  74)							 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  74)							 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  74)							{
HXLINE(  74)								b7->width = width1;
HXDLIN(  74)								b7->height = height1;
HXDLIN(  74)								b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  74)								int size1 = (b7->length * 4);
HXDLIN(  74)								b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  74)								{
HXLINE(  74)									int _g26 = 0;
HXDLIN(  74)									int _g27 = b7->length;
HXDLIN(  74)									while((_g26 < _g27)){
HXLINE(  74)										_g26 = (_g26 + 1);
HXDLIN(  74)										int i11 = (_g26 - 1);
HXDLIN(  74)										{
HXLINE(  74)											 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN(  74)											bool undoImage5;
HXDLIN(  74)											if ((i11 >= 0)) {
HXLINE(  74)												undoImage5 = (i11 < (this33->byteLength >> 2));
            											}
            											else {
HXLINE(  74)												undoImage5 = false;
            											}
HXDLIN(  74)											if (undoImage5) {
HXLINE(  74)												 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN(  74)												int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN(  74)												_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  74)												_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  74)												_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  74)												_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  74)							undoImage4 = b7;
            						}
            						break;
            						case (int)3: {
HXLINE(  74)							 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  74)							 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  74)							{
HXLINE(  74)								v3->width = width1;
HXDLIN(  74)								v3->height = height1;
HXDLIN(  74)								v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  74)								v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  74)								{
HXLINE(  74)									int _g28 = 0;
HXDLIN(  74)									int _g29 = v3->length;
HXDLIN(  74)									while((_g28 < _g29)){
HXLINE(  74)										_g28 = (_g28 + 1);
HXDLIN(  74)										int i12 = (_g28 - 1);
HXDLIN(  74)										v3->data->__unsafe_set(i12,0);
            									}
            								}
            							}
HXDLIN(  74)							undoImage4 = v3;
            						}
            						break;
            						case (int)4: {
HXLINE(  74)							 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  74)							 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  74)							{
HXLINE(  74)								b8->width = width1;
HXDLIN(  74)								b8->height = height1;
HXDLIN(  74)								b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  74)								b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  74)								{
HXLINE(  74)									int len3 = b8->length;
HXDLIN(  74)									 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  74)									if (::hx::IsNull( d1->head )) {
HXLINE(  74)										int _g30 = 0;
HXDLIN(  74)										int _g31 = len3;
HXDLIN(  74)										while((_g30 < _g31)){
HXLINE(  74)											_g30 = (_g30 + 1);
HXDLIN(  74)											int i13 = (_g30 - 1);
HXDLIN(  74)											d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            										}
            									}
            									else {
HXLINE(  74)										int _g32 = 0;
HXDLIN(  74)										int _g33 = len3;
HXDLIN(  74)										while((_g32 < _g33)){
HXLINE(  74)											_g32 = (_g32 + 1);
HXDLIN(  74)											int i14 = (_g32 - 1);
HXDLIN(  74)											{
HXLINE(  74)												 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  74)												 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  74)												{
HXLINE(  74)													int _g34 = 0;
HXDLIN(  74)													int _g35 = i14;
HXDLIN(  74)													while((_g34 < _g35)){
HXLINE(  74)														_g34 = (_g34 + 1);
HXDLIN(  74)														int i15 = (_g34 - 1);
HXLINE( 345)														prev1 = l1;
HXLINE( 346)														l1 = l1->next;
            													}
            												}
HXLINE(  74)												if (::hx::IsNull( prev1 )) {
HXLINE(  74)													b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  74)													l1 = null();
            												}
            												else {
HXLINE(  74)													prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  74)													l1 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  74)							undoImage4 = b8;
            						}
            						break;
            					}
HXDLIN(  74)					this32->image = undoImage4;
HXDLIN(  74)					this32->width = width1;
HXDLIN(  74)					this32->height = height1;
HXDLIN(  74)					this32->imageType = ( (int)(imageType1) );
HXDLIN(  74)					undoImage3 = this32;
HXDLIN(  74)					{
HXLINE(  74)						int rectLeft1 = xIter31->start;
HXDLIN(  74)						int rectTop1 = yIter31->start;
HXDLIN(  74)						int rectRight1 = xIter31->max;
HXDLIN(  74)						bool forceClear1 = false;
HXDLIN(  74)						{
HXLINE(  74)							int _g36 = rectTop1;
HXDLIN(  74)							int _g37 = yIter31->max;
HXDLIN(  74)							while((_g36 < _g37)){
HXLINE(  74)								_g36 = (_g36 + 1);
HXDLIN(  74)								int dy2 = (_g36 - 1);
HXDLIN(  74)								{
HXLINE(  74)									int _g38 = rectLeft1;
HXDLIN(  74)									int _g39 = rectRight1;
HXDLIN(  74)									while((_g38 < _g39)){
HXLINE(  74)										_g38 = (_g38 + 1);
HXDLIN(  74)										int dx2 = (_g38 - 1);
HXDLIN(  74)										::Dynamic this34 = pixelImage->image;
HXDLIN(  74)										int index4;
HXDLIN(  74)										if (pixelImage->useVirtualPos) {
HXLINE(  74)											index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  74)											index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            										}
HXDLIN(  74)										int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN(  74)										int col1;
HXDLIN(  74)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)											col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            										}
            										else {
HXLINE(  74)											col1 = c3;
            										}
HXDLIN(  74)										bool _hx_tmp8;
HXDLIN(  74)										if (pixelImage->useMask) {
HXLINE(  74)											_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  74)											_hx_tmp8 = false;
            										}
HXDLIN(  74)										if (_hx_tmp8) {
HXLINE(  74)											 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN(  74)											::Dynamic this36 = this35->image;
HXDLIN(  74)											int index5;
HXDLIN(  74)											if (this35->useVirtualPos) {
HXLINE(  74)												index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            											}
            											else {
HXLINE(  74)												index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            											}
HXDLIN(  74)											int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN(  74)											int v4;
HXDLIN(  74)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)												v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            											}
            											else {
HXLINE(  74)												v4 = c4;
            											}
HXDLIN(  74)											int maskPixel1 = v4;
HXDLIN(  74)											int this37 = col1;
HXDLIN(  74)											if ((maskPixel1 == 0)) {
HXLINE(  74)												col1 = this37;
            											}
            											else {
HXLINE(  74)												Float m01;
HXDLIN(  74)												int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN(  74)												if ((this38 == 0)) {
HXLINE(  74)													m01 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float m11;
HXDLIN(  74)												int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN(  74)												if ((this39 == 0)) {
HXLINE(  74)													m11 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float m21;
HXDLIN(  74)												int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN(  74)												if ((this40 == 0)) {
HXLINE(  74)													m21 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float m31;
HXDLIN(  74)												int this41 = (maskPixel1 & 255);
HXDLIN(  74)												if ((this41 == 0)) {
HXLINE(  74)													m31 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN(  74)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN(  74)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN(  74)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN(  74)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  74)										if ((col1 != 0)) {
HXLINE(  74)											int x4 = (dx2 - rectLeft1);
HXDLIN(  74)											int y4 = (dy2 - rectTop1);
HXDLIN(  74)											int c5 = col1;
HXDLIN(  74)											bool _hx_tmp9;
HXDLIN(  74)											if ((((c5 >> 24) & 255) < 254)) {
HXLINE(  74)												_hx_tmp9 = undoImage3->transparent;
            											}
            											else {
HXLINE(  74)												_hx_tmp9 = false;
            											}
HXDLIN(  74)											if (_hx_tmp9) {
HXLINE(  74)												int location2;
HXDLIN(  74)												if (undoImage3->useVirtualPos) {
HXLINE(  74)													location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  74)													location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            												}
HXDLIN(  74)												int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  74)												int this43;
HXDLIN(  74)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)													this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            												}
            												else {
HXLINE(  74)													this43 = this42;
            												}
HXDLIN(  74)												Float a12;
HXDLIN(  74)												int this44 = ((this43 >> 24) & 255);
HXDLIN(  74)												if ((this44 == 0)) {
HXLINE(  74)													a12 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													a12 = (( (Float)(this44) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float r12;
HXDLIN(  74)												int this45 = ((this43 >> 16) & 255);
HXDLIN(  74)												if ((this45 == 0)) {
HXLINE(  74)													r12 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float g12;
HXDLIN(  74)												int this46 = ((this43 >> 8) & 255);
HXDLIN(  74)												if ((this46 == 0)) {
HXLINE(  74)													g12 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float b13;
HXDLIN(  74)												int this47 = (this43 & 255);
HXDLIN(  74)												if ((this47 == 0)) {
HXLINE(  74)													b13 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float a22;
HXDLIN(  74)												int this48 = ((col1 >> 24) & 255);
HXDLIN(  74)												if ((this48 == 0)) {
HXLINE(  74)													a22 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float r22;
HXDLIN(  74)												int this49 = ((col1 >> 16) & 255);
HXDLIN(  74)												if ((this49 == 0)) {
HXLINE(  74)													r22 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float g22;
HXDLIN(  74)												int this50 = ((col1 >> 8) & 255);
HXDLIN(  74)												if ((this50 == 0)) {
HXLINE(  74)													g22 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float b23;
HXDLIN(  74)												int this51 = (col1 & 255);
HXDLIN(  74)												if ((this51 == 0)) {
HXLINE(  74)													b23 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  74)												int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  74)												int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  74)												int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  74)												int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  74)												int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  74)												{
HXLINE(  74)													int _hx_tmp10;
HXDLIN(  74)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)														_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            													}
            													else {
HXLINE(  74)														_hx_tmp10 = blended2;
            													}
HXDLIN(  74)													::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            												}
            											}
            											else {
HXLINE(  74)												::Dynamic this52 = undoImage3->image;
HXDLIN(  74)												int index6;
HXDLIN(  74)												if (undoImage3->useVirtualPos) {
HXLINE(  74)													index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  74)													index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            												}
HXDLIN(  74)												int _hx_tmp11;
HXDLIN(  74)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)													_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            												}
            												else {
HXLINE(  74)													_hx_tmp11 = c5;
            												}
HXDLIN(  74)												::iterMagic::Iimg_obj::set(this52,index6,_hx_tmp11);
            											}
            										}
            										else {
HXLINE(  74)											if (forceClear1) {
HXLINE(  74)												::Dynamic this53 = undoImage3->image;
HXDLIN(  74)												int x5 = (dx2 - rectLeft1);
HXDLIN(  74)												int y5 = (dy2 - rectTop1);
HXDLIN(  74)												int index7;
HXDLIN(  74)												if (undoImage3->useVirtualPos) {
HXLINE(  74)													index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  74)													index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  74)												::iterMagic::Iimg_obj::set(this53,index7,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  74)				bool found1 = false;
HXDLIN(  74)				Float s = ((Float)0.);
HXDLIN(  74)				Float t = ((Float)0.);
HXDLIN(  74)				Float sxx = ((Float)0.);
HXDLIN(  74)				Float txx = ((Float)0.);
HXDLIN(  74)				{
HXLINE(  74)					int _g_min2 = xIter31->start;
HXDLIN(  74)					int _g_max2 = xIter31->max;
HXDLIN(  74)					while((_g_min2 < _g_max2)){
HXLINE(  74)						_g_min2 = (_g_min2 + 1);
HXDLIN(  74)						int x6 = (_g_min2 - 1);
HXLINE(  60)						sxx = (sx * ( (Float)(x6) ));
HXLINE(  61)						txx = (tx * ( (Float)(x6) ));
HXLINE(  62)						found1 = false;
HXLINE(  74)						{
HXLINE(  74)							int _g_min3 = yIter31->start;
HXDLIN(  74)							int _g_max3 = yIter31->max;
HXDLIN(  74)							while((_g_min3 < _g_max3)){
HXLINE(  74)								_g_min3 = (_g_min3 + 1);
HXDLIN(  74)								int y6 = (_g_min3 - 1);
HXLINE(  64)								s = ((s0 + sxx) + (sy * ( (Float)(y6) )));
HXLINE(  65)								t = ((t0 + txx) + (ty * ( (Float)(y6) )));
HXLINE(  74)								bool _hx_tmp12;
HXDLIN(  74)								if (!((s <= 0))) {
HXLINE(  74)									_hx_tmp12 = (t <= 0);
            								}
            								else {
HXLINE(  74)									_hx_tmp12 = true;
            								}
HXDLIN(  74)								if (_hx_tmp12) {
HXLINE(  74)									if (found1) {
HXLINE(  74)										goto _hx_goto_72;
            									}
            								}
            								else {
HXLINE(  74)									if (((s + t) < A)) {
HXLINE(  74)										{
HXLINE(  74)											int c6 = color;
HXDLIN(  74)											bool _hx_tmp13;
HXDLIN(  74)											if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  74)												_hx_tmp13 = pixelImage->transparent;
            											}
            											else {
HXLINE(  74)												_hx_tmp13 = false;
            											}
HXDLIN(  74)											if (_hx_tmp13) {
HXLINE(  74)												int location3;
HXDLIN(  74)												if (pixelImage->useVirtualPos) {
HXLINE(  74)													location3 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  74)													location3 = ::Std_obj::_hx_int(( (Float)(((y6 * pixelImage->width) + x6)) ));
            												}
HXDLIN(  74)												int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  74)												int this55;
HXDLIN(  74)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)													this55 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            												}
            												else {
HXLINE(  74)													this55 = this54;
            												}
HXDLIN(  74)												Float a13;
HXDLIN(  74)												int this56 = ((this55 >> 24) & 255);
HXDLIN(  74)												if ((this56 == 0)) {
HXLINE(  74)													a13 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													a13 = (( (Float)(this56) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float r13;
HXDLIN(  74)												int this57 = ((this55 >> 16) & 255);
HXDLIN(  74)												if ((this57 == 0)) {
HXLINE(  74)													r13 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float g13;
HXDLIN(  74)												int this58 = ((this55 >> 8) & 255);
HXDLIN(  74)												if ((this58 == 0)) {
HXLINE(  74)													g13 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float b14;
HXDLIN(  74)												int this59 = (this55 & 255);
HXDLIN(  74)												if ((this59 == 0)) {
HXLINE(  74)													b14 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float a23;
HXDLIN(  74)												int this60 = ((color >> 24) & 255);
HXDLIN(  74)												if ((this60 == 0)) {
HXLINE(  74)													a23 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float r23;
HXDLIN(  74)												int this61 = ((color >> 16) & 255);
HXDLIN(  74)												if ((this61 == 0)) {
HXLINE(  74)													r23 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float g23;
HXDLIN(  74)												int this62 = ((color >> 8) & 255);
HXDLIN(  74)												if ((this62 == 0)) {
HXLINE(  74)													g23 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float b24;
HXDLIN(  74)												int this63 = (color & 255);
HXDLIN(  74)												if ((this63 == 0)) {
HXLINE(  74)													b24 = ((Float)0.);
            												}
            												else {
HXLINE(  74)													b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN(  74)												Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  74)												int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  74)												int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  74)												int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  74)												int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  74)												int blended3 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  74)												{
HXLINE(  74)													int _hx_tmp14;
HXDLIN(  74)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)														_hx_tmp14 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE(  74)														_hx_tmp14 = blended3;
            													}
HXDLIN(  74)													::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp14);
            												}
            											}
            											else {
HXLINE(  74)												::Dynamic this64 = pixelImage->image;
HXDLIN(  74)												int index8;
HXDLIN(  74)												if (pixelImage->useVirtualPos) {
HXLINE(  74)													index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  74)													index8 = ::Std_obj::_hx_int(( (Float)(((y6 * pixelImage->width) + x6)) ));
            												}
HXDLIN(  74)												int _hx_tmp15;
HXDLIN(  74)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)													_hx_tmp15 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            												}
            												else {
HXLINE(  74)													_hx_tmp15 = c6;
            												}
HXDLIN(  74)												::iterMagic::Iimg_obj::set(this64,index8,_hx_tmp15);
            											}
            										}
HXLINE(  73)										found1 = true;
            									}
            									else {
HXLINE(  74)										if (found1) {
HXLINE(  74)											goto _hx_goto_72;
            										}
            									}
            								}
            							}
            							_hx_goto_72:;
            						}
            					}
            				}
            			}
            		}
HXLINE(  77)		if (softRight) {
HXLINE(  78)			bool hasUndo2 = false;
HXDLIN(  78)			int aA1 = ((color >> 24) & 255);
HXDLIN(  78)			int rA1 = ((color >> 16) & 255);
HXDLIN(  78)			int gA1 = ((color >> 8) & 255);
HXDLIN(  78)			int bA1 = (color & 255);
HXDLIN(  78)			Float bcx1 = (bx - cx);
HXDLIN(  78)			Float bcy1 = (by - cy);
HXDLIN(  78)			Float acx1 = (ex - cx);
HXDLIN(  78)			Float acy1 = (ey - cy);
HXDLIN(  78)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  78)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  78)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  78)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  78)			 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  78)			if ((ex > bx)) {
HXLINE(  78)				if ((ex > cx)) {
HXLINE(  78)					int min8;
HXDLIN(  78)					if ((bx > cx)) {
HXLINE(  78)						min8 = ::Math_obj::floor(cx);
            					}
            					else {
HXLINE(  78)						min8 = ::Math_obj::floor(bx);
            					}
HXDLIN(  78)					int ii_min16 = min8;
HXDLIN(  78)					int ii_max16 = ::Math_obj::ceil(ex);
HXDLIN(  78)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE(  78)					int ii_min17 = ::Math_obj::floor(bx);
HXDLIN(  78)					int ii_max17 = ::Math_obj::ceil(cx);
HXDLIN(  78)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE(  78)				if ((bx > cx)) {
HXLINE(  78)					int min9;
HXDLIN(  78)					if ((ex > cx)) {
HXLINE(  78)						min9 = ::Math_obj::floor(cx);
            					}
            					else {
HXLINE(  78)						min9 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  78)					int ii_min18 = min9;
HXDLIN(  78)					int ii_max18 = ::Math_obj::ceil(bx);
HXDLIN(  78)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE(  78)					int ii_min19 = ::Math_obj::floor(ex);
HXDLIN(  78)					int ii_max19 = ::Math_obj::ceil(cx);
HXDLIN(  78)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN(  78)			 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  78)			if ((ey > by)) {
HXLINE(  78)				if ((ey > cy)) {
HXLINE(  78)					int min10;
HXDLIN(  78)					if ((by > cy)) {
HXLINE(  78)						min10 = ::Math_obj::floor(cy);
            					}
            					else {
HXLINE(  78)						min10 = ::Math_obj::floor(by);
            					}
HXDLIN(  78)					int ii_min20 = min10;
HXDLIN(  78)					int ii_max20 = ::Math_obj::ceil(ey);
HXDLIN(  78)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE(  78)					int ii_min21 = ::Math_obj::floor(by);
HXDLIN(  78)					int ii_max21 = ::Math_obj::ceil(cy);
HXDLIN(  78)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE(  78)				if ((by > cy)) {
HXLINE(  78)					int min11;
HXDLIN(  78)					if ((ey > cy)) {
HXLINE(  78)						min11 = ::Math_obj::floor(cy);
            					}
            					else {
HXLINE(  78)						min11 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  78)					int ii_min22 = min11;
HXDLIN(  78)					int ii_max22 = ::Math_obj::ceil(by);
HXDLIN(  78)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE(  78)					int ii_min23 = ::Math_obj::floor(ey);
HXDLIN(  78)					int ii_max23 = ::Math_obj::ceil(cy);
HXDLIN(  78)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
HXDLIN(  78)			 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  78)			if (hasUndo2) {
HXLINE(  78)				int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  78)				int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  78)				 ::Dynamic imageType2 = null();
HXDLIN(  78)				 ::pi_xy::ImageStruct this65 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  78)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  78)				::Dynamic undoImage7;
HXDLIN(  78)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXLINE(  78)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  78)						 ::iterMagic::BytesImg b15 = byt2;
HXDLIN(  78)						{
HXLINE(  78)							b15->width = width2;
HXDLIN(  78)							b15->height = height2;
HXDLIN(  78)							b15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  78)							b15->data = ::haxe::io::Bytes_obj::alloc((b15->length * 4));
HXDLIN(  78)							{
HXLINE(  78)								int len4 = b15->length;
HXDLIN(  78)								int w2 = 0;
HXDLIN(  78)								{
HXLINE(  78)									int _g40 = 0;
HXDLIN(  78)									int _g41 = b15->height;
HXDLIN(  78)									while((_g40 < _g41)){
HXLINE(  78)										_g40 = (_g40 + 1);
HXDLIN(  78)										int y7 = (_g40 - 1);
HXDLIN(  78)										{
HXLINE(  78)											int _g42 = 0;
HXDLIN(  78)											int _g43 = b15->width;
HXDLIN(  78)											while((_g42 < _g43)){
HXLINE(  78)												_g42 = (_g42 + 1);
HXDLIN(  78)												int x7 = (_g42 - 1);
HXDLIN(  78)												{
HXLINE(  78)													w2 = (w2 + 1);
HXDLIN(  78)													b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  78)												{
HXLINE(  78)													w2 = (w2 + 1);
HXDLIN(  78)													b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  78)												{
HXLINE(  78)													w2 = (w2 + 1);
HXDLIN(  78)													b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  78)												{
HXLINE(  78)													w2 = (w2 + 1);
HXDLIN(  78)													b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  78)						undoImage7 = b15;
            					}
            					break;
            					case (int)1: {
HXLINE(  78)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)						 ::iterMagic::ArrIntImg a10 = arrI2;
HXDLIN(  78)						{
HXLINE(  78)							a10->width = width2;
HXDLIN(  78)							a10->height = height2;
HXDLIN(  78)							a10->data = ::Array_obj< int >::__new(0);
HXDLIN(  78)							a10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  78)							{
HXLINE(  78)								int _g44 = 0;
HXDLIN(  78)								int _g45 = a10->length;
HXDLIN(  78)								while((_g44 < _g45)){
HXLINE(  78)									_g44 = (_g44 + 1);
HXDLIN(  78)									int i16 = (_g44 - 1);
HXDLIN(  78)									a10->data[i16] = 0;
            								}
            							}
            						}
HXDLIN(  78)						undoImage7 = a10;
            					}
            					break;
            					case (int)2: {
HXLINE(  78)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  78)						 ::iterMagic::U32ArrImg b16 = u32a2;
HXDLIN(  78)						{
HXLINE(  78)							b16->width = width2;
HXDLIN(  78)							b16->height = height2;
HXDLIN(  78)							b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  78)							int size2 = (b16->length * 4);
HXDLIN(  78)							b16->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  78)							{
HXLINE(  78)								int _g46 = 0;
HXDLIN(  78)								int _g47 = b16->length;
HXDLIN(  78)								while((_g46 < _g47)){
HXLINE(  78)									_g46 = (_g46 + 1);
HXDLIN(  78)									int i17 = (_g46 - 1);
HXDLIN(  78)									{
HXLINE(  78)										 ::haxe::io::ArrayBufferViewImpl this66 = b16->data;
HXDLIN(  78)										bool undoImage8;
HXDLIN(  78)										if ((i17 >= 0)) {
HXLINE(  78)											undoImage8 = (i17 < (this66->byteLength >> 2));
            										}
            										else {
HXLINE(  78)											undoImage8 = false;
            										}
HXDLIN(  78)										if (undoImage8) {
HXLINE(  78)											 ::haxe::io::Bytes _this2 = this66->bytes;
HXDLIN(  78)											int pos2 = ((i17 << 2) + this66->byteOffset);
HXDLIN(  78)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  78)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  78)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  78)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  78)						undoImage7 = b16;
            					}
            					break;
            					case (int)3: {
HXLINE(  78)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)						 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN(  78)						{
HXLINE(  78)							v5->width = width2;
HXDLIN(  78)							v5->height = height2;
HXDLIN(  78)							v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  78)							v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN(  78)							{
HXLINE(  78)								int _g48 = 0;
HXDLIN(  78)								int _g49 = v5->length;
HXDLIN(  78)								while((_g48 < _g49)){
HXLINE(  78)									_g48 = (_g48 + 1);
HXDLIN(  78)									int i18 = (_g48 - 1);
HXDLIN(  78)									v5->data->__unsafe_set(i18,0);
            								}
            							}
            						}
HXDLIN(  78)						undoImage7 = v5;
            					}
            					break;
            					case (int)4: {
HXLINE(  78)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)						 ::iterMagic::StackIntImg b17 = sInt2;
HXDLIN(  78)						{
HXLINE(  78)							b17->width = width2;
HXDLIN(  78)							b17->height = height2;
HXDLIN(  78)							b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  78)							b17->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  78)							{
HXLINE(  78)								int len5 = b17->length;
HXDLIN(  78)								 ::haxe::ds::GenericStack_Int d2 = b17->data;
HXDLIN(  78)								if (::hx::IsNull( d2->head )) {
HXLINE(  78)									int _g50 = 0;
HXDLIN(  78)									int _g51 = len5;
HXDLIN(  78)									while((_g50 < _g51)){
HXLINE(  78)										_g50 = (_g50 + 1);
HXDLIN(  78)										int i19 = (_g50 - 1);
HXDLIN(  78)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXLINE(  78)									int _g52 = 0;
HXDLIN(  78)									int _g53 = len5;
HXDLIN(  78)									while((_g52 < _g53)){
HXLINE(  78)										_g52 = (_g52 + 1);
HXDLIN(  78)										int i20 = (_g52 - 1);
HXDLIN(  78)										{
HXLINE(  78)											 ::haxe::ds::GenericCell_Int l2 = b17->data->head;
HXDLIN(  78)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  78)											{
HXLINE(  78)												int _g54 = 0;
HXDLIN(  78)												int _g55 = i20;
HXDLIN(  78)												while((_g54 < _g55)){
HXLINE(  78)													_g54 = (_g54 + 1);
HXDLIN(  78)													int i21 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE(  78)											if (::hx::IsNull( prev2 )) {
HXLINE(  78)												b17->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  78)												l2 = null();
            											}
            											else {
HXLINE(  78)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  78)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  78)						undoImage7 = b17;
            					}
            					break;
            				}
HXDLIN(  78)				this65->image = undoImage7;
HXDLIN(  78)				this65->width = width2;
HXDLIN(  78)				this65->height = height2;
HXDLIN(  78)				this65->imageType = ( (int)(imageType2) );
HXDLIN(  78)				undoImage6 = this65;
HXDLIN(  78)				{
HXLINE(  78)					int rectLeft2 = xIter32->start;
HXDLIN(  78)					int rectTop2 = yIter32->start;
HXDLIN(  78)					int rectRight2 = xIter32->max;
HXDLIN(  78)					bool forceClear2 = false;
HXDLIN(  78)					{
HXLINE(  78)						int _g56 = rectTop2;
HXDLIN(  78)						int _g57 = yIter32->max;
HXDLIN(  78)						while((_g56 < _g57)){
HXLINE(  78)							_g56 = (_g56 + 1);
HXDLIN(  78)							int dy3 = (_g56 - 1);
HXDLIN(  78)							{
HXLINE(  78)								int _g58 = rectLeft2;
HXDLIN(  78)								int _g59 = rectRight2;
HXDLIN(  78)								while((_g58 < _g59)){
HXLINE(  78)									_g58 = (_g58 + 1);
HXDLIN(  78)									int dx3 = (_g58 - 1);
HXDLIN(  78)									::Dynamic this67 = pixelImage->image;
HXDLIN(  78)									int index9;
HXDLIN(  78)									if (pixelImage->useVirtualPos) {
HXLINE(  78)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx3) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  78)										index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * pixelImage->width) + dx3)) ));
            									}
HXDLIN(  78)									int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN(  78)									int col2;
HXDLIN(  78)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)										col2 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE(  78)										col2 = c7;
            									}
HXDLIN(  78)									bool _hx_tmp16;
HXDLIN(  78)									if (pixelImage->useMask) {
HXLINE(  78)										_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  78)										_hx_tmp16 = false;
            									}
HXDLIN(  78)									if (_hx_tmp16) {
HXLINE(  78)										 ::pi_xy::ImageStruct this68 = pixelImage->mask;
HXDLIN(  78)										::Dynamic this69 = this68->image;
HXDLIN(  78)										int index10;
HXDLIN(  78)										if (this68->useVirtualPos) {
HXLINE(  78)											index10 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this68->virtualY) * ( (Float)(this68->width) )) + dx3) - this68->virtualX));
            										}
            										else {
HXLINE(  78)											index10 = ::Std_obj::_hx_int(( (Float)(((dy3 * this68->width) + dx3)) ));
            										}
HXDLIN(  78)										int c8 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN(  78)										int v6;
HXDLIN(  78)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)											v6 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE(  78)											v6 = c8;
            										}
HXDLIN(  78)										int maskPixel2 = v6;
HXDLIN(  78)										int this70 = col2;
HXDLIN(  78)										if ((maskPixel2 == 0)) {
HXLINE(  78)											col2 = this70;
            										}
            										else {
HXLINE(  78)											Float m02;
HXDLIN(  78)											int this71 = ((maskPixel2 >> 24) & 255);
HXDLIN(  78)											if ((this71 == 0)) {
HXLINE(  78)												m02 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												m02 = (( (Float)(this71) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float m12;
HXDLIN(  78)											int this72 = ((maskPixel2 >> 16) & 255);
HXDLIN(  78)											if ((this72 == 0)) {
HXLINE(  78)												m12 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												m12 = (( (Float)(this72) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float m22;
HXDLIN(  78)											int this73 = ((maskPixel2 >> 8) & 255);
HXDLIN(  78)											if ((this73 == 0)) {
HXLINE(  78)												m22 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												m22 = (( (Float)(this73) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float m32;
HXDLIN(  78)											int this74 = (maskPixel2 & 255);
HXDLIN(  78)											if ((this74 == 0)) {
HXLINE(  78)												m32 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												m32 = (( (Float)(this74) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this70 >> 24) & 255)) )));
HXDLIN(  78)											int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this70 >> 16) & 255)) )));
HXDLIN(  78)											int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this70 >> 8) & 255)) )));
HXDLIN(  78)											int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this70 & 255)) )));
HXDLIN(  78)											col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  78)									if ((col2 != 0)) {
HXLINE(  78)										int x8 = (dx3 - rectLeft2);
HXDLIN(  78)										int y8 = (dy3 - rectTop2);
HXDLIN(  78)										int c9 = col2;
HXDLIN(  78)										bool _hx_tmp17;
HXDLIN(  78)										if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  78)											_hx_tmp17 = undoImage6->transparent;
            										}
            										else {
HXLINE(  78)											_hx_tmp17 = false;
            										}
HXDLIN(  78)										if (_hx_tmp17) {
HXLINE(  78)											int location4;
HXDLIN(  78)											if (undoImage6->useVirtualPos) {
HXLINE(  78)												location4 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            											}
            											else {
HXLINE(  78)												location4 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            											}
HXDLIN(  78)											int this75 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  78)											int this76;
HXDLIN(  78)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)												this76 = ((((((this75 >> 24) & 255) << 24) | ((this75 & 255) << 16)) | (((this75 >> 8) & 255) << 8)) | ((this75 >> 16) & 255));
            											}
            											else {
HXLINE(  78)												this76 = this75;
            											}
HXDLIN(  78)											Float a14;
HXDLIN(  78)											int this77 = ((this76 >> 24) & 255);
HXDLIN(  78)											if ((this77 == 0)) {
HXLINE(  78)												a14 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												a14 = (( (Float)(this77) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float r14;
HXDLIN(  78)											int this78 = ((this76 >> 16) & 255);
HXDLIN(  78)											if ((this78 == 0)) {
HXLINE(  78)												r14 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												r14 = (( (Float)(this78) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float g14;
HXDLIN(  78)											int this79 = ((this76 >> 8) & 255);
HXDLIN(  78)											if ((this79 == 0)) {
HXLINE(  78)												g14 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												g14 = (( (Float)(this79) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float b18;
HXDLIN(  78)											int this80 = (this76 & 255);
HXDLIN(  78)											if ((this80 == 0)) {
HXLINE(  78)												b18 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												b18 = (( (Float)(this80) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float a24;
HXDLIN(  78)											int this81 = ((col2 >> 24) & 255);
HXDLIN(  78)											if ((this81 == 0)) {
HXLINE(  78)												a24 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												a24 = (( (Float)(this81) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float r24;
HXDLIN(  78)											int this82 = ((col2 >> 16) & 255);
HXDLIN(  78)											if ((this82 == 0)) {
HXLINE(  78)												r24 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												r24 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float g24;
HXDLIN(  78)											int this83 = ((col2 >> 8) & 255);
HXDLIN(  78)											if ((this83 == 0)) {
HXLINE(  78)												g24 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												g24 = (( (Float)(this83) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float b25;
HXDLIN(  78)											int this84 = (col2 & 255);
HXDLIN(  78)											if ((this84 == 0)) {
HXLINE(  78)												b25 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												b25 = (( (Float)(this84) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  78)											int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  78)											int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  78)											int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a34) + (b25 * a24))));
HXDLIN(  78)											int a15 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  78)											int blended4 = ((((a15 << 24) | (r7 << 16)) | (g7 << 8)) | b19);
HXDLIN(  78)											{
HXLINE(  78)												int _hx_tmp18;
HXDLIN(  78)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)													_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE(  78)													_hx_tmp18 = blended4;
            												}
HXDLIN(  78)												::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            											}
            										}
            										else {
HXLINE(  78)											::Dynamic this85 = undoImage6->image;
HXDLIN(  78)											int index11;
HXDLIN(  78)											if (undoImage6->useVirtualPos) {
HXLINE(  78)												index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            											}
            											else {
HXLINE(  78)												index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            											}
HXDLIN(  78)											int _hx_tmp19;
HXDLIN(  78)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)												_hx_tmp19 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            											}
            											else {
HXLINE(  78)												_hx_tmp19 = c9;
            											}
HXDLIN(  78)											::iterMagic::Iimg_obj::set(this85,index11,_hx_tmp19);
            										}
            									}
            									else {
HXLINE(  78)										if (forceClear2) {
HXLINE(  78)											::Dynamic this86 = undoImage6->image;
HXDLIN(  78)											int x9 = (dx3 - rectLeft2);
HXDLIN(  78)											int y9 = (dy3 - rectTop2);
HXDLIN(  78)											int index12;
HXDLIN(  78)											if (undoImage6->useVirtualPos) {
HXLINE(  78)												index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            											}
            											else {
HXLINE(  78)												index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            											}
HXDLIN(  78)											::iterMagic::Iimg_obj::set(this86,index12,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  78)			bool found2 = false;
HXDLIN(  78)			{
HXLINE(  78)				int _g_min4 = xIter32->start;
HXDLIN(  78)				int _g_max4 = xIter32->max;
HXDLIN(  78)				while((_g_min4 < _g_max4)){
HXLINE(  78)					_g_min4 = (_g_min4 + 1);
HXDLIN(  78)					int px1 = (_g_min4 - 1);
HXDLIN(  78)					Float pcx1 = (( (Float)(px1) ) - cx);
HXLINE( 619)					found2 = false;
HXLINE(  78)					{
HXLINE(  78)						int _g_min5 = yIter32->start;
HXDLIN(  78)						int _g_max5 = yIter32->max;
HXDLIN(  78)						while((_g_min5 < _g_max5)){
HXLINE(  78)							_g_min5 = (_g_min5 + 1);
HXDLIN(  78)							int py1 = (_g_min5 - 1);
HXDLIN(  78)							Float pcy1 = (( (Float)(py1) ) - cy);
HXDLIN(  78)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  78)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  78)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  78)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  78)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  78)							bool _hx_tmp20;
HXDLIN(  78)							bool _hx_tmp21;
HXDLIN(  78)							if ((ratioA1 >= 0)) {
HXLINE(  78)								_hx_tmp21 = (ratioB1 >= 0);
            							}
            							else {
HXLINE(  78)								_hx_tmp21 = false;
            							}
HXDLIN(  78)							if (_hx_tmp21) {
HXLINE(  78)								_hx_tmp20 = (ratioC1 >= 0);
            							}
            							else {
HXLINE(  78)								_hx_tmp20 = false;
            							}
HXDLIN(  78)							if (_hx_tmp20) {
HXLINE(  78)								int i22 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB1)));
HXDLIN(  78)								if ((i22 > 255)) {
HXLINE(  24)									i22 = 255;
            								}
HXLINE(  78)								if ((i22 < 0)) {
HXLINE(  25)									i22 = 0;
            								}
HXLINE(  78)								int a16 = i22;
HXDLIN(  78)								int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  78)								if ((i23 > 255)) {
HXLINE(  24)									i23 = 255;
            								}
HXLINE(  78)								if ((i23 < 0)) {
HXLINE(  25)									i23 = 0;
            								}
HXLINE(  78)								int r8 = i23;
HXDLIN(  78)								int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  78)								if ((i24 > 255)) {
HXLINE(  24)									i24 = 255;
            								}
HXLINE(  78)								if ((i24 < 0)) {
HXLINE(  25)									i24 = 0;
            								}
HXLINE(  78)								int g8 = i24;
HXDLIN(  78)								int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  78)								if ((i25 > 255)) {
HXLINE(  24)									i25 = 255;
            								}
HXLINE(  78)								if ((i25 < 0)) {
HXLINE(  25)									i25 = 0;
            								}
HXLINE(  78)								int b20 = i25;
HXDLIN(  78)								{
HXLINE(  78)									int location5;
HXDLIN(  78)									if (pixelImage->useVirtualPos) {
HXLINE(  78)										location5 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  78)										location5 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN(  78)									bool _hx_tmp22;
HXDLIN(  78)									if (pixelImage->transparent) {
HXLINE(  78)										_hx_tmp22 = (a16 < 254);
            									}
            									else {
HXLINE(  78)										_hx_tmp22 = false;
            									}
HXDLIN(  78)									if (_hx_tmp22) {
HXLINE(  78)										int this87 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  78)										int old1;
HXDLIN(  78)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)											old1 = ((((((this87 >> 24) & 255) << 24) | ((this87 & 255) << 16)) | (((this87 >> 8) & 255) << 8)) | ((this87 >> 16) & 255));
            										}
            										else {
HXLINE(  78)											old1 = this87;
            										}
HXDLIN(  78)										int rhs1 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN(  78)										Float a17;
HXDLIN(  78)										int this88 = ((old1 >> 24) & 255);
HXDLIN(  78)										if ((this88 == 0)) {
HXLINE(  78)											a17 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											a17 = (( (Float)(this88) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float r15;
HXDLIN(  78)										int this89 = ((old1 >> 16) & 255);
HXDLIN(  78)										if ((this89 == 0)) {
HXLINE(  78)											r15 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											r15 = (( (Float)(this89) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float g15;
HXDLIN(  78)										int this90 = ((old1 >> 8) & 255);
HXDLIN(  78)										if ((this90 == 0)) {
HXLINE(  78)											g15 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											g15 = (( (Float)(this90) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float b110;
HXDLIN(  78)										int this91 = (old1 & 255);
HXDLIN(  78)										if ((this91 == 0)) {
HXLINE(  78)											b110 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											b110 = (( (Float)(this91) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float a25;
HXDLIN(  78)										int this92 = ((rhs1 >> 24) & 255);
HXDLIN(  78)										if ((this92 == 0)) {
HXLINE(  78)											a25 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											a25 = (( (Float)(this92) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float r25;
HXDLIN(  78)										int this93 = ((rhs1 >> 16) & 255);
HXDLIN(  78)										if ((this93 == 0)) {
HXLINE(  78)											r25 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											r25 = (( (Float)(this93) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float g25;
HXDLIN(  78)										int this94 = ((rhs1 >> 8) & 255);
HXDLIN(  78)										if ((this94 == 0)) {
HXLINE(  78)											g25 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											g25 = (( (Float)(this94) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float b26;
HXDLIN(  78)										int this95 = (rhs1 & 255);
HXDLIN(  78)										if ((this95 == 0)) {
HXLINE(  78)											b26 = ((Float)0.);
            										}
            										else {
HXLINE(  78)											b26 = (( (Float)(this95) ) / ( (Float)(255) ));
            										}
HXDLIN(  78)										Float a35 = (a17 * (( (Float)(1) ) - a25));
HXDLIN(  78)										int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  78)										int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  78)										int b27 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b26 * a25))));
HXDLIN(  78)										int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  78)										int blended5 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b27);
HXDLIN(  78)										{
HXLINE(  78)											int _hx_tmp23;
HXDLIN(  78)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)												_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXLINE(  78)												_hx_tmp23 = blended5;
            											}
HXDLIN(  78)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp23);
            										}
            									}
            									else {
HXLINE(  78)										int value1;
HXDLIN(  78)										if (pixelImage->isLittle) {
HXLINE(  78)											value1 = ((((a16 << 24) | (b20 << 16)) | (g8 << 8)) | r8);
            										}
            										else {
HXLINE(  78)											value1 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
            										}
HXDLIN(  78)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,value1);
            									}
            								}
HXLINE( 633)								found2 = true;
            							}
            							else {
HXLINE(  78)								if (found2) {
HXLINE(  78)									goto _hx_goto_84;
            								}
            							}
            						}
            						_hx_goto_84:;
            					}
            				}
            			}
HXDLIN(  78)			{
HXLINE(  78)				 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,bx,by,cx,cy,true);
HXDLIN(  78)				if (hasUndo2) {
HXLINE(  78)					v7->undoImage = undoImage6;
HXDLIN(  78)					v7->undoX = xIter32->start;
HXDLIN(  78)					v7->undoY = yIter32->start;
            				}
            			}
            		}
            		else {
HXLINE(  80)			Float bx2 = bx;
HXDLIN(  80)			Float by2 = by;
HXDLIN(  80)			Float cx2 = cx;
HXDLIN(  80)			Float cy2 = cy;
HXDLIN(  80)			bool hasUndo3 = false;
HXDLIN(  80)			bool adjustWinding1 = (((((ex * by2) - (bx2 * ey)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ey) - (ex * cy2))) > 0);
HXDLIN(  80)			if (!(adjustWinding1)) {
HXLINE(  80)				Float bx_1 = bx2;
HXDLIN(  80)				Float by_1 = by2;
HXLINE(  25)				bx2 = cx2;
HXLINE(  26)				by2 = cy2;
HXLINE(  27)				cx2 = bx_1;
HXLINE(  28)				cy2 = by_1;
            			}
HXLINE(  80)			{
HXLINE(  80)				Float s01 = ((ey * cx2) - (ex * cy2));
HXDLIN(  80)				Float sx1 = (cy2 - ey);
HXDLIN(  80)				Float sy1 = (ex - cx2);
HXDLIN(  80)				Float t01 = ((ex * by2) - (ey * bx2));
HXDLIN(  80)				Float tx1 = (ey - by2);
HXDLIN(  80)				Float ty1 = (bx2 - ex);
HXDLIN(  80)				Float A1 = ((((-(by2) * cx2) + (ey * (-(bx2) + cx2))) + (ex * (by2 - cy2))) + (bx2 * cy2));
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  80)				if ((ex > bx2)) {
HXLINE(  80)					if ((ex > cx2)) {
HXLINE(  80)						int min12;
HXDLIN(  80)						if ((bx2 > cx2)) {
HXLINE(  80)							min12 = ::Math_obj::floor(cx2);
            						}
            						else {
HXLINE(  80)							min12 = ::Math_obj::floor(bx2);
            						}
HXDLIN(  80)						int ii_min24 = min12;
HXDLIN(  80)						int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            					}
            					else {
HXLINE(  80)						int ii_min25 = ::Math_obj::floor(bx2);
HXDLIN(  80)						int ii_max25 = ::Math_obj::ceil(cx2);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            					}
            				}
            				else {
HXLINE(  80)					if ((bx2 > cx2)) {
HXLINE(  80)						int min13;
HXDLIN(  80)						if ((ex > cx2)) {
HXLINE(  80)							min13 = ::Math_obj::floor(cx2);
            						}
            						else {
HXLINE(  80)							min13 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  80)						int ii_min26 = min13;
HXDLIN(  80)						int ii_max26 = ::Math_obj::ceil(bx2);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            					}
            					else {
HXLINE(  80)						int ii_min27 = ::Math_obj::floor(ex);
HXDLIN(  80)						int ii_max27 = ::Math_obj::ceil(cx2);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  80)				if ((ey > by2)) {
HXLINE(  80)					if ((ey > cy2)) {
HXLINE(  80)						int min14;
HXDLIN(  80)						if ((by2 > cy2)) {
HXLINE(  80)							min14 = ::Math_obj::floor(cy2);
            						}
            						else {
HXLINE(  80)							min14 = ::Math_obj::floor(by2);
            						}
HXDLIN(  80)						int ii_min28 = min14;
HXDLIN(  80)						int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            					}
            					else {
HXLINE(  80)						int ii_min29 = ::Math_obj::floor(by2);
HXDLIN(  80)						int ii_max29 = ::Math_obj::ceil(cy2);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            					}
            				}
            				else {
HXLINE(  80)					if ((by2 > cy2)) {
HXLINE(  80)						int min15;
HXDLIN(  80)						if ((ey > cy2)) {
HXLINE(  80)							min15 = ::Math_obj::floor(cy2);
            						}
            						else {
HXLINE(  80)							min15 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  80)						int ii_min30 = min15;
HXDLIN(  80)						int ii_max30 = ::Math_obj::ceil(by2);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            					}
            					else {
HXLINE(  80)						int ii_min31 = ::Math_obj::floor(ey);
HXDLIN(  80)						int ii_max31 = ::Math_obj::ceil(cy2);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  80)				if (hasUndo3) {
HXLINE(  80)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  80)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  80)					 ::Dynamic imageType3 = null();
HXDLIN(  80)					 ::pi_xy::ImageStruct this96 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  80)					::Dynamic undoImage10;
HXDLIN(  80)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXLINE(  80)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::BytesImg b28 = byt3;
HXDLIN(  80)							{
HXLINE(  80)								b28->width = width3;
HXDLIN(  80)								b28->height = height3;
HXDLIN(  80)								b28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								b28->data = ::haxe::io::Bytes_obj::alloc((b28->length * 4));
HXDLIN(  80)								{
HXLINE(  80)									int len6 = b28->length;
HXDLIN(  80)									int w3 = 0;
HXDLIN(  80)									{
HXLINE(  80)										int _g60 = 0;
HXDLIN(  80)										int _g61 = b28->height;
HXDLIN(  80)										while((_g60 < _g61)){
HXLINE(  80)											_g60 = (_g60 + 1);
HXDLIN(  80)											int y10 = (_g60 - 1);
HXDLIN(  80)											{
HXLINE(  80)												int _g62 = 0;
HXDLIN(  80)												int _g63 = b28->width;
HXDLIN(  80)												while((_g62 < _g63)){
HXLINE(  80)													_g62 = (_g62 + 1);
HXDLIN(  80)													int x10 = (_g62 - 1);
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = b28;
            						}
            						break;
            						case (int)1: {
HXLINE(  80)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::ArrIntImg a19 = arrI3;
HXDLIN(  80)							{
HXLINE(  80)								a19->width = width3;
HXDLIN(  80)								a19->height = height3;
HXDLIN(  80)								a19->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)								a19->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								{
HXLINE(  80)									int _g64 = 0;
HXDLIN(  80)									int _g65 = a19->length;
HXDLIN(  80)									while((_g64 < _g65)){
HXLINE(  80)										_g64 = (_g64 + 1);
HXDLIN(  80)										int i26 = (_g64 - 1);
HXDLIN(  80)										a19->data[i26] = 0;
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = a19;
            						}
            						break;
            						case (int)2: {
HXLINE(  80)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::U32ArrImg b29 = u32a3;
HXDLIN(  80)							{
HXLINE(  80)								b29->width = width3;
HXDLIN(  80)								b29->height = height3;
HXDLIN(  80)								b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								int size3 = (b29->length * 4);
HXDLIN(  80)								b29->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  80)								{
HXLINE(  80)									int _g66 = 0;
HXDLIN(  80)									int _g67 = b29->length;
HXDLIN(  80)									while((_g66 < _g67)){
HXLINE(  80)										_g66 = (_g66 + 1);
HXDLIN(  80)										int i27 = (_g66 - 1);
HXDLIN(  80)										{
HXLINE(  80)											 ::haxe::io::ArrayBufferViewImpl this97 = b29->data;
HXDLIN(  80)											bool undoImage11;
HXDLIN(  80)											if ((i27 >= 0)) {
HXLINE(  80)												undoImage11 = (i27 < (this97->byteLength >> 2));
            											}
            											else {
HXLINE(  80)												undoImage11 = false;
            											}
HXDLIN(  80)											if (undoImage11) {
HXLINE(  80)												 ::haxe::io::Bytes _this3 = this97->bytes;
HXDLIN(  80)												int pos3 = ((i27 << 2) + this97->byteOffset);
HXDLIN(  80)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  80)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = b29;
            						}
            						break;
            						case (int)3: {
HXLINE(  80)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN(  80)							{
HXLINE(  80)								v8->width = width3;
HXDLIN(  80)								v8->height = height3;
HXDLIN(  80)								v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN(  80)								{
HXLINE(  80)									int _g68 = 0;
HXDLIN(  80)									int _g69 = v8->length;
HXDLIN(  80)									while((_g68 < _g69)){
HXLINE(  80)										_g68 = (_g68 + 1);
HXDLIN(  80)										int i28 = (_g68 - 1);
HXDLIN(  80)										v8->data->__unsafe_set(i28,0);
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = v8;
            						}
            						break;
            						case (int)4: {
HXLINE(  80)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::StackIntImg b30 = sInt3;
HXDLIN(  80)							{
HXLINE(  80)								b30->width = width3;
HXDLIN(  80)								b30->height = height3;
HXDLIN(  80)								b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								b30->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)								{
HXLINE(  80)									int len7 = b30->length;
HXDLIN(  80)									 ::haxe::ds::GenericStack_Int d3 = b30->data;
HXDLIN(  80)									if (::hx::IsNull( d3->head )) {
HXLINE(  80)										int _g70 = 0;
HXDLIN(  80)										int _g71 = len7;
HXDLIN(  80)										while((_g70 < _g71)){
HXLINE(  80)											_g70 = (_g70 + 1);
HXDLIN(  80)											int i29 = (_g70 - 1);
HXDLIN(  80)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXLINE(  80)										int _g72 = 0;
HXDLIN(  80)										int _g73 = len7;
HXDLIN(  80)										while((_g72 < _g73)){
HXLINE(  80)											_g72 = (_g72 + 1);
HXDLIN(  80)											int i30 = (_g72 - 1);
HXDLIN(  80)											{
HXLINE(  80)												 ::haxe::ds::GenericCell_Int l3 = b30->data->head;
HXDLIN(  80)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  80)												{
HXLINE(  80)													int _g74 = 0;
HXDLIN(  80)													int _g75 = i30;
HXDLIN(  80)													while((_g74 < _g75)){
HXLINE(  80)														_g74 = (_g74 + 1);
HXDLIN(  80)														int i31 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE(  80)												if (::hx::IsNull( prev3 )) {
HXLINE(  80)													b30->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  80)													l3 = null();
            												}
            												else {
HXLINE(  80)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  80)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = b30;
            						}
            						break;
            					}
HXDLIN(  80)					this96->image = undoImage10;
HXDLIN(  80)					this96->width = width3;
HXDLIN(  80)					this96->height = height3;
HXDLIN(  80)					this96->imageType = ( (int)(imageType3) );
HXDLIN(  80)					undoImage9 = this96;
HXDLIN(  80)					{
HXLINE(  80)						int rectLeft3 = xIter33->start;
HXDLIN(  80)						int rectTop3 = yIter33->start;
HXDLIN(  80)						int rectRight3 = xIter33->max;
HXDLIN(  80)						bool forceClear3 = false;
HXDLIN(  80)						{
HXLINE(  80)							int _g76 = rectTop3;
HXDLIN(  80)							int _g77 = yIter33->max;
HXDLIN(  80)							while((_g76 < _g77)){
HXLINE(  80)								_g76 = (_g76 + 1);
HXDLIN(  80)								int dy4 = (_g76 - 1);
HXDLIN(  80)								{
HXLINE(  80)									int _g78 = rectLeft3;
HXDLIN(  80)									int _g79 = rectRight3;
HXDLIN(  80)									while((_g78 < _g79)){
HXLINE(  80)										_g78 = (_g78 + 1);
HXDLIN(  80)										int dx4 = (_g78 - 1);
HXDLIN(  80)										::Dynamic this98 = pixelImage->image;
HXDLIN(  80)										int index13;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            										}
HXDLIN(  80)										int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN(  80)										int col3;
HXDLIN(  80)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)											col3 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            										}
            										else {
HXLINE(  80)											col3 = c10;
            										}
HXDLIN(  80)										bool _hx_tmp24;
HXDLIN(  80)										if (pixelImage->useMask) {
HXLINE(  80)											_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  80)											_hx_tmp24 = false;
            										}
HXDLIN(  80)										if (_hx_tmp24) {
HXLINE(  80)											 ::pi_xy::ImageStruct this99 = pixelImage->mask;
HXDLIN(  80)											::Dynamic this100 = this99->image;
HXDLIN(  80)											int index14;
HXDLIN(  80)											if (this99->useVirtualPos) {
HXLINE(  80)												index14 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this99->virtualY) * ( (Float)(this99->width) )) + dx4) - this99->virtualX));
            											}
            											else {
HXLINE(  80)												index14 = ::Std_obj::_hx_int(( (Float)(((dy4 * this99->width) + dx4)) ));
            											}
HXDLIN(  80)											int c11 = ::iterMagic::Iimg_obj::get(this100,index14);
HXDLIN(  80)											int v9;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												v9 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												v9 = c11;
            											}
HXDLIN(  80)											int maskPixel3 = v9;
HXDLIN(  80)											int this101 = col3;
HXDLIN(  80)											if ((maskPixel3 == 0)) {
HXLINE(  80)												col3 = this101;
            											}
            											else {
HXLINE(  80)												Float m03;
HXDLIN(  80)												int this102 = ((maskPixel3 >> 24) & 255);
HXDLIN(  80)												if ((this102 == 0)) {
HXLINE(  80)													m03 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m03 = (( (Float)(this102) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m13;
HXDLIN(  80)												int this103 = ((maskPixel3 >> 16) & 255);
HXDLIN(  80)												if ((this103 == 0)) {
HXLINE(  80)													m13 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m13 = (( (Float)(this103) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m23;
HXDLIN(  80)												int this104 = ((maskPixel3 >> 8) & 255);
HXDLIN(  80)												if ((this104 == 0)) {
HXLINE(  80)													m23 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m23 = (( (Float)(this104) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m33;
HXDLIN(  80)												int this105 = (maskPixel3 & 255);
HXDLIN(  80)												if ((this105 == 0)) {
HXLINE(  80)													m33 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m33 = (( (Float)(this105) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this101 >> 24) & 255)) )));
HXDLIN(  80)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this101 >> 16) & 255)) )));
HXDLIN(  80)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this101 >> 8) & 255)) )));
HXDLIN(  80)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this101 & 255)) )));
HXDLIN(  80)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  80)										if ((col3 != 0)) {
HXLINE(  80)											int x11 = (dx4 - rectLeft3);
HXDLIN(  80)											int y11 = (dy4 - rectTop3);
HXDLIN(  80)											int c12 = col3;
HXDLIN(  80)											bool _hx_tmp25;
HXDLIN(  80)											if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  80)												_hx_tmp25 = undoImage9->transparent;
            											}
            											else {
HXLINE(  80)												_hx_tmp25 = false;
            											}
HXDLIN(  80)											if (_hx_tmp25) {
HXLINE(  80)												int location6;
HXDLIN(  80)												if (undoImage9->useVirtualPos) {
HXLINE(  80)													location6 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  80)													location6 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN(  80)												int this106 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  80)												int this107;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													this107 = ((((((this106 >> 24) & 255) << 24) | ((this106 & 255) << 16)) | (((this106 >> 8) & 255) << 8)) | ((this106 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													this107 = this106;
            												}
HXDLIN(  80)												Float a110;
HXDLIN(  80)												int this108 = ((this107 >> 24) & 255);
HXDLIN(  80)												if ((this108 == 0)) {
HXLINE(  80)													a110 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a110 = (( (Float)(this108) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r16;
HXDLIN(  80)												int this109 = ((this107 >> 16) & 255);
HXDLIN(  80)												if ((this109 == 0)) {
HXLINE(  80)													r16 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r16 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g16;
HXDLIN(  80)												int this110 = ((this107 >> 8) & 255);
HXDLIN(  80)												if ((this110 == 0)) {
HXLINE(  80)													g16 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g16 = (( (Float)(this110) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b111;
HXDLIN(  80)												int this111 = (this107 & 255);
HXDLIN(  80)												if ((this111 == 0)) {
HXLINE(  80)													b111 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b111 = (( (Float)(this111) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a26;
HXDLIN(  80)												int this112 = ((col3 >> 24) & 255);
HXDLIN(  80)												if ((this112 == 0)) {
HXLINE(  80)													a26 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a26 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r26;
HXDLIN(  80)												int this113 = ((col3 >> 16) & 255);
HXDLIN(  80)												if ((this113 == 0)) {
HXLINE(  80)													r26 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r26 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g26;
HXDLIN(  80)												int this114 = ((col3 >> 8) & 255);
HXDLIN(  80)												if ((this114 == 0)) {
HXLINE(  80)													g26 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g26 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b210;
HXDLIN(  80)												int this115 = (col3 & 255);
HXDLIN(  80)												if ((this115 == 0)) {
HXLINE(  80)													b210 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b210 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  80)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  80)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  80)												int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a26))));
HXDLIN(  80)												int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  80)												int blended6 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b31);
HXDLIN(  80)												{
HXLINE(  80)													int _hx_tmp26;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														_hx_tmp26 = blended6;
            													}
HXDLIN(  80)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            												}
            											}
            											else {
HXLINE(  80)												::Dynamic this116 = undoImage9->image;
HXDLIN(  80)												int index15;
HXDLIN(  80)												if (undoImage9->useVirtualPos) {
HXLINE(  80)													index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  80)													index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN(  80)												int _hx_tmp27;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													_hx_tmp27 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													_hx_tmp27 = c12;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this116,index15,_hx_tmp27);
            											}
            										}
            										else {
HXLINE(  80)											if (forceClear3) {
HXLINE(  80)												::Dynamic this117 = undoImage9->image;
HXDLIN(  80)												int x12 = (dx4 - rectLeft3);
HXDLIN(  80)												int y12 = (dy4 - rectTop3);
HXDLIN(  80)												int index16;
HXDLIN(  80)												if (undoImage9->useVirtualPos) {
HXLINE(  80)													index16 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  80)													index16 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this117,index16,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  80)				bool found3 = false;
HXDLIN(  80)				Float s1 = ((Float)0.);
HXDLIN(  80)				Float t1 = ((Float)0.);
HXDLIN(  80)				Float sxx1 = ((Float)0.);
HXDLIN(  80)				Float txx1 = ((Float)0.);
HXDLIN(  80)				{
HXLINE(  80)					int _g_min6 = xIter33->start;
HXDLIN(  80)					int _g_max6 = xIter33->max;
HXDLIN(  80)					while((_g_min6 < _g_max6)){
HXLINE(  80)						_g_min6 = (_g_min6 + 1);
HXDLIN(  80)						int x13 = (_g_min6 - 1);
HXLINE(  60)						sxx1 = (sx1 * ( (Float)(x13) ));
HXLINE(  61)						txx1 = (tx1 * ( (Float)(x13) ));
HXLINE(  62)						found3 = false;
HXLINE(  80)						{
HXLINE(  80)							int _g_min7 = yIter33->start;
HXDLIN(  80)							int _g_max7 = yIter33->max;
HXDLIN(  80)							while((_g_min7 < _g_max7)){
HXLINE(  80)								_g_min7 = (_g_min7 + 1);
HXDLIN(  80)								int y13 = (_g_min7 - 1);
HXLINE(  64)								s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y13) )));
HXLINE(  65)								t1 = ((t01 + txx1) + (ty1 * ( (Float)(y13) )));
HXLINE(  80)								bool _hx_tmp28;
HXDLIN(  80)								if (!((s1 <= 0))) {
HXLINE(  80)									_hx_tmp28 = (t1 <= 0);
            								}
            								else {
HXLINE(  80)									_hx_tmp28 = true;
            								}
HXDLIN(  80)								if (_hx_tmp28) {
HXLINE(  80)									if (found3) {
HXLINE(  80)										goto _hx_goto_96;
            									}
            								}
            								else {
HXLINE(  80)									if (((s1 + t1) < A1)) {
HXLINE(  80)										{
HXLINE(  80)											int c13 = color;
HXDLIN(  80)											bool _hx_tmp29;
HXDLIN(  80)											if ((((c13 >> 24) & 255) < 254)) {
HXLINE(  80)												_hx_tmp29 = pixelImage->transparent;
            											}
            											else {
HXLINE(  80)												_hx_tmp29 = false;
            											}
HXDLIN(  80)											if (_hx_tmp29) {
HXLINE(  80)												int location7;
HXDLIN(  80)												if (pixelImage->useVirtualPos) {
HXLINE(  80)													location7 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x13) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  80)													location7 = ::Std_obj::_hx_int(( (Float)(((y13 * pixelImage->width) + x13)) ));
            												}
HXDLIN(  80)												int this118 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN(  80)												int this119;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													this119 = ((((((this118 >> 24) & 255) << 24) | ((this118 & 255) << 16)) | (((this118 >> 8) & 255) << 8)) | ((this118 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													this119 = this118;
            												}
HXDLIN(  80)												Float a111;
HXDLIN(  80)												int this120 = ((this119 >> 24) & 255);
HXDLIN(  80)												if ((this120 == 0)) {
HXLINE(  80)													a111 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a111 = (( (Float)(this120) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r17;
HXDLIN(  80)												int this121 = ((this119 >> 16) & 255);
HXDLIN(  80)												if ((this121 == 0)) {
HXLINE(  80)													r17 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r17 = (( (Float)(this121) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g17;
HXDLIN(  80)												int this122 = ((this119 >> 8) & 255);
HXDLIN(  80)												if ((this122 == 0)) {
HXLINE(  80)													g17 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g17 = (( (Float)(this122) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b112;
HXDLIN(  80)												int this123 = (this119 & 255);
HXDLIN(  80)												if ((this123 == 0)) {
HXLINE(  80)													b112 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b112 = (( (Float)(this123) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a27;
HXDLIN(  80)												int this124 = ((color >> 24) & 255);
HXDLIN(  80)												if ((this124 == 0)) {
HXLINE(  80)													a27 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a27 = (( (Float)(this124) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r27;
HXDLIN(  80)												int this125 = ((color >> 16) & 255);
HXDLIN(  80)												if ((this125 == 0)) {
HXLINE(  80)													r27 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r27 = (( (Float)(this125) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g27;
HXDLIN(  80)												int this126 = ((color >> 8) & 255);
HXDLIN(  80)												if ((this126 == 0)) {
HXLINE(  80)													g27 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g27 = (( (Float)(this126) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b211;
HXDLIN(  80)												int this127 = (color & 255);
HXDLIN(  80)												if ((this127 == 0)) {
HXLINE(  80)													b211 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b211 = (( (Float)(this127) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a37 = (a111 * (( (Float)(1) ) - a27));
HXDLIN(  80)												int r18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  80)												int g18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  80)												int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a27))));
HXDLIN(  80)												int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  80)												int blended7 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b32);
HXDLIN(  80)												{
HXLINE(  80)													int _hx_tmp30;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														_hx_tmp30 = blended7;
            													}
HXDLIN(  80)													::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp30);
            												}
            											}
            											else {
HXLINE(  80)												::Dynamic this128 = pixelImage->image;
HXDLIN(  80)												int index17;
HXDLIN(  80)												if (pixelImage->useVirtualPos) {
HXLINE(  80)													index17 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x13) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  80)													index17 = ::Std_obj::_hx_int(( (Float)(((y13 * pixelImage->width) + x13)) ));
            												}
HXDLIN(  80)												int _hx_tmp31;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													_hx_tmp31 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													_hx_tmp31 = c13;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this128,index17,_hx_tmp31);
            											}
            										}
HXLINE(  73)										found3 = true;
            									}
            									else {
HXLINE(  80)										if (found3) {
HXLINE(  80)											goto _hx_goto_96;
            										}
            									}
            								}
            							}
            							_hx_goto_96:;
            						}
            					}
            				}
            			}
            		}
HXLINE(  83)		if (softBottom) {
HXLINE(  84)			bool hasUndo4 = false;
HXDLIN(  84)			int aA2 = ((color >> 24) & 255);
HXDLIN(  84)			int rA2 = ((color >> 16) & 255);
HXDLIN(  84)			int gA2 = ((color >> 8) & 255);
HXDLIN(  84)			int bA2 = (color & 255);
HXDLIN(  84)			Float bcx2 = (cx - dx);
HXDLIN(  84)			Float bcy2 = (cy - dy);
HXDLIN(  84)			Float acx2 = (ex - dx);
HXDLIN(  84)			Float acy2 = (ey - dy);
HXDLIN(  84)			Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  84)			Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  84)			Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  84)			Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  84)			 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  84)			if ((ex > cx)) {
HXLINE(  84)				if ((ex > dx)) {
HXLINE(  84)					int min16;
HXDLIN(  84)					if ((cx > dx)) {
HXLINE(  84)						min16 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE(  84)						min16 = ::Math_obj::floor(cx);
            					}
HXDLIN(  84)					int ii_min32 = min16;
HXDLIN(  84)					int ii_max32 = ::Math_obj::ceil(ex);
HXDLIN(  84)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            				}
            				else {
HXLINE(  84)					int ii_min33 = ::Math_obj::floor(cx);
HXDLIN(  84)					int ii_max33 = ::Math_obj::ceil(dx);
HXDLIN(  84)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            				}
            			}
            			else {
HXLINE(  84)				if ((cx > dx)) {
HXLINE(  84)					int min17;
HXDLIN(  84)					if ((ex > dx)) {
HXLINE(  84)						min17 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE(  84)						min17 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  84)					int ii_min34 = min17;
HXDLIN(  84)					int ii_max34 = ::Math_obj::ceil(cx);
HXDLIN(  84)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            				}
            				else {
HXLINE(  84)					int ii_min35 = ::Math_obj::floor(ex);
HXDLIN(  84)					int ii_max35 = ::Math_obj::ceil(dx);
HXDLIN(  84)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            				}
            			}
HXDLIN(  84)			 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  84)			if ((ey > cy)) {
HXLINE(  84)				if ((ey > dy)) {
HXLINE(  84)					int min18;
HXDLIN(  84)					if ((cy > dy)) {
HXLINE(  84)						min18 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE(  84)						min18 = ::Math_obj::floor(cy);
            					}
HXDLIN(  84)					int ii_min36 = min18;
HXDLIN(  84)					int ii_max36 = ::Math_obj::ceil(ey);
HXDLIN(  84)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            				}
            				else {
HXLINE(  84)					int ii_min37 = ::Math_obj::floor(cy);
HXDLIN(  84)					int ii_max37 = ::Math_obj::ceil(dy);
HXDLIN(  84)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            				}
            			}
            			else {
HXLINE(  84)				if ((cy > dy)) {
HXLINE(  84)					int min19;
HXDLIN(  84)					if ((ey > dy)) {
HXLINE(  84)						min19 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE(  84)						min19 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  84)					int ii_min38 = min19;
HXDLIN(  84)					int ii_max38 = ::Math_obj::ceil(cy);
HXDLIN(  84)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            				}
            				else {
HXLINE(  84)					int ii_min39 = ::Math_obj::floor(ey);
HXDLIN(  84)					int ii_max39 = ::Math_obj::ceil(dy);
HXDLIN(  84)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            				}
            			}
HXDLIN(  84)			 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  84)			if (hasUndo4) {
HXLINE(  84)				int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  84)				int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  84)				 ::Dynamic imageType4 = null();
HXDLIN(  84)				 ::pi_xy::ImageStruct this129 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  84)				if (::hx::IsNull( imageType4 )) {
HXLINE(  54)					imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  84)				::Dynamic undoImage13;
HXDLIN(  84)				switch((int)(( (int)(imageType4) ))){
            					case (int)0: {
HXLINE(  84)						 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  84)						 ::iterMagic::BytesImg b33 = byt4;
HXDLIN(  84)						{
HXLINE(  84)							b33->width = width4;
HXDLIN(  84)							b33->height = height4;
HXDLIN(  84)							b33->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  84)							b33->data = ::haxe::io::Bytes_obj::alloc((b33->length * 4));
HXDLIN(  84)							{
HXLINE(  84)								int len8 = b33->length;
HXDLIN(  84)								int w4 = 0;
HXDLIN(  84)								{
HXLINE(  84)									int _g80 = 0;
HXDLIN(  84)									int _g81 = b33->height;
HXDLIN(  84)									while((_g80 < _g81)){
HXLINE(  84)										_g80 = (_g80 + 1);
HXDLIN(  84)										int y14 = (_g80 - 1);
HXDLIN(  84)										{
HXLINE(  84)											int _g82 = 0;
HXDLIN(  84)											int _g83 = b33->width;
HXDLIN(  84)											while((_g82 < _g83)){
HXLINE(  84)												_g82 = (_g82 + 1);
HXDLIN(  84)												int x14 = (_g82 - 1);
HXDLIN(  84)												{
HXLINE(  84)													w4 = (w4 + 1);
HXDLIN(  84)													b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  84)												{
HXLINE(  84)													w4 = (w4 + 1);
HXDLIN(  84)													b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  84)												{
HXLINE(  84)													w4 = (w4 + 1);
HXDLIN(  84)													b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  84)												{
HXLINE(  84)													w4 = (w4 + 1);
HXDLIN(  84)													b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  84)						undoImage13 = b33;
            					}
            					break;
            					case (int)1: {
HXLINE(  84)						 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  84)						 ::iterMagic::ArrIntImg a29 = arrI4;
HXDLIN(  84)						{
HXLINE(  84)							a29->width = width4;
HXDLIN(  84)							a29->height = height4;
HXDLIN(  84)							a29->data = ::Array_obj< int >::__new(0);
HXDLIN(  84)							a29->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  84)							{
HXLINE(  84)								int _g84 = 0;
HXDLIN(  84)								int _g85 = a29->length;
HXDLIN(  84)								while((_g84 < _g85)){
HXLINE(  84)									_g84 = (_g84 + 1);
HXDLIN(  84)									int i32 = (_g84 - 1);
HXDLIN(  84)									a29->data[i32] = 0;
            								}
            							}
            						}
HXDLIN(  84)						undoImage13 = a29;
            					}
            					break;
            					case (int)2: {
HXLINE(  84)						 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  84)						 ::iterMagic::U32ArrImg b34 = u32a4;
HXDLIN(  84)						{
HXLINE(  84)							b34->width = width4;
HXDLIN(  84)							b34->height = height4;
HXDLIN(  84)							b34->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  84)							int size4 = (b34->length * 4);
HXDLIN(  84)							b34->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  84)							{
HXLINE(  84)								int _g86 = 0;
HXDLIN(  84)								int _g87 = b34->length;
HXDLIN(  84)								while((_g86 < _g87)){
HXLINE(  84)									_g86 = (_g86 + 1);
HXDLIN(  84)									int i33 = (_g86 - 1);
HXDLIN(  84)									{
HXLINE(  84)										 ::haxe::io::ArrayBufferViewImpl this130 = b34->data;
HXDLIN(  84)										bool undoImage14;
HXDLIN(  84)										if ((i33 >= 0)) {
HXLINE(  84)											undoImage14 = (i33 < (this130->byteLength >> 2));
            										}
            										else {
HXLINE(  84)											undoImage14 = false;
            										}
HXDLIN(  84)										if (undoImage14) {
HXLINE(  84)											 ::haxe::io::Bytes _this4 = this130->bytes;
HXDLIN(  84)											int pos4 = ((i33 << 2) + this130->byteOffset);
HXDLIN(  84)											_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  84)											_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  84)											_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  84)											_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  84)						undoImage13 = b34;
            					}
            					break;
            					case (int)3: {
HXLINE(  84)						 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  84)						 ::iterMagic::VecIntImg v10 = vec4;
HXDLIN(  84)						{
HXLINE(  84)							v10->width = width4;
HXDLIN(  84)							v10->height = height4;
HXDLIN(  84)							v10->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  84)							v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN(  84)							{
HXLINE(  84)								int _g88 = 0;
HXDLIN(  84)								int _g89 = v10->length;
HXDLIN(  84)								while((_g88 < _g89)){
HXLINE(  84)									_g88 = (_g88 + 1);
HXDLIN(  84)									int i34 = (_g88 - 1);
HXDLIN(  84)									v10->data->__unsafe_set(i34,0);
            								}
            							}
            						}
HXDLIN(  84)						undoImage13 = v10;
            					}
            					break;
            					case (int)4: {
HXLINE(  84)						 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  84)						 ::iterMagic::StackIntImg b35 = sInt4;
HXDLIN(  84)						{
HXLINE(  84)							b35->width = width4;
HXDLIN(  84)							b35->height = height4;
HXDLIN(  84)							b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  84)							b35->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  84)							{
HXLINE(  84)								int len9 = b35->length;
HXDLIN(  84)								 ::haxe::ds::GenericStack_Int d4 = b35->data;
HXDLIN(  84)								if (::hx::IsNull( d4->head )) {
HXLINE(  84)									int _g90 = 0;
HXDLIN(  84)									int _g91 = len9;
HXDLIN(  84)									while((_g90 < _g91)){
HXLINE(  84)										_g90 = (_g90 + 1);
HXDLIN(  84)										int i35 = (_g90 - 1);
HXDLIN(  84)										d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            									}
            								}
            								else {
HXLINE(  84)									int _g92 = 0;
HXDLIN(  84)									int _g93 = len9;
HXDLIN(  84)									while((_g92 < _g93)){
HXLINE(  84)										_g92 = (_g92 + 1);
HXDLIN(  84)										int i36 = (_g92 - 1);
HXDLIN(  84)										{
HXLINE(  84)											 ::haxe::ds::GenericCell_Int l4 = b35->data->head;
HXDLIN(  84)											 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  84)											{
HXLINE(  84)												int _g94 = 0;
HXDLIN(  84)												int _g95 = i36;
HXDLIN(  84)												while((_g94 < _g95)){
HXLINE(  84)													_g94 = (_g94 + 1);
HXDLIN(  84)													int i37 = (_g94 - 1);
HXLINE( 345)													prev4 = l4;
HXLINE( 346)													l4 = l4->next;
            												}
            											}
HXLINE(  84)											if (::hx::IsNull( prev4 )) {
HXLINE(  84)												b35->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  84)												l4 = null();
            											}
            											else {
HXLINE(  84)												prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  84)												l4 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  84)						undoImage13 = b35;
            					}
            					break;
            				}
HXDLIN(  84)				this129->image = undoImage13;
HXDLIN(  84)				this129->width = width4;
HXDLIN(  84)				this129->height = height4;
HXDLIN(  84)				this129->imageType = ( (int)(imageType4) );
HXDLIN(  84)				undoImage12 = this129;
HXDLIN(  84)				{
HXLINE(  84)					int rectLeft4 = xIter34->start;
HXDLIN(  84)					int rectTop4 = yIter34->start;
HXDLIN(  84)					int rectRight4 = xIter34->max;
HXDLIN(  84)					bool forceClear4 = false;
HXDLIN(  84)					{
HXLINE(  84)						int _g96 = rectTop4;
HXDLIN(  84)						int _g97 = yIter34->max;
HXDLIN(  84)						while((_g96 < _g97)){
HXLINE(  84)							_g96 = (_g96 + 1);
HXDLIN(  84)							int dy5 = (_g96 - 1);
HXDLIN(  84)							{
HXLINE(  84)								int _g98 = rectLeft4;
HXDLIN(  84)								int _g99 = rectRight4;
HXDLIN(  84)								while((_g98 < _g99)){
HXLINE(  84)									_g98 = (_g98 + 1);
HXDLIN(  84)									int dx5 = (_g98 - 1);
HXDLIN(  84)									::Dynamic this131 = pixelImage->image;
HXDLIN(  84)									int index18;
HXDLIN(  84)									if (pixelImage->useVirtualPos) {
HXLINE(  84)										index18 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  84)										index18 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            									}
HXDLIN(  84)									int c14 = ::iterMagic::Iimg_obj::get(this131,index18);
HXDLIN(  84)									int col4;
HXDLIN(  84)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)										col4 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            									}
            									else {
HXLINE(  84)										col4 = c14;
            									}
HXDLIN(  84)									bool _hx_tmp32;
HXDLIN(  84)									if (pixelImage->useMask) {
HXLINE(  84)										_hx_tmp32 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  84)										_hx_tmp32 = false;
            									}
HXDLIN(  84)									if (_hx_tmp32) {
HXLINE(  84)										 ::pi_xy::ImageStruct this132 = pixelImage->mask;
HXDLIN(  84)										::Dynamic this133 = this132->image;
HXDLIN(  84)										int index19;
HXDLIN(  84)										if (this132->useVirtualPos) {
HXLINE(  84)											index19 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this132->virtualY) * ( (Float)(this132->width) )) + dx5) - this132->virtualX));
            										}
            										else {
HXLINE(  84)											index19 = ::Std_obj::_hx_int(( (Float)(((dy5 * this132->width) + dx5)) ));
            										}
HXDLIN(  84)										int c15 = ::iterMagic::Iimg_obj::get(this133,index19);
HXDLIN(  84)										int v11;
HXDLIN(  84)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)											v11 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE(  84)											v11 = c15;
            										}
HXDLIN(  84)										int maskPixel4 = v11;
HXDLIN(  84)										int this134 = col4;
HXDLIN(  84)										if ((maskPixel4 == 0)) {
HXLINE(  84)											col4 = this134;
            										}
            										else {
HXLINE(  84)											Float m04;
HXDLIN(  84)											int this135 = ((maskPixel4 >> 24) & 255);
HXDLIN(  84)											if ((this135 == 0)) {
HXLINE(  84)												m04 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												m04 = (( (Float)(this135) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float m14;
HXDLIN(  84)											int this136 = ((maskPixel4 >> 16) & 255);
HXDLIN(  84)											if ((this136 == 0)) {
HXLINE(  84)												m14 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												m14 = (( (Float)(this136) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float m24;
HXDLIN(  84)											int this137 = ((maskPixel4 >> 8) & 255);
HXDLIN(  84)											if ((this137 == 0)) {
HXLINE(  84)												m24 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												m24 = (( (Float)(this137) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float m34;
HXDLIN(  84)											int this138 = (maskPixel4 & 255);
HXDLIN(  84)											if ((this138 == 0)) {
HXLINE(  84)												m34 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												m34 = (( (Float)(this138) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this134 >> 24) & 255)) )));
HXDLIN(  84)											int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this134 >> 16) & 255)) )));
HXDLIN(  84)											int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this134 >> 8) & 255)) )));
HXDLIN(  84)											int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this134 & 255)) )));
HXDLIN(  84)											col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  84)									if ((col4 != 0)) {
HXLINE(  84)										int x15 = (dx5 - rectLeft4);
HXDLIN(  84)										int y15 = (dy5 - rectTop4);
HXDLIN(  84)										int c16 = col4;
HXDLIN(  84)										bool _hx_tmp33;
HXDLIN(  84)										if ((((c16 >> 24) & 255) < 254)) {
HXLINE(  84)											_hx_tmp33 = undoImage12->transparent;
            										}
            										else {
HXLINE(  84)											_hx_tmp33 = false;
            										}
HXDLIN(  84)										if (_hx_tmp33) {
HXLINE(  84)											int location8;
HXDLIN(  84)											if (undoImage12->useVirtualPos) {
HXLINE(  84)												location8 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            											}
            											else {
HXLINE(  84)												location8 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            											}
HXDLIN(  84)											int this139 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  84)											int this140;
HXDLIN(  84)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)												this140 = ((((((this139 >> 24) & 255) << 24) | ((this139 & 255) << 16)) | (((this139 >> 8) & 255) << 8)) | ((this139 >> 16) & 255));
            											}
            											else {
HXLINE(  84)												this140 = this139;
            											}
HXDLIN(  84)											Float a112;
HXDLIN(  84)											int this141 = ((this140 >> 24) & 255);
HXDLIN(  84)											if ((this141 == 0)) {
HXLINE(  84)												a112 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												a112 = (( (Float)(this141) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float r19;
HXDLIN(  84)											int this142 = ((this140 >> 16) & 255);
HXDLIN(  84)											if ((this142 == 0)) {
HXLINE(  84)												r19 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												r19 = (( (Float)(this142) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float g19;
HXDLIN(  84)											int this143 = ((this140 >> 8) & 255);
HXDLIN(  84)											if ((this143 == 0)) {
HXLINE(  84)												g19 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												g19 = (( (Float)(this143) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float b113;
HXDLIN(  84)											int this144 = (this140 & 255);
HXDLIN(  84)											if ((this144 == 0)) {
HXLINE(  84)												b113 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												b113 = (( (Float)(this144) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float a210;
HXDLIN(  84)											int this145 = ((col4 >> 24) & 255);
HXDLIN(  84)											if ((this145 == 0)) {
HXLINE(  84)												a210 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												a210 = (( (Float)(this145) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float r28;
HXDLIN(  84)											int this146 = ((col4 >> 16) & 255);
HXDLIN(  84)											if ((this146 == 0)) {
HXLINE(  84)												r28 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												r28 = (( (Float)(this146) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float g28;
HXDLIN(  84)											int this147 = ((col4 >> 8) & 255);
HXDLIN(  84)											if ((this147 == 0)) {
HXLINE(  84)												g28 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												g28 = (( (Float)(this147) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float b212;
HXDLIN(  84)											int this148 = (col4 & 255);
HXDLIN(  84)											if ((this148 == 0)) {
HXLINE(  84)												b212 = ((Float)0.);
            											}
            											else {
HXLINE(  84)												b212 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN(  84)											Float a38 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  84)											int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a38) + (r28 * a210))));
HXDLIN(  84)											int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a38) + (g28 * a210))));
HXDLIN(  84)											int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a38) + (b212 * a210))));
HXDLIN(  84)											int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN(  84)											int blended8 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b36);
HXDLIN(  84)											{
HXLINE(  84)												int _hx_tmp34;
HXDLIN(  84)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)													_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            												}
            												else {
HXLINE(  84)													_hx_tmp34 = blended8;
            												}
HXDLIN(  84)												::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp34);
            											}
            										}
            										else {
HXLINE(  84)											::Dynamic this149 = undoImage12->image;
HXDLIN(  84)											int index20;
HXDLIN(  84)											if (undoImage12->useVirtualPos) {
HXLINE(  84)												index20 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            											}
            											else {
HXLINE(  84)												index20 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            											}
HXDLIN(  84)											int _hx_tmp35;
HXDLIN(  84)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)												_hx_tmp35 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            											}
            											else {
HXLINE(  84)												_hx_tmp35 = c16;
            											}
HXDLIN(  84)											::iterMagic::Iimg_obj::set(this149,index20,_hx_tmp35);
            										}
            									}
            									else {
HXLINE(  84)										if (forceClear4) {
HXLINE(  84)											::Dynamic this150 = undoImage12->image;
HXDLIN(  84)											int x16 = (dx5 - rectLeft4);
HXDLIN(  84)											int y16 = (dy5 - rectTop4);
HXDLIN(  84)											int index21;
HXDLIN(  84)											if (undoImage12->useVirtualPos) {
HXLINE(  84)												index21 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x16) - undoImage12->virtualX));
            											}
            											else {
HXLINE(  84)												index21 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage12->width) + x16)) ));
            											}
HXDLIN(  84)											::iterMagic::Iimg_obj::set(this150,index21,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  84)			bool found4 = false;
HXDLIN(  84)			{
HXLINE(  84)				int _g_min8 = xIter34->start;
HXDLIN(  84)				int _g_max8 = xIter34->max;
HXDLIN(  84)				while((_g_min8 < _g_max8)){
HXLINE(  84)					_g_min8 = (_g_min8 + 1);
HXDLIN(  84)					int px2 = (_g_min8 - 1);
HXDLIN(  84)					Float pcx2 = (( (Float)(px2) ) - dx);
HXLINE( 619)					found4 = false;
HXLINE(  84)					{
HXLINE(  84)						int _g_min9 = yIter34->start;
HXDLIN(  84)						int _g_max9 = yIter34->max;
HXDLIN(  84)						while((_g_min9 < _g_max9)){
HXLINE(  84)							_g_min9 = (_g_min9 + 1);
HXDLIN(  84)							int py2 = (_g_min9 - 1);
HXDLIN(  84)							Float pcy2 = (( (Float)(py2) ) - dy);
HXDLIN(  84)							Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  84)							Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  84)							Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  84)							Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  84)							Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  84)							bool _hx_tmp36;
HXDLIN(  84)							bool _hx_tmp37;
HXDLIN(  84)							if ((ratioA2 >= 0)) {
HXLINE(  84)								_hx_tmp37 = (ratioB2 >= 0);
            							}
            							else {
HXLINE(  84)								_hx_tmp37 = false;
            							}
HXDLIN(  84)							if (_hx_tmp37) {
HXLINE(  84)								_hx_tmp36 = (ratioC2 >= 0);
            							}
            							else {
HXLINE(  84)								_hx_tmp36 = false;
            							}
HXDLIN(  84)							if (_hx_tmp36) {
HXLINE(  84)								int i38 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (softC * ratioB2)));
HXDLIN(  84)								if ((i38 > 255)) {
HXLINE(  24)									i38 = 255;
            								}
HXLINE(  84)								if ((i38 < 0)) {
HXLINE(  25)									i38 = 0;
            								}
HXLINE(  84)								int a39 = i38;
HXDLIN(  84)								int i39 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  84)								if ((i39 > 255)) {
HXLINE(  24)									i39 = 255;
            								}
HXLINE(  84)								if ((i39 < 0)) {
HXLINE(  25)									i39 = 0;
            								}
HXLINE(  84)								int r29 = i39;
HXDLIN(  84)								int i40 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  84)								if ((i40 > 255)) {
HXLINE(  24)									i40 = 255;
            								}
HXLINE(  84)								if ((i40 < 0)) {
HXLINE(  25)									i40 = 0;
            								}
HXLINE(  84)								int g29 = i40;
HXDLIN(  84)								int i41 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  84)								if ((i41 > 255)) {
HXLINE(  24)									i41 = 255;
            								}
HXLINE(  84)								if ((i41 < 0)) {
HXLINE(  25)									i41 = 0;
            								}
HXLINE(  84)								int b37 = i41;
HXDLIN(  84)								{
HXLINE(  84)									int location9;
HXDLIN(  84)									if (pixelImage->useVirtualPos) {
HXLINE(  84)										location9 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  84)										location9 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN(  84)									bool _hx_tmp38;
HXDLIN(  84)									if (pixelImage->transparent) {
HXLINE(  84)										_hx_tmp38 = (a39 < 254);
            									}
            									else {
HXLINE(  84)										_hx_tmp38 = false;
            									}
HXDLIN(  84)									if (_hx_tmp38) {
HXLINE(  84)										int this151 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN(  84)										int old2;
HXDLIN(  84)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)											old2 = ((((((this151 >> 24) & 255) << 24) | ((this151 & 255) << 16)) | (((this151 >> 8) & 255) << 8)) | ((this151 >> 16) & 255));
            										}
            										else {
HXLINE(  84)											old2 = this151;
            										}
HXDLIN(  84)										int rhs2 = ((((a39 << 24) | (r29 << 16)) | (g29 << 8)) | b37);
HXDLIN(  84)										Float a113;
HXDLIN(  84)										int this152 = ((old2 >> 24) & 255);
HXDLIN(  84)										if ((this152 == 0)) {
HXLINE(  84)											a113 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											a113 = (( (Float)(this152) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float r110;
HXDLIN(  84)										int this153 = ((old2 >> 16) & 255);
HXDLIN(  84)										if ((this153 == 0)) {
HXLINE(  84)											r110 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											r110 = (( (Float)(this153) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float g110;
HXDLIN(  84)										int this154 = ((old2 >> 8) & 255);
HXDLIN(  84)										if ((this154 == 0)) {
HXLINE(  84)											g110 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											g110 = (( (Float)(this154) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float b114;
HXDLIN(  84)										int this155 = (old2 & 255);
HXDLIN(  84)										if ((this155 == 0)) {
HXLINE(  84)											b114 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											b114 = (( (Float)(this155) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float a211;
HXDLIN(  84)										int this156 = ((rhs2 >> 24) & 255);
HXDLIN(  84)										if ((this156 == 0)) {
HXLINE(  84)											a211 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											a211 = (( (Float)(this156) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float r210;
HXDLIN(  84)										int this157 = ((rhs2 >> 16) & 255);
HXDLIN(  84)										if ((this157 == 0)) {
HXLINE(  84)											r210 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											r210 = (( (Float)(this157) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float g210;
HXDLIN(  84)										int this158 = ((rhs2 >> 8) & 255);
HXDLIN(  84)										if ((this158 == 0)) {
HXLINE(  84)											g210 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											g210 = (( (Float)(this158) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float b213;
HXDLIN(  84)										int this159 = (rhs2 & 255);
HXDLIN(  84)										if ((this159 == 0)) {
HXLINE(  84)											b213 = ((Float)0.);
            										}
            										else {
HXLINE(  84)											b213 = (( (Float)(this159) ) / ( (Float)(255) ));
            										}
HXDLIN(  84)										Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  84)										int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN(  84)										int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN(  84)										int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b213 * a211))));
HXDLIN(  84)										int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  84)										int blended9 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b38);
HXDLIN(  84)										{
HXLINE(  84)											int _hx_tmp39;
HXDLIN(  84)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)												_hx_tmp39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            											}
            											else {
HXLINE(  84)												_hx_tmp39 = blended9;
            											}
HXDLIN(  84)											::iterMagic::Iimg_obj::set(pixelImage->image,location9,_hx_tmp39);
            										}
            									}
            									else {
HXLINE(  84)										int value2;
HXDLIN(  84)										if (pixelImage->isLittle) {
HXLINE(  84)											value2 = ((((a39 << 24) | (b37 << 16)) | (g29 << 8)) | r29);
            										}
            										else {
HXLINE(  84)											value2 = ((((a39 << 24) | (r29 << 16)) | (g29 << 8)) | b37);
            										}
HXDLIN(  84)										::iterMagic::Iimg_obj::set(pixelImage->image,location9,value2);
            									}
            								}
HXLINE( 633)								found4 = true;
            							}
            							else {
HXLINE(  84)								if (found4) {
HXLINE(  84)									goto _hx_goto_108;
            								}
            							}
            						}
            						_hx_goto_108:;
            					}
            				}
            			}
HXDLIN(  84)			{
HXLINE(  84)				 ::pi_xy::algo::HitTri v12 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,cx,cy,dx,dy,true);
HXDLIN(  84)				if (hasUndo4) {
HXLINE(  84)					v12->undoImage = undoImage12;
HXDLIN(  84)					v12->undoX = xIter34->start;
HXDLIN(  84)					v12->undoY = yIter34->start;
            				}
            			}
            		}
            		else {
HXLINE(  86)			Float bx3 = cx;
HXDLIN(  86)			Float by3 = cy;
HXDLIN(  86)			Float cx3 = dx;
HXDLIN(  86)			Float cy3 = dy;
HXDLIN(  86)			bool hasUndo5 = false;
HXDLIN(  86)			bool adjustWinding2 = (((((ex * by3) - (bx3 * ey)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ey) - (ex * cy3))) > 0);
HXDLIN(  86)			if (!(adjustWinding2)) {
HXLINE(  86)				Float bx_2 = bx3;
HXDLIN(  86)				Float by_2 = by3;
HXLINE(  25)				bx3 = cx3;
HXLINE(  26)				by3 = cy3;
HXLINE(  27)				cx3 = bx_2;
HXLINE(  28)				cy3 = by_2;
            			}
HXLINE(  86)			{
HXLINE(  86)				Float s02 = ((ey * cx3) - (ex * cy3));
HXDLIN(  86)				Float sx2 = (cy3 - ey);
HXDLIN(  86)				Float sy2 = (ex - cx3);
HXDLIN(  86)				Float t02 = ((ex * by3) - (ey * bx3));
HXDLIN(  86)				Float tx2 = (ey - by3);
HXDLIN(  86)				Float ty2 = (bx3 - ex);
HXDLIN(  86)				Float A2 = ((((-(by3) * cx3) + (ey * (-(bx3) + cx3))) + (ex * (by3 - cy3))) + (bx3 * cy3));
HXDLIN(  86)				 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  86)				if ((ex > bx3)) {
HXLINE(  86)					if ((ex > cx3)) {
HXLINE(  86)						int min20;
HXDLIN(  86)						if ((bx3 > cx3)) {
HXLINE(  86)							min20 = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE(  86)							min20 = ::Math_obj::floor(bx3);
            						}
HXDLIN(  86)						int ii_min40 = min20;
HXDLIN(  86)						int ii_max40 = ::Math_obj::ceil(ex);
HXDLIN(  86)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXLINE(  86)						int ii_min41 = ::Math_obj::floor(bx3);
HXDLIN(  86)						int ii_max41 = ::Math_obj::ceil(cx3);
HXDLIN(  86)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXLINE(  86)					if ((bx3 > cx3)) {
HXLINE(  86)						int min21;
HXDLIN(  86)						if ((ex > cx3)) {
HXLINE(  86)							min21 = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE(  86)							min21 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  86)						int ii_min42 = min21;
HXDLIN(  86)						int ii_max42 = ::Math_obj::ceil(bx3);
HXDLIN(  86)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXLINE(  86)						int ii_min43 = ::Math_obj::floor(ex);
HXDLIN(  86)						int ii_max43 = ::Math_obj::ceil(cx3);
HXDLIN(  86)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN(  86)				 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  86)				if ((ey > by3)) {
HXLINE(  86)					if ((ey > cy3)) {
HXLINE(  86)						int min22;
HXDLIN(  86)						if ((by3 > cy3)) {
HXLINE(  86)							min22 = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE(  86)							min22 = ::Math_obj::floor(by3);
            						}
HXDLIN(  86)						int ii_min44 = min22;
HXDLIN(  86)						int ii_max44 = ::Math_obj::ceil(ey);
HXDLIN(  86)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXLINE(  86)						int ii_min45 = ::Math_obj::floor(by3);
HXDLIN(  86)						int ii_max45 = ::Math_obj::ceil(cy3);
HXDLIN(  86)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXLINE(  86)					if ((by3 > cy3)) {
HXLINE(  86)						int min23;
HXDLIN(  86)						if ((ey > cy3)) {
HXLINE(  86)							min23 = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE(  86)							min23 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  86)						int ii_min46 = min23;
HXDLIN(  86)						int ii_max46 = ::Math_obj::ceil(by3);
HXDLIN(  86)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXLINE(  86)						int ii_min47 = ::Math_obj::floor(ey);
HXDLIN(  86)						int ii_max47 = ::Math_obj::ceil(cy3);
HXDLIN(  86)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN(  86)				 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  86)				if (hasUndo5) {
HXLINE(  86)					int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  86)					int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  86)					 ::Dynamic imageType5 = null();
HXDLIN(  86)					 ::pi_xy::ImageStruct this160 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  86)					if (::hx::IsNull( imageType5 )) {
HXLINE(  54)						imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  86)					::Dynamic undoImage16;
HXDLIN(  86)					switch((int)(( (int)(imageType5) ))){
            						case (int)0: {
HXLINE(  86)							 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  86)							 ::iterMagic::BytesImg b39 = byt5;
HXDLIN(  86)							{
HXLINE(  86)								b39->width = width5;
HXDLIN(  86)								b39->height = height5;
HXDLIN(  86)								b39->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  86)								b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN(  86)								{
HXLINE(  86)									int len10 = b39->length;
HXDLIN(  86)									int w5 = 0;
HXDLIN(  86)									{
HXLINE(  86)										int _g100 = 0;
HXDLIN(  86)										int _g101 = b39->height;
HXDLIN(  86)										while((_g100 < _g101)){
HXLINE(  86)											_g100 = (_g100 + 1);
HXDLIN(  86)											int y17 = (_g100 - 1);
HXDLIN(  86)											{
HXLINE(  86)												int _g102 = 0;
HXDLIN(  86)												int _g103 = b39->width;
HXDLIN(  86)												while((_g102 < _g103)){
HXLINE(  86)													_g102 = (_g102 + 1);
HXDLIN(  86)													int x17 = (_g102 - 1);
HXDLIN(  86)													{
HXLINE(  86)														w5 = (w5 + 1);
HXDLIN(  86)														b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  86)													{
HXLINE(  86)														w5 = (w5 + 1);
HXDLIN(  86)														b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  86)													{
HXLINE(  86)														w5 = (w5 + 1);
HXDLIN(  86)														b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  86)													{
HXLINE(  86)														w5 = (w5 + 1);
HXDLIN(  86)														b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  86)							undoImage16 = b39;
            						}
            						break;
            						case (int)1: {
HXLINE(  86)							 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)							 ::iterMagic::ArrIntImg a41 = arrI5;
HXDLIN(  86)							{
HXLINE(  86)								a41->width = width5;
HXDLIN(  86)								a41->height = height5;
HXDLIN(  86)								a41->data = ::Array_obj< int >::__new(0);
HXDLIN(  86)								a41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  86)								{
HXLINE(  86)									int _g104 = 0;
HXDLIN(  86)									int _g105 = a41->length;
HXDLIN(  86)									while((_g104 < _g105)){
HXLINE(  86)										_g104 = (_g104 + 1);
HXDLIN(  86)										int i42 = (_g104 - 1);
HXDLIN(  86)										a41->data[i42] = 0;
            									}
            								}
            							}
HXDLIN(  86)							undoImage16 = a41;
            						}
            						break;
            						case (int)2: {
HXLINE(  86)							 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  86)							 ::iterMagic::U32ArrImg b40 = u32a5;
HXDLIN(  86)							{
HXLINE(  86)								b40->width = width5;
HXDLIN(  86)								b40->height = height5;
HXDLIN(  86)								b40->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  86)								int size5 = (b40->length * 4);
HXDLIN(  86)								b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  86)								{
HXLINE(  86)									int _g106 = 0;
HXDLIN(  86)									int _g107 = b40->length;
HXDLIN(  86)									while((_g106 < _g107)){
HXLINE(  86)										_g106 = (_g106 + 1);
HXDLIN(  86)										int i43 = (_g106 - 1);
HXDLIN(  86)										{
HXLINE(  86)											 ::haxe::io::ArrayBufferViewImpl this161 = b40->data;
HXDLIN(  86)											bool undoImage17;
HXDLIN(  86)											if ((i43 >= 0)) {
HXLINE(  86)												undoImage17 = (i43 < (this161->byteLength >> 2));
            											}
            											else {
HXLINE(  86)												undoImage17 = false;
            											}
HXDLIN(  86)											if (undoImage17) {
HXLINE(  86)												 ::haxe::io::Bytes _this5 = this161->bytes;
HXDLIN(  86)												int pos5 = ((i43 << 2) + this161->byteOffset);
HXDLIN(  86)												_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  86)												_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  86)												_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  86)												_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  86)							undoImage16 = b40;
            						}
            						break;
            						case (int)3: {
HXLINE(  86)							 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)							 ::iterMagic::VecIntImg v13 = vec5;
HXDLIN(  86)							{
HXLINE(  86)								v13->width = width5;
HXDLIN(  86)								v13->height = height5;
HXDLIN(  86)								v13->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  86)								v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  86)								{
HXLINE(  86)									int _g108 = 0;
HXDLIN(  86)									int _g109 = v13->length;
HXDLIN(  86)									while((_g108 < _g109)){
HXLINE(  86)										_g108 = (_g108 + 1);
HXDLIN(  86)										int i44 = (_g108 - 1);
HXDLIN(  86)										v13->data->__unsafe_set(i44,0);
            									}
            								}
            							}
HXDLIN(  86)							undoImage16 = v13;
            						}
            						break;
            						case (int)4: {
HXLINE(  86)							 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)							 ::iterMagic::StackIntImg b41 = sInt5;
HXDLIN(  86)							{
HXLINE(  86)								b41->width = width5;
HXDLIN(  86)								b41->height = height5;
HXDLIN(  86)								b41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  86)								b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  86)								{
HXLINE(  86)									int len11 = b41->length;
HXDLIN(  86)									 ::haxe::ds::GenericStack_Int d5 = b41->data;
HXDLIN(  86)									if (::hx::IsNull( d5->head )) {
HXLINE(  86)										int _g110 = 0;
HXDLIN(  86)										int _g111 = len11;
HXDLIN(  86)										while((_g110 < _g111)){
HXLINE(  86)											_g110 = (_g110 + 1);
HXDLIN(  86)											int i45 = (_g110 - 1);
HXDLIN(  86)											d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            										}
            									}
            									else {
HXLINE(  86)										int _g112 = 0;
HXDLIN(  86)										int _g113 = len11;
HXDLIN(  86)										while((_g112 < _g113)){
HXLINE(  86)											_g112 = (_g112 + 1);
HXDLIN(  86)											int i46 = (_g112 - 1);
HXDLIN(  86)											{
HXLINE(  86)												 ::haxe::ds::GenericCell_Int l5 = b41->data->head;
HXDLIN(  86)												 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  86)												{
HXLINE(  86)													int _g114 = 0;
HXDLIN(  86)													int _g115 = i46;
HXDLIN(  86)													while((_g114 < _g115)){
HXLINE(  86)														_g114 = (_g114 + 1);
HXDLIN(  86)														int i47 = (_g114 - 1);
HXLINE( 345)														prev5 = l5;
HXLINE( 346)														l5 = l5->next;
            													}
            												}
HXLINE(  86)												if (::hx::IsNull( prev5 )) {
HXLINE(  86)													b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  86)													l5 = null();
            												}
            												else {
HXLINE(  86)													prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  86)													l5 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  86)							undoImage16 = b41;
            						}
            						break;
            					}
HXDLIN(  86)					this160->image = undoImage16;
HXDLIN(  86)					this160->width = width5;
HXDLIN(  86)					this160->height = height5;
HXDLIN(  86)					this160->imageType = ( (int)(imageType5) );
HXDLIN(  86)					undoImage15 = this160;
HXDLIN(  86)					{
HXLINE(  86)						int rectLeft5 = xIter35->start;
HXDLIN(  86)						int rectTop5 = yIter35->start;
HXDLIN(  86)						int rectRight5 = xIter35->max;
HXDLIN(  86)						bool forceClear5 = false;
HXDLIN(  86)						{
HXLINE(  86)							int _g116 = rectTop5;
HXDLIN(  86)							int _g117 = yIter35->max;
HXDLIN(  86)							while((_g116 < _g117)){
HXLINE(  86)								_g116 = (_g116 + 1);
HXDLIN(  86)								int dy6 = (_g116 - 1);
HXDLIN(  86)								{
HXLINE(  86)									int _g118 = rectLeft5;
HXDLIN(  86)									int _g119 = rectRight5;
HXDLIN(  86)									while((_g118 < _g119)){
HXLINE(  86)										_g118 = (_g118 + 1);
HXDLIN(  86)										int dx6 = (_g118 - 1);
HXDLIN(  86)										::Dynamic this162 = pixelImage->image;
HXDLIN(  86)										int index22;
HXDLIN(  86)										if (pixelImage->useVirtualPos) {
HXLINE(  86)											index22 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx6) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  86)											index22 = ::Std_obj::_hx_int(( (Float)(((dy6 * pixelImage->width) + dx6)) ));
            										}
HXDLIN(  86)										int c17 = ::iterMagic::Iimg_obj::get(this162,index22);
HXDLIN(  86)										int col5;
HXDLIN(  86)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)											col5 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            										}
            										else {
HXLINE(  86)											col5 = c17;
            										}
HXDLIN(  86)										bool _hx_tmp40;
HXDLIN(  86)										if (pixelImage->useMask) {
HXLINE(  86)											_hx_tmp40 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  86)											_hx_tmp40 = false;
            										}
HXDLIN(  86)										if (_hx_tmp40) {
HXLINE(  86)											 ::pi_xy::ImageStruct this163 = pixelImage->mask;
HXDLIN(  86)											::Dynamic this164 = this163->image;
HXDLIN(  86)											int index23;
HXDLIN(  86)											if (this163->useVirtualPos) {
HXLINE(  86)												index23 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this163->virtualY) * ( (Float)(this163->width) )) + dx6) - this163->virtualX));
            											}
            											else {
HXLINE(  86)												index23 = ::Std_obj::_hx_int(( (Float)(((dy6 * this163->width) + dx6)) ));
            											}
HXDLIN(  86)											int c18 = ::iterMagic::Iimg_obj::get(this164,index23);
HXDLIN(  86)											int v14;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)												v14 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            											}
            											else {
HXLINE(  86)												v14 = c18;
            											}
HXDLIN(  86)											int maskPixel5 = v14;
HXDLIN(  86)											int this165 = col5;
HXDLIN(  86)											if ((maskPixel5 == 0)) {
HXLINE(  86)												col5 = this165;
            											}
            											else {
HXLINE(  86)												Float m05;
HXDLIN(  86)												int this166 = ((maskPixel5 >> 24) & 255);
HXDLIN(  86)												if ((this166 == 0)) {
HXLINE(  86)													m05 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													m05 = (( (Float)(this166) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float m15;
HXDLIN(  86)												int this167 = ((maskPixel5 >> 16) & 255);
HXDLIN(  86)												if ((this167 == 0)) {
HXLINE(  86)													m15 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													m15 = (( (Float)(this167) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float m25;
HXDLIN(  86)												int this168 = ((maskPixel5 >> 8) & 255);
HXDLIN(  86)												if ((this168 == 0)) {
HXLINE(  86)													m25 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													m25 = (( (Float)(this168) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float m35;
HXDLIN(  86)												int this169 = (maskPixel5 & 255);
HXDLIN(  86)												if ((this169 == 0)) {
HXLINE(  86)													m35 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													m35 = (( (Float)(this169) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this165 >> 24) & 255)) )));
HXDLIN(  86)												int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this165 >> 16) & 255)) )));
HXDLIN(  86)												int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this165 >> 8) & 255)) )));
HXDLIN(  86)												int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this165 & 255)) )));
HXDLIN(  86)												col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  86)										if ((col5 != 0)) {
HXLINE(  86)											int x18 = (dx6 - rectLeft5);
HXDLIN(  86)											int y18 = (dy6 - rectTop5);
HXDLIN(  86)											int c19 = col5;
HXDLIN(  86)											bool _hx_tmp41;
HXDLIN(  86)											if ((((c19 >> 24) & 255) < 254)) {
HXLINE(  86)												_hx_tmp41 = undoImage15->transparent;
            											}
            											else {
HXLINE(  86)												_hx_tmp41 = false;
            											}
HXDLIN(  86)											if (_hx_tmp41) {
HXLINE(  86)												int location10;
HXDLIN(  86)												if (undoImage15->useVirtualPos) {
HXLINE(  86)													location10 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  86)													location10 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN(  86)												int this170 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  86)												int this171;
HXDLIN(  86)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)													this171 = ((((((this170 >> 24) & 255) << 24) | ((this170 & 255) << 16)) | (((this170 >> 8) & 255) << 8)) | ((this170 >> 16) & 255));
            												}
            												else {
HXLINE(  86)													this171 = this170;
            												}
HXDLIN(  86)												Float a114;
HXDLIN(  86)												int this172 = ((this171 >> 24) & 255);
HXDLIN(  86)												if ((this172 == 0)) {
HXLINE(  86)													a114 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													a114 = (( (Float)(this172) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float r111;
HXDLIN(  86)												int this173 = ((this171 >> 16) & 255);
HXDLIN(  86)												if ((this173 == 0)) {
HXLINE(  86)													r111 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													r111 = (( (Float)(this173) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float g111;
HXDLIN(  86)												int this174 = ((this171 >> 8) & 255);
HXDLIN(  86)												if ((this174 == 0)) {
HXLINE(  86)													g111 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													g111 = (( (Float)(this174) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float b115;
HXDLIN(  86)												int this175 = (this171 & 255);
HXDLIN(  86)												if ((this175 == 0)) {
HXLINE(  86)													b115 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													b115 = (( (Float)(this175) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float a212;
HXDLIN(  86)												int this176 = ((col5 >> 24) & 255);
HXDLIN(  86)												if ((this176 == 0)) {
HXLINE(  86)													a212 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													a212 = (( (Float)(this176) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float r211;
HXDLIN(  86)												int this177 = ((col5 >> 16) & 255);
HXDLIN(  86)												if ((this177 == 0)) {
HXLINE(  86)													r211 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													r211 = (( (Float)(this177) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float g211;
HXDLIN(  86)												int this178 = ((col5 >> 8) & 255);
HXDLIN(  86)												if ((this178 == 0)) {
HXLINE(  86)													g211 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													g211 = (( (Float)(this178) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float b214;
HXDLIN(  86)												int this179 = (col5 & 255);
HXDLIN(  86)												if ((this179 == 0)) {
HXLINE(  86)													b214 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													b214 = (( (Float)(this179) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  86)												int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r211 * a212))));
HXDLIN(  86)												int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g211 * a212))));
HXDLIN(  86)												int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b214 * a212))));
HXDLIN(  86)												int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  86)												int blended10 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b42);
HXDLIN(  86)												{
HXLINE(  86)													int _hx_tmp42;
HXDLIN(  86)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)														_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            													}
            													else {
HXLINE(  86)														_hx_tmp42 = blended10;
            													}
HXDLIN(  86)													::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp42);
            												}
            											}
            											else {
HXLINE(  86)												::Dynamic this180 = undoImage15->image;
HXDLIN(  86)												int index24;
HXDLIN(  86)												if (undoImage15->useVirtualPos) {
HXLINE(  86)													index24 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  86)													index24 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN(  86)												int _hx_tmp43;
HXDLIN(  86)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)													_hx_tmp43 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            												}
            												else {
HXLINE(  86)													_hx_tmp43 = c19;
            												}
HXDLIN(  86)												::iterMagic::Iimg_obj::set(this180,index24,_hx_tmp43);
            											}
            										}
            										else {
HXLINE(  86)											if (forceClear5) {
HXLINE(  86)												::Dynamic this181 = undoImage15->image;
HXDLIN(  86)												int x19 = (dx6 - rectLeft5);
HXDLIN(  86)												int y19 = (dy6 - rectTop5);
HXDLIN(  86)												int index25;
HXDLIN(  86)												if (undoImage15->useVirtualPos) {
HXLINE(  86)													index25 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x19) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  86)													index25 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage15->width) + x19)) ));
            												}
HXDLIN(  86)												::iterMagic::Iimg_obj::set(this181,index25,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  86)				bool found5 = false;
HXDLIN(  86)				Float s2 = ((Float)0.);
HXDLIN(  86)				Float t2 = ((Float)0.);
HXDLIN(  86)				Float sxx2 = ((Float)0.);
HXDLIN(  86)				Float txx2 = ((Float)0.);
HXDLIN(  86)				{
HXLINE(  86)					int _g_min10 = xIter35->start;
HXDLIN(  86)					int _g_max10 = xIter35->max;
HXDLIN(  86)					while((_g_min10 < _g_max10)){
HXLINE(  86)						_g_min10 = (_g_min10 + 1);
HXDLIN(  86)						int x20 = (_g_min10 - 1);
HXLINE(  60)						sxx2 = (sx2 * ( (Float)(x20) ));
HXLINE(  61)						txx2 = (tx2 * ( (Float)(x20) ));
HXLINE(  62)						found5 = false;
HXLINE(  86)						{
HXLINE(  86)							int _g_min11 = yIter35->start;
HXDLIN(  86)							int _g_max11 = yIter35->max;
HXDLIN(  86)							while((_g_min11 < _g_max11)){
HXLINE(  86)								_g_min11 = (_g_min11 + 1);
HXDLIN(  86)								int y20 = (_g_min11 - 1);
HXLINE(  64)								s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y20) )));
HXLINE(  65)								t2 = ((t02 + txx2) + (ty2 * ( (Float)(y20) )));
HXLINE(  86)								bool _hx_tmp44;
HXDLIN(  86)								if (!((s2 <= 0))) {
HXLINE(  86)									_hx_tmp44 = (t2 <= 0);
            								}
            								else {
HXLINE(  86)									_hx_tmp44 = true;
            								}
HXDLIN(  86)								if (_hx_tmp44) {
HXLINE(  86)									if (found5) {
HXLINE(  86)										goto _hx_goto_120;
            									}
            								}
            								else {
HXLINE(  86)									if (((s2 + t2) < A2)) {
HXLINE(  86)										{
HXLINE(  86)											int c20 = color;
HXDLIN(  86)											bool _hx_tmp45;
HXDLIN(  86)											if ((((c20 >> 24) & 255) < 254)) {
HXLINE(  86)												_hx_tmp45 = pixelImage->transparent;
            											}
            											else {
HXLINE(  86)												_hx_tmp45 = false;
            											}
HXDLIN(  86)											if (_hx_tmp45) {
HXLINE(  86)												int location11;
HXDLIN(  86)												if (pixelImage->useVirtualPos) {
HXLINE(  86)													location11 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x20) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  86)													location11 = ::Std_obj::_hx_int(( (Float)(((y20 * pixelImage->width) + x20)) ));
            												}
HXDLIN(  86)												int this182 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN(  86)												int this183;
HXDLIN(  86)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)													this183 = ((((((this182 >> 24) & 255) << 24) | ((this182 & 255) << 16)) | (((this182 >> 8) & 255) << 8)) | ((this182 >> 16) & 255));
            												}
            												else {
HXLINE(  86)													this183 = this182;
            												}
HXDLIN(  86)												Float a115;
HXDLIN(  86)												int this184 = ((this183 >> 24) & 255);
HXDLIN(  86)												if ((this184 == 0)) {
HXLINE(  86)													a115 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													a115 = (( (Float)(this184) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float r112;
HXDLIN(  86)												int this185 = ((this183 >> 16) & 255);
HXDLIN(  86)												if ((this185 == 0)) {
HXLINE(  86)													r112 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													r112 = (( (Float)(this185) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float g112;
HXDLIN(  86)												int this186 = ((this183 >> 8) & 255);
HXDLIN(  86)												if ((this186 == 0)) {
HXLINE(  86)													g112 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													g112 = (( (Float)(this186) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float b116;
HXDLIN(  86)												int this187 = (this183 & 255);
HXDLIN(  86)												if ((this187 == 0)) {
HXLINE(  86)													b116 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													b116 = (( (Float)(this187) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float a213;
HXDLIN(  86)												int this188 = ((color >> 24) & 255);
HXDLIN(  86)												if ((this188 == 0)) {
HXLINE(  86)													a213 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													a213 = (( (Float)(this188) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float r212;
HXDLIN(  86)												int this189 = ((color >> 16) & 255);
HXDLIN(  86)												if ((this189 == 0)) {
HXLINE(  86)													r212 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													r212 = (( (Float)(this189) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float g212;
HXDLIN(  86)												int this190 = ((color >> 8) & 255);
HXDLIN(  86)												if ((this190 == 0)) {
HXLINE(  86)													g212 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													g212 = (( (Float)(this190) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float b215;
HXDLIN(  86)												int this191 = (color & 255);
HXDLIN(  86)												if ((this191 == 0)) {
HXLINE(  86)													b215 = ((Float)0.);
            												}
            												else {
HXLINE(  86)													b215 = (( (Float)(this191) ) / ( (Float)(255) ));
            												}
HXDLIN(  86)												Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  86)												int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r212 * a213))));
HXDLIN(  86)												int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g212 * a213))));
HXDLIN(  86)												int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b215 * a213))));
HXDLIN(  86)												int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  86)												int blended11 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b43);
HXDLIN(  86)												{
HXLINE(  86)													int _hx_tmp46;
HXDLIN(  86)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)														_hx_tmp46 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            													}
            													else {
HXLINE(  86)														_hx_tmp46 = blended11;
            													}
HXDLIN(  86)													::iterMagic::Iimg_obj::set(pixelImage->image,location11,_hx_tmp46);
            												}
            											}
            											else {
HXLINE(  86)												::Dynamic this192 = pixelImage->image;
HXDLIN(  86)												int index26;
HXDLIN(  86)												if (pixelImage->useVirtualPos) {
HXLINE(  86)													index26 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x20) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  86)													index26 = ::Std_obj::_hx_int(( (Float)(((y20 * pixelImage->width) + x20)) ));
            												}
HXDLIN(  86)												int _hx_tmp47;
HXDLIN(  86)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)													_hx_tmp47 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            												}
            												else {
HXLINE(  86)													_hx_tmp47 = c20;
            												}
HXDLIN(  86)												::iterMagic::Iimg_obj::set(this192,index26,_hx_tmp47);
            											}
            										}
HXLINE(  73)										found5 = true;
            									}
            									else {
HXLINE(  86)										if (found5) {
HXLINE(  86)											goto _hx_goto_120;
            										}
            									}
            								}
            							}
            							_hx_goto_120:;
            						}
            					}
            				}
            			}
            		}
HXLINE(  89)		if (softLeft) {
HXLINE(  90)			bool hasUndo6 = false;
HXDLIN(  90)			int aA3 = ((color >> 24) & 255);
HXDLIN(  90)			int rA3 = ((color >> 16) & 255);
HXDLIN(  90)			int gA3 = ((color >> 8) & 255);
HXDLIN(  90)			int bA3 = (color & 255);
HXDLIN(  90)			Float bcx3 = (dx - ax);
HXDLIN(  90)			Float bcy3 = (dy - ay);
HXDLIN(  90)			Float acx3 = (ex - ax);
HXDLIN(  90)			Float acy3 = (ey - ay);
HXDLIN(  90)			Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  90)			Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  90)			Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  90)			Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  90)			 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  90)			if ((ex > dx)) {
HXLINE(  90)				if ((ex > ax)) {
HXLINE(  90)					int min24;
HXDLIN(  90)					if ((dx > ax)) {
HXLINE(  90)						min24 = ::Math_obj::floor(ax);
            					}
            					else {
HXLINE(  90)						min24 = ::Math_obj::floor(dx);
            					}
HXDLIN(  90)					int ii_min48 = min24;
HXDLIN(  90)					int ii_max48 = ::Math_obj::ceil(ex);
HXDLIN(  90)					xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            				}
            				else {
HXLINE(  90)					int ii_min49 = ::Math_obj::floor(dx);
HXDLIN(  90)					int ii_max49 = ::Math_obj::ceil(ax);
HXDLIN(  90)					xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            				}
            			}
            			else {
HXLINE(  90)				if ((dx > ax)) {
HXLINE(  90)					int min25;
HXDLIN(  90)					if ((ex > ax)) {
HXLINE(  90)						min25 = ::Math_obj::floor(ax);
            					}
            					else {
HXLINE(  90)						min25 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  90)					int ii_min50 = min25;
HXDLIN(  90)					int ii_max50 = ::Math_obj::ceil(dx);
HXDLIN(  90)					xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            				}
            				else {
HXLINE(  90)					int ii_min51 = ::Math_obj::floor(ex);
HXDLIN(  90)					int ii_max51 = ::Math_obj::ceil(ax);
HXDLIN(  90)					xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            				}
            			}
HXDLIN(  90)			 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  90)			if ((ey > dy)) {
HXLINE(  90)				if ((ey > ay)) {
HXLINE(  90)					int min26;
HXDLIN(  90)					if ((dy > ay)) {
HXLINE(  90)						min26 = ::Math_obj::floor(ay);
            					}
            					else {
HXLINE(  90)						min26 = ::Math_obj::floor(dy);
            					}
HXDLIN(  90)					int ii_min52 = min26;
HXDLIN(  90)					int ii_max52 = ::Math_obj::ceil(ey);
HXDLIN(  90)					yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            				}
            				else {
HXLINE(  90)					int ii_min53 = ::Math_obj::floor(dy);
HXDLIN(  90)					int ii_max53 = ::Math_obj::ceil(ay);
HXDLIN(  90)					yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            				}
            			}
            			else {
HXLINE(  90)				if ((dy > ay)) {
HXLINE(  90)					int min27;
HXDLIN(  90)					if ((ey > ay)) {
HXLINE(  90)						min27 = ::Math_obj::floor(ay);
            					}
            					else {
HXLINE(  90)						min27 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  90)					int ii_min54 = min27;
HXDLIN(  90)					int ii_max54 = ::Math_obj::ceil(dy);
HXDLIN(  90)					yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            				}
            				else {
HXLINE(  90)					int ii_min55 = ::Math_obj::floor(ey);
HXDLIN(  90)					int ii_max55 = ::Math_obj::ceil(ay);
HXDLIN(  90)					yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            				}
            			}
HXDLIN(  90)			 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  90)			if (hasUndo6) {
HXLINE(  90)				int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  90)				int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  90)				 ::Dynamic imageType6 = null();
HXDLIN(  90)				 ::pi_xy::ImageStruct this193 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  90)				if (::hx::IsNull( imageType6 )) {
HXLINE(  54)					imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  90)				::Dynamic undoImage19;
HXDLIN(  90)				switch((int)(( (int)(imageType6) ))){
            					case (int)0: {
HXLINE(  90)						 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::BytesImg b44 = byt6;
HXDLIN(  90)						{
HXLINE(  90)							b44->width = width6;
HXDLIN(  90)							b44->height = height6;
HXDLIN(  90)							b44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  90)							b44->data = ::haxe::io::Bytes_obj::alloc((b44->length * 4));
HXDLIN(  90)							{
HXLINE(  90)								int len12 = b44->length;
HXDLIN(  90)								int w6 = 0;
HXDLIN(  90)								{
HXLINE(  90)									int _g120 = 0;
HXDLIN(  90)									int _g121 = b44->height;
HXDLIN(  90)									while((_g120 < _g121)){
HXLINE(  90)										_g120 = (_g120 + 1);
HXDLIN(  90)										int y21 = (_g120 - 1);
HXDLIN(  90)										{
HXLINE(  90)											int _g122 = 0;
HXDLIN(  90)											int _g123 = b44->width;
HXDLIN(  90)											while((_g122 < _g123)){
HXLINE(  90)												_g122 = (_g122 + 1);
HXDLIN(  90)												int x21 = (_g122 - 1);
HXDLIN(  90)												{
HXLINE(  90)													w6 = (w6 + 1);
HXDLIN(  90)													b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  90)												{
HXLINE(  90)													w6 = (w6 + 1);
HXDLIN(  90)													b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  90)												{
HXLINE(  90)													w6 = (w6 + 1);
HXDLIN(  90)													b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  90)												{
HXLINE(  90)													w6 = (w6 + 1);
HXDLIN(  90)													b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  90)						undoImage19 = b44;
            					}
            					break;
            					case (int)1: {
HXLINE(  90)						 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::ArrIntImg a44 = arrI6;
HXDLIN(  90)						{
HXLINE(  90)							a44->width = width6;
HXDLIN(  90)							a44->height = height6;
HXDLIN(  90)							a44->data = ::Array_obj< int >::__new(0);
HXDLIN(  90)							a44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  90)							{
HXLINE(  90)								int _g124 = 0;
HXDLIN(  90)								int _g125 = a44->length;
HXDLIN(  90)								while((_g124 < _g125)){
HXLINE(  90)									_g124 = (_g124 + 1);
HXDLIN(  90)									int i48 = (_g124 - 1);
HXDLIN(  90)									a44->data[i48] = 0;
            								}
            							}
            						}
HXDLIN(  90)						undoImage19 = a44;
            					}
            					break;
            					case (int)2: {
HXLINE(  90)						 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::U32ArrImg b45 = u32a6;
HXDLIN(  90)						{
HXLINE(  90)							b45->width = width6;
HXDLIN(  90)							b45->height = height6;
HXDLIN(  90)							b45->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  90)							int size6 = (b45->length * 4);
HXDLIN(  90)							b45->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  90)							{
HXLINE(  90)								int _g126 = 0;
HXDLIN(  90)								int _g127 = b45->length;
HXDLIN(  90)								while((_g126 < _g127)){
HXLINE(  90)									_g126 = (_g126 + 1);
HXDLIN(  90)									int i49 = (_g126 - 1);
HXDLIN(  90)									{
HXLINE(  90)										 ::haxe::io::ArrayBufferViewImpl this194 = b45->data;
HXDLIN(  90)										bool undoImage20;
HXDLIN(  90)										if ((i49 >= 0)) {
HXLINE(  90)											undoImage20 = (i49 < (this194->byteLength >> 2));
            										}
            										else {
HXLINE(  90)											undoImage20 = false;
            										}
HXDLIN(  90)										if (undoImage20) {
HXLINE(  90)											 ::haxe::io::Bytes _this6 = this194->bytes;
HXDLIN(  90)											int pos6 = ((i49 << 2) + this194->byteOffset);
HXDLIN(  90)											_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  90)											_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  90)											_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  90)											_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  90)						undoImage19 = b45;
            					}
            					break;
            					case (int)3: {
HXLINE(  90)						 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::VecIntImg v15 = vec6;
HXDLIN(  90)						{
HXLINE(  90)							v15->width = width6;
HXDLIN(  90)							v15->height = height6;
HXDLIN(  90)							v15->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  90)							v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN(  90)							{
HXLINE(  90)								int _g128 = 0;
HXDLIN(  90)								int _g129 = v15->length;
HXDLIN(  90)								while((_g128 < _g129)){
HXLINE(  90)									_g128 = (_g128 + 1);
HXDLIN(  90)									int i50 = (_g128 - 1);
HXDLIN(  90)									v15->data->__unsafe_set(i50,0);
            								}
            							}
            						}
HXDLIN(  90)						undoImage19 = v15;
            					}
            					break;
            					case (int)4: {
HXLINE(  90)						 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::StackIntImg b46 = sInt6;
HXDLIN(  90)						{
HXLINE(  90)							b46->width = width6;
HXDLIN(  90)							b46->height = height6;
HXDLIN(  90)							b46->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  90)							b46->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  90)							{
HXLINE(  90)								int len13 = b46->length;
HXDLIN(  90)								 ::haxe::ds::GenericStack_Int d6 = b46->data;
HXDLIN(  90)								if (::hx::IsNull( d6->head )) {
HXLINE(  90)									int _g130 = 0;
HXDLIN(  90)									int _g131 = len13;
HXDLIN(  90)									while((_g130 < _g131)){
HXLINE(  90)										_g130 = (_g130 + 1);
HXDLIN(  90)										int i51 = (_g130 - 1);
HXDLIN(  90)										d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            									}
            								}
            								else {
HXLINE(  90)									int _g132 = 0;
HXDLIN(  90)									int _g133 = len13;
HXDLIN(  90)									while((_g132 < _g133)){
HXLINE(  90)										_g132 = (_g132 + 1);
HXDLIN(  90)										int i52 = (_g132 - 1);
HXDLIN(  90)										{
HXLINE(  90)											 ::haxe::ds::GenericCell_Int l6 = b46->data->head;
HXDLIN(  90)											 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  90)											{
HXLINE(  90)												int _g134 = 0;
HXDLIN(  90)												int _g135 = i52;
HXDLIN(  90)												while((_g134 < _g135)){
HXLINE(  90)													_g134 = (_g134 + 1);
HXDLIN(  90)													int i53 = (_g134 - 1);
HXLINE( 345)													prev6 = l6;
HXLINE( 346)													l6 = l6->next;
            												}
            											}
HXLINE(  90)											if (::hx::IsNull( prev6 )) {
HXLINE(  90)												b46->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  90)												l6 = null();
            											}
            											else {
HXLINE(  90)												prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  90)												l6 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  90)						undoImage19 = b46;
            					}
            					break;
            				}
HXDLIN(  90)				this193->image = undoImage19;
HXDLIN(  90)				this193->width = width6;
HXDLIN(  90)				this193->height = height6;
HXDLIN(  90)				this193->imageType = ( (int)(imageType6) );
HXDLIN(  90)				undoImage18 = this193;
HXDLIN(  90)				{
HXLINE(  90)					int rectLeft6 = xIter36->start;
HXDLIN(  90)					int rectTop6 = yIter36->start;
HXDLIN(  90)					int rectRight6 = xIter36->max;
HXDLIN(  90)					bool forceClear6 = false;
HXDLIN(  90)					{
HXLINE(  90)						int _g136 = rectTop6;
HXDLIN(  90)						int _g137 = yIter36->max;
HXDLIN(  90)						while((_g136 < _g137)){
HXLINE(  90)							_g136 = (_g136 + 1);
HXDLIN(  90)							int dy7 = (_g136 - 1);
HXDLIN(  90)							{
HXLINE(  90)								int _g138 = rectLeft6;
HXDLIN(  90)								int _g139 = rectRight6;
HXDLIN(  90)								while((_g138 < _g139)){
HXLINE(  90)									_g138 = (_g138 + 1);
HXDLIN(  90)									int dx7 = (_g138 - 1);
HXDLIN(  90)									::Dynamic this195 = pixelImage->image;
HXDLIN(  90)									int index27;
HXDLIN(  90)									if (pixelImage->useVirtualPos) {
HXLINE(  90)										index27 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  90)										index27 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            									}
HXDLIN(  90)									int c21 = ::iterMagic::Iimg_obj::get(this195,index27);
HXDLIN(  90)									int col6;
HXDLIN(  90)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)										col6 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            									}
            									else {
HXLINE(  90)										col6 = c21;
            									}
HXDLIN(  90)									bool _hx_tmp48;
HXDLIN(  90)									if (pixelImage->useMask) {
HXLINE(  90)										_hx_tmp48 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  90)										_hx_tmp48 = false;
            									}
HXDLIN(  90)									if (_hx_tmp48) {
HXLINE(  90)										 ::pi_xy::ImageStruct this196 = pixelImage->mask;
HXDLIN(  90)										::Dynamic this197 = this196->image;
HXDLIN(  90)										int index28;
HXDLIN(  90)										if (this196->useVirtualPos) {
HXLINE(  90)											index28 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this196->virtualY) * ( (Float)(this196->width) )) + dx7) - this196->virtualX));
            										}
            										else {
HXLINE(  90)											index28 = ::Std_obj::_hx_int(( (Float)(((dy7 * this196->width) + dx7)) ));
            										}
HXDLIN(  90)										int c22 = ::iterMagic::Iimg_obj::get(this197,index28);
HXDLIN(  90)										int v16;
HXDLIN(  90)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)											v16 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            										}
            										else {
HXLINE(  90)											v16 = c22;
            										}
HXDLIN(  90)										int maskPixel6 = v16;
HXDLIN(  90)										int this198 = col6;
HXDLIN(  90)										if ((maskPixel6 == 0)) {
HXLINE(  90)											col6 = this198;
            										}
            										else {
HXLINE(  90)											Float m06;
HXDLIN(  90)											int this199 = ((maskPixel6 >> 24) & 255);
HXDLIN(  90)											if ((this199 == 0)) {
HXLINE(  90)												m06 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												m06 = (( (Float)(this199) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float m16;
HXDLIN(  90)											int this200 = ((maskPixel6 >> 16) & 255);
HXDLIN(  90)											if ((this200 == 0)) {
HXLINE(  90)												m16 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												m16 = (( (Float)(this200) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float m26;
HXDLIN(  90)											int this201 = ((maskPixel6 >> 8) & 255);
HXDLIN(  90)											if ((this201 == 0)) {
HXLINE(  90)												m26 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												m26 = (( (Float)(this201) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float m36;
HXDLIN(  90)											int this202 = (maskPixel6 & 255);
HXDLIN(  90)											if ((this202 == 0)) {
HXLINE(  90)												m36 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												m36 = (( (Float)(this202) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this198 >> 24) & 255)) )));
HXDLIN(  90)											int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this198 >> 16) & 255)) )));
HXDLIN(  90)											int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this198 >> 8) & 255)) )));
HXDLIN(  90)											int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this198 & 255)) )));
HXDLIN(  90)											col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  90)									if ((col6 != 0)) {
HXLINE(  90)										int x22 = (dx7 - rectLeft6);
HXDLIN(  90)										int y22 = (dy7 - rectTop6);
HXDLIN(  90)										int c23 = col6;
HXDLIN(  90)										bool _hx_tmp49;
HXDLIN(  90)										if ((((c23 >> 24) & 255) < 254)) {
HXLINE(  90)											_hx_tmp49 = undoImage18->transparent;
            										}
            										else {
HXLINE(  90)											_hx_tmp49 = false;
            										}
HXDLIN(  90)										if (_hx_tmp49) {
HXLINE(  90)											int location12;
HXDLIN(  90)											if (undoImage18->useVirtualPos) {
HXLINE(  90)												location12 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x22) - undoImage18->virtualX));
            											}
            											else {
HXLINE(  90)												location12 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage18->width) + x22)) ));
            											}
HXDLIN(  90)											int this203 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN(  90)											int this204;
HXDLIN(  90)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)												this204 = ((((((this203 >> 24) & 255) << 24) | ((this203 & 255) << 16)) | (((this203 >> 8) & 255) << 8)) | ((this203 >> 16) & 255));
            											}
            											else {
HXLINE(  90)												this204 = this203;
            											}
HXDLIN(  90)											Float a116;
HXDLIN(  90)											int this205 = ((this204 >> 24) & 255);
HXDLIN(  90)											if ((this205 == 0)) {
HXLINE(  90)												a116 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												a116 = (( (Float)(this205) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float r113;
HXDLIN(  90)											int this206 = ((this204 >> 16) & 255);
HXDLIN(  90)											if ((this206 == 0)) {
HXLINE(  90)												r113 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												r113 = (( (Float)(this206) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float g113;
HXDLIN(  90)											int this207 = ((this204 >> 8) & 255);
HXDLIN(  90)											if ((this207 == 0)) {
HXLINE(  90)												g113 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												g113 = (( (Float)(this207) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float b117;
HXDLIN(  90)											int this208 = (this204 & 255);
HXDLIN(  90)											if ((this208 == 0)) {
HXLINE(  90)												b117 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												b117 = (( (Float)(this208) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float a214;
HXDLIN(  90)											int this209 = ((col6 >> 24) & 255);
HXDLIN(  90)											if ((this209 == 0)) {
HXLINE(  90)												a214 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												a214 = (( (Float)(this209) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float r213;
HXDLIN(  90)											int this210 = ((col6 >> 16) & 255);
HXDLIN(  90)											if ((this210 == 0)) {
HXLINE(  90)												r213 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												r213 = (( (Float)(this210) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float g213;
HXDLIN(  90)											int this211 = ((col6 >> 8) & 255);
HXDLIN(  90)											if ((this211 == 0)) {
HXLINE(  90)												g213 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												g213 = (( (Float)(this211) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float b216;
HXDLIN(  90)											int this212 = (col6 & 255);
HXDLIN(  90)											if ((this212 == 0)) {
HXLINE(  90)												b216 = ((Float)0.);
            											}
            											else {
HXLINE(  90)												b216 = (( (Float)(this212) ) / ( (Float)(255) ));
            											}
HXDLIN(  90)											Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  90)											int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r213 * a214))));
HXDLIN(  90)											int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g213 * a214))));
HXDLIN(  90)											int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b216 * a214))));
HXDLIN(  90)											int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  90)											int blended12 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b47);
HXDLIN(  90)											{
HXLINE(  90)												int _hx_tmp50;
HXDLIN(  90)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)													_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            												}
            												else {
HXLINE(  90)													_hx_tmp50 = blended12;
            												}
HXDLIN(  90)												::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp50);
            											}
            										}
            										else {
HXLINE(  90)											::Dynamic this213 = undoImage18->image;
HXDLIN(  90)											int index29;
HXDLIN(  90)											if (undoImage18->useVirtualPos) {
HXLINE(  90)												index29 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x22) - undoImage18->virtualX));
            											}
            											else {
HXLINE(  90)												index29 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage18->width) + x22)) ));
            											}
HXDLIN(  90)											int _hx_tmp51;
HXDLIN(  90)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)												_hx_tmp51 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            											}
            											else {
HXLINE(  90)												_hx_tmp51 = c23;
            											}
HXDLIN(  90)											::iterMagic::Iimg_obj::set(this213,index29,_hx_tmp51);
            										}
            									}
            									else {
HXLINE(  90)										if (forceClear6) {
HXLINE(  90)											::Dynamic this214 = undoImage18->image;
HXDLIN(  90)											int x23 = (dx7 - rectLeft6);
HXDLIN(  90)											int y23 = (dy7 - rectTop6);
HXDLIN(  90)											int index30;
HXDLIN(  90)											if (undoImage18->useVirtualPos) {
HXLINE(  90)												index30 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x23) - undoImage18->virtualX));
            											}
            											else {
HXLINE(  90)												index30 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage18->width) + x23)) ));
            											}
HXDLIN(  90)											::iterMagic::Iimg_obj::set(this214,index30,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  90)			bool found6 = false;
HXDLIN(  90)			{
HXLINE(  90)				int _g_min12 = xIter36->start;
HXDLIN(  90)				int _g_max12 = xIter36->max;
HXDLIN(  90)				while((_g_min12 < _g_max12)){
HXLINE(  90)					_g_min12 = (_g_min12 + 1);
HXDLIN(  90)					int px3 = (_g_min12 - 1);
HXDLIN(  90)					Float pcx3 = (( (Float)(px3) ) - ax);
HXLINE( 619)					found6 = false;
HXLINE(  90)					{
HXLINE(  90)						int _g_min13 = yIter36->start;
HXDLIN(  90)						int _g_max13 = yIter36->max;
HXDLIN(  90)						while((_g_min13 < _g_max13)){
HXLINE(  90)							_g_min13 = (_g_min13 + 1);
HXDLIN(  90)							int py3 = (_g_min13 - 1);
HXDLIN(  90)							Float pcy3 = (( (Float)(py3) ) - ay);
HXDLIN(  90)							Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  90)							Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  90)							Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  90)							Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  90)							Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  90)							bool _hx_tmp52;
HXDLIN(  90)							bool _hx_tmp53;
HXDLIN(  90)							if ((ratioA3 >= 0)) {
HXLINE(  90)								_hx_tmp53 = (ratioB3 >= 0);
            							}
            							else {
HXLINE(  90)								_hx_tmp53 = false;
            							}
HXDLIN(  90)							if (_hx_tmp53) {
HXLINE(  90)								_hx_tmp52 = (ratioC3 >= 0);
            							}
            							else {
HXLINE(  90)								_hx_tmp52 = false;
            							}
HXDLIN(  90)							if (_hx_tmp52) {
HXLINE(  90)								int i54 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (softC * ratioB3)));
HXDLIN(  90)								if ((i54 > 255)) {
HXLINE(  24)									i54 = 255;
            								}
HXLINE(  90)								if ((i54 < 0)) {
HXLINE(  25)									i54 = 0;
            								}
HXLINE(  90)								int a46 = i54;
HXDLIN(  90)								int i55 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  90)								if ((i55 > 255)) {
HXLINE(  24)									i55 = 255;
            								}
HXLINE(  90)								if ((i55 < 0)) {
HXLINE(  25)									i55 = 0;
            								}
HXLINE(  90)								int r34 = i55;
HXDLIN(  90)								int i56 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  90)								if ((i56 > 255)) {
HXLINE(  24)									i56 = 255;
            								}
HXLINE(  90)								if ((i56 < 0)) {
HXLINE(  25)									i56 = 0;
            								}
HXLINE(  90)								int g34 = i56;
HXDLIN(  90)								int i57 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  90)								if ((i57 > 255)) {
HXLINE(  24)									i57 = 255;
            								}
HXLINE(  90)								if ((i57 < 0)) {
HXLINE(  25)									i57 = 0;
            								}
HXLINE(  90)								int b48 = i57;
HXDLIN(  90)								{
HXLINE(  90)									int location13;
HXDLIN(  90)									if (pixelImage->useVirtualPos) {
HXLINE(  90)										location13 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  90)										location13 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            									}
HXDLIN(  90)									bool _hx_tmp54;
HXDLIN(  90)									if (pixelImage->transparent) {
HXLINE(  90)										_hx_tmp54 = (a46 < 254);
            									}
            									else {
HXLINE(  90)										_hx_tmp54 = false;
            									}
HXDLIN(  90)									if (_hx_tmp54) {
HXLINE(  90)										int this215 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN(  90)										int old3;
HXDLIN(  90)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)											old3 = ((((((this215 >> 24) & 255) << 24) | ((this215 & 255) << 16)) | (((this215 >> 8) & 255) << 8)) | ((this215 >> 16) & 255));
            										}
            										else {
HXLINE(  90)											old3 = this215;
            										}
HXDLIN(  90)										int rhs3 = ((((a46 << 24) | (r34 << 16)) | (g34 << 8)) | b48);
HXDLIN(  90)										Float a117;
HXDLIN(  90)										int this216 = ((old3 >> 24) & 255);
HXDLIN(  90)										if ((this216 == 0)) {
HXLINE(  90)											a117 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											a117 = (( (Float)(this216) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float r114;
HXDLIN(  90)										int this217 = ((old3 >> 16) & 255);
HXDLIN(  90)										if ((this217 == 0)) {
HXLINE(  90)											r114 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											r114 = (( (Float)(this217) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float g114;
HXDLIN(  90)										int this218 = ((old3 >> 8) & 255);
HXDLIN(  90)										if ((this218 == 0)) {
HXLINE(  90)											g114 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											g114 = (( (Float)(this218) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float b118;
HXDLIN(  90)										int this219 = (old3 & 255);
HXDLIN(  90)										if ((this219 == 0)) {
HXLINE(  90)											b118 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											b118 = (( (Float)(this219) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float a215;
HXDLIN(  90)										int this220 = ((rhs3 >> 24) & 255);
HXDLIN(  90)										if ((this220 == 0)) {
HXLINE(  90)											a215 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											a215 = (( (Float)(this220) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float r214;
HXDLIN(  90)										int this221 = ((rhs3 >> 16) & 255);
HXDLIN(  90)										if ((this221 == 0)) {
HXLINE(  90)											r214 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											r214 = (( (Float)(this221) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float g214;
HXDLIN(  90)										int this222 = ((rhs3 >> 8) & 255);
HXDLIN(  90)										if ((this222 == 0)) {
HXLINE(  90)											g214 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											g214 = (( (Float)(this222) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float b217;
HXDLIN(  90)										int this223 = (rhs3 & 255);
HXDLIN(  90)										if ((this223 == 0)) {
HXLINE(  90)											b217 = ((Float)0.);
            										}
            										else {
HXLINE(  90)											b217 = (( (Float)(this223) ) / ( (Float)(255) ));
            										}
HXDLIN(  90)										Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  90)										int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r214 * a215))));
HXDLIN(  90)										int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g214 * a215))));
HXDLIN(  90)										int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b217 * a215))));
HXDLIN(  90)										int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  90)										int blended13 = ((((a47 << 24) | (r35 << 16)) | (g35 << 8)) | b49);
HXDLIN(  90)										{
HXLINE(  90)											int _hx_tmp55;
HXDLIN(  90)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)												_hx_tmp55 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            											}
            											else {
HXLINE(  90)												_hx_tmp55 = blended13;
            											}
HXDLIN(  90)											::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp55);
            										}
            									}
            									else {
HXLINE(  90)										int value3;
HXDLIN(  90)										if (pixelImage->isLittle) {
HXLINE(  90)											value3 = ((((a46 << 24) | (b48 << 16)) | (g34 << 8)) | r34);
            										}
            										else {
HXLINE(  90)											value3 = ((((a46 << 24) | (r34 << 16)) | (g34 << 8)) | b48);
            										}
HXDLIN(  90)										::iterMagic::Iimg_obj::set(pixelImage->image,location13,value3);
            									}
            								}
HXLINE( 633)								found6 = true;
            							}
            							else {
HXLINE(  90)								if (found6) {
HXLINE(  90)									goto _hx_goto_132;
            								}
            							}
            						}
            						_hx_goto_132:;
            					}
            				}
            			}
HXDLIN(  90)			{
HXLINE(  90)				 ::pi_xy::algo::HitTri v17 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,dx,dy,ax,ay,true);
HXDLIN(  90)				if (hasUndo6) {
HXLINE(  90)					v17->undoImage = undoImage18;
HXDLIN(  90)					v17->undoX = xIter36->start;
HXDLIN(  90)					v17->undoY = yIter36->start;
            				}
            			}
            		}
            		else {
HXLINE(  92)			Float bx4 = dx;
HXDLIN(  92)			Float by4 = dy;
HXDLIN(  92)			Float cx4 = ax;
HXDLIN(  92)			Float cy4 = ay;
HXDLIN(  92)			bool hasUndo7 = false;
HXDLIN(  92)			bool adjustWinding3 = (((((ex * by4) - (bx4 * ey)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ey) - (ex * cy4))) > 0);
HXDLIN(  92)			if (!(adjustWinding3)) {
HXLINE(  92)				Float bx_3 = bx4;
HXDLIN(  92)				Float by_3 = by4;
HXLINE(  25)				bx4 = cx4;
HXLINE(  26)				by4 = cy4;
HXLINE(  27)				cx4 = bx_3;
HXLINE(  28)				cy4 = by_3;
            			}
HXLINE(  92)			{
HXLINE(  92)				Float s03 = ((ey * cx4) - (ex * cy4));
HXDLIN(  92)				Float sx3 = (cy4 - ey);
HXDLIN(  92)				Float sy3 = (ex - cx4);
HXDLIN(  92)				Float t03 = ((ex * by4) - (ey * bx4));
HXDLIN(  92)				Float tx3 = (ey - by4);
HXDLIN(  92)				Float ty3 = (bx4 - ex);
HXDLIN(  92)				Float A3 = ((((-(by4) * cx4) + (ey * (-(bx4) + cx4))) + (ex * (by4 - cy4))) + (bx4 * cy4));
HXDLIN(  92)				 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  92)				if ((ex > bx4)) {
HXLINE(  92)					if ((ex > cx4)) {
HXLINE(  92)						int min28;
HXDLIN(  92)						if ((bx4 > cx4)) {
HXLINE(  92)							min28 = ::Math_obj::floor(cx4);
            						}
            						else {
HXLINE(  92)							min28 = ::Math_obj::floor(bx4);
            						}
HXDLIN(  92)						int ii_min56 = min28;
HXDLIN(  92)						int ii_max56 = ::Math_obj::ceil(ex);
HXDLIN(  92)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            					}
            					else {
HXLINE(  92)						int ii_min57 = ::Math_obj::floor(bx4);
HXDLIN(  92)						int ii_max57 = ::Math_obj::ceil(cx4);
HXDLIN(  92)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            					}
            				}
            				else {
HXLINE(  92)					if ((bx4 > cx4)) {
HXLINE(  92)						int min29;
HXDLIN(  92)						if ((ex > cx4)) {
HXLINE(  92)							min29 = ::Math_obj::floor(cx4);
            						}
            						else {
HXLINE(  92)							min29 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  92)						int ii_min58 = min29;
HXDLIN(  92)						int ii_max58 = ::Math_obj::ceil(bx4);
HXDLIN(  92)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            					}
            					else {
HXLINE(  92)						int ii_min59 = ::Math_obj::floor(ex);
HXDLIN(  92)						int ii_max59 = ::Math_obj::ceil(cx4);
HXDLIN(  92)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            					}
            				}
HXDLIN(  92)				 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  92)				if ((ey > by4)) {
HXLINE(  92)					if ((ey > cy4)) {
HXLINE(  92)						int min30;
HXDLIN(  92)						if ((by4 > cy4)) {
HXLINE(  92)							min30 = ::Math_obj::floor(cy4);
            						}
            						else {
HXLINE(  92)							min30 = ::Math_obj::floor(by4);
            						}
HXDLIN(  92)						int ii_min60 = min30;
HXDLIN(  92)						int ii_max60 = ::Math_obj::ceil(ey);
HXDLIN(  92)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            					}
            					else {
HXLINE(  92)						int ii_min61 = ::Math_obj::floor(by4);
HXDLIN(  92)						int ii_max61 = ::Math_obj::ceil(cy4);
HXDLIN(  92)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            					}
            				}
            				else {
HXLINE(  92)					if ((by4 > cy4)) {
HXLINE(  92)						int min31;
HXDLIN(  92)						if ((ey > cy4)) {
HXLINE(  92)							min31 = ::Math_obj::floor(cy4);
            						}
            						else {
HXLINE(  92)							min31 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  92)						int ii_min62 = min31;
HXDLIN(  92)						int ii_max62 = ::Math_obj::ceil(by4);
HXDLIN(  92)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            					}
            					else {
HXLINE(  92)						int ii_min63 = ::Math_obj::floor(ey);
HXDLIN(  92)						int ii_max63 = ::Math_obj::ceil(cy4);
HXDLIN(  92)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            					}
            				}
HXDLIN(  92)				 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  92)				if (hasUndo7) {
HXLINE(  92)					int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  92)					int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  92)					 ::Dynamic imageType7 = null();
HXDLIN(  92)					 ::pi_xy::ImageStruct this224 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  92)					if (::hx::IsNull( imageType7 )) {
HXLINE(  54)						imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  92)					::Dynamic undoImage22;
HXDLIN(  92)					switch((int)(( (int)(imageType7) ))){
            						case (int)0: {
HXLINE(  92)							 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  92)							 ::iterMagic::BytesImg b50 = byt7;
HXDLIN(  92)							{
HXLINE(  92)								b50->width = width7;
HXDLIN(  92)								b50->height = height7;
HXDLIN(  92)								b50->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  92)								b50->data = ::haxe::io::Bytes_obj::alloc((b50->length * 4));
HXDLIN(  92)								{
HXLINE(  92)									int len14 = b50->length;
HXDLIN(  92)									int w7 = 0;
HXDLIN(  92)									{
HXLINE(  92)										int _g140 = 0;
HXDLIN(  92)										int _g141 = b50->height;
HXDLIN(  92)										while((_g140 < _g141)){
HXLINE(  92)											_g140 = (_g140 + 1);
HXDLIN(  92)											int y24 = (_g140 - 1);
HXDLIN(  92)											{
HXLINE(  92)												int _g142 = 0;
HXDLIN(  92)												int _g143 = b50->width;
HXDLIN(  92)												while((_g142 < _g143)){
HXLINE(  92)													_g142 = (_g142 + 1);
HXDLIN(  92)													int x24 = (_g142 - 1);
HXDLIN(  92)													{
HXLINE(  92)														w7 = (w7 + 1);
HXDLIN(  92)														b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  92)													{
HXLINE(  92)														w7 = (w7 + 1);
HXDLIN(  92)														b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  92)													{
HXLINE(  92)														w7 = (w7 + 1);
HXDLIN(  92)														b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  92)													{
HXLINE(  92)														w7 = (w7 + 1);
HXDLIN(  92)														b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  92)							undoImage22 = b50;
            						}
            						break;
            						case (int)1: {
HXLINE(  92)							 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  92)							 ::iterMagic::ArrIntImg a48 = arrI7;
HXDLIN(  92)							{
HXLINE(  92)								a48->width = width7;
HXDLIN(  92)								a48->height = height7;
HXDLIN(  92)								a48->data = ::Array_obj< int >::__new(0);
HXDLIN(  92)								a48->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  92)								{
HXLINE(  92)									int _g144 = 0;
HXDLIN(  92)									int _g145 = a48->length;
HXDLIN(  92)									while((_g144 < _g145)){
HXLINE(  92)										_g144 = (_g144 + 1);
HXDLIN(  92)										int i58 = (_g144 - 1);
HXDLIN(  92)										a48->data[i58] = 0;
            									}
            								}
            							}
HXDLIN(  92)							undoImage22 = a48;
            						}
            						break;
            						case (int)2: {
HXLINE(  92)							 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  92)							 ::iterMagic::U32ArrImg b51 = u32a7;
HXDLIN(  92)							{
HXLINE(  92)								b51->width = width7;
HXDLIN(  92)								b51->height = height7;
HXDLIN(  92)								b51->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  92)								int size7 = (b51->length * 4);
HXDLIN(  92)								b51->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  92)								{
HXLINE(  92)									int _g146 = 0;
HXDLIN(  92)									int _g147 = b51->length;
HXDLIN(  92)									while((_g146 < _g147)){
HXLINE(  92)										_g146 = (_g146 + 1);
HXDLIN(  92)										int i59 = (_g146 - 1);
HXDLIN(  92)										{
HXLINE(  92)											 ::haxe::io::ArrayBufferViewImpl this225 = b51->data;
HXDLIN(  92)											bool undoImage23;
HXDLIN(  92)											if ((i59 >= 0)) {
HXLINE(  92)												undoImage23 = (i59 < (this225->byteLength >> 2));
            											}
            											else {
HXLINE(  92)												undoImage23 = false;
            											}
HXDLIN(  92)											if (undoImage23) {
HXLINE(  92)												 ::haxe::io::Bytes _this7 = this225->bytes;
HXDLIN(  92)												int pos7 = ((i59 << 2) + this225->byteOffset);
HXDLIN(  92)												_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  92)												_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  92)												_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  92)												_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  92)							undoImage22 = b51;
            						}
            						break;
            						case (int)3: {
HXLINE(  92)							 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  92)							 ::iterMagic::VecIntImg v18 = vec7;
HXDLIN(  92)							{
HXLINE(  92)								v18->width = width7;
HXDLIN(  92)								v18->height = height7;
HXDLIN(  92)								v18->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  92)								v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN(  92)								{
HXLINE(  92)									int _g148 = 0;
HXDLIN(  92)									int _g149 = v18->length;
HXDLIN(  92)									while((_g148 < _g149)){
HXLINE(  92)										_g148 = (_g148 + 1);
HXDLIN(  92)										int i60 = (_g148 - 1);
HXDLIN(  92)										v18->data->__unsafe_set(i60,0);
            									}
            								}
            							}
HXDLIN(  92)							undoImage22 = v18;
            						}
            						break;
            						case (int)4: {
HXLINE(  92)							 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  92)							 ::iterMagic::StackIntImg b52 = sInt7;
HXDLIN(  92)							{
HXLINE(  92)								b52->width = width7;
HXDLIN(  92)								b52->height = height7;
HXDLIN(  92)								b52->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  92)								b52->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  92)								{
HXLINE(  92)									int len15 = b52->length;
HXDLIN(  92)									 ::haxe::ds::GenericStack_Int d7 = b52->data;
HXDLIN(  92)									if (::hx::IsNull( d7->head )) {
HXLINE(  92)										int _g150 = 0;
HXDLIN(  92)										int _g151 = len15;
HXDLIN(  92)										while((_g150 < _g151)){
HXLINE(  92)											_g150 = (_g150 + 1);
HXDLIN(  92)											int i61 = (_g150 - 1);
HXDLIN(  92)											d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            										}
            									}
            									else {
HXLINE(  92)										int _g152 = 0;
HXDLIN(  92)										int _g153 = len15;
HXDLIN(  92)										while((_g152 < _g153)){
HXLINE(  92)											_g152 = (_g152 + 1);
HXDLIN(  92)											int i62 = (_g152 - 1);
HXDLIN(  92)											{
HXLINE(  92)												 ::haxe::ds::GenericCell_Int l7 = b52->data->head;
HXDLIN(  92)												 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  92)												{
HXLINE(  92)													int _g154 = 0;
HXDLIN(  92)													int _g155 = i62;
HXDLIN(  92)													while((_g154 < _g155)){
HXLINE(  92)														_g154 = (_g154 + 1);
HXDLIN(  92)														int i63 = (_g154 - 1);
HXLINE( 345)														prev7 = l7;
HXLINE( 346)														l7 = l7->next;
            													}
            												}
HXLINE(  92)												if (::hx::IsNull( prev7 )) {
HXLINE(  92)													b52->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  92)													l7 = null();
            												}
            												else {
HXLINE(  92)													prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  92)													l7 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  92)							undoImage22 = b52;
            						}
            						break;
            					}
HXDLIN(  92)					this224->image = undoImage22;
HXDLIN(  92)					this224->width = width7;
HXDLIN(  92)					this224->height = height7;
HXDLIN(  92)					this224->imageType = ( (int)(imageType7) );
HXDLIN(  92)					undoImage21 = this224;
HXDLIN(  92)					{
HXLINE(  92)						int rectLeft7 = xIter37->start;
HXDLIN(  92)						int rectTop7 = yIter37->start;
HXDLIN(  92)						int rectRight7 = xIter37->max;
HXDLIN(  92)						bool forceClear7 = false;
HXDLIN(  92)						{
HXLINE(  92)							int _g156 = rectTop7;
HXDLIN(  92)							int _g157 = yIter37->max;
HXDLIN(  92)							while((_g156 < _g157)){
HXLINE(  92)								_g156 = (_g156 + 1);
HXDLIN(  92)								int dy8 = (_g156 - 1);
HXDLIN(  92)								{
HXLINE(  92)									int _g158 = rectLeft7;
HXDLIN(  92)									int _g159 = rectRight7;
HXDLIN(  92)									while((_g158 < _g159)){
HXLINE(  92)										_g158 = (_g158 + 1);
HXDLIN(  92)										int dx8 = (_g158 - 1);
HXDLIN(  92)										::Dynamic this226 = pixelImage->image;
HXDLIN(  92)										int index31;
HXDLIN(  92)										if (pixelImage->useVirtualPos) {
HXLINE(  92)											index31 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  92)											index31 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            										}
HXDLIN(  92)										int c24 = ::iterMagic::Iimg_obj::get(this226,index31);
HXDLIN(  92)										int col7;
HXDLIN(  92)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)											col7 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            										}
            										else {
HXLINE(  92)											col7 = c24;
            										}
HXDLIN(  92)										bool _hx_tmp56;
HXDLIN(  92)										if (pixelImage->useMask) {
HXLINE(  92)											_hx_tmp56 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  92)											_hx_tmp56 = false;
            										}
HXDLIN(  92)										if (_hx_tmp56) {
HXLINE(  92)											 ::pi_xy::ImageStruct this227 = pixelImage->mask;
HXDLIN(  92)											::Dynamic this228 = this227->image;
HXDLIN(  92)											int index32;
HXDLIN(  92)											if (this227->useVirtualPos) {
HXLINE(  92)												index32 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this227->virtualY) * ( (Float)(this227->width) )) + dx8) - this227->virtualX));
            											}
            											else {
HXLINE(  92)												index32 = ::Std_obj::_hx_int(( (Float)(((dy8 * this227->width) + dx8)) ));
            											}
HXDLIN(  92)											int c25 = ::iterMagic::Iimg_obj::get(this228,index32);
HXDLIN(  92)											int v19;
HXDLIN(  92)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)												v19 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            											}
            											else {
HXLINE(  92)												v19 = c25;
            											}
HXDLIN(  92)											int maskPixel7 = v19;
HXDLIN(  92)											int this229 = col7;
HXDLIN(  92)											if ((maskPixel7 == 0)) {
HXLINE(  92)												col7 = this229;
            											}
            											else {
HXLINE(  92)												Float m07;
HXDLIN(  92)												int this230 = ((maskPixel7 >> 24) & 255);
HXDLIN(  92)												if ((this230 == 0)) {
HXLINE(  92)													m07 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													m07 = (( (Float)(this230) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float m17;
HXDLIN(  92)												int this231 = ((maskPixel7 >> 16) & 255);
HXDLIN(  92)												if ((this231 == 0)) {
HXLINE(  92)													m17 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													m17 = (( (Float)(this231) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float m27;
HXDLIN(  92)												int this232 = ((maskPixel7 >> 8) & 255);
HXDLIN(  92)												if ((this232 == 0)) {
HXLINE(  92)													m27 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													m27 = (( (Float)(this232) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float m37;
HXDLIN(  92)												int this233 = (maskPixel7 & 255);
HXDLIN(  92)												if ((this233 == 0)) {
HXLINE(  92)													m37 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													m37 = (( (Float)(this233) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this229 >> 24) & 255)) )));
HXDLIN(  92)												int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this229 >> 16) & 255)) )));
HXDLIN(  92)												int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this229 >> 8) & 255)) )));
HXDLIN(  92)												int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this229 & 255)) )));
HXDLIN(  92)												col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  92)										if ((col7 != 0)) {
HXLINE(  92)											int x25 = (dx8 - rectLeft7);
HXDLIN(  92)											int y25 = (dy8 - rectTop7);
HXDLIN(  92)											int c26 = col7;
HXDLIN(  92)											bool _hx_tmp57;
HXDLIN(  92)											if ((((c26 >> 24) & 255) < 254)) {
HXLINE(  92)												_hx_tmp57 = undoImage21->transparent;
            											}
            											else {
HXLINE(  92)												_hx_tmp57 = false;
            											}
HXDLIN(  92)											if (_hx_tmp57) {
HXLINE(  92)												int location14;
HXDLIN(  92)												if (undoImage21->useVirtualPos) {
HXLINE(  92)													location14 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x25) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  92)													location14 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage21->width) + x25)) ));
            												}
HXDLIN(  92)												int this234 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN(  92)												int this235;
HXDLIN(  92)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)													this235 = ((((((this234 >> 24) & 255) << 24) | ((this234 & 255) << 16)) | (((this234 >> 8) & 255) << 8)) | ((this234 >> 16) & 255));
            												}
            												else {
HXLINE(  92)													this235 = this234;
            												}
HXDLIN(  92)												Float a118;
HXDLIN(  92)												int this236 = ((this235 >> 24) & 255);
HXDLIN(  92)												if ((this236 == 0)) {
HXLINE(  92)													a118 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													a118 = (( (Float)(this236) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float r115;
HXDLIN(  92)												int this237 = ((this235 >> 16) & 255);
HXDLIN(  92)												if ((this237 == 0)) {
HXLINE(  92)													r115 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													r115 = (( (Float)(this237) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float g115;
HXDLIN(  92)												int this238 = ((this235 >> 8) & 255);
HXDLIN(  92)												if ((this238 == 0)) {
HXLINE(  92)													g115 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													g115 = (( (Float)(this238) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float b119;
HXDLIN(  92)												int this239 = (this235 & 255);
HXDLIN(  92)												if ((this239 == 0)) {
HXLINE(  92)													b119 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													b119 = (( (Float)(this239) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float a216;
HXDLIN(  92)												int this240 = ((col7 >> 24) & 255);
HXDLIN(  92)												if ((this240 == 0)) {
HXLINE(  92)													a216 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													a216 = (( (Float)(this240) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float r215;
HXDLIN(  92)												int this241 = ((col7 >> 16) & 255);
HXDLIN(  92)												if ((this241 == 0)) {
HXLINE(  92)													r215 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													r215 = (( (Float)(this241) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float g215;
HXDLIN(  92)												int this242 = ((col7 >> 8) & 255);
HXDLIN(  92)												if ((this242 == 0)) {
HXLINE(  92)													g215 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													g215 = (( (Float)(this242) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float b218;
HXDLIN(  92)												int this243 = (col7 & 255);
HXDLIN(  92)												if ((this243 == 0)) {
HXLINE(  92)													b218 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													b218 = (( (Float)(this243) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  92)												int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r215 * a216))));
HXDLIN(  92)												int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g215 * a216))));
HXDLIN(  92)												int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b218 * a216))));
HXDLIN(  92)												int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  92)												int blended14 = ((((a49 << 24) | (r36 << 16)) | (g36 << 8)) | b53);
HXDLIN(  92)												{
HXLINE(  92)													int _hx_tmp58;
HXDLIN(  92)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)														_hx_tmp58 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            													}
            													else {
HXLINE(  92)														_hx_tmp58 = blended14;
            													}
HXDLIN(  92)													::iterMagic::Iimg_obj::set(undoImage21->image,location14,_hx_tmp58);
            												}
            											}
            											else {
HXLINE(  92)												::Dynamic this244 = undoImage21->image;
HXDLIN(  92)												int index33;
HXDLIN(  92)												if (undoImage21->useVirtualPos) {
HXLINE(  92)													index33 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x25) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  92)													index33 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage21->width) + x25)) ));
            												}
HXDLIN(  92)												int _hx_tmp59;
HXDLIN(  92)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)													_hx_tmp59 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            												}
            												else {
HXLINE(  92)													_hx_tmp59 = c26;
            												}
HXDLIN(  92)												::iterMagic::Iimg_obj::set(this244,index33,_hx_tmp59);
            											}
            										}
            										else {
HXLINE(  92)											if (forceClear7) {
HXLINE(  92)												::Dynamic this245 = undoImage21->image;
HXDLIN(  92)												int x26 = (dx8 - rectLeft7);
HXDLIN(  92)												int y26 = (dy8 - rectTop7);
HXDLIN(  92)												int index34;
HXDLIN(  92)												if (undoImage21->useVirtualPos) {
HXLINE(  92)													index34 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x26) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  92)													index34 = ::Std_obj::_hx_int(( (Float)(((y26 * undoImage21->width) + x26)) ));
            												}
HXDLIN(  92)												::iterMagic::Iimg_obj::set(this245,index34,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  92)				bool found7 = false;
HXDLIN(  92)				Float s3 = ((Float)0.);
HXDLIN(  92)				Float t3 = ((Float)0.);
HXDLIN(  92)				Float sxx3 = ((Float)0.);
HXDLIN(  92)				Float txx3 = ((Float)0.);
HXDLIN(  92)				{
HXLINE(  92)					int _g_min14 = xIter37->start;
HXDLIN(  92)					int _g_max14 = xIter37->max;
HXDLIN(  92)					while((_g_min14 < _g_max14)){
HXLINE(  92)						_g_min14 = (_g_min14 + 1);
HXDLIN(  92)						int x27 = (_g_min14 - 1);
HXLINE(  60)						sxx3 = (sx3 * ( (Float)(x27) ));
HXLINE(  61)						txx3 = (tx3 * ( (Float)(x27) ));
HXLINE(  62)						found7 = false;
HXLINE(  92)						{
HXLINE(  92)							int _g_min15 = yIter37->start;
HXDLIN(  92)							int _g_max15 = yIter37->max;
HXDLIN(  92)							while((_g_min15 < _g_max15)){
HXLINE(  92)								_g_min15 = (_g_min15 + 1);
HXDLIN(  92)								int y27 = (_g_min15 - 1);
HXLINE(  64)								s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y27) )));
HXLINE(  65)								t3 = ((t03 + txx3) + (ty3 * ( (Float)(y27) )));
HXLINE(  92)								bool _hx_tmp60;
HXDLIN(  92)								if (!((s3 <= 0))) {
HXLINE(  92)									_hx_tmp60 = (t3 <= 0);
            								}
            								else {
HXLINE(  92)									_hx_tmp60 = true;
            								}
HXDLIN(  92)								if (_hx_tmp60) {
HXLINE(  92)									if (found7) {
HXLINE(  92)										goto _hx_goto_144;
            									}
            								}
            								else {
HXLINE(  92)									if (((s3 + t3) < A3)) {
HXLINE(  92)										{
HXLINE(  92)											int c27 = color;
HXDLIN(  92)											bool _hx_tmp61;
HXDLIN(  92)											if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  92)												_hx_tmp61 = pixelImage->transparent;
            											}
            											else {
HXLINE(  92)												_hx_tmp61 = false;
            											}
HXDLIN(  92)											if (_hx_tmp61) {
HXLINE(  92)												int location15;
HXDLIN(  92)												if (pixelImage->useVirtualPos) {
HXLINE(  92)													location15 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x27) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  92)													location15 = ::Std_obj::_hx_int(( (Float)(((y27 * pixelImage->width) + x27)) ));
            												}
HXDLIN(  92)												int this246 = ::iterMagic::Iimg_obj::get(pixelImage->image,location15);
HXDLIN(  92)												int this247;
HXDLIN(  92)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)													this247 = ((((((this246 >> 24) & 255) << 24) | ((this246 & 255) << 16)) | (((this246 >> 8) & 255) << 8)) | ((this246 >> 16) & 255));
            												}
            												else {
HXLINE(  92)													this247 = this246;
            												}
HXDLIN(  92)												Float a119;
HXDLIN(  92)												int this248 = ((this247 >> 24) & 255);
HXDLIN(  92)												if ((this248 == 0)) {
HXLINE(  92)													a119 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													a119 = (( (Float)(this248) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float r116;
HXDLIN(  92)												int this249 = ((this247 >> 16) & 255);
HXDLIN(  92)												if ((this249 == 0)) {
HXLINE(  92)													r116 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													r116 = (( (Float)(this249) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float g116;
HXDLIN(  92)												int this250 = ((this247 >> 8) & 255);
HXDLIN(  92)												if ((this250 == 0)) {
HXLINE(  92)													g116 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													g116 = (( (Float)(this250) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float b120;
HXDLIN(  92)												int this251 = (this247 & 255);
HXDLIN(  92)												if ((this251 == 0)) {
HXLINE(  92)													b120 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													b120 = (( (Float)(this251) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float a217;
HXDLIN(  92)												int this252 = ((color >> 24) & 255);
HXDLIN(  92)												if ((this252 == 0)) {
HXLINE(  92)													a217 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													a217 = (( (Float)(this252) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float r216;
HXDLIN(  92)												int this253 = ((color >> 16) & 255);
HXDLIN(  92)												if ((this253 == 0)) {
HXLINE(  92)													r216 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													r216 = (( (Float)(this253) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float g216;
HXDLIN(  92)												int this254 = ((color >> 8) & 255);
HXDLIN(  92)												if ((this254 == 0)) {
HXLINE(  92)													g216 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													g216 = (( (Float)(this254) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float b219;
HXDLIN(  92)												int this255 = (color & 255);
HXDLIN(  92)												if ((this255 == 0)) {
HXLINE(  92)													b219 = ((Float)0.);
            												}
            												else {
HXLINE(  92)													b219 = (( (Float)(this255) ) / ( (Float)(255) ));
            												}
HXDLIN(  92)												Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN(  92)												int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r216 * a217))));
HXDLIN(  92)												int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g216 * a217))));
HXDLIN(  92)												int b54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b219 * a217))));
HXDLIN(  92)												int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  92)												int blended15 = ((((a50 << 24) | (r37 << 16)) | (g37 << 8)) | b54);
HXDLIN(  92)												{
HXLINE(  92)													int _hx_tmp62;
HXDLIN(  92)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)														_hx_tmp62 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            													}
            													else {
HXLINE(  92)														_hx_tmp62 = blended15;
            													}
HXDLIN(  92)													::iterMagic::Iimg_obj::set(pixelImage->image,location15,_hx_tmp62);
            												}
            											}
            											else {
HXLINE(  92)												::Dynamic this256 = pixelImage->image;
HXDLIN(  92)												int index35;
HXDLIN(  92)												if (pixelImage->useVirtualPos) {
HXLINE(  92)													index35 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x27) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  92)													index35 = ::Std_obj::_hx_int(( (Float)(((y27 * pixelImage->width) + x27)) ));
            												}
HXDLIN(  92)												int _hx_tmp63;
HXDLIN(  92)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  92)													_hx_tmp63 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            												}
            												else {
HXLINE(  92)													_hx_tmp63 = c27;
            												}
HXDLIN(  92)												::iterMagic::Iimg_obj::set(this256,index35,_hx_tmp63);
            											}
            										}
HXLINE(  73)										found7 = true;
            									}
            									else {
HXLINE(  92)										if (found7) {
HXLINE(  92)											goto _hx_goto_144;
            										}
            									}
            								}
            							}
            							_hx_goto_144:;
            						}
            					}
            				}
            			}
            		}
HXLINE( 102)		if ((hasHit == true)) {
HXLINE( 103)			 ::pi_xy::algo::HitQuad v20 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE( 104)			return v20;
            		}
            		else {
HXLINE( 106)			return null();
            		}
HXLINE( 102)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC16(QuintPixel_Fields__obj,softFillQuintilateralPartial,return )


QuintPixel_Fields__obj::QuintPixel_Fields__obj()
{
}

bool QuintPixel_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 21:
		if (HX_FIELD_EQ(inName,"softFillQuintilateral") ) { outValue = softFillQuintilateral_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"softFillQuintilateralPartial") ) { outValue = softFillQuintilateralPartial_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *QuintPixel_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *QuintPixel_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class QuintPixel_Fields__obj::__mClass;

static ::String QuintPixel_Fields__obj_sStaticFields[] = {
	HX_("softFillQuintilateral",ec,0f,c7,90),
	HX_("softFillQuintilateralPartial",f5,04,48,8d),
	::String(null())
};

void QuintPixel_Fields__obj::__register()
{
	QuintPixel_Fields__obj _hx_dummy;
	QuintPixel_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._QuintPixel.QuintPixel_Fields_",0a,36,54,dc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &QuintPixel_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(QuintPixel_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< QuintPixel_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuintPixel_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuintPixel_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _QuintPixel
