// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_media_SoundChannel
#define INCLUDED_nme_media_SoundChannel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,media,AudioSampleFormat)
HX_DECLARE_CLASS2(nme,media,SampleRate)
HX_DECLARE_CLASS2(nme,media,SoundChannel)
HX_DECLARE_CLASS2(nme,media,SoundTransform)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace media{


class HXCPP_CLASS_ATTRIBUTES SoundChannel_obj : public  ::nme::events::EventDispatcher_obj
{
	public:
		typedef  ::nme::events::EventDispatcher_obj super;
		typedef SoundChannel_obj OBJ_;
		SoundChannel_obj();

	public:
		enum { _hx_ClassId = 0x74936572 };

		void __construct( ::Dynamic inSoundHandle,Float startTime,int loops, ::nme::media::SoundTransform sndTransform);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.media.SoundChannel")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.media.SoundChannel"); }
		static ::hx::ObjectPtr< SoundChannel_obj > __new( ::Dynamic inSoundHandle,Float startTime,int loops, ::nme::media::SoundTransform sndTransform);
		static ::hx::ObjectPtr< SoundChannel_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inSoundHandle,Float startTime,int loops, ::nme::media::SoundTransform sndTransform);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SoundChannel_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SoundChannel",d4,af,1c,a9); }

		static void __boot();
		static int nmeDynamicSoundCount;
		static ::Array< ::Dynamic> nmeIncompleteList;
		static bool nmeIsPolling;
		static  ::nme::media::SoundChannel createAsync( ::nme::media::SampleRate inRate,bool inIsStereo, ::nme::media::AudioSampleFormat sampleFormat, ::Dynamic asyncDataRequired,::String inEngine);
		static ::Dynamic createAsync_dyn();

		static  ::nme::media::SoundChannel createDynamic( ::Dynamic inSoundHandle, ::nme::media::SoundTransform sndTransform, ::nme::events::EventDispatcher dataProvider);
		static ::Dynamic createDynamic_dyn();

		static bool nmeCompletePending();
		static ::Dynamic nmeCompletePending_dyn();

		static void nmePollComplete();
		static ::Dynamic nmePollComplete_dyn();

		static ::cpp::Function< bool  ( ::hx::Object *) > nme_sound_channel_is_complete;
		static Dynamic nme_sound_channel_is_complete_dyn() { return nme_sound_channel_is_complete;}
		static ::cpp::Function< Float  ( ::hx::Object *) > nme_sound_channel_get_left;
		static Dynamic nme_sound_channel_get_left_dyn() { return nme_sound_channel_get_left;}
		static ::cpp::Function< Float  ( ::hx::Object *) > nme_sound_channel_get_right;
		static Dynamic nme_sound_channel_get_right_dyn() { return nme_sound_channel_get_right;}
		static ::cpp::Function< Float  ( ::hx::Object *) > nme_sound_channel_get_position;
		static Dynamic nme_sound_channel_get_position_dyn() { return nme_sound_channel_get_position;}
		static ::cpp::Function< void  ( ::hx::Object *,Float) > nme_sound_channel_set_position;
		static Dynamic nme_sound_channel_set_position_dyn() { return nme_sound_channel_set_position;}
		static ::cpp::Function< Float  ( ::hx::Object *) > nme_sound_channel_get_data_position;
		static Dynamic nme_sound_channel_get_data_position_dyn() { return nme_sound_channel_get_data_position;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_sound_channel_stop;
		static Dynamic nme_sound_channel_stop_dyn() { return nme_sound_channel_stop;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,Float,int, ::hx::Object *) > nme_sound_channel_create;
		static Dynamic nme_sound_channel_create_dyn() { return nme_sound_channel_create;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_sound_channel_set_transform;
		static Dynamic nme_sound_channel_set_transform_dyn() { return nme_sound_channel_set_transform;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_sound_channel_needs_data;
		static Dynamic nme_sound_channel_needs_data_dyn() { return nme_sound_channel_needs_data;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_sound_channel_add_data;
		static Dynamic nme_sound_channel_add_data_dyn() { return nme_sound_channel_add_data;}
		static  ::Dynamic nme_sound_channel_create_async;
		static Dynamic nme_sound_channel_create_async_dyn() { return nme_sound_channel_create_async;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_sound_channel_post_buffer;
		static Dynamic nme_sound_channel_post_buffer_dyn() { return nme_sound_channel_post_buffer;}
		Float leftPeak;
		Float rightPeak;
		Float pitch;
		bool nmeStopped;
		 ::Dynamic nmeHandle;
		 ::nme::media::SoundTransform nmeTransform;
		 ::nme::events::EventDispatcher nmeDataProvider;
		void postBuffer( ::nme::utils::ByteArray inData);
		::Dynamic postBuffer_dyn();

		bool nmeCheckComplete();
		::Dynamic nmeCheckComplete_dyn();

		void dispatchComplete();
		::Dynamic dispatchComplete_dyn();

		void stop();
		::Dynamic stop_dyn();

		Float get_leftPeak();
		::Dynamic get_leftPeak_dyn();

		Float get_rightPeak();
		::Dynamic get_rightPeak_dyn();

		Float get_position();
		::Dynamic get_position_dyn();

		Float set_position(Float value);
		::Dynamic set_position_dyn();

		 ::nme::media::SoundTransform get_soundTransform();
		::Dynamic get_soundTransform_dyn();

		 ::nme::media::SoundTransform set_soundTransform( ::nme::media::SoundTransform inTransform);
		::Dynamic set_soundTransform_dyn();

};

} // end namespace nme
} // end namespace media

#endif /* INCLUDED_nme_media_SoundChannel */ 
