// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_SampleData
#include <pi_xy/algo/SampleData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e3b77d48b18232d6_15_new,"pi_xy.algo.SampleData","new",0x20b8d99a,"pi_xy.algo.SampleData.new","pi_xy/algo/HitTriScalar.hx",15,0x64798946)
namespace pi_xy{
namespace algo{

void SampleData_obj::__construct(Float fractionTotal,Float averageX,Float averageY){
            	HX_STACKFRAME(&_hx_pos_e3b77d48b18232d6_15_new)
HXLINE(  16)		this->fractionTotal = fractionTotal;
HXLINE(  17)		this->averageX = averageX;
HXLINE(  18)		this->averageY = averageY;
HXLINE(  19)		this->notHit = (fractionTotal == ((Float)0.));
            	}

Dynamic SampleData_obj::__CreateEmpty() { return new SampleData_obj; }

void *SampleData_obj::_hx_vtable = 0;

Dynamic SampleData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SampleData_obj > _hx_result = new SampleData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SampleData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24b44b2e;
}


SampleData_obj::SampleData_obj()
{
}

::hx::Val SampleData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"notHit") ) { return ::hx::Val( notHit ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"averageX") ) { return ::hx::Val( averageX ); }
		if (HX_FIELD_EQ(inName,"averageY") ) { return ::hx::Val( averageY ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fractionTotal") ) { return ::hx::Val( fractionTotal ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SampleData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"notHit") ) { notHit=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"averageX") ) { averageX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"averageY") ) { averageY=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fractionTotal") ) { fractionTotal=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SampleData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fractionTotal",62,26,88,f8));
	outFields->push(HX_("averageX",5b,c0,27,1d));
	outFields->push(HX_("averageY",5c,c0,27,1d));
	outFields->push(HX_("notHit",00,d3,9f,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SampleData_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SampleData_obj,fractionTotal),HX_("fractionTotal",62,26,88,f8)},
	{::hx::fsFloat,(int)offsetof(SampleData_obj,averageX),HX_("averageX",5b,c0,27,1d)},
	{::hx::fsFloat,(int)offsetof(SampleData_obj,averageY),HX_("averageY",5c,c0,27,1d)},
	{::hx::fsBool,(int)offsetof(SampleData_obj,notHit),HX_("notHit",00,d3,9f,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SampleData_obj_sStaticStorageInfo = 0;
#endif

static ::String SampleData_obj_sMemberFields[] = {
	HX_("fractionTotal",62,26,88,f8),
	HX_("averageX",5b,c0,27,1d),
	HX_("averageY",5c,c0,27,1d),
	HX_("notHit",00,d3,9f,31),
	::String(null()) };

::hx::Class SampleData_obj::__mClass;

void SampleData_obj::__register()
{
	SampleData_obj _hx_dummy;
	SampleData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.SampleData",a8,c4,79,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SampleData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SampleData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SampleData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SampleData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
