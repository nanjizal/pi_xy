// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_ImageStruct
#define INCLUDED_pi_xy_ImageStruct

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(iterMagic,Iimg)
HX_DECLARE_CLASS1(pi_xy,ImageStruct)

namespace pi_xy{


class HXCPP_CLASS_ATTRIBUTES ImageStruct_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ImageStruct_obj OBJ_;
		ImageStruct_obj();

	public:
		enum { _hx_ClassId = 0x35d73f2d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pi_xy.ImageStruct")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pi_xy.ImageStruct"); }
		static ::hx::ObjectPtr< ImageStruct_obj > __new();
		static ::hx::ObjectPtr< ImageStruct_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImageStruct_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageStruct",f0,db,ab,3d); }

		static void __boot();
		static int defaultType;
		int width;
		int height;
		::Dynamic image;
		int imageType;
		bool transparent;
		bool isLittle;
		Float virtualX;
		Float virtualY;
		bool useVirtualPos;
		 ::pi_xy::ImageStruct mask;
		bool useMask;
};

} // end namespace pi_xy

#endif /* INCLUDED_pi_xy_ImageStruct */ 
