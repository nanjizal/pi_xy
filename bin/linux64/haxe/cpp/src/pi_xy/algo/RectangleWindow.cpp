// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_RectangleWindow
#include <pi_xy/algo/RectangleWindow.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8459a505ab59cc74_14_new,"pi_xy.algo.RectangleWindow","new",0x2ec6aa3d,"pi_xy.algo.RectangleWindow.new","pi_xy/algo/GeomPix.hx",14,0x5049712f)
HX_LOCAL_STACK_FRAME(_hx_pos_8459a505ab59cc74_22_minMax,"pi_xy.algo.RectangleWindow","minMax",0x39186675,"pi_xy.algo.RectangleWindow.minMax","pi_xy/algo/GeomPix.hx",22,0x5049712f)
namespace pi_xy{
namespace algo{

void RectangleWindow_obj::__construct(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_8459a505ab59cc74_14_new)
HXLINE(  15)		this->x = x;
HXLINE(  16)		this->y = y;
HXLINE(  17)		this->width = width;
HXLINE(  18)		this->height = height;
            	}

Dynamic RectangleWindow_obj::__CreateEmpty() { return new RectangleWindow_obj; }

void *RectangleWindow_obj::_hx_vtable = 0;

Dynamic RectangleWindow_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RectangleWindow_obj > _hx_result = new RectangleWindow_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool RectangleWindow_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e75db85;
}

 ::pi_xy::algo::RectangleWindow RectangleWindow_obj::minMax(Float x,Float y,Float maxX,Float maxY){
            	HX_GC_STACKFRAME(&_hx_pos_8459a505ab59cc74_22_minMax)
HXDLIN(  22)		return  ::pi_xy::algo::RectangleWindow_obj::__alloc( HX_CTX ,x,y,(maxX - x),(maxY - y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(RectangleWindow_obj,minMax,return )


RectangleWindow_obj::RectangleWindow_obj()
{
}

::hx::Val RectangleWindow_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RectangleWindow_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"minMax") ) { outValue = minMax_dyn(); return true; }
	}
	return false;
}

::hx::Val RectangleWindow_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RectangleWindow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RectangleWindow_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(RectangleWindow_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(RectangleWindow_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(RectangleWindow_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(RectangleWindow_obj,height),HX_("height",e7,07,4c,02)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RectangleWindow_obj_sStaticStorageInfo = 0;
#endif

static ::String RectangleWindow_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	::String(null()) };

::hx::Class RectangleWindow_obj::__mClass;

static ::String RectangleWindow_obj_sStaticFields[] = {
	HX_("minMax",32,78,e9,52),
	::String(null())
};

void RectangleWindow_obj::__register()
{
	RectangleWindow_obj _hx_dummy;
	RectangleWindow_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.RectangleWindow",cb,c7,c3,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RectangleWindow_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RectangleWindow_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RectangleWindow_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RectangleWindow_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectangleWindow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectangleWindow_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
