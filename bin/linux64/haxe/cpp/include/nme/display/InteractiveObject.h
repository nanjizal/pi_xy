// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_InteractiveObject
#define INCLUDED_nme_display_InteractiveObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES InteractiveObject_obj : public  ::nme::display::DisplayObject_obj
{
	public:
		typedef  ::nme::display::DisplayObject_obj super;
		typedef InteractiveObject_obj OBJ_;
		InteractiveObject_obj();

	public:
		enum { _hx_ClassId = 0x048b25c1 };

		void __construct( ::Dynamic inHandle,::String inType);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.InteractiveObject")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.InteractiveObject"); }
		static ::hx::ObjectPtr< InteractiveObject_obj > __new( ::Dynamic inHandle,::String inType);
		static ::hx::ObjectPtr< InteractiveObject_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inHandle,::String inType);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InteractiveObject_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InteractiveObject",21,86,b1,c3); }

		static void __boot();
		static  ::Dynamic nme_display_object_set_mouse_enabled;
		static Dynamic nme_display_object_set_mouse_enabled_dyn() { return nme_display_object_set_mouse_enabled;}
		static  ::Dynamic nme_display_object_set_needs_soft_keyboard;
		static Dynamic nme_display_object_set_needs_soft_keyboard_dyn() { return nme_display_object_set_needs_soft_keyboard;}
		static  ::Dynamic nme_display_object_get_needs_soft_keyboard;
		static Dynamic nme_display_object_get_needs_soft_keyboard_dyn() { return nme_display_object_get_needs_soft_keyboard;}
		static  ::Dynamic nme_display_object_set_moves_for_soft_keyboard;
		static Dynamic nme_display_object_set_moves_for_soft_keyboard_dyn() { return nme_display_object_set_moves_for_soft_keyboard;}
		static  ::Dynamic nme_display_object_get_moves_for_soft_keyboard;
		static Dynamic nme_display_object_get_moves_for_soft_keyboard_dyn() { return nme_display_object_get_moves_for_soft_keyboard;}
		static  ::Dynamic nme_display_object_request_soft_keyboard;
		static Dynamic nme_display_object_request_soft_keyboard_dyn() { return nme_display_object_request_soft_keyboard;}
		static  ::Dynamic nme_display_object_set_soft_keyboard;
		static Dynamic nme_display_object_set_soft_keyboard_dyn() { return nme_display_object_set_soft_keyboard;}
		static  ::Dynamic nme_display_object_get_soft_keyboard;
		static Dynamic nme_display_object_get_soft_keyboard_dyn() { return nme_display_object_get_soft_keyboard;}
		bool doubleClickEnabled;
		bool nmeMouseEnabled;
		 ::nme::display::InteractiveObject nmeAsInteractiveObject();

		bool requestSoftKeyboard();
		::Dynamic requestSoftKeyboard_dyn();

		bool get_mouseEnabled();
		::Dynamic get_mouseEnabled_dyn();

		bool set_mouseEnabled(bool inVal);
		::Dynamic set_mouseEnabled_dyn();

		bool set_moveForSoftKeyboard(bool inVal);
		::Dynamic set_moveForSoftKeyboard_dyn();

		bool get_moveForSoftKeyboard();
		::Dynamic get_moveForSoftKeyboard_dyn();

		bool set_needsSoftKeyboard(bool inVal);
		::Dynamic set_needsSoftKeyboard_dyn();

		bool get_needsSoftKeyboard();
		::Dynamic get_needsSoftKeyboard_dyn();

		int get_softKeyboard();
		::Dynamic get_softKeyboard_dyn();

		int set_softKeyboard(int inVal);
		::Dynamic set_softKeyboard_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_InteractiveObject */ 
