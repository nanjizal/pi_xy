// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_RawImageData
#include <iterMagic/RawImageData.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_iterMagic__Img_Img_Impl_
#include <iterMagic/_Img/Img_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_471__new,"iterMagic._Img.Img_Impl_","_new",0x0963b33d,"iterMagic._Img.Img_Impl_._new","iterMagic/Img.hx",471,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_477_set,"iterMagic._Img.Img_Impl_","set",0x228a6d46,"iterMagic._Img.Img_Impl_.set","iterMagic/Img.hx",477,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_482_get,"iterMagic._Img.Img_Impl_","get",0x2281523a,"iterMagic._Img.Img_Impl_.get","iterMagic/Img.hx",482,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_487_get_raw,"iterMagic._Img.Img_Impl_","get_raw",0x76f21223,"iterMagic._Img.Img_Impl_.get_raw","iterMagic/Img.hx",487,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_491_set_raw,"iterMagic._Img.Img_Impl_","set_raw",0x69f3a32f,"iterMagic._Img.Img_Impl_.set_raw","iterMagic/Img.hx",491,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_494_fromTo,"iterMagic._Img.Img_Impl_","fromTo",0x10d36a61,"iterMagic._Img.Img_Impl_.fromTo","iterMagic/Img.hx",494,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_8554306bd091a37e_499_toFrom,"iterMagic._Img.Img_Impl_","toFrom",0xd488dd61,"iterMagic._Img.Img_Impl_.toFrom","iterMagic/Img.hx",499,0x8899afd5)
namespace iterMagic{
namespace _Img{

void Img_Impl__obj::__construct() { }

Dynamic Img_Impl__obj::__CreateEmpty() { return new Img_Impl__obj; }

void *Img_Impl__obj::_hx_vtable = 0;

Dynamic Img_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Img_Impl__obj > _hx_result = new Img_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Img_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x57f19b0a;
}

::Dynamic Img_Impl__obj::_new(int width,int height,int imageType){
            	HX_GC_STACKFRAME(&_hx_pos_8554306bd091a37e_471__new)
HXLINE( 472)		::Dynamic this1;
HXDLIN( 472)		switch((int)(imageType)){
            			case (int)0: {
HXLINE( 472)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 472)				 ::iterMagic::BytesImg b = byt;
HXDLIN( 472)				{
HXLINE( 472)					b->width = width;
HXDLIN( 472)					b->height = height;
HXDLIN( 472)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 472)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 472)					{
HXLINE( 472)						int len = b->length;
HXDLIN( 472)						int w = 0;
HXDLIN( 472)						{
HXLINE( 472)							int _g = 0;
HXDLIN( 472)							int _g1 = b->height;
HXDLIN( 472)							while((_g < _g1)){
HXLINE( 472)								_g = (_g + 1);
HXDLIN( 472)								int y = (_g - 1);
HXDLIN( 472)								{
HXLINE( 472)									int _g2 = 0;
HXDLIN( 472)									int _g3 = b->width;
HXDLIN( 472)									while((_g2 < _g3)){
HXLINE( 472)										_g2 = (_g2 + 1);
HXDLIN( 472)										int x = (_g2 - 1);
HXDLIN( 472)										{
HXLINE( 472)											w = (w + 1);
HXDLIN( 472)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 472)										{
HXLINE( 472)											w = (w + 1);
HXDLIN( 472)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 472)										{
HXLINE( 472)											w = (w + 1);
HXDLIN( 472)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 472)										{
HXLINE( 472)											w = (w + 1);
HXDLIN( 472)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 472)				this1 = b;
            			}
            			break;
            			case (int)1: {
HXLINE( 472)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 472)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 472)				{
HXLINE( 472)					a->width = width;
HXDLIN( 472)					a->height = height;
HXDLIN( 472)					a->data = ::Array_obj< int >::__new(0);
HXDLIN( 472)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 472)					{
HXLINE( 472)						int _g4 = 0;
HXDLIN( 472)						int _g5 = a->length;
HXDLIN( 472)						while((_g4 < _g5)){
HXLINE( 472)							_g4 = (_g4 + 1);
HXDLIN( 472)							int i = (_g4 - 1);
HXDLIN( 472)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN( 472)				this1 = a;
            			}
            			break;
            			case (int)2: {
HXLINE( 472)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 472)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 472)				{
HXLINE( 472)					b1->width = width;
HXDLIN( 472)					b1->height = height;
HXDLIN( 472)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 472)					int size = (b1->length * 4);
HXDLIN( 472)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 472)					{
HXLINE( 472)						int _g6 = 0;
HXDLIN( 472)						int _g7 = b1->length;
HXDLIN( 472)						while((_g6 < _g7)){
HXLINE( 472)							_g6 = (_g6 + 1);
HXDLIN( 472)							int i1 = (_g6 - 1);
HXDLIN( 472)							{
HXLINE( 472)								 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 472)								bool this3;
HXDLIN( 472)								if ((i1 >= 0)) {
HXLINE( 472)									this3 = (i1 < (this2->byteLength >> 2));
            								}
            								else {
HXLINE( 472)									this3 = false;
            								}
HXDLIN( 472)								if (this3) {
HXLINE( 472)									 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 472)									int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 472)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 472)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 472)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 472)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN( 472)				this1 = b1;
            			}
            			break;
            			case (int)3: {
HXLINE( 472)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 472)				 ::iterMagic::VecIntImg v = vec;
HXDLIN( 472)				{
HXLINE( 472)					v->width = width;
HXDLIN( 472)					v->height = height;
HXDLIN( 472)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 472)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 472)					{
HXLINE( 472)						int _g8 = 0;
HXDLIN( 472)						int _g9 = v->length;
HXDLIN( 472)						while((_g8 < _g9)){
HXLINE( 472)							_g8 = (_g8 + 1);
HXDLIN( 472)							int i2 = (_g8 - 1);
HXDLIN( 472)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN( 472)				this1 = v;
            			}
            			break;
            			case (int)4: {
HXLINE( 472)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 472)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 472)				{
HXLINE( 472)					b2->width = width;
HXDLIN( 472)					b2->height = height;
HXDLIN( 472)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 472)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 472)					{
HXLINE( 472)						int len1 = b2->length;
HXDLIN( 472)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 472)						if (::hx::IsNull( d->head )) {
HXLINE( 472)							int _g10 = 0;
HXDLIN( 472)							int _g11 = len1;
HXDLIN( 472)							while((_g10 < _g11)){
HXLINE( 472)								_g10 = (_g10 + 1);
HXDLIN( 472)								int i3 = (_g10 - 1);
HXDLIN( 472)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE( 472)							int _g12 = 0;
HXDLIN( 472)							int _g13 = len1;
HXDLIN( 472)							while((_g12 < _g13)){
HXLINE( 472)								_g12 = (_g12 + 1);
HXDLIN( 472)								int i4 = (_g12 - 1);
HXDLIN( 472)								{
HXLINE( 472)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 472)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 472)									{
HXLINE( 472)										int _g14 = 0;
HXDLIN( 472)										int _g15 = i4;
HXDLIN( 472)										while((_g14 < _g15)){
HXLINE( 472)											_g14 = (_g14 + 1);
HXDLIN( 472)											int i5 = (_g14 - 1);
HXDLIN( 472)											prev = l;
HXDLIN( 472)											l = l->next;
            										}
            									}
HXDLIN( 472)									if (::hx::IsNull( prev )) {
HXLINE( 472)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 472)										l = null();
            									}
            									else {
HXLINE( 472)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 472)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 472)				this1 = b2;
            			}
            			break;
            		}
HXLINE( 471)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Img_Impl__obj,_new,return )

int Img_Impl__obj::set(::Dynamic this1,int index,int value){
            	HX_STACKFRAME(&_hx_pos_8554306bd091a37e_477_set)
HXDLIN( 477)		return ::iterMagic::Iimg_obj::set(this1,index,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Img_Impl__obj,set,return )

int Img_Impl__obj::get(::Dynamic this1,int index){
            	HX_STACKFRAME(&_hx_pos_8554306bd091a37e_482_get)
HXDLIN( 482)		return ::iterMagic::Iimg_obj::get(this1,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Img_Impl__obj,get,return )

 ::iterMagic::RawImageData Img_Impl__obj::get_raw(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_8554306bd091a37e_487_get_raw)
HXDLIN( 487)		return ::iterMagic::Iimg_obj::getRaw(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Img_Impl__obj,get_raw,return )

 ::iterMagic::RawImageData Img_Impl__obj::set_raw(::Dynamic this1, ::iterMagic::RawImageData d){
            	HX_STACKFRAME(&_hx_pos_8554306bd091a37e_491_set_raw)
HXDLIN( 491)		return ::iterMagic::Iimg_obj::setRaw(this1,d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Img_Impl__obj,set_raw,return )

::Dynamic Img_Impl__obj::fromTo(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_8554306bd091a37e_494_fromTo)
HXLINE( 495)		{
HXLINE( 495)			int _g = 0;
HXDLIN( 495)			int _g1 = ( (int)(b->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 495)			while((_g < _g1)){
HXLINE( 495)				_g = (_g + 1);
HXDLIN( 495)				int i = (_g - 1);
HXDLIN( 495)				::iterMagic::Iimg_obj::set(b,i,::iterMagic::Iimg_obj::get(a,i));
            			}
            		}
HXLINE( 496)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Img_Impl__obj,fromTo,return )

::Dynamic Img_Impl__obj::toFrom(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_8554306bd091a37e_499_toFrom)
HXLINE( 500)		{
HXLINE( 500)			int _g = 0;
HXDLIN( 500)			int _g1 = ( (int)(b->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 500)			while((_g < _g1)){
HXLINE( 500)				_g = (_g + 1);
HXDLIN( 500)				int i = (_g - 1);
HXDLIN( 500)				::iterMagic::Iimg_obj::set(a,i,::iterMagic::Iimg_obj::get(b,i));
            			}
            		}
HXLINE( 501)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Img_Impl__obj,toFrom,return )


Img_Impl__obj::Img_Impl__obj()
{
}

bool Img_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fromTo") ) { outValue = fromTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFrom") ) { outValue = toFrom_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_raw") ) { outValue = get_raw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_raw") ) { outValue = set_raw_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Img_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Img_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Img_Impl__obj::__mClass;

static ::String Img_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("get_raw",7f,9e,cb,26),
	HX_("set_raw",8b,2f,cd,19),
	HX_("fromTo",85,9d,c6,b5),
	HX_("toFrom",85,10,7c,79),
	::String(null())
};

void Img_Impl__obj::__register()
{
	Img_Impl__obj _hx_dummy;
	Img_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic._Img.Img_Impl_",12,90,0c,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Img_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Img_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Img_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Img_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Img_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
} // end namespace _Img
