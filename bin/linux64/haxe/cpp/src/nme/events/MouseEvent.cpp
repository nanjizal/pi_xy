// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_MouseEvent
#include <nme/events/MouseEvent.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4452fe0e818906ff_49_new,"nme.events.MouseEvent","new",0x76b611d4,"nme.events.MouseEvent.new","nme/events/MouseEvent.hx",49,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_67_clone,"nme.events.MouseEvent","clone",0xccef99d1,"nme.events.MouseEvent.clone","nme/events/MouseEvent.hx",67,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_79_nmeCreateSimilar,"nme.events.MouseEvent","nmeCreateSimilar",0xa380c975,"nme.events.MouseEvent.nmeCreateSimilar","nme/events/MouseEvent.hx",79,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_93_toString,"nme.events.MouseEvent","toString",0xf2a6cab8,"nme.events.MouseEvent.toString","nme/events/MouseEvent.hx",93,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_97_updateAfterEvent,"nme.events.MouseEvent","updateAfterEvent",0x0fdae1d3,"nme.events.MouseEvent.updateAfterEvent","nme/events/MouseEvent.hx",97,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_70_nmeCreate,"nme.events.MouseEvent","nmeCreate",0x4d943b56,"nme.events.MouseEvent.nmeCreate","nme/events/MouseEvent.hx",70,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_11_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",11,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_12_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",12,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_13_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",13,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_14_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",14,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_15_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",15,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_16_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",16,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_17_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",17,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_18_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",18,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_19_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",19,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_20_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",20,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_21_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",21,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_22_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",22,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_23_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",23,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_24_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",24,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_25_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",25,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_26_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",26,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_42_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",42,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_43_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",43,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_44_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",44,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_45_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",45,0x6d6abdfc)
HX_LOCAL_STACK_FRAME(_hx_pos_4452fe0e818906ff_46_boot,"nme.events.MouseEvent","boot",0x60b2883e,"nme.events.MouseEvent.boot","nme/events/MouseEvent.hx",46,0x6d6abdfc)
namespace nme{
namespace events{

void MouseEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount){
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            		Float localX = __o_localX.Default(0);
            		Float localY = __o_localY.Default(0);
            		bool ctrlKey = __o_ctrlKey.Default(false);
            		bool altKey = __o_altKey.Default(false);
            		bool shiftKey = __o_shiftKey.Default(false);
            		bool buttonDown = __o_buttonDown.Default(false);
            		int delta = __o_delta.Default(0);
            		bool commandKey = __o_commandKey.Default(false);
            		int clickCount = __o_clickCount.Default(0);
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_49_new)
HXLINE(  50)		super::__construct(type,bubbles,cancelable);
HXLINE(  52)		this->localX = localX;
HXLINE(  53)		this->localY = localY;
HXLINE(  54)		this->relatedObject = relatedObject;
HXLINE(  55)		this->ctrlKey = ctrlKey;
HXLINE(  56)		this->altKey = altKey;
HXLINE(  57)		this->shiftKey = shiftKey;
HXLINE(  58)		this->buttonDown = buttonDown;
HXLINE(  59)		this->delta = delta;
HXLINE(  60)		this->commandKey = commandKey;
HXLINE(  61)		this->clickCount = clickCount;
HXLINE(  62)		this->cancelClick = false;
            	}

Dynamic MouseEvent_obj::__CreateEmpty() { return new MouseEvent_obj; }

void *MouseEvent_obj::_hx_vtable = 0;

Dynamic MouseEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MouseEvent_obj > _hx_result = new MouseEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12]);
	return _hx_result;
}

bool MouseEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x04c82490) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x04c82490;
	} else {
		return inClassId==(int)0x113d0d1f;
	}
}

 ::nme::events::Event MouseEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_4452fe0e818906ff_67_clone)
HXDLIN(  67)		::String _hx_tmp = this->get_type();
HXDLIN(  67)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  67)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  67)		return  ::nme::events::MouseEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->localX,this->localY,this->relatedObject,this->ctrlKey,this->altKey,this->shiftKey,this->buttonDown,this->delta,this->commandKey,this->clickCount);
            	}


 ::nme::events::MouseEvent MouseEvent_obj::nmeCreateSimilar(::String inType, ::nme::display::InteractiveObject related, ::nme::display::InteractiveObject targ){
            	HX_GC_STACKFRAME(&_hx_pos_4452fe0e818906ff_79_nmeCreateSimilar)
HXLINE(  80)		bool result = this->get_bubbles();
HXDLIN(  80)		bool result1 = this->get_cancelable();
HXDLIN(  80)		 ::nme::display::InteractiveObject result2;
HXDLIN(  80)		if (::hx::IsNull( related )) {
HXLINE(  80)			result2 = this->relatedObject;
            		}
            		else {
HXLINE(  80)			result2 = related;
            		}
HXDLIN(  80)		 ::nme::events::MouseEvent result3 =  ::nme::events::MouseEvent_obj::__alloc( HX_CTX ,inType,result,result1,this->localX,this->localY,result2,this->ctrlKey,this->altKey,this->shiftKey,this->buttonDown,this->delta,this->commandKey,this->clickCount);
HXLINE(  82)		result3->stageX = this->stageX;
HXLINE(  83)		result3->stageY = this->stageY;
HXLINE(  85)		if (::hx::IsNotNull( targ )) {
HXLINE(  86)			result3->set_target(targ);
            		}
HXLINE(  88)		return result3;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MouseEvent_obj,nmeCreateSimilar,return )

::String MouseEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_93_toString)
HXDLIN(  93)		::String _hx_tmp = ((HX_("MouseEvent(type=",b0,ac,c9,dd) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  93)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  93)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" localX=",f0,ca,14,54));
HXDLIN(  93)		::String _hx_tmp3 = ((((_hx_tmp2 + this->localX) + HX_(" localY=",cf,cb,14,54)) + this->localY) + HX_(" relatedObject=",13,62,ef,68));
HXDLIN(  93)		::String _hx_tmp4 = ((_hx_tmp3 + ::Std_obj::string(this->relatedObject)) + HX_(" ctrlKey=",29,e8,3e,4a));
HXDLIN(  93)		::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(this->ctrlKey)) + HX_(" altKey=",67,93,d6,12));
HXDLIN(  93)		::String _hx_tmp6 = ((_hx_tmp5 + ::Std_obj::string(this->altKey)) + HX_(" shiftKey=",40,5f,4f,db));
HXDLIN(  93)		::String _hx_tmp7 = ((_hx_tmp6 + ::Std_obj::string(this->shiftKey)) + HX_(" buttonDown=",29,d2,63,63));
HXDLIN(  93)		::String _hx_tmp8 = ((_hx_tmp7 + ::Std_obj::string(this->buttonDown)) + HX_(" delta=",65,e9,92,9d));
HXDLIN(  93)		::String _hx_tmp9 = ((_hx_tmp8 + this->delta) + HX_(" cancelClick=",2f,ac,90,87));
HXDLIN(  93)		return ((_hx_tmp9 + ::Std_obj::string(this->cancelClick)) + HX_(")",29,00,00,00));
            	}


void MouseEvent_obj::updateAfterEvent(){
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_97_updateAfterEvent)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MouseEvent_obj,updateAfterEvent,(void))

::String MouseEvent_obj::DOUBLE_CLICK;

::String MouseEvent_obj::CLICK;

::String MouseEvent_obj::MIDDLE_CLICK;

::String MouseEvent_obj::MIDDLE_MOUSE_DOWN;

::String MouseEvent_obj::MIDDLE_MOUSE_UP;

::String MouseEvent_obj::MOUSE_DOWN;

::String MouseEvent_obj::MOUSE_MOVE;

::String MouseEvent_obj::MOUSE_OUT;

::String MouseEvent_obj::MOUSE_OVER;

::String MouseEvent_obj::MOUSE_UP;

::String MouseEvent_obj::MOUSE_WHEEL;

::String MouseEvent_obj::RIGHT_CLICK;

::String MouseEvent_obj::RIGHT_MOUSE_DOWN;

::String MouseEvent_obj::RIGHT_MOUSE_UP;

::String MouseEvent_obj::ROLL_OUT;

::String MouseEvent_obj::ROLL_OVER;

int MouseEvent_obj::efLeftDown;

int MouseEvent_obj::efShiftDown;

int MouseEvent_obj::efCtrlDown;

int MouseEvent_obj::efAltDown;

int MouseEvent_obj::efCommandDown;

 ::nme::events::MouseEvent MouseEvent_obj::nmeCreate(::String inType,::cpp::Pointer<  nme::Event > inEvent, ::nme::geom::Point inLocal, ::nme::display::InteractiveObject inTarget){
            	HX_GC_STACKFRAME(&_hx_pos_4452fe0e818906ff_70_nmeCreate)
HXLINE(  71)		int flags = inEvent->get_ref().flags;
HXLINE(  72)		 ::nme::events::MouseEvent evt =  ::nme::events::MouseEvent_obj::__alloc( HX_CTX ,inType,true,true,inLocal->x,inLocal->y,null(),((flags & ::nme::events::MouseEvent_obj::efCtrlDown) != 0),((flags & ::nme::events::MouseEvent_obj::efAltDown) != 0),((flags & ::nme::events::MouseEvent_obj::efShiftDown) != 0),((flags & ::nme::events::MouseEvent_obj::efLeftDown) != 0),0,null(),0);
HXLINE(  73)		evt->stageX = ( (Float)(inEvent->get_ref().x) );
HXLINE(  74)		evt->stageY = ( (Float)(inEvent->get_ref().y) );
HXLINE(  75)		evt->set_target(inTarget);
HXLINE(  76)		return evt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(MouseEvent_obj,nmeCreate,return )


::hx::ObjectPtr< MouseEvent_obj > MouseEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount) {
	::hx::ObjectPtr< MouseEvent_obj > __this = new MouseEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

::hx::ObjectPtr< MouseEvent_obj > MouseEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount) {
	MouseEvent_obj *__this = (MouseEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MouseEvent_obj), true, "nme.events.MouseEvent"));
	*(void **)__this = MouseEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

MouseEvent_obj::MouseEvent_obj()
{
}

void MouseEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MouseEvent);
	HX_MARK_MEMBER_NAME(altKey,"altKey");
	HX_MARK_MEMBER_NAME(buttonDown,"buttonDown");
	HX_MARK_MEMBER_NAME(clickCount,"clickCount");
	HX_MARK_MEMBER_NAME(commandKey,"commandKey");
	HX_MARK_MEMBER_NAME(ctrlKey,"ctrlKey");
	HX_MARK_MEMBER_NAME(delta,"delta");
	HX_MARK_MEMBER_NAME(localX,"localX");
	HX_MARK_MEMBER_NAME(localY,"localY");
	HX_MARK_MEMBER_NAME(relatedObject,"relatedObject");
	HX_MARK_MEMBER_NAME(shiftKey,"shiftKey");
	HX_MARK_MEMBER_NAME(stageX,"stageX");
	HX_MARK_MEMBER_NAME(stageY,"stageY");
	HX_MARK_MEMBER_NAME(cancelClick,"cancelClick");
	 ::nme::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MouseEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(altKey,"altKey");
	HX_VISIT_MEMBER_NAME(buttonDown,"buttonDown");
	HX_VISIT_MEMBER_NAME(clickCount,"clickCount");
	HX_VISIT_MEMBER_NAME(commandKey,"commandKey");
	HX_VISIT_MEMBER_NAME(ctrlKey,"ctrlKey");
	HX_VISIT_MEMBER_NAME(delta,"delta");
	HX_VISIT_MEMBER_NAME(localX,"localX");
	HX_VISIT_MEMBER_NAME(localY,"localY");
	HX_VISIT_MEMBER_NAME(relatedObject,"relatedObject");
	HX_VISIT_MEMBER_NAME(shiftKey,"shiftKey");
	HX_VISIT_MEMBER_NAME(stageX,"stageX");
	HX_VISIT_MEMBER_NAME(stageY,"stageY");
	HX_VISIT_MEMBER_NAME(cancelClick,"cancelClick");
	 ::nme::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MouseEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { return ::hx::Val( delta ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { return ::hx::Val( altKey ); }
		if (HX_FIELD_EQ(inName,"localX") ) { return ::hx::Val( localX ); }
		if (HX_FIELD_EQ(inName,"localY") ) { return ::hx::Val( localY ); }
		if (HX_FIELD_EQ(inName,"stageX") ) { return ::hx::Val( stageX ); }
		if (HX_FIELD_EQ(inName,"stageY") ) { return ::hx::Val( stageY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { return ::hx::Val( ctrlKey ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return ::hx::Val( shiftKey ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonDown") ) { return ::hx::Val( buttonDown ); }
		if (HX_FIELD_EQ(inName,"clickCount") ) { return ::hx::Val( clickCount ); }
		if (HX_FIELD_EQ(inName,"commandKey") ) { return ::hx::Val( commandKey ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cancelClick") ) { return ::hx::Val( cancelClick ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { return ::hx::Val( relatedObject ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nmeCreateSimilar") ) { return ::hx::Val( nmeCreateSimilar_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAfterEvent") ) { return ::hx::Val( updateAfterEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MouseEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"efAltDown") ) { outValue = ( efAltDown ); return true; }
		if (HX_FIELD_EQ(inName,"nmeCreate") ) { outValue = nmeCreate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { outValue = ( efLeftDown ); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { outValue = ( efCtrlDown ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { outValue = ( efShiftDown ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { outValue = ( efCommandDown ); return true; }
	}
	return false;
}

::hx::Val MouseEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { delta=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { altKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localX") ) { localX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localY") ) { localY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageX") ) { stageX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageY") ) { stageY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { ctrlKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonDown") ) { buttonDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickCount") ) { clickCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commandKey") ) { commandKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cancelClick") ) { cancelClick=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { relatedObject=inValue.Cast<  ::nme::display::InteractiveObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MouseEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"efAltDown") ) { efAltDown=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"efLeftDown") ) { efLeftDown=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"efCtrlDown") ) { efCtrlDown=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"efShiftDown") ) { efShiftDown=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"efCommandDown") ) { efCommandDown=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MouseEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("altKey",f6,a7,ca,44));
	outFields->push(HX_("buttonDown",74,67,64,ac));
	outFields->push(HX_("clickCount",67,b3,e2,8a));
	outFields->push(HX_("commandKey",14,71,9b,43));
	outFields->push(HX_("ctrlKey",b4,35,7d,61));
	outFields->push(HX_("delta",f8,e7,26,d7));
	outFields->push(HX_("localX",8d,74,bf,59));
	outFields->push(HX_("localY",8e,74,bf,59));
	outFields->push(HX_("relatedObject",0a,bf,cb,e8));
	outFields->push(HX_("shiftKey",3d,92,9f,99));
	outFields->push(HX_("stageX",da,fb,f1,05));
	outFields->push(HX_("stageY",db,fb,f1,05));
	outFields->push(HX_("cancelClick",6e,e4,86,e6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MouseEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,altKey),HX_("altKey",f6,a7,ca,44)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,buttonDown),HX_("buttonDown",74,67,64,ac)},
	{::hx::fsInt,(int)offsetof(MouseEvent_obj,clickCount),HX_("clickCount",67,b3,e2,8a)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,commandKey),HX_("commandKey",14,71,9b,43)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,ctrlKey),HX_("ctrlKey",b4,35,7d,61)},
	{::hx::fsInt,(int)offsetof(MouseEvent_obj,delta),HX_("delta",f8,e7,26,d7)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,localX),HX_("localX",8d,74,bf,59)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,localY),HX_("localY",8e,74,bf,59)},
	{::hx::fsObject /*  ::nme::display::InteractiveObject */ ,(int)offsetof(MouseEvent_obj,relatedObject),HX_("relatedObject",0a,bf,cb,e8)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,shiftKey),HX_("shiftKey",3d,92,9f,99)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,stageX),HX_("stageX",da,fb,f1,05)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,stageY),HX_("stageY",db,fb,f1,05)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,cancelClick),HX_("cancelClick",6e,e4,86,e6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MouseEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MouseEvent_obj::DOUBLE_CLICK,HX_("DOUBLE_CLICK",3a,f5,e9,68)},
	{::hx::fsString,(void *) &MouseEvent_obj::CLICK,HX_("CLICK",28,b4,4c,c6)},
	{::hx::fsString,(void *) &MouseEvent_obj::MIDDLE_CLICK,HX_("MIDDLE_CLICK",7e,28,5f,94)},
	{::hx::fsString,(void *) &MouseEvent_obj::MIDDLE_MOUSE_DOWN,HX_("MIDDLE_MOUSE_DOWN",06,b0,34,98)},
	{::hx::fsString,(void *) &MouseEvent_obj::MIDDLE_MOUSE_UP,HX_("MIDDLE_MOUSE_UP",ff,48,8e,ac)},
	{::hx::fsString,(void *) &MouseEvent_obj::MOUSE_DOWN,HX_("MOUSE_DOWN",1c,9c,fa,de)},
	{::hx::fsString,(void *) &MouseEvent_obj::MOUSE_MOVE,HX_("MOUSE_MOVE",cb,86,ed,e4)},
	{::hx::fsString,(void *) &MouseEvent_obj::MOUSE_OUT,HX_("MOUSE_OUT",f4,b5,1a,11)},
	{::hx::fsString,(void *) &MouseEvent_obj::MOUSE_OVER,HX_("MOUSE_OVER",0e,35,45,e6)},
	{::hx::fsString,(void *) &MouseEvent_obj::MOUSE_UP,HX_("MOUSE_UP",95,e3,c7,fd)},
	{::hx::fsString,(void *) &MouseEvent_obj::MOUSE_WHEEL,HX_("MOUSE_WHEEL",81,d3,3c,28)},
	{::hx::fsString,(void *) &MouseEvent_obj::RIGHT_CLICK,HX_("RIGHT_CLICK",25,b4,dd,1a)},
	{::hx::fsString,(void *) &MouseEvent_obj::RIGHT_MOUSE_DOWN,HX_("RIGHT_MOUSE_DOWN",ff,86,b7,29)},
	{::hx::fsString,(void *) &MouseEvent_obj::RIGHT_MOUSE_UP,HX_("RIGHT_MOUSE_UP",b8,3f,db,17)},
	{::hx::fsString,(void *) &MouseEvent_obj::ROLL_OUT,HX_("ROLL_OUT",6c,37,e3,8b)},
	{::hx::fsString,(void *) &MouseEvent_obj::ROLL_OVER,HX_("ROLL_OVER",96,fc,ed,da)},
	{::hx::fsInt,(void *) &MouseEvent_obj::efLeftDown,HX_("efLeftDown",8a,19,ac,0c)},
	{::hx::fsInt,(void *) &MouseEvent_obj::efShiftDown,HX_("efShiftDown",63,6d,a6,e4)},
	{::hx::fsInt,(void *) &MouseEvent_obj::efCtrlDown,HX_("efCtrlDown",2e,bc,bb,aa)},
	{::hx::fsInt,(void *) &MouseEvent_obj::efAltDown,HX_("efAltDown",ca,73,98,b8)},
	{::hx::fsInt,(void *) &MouseEvent_obj::efCommandDown,HX_("efCommandDown",6c,60,38,7b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MouseEvent_obj_sMemberFields[] = {
	HX_("altKey",f6,a7,ca,44),
	HX_("buttonDown",74,67,64,ac),
	HX_("clickCount",67,b3,e2,8a),
	HX_("commandKey",14,71,9b,43),
	HX_("ctrlKey",b4,35,7d,61),
	HX_("delta",f8,e7,26,d7),
	HX_("localX",8d,74,bf,59),
	HX_("localY",8e,74,bf,59),
	HX_("relatedObject",0a,bf,cb,e8),
	HX_("shiftKey",3d,92,9f,99),
	HX_("stageX",da,fb,f1,05),
	HX_("stageY",db,fb,f1,05),
	HX_("cancelClick",6e,e4,86,e6),
	HX_("clone",5d,13,63,48),
	HX_("nmeCreateSimilar",69,e3,6d,b6),
	HX_("toString",ac,d0,6e,38),
	HX_("updateAfterEvent",c7,fb,c7,22),
	::String(null()) };

static void MouseEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MouseEvent_obj::DOUBLE_CLICK,"DOUBLE_CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::CLICK,"CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MIDDLE_CLICK,"MIDDLE_CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_DOWN,"MIDDLE_MOUSE_DOWN");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_UP,"MIDDLE_MOUSE_UP");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_DOWN,"MOUSE_DOWN");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_MOVE,"MOUSE_MOVE");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_OUT,"MOUSE_OUT");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_OVER,"MOUSE_OVER");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_UP,"MOUSE_UP");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::MOUSE_WHEEL,"MOUSE_WHEEL");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::RIGHT_CLICK,"RIGHT_CLICK");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_DOWN,"RIGHT_MOUSE_DOWN");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_UP,"RIGHT_MOUSE_UP");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::ROLL_OUT,"ROLL_OUT");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::ROLL_OVER,"ROLL_OVER");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efLeftDown,"efLeftDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efShiftDown,"efShiftDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efCtrlDown,"efCtrlDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efAltDown,"efAltDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::efCommandDown,"efCommandDown");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MouseEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::DOUBLE_CLICK,"DOUBLE_CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::CLICK,"CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MIDDLE_CLICK,"MIDDLE_CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_DOWN,"MIDDLE_MOUSE_DOWN");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MIDDLE_MOUSE_UP,"MIDDLE_MOUSE_UP");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_DOWN,"MOUSE_DOWN");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_MOVE,"MOUSE_MOVE");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_OUT,"MOUSE_OUT");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_OVER,"MOUSE_OVER");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_UP,"MOUSE_UP");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::MOUSE_WHEEL,"MOUSE_WHEEL");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::RIGHT_CLICK,"RIGHT_CLICK");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_DOWN,"RIGHT_MOUSE_DOWN");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::RIGHT_MOUSE_UP,"RIGHT_MOUSE_UP");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::ROLL_OUT,"ROLL_OUT");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::ROLL_OVER,"ROLL_OVER");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efLeftDown,"efLeftDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efShiftDown,"efShiftDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efCtrlDown,"efCtrlDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efAltDown,"efAltDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::efCommandDown,"efCommandDown");
};

#endif

::hx::Class MouseEvent_obj::__mClass;

static ::String MouseEvent_obj_sStaticFields[] = {
	HX_("DOUBLE_CLICK",3a,f5,e9,68),
	HX_("CLICK",28,b4,4c,c6),
	HX_("MIDDLE_CLICK",7e,28,5f,94),
	HX_("MIDDLE_MOUSE_DOWN",06,b0,34,98),
	HX_("MIDDLE_MOUSE_UP",ff,48,8e,ac),
	HX_("MOUSE_DOWN",1c,9c,fa,de),
	HX_("MOUSE_MOVE",cb,86,ed,e4),
	HX_("MOUSE_OUT",f4,b5,1a,11),
	HX_("MOUSE_OVER",0e,35,45,e6),
	HX_("MOUSE_UP",95,e3,c7,fd),
	HX_("MOUSE_WHEEL",81,d3,3c,28),
	HX_("RIGHT_CLICK",25,b4,dd,1a),
	HX_("RIGHT_MOUSE_DOWN",ff,86,b7,29),
	HX_("RIGHT_MOUSE_UP",b8,3f,db,17),
	HX_("ROLL_OUT",6c,37,e3,8b),
	HX_("ROLL_OVER",96,fc,ed,da),
	HX_("efLeftDown",8a,19,ac,0c),
	HX_("efShiftDown",63,6d,a6,e4),
	HX_("efCtrlDown",2e,bc,bb,aa),
	HX_("efAltDown",ca,73,98,b8),
	HX_("efCommandDown",6c,60,38,7b),
	HX_("nmeCreate",e2,6a,d1,16),
	::String(null())
};

void MouseEvent_obj::__register()
{
	MouseEvent_obj _hx_dummy;
	MouseEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.MouseEvent",e2,d7,33,fb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MouseEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &MouseEvent_obj::__SetStatic;
	__mClass->mMarkFunc = MouseEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MouseEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MouseEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MouseEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MouseEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MouseEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MouseEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MouseEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_11_boot)
HXDLIN(  11)		DOUBLE_CLICK = HX_("doubleClick",77,03,76,cd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_12_boot)
HXDLIN(  12)		CLICK = HX_("click",48,7c,5e,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_13_boot)
HXDLIN(  13)		MIDDLE_CLICK = HX_("middleClick",b3,e4,e5,43);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_14_boot)
HXDLIN(  14)		MIDDLE_MOUSE_DOWN = HX_("middleMouseDown",12,2b,fe,01);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_15_boot)
HXDLIN(  15)		MIDDLE_MOUSE_UP = HX_("middleMouseUp",0b,8d,f5,3a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_16_boot)
HXDLIN(  16)		MOUSE_DOWN = HX_("mouseDown",27,b1,c2,ee);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_17_boot)
HXDLIN(  17)		MOUSE_MOVE = HX_("mouseMove",d6,9b,b5,f4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_18_boot)
HXDLIN(  18)		MOUSE_OUT = HX_("mouseOut",69,e7,1d,a4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_19_boot)
HXDLIN(  19)		MOUSE_OVER = HX_("mouseOver",19,4a,0d,f6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_20_boot)
HXDLIN(  20)		MOUSE_UP = HX_("mouseUp",e0,f3,72,c0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_21_boot)
HXDLIN(  21)		MOUSE_WHEEL = HX_("mouseWheel",36,28,87,e7);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_22_boot)
HXDLIN(  22)		RIGHT_CLICK = HX_("rightClick",cc,62,23,4b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_23_boot)
HXDLIN(  23)		RIGHT_MOUSE_DOWN = HX_("rightMouseDown",ab,29,d7,cd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_24_boot)
HXDLIN(  24)		RIGHT_MOUSE_UP = HX_("rightMouseUp",64,83,21,ab);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_25_boot)
HXDLIN(  25)		ROLL_OUT = HX_("rollOut",11,f9,11,5d);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_26_boot)
HXDLIN(  26)		ROLL_OVER = HX_("rollOver",71,ab,a8,12);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_42_boot)
HXDLIN(  42)		efLeftDown = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_43_boot)
HXDLIN(  43)		efShiftDown = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_44_boot)
HXDLIN(  44)		efCtrlDown = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_45_boot)
HXDLIN(  45)		efAltDown = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4452fe0e818906ff_46_boot)
HXDLIN(  46)		efCommandDown = 16;
            	}
}

} // end namespace nme
} // end namespace events
