// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_Listener
#include <nme/events/Listener.h>
#endif
#ifndef INCLUDED_nme_utils_WeakRef
#include <nme/utils/WeakRef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_96da4c6d039bed7e_21_new,"nme.events.Listener","new",0x4bec2cd3,"nme.events.Listener.new","nme/events/EventDispatcher.hx",21,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_96da4c6d039bed7e_29_dispatchEvent,"nme.events.Listener","dispatchEvent",0x52725133,"nme.events.Listener.dispatchEvent","nme/events/EventDispatcher.hx",29,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_96da4c6d039bed7e_36_Is,"nme.events.Listener","Is",0x061472f7,"nme.events.Listener.Is","nme/events/EventDispatcher.hx",36,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_96da4c6d039bed7e_18_boot,"nme.events.Listener","boot",0x1ad40c5f,"nme.events.Listener.boot","nme/events/EventDispatcher.hx",18,0x1eb8c64a)
namespace nme{
namespace events{

void Listener_obj::__construct( ::Dynamic inListener,bool inUseCapture,int inPriority,bool inUseWeakRef){
            	HX_GC_STACKFRAME(&_hx_pos_96da4c6d039bed7e_21_new)
HXLINE(  22)		this->mListner =  ::nme::utils::WeakRef_obj::__alloc( HX_CTX ,inListener,inUseWeakRef);
HXLINE(  23)		this->mUseCapture = inUseCapture;
HXLINE(  24)		this->mPriority = inPriority;
HXLINE(  25)		this->mID = ::nme::events::Listener_obj::sIDs++;
            	}

Dynamic Listener_obj::__CreateEmpty() { return new Listener_obj; }

void *Listener_obj::_hx_vtable = 0;

Dynamic Listener_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Listener_obj > _hx_result = new Listener_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Listener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6ef96073;
}

void Listener_obj::dispatchEvent( ::nme::events::Event event){
            	HX_STACKFRAME(&_hx_pos_96da4c6d039bed7e_29_dispatchEvent)
HXLINE(  30)		 ::Dynamic ref = this->mListner->get();
HXLINE(  31)		if (::hx::IsNotNull( ref )) {
HXLINE(  32)			ref(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Listener_obj,dispatchEvent,(void))

bool Listener_obj::Is( ::Dynamic inListener,bool inCapture){
            	HX_STACKFRAME(&_hx_pos_96da4c6d039bed7e_36_Is)
HXLINE(  37)		 ::Dynamic ref = this->mListner->get();
HXLINE(  38)		if (::hx::IsNull( ref )) {
HXLINE(  39)			return false;
            		}
HXLINE(  40)		if (::Reflect_obj::compareMethods(ref,inListener)) {
HXLINE(  40)			return (this->mUseCapture == inCapture);
            		}
            		else {
HXLINE(  40)			return false;
            		}
HXDLIN(  40)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Listener_obj,Is,return )

int Listener_obj::sIDs;


::hx::ObjectPtr< Listener_obj > Listener_obj::__new( ::Dynamic inListener,bool inUseCapture,int inPriority,bool inUseWeakRef) {
	::hx::ObjectPtr< Listener_obj > __this = new Listener_obj();
	__this->__construct(inListener,inUseCapture,inPriority,inUseWeakRef);
	return __this;
}

::hx::ObjectPtr< Listener_obj > Listener_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inListener,bool inUseCapture,int inPriority,bool inUseWeakRef) {
	Listener_obj *__this = (Listener_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Listener_obj), true, "nme.events.Listener"));
	*(void **)__this = Listener_obj::_hx_vtable;
	__this->__construct(inListener,inUseCapture,inPriority,inUseWeakRef);
	return __this;
}

Listener_obj::Listener_obj()
{
}

void Listener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Listener);
	HX_MARK_MEMBER_NAME(mID,"mID");
	HX_MARK_MEMBER_NAME(mListner,"mListner");
	HX_MARK_MEMBER_NAME(mPriority,"mPriority");
	HX_MARK_MEMBER_NAME(mUseCapture,"mUseCapture");
	HX_MARK_END_CLASS();
}

void Listener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mID,"mID");
	HX_VISIT_MEMBER_NAME(mListner,"mListner");
	HX_VISIT_MEMBER_NAME(mPriority,"mPriority");
	HX_VISIT_MEMBER_NAME(mUseCapture,"mUseCapture");
}

::hx::Val Listener_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"Is") ) { return ::hx::Val( Is_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mID") ) { return ::hx::Val( mID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mListner") ) { return ::hx::Val( mListner ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mPriority") ) { return ::hx::Val( mPriority ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mUseCapture") ) { return ::hx::Val( mUseCapture ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return ::hx::Val( dispatchEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Listener_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sIDs") ) { outValue = ( sIDs ); return true; }
	}
	return false;
}

::hx::Val Listener_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mID") ) { mID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mListner") ) { mListner=inValue.Cast<  ::nme::utils::WeakRef >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mPriority") ) { mPriority=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mUseCapture") ) { mUseCapture=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Listener_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sIDs") ) { sIDs=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Listener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mID",88,f5,52,00));
	outFields->push(HX_("mListner",d0,01,68,32));
	outFields->push(HX_("mPriority",f1,ec,b9,65));
	outFields->push(HX_("mUseCapture",cc,a1,69,7f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Listener_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Listener_obj,mID),HX_("mID",88,f5,52,00)},
	{::hx::fsObject /*  ::nme::utils::WeakRef */ ,(int)offsetof(Listener_obj,mListner),HX_("mListner",d0,01,68,32)},
	{::hx::fsInt,(int)offsetof(Listener_obj,mPriority),HX_("mPriority",f1,ec,b9,65)},
	{::hx::fsBool,(int)offsetof(Listener_obj,mUseCapture),HX_("mUseCapture",cc,a1,69,7f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Listener_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Listener_obj::sIDs,HX_("sIDs",a5,29,3b,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Listener_obj_sMemberFields[] = {
	HX_("mID",88,f5,52,00),
	HX_("mListner",d0,01,68,32),
	HX_("mPriority",f1,ec,b9,65),
	HX_("mUseCapture",cc,a1,69,7f),
	HX_("dispatchEvent",00,c7,64,c6),
	HX_("Is",0a,40,00,00),
	::String(null()) };

static void Listener_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Listener_obj::sIDs,"sIDs");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Listener_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Listener_obj::sIDs,"sIDs");
};

#endif

::hx::Class Listener_obj::__mClass;

static ::String Listener_obj_sStaticFields[] = {
	HX_("sIDs",a5,29,3b,4c),
	::String(null())
};

void Listener_obj::__register()
{
	Listener_obj _hx_dummy;
	Listener_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.Listener",61,c7,e2,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Listener_obj::__GetStatic;
	__mClass->mSetStaticField = &Listener_obj::__SetStatic;
	__mClass->mMarkFunc = Listener_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Listener_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Listener_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Listener_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Listener_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Listener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Listener_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Listener_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_96da4c6d039bed7e_18_boot)
HXDLIN(  18)		sIDs = 1;
            	}
}

} // end namespace nme
} // end namespace events
