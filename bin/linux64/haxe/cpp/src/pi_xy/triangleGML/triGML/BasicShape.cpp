// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_508a13f99dae971e_26_new,"pi_xy.triangleGML.triGML.BasicShape","new",0x70836fe1,"pi_xy.triangleGML.triGML.BasicShape.new","pi_xy/triangleGML/triGML/BasicShape.hx",26,0xcb8f4490)
HX_LOCAL_STACK_FRAME(_hx_pos_508a13f99dae971e_34_setParameter,"pi_xy.triangleGML.triGML.BasicShape","setParameter",0x24eade06,"pi_xy.triangleGML.triGML.BasicShape.setParameter","pi_xy/triangleGML/triGML/BasicShape.hx",34,0xcb8f4490)
HX_LOCAL_STACK_FRAME(_hx_pos_508a13f99dae971e_7_boot,"pi_xy.triangleGML.triGML.BasicShape","boot",0xfa977591,"pi_xy.triangleGML.triGML.BasicShape.boot","pi_xy/triangleGML/triGML/BasicShape.hx",7,0xcb8f4490)
HX_LOCAL_STACK_FRAME(_hx_pos_508a13f99dae971e_8_boot,"pi_xy.triangleGML.triGML.BasicShape","boot",0xfa977591,"pi_xy.triangleGML.triGML.BasicShape.boot","pi_xy/triangleGML/triGML/BasicShape.hx",8,0xcb8f4490)
namespace pi_xy{
namespace triangleGML{
namespace triGML{

void BasicShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_508a13f99dae971e_26_new)
HXLINE(  27)		super::__construct(opacity,visibility);
HXLINE(  28)		this->strokeColor = strokeColor;
HXLINE(  29)		this->strokeWidth = strokeWidth;
HXLINE(  30)		this->strokeDashGapArray = strokeDashGapArray;
            	}

bool BasicShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1a0bd5c0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
	} else {
		return inClassId==(int)0x7ff8cec5;
	}
}

void BasicShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_508a13f99dae971e_34_setParameter)
HXDLIN(  34)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("strokeColor",8b,b2,16,63)) ){
HXLINE(  36)			this->strokeColor = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  36)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokeDashGapArray",ed,97,4a,47)) ){
HXLINE(  40)			this->strokeDashGapArray = null();
HXDLIN(  40)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokeWidth",2e,f7,1c,e3)) ){
HXLINE(  38)			this->strokeWidth = ::Std_obj::parseFloat(value);
HXDLIN(  38)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  42)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


Float BasicShape_obj::dashLength;

Float BasicShape_obj::gapLength;


BasicShape_obj::BasicShape_obj()
{
}

void BasicShape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BasicShape);
	HX_MARK_MEMBER_NAME(strokeColor,"strokeColor");
	HX_MARK_MEMBER_NAME(strokeWidth,"strokeWidth");
	HX_MARK_MEMBER_NAME(strokeDashGapArray,"strokeDashGapArray");
	 ::pi_xy::triangleGML::triGML::GroupShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BasicShape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(strokeColor,"strokeColor");
	HX_VISIT_MEMBER_NAME(strokeWidth,"strokeWidth");
	HX_VISIT_MEMBER_NAME(strokeDashGapArray,"strokeDashGapArray");
	 ::pi_xy::triangleGML::triGML::GroupShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BasicShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"strokeColor") ) { return ::hx::Val( strokeColor ); }
		if (HX_FIELD_EQ(inName,"strokeWidth") ) { return ::hx::Val( strokeWidth ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strokeDashGapArray") ) { return ::hx::Val( strokeDashGapArray ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BasicShape_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"gapLength") ) { outValue = ( gapLength ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dashLength") ) { outValue = ( dashLength ); return true; }
	}
	return false;
}

::hx::Val BasicShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"strokeColor") ) { strokeColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strokeWidth") ) { strokeWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strokeDashGapArray") ) { strokeDashGapArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BasicShape_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"gapLength") ) { gapLength=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dashLength") ) { dashLength=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void BasicShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("strokeColor",8b,b2,16,63));
	outFields->push(HX_("strokeWidth",2e,f7,1c,e3));
	outFields->push(HX_("strokeDashGapArray",ed,97,4a,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BasicShape_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(BasicShape_obj,strokeColor),HX_("strokeColor",8b,b2,16,63)},
	{::hx::fsFloat,(int)offsetof(BasicShape_obj,strokeWidth),HX_("strokeWidth",2e,f7,1c,e3)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BasicShape_obj,strokeDashGapArray),HX_("strokeDashGapArray",ed,97,4a,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BasicShape_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &BasicShape_obj::dashLength,HX_("dashLength",d8,27,8d,74)},
	{::hx::fsFloat,(void *) &BasicShape_obj::gapLength,HX_("gapLength",9c,7a,3e,90)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BasicShape_obj_sMemberFields[] = {
	HX_("strokeColor",8b,b2,16,63),
	HX_("strokeWidth",2e,f7,1c,e3),
	HX_("strokeDashGapArray",ed,97,4a,47),
	HX_("setParameter",a7,f5,ff,6c),
	::String(null()) };

static void BasicShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BasicShape_obj::dashLength,"dashLength");
	HX_MARK_MEMBER_NAME(BasicShape_obj::gapLength,"gapLength");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BasicShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BasicShape_obj::dashLength,"dashLength");
	HX_VISIT_MEMBER_NAME(BasicShape_obj::gapLength,"gapLength");
};

#endif

::hx::Class BasicShape_obj::__mClass;

static ::String BasicShape_obj_sStaticFields[] = {
	HX_("dashLength",d8,27,8d,74),
	HX_("gapLength",9c,7a,3e,90),
	::String(null())
};

void BasicShape_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.triGML.BasicShape",6f,eb,7b,e4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &BasicShape_obj::__GetStatic;
	__mClass->mSetStaticField = &BasicShape_obj::__SetStatic;
	__mClass->mMarkFunc = BasicShape_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BasicShape_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BasicShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BasicShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BasicShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BasicShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BasicShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BasicShape_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_508a13f99dae971e_7_boot)
HXDLIN(   7)		dashLength = ((Float)2.);
            	}
{
            	HX_STACKFRAME(&_hx_pos_508a13f99dae971e_8_boot)
HXDLIN(   8)		gapLength = ((Float)1.);
            	}
}

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML
