// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_RawImageData
#include <iterMagic/RawImageData.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_iterMagic__Img_ImgMulti_Impl_
#include <iterMagic/_Img/ImgMulti_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_510_create,"iterMagic._Img.ImgMulti_Impl_","create",0x741ecd83,"iterMagic._Img.ImgMulti_Impl_.create","iterMagic/Img.hx",510,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_524_check,"iterMagic._Img.ImgMulti_Impl_","check",0xe1cda021,"iterMagic._Img.ImgMulti_Impl_.check","iterMagic/Img.hx",524,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_543_toArrIntImg,"iterMagic._Img.ImgMulti_Impl_","toArrIntImg",0xf6f62ab3,"iterMagic._Img.ImgMulti_Impl_.toArrIntImg","iterMagic/Img.hx",543,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_549_toVecIntImg,"iterMagic._Img.ImgMulti_Impl_","toVecIntImg",0xed7206e6,"iterMagic._Img.ImgMulti_Impl_.toVecIntImg","iterMagic/Img.hx",549,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_555_toBytesImg,"iterMagic._Img.ImgMulti_Impl_","toBytesImg",0x19fddafa,"iterMagic._Img.ImgMulti_Impl_.toBytesImg","iterMagic/Img.hx",555,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_561_toU32ArrImg,"iterMagic._Img.ImgMulti_Impl_","toU32ArrImg",0x12779ab4,"iterMagic._Img.ImgMulti_Impl_.toU32ArrImg","iterMagic/Img.hx",561,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_567_toStackIntImg,"iterMagic._Img.ImgMulti_Impl_","toStackIntImg",0x42713e5a,"iterMagic._Img.ImgMulti_Impl_.toStackIntImg","iterMagic/Img.hx",567,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_572_arrInt,"iterMagic._Img.ImgMulti_Impl_","arrInt",0xafed9f95,"iterMagic._Img.ImgMulti_Impl_.arrInt","iterMagic/Img.hx",572,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_578_vecInt,"iterMagic._Img.ImgMulti_Impl_","vecInt",0x8f4c7582,"iterMagic._Img.ImgMulti_Impl_.vecInt","iterMagic/Img.hx",578,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_584_bytes,"iterMagic._Img.ImgMulti_Impl_","bytes",0x59af0fc4,"iterMagic._Img.ImgMulti_Impl_.bytes","iterMagic/Img.hx",584,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_590_u32arr,"iterMagic._Img.ImgMulti_Impl_","u32arr",0x3e96dd14,"iterMagic._Img.ImgMulti_Impl_.u32arr","iterMagic/Img.hx",590,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_596_stackInt,"iterMagic._Img.ImgMulti_Impl_","stackInt",0x413970ce,"iterMagic._Img.ImgMulti_Impl_.stackInt","iterMagic/Img.hx",596,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_604_set,"iterMagic._Img.ImgMulti_Impl_","set",0xd7e9eabb,"iterMagic._Img.ImgMulti_Impl_.set","iterMagic/Img.hx",604,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_609_get,"iterMagic._Img.ImgMulti_Impl_","get",0xd7e0cfaf,"iterMagic._Img.ImgMulti_Impl_.get","iterMagic/Img.hx",609,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_613_setRaw,"iterMagic._Img.ImgMulti_Impl_","setRaw",0x677dc9ed,"iterMagic._Img.ImgMulti_Impl_.setRaw","iterMagic/Img.hx",613,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_617_getRaw,"iterMagic._Img.ImgMulti_Impl_","getRaw",0x9b357579,"iterMagic._Img.ImgMulti_Impl_.getRaw","iterMagic/Img.hx",617,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_621_position,"iterMagic._Img.ImgMulti_Impl_","position",0x7295f6f0,"iterMagic._Img.ImgMulti_Impl_.position","iterMagic/Img.hx",621,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_624_toString,"iterMagic._Img.ImgMulti_Impl_","toString",0xe00a26f3,"iterMagic._Img.ImgMulti_Impl_.toString","iterMagic/Img.hx",624,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_631_hasNext,"iterMagic._Img.ImgMulti_Impl_","hasNext",0x2db0f506,"iterMagic._Img.ImgMulti_Impl_.hasNext","iterMagic/Img.hx",631,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_635_next,"iterMagic._Img.ImgMulti_Impl_","next",0x11756bba,"iterMagic._Img.ImgMulti_Impl_.next","iterMagic/Img.hx",635,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_639_resetCount,"iterMagic._Img.ImgMulti_Impl_","resetCount",0x78d23287,"iterMagic._Img.ImgMulti_Impl_.resetCount","iterMagic/Img.hx",639,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_642_traceGrid,"iterMagic._Img.ImgMulti_Impl_","traceGrid",0xbbdedfc4,"iterMagic._Img.ImgMulti_Impl_.traceGrid","iterMagic/Img.hx",642,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_655_fromTo,"iterMagic._Img.ImgMulti_Impl_","fromTo",0xadd6040c,"iterMagic._Img.ImgMulti_Impl_.fromTo","iterMagic/Img.hx",655,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_a549af4bfad84065_660_toFrom,"iterMagic._Img.ImgMulti_Impl_","toFrom",0x718b770c,"iterMagic._Img.ImgMulti_Impl_.toFrom","iterMagic/Img.hx",660,0x8899afd5)
namespace iterMagic{
namespace _Img{

void ImgMulti_Impl__obj::__construct() { }

Dynamic ImgMulti_Impl__obj::__CreateEmpty() { return new ImgMulti_Impl__obj; }

void *ImgMulti_Impl__obj::_hx_vtable = 0;

Dynamic ImgMulti_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImgMulti_Impl__obj > _hx_result = new ImgMulti_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImgMulti_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71d1210f;
}

::Dynamic ImgMulti_Impl__obj::create(int width,int height,::hx::Null< int >  __o_imageType){
            		int imageType = __o_imageType.Default(2);
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_510_create)
HXDLIN( 510)		switch((int)(imageType)){
            			case (int)0: {
HXLINE( 512)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 512)				 ::iterMagic::BytesImg b = byt;
HXDLIN( 512)				{
HXLINE( 512)					b->width = width;
HXDLIN( 512)					b->height = height;
HXDLIN( 512)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 512)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 512)					{
HXLINE( 512)						int len = b->length;
HXDLIN( 512)						int w = 0;
HXDLIN( 512)						{
HXLINE( 512)							int _g = 0;
HXDLIN( 512)							int _g1 = b->height;
HXDLIN( 512)							while((_g < _g1)){
HXLINE( 512)								_g = (_g + 1);
HXDLIN( 512)								int y = (_g - 1);
HXDLIN( 512)								{
HXLINE( 512)									int _g2 = 0;
HXDLIN( 512)									int _g3 = b->width;
HXDLIN( 512)									while((_g2 < _g3)){
HXLINE( 512)										_g2 = (_g2 + 1);
HXDLIN( 512)										int x = (_g2 - 1);
HXDLIN( 512)										{
HXLINE( 512)											w = (w + 1);
HXDLIN( 512)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 512)										{
HXLINE( 512)											w = (w + 1);
HXDLIN( 512)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 512)										{
HXLINE( 512)											w = (w + 1);
HXDLIN( 512)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 512)										{
HXLINE( 512)											w = (w + 1);
HXDLIN( 512)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 512)				return b;
            			}
            			break;
            			case (int)1: {
HXLINE( 514)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 514)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 514)				{
HXLINE( 514)					a->width = width;
HXDLIN( 514)					a->height = height;
HXDLIN( 514)					a->data = ::Array_obj< int >::__new(0);
HXDLIN( 514)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 514)					{
HXLINE( 514)						int _g4 = 0;
HXDLIN( 514)						int _g5 = a->length;
HXDLIN( 514)						while((_g4 < _g5)){
HXLINE( 514)							_g4 = (_g4 + 1);
HXDLIN( 514)							int i = (_g4 - 1);
HXDLIN( 514)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN( 514)				return a;
            			}
            			break;
            			case (int)2: {
HXLINE( 516)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 516)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 516)				{
HXLINE( 516)					b1->width = width;
HXDLIN( 516)					b1->height = height;
HXDLIN( 516)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 516)					int size = (b1->length * 4);
HXDLIN( 516)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 516)					{
HXLINE( 516)						int _g6 = 0;
HXDLIN( 516)						int _g7 = b1->length;
HXDLIN( 516)						while((_g6 < _g7)){
HXLINE( 516)							_g6 = (_g6 + 1);
HXDLIN( 516)							int i1 = (_g6 - 1);
HXDLIN( 516)							{
HXLINE( 516)								 ::haxe::io::ArrayBufferViewImpl this1 = b1->data;
HXDLIN( 516)								bool _hx_tmp;
HXDLIN( 516)								if ((i1 >= 0)) {
HXLINE( 516)									_hx_tmp = (i1 < (this1->byteLength >> 2));
            								}
            								else {
HXLINE( 516)									_hx_tmp = false;
            								}
HXDLIN( 516)								if (_hx_tmp) {
HXLINE( 516)									 ::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 516)									int pos = ((i1 << 2) + this1->byteOffset);
HXDLIN( 516)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 516)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 516)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 516)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN( 516)				return b1;
            			}
            			break;
            			case (int)3: {
HXLINE( 518)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 518)				 ::iterMagic::VecIntImg v = vec;
HXDLIN( 518)				{
HXLINE( 518)					v->width = width;
HXDLIN( 518)					v->height = height;
HXDLIN( 518)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 518)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 518)					{
HXLINE( 518)						int _g8 = 0;
HXDLIN( 518)						int _g9 = v->length;
HXDLIN( 518)						while((_g8 < _g9)){
HXLINE( 518)							_g8 = (_g8 + 1);
HXDLIN( 518)							int i2 = (_g8 - 1);
HXDLIN( 518)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN( 518)				return v;
            			}
            			break;
            			case (int)4: {
HXLINE( 520)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 520)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 520)				{
HXLINE( 520)					b2->width = width;
HXDLIN( 520)					b2->height = height;
HXDLIN( 520)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 520)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 520)					{
HXLINE( 520)						int len1 = b2->length;
HXDLIN( 520)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 520)						if (::hx::IsNull( d->head )) {
HXLINE( 520)							int _g10 = 0;
HXDLIN( 520)							int _g11 = len1;
HXDLIN( 520)							while((_g10 < _g11)){
HXLINE( 520)								_g10 = (_g10 + 1);
HXDLIN( 520)								int i3 = (_g10 - 1);
HXDLIN( 520)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE( 520)							int _g12 = 0;
HXDLIN( 520)							int _g13 = len1;
HXDLIN( 520)							while((_g12 < _g13)){
HXLINE( 520)								_g12 = (_g12 + 1);
HXDLIN( 520)								int i4 = (_g12 - 1);
HXDLIN( 520)								{
HXLINE( 520)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 520)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 520)									{
HXLINE( 520)										int _g14 = 0;
HXDLIN( 520)										int _g15 = i4;
HXDLIN( 520)										while((_g14 < _g15)){
HXLINE( 520)											_g14 = (_g14 + 1);
HXDLIN( 520)											int i5 = (_g14 - 1);
HXDLIN( 520)											prev = l;
HXDLIN( 520)											l = l->next;
            										}
            									}
HXDLIN( 520)									if (::hx::IsNull( prev )) {
HXLINE( 520)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 520)										l = null();
            									}
            									else {
HXLINE( 520)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 520)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 520)				return b2;
            			}
            			break;
            		}
HXLINE( 510)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImgMulti_Impl__obj,create,return )

 ::Dynamic ImgMulti_Impl__obj::check(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_524_check)
HXLINE( 525)		 ::Dynamic v;
HXDLIN( 525)		if (::Std_obj::isOfType(this1,::hx::ClassOf< ::iterMagic::ArrIntImg >())) {
HXLINE( 525)			v = 1;
            		}
            		else {
HXLINE( 527)			if (::Std_obj::isOfType(this1,::hx::ClassOf< ::iterMagic::VecIntImg >())) {
HXLINE( 525)				v = 3;
            			}
            			else {
HXLINE( 529)				if (::Std_obj::isOfType(this1,::hx::ClassOf< ::iterMagic::BytesImg >())) {
HXLINE( 525)					v = 0;
            				}
            				else {
HXLINE( 531)					if (::Std_obj::isOfType(this1,::hx::ClassOf< ::iterMagic::U32ArrImg >())) {
HXLINE( 525)						v = 2;
            					}
            					else {
HXLINE( 533)						if (::Std_obj::isOfType(this1,::hx::ClassOf< ::iterMagic::StackIntImg >())) {
HXLINE( 525)							v = 4;
            						}
            						else {
HXLINE( 525)							v = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 538)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,check,return )

 ::iterMagic::ArrIntImg ImgMulti_Impl__obj::toArrIntImg(::Dynamic t,::Array< int > s){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_543_toArrIntImg)
HXLINE( 544)		 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXLINE( 545)		return arrI;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,toArrIntImg,return )

 ::iterMagic::VecIntImg ImgMulti_Impl__obj::toVecIntImg(::Dynamic t,::Array< int > s){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_549_toVecIntImg)
HXLINE( 550)		 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXLINE( 551)		return vec;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,toVecIntImg,return )

 ::iterMagic::BytesImg ImgMulti_Impl__obj::toBytesImg(::Dynamic t, ::haxe::io::Bytes s){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_555_toBytesImg)
HXLINE( 556)		 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXLINE( 557)		return byt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,toBytesImg,return )

 ::iterMagic::U32ArrImg ImgMulti_Impl__obj::toU32ArrImg(::Dynamic t, ::haxe::io::ArrayBufferViewImpl s){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_561_toU32ArrImg)
HXLINE( 562)		 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXLINE( 563)		return u32a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,toU32ArrImg,return )

 ::iterMagic::StackIntImg ImgMulti_Impl__obj::toStackIntImg(::Dynamic t, ::haxe::ds::GenericStack_Int s){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_567_toStackIntImg)
HXLINE( 568)		 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXLINE( 569)		return sInt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,toStackIntImg,return )

 ::iterMagic::ArrIntImg ImgMulti_Impl__obj::arrInt(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_572_arrInt)
HXLINE( 573)		 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 573)		 ::iterMagic::ArrIntImg a = arrI;
HXLINE( 574)		{
HXLINE( 574)			a->width = width;
HXDLIN( 574)			a->height = height;
HXDLIN( 574)			a->data = ::Array_obj< int >::__new(0);
HXDLIN( 574)			a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 574)			{
HXLINE( 574)				int _g = 0;
HXDLIN( 574)				int _g1 = a->length;
HXDLIN( 574)				while((_g < _g1)){
HXLINE( 574)					_g = (_g + 1);
HXDLIN( 574)					int i = (_g - 1);
HXDLIN( 574)					a->data[i] = 0;
            				}
            			}
            		}
HXLINE( 575)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,arrInt,return )

 ::iterMagic::VecIntImg ImgMulti_Impl__obj::vecInt(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_578_vecInt)
HXLINE( 579)		 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 579)		 ::iterMagic::VecIntImg v = vec;
HXLINE( 580)		{
HXLINE( 580)			v->width = width;
HXDLIN( 580)			v->height = height;
HXDLIN( 580)			v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 580)			v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 580)			{
HXLINE( 580)				int _g = 0;
HXDLIN( 580)				int _g1 = v->length;
HXDLIN( 580)				while((_g < _g1)){
HXLINE( 580)					_g = (_g + 1);
HXDLIN( 580)					int i = (_g - 1);
HXDLIN( 580)					v->data->__unsafe_set(i,0);
            				}
            			}
            		}
HXLINE( 581)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,vecInt,return )

 ::iterMagic::BytesImg ImgMulti_Impl__obj::bytes(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_584_bytes)
HXLINE( 585)		 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 585)		 ::iterMagic::BytesImg b = byt;
HXLINE( 586)		{
HXLINE( 586)			b->width = width;
HXDLIN( 586)			b->height = height;
HXDLIN( 586)			b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 586)			b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 586)			{
HXLINE( 586)				int len = b->length;
HXDLIN( 586)				int w = 0;
HXDLIN( 586)				{
HXLINE( 586)					int _g = 0;
HXDLIN( 586)					int _g1 = b->height;
HXDLIN( 586)					while((_g < _g1)){
HXLINE( 586)						_g = (_g + 1);
HXDLIN( 586)						int y = (_g - 1);
HXDLIN( 586)						{
HXLINE( 586)							int _g2 = 0;
HXDLIN( 586)							int _g3 = b->width;
HXDLIN( 586)							while((_g2 < _g3)){
HXLINE( 586)								_g2 = (_g2 + 1);
HXDLIN( 586)								int x = (_g2 - 1);
HXDLIN( 586)								{
HXLINE( 586)									w = (w + 1);
HXDLIN( 586)									b->data->b[(w - 1)] = ( (unsigned char)(0) );
            								}
HXDLIN( 586)								{
HXLINE( 586)									w = (w + 1);
HXDLIN( 586)									b->data->b[(w - 1)] = ( (unsigned char)(0) );
            								}
HXDLIN( 586)								{
HXLINE( 586)									w = (w + 1);
HXDLIN( 586)									b->data->b[(w - 1)] = ( (unsigned char)(0) );
            								}
HXDLIN( 586)								{
HXLINE( 586)									w = (w + 1);
HXDLIN( 586)									b->data->b[(w - 1)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 587)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,bytes,return )

 ::iterMagic::U32ArrImg ImgMulti_Impl__obj::u32arr(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_590_u32arr)
HXLINE( 591)		 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 591)		 ::iterMagic::U32ArrImg b = u32a;
HXLINE( 592)		{
HXLINE( 592)			b->width = width;
HXDLIN( 592)			b->height = height;
HXDLIN( 592)			b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 592)			int size = (b->length * 4);
HXDLIN( 592)			b->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 592)			{
HXLINE( 592)				int _g = 0;
HXDLIN( 592)				int _g1 = b->length;
HXDLIN( 592)				while((_g < _g1)){
HXLINE( 592)					_g = (_g + 1);
HXDLIN( 592)					int i = (_g - 1);
HXDLIN( 592)					{
HXLINE( 592)						 ::haxe::io::ArrayBufferViewImpl this1 = b->data;
HXDLIN( 592)						bool _hx_tmp;
HXDLIN( 592)						if ((i >= 0)) {
HXLINE( 592)							_hx_tmp = (i < (this1->byteLength >> 2));
            						}
            						else {
HXLINE( 592)							_hx_tmp = false;
            						}
HXDLIN( 592)						if (_hx_tmp) {
HXLINE( 592)							 ::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 592)							int pos = ((i << 2) + this1->byteOffset);
HXDLIN( 592)							_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 592)							_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 592)							_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 592)							_this->b[(pos + 3)] = ( (unsigned char)(0) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 593)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,u32arr,return )

 ::iterMagic::StackIntImg ImgMulti_Impl__obj::stackInt(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_a549af4bfad84065_596_stackInt)
HXLINE( 597)		 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 597)		 ::iterMagic::StackIntImg b = sInt;
HXLINE( 598)		{
HXLINE( 598)			b->width = width;
HXDLIN( 598)			b->height = height;
HXDLIN( 598)			b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 598)			b->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 598)			{
HXLINE( 598)				int len = b->length;
HXDLIN( 598)				 ::haxe::ds::GenericStack_Int d = b->data;
HXDLIN( 598)				if (::hx::IsNull( d->head )) {
HXLINE( 598)					int _g = 0;
HXDLIN( 598)					int _g1 = len;
HXDLIN( 598)					while((_g < _g1)){
HXLINE( 598)						_g = (_g + 1);
HXDLIN( 598)						int i = (_g - 1);
HXDLIN( 598)						d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            					}
            				}
            				else {
HXLINE( 598)					int _g2 = 0;
HXDLIN( 598)					int _g3 = len;
HXDLIN( 598)					while((_g2 < _g3)){
HXLINE( 598)						_g2 = (_g2 + 1);
HXDLIN( 598)						int i1 = (_g2 - 1);
HXDLIN( 598)						{
HXLINE( 598)							 ::haxe::ds::GenericCell_Int l = b->data->head;
HXDLIN( 598)							 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 598)							{
HXLINE( 598)								int _g4 = 0;
HXDLIN( 598)								int _g5 = i1;
HXDLIN( 598)								while((_g4 < _g5)){
HXLINE( 598)									_g4 = (_g4 + 1);
HXDLIN( 598)									int i2 = (_g4 - 1);
HXDLIN( 598)									prev = l;
HXDLIN( 598)									l = l->next;
            								}
            							}
HXDLIN( 598)							if (::hx::IsNull( prev )) {
HXLINE( 598)								b->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 598)								l = null();
            							}
            							else {
HXLINE( 598)								prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 598)								l = null();
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 599)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,stackInt,return )

int ImgMulti_Impl__obj::set(::Dynamic this1,int index,int value){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_604_set)
HXDLIN( 604)		return ::iterMagic::Iimg_obj::set(this1,index,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImgMulti_Impl__obj,set,return )

int ImgMulti_Impl__obj::get(::Dynamic this1,int index){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_609_get)
HXDLIN( 609)		return ::iterMagic::Iimg_obj::get(this1,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,get,return )

 ::iterMagic::RawImageData ImgMulti_Impl__obj::setRaw(::Dynamic this1, ::iterMagic::RawImageData d){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_613_setRaw)
HXDLIN( 613)		return ::iterMagic::Iimg_obj::setRaw(this1,d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,setRaw,return )

 ::iterMagic::RawImageData ImgMulti_Impl__obj::getRaw(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_617_getRaw)
HXDLIN( 617)		return ::iterMagic::Iimg_obj::getRaw(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,getRaw,return )

int ImgMulti_Impl__obj::position(::Dynamic this1,Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_621_position)
HXDLIN( 621)		return ::Std_obj::_hx_int(((py * ( (Float)(this1->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) )) + px));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImgMulti_Impl__obj,position,return )

::String ImgMulti_Impl__obj::toString(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_624_toString)
HXLINE( 625)		::String str = HX_("[",5b,00,00,00);
HXLINE( 626)		{
HXLINE( 626)			int _g = 0;
HXDLIN( 626)			int _g1 = ( (int)(this1->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 626)			while((_g < _g1)){
HXLINE( 626)				_g = (_g + 1);
HXDLIN( 626)				int i = (_g - 1);
HXDLIN( 626)				str = (str + (::Std_obj::string(::iterMagic::Iimg_obj::get(this1,i)) + HX_(",",2c,00,00,00)));
            			}
            		}
HXLINE( 627)		return (str.substr(0,(str.length - 1)) + HX_("]",5d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,toString,return )

bool ImgMulti_Impl__obj::hasNext(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_631_hasNext)
HXDLIN( 631)		return ::hx::IsLess( this1->__Field(HX_("count",cf,44,63,4a),::hx::paccDynamic),this1->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,hasNext,return )

int ImgMulti_Impl__obj::next(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_635_next)
HXDLIN( 635)		return ::iterMagic::Iimg_obj::get(this1,::hx::FieldRef((this1).mPtr,HX_("count",cf,44,63,4a))++);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,next,return )

void ImgMulti_Impl__obj::resetCount(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_639_resetCount)
HXDLIN( 639)		this1->__SetField(HX_("count",cf,44,63,4a),0,::hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,resetCount,(void))

void ImgMulti_Impl__obj::traceGrid(::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_642_traceGrid)
HXLINE( 643)		int count = 0;
HXLINE( 644)		::String str = HX_("[ ",65,4f,00,00);
HXLINE( 645)		{
HXLINE( 645)			int _g = 0;
HXDLIN( 645)			int _g1 = ( (int)(this1->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
HXDLIN( 645)			while((_g < _g1)){
HXLINE( 645)				_g = (_g + 1);
HXDLIN( 645)				int y = (_g - 1);
HXLINE( 646)				{
HXLINE( 646)					int _g2 = 0;
HXDLIN( 646)					int _g3 = ( (int)(this1->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
HXDLIN( 646)					while((_g2 < _g3)){
HXLINE( 646)						_g2 = (_g2 + 1);
HXDLIN( 646)						int x = (_g2 - 1);
HXLINE( 647)						count = (count + 1);
HXDLIN( 647)						str = (str + (::iterMagic::Iimg_obj::get(this1,(count - 1)) + HX_(", ",74,26,00,00)));
            					}
            				}
HXLINE( 649)				str = str.substr(0,(str.length - 2));
HXLINE( 650)				::haxe::Log_obj::trace((str + HX_(" ]",3d,1c,00,00)),::hx::SourceInfo(HX_("iterMagic/Img.hx",d5,af,99,88),650,HX_("iterMagic._Img.ImgMulti_Impl_",07,ef,b8,30),HX_("traceGrid",eb,b7,8e,bb)));
HXLINE( 651)				str = HX_("[ ",65,4f,00,00);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImgMulti_Impl__obj,traceGrid,(void))

::Dynamic ImgMulti_Impl__obj::fromTo(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_655_fromTo)
HXLINE( 656)		{
HXLINE( 656)			int _g = 0;
HXDLIN( 656)			int _g1 = ( (int)(b->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 656)			while((_g < _g1)){
HXLINE( 656)				_g = (_g + 1);
HXDLIN( 656)				int i = (_g - 1);
HXDLIN( 656)				::iterMagic::Iimg_obj::set(b,i,::iterMagic::Iimg_obj::get(a,i));
            			}
            		}
HXLINE( 657)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,fromTo,return )

::Dynamic ImgMulti_Impl__obj::toFrom(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_a549af4bfad84065_660_toFrom)
HXLINE( 661)		{
HXLINE( 661)			int _g = 0;
HXDLIN( 661)			int _g1 = ( (int)(b->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 661)			while((_g < _g1)){
HXLINE( 661)				_g = (_g + 1);
HXDLIN( 661)				int i = (_g - 1);
HXDLIN( 661)				::iterMagic::Iimg_obj::set(a,i,::iterMagic::Iimg_obj::get(b,i));
            			}
            		}
HXLINE( 662)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImgMulti_Impl__obj,toFrom,return )


ImgMulti_Impl__obj::ImgMulti_Impl__obj()
{
}

bool ImgMulti_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { outValue = check_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bytes") ) { outValue = bytes_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arrInt") ) { outValue = arrInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"vecInt") ) { outValue = vecInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"u32arr") ) { outValue = u32arr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRaw") ) { outValue = setRaw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getRaw") ) { outValue = getRaw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTo") ) { outValue = fromTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFrom") ) { outValue = toFrom_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { outValue = hasNext_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stackInt") ) { outValue = stackInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"position") ) { outValue = position_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"traceGrid") ) { outValue = traceGrid_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"toBytesImg") ) { outValue = toBytesImg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetCount") ) { outValue = resetCount_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toArrIntImg") ) { outValue = toArrIntImg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toVecIntImg") ) { outValue = toVecIntImg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toU32ArrImg") ) { outValue = toU32ArrImg_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toStackIntImg") ) { outValue = toStackIntImg_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ImgMulti_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ImgMulti_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ImgMulti_Impl__obj::__mClass;

static ::String ImgMulti_Impl__obj_sStaticFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("check",c8,98,b6,45),
	HX_("toArrIntImg",9a,9a,69,24),
	HX_("toVecIntImg",cd,76,e5,1a),
	HX_("toBytesImg",f3,24,2b,d4),
	HX_("toU32ArrImg",9b,0a,eb,3f),
	HX_("toStackIntImg",01,b6,8d,47),
	HX_("arrInt",0e,39,de,b7),
	HX_("vecInt",fb,0e,3d,97),
	HX_("bytes",6b,08,98,bd),
	HX_("u32arr",8d,76,87,46),
	HX_("stackInt",87,1a,9e,99),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("setRaw",66,63,6e,6f),
	HX_("getRaw",f2,0e,26,a3),
	HX_("position",a9,a0,fa,ca),
	HX_("toString",ac,d0,6e,38),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	HX_("resetCount",80,7c,ff,32),
	HX_("traceGrid",eb,b7,8e,bb),
	HX_("fromTo",85,9d,c6,b5),
	HX_("toFrom",85,10,7c,79),
	::String(null())
};

void ImgMulti_Impl__obj::__register()
{
	ImgMulti_Impl__obj _hx_dummy;
	ImgMulti_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic._Img.ImgMulti_Impl_",07,ef,b8,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImgMulti_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImgMulti_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ImgMulti_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImgMulti_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImgMulti_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
} // end namespace _Img
