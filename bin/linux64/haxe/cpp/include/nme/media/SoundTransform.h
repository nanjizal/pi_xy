// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_media_SoundTransform
#define INCLUDED_nme_media_SoundTransform

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_8ab08465e4d2e328_11_new)
HX_DECLARE_CLASS2(nme,media,SoundTransform)

namespace nme{
namespace media{


class HXCPP_CLASS_ATTRIBUTES SoundTransform_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SoundTransform_obj OBJ_;
		SoundTransform_obj();

	public:
		enum { _hx_ClassId = 0x6bfa5bdb };

		void __construct(::hx::Null< Float >  __o_vol,::hx::Null< Float >  __o_panning);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.media.SoundTransform")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.media.SoundTransform"); }

		inline static ::hx::ObjectPtr< SoundTransform_obj > __new(::hx::Null< Float >  __o_vol,::hx::Null< Float >  __o_panning) {
			::hx::ObjectPtr< SoundTransform_obj > __this = new SoundTransform_obj();
			__this->__construct(__o_vol,__o_panning);
			return __this;
		}

		inline static ::hx::ObjectPtr< SoundTransform_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_vol,::hx::Null< Float >  __o_panning) {
			SoundTransform_obj *__this = (SoundTransform_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SoundTransform_obj), false, "nme.media.SoundTransform"));
			*(void **)__this = SoundTransform_obj::_hx_vtable;
{
            		Float vol = __o_vol.Default(((Float)1.0));
            		Float panning = __o_panning.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_8ab08465e4d2e328_11_new)
HXLINE(  12)		( ( ::nme::media::SoundTransform)(__this) )->volume = vol;
HXLINE(  13)		( ( ::nme::media::SoundTransform)(__this) )->pan = panning;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SoundTransform_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SoundTransform",bd,82,34,cd); }

		Float pan;
		Float volume;
		 ::nme::media::SoundTransform clone();
		::Dynamic clone_dyn();

};

} // end namespace nme
} // end namespace media

#endif /* INCLUDED_nme_media_SoundTransform */ 
