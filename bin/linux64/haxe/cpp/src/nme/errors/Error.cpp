// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_errors_Error
#include <nme/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c7bcfaee3b55485_12_new,"nme.errors.Error","new",0x8168983f,"nme.errors.Error.new","nme/errors/Error.hx",12,0x7e030631)
HX_LOCAL_STACK_FRAME(_hx_pos_4c7bcfaee3b55485_19_getStackTrace,"nme.errors.Error","getStackTrace",0xcee382f2,"nme.errors.Error.getStackTrace","nme/errors/Error.hx",19,0x7e030631)
HX_LOCAL_STACK_FRAME(_hx_pos_4c7bcfaee3b55485_24_toString,"nme.errors.Error","toString",0x7d3e206d,"nme.errors.Error.toString","nme/errors/Error.hx",24,0x7e030631)
namespace nme{
namespace errors{

void Error_obj::__construct( ::Dynamic inMessage, ::Dynamic __o_id){
            		 ::Dynamic id = __o_id;
            		if (::hx::IsNull(__o_id)) id = 0;
            	HX_STACKFRAME(&_hx_pos_4c7bcfaee3b55485_12_new)
HXLINE(  13)		this->message = inMessage;
HXLINE(  14)		this->errorID = ( (int)(id) );
            	}

Dynamic Error_obj::__CreateEmpty() { return new Error_obj; }

void *Error_obj::_hx_vtable = 0;

Dynamic Error_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Error_obj > _hx_result = new Error_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Error_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x46636817;
}

::String Error_obj::getStackTrace(){
            	HX_STACKFRAME(&_hx_pos_4c7bcfaee3b55485_19_getStackTrace)
HXDLIN(  19)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Error_obj,getStackTrace,return )

::String Error_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_4c7bcfaee3b55485_24_toString)
HXDLIN(  24)		return ( (::String)(this->message) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Error_obj,toString,return )


Error_obj::Error_obj()
{
}

void Error_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Error);
	HX_MARK_MEMBER_NAME(errorID,"errorID");
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void Error_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(errorID,"errorID");
	HX_VISIT_MEMBER_NAME(message,"message");
	HX_VISIT_MEMBER_NAME(name,"name");
}

::hx::Val Error_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"errorID") ) { return ::hx::Val( errorID ); }
		if (HX_FIELD_EQ(inName,"message") ) { return ::hx::Val( message ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getStackTrace") ) { return ::hx::Val( getStackTrace_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Error_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"errorID") ) { errorID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"message") ) { message=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Error_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("errorID",a3,8d,0a,ea));
	outFields->push(HX_("message",c7,35,11,9a));
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Error_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Error_obj,errorID),HX_("errorID",a3,8d,0a,ea)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Error_obj,message),HX_("message",c7,35,11,9a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Error_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Error_obj_sStaticStorageInfo = 0;
#endif

static ::String Error_obj_sMemberFields[] = {
	HX_("errorID",a3,8d,0a,ea),
	HX_("message",c7,35,11,9a),
	HX_("name",4b,72,ff,48),
	HX_("getStackTrace",53,8e,b0,85),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Error_obj::__mClass;

void Error_obj::__register()
{
	Error_obj _hx_dummy;
	Error_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.errors.Error",cd,0c,92,59);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Error_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Error_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Error_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Error_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace errors
