// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_text_TextFormat
#include <nme/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_423358ae8345598b_36_new,"nme.text.TextFormat","new",0xa4d89c4f,"nme.text.TextFormat.new","nme/text/TextFormat.hx",36,0x895409a1)
HX_LOCAL_STACK_FRAME(_hx_pos_423358ae8345598b_8_boot,"nme.text.TextFormat","boot",0x90c92963,"nme.text.TextFormat.boot","nme/text/TextFormat.hx",8,0x895409a1)
HX_LOCAL_STACK_FRAME(_hx_pos_423358ae8345598b_9_boot,"nme.text.TextFormat","boot",0x90c92963,"nme.text.TextFormat.boot","nme/text/TextFormat.hx",9,0x895409a1)
HX_LOCAL_STACK_FRAME(_hx_pos_423358ae8345598b_10_boot,"nme.text.TextFormat","boot",0x90c92963,"nme.text.TextFormat.boot","nme/text/TextFormat.hx",10,0x895409a1)
namespace nme{
namespace text{

void TextFormat_obj::__construct(::String in_font, ::Dynamic in_size, ::Dynamic in_color, ::Dynamic in_bold, ::Dynamic in_italic, ::Dynamic in_underline,::String in_url,::String in_target,::String in_align, ::Dynamic in_leftMargin, ::Dynamic in_rightMargin, ::Dynamic in_indent, ::Dynamic in_leading){
            	HX_STACKFRAME(&_hx_pos_423358ae8345598b_36_new)
HXLINE(  37)		this->font = in_font;
HXLINE(  38)		this->size = in_size;
HXLINE(  39)		this->color = in_color;
HXLINE(  40)		this->bold = in_bold;
HXLINE(  41)		this->italic = in_italic;
HXLINE(  42)		this->underline = in_underline;
HXLINE(  43)		this->url = in_url;
HXLINE(  44)		this->target = in_target;
HXLINE(  45)		this->align = in_align;
HXLINE(  46)		this->leftMargin = in_leftMargin;
HXLINE(  47)		this->rightMargin = in_rightMargin;
HXLINE(  48)		this->indent = in_indent;
HXLINE(  49)		this->leading = in_leading;
            	}

Dynamic TextFormat_obj::__CreateEmpty() { return new TextFormat_obj; }

void *TextFormat_obj::_hx_vtable = 0;

Dynamic TextFormat_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextFormat_obj > _hx_result = new TextFormat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12]);
	return _hx_result;
}

bool TextFormat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x724cfb97;
}

int TextFormat_obj::OUTLINE_END_SQUARE;

int TextFormat_obj::OUTLINE_EDGE_BEVEL;

int TextFormat_obj::OUTLINE_EDGE_MITER;


TextFormat_obj::TextFormat_obj()
{
}

void TextFormat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextFormat);
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(blockIndent,"blockIndent");
	HX_MARK_MEMBER_NAME(bold,"bold");
	HX_MARK_MEMBER_NAME(bullet,"bullet");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(display,"display");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(indent,"indent");
	HX_MARK_MEMBER_NAME(italic,"italic");
	HX_MARK_MEMBER_NAME(kerning,"kerning");
	HX_MARK_MEMBER_NAME(leading,"leading");
	HX_MARK_MEMBER_NAME(leftMargin,"leftMargin");
	HX_MARK_MEMBER_NAME(letterSpacing,"letterSpacing");
	HX_MARK_MEMBER_NAME(rightMargin,"rightMargin");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(outline,"outline");
	HX_MARK_MEMBER_NAME(outlineFlags,"outlineFlags");
	HX_MARK_MEMBER_NAME(outlineMiterLimit,"outlineMiterLimit");
	HX_MARK_MEMBER_NAME(tabStops,"tabStops");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(underline,"underline");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_END_CLASS();
}

void TextFormat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(blockIndent,"blockIndent");
	HX_VISIT_MEMBER_NAME(bold,"bold");
	HX_VISIT_MEMBER_NAME(bullet,"bullet");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(display,"display");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(indent,"indent");
	HX_VISIT_MEMBER_NAME(italic,"italic");
	HX_VISIT_MEMBER_NAME(kerning,"kerning");
	HX_VISIT_MEMBER_NAME(leading,"leading");
	HX_VISIT_MEMBER_NAME(leftMargin,"leftMargin");
	HX_VISIT_MEMBER_NAME(letterSpacing,"letterSpacing");
	HX_VISIT_MEMBER_NAME(rightMargin,"rightMargin");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(outline,"outline");
	HX_VISIT_MEMBER_NAME(outlineFlags,"outlineFlags");
	HX_VISIT_MEMBER_NAME(outlineMiterLimit,"outlineMiterLimit");
	HX_VISIT_MEMBER_NAME(tabStops,"tabStops");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(underline,"underline");
	HX_VISIT_MEMBER_NAME(url,"url");
}

::hx::Val TextFormat_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bold") ) { return ::hx::Val( bold ); }
		if (HX_FIELD_EQ(inName,"font") ) { return ::hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return ::hx::Val( align ); }
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bullet") ) { return ::hx::Val( bullet ); }
		if (HX_FIELD_EQ(inName,"indent") ) { return ::hx::Val( indent ); }
		if (HX_FIELD_EQ(inName,"italic") ) { return ::hx::Val( italic ); }
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { return ::hx::Val( display ); }
		if (HX_FIELD_EQ(inName,"kerning") ) { return ::hx::Val( kerning ); }
		if (HX_FIELD_EQ(inName,"leading") ) { return ::hx::Val( leading ); }
		if (HX_FIELD_EQ(inName,"outline") ) { return ::hx::Val( outline ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tabStops") ) { return ::hx::Val( tabStops ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"underline") ) { return ::hx::Val( underline ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"leftMargin") ) { return ::hx::Val( leftMargin ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blockIndent") ) { return ::hx::Val( blockIndent ); }
		if (HX_FIELD_EQ(inName,"rightMargin") ) { return ::hx::Val( rightMargin ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"outlineFlags") ) { return ::hx::Val( outlineFlags ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { return ::hx::Val( letterSpacing ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outlineMiterLimit") ) { return ::hx::Val( outlineMiterLimit ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextFormat_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bold") ) { bold=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bullet") ) { bullet=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indent") ) { indent=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"italic") ) { italic=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { display=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kerning") ) { kerning=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leading") ) { leading=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outline") ) { outline=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tabStops") ) { tabStops=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"underline") ) { underline=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"leftMargin") ) { leftMargin=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blockIndent") ) { blockIndent=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightMargin") ) { rightMargin=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"outlineFlags") ) { outlineFlags=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { letterSpacing=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outlineMiterLimit") ) { outlineMiterLimit=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("align",c5,56,91,21));
	outFields->push(HX_("blockIndent",99,6d,be,33));
	outFields->push(HX_("bold",85,81,1b,41));
	outFields->push(HX_("bullet",42,92,90,d4));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("display",42,2a,4a,bb));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("indent",6c,0c,f3,93));
	outFields->push(HX_("italic",f0,2e,64,06));
	outFields->push(HX_("kerning",cc,ba,37,b0));
	outFields->push(HX_("leading",c6,32,61,09));
	outFields->push(HX_("leftMargin",95,2b,7e,e9));
	outFields->push(HX_("letterSpacing",3d,b7,03,f5));
	outFields->push(HX_("rightMargin",2a,3d,f2,23));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("outline",82,17,be,e1));
	outFields->push(HX_("outlineFlags",65,0c,ed,d2));
	outFields->push(HX_("outlineMiterLimit",18,af,ee,72));
	outFields->push(HX_("tabStops",9c,93,ba,f2));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("underline",0c,15,d1,87));
	outFields->push(HX_("url",6f,2b,59,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextFormat_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TextFormat_obj,align),HX_("align",c5,56,91,21)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,blockIndent),HX_("blockIndent",99,6d,be,33)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,bold),HX_("bold",85,81,1b,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,bullet),HX_("bullet",42,92,90,d4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsString,(int)offsetof(TextFormat_obj,display),HX_("display",42,2a,4a,bb)},
	{::hx::fsString,(int)offsetof(TextFormat_obj,font),HX_("font",cf,5d,c0,43)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,indent),HX_("indent",6c,0c,f3,93)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,italic),HX_("italic",f0,2e,64,06)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,kerning),HX_("kerning",cc,ba,37,b0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,leading),HX_("leading",c6,32,61,09)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,leftMargin),HX_("leftMargin",95,2b,7e,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,letterSpacing),HX_("letterSpacing",3d,b7,03,f5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,rightMargin),HX_("rightMargin",2a,3d,f2,23)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,size),HX_("size",c1,a0,53,4c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,outline),HX_("outline",82,17,be,e1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,outlineFlags),HX_("outlineFlags",65,0c,ed,d2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,outlineMiterLimit),HX_("outlineMiterLimit",18,af,ee,72)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(TextFormat_obj,tabStops),HX_("tabStops",9c,93,ba,f2)},
	{::hx::fsString,(int)offsetof(TextFormat_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFormat_obj,underline),HX_("underline",0c,15,d1,87)},
	{::hx::fsString,(int)offsetof(TextFormat_obj,url),HX_("url",6f,2b,59,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextFormat_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &TextFormat_obj::OUTLINE_END_SQUARE,HX_("OUTLINE_END_SQUARE",de,14,74,d2)},
	{::hx::fsInt,(void *) &TextFormat_obj::OUTLINE_EDGE_BEVEL,HX_("OUTLINE_EDGE_BEVEL",95,5c,31,26)},
	{::hx::fsInt,(void *) &TextFormat_obj::OUTLINE_EDGE_MITER,HX_("OUTLINE_EDGE_MITER",20,14,3d,7e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextFormat_obj_sMemberFields[] = {
	HX_("align",c5,56,91,21),
	HX_("blockIndent",99,6d,be,33),
	HX_("bold",85,81,1b,41),
	HX_("bullet",42,92,90,d4),
	HX_("color",63,71,5c,4a),
	HX_("display",42,2a,4a,bb),
	HX_("font",cf,5d,c0,43),
	HX_("indent",6c,0c,f3,93),
	HX_("italic",f0,2e,64,06),
	HX_("kerning",cc,ba,37,b0),
	HX_("leading",c6,32,61,09),
	HX_("leftMargin",95,2b,7e,e9),
	HX_("letterSpacing",3d,b7,03,f5),
	HX_("rightMargin",2a,3d,f2,23),
	HX_("size",c1,a0,53,4c),
	HX_("outline",82,17,be,e1),
	HX_("outlineFlags",65,0c,ed,d2),
	HX_("outlineMiterLimit",18,af,ee,72),
	HX_("tabStops",9c,93,ba,f2),
	HX_("target",51,f3,ec,86),
	HX_("underline",0c,15,d1,87),
	HX_("url",6f,2b,59,00),
	::String(null()) };

static void TextFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextFormat_obj::OUTLINE_END_SQUARE,"OUTLINE_END_SQUARE");
	HX_MARK_MEMBER_NAME(TextFormat_obj::OUTLINE_EDGE_BEVEL,"OUTLINE_EDGE_BEVEL");
	HX_MARK_MEMBER_NAME(TextFormat_obj::OUTLINE_EDGE_MITER,"OUTLINE_EDGE_MITER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextFormat_obj::OUTLINE_END_SQUARE,"OUTLINE_END_SQUARE");
	HX_VISIT_MEMBER_NAME(TextFormat_obj::OUTLINE_EDGE_BEVEL,"OUTLINE_EDGE_BEVEL");
	HX_VISIT_MEMBER_NAME(TextFormat_obj::OUTLINE_EDGE_MITER,"OUTLINE_EDGE_MITER");
};

#endif

::hx::Class TextFormat_obj::__mClass;

static ::String TextFormat_obj_sStaticFields[] = {
	HX_("OUTLINE_END_SQUARE",de,14,74,d2),
	HX_("OUTLINE_EDGE_BEVEL",95,5c,31,26),
	HX_("OUTLINE_EDGE_MITER",20,14,3d,7e),
	::String(null())
};

void TextFormat_obj::__register()
{
	TextFormat_obj _hx_dummy;
	TextFormat_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.text.TextFormat",dd,c8,8a,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextFormat_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextFormat_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextFormat_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextFormat_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextFormat_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_423358ae8345598b_8_boot)
HXDLIN(   8)		OUTLINE_END_SQUARE = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_423358ae8345598b_9_boot)
HXDLIN(   9)		OUTLINE_EDGE_BEVEL = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_423358ae8345598b_10_boot)
HXDLIN(  10)		OUTLINE_EDGE_MITER = 64;
            	}
}

} // end namespace nme
} // end namespace text
