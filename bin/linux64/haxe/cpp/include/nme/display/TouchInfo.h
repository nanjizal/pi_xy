// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_TouchInfo
#define INCLUDED_nme_display_TouchInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,TouchInfo)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES TouchInfo_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TouchInfo_obj OBJ_;
		TouchInfo_obj();

	public:
		enum { _hx_ClassId = 0x3f5ba74d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.TouchInfo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.TouchInfo"); }
		static ::hx::ObjectPtr< TouchInfo_obj > __new();
		static ::hx::ObjectPtr< TouchInfo_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TouchInfo_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TouchInfo",ad,a7,fa,ac); }

		::Array< ::Dynamic> touchOverObjects;
};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_TouchInfo */ 
