// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo__GeomPix_GeomPix_Fields_
#define INCLUDED_pi_xy_algo__GeomPix_GeomPix_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(pi_xy,algo,_GeomPix,GeomPix_Fields_)

namespace pi_xy{
namespace algo{
namespace _GeomPix{


class HXCPP_CLASS_ATTRIBUTES GeomPix_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GeomPix_Fields__obj OBJ_;
		GeomPix_Fields__obj();

	public:
		enum { _hx_ClassId = 0x6408290c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo._GeomPix.GeomPix_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo._GeomPix.GeomPix_Fields_"); }

		inline static ::hx::ObjectPtr< GeomPix_Fields__obj > __new() {
			::hx::ObjectPtr< GeomPix_Fields__obj > __this = new GeomPix_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< GeomPix_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			GeomPix_Fields__obj *__this = (GeomPix_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GeomPix_Fields__obj), false, "pi_xy.algo._GeomPix.GeomPix_Fields_"));
			*(void **)__this = GeomPix_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GeomPix_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GeomPix_Fields_",0a,cf,90,65); }

		static Float smootherStep(Float t);
		static ::Dynamic smootherStep_dyn();

		static Float lerp(Float a,Float b,Float t);
		static ::Dynamic lerp_dyn();

		static int lerp4Colors(int colorhiA,int colorhiB,int colorloC,int colorloD,Float u,Float v,::hx::Null< bool >  smooth);
		static ::Dynamic lerp4Colors_dyn();

		static int lerp2Colors(int colA,int colB,Float t,::hx::Null< bool >  smooth);
		static ::Dynamic lerp2Colors_dyn();

		static Float cross2d(Float ax,Float ay,Float bx,Float by);
		static ::Dynamic cross2d_dyn();

		static Float dot(Float ax,Float ay,Float bx,Float by);
		static ::Dynamic dot_dyn();

		static Float dotSame(Float ax,Float ay);
		static ::Dynamic dotSame_dyn();

		static Float distanceSquarePointToSegment(Float x,Float y,Float x1,Float y1,Float x2,Float y2);
		static ::Dynamic distanceSquarePointToSegment_dyn();

		static Float rotX(Float x,Float y,Float sin,Float cos);
		static ::Dynamic rotX_dyn();

		static Float rotY(Float x,Float y,Float sin,Float cos);
		static ::Dynamic rotY_dyn();

};

} // end namespace pi_xy
} // end namespace algo
} // end namespace _GeomPix

#endif /* INCLUDED_pi_xy_algo__GeomPix_GeomPix_Fields_ */ 
