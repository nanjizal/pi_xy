// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_pi_xy_pixel__ColorHelp_ColorHelp_Fields_
#include <pi_xy/pixel/_ColorHelp/ColorHelp_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_7_stringColor,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","stringColor",0xbc6b9295,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.stringColor","pi_xy/pixel/ColorHelp.hx",7,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_18_stringHashARGB,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","stringHashARGB",0xf874ae28,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.stringHashARGB","pi_xy/pixel/ColorHelp.hx",18,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_21_alphaChannel,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","alphaChannel",0x241aa3e2,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.alphaChannel","pi_xy/pixel/ColorHelp.hx",21,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_24_redChannel,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","redChannel",0x6d6d850f,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.redChannel","pi_xy/pixel/ColorHelp.hx",24,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_27_greenChannel,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","greenChannel",0xdf56231d,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.greenChannel","pi_xy/pixel/ColorHelp.hx",27,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_30_blueChannel,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","blueChannel",0x6efb3d0c,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.blueChannel","pi_xy/pixel/ColorHelp.hx",30,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_33_AplusRGB,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","AplusRGB",0x789f2e0f,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.AplusRGB","pi_xy/pixel/ColorHelp.hx",33,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_36_argbInt,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","argbInt",0x4f182146,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.argbInt","pi_xy/pixel/ColorHelp.hx",36,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_39_avg,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","avg",0x38df7695,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.avg","pi_xy/pixel/ColorHelp.hx",39,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_42_between,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","between",0xd036240b,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.between","pi_xy/pixel/ColorHelp.hx",42,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_45_alphaAvg,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","alphaAvg",0x09dce971,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.alphaAvg","pi_xy/pixel/ColorHelp.hx",45,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_48_alphaBetween,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","alphaBetween",0xbdfc34e7,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.alphaBetween","pi_xy/pixel/ColorHelp.hx",48,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_51_redAvg,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","redAvg",0xbea2701e,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.redAvg","pi_xy/pixel/ColorHelp.hx",51,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_54_redBetween,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","redBetween",0x074f1614,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.redBetween","pi_xy/pixel/ColorHelp.hx",54,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_57_greenAvg,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","greenAvg",0x43036f2c,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.greenAvg","pi_xy/pixel/ColorHelp.hx",57,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_60_greenBetween,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","greenBetween",0x7937b422,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.greenBetween","pi_xy/pixel/ColorHelp.hx",60,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_63_blueAvg,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","blueAvg",0x241b259b,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.blueAvg","pi_xy/pixel/ColorHelp.hx",63,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_66_blueBetween,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","blueBetween",0x08dcce11,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.blueBetween","pi_xy/pixel/ColorHelp.hx",66,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_69_from_argb,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","from_argb",0xd1df0c84,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.from_argb","pi_xy/pixel/ColorHelp.hx",69,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_75_argbIntAvg,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","argbIntAvg",0x2e69282c,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.argbIntAvg","pi_xy/pixel/ColorHelp.hx",75,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_81_argbIntBetween,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","argbIntBetween",0x9c6ded22,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.argbIntBetween","pi_xy/pixel/ColorHelp.hx",81,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_86_hexToARGB,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","hexToARGB",0x28b14a85,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.hexToARGB","pi_xy/pixel/ColorHelp.hx",86,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_95_toHexInt,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","toHexInt",0x1c1b8d0c,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.toHexInt","pi_xy/pixel/ColorHelp.hx",95,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_98_rgbInt,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","rgbInt",0xe42336ff,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.rgbInt","pi_xy/pixel/ColorHelp.hx",98,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_102_getAlpha,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","getAlpha",0x6a2b1f45,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.getAlpha","pi_xy/pixel/ColorHelp.hx",102,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_105_alpha1,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","alpha1",0x026b7230,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.alpha1","pi_xy/pixel/ColorHelp.hx",105,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_108_getColor,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","getColor",0x92f0e94a,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.getColor","pi_xy/pixel/ColorHelp.hx",108,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_113_colorAlpha,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","colorAlpha",0xe730b898,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.colorAlpha","pi_xy/pixel/ColorHelp.hx",113,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_117_colorIntAlpha,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","colorIntAlpha",0x03b0b6f5,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.colorIntAlpha","pi_xy/pixel/ColorHelp.hx",117,0x6c7c7d8b)
HX_LOCAL_STACK_FRAME(_hx_pos_52aa953f40a957c9_138_luminosityGrey,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_","luminosityGrey",0x56a5cc5d,"pi_xy.pixel._ColorHelp.ColorHelp_Fields_.luminosityGrey","pi_xy/pixel/ColorHelp.hx",138,0x6c7c7d8b)
namespace pi_xy{
namespace pixel{
namespace _ColorHelp{

void ColorHelp_Fields__obj::__construct() { }

Dynamic ColorHelp_Fields__obj::__CreateEmpty() { return new ColorHelp_Fields__obj; }

void *ColorHelp_Fields__obj::_hx_vtable = 0;

Dynamic ColorHelp_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorHelp_Fields__obj > _hx_result = new ColorHelp_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorHelp_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76e85947;
}

::String ColorHelp_Fields__obj::stringColor(int col, ::Dynamic alpha){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_7_stringColor)
HXDLIN(   7)		bool _hx_tmp;
HXDLIN(   7)		if (::hx::IsNotNull( alpha )) {
HXDLIN(   7)			_hx_tmp = ::hx::IsNotEq( alpha,((Float)1.0) );
            		}
            		else {
HXDLIN(   7)			_hx_tmp = false;
            		}
HXDLIN(   7)		if (_hx_tmp) {
HXLINE(   8)			int r = ((col >> 16) & 255);
HXLINE(   9)			int g = ((col >> 8) & 255);
HXLINE(  10)			int b = (col & 255);
HXLINE(  11)			return ((((((((HX_("rgba(",f4,cc,0d,e8) + r) + HX_(",",2c,00,00,00)) + g) + HX_(",",2c,00,00,00)) + b) + HX_(",",2c,00,00,00)) + alpha) + HX_(")",29,00,00,00));
            		}
            		else {
HXLINE(  13)			return (HX_("#",23,00,00,00) + ::StringTools_obj::hex(col,6));
            		}
HXLINE(   7)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,stringColor,return )

::String ColorHelp_Fields__obj::stringHashARGB(int col){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_18_stringHashARGB)
HXDLIN(  18)		return (HX_("#",23,00,00,00) + ::StringTools_obj::hex(col,8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,stringHashARGB,return )

Float ColorHelp_Fields__obj::alphaChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_21_alphaChannel)
HXDLIN(  21)		return (( (Float)(((_hx_int >> 24) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,alphaChannel,return )

Float ColorHelp_Fields__obj::redChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_24_redChannel)
HXDLIN(  24)		return (( (Float)(((_hx_int >> 16) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,redChannel,return )

Float ColorHelp_Fields__obj::greenChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_27_greenChannel)
HXDLIN(  27)		return (( (Float)(((_hx_int >> 8) & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,greenChannel,return )

Float ColorHelp_Fields__obj::blueChannel(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_30_blueChannel)
HXDLIN(  30)		return (( (Float)((_hx_int & 255)) ) / ( (Float)(255) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,blueChannel,return )

int ColorHelp_Fields__obj::AplusRGB(int col,int alpha){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_33_AplusRGB)
HXDLIN(  33)		return ((alpha << 24) | col);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,AplusRGB,return )

int ColorHelp_Fields__obj::argbInt(int a,int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_36_argbInt)
HXDLIN(  36)		return ((((a << 24) | (r << 16)) | (g << 8)) | b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ColorHelp_Fields__obj,argbInt,return )

Float ColorHelp_Fields__obj::avg(Float p,Float q){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_39_avg)
HXDLIN(  39)		return ((p + q) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,avg,return )

Float ColorHelp_Fields__obj::between(Float a,Float b,::hx::Null< Float >  __o_t){
            		Float t = __o_t.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_42_between)
HXDLIN(  42)		return ((t * a) + ((((Float)1.) - t) * b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelp_Fields__obj,between,return )

Float ColorHelp_Fields__obj::alphaAvg(int a,int b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_45_alphaAvg)
HXDLIN(  45)		return (((( (Float)(((a >> 24) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b >> 24) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,alphaAvg,return )

Float ColorHelp_Fields__obj::alphaBetween(int a,int b,::hx::Null< Float >  __o_t){
            		Float t = __o_t.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_48_alphaBetween)
HXDLIN(  48)		return ((t * (( (Float)(((a >> 24) & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)(((b >> 24) & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelp_Fields__obj,alphaBetween,return )

Float ColorHelp_Fields__obj::redAvg(int a,int b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_51_redAvg)
HXDLIN(  51)		return (((( (Float)(((a >> 16) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b >> 16) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,redAvg,return )

Float ColorHelp_Fields__obj::redBetween(int a,int b,::hx::Null< Float >  __o_t){
            		Float t = __o_t.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_54_redBetween)
HXDLIN(  54)		return ((t * (( (Float)(((a >> 16) & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)(((b >> 16) & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelp_Fields__obj,redBetween,return )

Float ColorHelp_Fields__obj::greenAvg(int a,int b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_57_greenAvg)
HXDLIN(  57)		return (((( (Float)(((a >> 8) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b >> 8) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,greenAvg,return )

Float ColorHelp_Fields__obj::greenBetween(int a,int b,::hx::Null< Float >  __o_t){
            		Float t = __o_t.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_60_greenBetween)
HXDLIN(  60)		return ((t * (( (Float)(((a >> 8) & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)(((b >> 8) & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelp_Fields__obj,greenBetween,return )

Float ColorHelp_Fields__obj::blueAvg(int a,int b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_63_blueAvg)
HXDLIN(  63)		return (((( (Float)((a & 255)) ) / ( (Float)(255) )) + (( (Float)((b & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,blueAvg,return )

Float ColorHelp_Fields__obj::blueBetween(int a,int b,::hx::Null< Float >  __o_t){
            		Float t = __o_t.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_66_blueBetween)
HXDLIN(  66)		return ((t * (( (Float)((a & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)((b & 255)) ) / ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelp_Fields__obj,blueBetween,return )

int ColorHelp_Fields__obj::from_argb(Float a,Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_69_from_argb)
HXDLIN(  69)		return ((((::Math_obj::round((a * ( (Float)(255) ))) << 24) | (::Math_obj::round((r * ( (Float)(255) ))) << 16)) | (::Math_obj::round((g * ( (Float)(255) ))) << 8)) | ::Math_obj::round((b * ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ColorHelp_Fields__obj,from_argb,return )

int ColorHelp_Fields__obj::argbIntAvg(int a,int b){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_75_argbIntAvg)
HXDLIN(  75)		return ((((::Math_obj::round(((((( (Float)(((a >> 24) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b >> 24) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((((( (Float)(((a >> 16) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b >> 16) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((((( (Float)(((a >> 8) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b >> 8) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((((( (Float)((a & 255)) ) / ( (Float)(255) )) + (( (Float)((b & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,argbIntAvg,return )

int ColorHelp_Fields__obj::argbIntBetween(int a,int b,::hx::Null< Float >  __o_t){
            		Float t = __o_t.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_81_argbIntBetween)
HXDLIN(  81)		return ((((::Math_obj::round((((t * (( (Float)(((a >> 24) & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)(((b >> 24) & 255)) ) / ( (Float)(255) )))) * ( (Float)(255) ))) << 24) | (::Math_obj::round((((t * (( (Float)(((a >> 16) & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)(((b >> 16) & 255)) ) / ( (Float)(255) )))) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((((t * (( (Float)(((a >> 8) & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)(((b >> 8) & 255)) ) / ( (Float)(255) )))) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((((t * (( (Float)((a & 255)) ) / ( (Float)(255) ))) + ((((Float)1.) - t) * (( (Float)((b & 255)) ) / ( (Float)(255) )))) * ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorHelp_Fields__obj,argbIntBetween,return )

 ::Dynamic ColorHelp_Fields__obj::hexToARGB(int _hx_int){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_86_hexToARGB)
HXLINE(  87)		Float a = (( (Float)(((_hx_int >> 24) & 255)) ) / ( (Float)(255) ));
HXLINE(  88)		Float r = (( (Float)(((_hx_int >> 16) & 255)) ) / ( (Float)(255) ));
HXLINE(  89)		Float g = (( (Float)(((_hx_int >> 8) & 255)) ) / ( (Float)(255) ));
HXLINE(  90)		Float b = (( (Float)((_hx_int & 255)) ) / ( (Float)(255) ));
HXLINE(  91)		return  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("a",61,00,00,00),a)
            			->setFixed(1,HX_("b",62,00,00,00),b)
            			->setFixed(2,HX_("g",67,00,00,00),g)
            			->setFixed(3,HX_("r",72,00,00,00),r));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,hexToARGB,return )

int ColorHelp_Fields__obj::toHexInt(Float c){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_95_toHexInt)
HXDLIN(  95)		return ::Math_obj::round((c * ( (Float)(255) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,toHexInt,return )

int ColorHelp_Fields__obj::rgbInt(int c){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_98_rgbInt)
HXDLIN(  98)		return ((c << 8) >> 8);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,rgbInt,return )

Float ColorHelp_Fields__obj::getAlpha(Float c){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_102_getAlpha)
HXDLIN( 102)		return ((( (Float)(((::Std_obj::_hx_int(c) >> 24) & 255)) ) / ( (Float)(255) )) - ((Float)0.000000000000001));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,getAlpha,return )

Float ColorHelp_Fields__obj::alpha1(){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_105_alpha1)
HXDLIN( 105)		return ((Float)0.999999999999999);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ColorHelp_Fields__obj,alpha1,return )

int ColorHelp_Fields__obj::getColor(Float c){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_108_getColor)
HXDLIN( 108)		return ((::Std_obj::_hx_int(c) << 8) >> 8);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorHelp_Fields__obj,getColor,return )

int ColorHelp_Fields__obj::colorAlpha(int color,Float alpha){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_113_colorAlpha)
HXDLIN( 113)		return ((::Math_obj::round((alpha * ( (Float)(255) ))) << 24) | ((color << 8) >> 8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,colorAlpha,return )

int ColorHelp_Fields__obj::colorIntAlpha(int color,int alpha){
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_117_colorIntAlpha)
HXDLIN( 117)		return ((alpha << 24) | ((color << 8) >> 8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,colorIntAlpha,return )

int ColorHelp_Fields__obj::luminosityGrey(int color,::hx::Null< bool >  __o_useAlpha){
            		bool useAlpha = __o_useAlpha.Default(true);
            	HX_STACKFRAME(&_hx_pos_52aa953f40a957c9_138_luminosityGrey)
HXLINE( 139)		Float a = (( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 139)		Float r = (( (Float)(((color >> 16) & 255)) ) / ( (Float)(255) ));
HXDLIN( 139)		Float g = (( (Float)(((color >> 8) & 255)) ) / ( (Float)(255) ));
HXDLIN( 139)		Float b = (( (Float)((color & 255)) ) / ( (Float)(255) ));
HXDLIN( 139)		Float c_a = a;
HXDLIN( 139)		Float c_r = r;
HXDLIN( 139)		Float c_g = g;
HXDLIN( 139)		Float c_b = b;
HXLINE( 140)		Float l = ((Float)0.);
HXLINE( 141)		int v = 0;
HXLINE( 142)		if (useAlpha) {
HXLINE( 143)			l = (c_a * (((((Float)0.21) * c_r) + (((Float)0.72) * c_g)) + (((Float)0.07) * c_b)));
HXLINE( 144)			v = ::Math_obj::round((l * ( (Float)(255) )));
HXLINE( 145)			return (((-16777216 | (v << 16)) | (v << 8)) | v);
            		}
            		else {
HXLINE( 147)			l = (((((Float)0.21) * c_r) + (((Float)0.72) * c_g)) + (((Float)0.07) * c_b));
HXLINE( 148)			v = ::Math_obj::round((l * ( (Float)(255) )));
HXLINE( 149)			return ((((::Math_obj::round((c_a * ( (Float)(255) ))) << 24) | (v << 16)) | (v << 8)) | v);
            		}
HXLINE( 142)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorHelp_Fields__obj,luminosityGrey,return )


ColorHelp_Fields__obj::ColorHelp_Fields__obj()
{
}

bool ColorHelp_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"avg") ) { outValue = avg_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"redAvg") ) { outValue = redAvg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rgbInt") ) { outValue = rgbInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alpha1") ) { outValue = alpha1_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"argbInt") ) { outValue = argbInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"between") ) { outValue = between_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blueAvg") ) { outValue = blueAvg_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"AplusRGB") ) { outValue = AplusRGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alphaAvg") ) { outValue = alphaAvg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greenAvg") ) { outValue = greenAvg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHexInt") ) { outValue = toHexInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAlpha") ) { outValue = getAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getColor") ) { outValue = getColor_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"from_argb") ) { outValue = from_argb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hexToARGB") ) { outValue = hexToARGB_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"redChannel") ) { outValue = redChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"redBetween") ) { outValue = redBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"argbIntAvg") ) { outValue = argbIntAvg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colorAlpha") ) { outValue = colorAlpha_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stringColor") ) { outValue = stringColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blueChannel") ) { outValue = blueChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blueBetween") ) { outValue = blueBetween_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alphaChannel") ) { outValue = alphaChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greenChannel") ) { outValue = greenChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alphaBetween") ) { outValue = alphaBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greenBetween") ) { outValue = greenBetween_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"colorIntAlpha") ) { outValue = colorIntAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stringHashARGB") ) { outValue = stringHashARGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"argbIntBetween") ) { outValue = argbIntBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"luminosityGrey") ) { outValue = luminosityGrey_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ColorHelp_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ColorHelp_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ColorHelp_Fields__obj::__mClass;

static ::String ColorHelp_Fields__obj_sStaticFields[] = {
	HX_("stringColor",d2,22,5f,55),
	HX_("stringHashARGB",0b,22,6d,90),
	HX_("alphaChannel",05,49,45,60),
	HX_("redChannel",72,8b,3f,cc),
	HX_("greenChannel",40,c8,80,1b),
	HX_("blueChannel",49,cd,ee,07),
	HX_("AplusRGB",b2,c5,e1,8f),
	HX_("argbInt",03,8f,95,e5),
	HX_("avg",d2,01,4a,00),
	HX_("between",c8,91,b3,66),
	HX_("alphaAvg",14,81,1f,21),
	HX_("alphaBetween",0a,da,26,fa),
	HX_("redAvg",01,c9,72,fe),
	HX_("redBetween",77,1c,21,66),
	HX_("greenAvg",cf,06,46,5a),
	HX_("greenBetween",45,59,62,b5),
	HX_("blueAvg",58,93,98,ba),
	HX_("blueBetween",4e,5e,d0,a1),
	HX_("from_argb",81,23,e1,14),
	HX_("argbIntAvg",8f,2e,3b,8d),
	HX_("argbIntBetween",05,61,66,34),
	HX_("hexToARGB",82,61,b3,6b),
	HX_("toHexInt",af,24,5e,33),
	HX_("rgbInt",e2,8f,f3,23),
	HX_("getAlpha",e8,b6,6d,81),
	HX_("alpha1",13,cb,3b,42),
	HX_("getColor",ed,80,33,aa),
	HX_("colorAlpha",fb,be,02,46),
	HX_("colorIntAlpha",72,90,d6,6c),
	HX_("luminosityGrey",40,40,9e,ee),
	::String(null())
};

void ColorHelp_Fields__obj::__register()
{
	ColorHelp_Fields__obj _hx_dummy;
	ColorHelp_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.pixel._ColorHelp.ColorHelp_Fields_",b1,77,b9,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorHelp_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ColorHelp_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ColorHelp_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorHelp_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorHelp_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace pixel
} // end namespace _ColorHelp
