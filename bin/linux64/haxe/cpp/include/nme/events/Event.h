// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_Event
#define INCLUDED_nme_events_Event

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,events,Event)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES Event_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Event_obj OBJ_;
		Event_obj();

	public:
		enum { _hx_ClassId = 0x113d0d1f };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.Event")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.Event"); }
		static ::hx::ObjectPtr< Event_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable);
		static ::hx::ObjectPtr< Event_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Event_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Event",fa,37,f2,08); }

		static void __boot();
		static ::String ACTIVATE;
		static ::String ADDED;
		static ::String ADDED_TO_STAGE;
		static ::String CANCEL;
		static ::String CHANGE;
		static ::String BEFORE_CLOSE;
		static ::String CLOSE;
		static ::String COMPLETE;
		static ::String CONNECT;
		static ::String CONTEXT3D_CREATE;
		static ::String CONTEXT3D_LOST;
		static ::String DEACTIVATE;
		static ::String ENTER_FRAME;
		static ::String ID3;
		static ::String INIT;
		static ::String MOUSE_ENTER;
		static ::String MOUSE_LEAVE;
		static ::String OPEN;
		static ::String REMOVED;
		static ::String REMOVED_FROM_STAGE;
		static ::String RENDER;
		static ::String RESIZE;
		static ::String SCROLL;
		static ::String SELECT;
		static ::String SOUND_COMPLETE;
		static ::String TAB_CHILDREN_CHANGE;
		static ::String TAB_ENABLED_CHANGE;
		static ::String TAB_INDEX_CHANGE;
		static ::String UNLOAD;
		static ::String VIDEO_FRAME;
		static ::String DPI_CHANGED;
		static ::String DROP_FILES;
		bool _bubbles;
		bool _cancelable;
		 ::Dynamic _currentTarget;
		int _eventPhase;
		 ::Dynamic _target;
		::String _type;
		bool nmeIsCancelled;
		bool nmeIsCancelledNow;
		bool clickCancelled;
		virtual  ::nme::events::Event clone();
		::Dynamic clone_dyn();

		bool nmeGetIsCancelled();
		::Dynamic nmeGetIsCancelled_dyn();

		bool nmeGetIsCancelledNow();
		::Dynamic nmeGetIsCancelledNow_dyn();

		void nmeSetPhase(int inPhase);
		::Dynamic nmeSetPhase_dyn();

		void stopImmediatePropagation();
		::Dynamic stopImmediatePropagation_dyn();

		void stopPropagation();
		::Dynamic stopPropagation_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		bool get_bubbles();
		::Dynamic get_bubbles_dyn();

		bool get_cancelable();
		::Dynamic get_cancelable_dyn();

		 ::Dynamic get_currentTarget();
		::Dynamic get_currentTarget_dyn();

		 ::Dynamic set_currentTarget( ::Dynamic v);
		::Dynamic set_currentTarget_dyn();

		int get_eventPhase();
		::Dynamic get_eventPhase_dyn();

		 ::Dynamic get_target();
		::Dynamic get_target_dyn();

		 ::Dynamic set_target( ::Dynamic v);
		::Dynamic set_target_dyn();

		::String get_type();
		::Dynamic get_type_dyn();

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_Event */ 
