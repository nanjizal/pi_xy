// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_contour_LineShape_
#include <pi_xy/triangleGML/triGML/shape/contour/LineShape_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5131b6949c75c602_22_new,"pi_xy.triangleGML.triGML.shape.contour.LineShape_","new",0xa2ca03c1,"pi_xy.triangleGML.triGML.shape.contour.LineShape_.new","pi_xy/triangleGML/triGML/shape/contour/LineShape_.hx",22,0x03eb922e)
HX_LOCAL_STACK_FRAME(_hx_pos_5131b6949c75c602_31_setParameter,"pi_xy.triangleGML.triGML.shape.contour.LineShape_","setParameter",0x7de2ce26,"pi_xy.triangleGML.triGML.shape.contour.LineShape_.setParameter","pi_xy/triangleGML/triGML/shape/contour/LineShape_.hx",31,0x03eb922e)
namespace pi_xy{
namespace triangleGML{
namespace triGML{
namespace shape{
namespace contour{

void LineShape__obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< Float >  __o_edgeSoft){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(-1048576);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		Float x1 = __o_x1.Default(((Float)0.));
            		Float y1 = __o_y1.Default(((Float)0.));
            		Float x2 = __o_x2.Default(((Float)0.));
            		Float y2 = __o_y2.Default(((Float)0.));
            		Float edgeSoft = __o_edgeSoft.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_5131b6949c75c602_22_new)
HXLINE(  23)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray);
HXLINE(  24)		this->x1 = x1;
HXLINE(  25)		this->y1 = y1;
HXLINE(  26)		this->x2 = x2;
HXLINE(  27)		this->y2 = y2;
HXLINE(  28)		this->edgeSoft = edgeSoft;
            	}

bool LineShape__obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f46d6e1) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x2f46d6e1;
		}
	} else {
		return inClassId==(int)0x7ff8cec5;
	}
}

void LineShape__obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_5131b6949c75c602_31_setParameter)
HXDLIN(  31)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("x1",b9,68,00,00)) ){
HXLINE(  33)			this->x1 = ::Std_obj::parseFloat(value);
HXDLIN(  33)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x2",ba,68,00,00)) ){
HXLINE(  37)			this->x2 = ::Std_obj::parseFloat(value);
HXDLIN(  37)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y1",98,69,00,00)) ){
HXLINE(  35)			this->y1 = ::Std_obj::parseFloat(value);
HXDLIN(  35)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y2",99,69,00,00)) ){
HXLINE(  39)			this->y2 = ::Std_obj::parseFloat(value);
HXDLIN(  39)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  41)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}



LineShape__obj::LineShape__obj()
{
}

::hx::Val LineShape__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineShape__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineShape__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineShape__obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LineShape__obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(LineShape__obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(LineShape__obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(LineShape__obj,y2),HX_("y2",99,69,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineShape__obj_sStaticStorageInfo = 0;
#endif

static ::String LineShape__obj_sMemberFields[] = {
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	::String(null()) };

::hx::Class LineShape__obj::__mClass;

void LineShape__obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.triGML.shape.contour.LineShape_",4f,0f,33,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineShape__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineShape__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineShape__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineShape__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML
} // end namespace shape
} // end namespace contour
