// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_Cache
#define INCLUDED_nme_Cache

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nme,Cache)

namespace nme{


class HXCPP_CLASS_ATTRIBUTES Cache_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Cache_obj OBJ_;
		Cache_obj();

	public:
		enum { _hx_ClassId = 0x08a74c64 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.Cache")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.Cache"); }
		static ::hx::ObjectPtr< Cache_obj > __new();
		static ::hx::ObjectPtr< Cache_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Cache_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Cache",22,0a,42,d4); }

		void removeBitmapData(::String inId);
		::Dynamic removeBitmapData_dyn();

};

} // end namespace nme

#endif /* INCLUDED_nme_Cache */ 
