// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_imageAbstracts__TransformImage_TransformImage_Impl_
#include <pi_xy/imageAbstracts/_TransformImage/TransformImage_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_transformation__FlipImage_FlipImage_Fields_
#include <pi_xy/transformation/_FlipImage/FlipImage_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0653826af93cdce4_14_imageflipX,"pi_xy.transformation._FlipImage.FlipImage_Fields_","imageflipX",0xb393f50a,"pi_xy.transformation._FlipImage.FlipImage_Fields_.imageflipX","pi_xy/transformation/FlipImage.hx",14,0xd8b29eee)
HX_LOCAL_STACK_FRAME(_hx_pos_0653826af93cdce4_61_imageflipY,"pi_xy.transformation._FlipImage.FlipImage_Fields_","imageflipY",0xb393f50b,"pi_xy.transformation._FlipImage.FlipImage_Fields_.imageflipY","pi_xy/transformation/FlipImage.hx",61,0xd8b29eee)
namespace pi_xy{
namespace transformation{
namespace _FlipImage{

void FlipImage_Fields__obj::__construct() { }

Dynamic FlipImage_Fields__obj::__CreateEmpty() { return new FlipImage_Fields__obj; }

void *FlipImage_Fields__obj::_hx_vtable = 0;

Dynamic FlipImage_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlipImage_Fields__obj > _hx_result = new FlipImage_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlipImage_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20dbbeb6;
}

 ::pi_xy::ImageStruct FlipImage_Fields__obj::imageflipX( ::pi_xy::ImageStruct thisImage,Float x,Float y,Float w,Float h,::hx::Null< bool >  __o_transparent,::hx::Null< bool >  __o_inPlace,::hx::Null< bool >  __o_includeMask){
            		bool transparent = __o_transparent.Default(false);
            		bool inPlace = __o_inPlace.Default(false);
            		bool includeMask = __o_includeMask.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_0653826af93cdce4_14_imageflipX)
HXLINE(  15)		Float r_x = x;
HXDLIN(  15)		Float r_y = y;
HXDLIN(  15)		Float r_w = w;
HXDLIN(  15)		Float r_h = h;
HXDLIN(  15)		int xmax = ::Std_obj::_hx_int(((r_x + r_w) + 1));
HXDLIN(  15)		int ymax = ::Std_obj::_hx_int(((r_y + r_h) + 1));
HXDLIN(  15)		int ii_min = ::Std_obj::_hx_int(r_x);
HXDLIN(  15)		int ii_max = xmax;
HXDLIN(  15)		int xRange__start = ii_min;
HXDLIN(  15)		int xRange__max = ii_max;
HXDLIN(  15)		int ii_min1 = ::Std_obj::_hx_int(r_y);
HXDLIN(  15)		int ii_max1 = ymax;
HXDLIN(  15)		int yRange__start = ii_min1;
HXDLIN(  15)		int yRange__max = ii_max1;
HXDLIN(  15)		int range_x = xRange__start;
HXDLIN(  15)		int range_y = (yRange__start - 1);
HXDLIN(  15)		int range_xReset = range_x;
HXDLIN(  15)		int range_yReset = range_y;
HXDLIN(  15)		int range_xMax = (xRange__max - 2);
HXDLIN(  15)		int range_yMax = (yRange__max - 2);
HXDLIN(  15)		int _this_min = 0;
HXDLIN(  15)		int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXLINE(  16)		int width = ::Std_obj::_hx_int(w);
HXDLIN(  16)		int height = ::Std_obj::_hx_int(h);
HXDLIN(  16)		 ::Dynamic imageType = null();
HXDLIN(  16)		 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  16)		if (::hx::IsNull( imageType )) {
HXLINE(  54)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXLINE(  16)		::Dynamic _hx_tmp;
HXDLIN(  16)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  16)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  16)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  16)				{
HXLINE(  16)					b->width = width;
HXDLIN(  16)					b->height = height;
HXDLIN(  16)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  16)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  16)					{
HXLINE(  16)						int len = b->length;
HXDLIN(  16)						int w1 = 0;
HXDLIN(  16)						{
HXLINE(  16)							int _g = 0;
HXDLIN(  16)							int _g1 = b->height;
HXDLIN(  16)							while((_g < _g1)){
HXLINE(  16)								_g = (_g + 1);
HXDLIN(  16)								int y1 = (_g - 1);
HXDLIN(  16)								{
HXLINE(  16)									int _g2 = 0;
HXDLIN(  16)									int _g3 = b->width;
HXDLIN(  16)									while((_g2 < _g3)){
HXLINE(  16)										_g2 = (_g2 + 1);
HXDLIN(  16)										int x1 = (_g2 - 1);
HXDLIN(  16)										{
HXLINE(  16)											w1 = (w1 + 1);
HXDLIN(  16)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  16)										{
HXLINE(  16)											w1 = (w1 + 1);
HXDLIN(  16)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  16)										{
HXLINE(  16)											w1 = (w1 + 1);
HXDLIN(  16)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  16)										{
HXLINE(  16)											w1 = (w1 + 1);
HXDLIN(  16)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  16)				_hx_tmp = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  16)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  16)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  16)				{
HXLINE(  16)					a->width = width;
HXDLIN(  16)					a->height = height;
HXDLIN(  16)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  16)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  16)					{
HXLINE(  16)						int _g4 = 0;
HXDLIN(  16)						int _g5 = a->length;
HXDLIN(  16)						while((_g4 < _g5)){
HXLINE(  16)							_g4 = (_g4 + 1);
HXDLIN(  16)							int i = (_g4 - 1);
HXDLIN(  16)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  16)				_hx_tmp = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  16)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  16)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  16)				{
HXLINE(  16)					b1->width = width;
HXDLIN(  16)					b1->height = height;
HXDLIN(  16)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  16)					int size = (b1->length * 4);
HXDLIN(  16)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  16)					{
HXLINE(  16)						int _g6 = 0;
HXDLIN(  16)						int _g7 = b1->length;
HXDLIN(  16)						while((_g6 < _g7)){
HXLINE(  16)							_g6 = (_g6 + 1);
HXDLIN(  16)							int i1 = (_g6 - 1);
HXDLIN(  16)							{
HXLINE(  16)								 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  16)								bool _hx_tmp1;
HXDLIN(  16)								if ((i1 >= 0)) {
HXLINE(  16)									_hx_tmp1 = (i1 < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(  16)									_hx_tmp1 = false;
            								}
HXDLIN(  16)								if (_hx_tmp1) {
HXLINE(  16)									 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  16)									int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  16)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  16)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  16)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  16)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  16)				_hx_tmp = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  16)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  16)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  16)				{
HXLINE(  16)					v->width = width;
HXDLIN(  16)					v->height = height;
HXDLIN(  16)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  16)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  16)					{
HXLINE(  16)						int _g8 = 0;
HXDLIN(  16)						int _g9 = v->length;
HXDLIN(  16)						while((_g8 < _g9)){
HXLINE(  16)							_g8 = (_g8 + 1);
HXDLIN(  16)							int i2 = (_g8 - 1);
HXDLIN(  16)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  16)				_hx_tmp = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  16)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  16)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  16)				{
HXLINE(  16)					b2->width = width;
HXDLIN(  16)					b2->height = height;
HXDLIN(  16)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  16)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  16)					{
HXLINE(  16)						int len1 = b2->length;
HXDLIN(  16)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  16)						if (::hx::IsNull( d->head )) {
HXLINE(  16)							int _g10 = 0;
HXDLIN(  16)							int _g11 = len1;
HXDLIN(  16)							while((_g10 < _g11)){
HXLINE(  16)								_g10 = (_g10 + 1);
HXDLIN(  16)								int i3 = (_g10 - 1);
HXDLIN(  16)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  16)							int _g12 = 0;
HXDLIN(  16)							int _g13 = len1;
HXDLIN(  16)							while((_g12 < _g13)){
HXLINE(  16)								_g12 = (_g12 + 1);
HXDLIN(  16)								int i4 = (_g12 - 1);
HXDLIN(  16)								{
HXLINE(  16)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  16)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  16)									{
HXLINE(  16)										int _g14 = 0;
HXDLIN(  16)										int _g15 = i4;
HXDLIN(  16)										while((_g14 < _g15)){
HXLINE(  16)											_g14 = (_g14 + 1);
HXDLIN(  16)											int i5 = (_g14 - 1);
HXLINE( 345)											prev = l;
HXLINE( 346)											l = l->next;
            										}
            									}
HXLINE(  16)									if (::hx::IsNull( prev )) {
HXLINE(  16)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  16)										l = null();
            									}
            									else {
HXLINE(  16)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  16)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  16)				_hx_tmp = b2;
            			}
            			break;
            		}
HXDLIN(  16)		this1->image = _hx_tmp;
HXDLIN(  16)		this1->width = width;
HXDLIN(  16)		this1->height = height;
HXDLIN(  16)		this1->imageType = ( (int)(imageType) );
HXDLIN(  16)		 ::pi_xy::ImageStruct nextImage = this1;
HXLINE(  17)		nextImage->transparent = transparent;
HXLINE(  18)		while((_this_min < _this_max)){
HXLINE(  18)			_this_min = (_this_min + 1);
HXDLIN(  18)			int i6 = (_this_min - 1);
HXDLIN(  18)			if ((range_y > range_yMax)) {
HXLINE(  18)				range_y = range_yReset;
HXDLIN(  18)				range_x = (range_x + 1);
            			}
HXDLIN(  18)			range_y = (range_y + 1);
HXDLIN(  18)			int i7 = i6;
HXLINE(  20)			{
HXLINE(  20)				int x2 = range_x;
HXDLIN(  20)				int y2 = range_y;
HXDLIN(  20)				int x3 = (range_xMax - range_x);
HXDLIN(  20)				int y3 = range_y;
HXDLIN(  20)				::Dynamic this3 = thisImage->image;
HXDLIN(  20)				int index;
HXDLIN(  20)				if (thisImage->useVirtualPos) {
HXLINE(  20)					index = ::Std_obj::_hx_int(((((( (Float)(y3) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x3) - thisImage->virtualX));
            				}
            				else {
HXLINE(  20)					index = ::Std_obj::_hx_int(( (Float)(((y3 * thisImage->width) + x3)) ));
            				}
HXDLIN(  20)				int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  20)				int color;
HXDLIN(  20)				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)					color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            				}
            				else {
HXLINE(  20)					color = c;
            				}
HXDLIN(  20)				int c1 = color;
HXDLIN(  20)				bool _hx_tmp2;
HXDLIN(  20)				if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  20)					_hx_tmp2 = nextImage->transparent;
            				}
            				else {
HXLINE(  20)					_hx_tmp2 = false;
            				}
HXDLIN(  20)				if (_hx_tmp2) {
HXLINE(  20)					int location;
HXDLIN(  20)					if (nextImage->useVirtualPos) {
HXLINE(  20)						location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + x2) - nextImage->virtualX));
            					}
            					else {
HXLINE(  20)						location = ::Std_obj::_hx_int(( (Float)(((y2 * nextImage->width) + x2)) ));
            					}
HXDLIN(  20)					int this4 = ::iterMagic::Iimg_obj::get(nextImage->image,location);
HXDLIN(  20)					int this5;
HXDLIN(  20)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)						this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            					}
            					else {
HXLINE(  20)						this5 = this4;
            					}
HXDLIN(  20)					Float a1;
HXDLIN(  20)					int this6 = ((this5 >> 24) & 255);
HXDLIN(  20)					if ((this6 == 0)) {
HXLINE(  20)						a1 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float r1;
HXDLIN(  20)					int this7 = ((this5 >> 16) & 255);
HXDLIN(  20)					if ((this7 == 0)) {
HXLINE(  20)						r1 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float g1;
HXDLIN(  20)					int this8 = ((this5 >> 8) & 255);
HXDLIN(  20)					if ((this8 == 0)) {
HXLINE(  20)						g1 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float b11;
HXDLIN(  20)					int this9 = (this5 & 255);
HXDLIN(  20)					if ((this9 == 0)) {
HXLINE(  20)						b11 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						b11 = (( (Float)(this9) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float a2;
HXDLIN(  20)					int this10 = ((color >> 24) & 255);
HXDLIN(  20)					if ((this10 == 0)) {
HXLINE(  20)						a2 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float r2;
HXDLIN(  20)					int this11 = ((color >> 16) & 255);
HXDLIN(  20)					if ((this11 == 0)) {
HXLINE(  20)						r2 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float g2;
HXDLIN(  20)					int this12 = ((color >> 8) & 255);
HXDLIN(  20)					if ((this12 == 0)) {
HXLINE(  20)						g2 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float b21;
HXDLIN(  20)					int this13 = (color & 255);
HXDLIN(  20)					if ((this13 == 0)) {
HXLINE(  20)						b21 = ((Float)0.);
            					}
            					else {
HXLINE(  20)						b21 = (( (Float)(this13) ) / ( (Float)(255) ));
            					}
HXDLIN(  20)					Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  20)					int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  20)					int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  20)					int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  20)					int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  20)					int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  20)					{
HXLINE(  20)						int _hx_tmp3;
HXDLIN(  20)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)							_hx_tmp3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            						}
            						else {
HXLINE(  20)							_hx_tmp3 = blended;
            						}
HXDLIN(  20)						::iterMagic::Iimg_obj::set(nextImage->image,location,_hx_tmp3);
            					}
            				}
            				else {
HXLINE(  20)					::Dynamic this14 = nextImage->image;
HXDLIN(  20)					int index1;
HXDLIN(  20)					if (nextImage->useVirtualPos) {
HXLINE(  20)						index1 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + x2) - nextImage->virtualX));
            					}
            					else {
HXLINE(  20)						index1 = ::Std_obj::_hx_int(( (Float)(((y2 * nextImage->width) + x2)) ));
            					}
HXDLIN(  20)					int _hx_tmp4;
HXDLIN(  20)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)						_hx_tmp4 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            					}
            					else {
HXLINE(  20)						_hx_tmp4 = c1;
            					}
HXDLIN(  20)					::iterMagic::Iimg_obj::set(this14,index1,_hx_tmp4);
            				}
            			}
            		}
HXLINE(  41)		if (inPlace) {
HXLINE(  42)			{
HXLINE(  42)				int x4 = ::Std_obj::_hx_int(x);
HXDLIN(  42)				int y4 = ::Std_obj::_hx_int(y);
HXDLIN(  42)				bool forceClear = false;
HXDLIN(  42)				{
HXLINE(  42)					int _g16 = 0;
HXDLIN(  42)					int _g17 = nextImage->height;
HXDLIN(  42)					while((_g16 < _g17)){
HXLINE(  42)						_g16 = (_g16 + 1);
HXDLIN(  42)						int dy = (_g16 - 1);
HXDLIN(  42)						{
HXLINE(  42)							int _g18 = 0;
HXDLIN(  42)							int _g19 = nextImage->width;
HXDLIN(  42)							while((_g18 < _g19)){
HXLINE(  42)								_g18 = (_g18 + 1);
HXDLIN(  42)								int dx = (_g18 - 1);
HXDLIN(  42)								::Dynamic this15 = nextImage->image;
HXDLIN(  42)								int index2;
HXDLIN(  42)								if (nextImage->useVirtualPos) {
HXLINE(  42)									index2 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + dx) - nextImage->virtualX));
            								}
            								else {
HXLINE(  42)									index2 = ::Std_obj::_hx_int(( (Float)(((dy * nextImage->width) + dx)) ));
            								}
HXDLIN(  42)								int c2 = ::iterMagic::Iimg_obj::get(this15,index2);
HXDLIN(  42)								int col;
HXDLIN(  42)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)									col = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            								}
            								else {
HXLINE(  42)									col = c2;
            								}
HXDLIN(  42)								bool _hx_tmp5;
HXDLIN(  42)								if (nextImage->useMask) {
HXLINE(  42)									_hx_tmp5 = ::hx::IsNotNull( nextImage->mask );
            								}
            								else {
HXLINE(  42)									_hx_tmp5 = false;
            								}
HXDLIN(  42)								if (_hx_tmp5) {
HXLINE(  42)									 ::pi_xy::ImageStruct this16 = nextImage->mask;
HXDLIN(  42)									::Dynamic this17 = this16->image;
HXDLIN(  42)									int index3;
HXDLIN(  42)									if (this16->useVirtualPos) {
HXLINE(  42)										index3 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this16->virtualY) * ( (Float)(this16->width) )) + dx) - this16->virtualX));
            									}
            									else {
HXLINE(  42)										index3 = ::Std_obj::_hx_int(( (Float)(((dy * this16->width) + dx)) ));
            									}
HXDLIN(  42)									int c3 = ::iterMagic::Iimg_obj::get(this17,index3);
HXDLIN(  42)									int v1;
HXDLIN(  42)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)										v1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE(  42)										v1 = c3;
            									}
HXDLIN(  42)									int maskPixel = v1;
HXDLIN(  42)									int this18 = col;
HXDLIN(  42)									if ((maskPixel == 0)) {
HXLINE(  42)										col = this18;
            									}
            									else {
HXLINE(  42)										Float m0;
HXDLIN(  42)										int this19 = ((maskPixel >> 24) & 255);
HXDLIN(  42)										if ((this19 == 0)) {
HXLINE(  42)											m0 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											m0 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float m1;
HXDLIN(  42)										int this20 = ((maskPixel >> 16) & 255);
HXDLIN(  42)										if ((this20 == 0)) {
HXLINE(  42)											m1 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											m1 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float m2;
HXDLIN(  42)										int this21 = ((maskPixel >> 8) & 255);
HXDLIN(  42)										if ((this21 == 0)) {
HXLINE(  42)											m2 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											m2 = (( (Float)(this21) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float m3;
HXDLIN(  42)										int this22 = (maskPixel & 255);
HXDLIN(  42)										if ((this22 == 0)) {
HXLINE(  42)											m3 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											m3 = (( (Float)(this22) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this18 >> 24) & 255)) )));
HXDLIN(  42)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this18 >> 16) & 255)) )));
HXDLIN(  42)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this18 >> 8) & 255)) )));
HXDLIN(  42)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this18 & 255)) )));
HXDLIN(  42)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  42)								if ((col != 0)) {
HXLINE(  42)									int x5 = (x4 + dx);
HXDLIN(  42)									int y5 = (y4 + dy);
HXDLIN(  42)									int c4 = col;
HXDLIN(  42)									bool _hx_tmp6;
HXDLIN(  42)									if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  42)										_hx_tmp6 = thisImage->transparent;
            									}
            									else {
HXLINE(  42)										_hx_tmp6 = false;
            									}
HXDLIN(  42)									if (_hx_tmp6) {
HXLINE(  42)										int location1;
HXDLIN(  42)										if (thisImage->useVirtualPos) {
HXLINE(  42)											location1 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x5) - thisImage->virtualX));
            										}
            										else {
HXLINE(  42)											location1 = ::Std_obj::_hx_int(( (Float)(((y5 * thisImage->width) + x5)) ));
            										}
HXDLIN(  42)										int this23 = ::iterMagic::Iimg_obj::get(thisImage->image,location1);
HXDLIN(  42)										int this24;
HXDLIN(  42)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)											this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE(  42)											this24 = this23;
            										}
HXDLIN(  42)										Float a11;
HXDLIN(  42)										int this25 = ((this24 >> 24) & 255);
HXDLIN(  42)										if ((this25 == 0)) {
HXLINE(  42)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float r11;
HXDLIN(  42)										int this26 = ((this24 >> 16) & 255);
HXDLIN(  42)										if ((this26 == 0)) {
HXLINE(  42)											r11 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float g11;
HXDLIN(  42)										int this27 = ((this24 >> 8) & 255);
HXDLIN(  42)										if ((this27 == 0)) {
HXLINE(  42)											g11 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float b12;
HXDLIN(  42)										int this28 = (this24 & 255);
HXDLIN(  42)										if ((this28 == 0)) {
HXLINE(  42)											b12 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float a21;
HXDLIN(  42)										int this29 = ((col >> 24) & 255);
HXDLIN(  42)										if ((this29 == 0)) {
HXLINE(  42)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float r21;
HXDLIN(  42)										int this30 = ((col >> 16) & 255);
HXDLIN(  42)										if ((this30 == 0)) {
HXLINE(  42)											r21 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float g21;
HXDLIN(  42)										int this31 = ((col >> 8) & 255);
HXDLIN(  42)										if ((this31 == 0)) {
HXLINE(  42)											g21 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float b22;
HXDLIN(  42)										int this32 = (col & 255);
HXDLIN(  42)										if ((this32 == 0)) {
HXLINE(  42)											b22 = ((Float)0.);
            										}
            										else {
HXLINE(  42)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN(  42)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  42)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  42)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  42)										int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  42)										int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  42)										int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  42)										{
HXLINE(  42)											int _hx_tmp7;
HXDLIN(  42)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE(  42)												_hx_tmp7 = blended1;
            											}
HXDLIN(  42)											::iterMagic::Iimg_obj::set(thisImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE(  42)										::Dynamic this33 = thisImage->image;
HXDLIN(  42)										int index4;
HXDLIN(  42)										if (thisImage->useVirtualPos) {
HXLINE(  42)											index4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x5) - thisImage->virtualX));
            										}
            										else {
HXLINE(  42)											index4 = ::Std_obj::_hx_int(( (Float)(((y5 * thisImage->width) + x5)) ));
            										}
HXDLIN(  42)										int _hx_tmp8;
HXDLIN(  42)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)											_hx_tmp8 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE(  42)											_hx_tmp8 = c4;
            										}
HXDLIN(  42)										::iterMagic::Iimg_obj::set(this33,index4,_hx_tmp8);
            									}
            								}
            								else {
HXLINE(  42)									if (forceClear) {
HXLINE(  42)										::Dynamic this34 = thisImage->image;
HXDLIN(  42)										int x6 = (x4 + dx);
HXDLIN(  42)										int y6 = (y4 + dy);
HXDLIN(  42)										int index5;
HXDLIN(  42)										if (thisImage->useVirtualPos) {
HXLINE(  42)											index5 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x6) - thisImage->virtualX));
            										}
            										else {
HXLINE(  42)											index5 = ::Std_obj::_hx_int(( (Float)(((y6 * thisImage->width) + x6)) ));
            										}
HXDLIN(  42)										::iterMagic::Iimg_obj::set(this34,index5,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(  43)			bool _hx_tmp9;
HXDLIN(  43)			if (::hx::IsNotNull( thisImage->mask )) {
HXLINE(  43)				_hx_tmp9 = includeMask;
            			}
            			else {
HXLINE(  43)				_hx_tmp9 = false;
            			}
HXDLIN(  43)			if (_hx_tmp9) {
HXLINE(  43)				 ::pi_xy::ImageStruct v2 = ::pi_xy::transformation::_FlipImage::FlipImage_Fields__obj::imageflipX(thisImage->mask,x,y,( (Float)(thisImage->width) ),( (Float)(thisImage->height) ),thisImage->mask->transparent,inPlace,includeMask);
HXDLIN(  43)				thisImage->useMask = true;
HXDLIN(  43)				thisImage->mask = v2;
            			}
HXLINE(  44)			nextImage = null();
HXLINE(  45)			return thisImage;
            		}
            		else {
HXLINE(  47)			bool _hx_tmp10;
HXDLIN(  47)			if (::hx::IsNotNull( thisImage->mask )) {
HXLINE(  47)				_hx_tmp10 = includeMask;
            			}
            			else {
HXLINE(  47)				_hx_tmp10 = false;
            			}
HXDLIN(  47)			if (_hx_tmp10) {
HXLINE(  47)				 ::pi_xy::ImageStruct this35 = thisImage->mask;
HXDLIN(  47)				Float w2 = ( (Float)(thisImage->width) );
HXDLIN(  47)				Float h1 = ( (Float)(thisImage->height) );
HXDLIN(  47)				bool transparent1 = thisImage->mask->transparent;
HXDLIN(  47)				Float r_x1 = x;
HXDLIN(  47)				Float r_y1 = y;
HXDLIN(  47)				Float r_w1 = w2;
HXDLIN(  47)				Float r_h1 = h1;
HXDLIN(  47)				int xmax1 = ::Std_obj::_hx_int(((r_x1 + r_w1) + 1));
HXDLIN(  47)				int ymax1 = ::Std_obj::_hx_int(((r_y1 + r_h1) + 1));
HXDLIN(  47)				int ii_min2 = ::Std_obj::_hx_int(r_x1);
HXDLIN(  47)				int ii_max2 = xmax1;
HXDLIN(  47)				int xRange__start1 = ii_min2;
HXDLIN(  47)				int xRange__max1 = ii_max2;
HXDLIN(  47)				int ii_min3 = ::Std_obj::_hx_int(r_y1);
HXDLIN(  47)				int ii_max3 = ymax1;
HXDLIN(  47)				int yRange__start1 = ii_min3;
HXDLIN(  47)				int yRange__max1 = ii_max3;
HXDLIN(  47)				int range_x1 = xRange__start1;
HXDLIN(  47)				int range_y1 = (yRange__start1 - 1);
HXDLIN(  47)				int range_xReset1 = range_x1;
HXDLIN(  47)				int range_yReset1 = range_y1;
HXDLIN(  47)				int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  47)				int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  47)				int _this_min1 = 0;
HXDLIN(  47)				int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  47)				int width1 = ::Std_obj::_hx_int(w2);
HXDLIN(  47)				int height1 = ::Std_obj::_hx_int(h1);
HXDLIN(  47)				 ::Dynamic imageType1 = null();
HXDLIN(  47)				 ::pi_xy::ImageStruct this36 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  47)				::Dynamic _hx_tmp11;
HXDLIN(  47)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE(  47)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)						 ::iterMagic::BytesImg b5 = byt1;
HXDLIN(  47)						{
HXLINE(  47)							b5->width = width1;
HXDLIN(  47)							b5->height = height1;
HXDLIN(  47)							b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  47)							b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN(  47)							{
HXLINE(  47)								int len2 = b5->length;
HXDLIN(  47)								int w3 = 0;
HXDLIN(  47)								{
HXLINE(  47)									int _g20 = 0;
HXDLIN(  47)									int _g21 = b5->height;
HXDLIN(  47)									while((_g20 < _g21)){
HXLINE(  47)										_g20 = (_g20 + 1);
HXDLIN(  47)										int y7 = (_g20 - 1);
HXDLIN(  47)										{
HXLINE(  47)											int _g22 = 0;
HXDLIN(  47)											int _g23 = b5->width;
HXDLIN(  47)											while((_g22 < _g23)){
HXLINE(  47)												_g22 = (_g22 + 1);
HXDLIN(  47)												int x7 = (_g22 - 1);
HXDLIN(  47)												{
HXLINE(  47)													w3 = (w3 + 1);
HXDLIN(  47)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  47)												{
HXLINE(  47)													w3 = (w3 + 1);
HXDLIN(  47)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  47)												{
HXLINE(  47)													w3 = (w3 + 1);
HXDLIN(  47)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  47)												{
HXLINE(  47)													w3 = (w3 + 1);
HXDLIN(  47)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  47)						_hx_tmp11 = b5;
            					}
            					break;
            					case (int)1: {
HXLINE(  47)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)						 ::iterMagic::ArrIntImg a6 = arrI1;
HXDLIN(  47)						{
HXLINE(  47)							a6->width = width1;
HXDLIN(  47)							a6->height = height1;
HXDLIN(  47)							a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)							a6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  47)							{
HXLINE(  47)								int _g24 = 0;
HXDLIN(  47)								int _g25 = a6->length;
HXDLIN(  47)								while((_g24 < _g25)){
HXLINE(  47)									_g24 = (_g24 + 1);
HXDLIN(  47)									int i8 = (_g24 - 1);
HXDLIN(  47)									a6->data[i8] = 0;
            								}
            							}
            						}
HXDLIN(  47)						_hx_tmp11 = a6;
            					}
            					break;
            					case (int)2: {
HXLINE(  47)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)						 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN(  47)						{
HXLINE(  47)							b6->width = width1;
HXDLIN(  47)							b6->height = height1;
HXDLIN(  47)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  47)							int size1 = (b6->length * 4);
HXDLIN(  47)							b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  47)							{
HXLINE(  47)								int _g26 = 0;
HXDLIN(  47)								int _g27 = b6->length;
HXDLIN(  47)								while((_g26 < _g27)){
HXLINE(  47)									_g26 = (_g26 + 1);
HXDLIN(  47)									int i9 = (_g26 - 1);
HXDLIN(  47)									{
HXLINE(  47)										 ::haxe::io::ArrayBufferViewImpl this37 = b6->data;
HXDLIN(  47)										bool _hx_tmp12;
HXDLIN(  47)										if ((i9 >= 0)) {
HXLINE(  47)											_hx_tmp12 = (i9 < (this37->byteLength >> 2));
            										}
            										else {
HXLINE(  47)											_hx_tmp12 = false;
            										}
HXDLIN(  47)										if (_hx_tmp12) {
HXLINE(  47)											 ::haxe::io::Bytes _this1 = this37->bytes;
HXDLIN(  47)											int pos1 = ((i9 << 2) + this37->byteOffset);
HXDLIN(  47)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  47)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  47)						_hx_tmp11 = b6;
            					}
            					break;
            					case (int)3: {
HXLINE(  47)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  47)						{
HXLINE(  47)							v3->width = width1;
HXDLIN(  47)							v3->height = height1;
HXDLIN(  47)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  47)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  47)							{
HXLINE(  47)								int _g28 = 0;
HXDLIN(  47)								int _g29 = v3->length;
HXDLIN(  47)								while((_g28 < _g29)){
HXLINE(  47)									_g28 = (_g28 + 1);
HXDLIN(  47)									int i10 = (_g28 - 1);
HXDLIN(  47)									v3->data->__unsafe_set(i10,0);
            								}
            							}
            						}
HXDLIN(  47)						_hx_tmp11 = v3;
            					}
            					break;
            					case (int)4: {
HXLINE(  47)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)						 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN(  47)						{
HXLINE(  47)							b7->width = width1;
HXDLIN(  47)							b7->height = height1;
HXDLIN(  47)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  47)							b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)							{
HXLINE(  47)								int len3 = b7->length;
HXDLIN(  47)								 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN(  47)								if (::hx::IsNull( d1->head )) {
HXLINE(  47)									int _g30 = 0;
HXDLIN(  47)									int _g31 = len3;
HXDLIN(  47)									while((_g30 < _g31)){
HXLINE(  47)										_g30 = (_g30 + 1);
HXDLIN(  47)										int i11 = (_g30 - 1);
HXDLIN(  47)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE(  47)									int _g32 = 0;
HXDLIN(  47)									int _g33 = len3;
HXDLIN(  47)									while((_g32 < _g33)){
HXLINE(  47)										_g32 = (_g32 + 1);
HXDLIN(  47)										int i12 = (_g32 - 1);
HXDLIN(  47)										{
HXLINE(  47)											 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN(  47)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  47)											{
HXLINE(  47)												int _g34 = 0;
HXDLIN(  47)												int _g35 = i12;
HXDLIN(  47)												while((_g34 < _g35)){
HXLINE(  47)													_g34 = (_g34 + 1);
HXDLIN(  47)													int i13 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  47)											if (::hx::IsNull( prev1 )) {
HXLINE(  47)												b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  47)												l1 = null();
            											}
            											else {
HXLINE(  47)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  47)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  47)						_hx_tmp11 = b7;
            					}
            					break;
            				}
HXDLIN(  47)				this36->image = _hx_tmp11;
HXDLIN(  47)				this36->width = width1;
HXDLIN(  47)				this36->height = height1;
HXDLIN(  47)				this36->imageType = ( (int)(imageType1) );
HXDLIN(  47)				 ::pi_xy::ImageStruct nextImage1 = this36;
HXDLIN(  47)				nextImage1->transparent = transparent1;
HXDLIN(  47)				while((_this_min1 < _this_max1)){
HXLINE(  47)					_this_min1 = (_this_min1 + 1);
HXDLIN(  47)					int i14 = (_this_min1 - 1);
HXDLIN(  47)					if ((range_y1 > range_yMax1)) {
HXLINE(  47)						range_y1 = range_yReset1;
HXDLIN(  47)						range_x1 = (range_x1 + 1);
            					}
HXDLIN(  47)					range_y1 = (range_y1 + 1);
HXDLIN(  47)					int i15 = i14;
HXDLIN(  47)					{
HXLINE(  47)						int x8 = range_x1;
HXDLIN(  47)						int y8 = range_y1;
HXDLIN(  47)						int x9 = range_x1;
HXDLIN(  47)						int y9 = (range_yMax1 - range_y1);
HXDLIN(  47)						::Dynamic this38 = this35->image;
HXDLIN(  47)						int index6;
HXDLIN(  47)						if (this35->useVirtualPos) {
HXLINE(  47)							index6 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this35->virtualY) * ( (Float)(this35->width) )) + x9) - this35->virtualX));
            						}
            						else {
HXLINE(  47)							index6 = ::Std_obj::_hx_int(( (Float)(((y9 * this35->width) + x9)) ));
            						}
HXDLIN(  47)						int c5 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN(  47)						int color1;
HXDLIN(  47)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)							color1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            						}
            						else {
HXLINE(  47)							color1 = c5;
            						}
HXDLIN(  47)						int c6 = color1;
HXDLIN(  47)						bool _hx_tmp13;
HXDLIN(  47)						if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  47)							_hx_tmp13 = nextImage1->transparent;
            						}
            						else {
HXLINE(  47)							_hx_tmp13 = false;
            						}
HXDLIN(  47)						if (_hx_tmp13) {
HXLINE(  47)							int location2;
HXDLIN(  47)							if (nextImage1->useVirtualPos) {
HXLINE(  47)								location2 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - nextImage1->virtualY) * ( (Float)(nextImage1->width) )) + x8) - nextImage1->virtualX));
            							}
            							else {
HXLINE(  47)								location2 = ::Std_obj::_hx_int(( (Float)(((y8 * nextImage1->width) + x8)) ));
            							}
HXDLIN(  47)							int this39 = ::iterMagic::Iimg_obj::get(nextImage1->image,location2);
HXDLIN(  47)							int this40;
HXDLIN(  47)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)								this40 = ((((((this39 >> 24) & 255) << 24) | ((this39 & 255) << 16)) | (((this39 >> 8) & 255) << 8)) | ((this39 >> 16) & 255));
            							}
            							else {
HXLINE(  47)								this40 = this39;
            							}
HXDLIN(  47)							Float a12;
HXDLIN(  47)							int this41 = ((this40 >> 24) & 255);
HXDLIN(  47)							if ((this41 == 0)) {
HXLINE(  47)								a12 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								a12 = (( (Float)(this41) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float r12;
HXDLIN(  47)							int this42 = ((this40 >> 16) & 255);
HXDLIN(  47)							if ((this42 == 0)) {
HXLINE(  47)								r12 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								r12 = (( (Float)(this42) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float g12;
HXDLIN(  47)							int this43 = ((this40 >> 8) & 255);
HXDLIN(  47)							if ((this43 == 0)) {
HXLINE(  47)								g12 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								g12 = (( (Float)(this43) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float b13;
HXDLIN(  47)							int this44 = (this40 & 255);
HXDLIN(  47)							if ((this44 == 0)) {
HXLINE(  47)								b13 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								b13 = (( (Float)(this44) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float a22;
HXDLIN(  47)							int this45 = ((color1 >> 24) & 255);
HXDLIN(  47)							if ((this45 == 0)) {
HXLINE(  47)								a22 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								a22 = (( (Float)(this45) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float r22;
HXDLIN(  47)							int this46 = ((color1 >> 16) & 255);
HXDLIN(  47)							if ((this46 == 0)) {
HXLINE(  47)								r22 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								r22 = (( (Float)(this46) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float g22;
HXDLIN(  47)							int this47 = ((color1 >> 8) & 255);
HXDLIN(  47)							if ((this47 == 0)) {
HXLINE(  47)								g22 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								g22 = (( (Float)(this47) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float b23;
HXDLIN(  47)							int this48 = (color1 & 255);
HXDLIN(  47)							if ((this48 == 0)) {
HXLINE(  47)								b23 = ((Float)0.);
            							}
            							else {
HXLINE(  47)								b23 = (( (Float)(this48) ) / ( (Float)(255) ));
            							}
HXDLIN(  47)							Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  47)							int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  47)							int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  47)							int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  47)							int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  47)							int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN(  47)							{
HXLINE(  47)								int _hx_tmp14;
HXDLIN(  47)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)									_hx_tmp14 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            								}
            								else {
HXLINE(  47)									_hx_tmp14 = blended2;
            								}
HXDLIN(  47)								::iterMagic::Iimg_obj::set(nextImage1->image,location2,_hx_tmp14);
            							}
            						}
            						else {
HXLINE(  47)							::Dynamic this49 = nextImage1->image;
HXDLIN(  47)							int index7;
HXDLIN(  47)							if (nextImage1->useVirtualPos) {
HXLINE(  47)								index7 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - nextImage1->virtualY) * ( (Float)(nextImage1->width) )) + x8) - nextImage1->virtualX));
            							}
            							else {
HXLINE(  47)								index7 = ::Std_obj::_hx_int(( (Float)(((y8 * nextImage1->width) + x8)) ));
            							}
HXDLIN(  47)							int _hx_tmp15;
HXDLIN(  47)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)								_hx_tmp15 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            							}
            							else {
HXLINE(  47)								_hx_tmp15 = c6;
            							}
HXDLIN(  47)							::iterMagic::Iimg_obj::set(this49,index7,_hx_tmp15);
            						}
            					}
            				}
HXDLIN(  47)				 ::pi_xy::ImageStruct v4;
HXDLIN(  47)				if (inPlace) {
HXLINE(  47)					{
HXLINE(  47)						int x10 = ::Std_obj::_hx_int(x);
HXDLIN(  47)						int y10 = ::Std_obj::_hx_int(y);
HXDLIN(  47)						bool forceClear1 = false;
HXDLIN(  47)						{
HXLINE(  47)							int _g36 = 0;
HXDLIN(  47)							int _g37 = nextImage1->height;
HXDLIN(  47)							while((_g36 < _g37)){
HXLINE(  47)								_g36 = (_g36 + 1);
HXDLIN(  47)								int dy1 = (_g36 - 1);
HXDLIN(  47)								{
HXLINE(  47)									int _g38 = 0;
HXDLIN(  47)									int _g39 = nextImage1->width;
HXDLIN(  47)									while((_g38 < _g39)){
HXLINE(  47)										_g38 = (_g38 + 1);
HXDLIN(  47)										int dx1 = (_g38 - 1);
HXDLIN(  47)										::Dynamic this50 = nextImage1->image;
HXDLIN(  47)										int index8;
HXDLIN(  47)										if (nextImage1->useVirtualPos) {
HXLINE(  47)											index8 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - nextImage1->virtualY) * ( (Float)(nextImage1->width) )) + dx1) - nextImage1->virtualX));
            										}
            										else {
HXLINE(  47)											index8 = ::Std_obj::_hx_int(( (Float)(((dy1 * nextImage1->width) + dx1)) ));
            										}
HXDLIN(  47)										int c7 = ::iterMagic::Iimg_obj::get(this50,index8);
HXDLIN(  47)										int col1;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											col1 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											col1 = c7;
            										}
HXDLIN(  47)										bool v5;
HXDLIN(  47)										if (nextImage1->useMask) {
HXLINE(  47)											v5 = ::hx::IsNotNull( nextImage1->mask );
            										}
            										else {
HXLINE(  47)											v5 = false;
            										}
HXDLIN(  47)										if (v5) {
HXLINE(  47)											 ::pi_xy::ImageStruct this51 = nextImage1->mask;
HXDLIN(  47)											::Dynamic this52 = this51->image;
HXDLIN(  47)											int index9;
HXDLIN(  47)											if (this51->useVirtualPos) {
HXLINE(  47)												index9 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this51->virtualY) * ( (Float)(this51->width) )) + dx1) - this51->virtualX));
            											}
            											else {
HXLINE(  47)												index9 = ::Std_obj::_hx_int(( (Float)(((dy1 * this51->width) + dx1)) ));
            											}
HXDLIN(  47)											int c8 = ::iterMagic::Iimg_obj::get(this52,index9);
HXDLIN(  47)											int v6;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												v6 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												v6 = c8;
            											}
HXDLIN(  47)											int maskPixel1 = v6;
HXDLIN(  47)											int this53 = col1;
HXDLIN(  47)											if ((maskPixel1 == 0)) {
HXLINE(  47)												col1 = this53;
            											}
            											else {
HXLINE(  47)												Float m01;
HXDLIN(  47)												int this54 = ((maskPixel1 >> 24) & 255);
HXDLIN(  47)												if ((this54 == 0)) {
HXLINE(  47)													m01 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													m01 = (( (Float)(this54) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float m11;
HXDLIN(  47)												int this55 = ((maskPixel1 >> 16) & 255);
HXDLIN(  47)												if ((this55 == 0)) {
HXLINE(  47)													m11 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													m11 = (( (Float)(this55) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float m21;
HXDLIN(  47)												int this56 = ((maskPixel1 >> 8) & 255);
HXDLIN(  47)												if ((this56 == 0)) {
HXLINE(  47)													m21 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													m21 = (( (Float)(this56) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float m31;
HXDLIN(  47)												int this57 = (maskPixel1 & 255);
HXDLIN(  47)												if ((this57 == 0)) {
HXLINE(  47)													m31 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													m31 = (( (Float)(this57) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this53 >> 24) & 255)) )));
HXDLIN(  47)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this53 >> 16) & 255)) )));
HXDLIN(  47)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this53 >> 8) & 255)) )));
HXDLIN(  47)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this53 & 255)) )));
HXDLIN(  47)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  47)										if ((col1 != 0)) {
HXLINE(  47)											int x11 = (x10 + dx1);
HXDLIN(  47)											int y11 = (y10 + dy1);
HXDLIN(  47)											int c9 = col1;
HXDLIN(  47)											bool v7;
HXDLIN(  47)											if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  47)												v7 = this35->transparent;
            											}
            											else {
HXLINE(  47)												v7 = false;
            											}
HXDLIN(  47)											if (v7) {
HXLINE(  47)												int location3;
HXDLIN(  47)												if (this35->useVirtualPos) {
HXLINE(  47)													location3 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - this35->virtualY) * ( (Float)(this35->width) )) + x11) - this35->virtualX));
            												}
            												else {
HXLINE(  47)													location3 = ::Std_obj::_hx_int(( (Float)(((y11 * this35->width) + x11)) ));
            												}
HXDLIN(  47)												int this58 = ::iterMagic::Iimg_obj::get(this35->image,location3);
HXDLIN(  47)												int this59;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													this59 = ((((((this58 >> 24) & 255) << 24) | ((this58 & 255) << 16)) | (((this58 >> 8) & 255) << 8)) | ((this58 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													this59 = this58;
            												}
HXDLIN(  47)												Float a13;
HXDLIN(  47)												int this60 = ((this59 >> 24) & 255);
HXDLIN(  47)												if ((this60 == 0)) {
HXLINE(  47)													a13 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													a13 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float r13;
HXDLIN(  47)												int this61 = ((this59 >> 16) & 255);
HXDLIN(  47)												if ((this61 == 0)) {
HXLINE(  47)													r13 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													r13 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float g13;
HXDLIN(  47)												int this62 = ((this59 >> 8) & 255);
HXDLIN(  47)												if ((this62 == 0)) {
HXLINE(  47)													g13 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													g13 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float b14;
HXDLIN(  47)												int this63 = (this59 & 255);
HXDLIN(  47)												if ((this63 == 0)) {
HXLINE(  47)													b14 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													b14 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float a23;
HXDLIN(  47)												int this64 = ((col1 >> 24) & 255);
HXDLIN(  47)												if ((this64 == 0)) {
HXLINE(  47)													a23 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													a23 = (( (Float)(this64) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float r23;
HXDLIN(  47)												int this65 = ((col1 >> 16) & 255);
HXDLIN(  47)												if ((this65 == 0)) {
HXLINE(  47)													r23 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													r23 = (( (Float)(this65) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float g23;
HXDLIN(  47)												int this66 = ((col1 >> 8) & 255);
HXDLIN(  47)												if ((this66 == 0)) {
HXLINE(  47)													g23 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													g23 = (( (Float)(this66) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float b24;
HXDLIN(  47)												int this67 = (col1 & 255);
HXDLIN(  47)												if ((this67 == 0)) {
HXLINE(  47)													b24 = ((Float)0.);
            												}
            												else {
HXLINE(  47)													b24 = (( (Float)(this67) ) / ( (Float)(255) ));
            												}
HXDLIN(  47)												Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  47)												int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  47)												int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  47)												int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  47)												int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  47)												int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  47)												{
HXLINE(  47)													int v8;
HXDLIN(  47)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)														v8 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE(  47)														v8 = blended3;
            													}
HXDLIN(  47)													::iterMagic::Iimg_obj::set(this35->image,location3,v8);
            												}
            											}
            											else {
HXLINE(  47)												::Dynamic this68 = this35->image;
HXDLIN(  47)												int index10;
HXDLIN(  47)												if (this35->useVirtualPos) {
HXLINE(  47)													index10 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - this35->virtualY) * ( (Float)(this35->width) )) + x11) - this35->virtualX));
            												}
            												else {
HXLINE(  47)													index10 = ::Std_obj::_hx_int(( (Float)(((y11 * this35->width) + x11)) ));
            												}
HXDLIN(  47)												int v9;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													v9 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													v9 = c9;
            												}
HXDLIN(  47)												::iterMagic::Iimg_obj::set(this68,index10,v9);
            											}
            										}
            										else {
HXLINE(  47)											if (forceClear1) {
HXLINE(  47)												::Dynamic this69 = this35->image;
HXDLIN(  47)												int x12 = (x10 + dx1);
HXDLIN(  47)												int y12 = (y10 + dy1);
HXDLIN(  47)												int index11;
HXDLIN(  47)												if (this35->useVirtualPos) {
HXLINE(  47)													index11 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - this35->virtualY) * ( (Float)(this35->width) )) + x12) - this35->virtualX));
            												}
            												else {
HXLINE(  47)													index11 = ::Std_obj::_hx_int(( (Float)(((y12 * this35->width) + x12)) ));
            												}
HXDLIN(  47)												::iterMagic::Iimg_obj::set(this69,index11,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  47)					bool v10;
HXDLIN(  47)					if (::hx::IsNotNull( this35->mask )) {
HXLINE(  47)						v10 = includeMask;
            					}
            					else {
HXLINE(  47)						v10 = false;
            					}
HXDLIN(  47)					if (v10) {
HXLINE(  47)						 ::pi_xy::ImageStruct this70 = this35->mask;
HXDLIN(  47)						Float w4 = ( (Float)(this35->width) );
HXDLIN(  47)						Float h2 = ( (Float)(this35->height) );
HXDLIN(  47)						bool transparent2 = this35->mask->transparent;
HXDLIN(  47)						Float r_x2 = x;
HXDLIN(  47)						Float r_y2 = y;
HXDLIN(  47)						Float r_w2 = w4;
HXDLIN(  47)						Float r_h2 = h2;
HXDLIN(  47)						int xmax2 = ::Std_obj::_hx_int(((r_x2 + r_w2) + 1));
HXDLIN(  47)						int ymax2 = ::Std_obj::_hx_int(((r_y2 + r_h2) + 1));
HXDLIN(  47)						int ii_min4 = ::Std_obj::_hx_int(r_x2);
HXDLIN(  47)						int ii_max4 = xmax2;
HXDLIN(  47)						int xRange__start2 = ii_min4;
HXDLIN(  47)						int xRange__max2 = ii_max4;
HXDLIN(  47)						int ii_min5 = ::Std_obj::_hx_int(r_y2);
HXDLIN(  47)						int ii_max5 = ymax2;
HXDLIN(  47)						int yRange__start2 = ii_min5;
HXDLIN(  47)						int yRange__max2 = ii_max5;
HXDLIN(  47)						int range_x2 = xRange__start2;
HXDLIN(  47)						int range_y2 = (yRange__start2 - 1);
HXDLIN(  47)						int range_xReset2 = range_x2;
HXDLIN(  47)						int range_yReset2 = range_y2;
HXDLIN(  47)						int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  47)						int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  47)						int _this_min2 = 0;
HXDLIN(  47)						int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  47)						int width2 = ::Std_obj::_hx_int(w4);
HXDLIN(  47)						int height2 = ::Std_obj::_hx_int(h2);
HXDLIN(  47)						 ::Dynamic imageType2 = null();
HXDLIN(  47)						 ::pi_xy::ImageStruct this71 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)						if (::hx::IsNull( imageType2 )) {
HXLINE(  54)							imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE(  47)						::Dynamic v11;
HXDLIN(  47)						switch((int)(( (int)(imageType2) ))){
            							case (int)0: {
HXLINE(  47)								 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::BytesImg b10 = byt2;
HXDLIN(  47)								{
HXLINE(  47)									b10->width = width2;
HXDLIN(  47)									b10->height = height2;
HXDLIN(  47)									b10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  47)									b10->data = ::haxe::io::Bytes_obj::alloc((b10->length * 4));
HXDLIN(  47)									{
HXLINE(  47)										int len4 = b10->length;
HXDLIN(  47)										int w5 = 0;
HXDLIN(  47)										{
HXLINE(  47)											int _g40 = 0;
HXDLIN(  47)											int _g41 = b10->height;
HXDLIN(  47)											while((_g40 < _g41)){
HXLINE(  47)												_g40 = (_g40 + 1);
HXDLIN(  47)												int y13 = (_g40 - 1);
HXDLIN(  47)												{
HXLINE(  47)													int _g42 = 0;
HXDLIN(  47)													int _g43 = b10->width;
HXDLIN(  47)													while((_g42 < _g43)){
HXLINE(  47)														_g42 = (_g42 + 1);
HXDLIN(  47)														int x13 = (_g42 - 1);
HXDLIN(  47)														{
HXLINE(  47)															w5 = (w5 + 1);
HXDLIN(  47)															b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN(  47)														{
HXLINE(  47)															w5 = (w5 + 1);
HXDLIN(  47)															b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN(  47)														{
HXLINE(  47)															w5 = (w5 + 1);
HXDLIN(  47)															b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN(  47)														{
HXLINE(  47)															w5 = (w5 + 1);
HXDLIN(  47)															b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  47)								v11 = b10;
            							}
            							break;
            							case (int)1: {
HXLINE(  47)								 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::ArrIntImg a9 = arrI2;
HXDLIN(  47)								{
HXLINE(  47)									a9->width = width2;
HXDLIN(  47)									a9->height = height2;
HXDLIN(  47)									a9->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)									a9->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  47)									{
HXLINE(  47)										int _g44 = 0;
HXDLIN(  47)										int _g45 = a9->length;
HXDLIN(  47)										while((_g44 < _g45)){
HXLINE(  47)											_g44 = (_g44 + 1);
HXDLIN(  47)											int i16 = (_g44 - 1);
HXDLIN(  47)											a9->data[i16] = 0;
            										}
            									}
            								}
HXDLIN(  47)								v11 = a9;
            							}
            							break;
            							case (int)2: {
HXLINE(  47)								 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::U32ArrImg b15 = u32a2;
HXDLIN(  47)								{
HXLINE(  47)									b15->width = width2;
HXDLIN(  47)									b15->height = height2;
HXDLIN(  47)									b15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  47)									int size2 = (b15->length * 4);
HXDLIN(  47)									b15->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  47)									{
HXLINE(  47)										int _g46 = 0;
HXDLIN(  47)										int _g47 = b15->length;
HXDLIN(  47)										while((_g46 < _g47)){
HXLINE(  47)											_g46 = (_g46 + 1);
HXDLIN(  47)											int i17 = (_g46 - 1);
HXDLIN(  47)											{
HXLINE(  47)												 ::haxe::io::ArrayBufferViewImpl this72 = b15->data;
HXDLIN(  47)												bool v12;
HXDLIN(  47)												if ((i17 >= 0)) {
HXLINE(  47)													v12 = (i17 < (this72->byteLength >> 2));
            												}
            												else {
HXLINE(  47)													v12 = false;
            												}
HXDLIN(  47)												if (v12) {
HXLINE(  47)													 ::haxe::io::Bytes _this2 = this72->bytes;
HXDLIN(  47)													int pos2 = ((i17 << 2) + this72->byteOffset);
HXDLIN(  47)													_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  47)													_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)													_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)													_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN(  47)								v11 = b15;
            							}
            							break;
            							case (int)3: {
HXLINE(  47)								 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::VecIntImg v13 = vec2;
HXDLIN(  47)								{
HXLINE(  47)									v13->width = width2;
HXDLIN(  47)									v13->height = height2;
HXDLIN(  47)									v13->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  47)									v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  47)									{
HXLINE(  47)										int _g48 = 0;
HXDLIN(  47)										int _g49 = v13->length;
HXDLIN(  47)										while((_g48 < _g49)){
HXLINE(  47)											_g48 = (_g48 + 1);
HXDLIN(  47)											int i18 = (_g48 - 1);
HXDLIN(  47)											v13->data->__unsafe_set(i18,0);
            										}
            									}
            								}
HXDLIN(  47)								v11 = v13;
            							}
            							break;
            							case (int)4: {
HXLINE(  47)								 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::StackIntImg b16 = sInt2;
HXDLIN(  47)								{
HXLINE(  47)									b16->width = width2;
HXDLIN(  47)									b16->height = height2;
HXDLIN(  47)									b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  47)									b16->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)									{
HXLINE(  47)										int len5 = b16->length;
HXDLIN(  47)										 ::haxe::ds::GenericStack_Int d2 = b16->data;
HXDLIN(  47)										if (::hx::IsNull( d2->head )) {
HXLINE(  47)											int _g50 = 0;
HXDLIN(  47)											int _g51 = len5;
HXDLIN(  47)											while((_g50 < _g51)){
HXLINE(  47)												_g50 = (_g50 + 1);
HXDLIN(  47)												int i19 = (_g50 - 1);
HXDLIN(  47)												d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            											}
            										}
            										else {
HXLINE(  47)											int _g52 = 0;
HXDLIN(  47)											int _g53 = len5;
HXDLIN(  47)											while((_g52 < _g53)){
HXLINE(  47)												_g52 = (_g52 + 1);
HXDLIN(  47)												int i20 = (_g52 - 1);
HXDLIN(  47)												{
HXLINE(  47)													 ::haxe::ds::GenericCell_Int l2 = b16->data->head;
HXDLIN(  47)													 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  47)													{
HXLINE(  47)														int _g54 = 0;
HXDLIN(  47)														int _g55 = i20;
HXDLIN(  47)														while((_g54 < _g55)){
HXLINE(  47)															_g54 = (_g54 + 1);
HXDLIN(  47)															int i21 = (_g54 - 1);
HXLINE( 345)															prev2 = l2;
HXLINE( 346)															l2 = l2->next;
            														}
            													}
HXLINE(  47)													if (::hx::IsNull( prev2 )) {
HXLINE(  47)														b16->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  47)														l2 = null();
            													}
            													else {
HXLINE(  47)														prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  47)														l2 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  47)								v11 = b16;
            							}
            							break;
            						}
HXDLIN(  47)						this71->image = v11;
HXDLIN(  47)						this71->width = width2;
HXDLIN(  47)						this71->height = height2;
HXDLIN(  47)						this71->imageType = ( (int)(imageType2) );
HXDLIN(  47)						 ::pi_xy::ImageStruct nextImage2 = this71;
HXDLIN(  47)						nextImage2->transparent = transparent2;
HXDLIN(  47)						while((_this_min2 < _this_max2)){
HXLINE(  47)							_this_min2 = (_this_min2 + 1);
HXDLIN(  47)							int i22 = (_this_min2 - 1);
HXDLIN(  47)							if ((range_y2 > range_yMax2)) {
HXLINE(  47)								range_y2 = range_yReset2;
HXDLIN(  47)								range_x2 = (range_x2 + 1);
            							}
HXDLIN(  47)							range_y2 = (range_y2 + 1);
HXDLIN(  47)							int i23 = i22;
HXDLIN(  47)							{
HXLINE(  47)								int x14 = range_x2;
HXDLIN(  47)								int y14 = range_y2;
HXDLIN(  47)								int x15 = range_x2;
HXDLIN(  47)								int y15 = (range_yMax2 - range_y2);
HXDLIN(  47)								::Dynamic this73 = this70->image;
HXDLIN(  47)								int index12;
HXDLIN(  47)								if (this70->useVirtualPos) {
HXLINE(  47)									index12 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - this70->virtualY) * ( (Float)(this70->width) )) + x15) - this70->virtualX));
            								}
            								else {
HXLINE(  47)									index12 = ::Std_obj::_hx_int(( (Float)(((y15 * this70->width) + x15)) ));
            								}
HXDLIN(  47)								int c10 = ::iterMagic::Iimg_obj::get(this73,index12);
HXDLIN(  47)								int color2;
HXDLIN(  47)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)									color2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            								}
            								else {
HXLINE(  47)									color2 = c10;
            								}
HXDLIN(  47)								int c11 = color2;
HXDLIN(  47)								bool v14;
HXDLIN(  47)								if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  47)									v14 = nextImage2->transparent;
            								}
            								else {
HXLINE(  47)									v14 = false;
            								}
HXDLIN(  47)								if (v14) {
HXLINE(  47)									int location4;
HXDLIN(  47)									if (nextImage2->useVirtualPos) {
HXLINE(  47)										location4 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - nextImage2->virtualY) * ( (Float)(nextImage2->width) )) + x14) - nextImage2->virtualX));
            									}
            									else {
HXLINE(  47)										location4 = ::Std_obj::_hx_int(( (Float)(((y14 * nextImage2->width) + x14)) ));
            									}
HXDLIN(  47)									int this74 = ::iterMagic::Iimg_obj::get(nextImage2->image,location4);
HXDLIN(  47)									int this75;
HXDLIN(  47)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)										this75 = ((((((this74 >> 24) & 255) << 24) | ((this74 & 255) << 16)) | (((this74 >> 8) & 255) << 8)) | ((this74 >> 16) & 255));
            									}
            									else {
HXLINE(  47)										this75 = this74;
            									}
HXDLIN(  47)									Float a14;
HXDLIN(  47)									int this76 = ((this75 >> 24) & 255);
HXDLIN(  47)									if ((this76 == 0)) {
HXLINE(  47)										a14 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										a14 = (( (Float)(this76) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float r14;
HXDLIN(  47)									int this77 = ((this75 >> 16) & 255);
HXDLIN(  47)									if ((this77 == 0)) {
HXLINE(  47)										r14 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										r14 = (( (Float)(this77) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float g14;
HXDLIN(  47)									int this78 = ((this75 >> 8) & 255);
HXDLIN(  47)									if ((this78 == 0)) {
HXLINE(  47)										g14 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										g14 = (( (Float)(this78) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float b17;
HXDLIN(  47)									int this79 = (this75 & 255);
HXDLIN(  47)									if ((this79 == 0)) {
HXLINE(  47)										b17 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										b17 = (( (Float)(this79) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float a24;
HXDLIN(  47)									int this80 = ((color2 >> 24) & 255);
HXDLIN(  47)									if ((this80 == 0)) {
HXLINE(  47)										a24 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										a24 = (( (Float)(this80) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float r24;
HXDLIN(  47)									int this81 = ((color2 >> 16) & 255);
HXDLIN(  47)									if ((this81 == 0)) {
HXLINE(  47)										r24 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										r24 = (( (Float)(this81) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float g24;
HXDLIN(  47)									int this82 = ((color2 >> 8) & 255);
HXDLIN(  47)									if ((this82 == 0)) {
HXLINE(  47)										g24 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										g24 = (( (Float)(this82) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float b25;
HXDLIN(  47)									int this83 = (color2 & 255);
HXDLIN(  47)									if ((this83 == 0)) {
HXLINE(  47)										b25 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										b25 = (( (Float)(this83) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  47)									int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  47)									int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  47)									int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a34) + (b25 * a24))));
HXDLIN(  47)									int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  47)									int blended4 = ((((a10 << 24) | (r6 << 16)) | (g6 << 8)) | b18);
HXDLIN(  47)									{
HXLINE(  47)										int v15;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											v15 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											v15 = blended4;
            										}
HXDLIN(  47)										::iterMagic::Iimg_obj::set(nextImage2->image,location4,v15);
            									}
            								}
            								else {
HXLINE(  47)									::Dynamic this84 = nextImage2->image;
HXDLIN(  47)									int index13;
HXDLIN(  47)									if (nextImage2->useVirtualPos) {
HXLINE(  47)										index13 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - nextImage2->virtualY) * ( (Float)(nextImage2->width) )) + x14) - nextImage2->virtualX));
            									}
            									else {
HXLINE(  47)										index13 = ::Std_obj::_hx_int(( (Float)(((y14 * nextImage2->width) + x14)) ));
            									}
HXDLIN(  47)									int v16;
HXDLIN(  47)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)										v16 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            									}
            									else {
HXLINE(  47)										v16 = c11;
            									}
HXDLIN(  47)									::iterMagic::Iimg_obj::set(this84,index13,v16);
            								}
            							}
            						}
HXDLIN(  47)						 ::pi_xy::ImageStruct v17;
HXDLIN(  47)						if (inPlace) {
HXLINE(  47)							{
HXLINE(  47)								int x16 = ::Std_obj::_hx_int(x);
HXDLIN(  47)								int y16 = ::Std_obj::_hx_int(y);
HXDLIN(  47)								bool forceClear2 = false;
HXDLIN(  47)								{
HXLINE(  47)									int _g56 = 0;
HXDLIN(  47)									int _g57 = nextImage2->height;
HXDLIN(  47)									while((_g56 < _g57)){
HXLINE(  47)										_g56 = (_g56 + 1);
HXDLIN(  47)										int dy2 = (_g56 - 1);
HXDLIN(  47)										{
HXLINE(  47)											int _g58 = 0;
HXDLIN(  47)											int _g59 = nextImage2->width;
HXDLIN(  47)											while((_g58 < _g59)){
HXLINE(  47)												_g58 = (_g58 + 1);
HXDLIN(  47)												int dx2 = (_g58 - 1);
HXDLIN(  47)												::Dynamic this85 = nextImage2->image;
HXDLIN(  47)												int index14;
HXDLIN(  47)												if (nextImage2->useVirtualPos) {
HXLINE(  47)													index14 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - nextImage2->virtualY) * ( (Float)(nextImage2->width) )) + dx2) - nextImage2->virtualX));
            												}
            												else {
HXLINE(  47)													index14 = ::Std_obj::_hx_int(( (Float)(((dy2 * nextImage2->width) + dx2)) ));
            												}
HXDLIN(  47)												int c12 = ::iterMagic::Iimg_obj::get(this85,index14);
HXDLIN(  47)												int col2;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													col2 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													col2 = c12;
            												}
HXDLIN(  47)												bool v18;
HXDLIN(  47)												if (nextImage2->useMask) {
HXLINE(  47)													v18 = ::hx::IsNotNull( nextImage2->mask );
            												}
            												else {
HXLINE(  47)													v18 = false;
            												}
HXDLIN(  47)												if (v18) {
HXLINE(  47)													 ::pi_xy::ImageStruct this86 = nextImage2->mask;
HXDLIN(  47)													::Dynamic this87 = this86->image;
HXDLIN(  47)													int index15;
HXDLIN(  47)													if (this86->useVirtualPos) {
HXLINE(  47)														index15 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this86->virtualY) * ( (Float)(this86->width) )) + dx2) - this86->virtualX));
            													}
            													else {
HXLINE(  47)														index15 = ::Std_obj::_hx_int(( (Float)(((dy2 * this86->width) + dx2)) ));
            													}
HXDLIN(  47)													int c13 = ::iterMagic::Iimg_obj::get(this87,index15);
HXDLIN(  47)													int v19;
HXDLIN(  47)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)														v19 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            													}
            													else {
HXLINE(  47)														v19 = c13;
            													}
HXDLIN(  47)													int maskPixel2 = v19;
HXDLIN(  47)													int this88 = col2;
HXDLIN(  47)													if ((maskPixel2 == 0)) {
HXLINE(  47)														col2 = this88;
            													}
            													else {
HXLINE(  47)														Float m02;
HXDLIN(  47)														int this89 = ((maskPixel2 >> 24) & 255);
HXDLIN(  47)														if ((this89 == 0)) {
HXLINE(  47)															m02 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m02 = (( (Float)(this89) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float m12;
HXDLIN(  47)														int this90 = ((maskPixel2 >> 16) & 255);
HXDLIN(  47)														if ((this90 == 0)) {
HXLINE(  47)															m12 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m12 = (( (Float)(this90) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float m22;
HXDLIN(  47)														int this91 = ((maskPixel2 >> 8) & 255);
HXDLIN(  47)														if ((this91 == 0)) {
HXLINE(  47)															m22 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m22 = (( (Float)(this91) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float m32;
HXDLIN(  47)														int this92 = (maskPixel2 & 255);
HXDLIN(  47)														if ((this92 == 0)) {
HXLINE(  47)															m32 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m32 = (( (Float)(this92) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this88 >> 24) & 255)) )));
HXDLIN(  47)														int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this88 >> 16) & 255)) )));
HXDLIN(  47)														int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this88 >> 8) & 255)) )));
HXDLIN(  47)														int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this88 & 255)) )));
HXDLIN(  47)														col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  47)												if ((col2 != 0)) {
HXLINE(  47)													int x17 = (x16 + dx2);
HXDLIN(  47)													int y17 = (y16 + dy2);
HXDLIN(  47)													int c14 = col2;
HXDLIN(  47)													bool v20;
HXDLIN(  47)													if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  47)														v20 = this70->transparent;
            													}
            													else {
HXLINE(  47)														v20 = false;
            													}
HXDLIN(  47)													if (v20) {
HXLINE(  47)														int location5;
HXDLIN(  47)														if (this70->useVirtualPos) {
HXLINE(  47)															location5 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this70->virtualY) * ( (Float)(this70->width) )) + x17) - this70->virtualX));
            														}
            														else {
HXLINE(  47)															location5 = ::Std_obj::_hx_int(( (Float)(((y17 * this70->width) + x17)) ));
            														}
HXDLIN(  47)														int this93 = ::iterMagic::Iimg_obj::get(this70->image,location5);
HXDLIN(  47)														int this94;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															this94 = ((((((this93 >> 24) & 255) << 24) | ((this93 & 255) << 16)) | (((this93 >> 8) & 255) << 8)) | ((this93 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															this94 = this93;
            														}
HXDLIN(  47)														Float a15;
HXDLIN(  47)														int this95 = ((this94 >> 24) & 255);
HXDLIN(  47)														if ((this95 == 0)) {
HXLINE(  47)															a15 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															a15 = (( (Float)(this95) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float r15;
HXDLIN(  47)														int this96 = ((this94 >> 16) & 255);
HXDLIN(  47)														if ((this96 == 0)) {
HXLINE(  47)															r15 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															r15 = (( (Float)(this96) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float g15;
HXDLIN(  47)														int this97 = ((this94 >> 8) & 255);
HXDLIN(  47)														if ((this97 == 0)) {
HXLINE(  47)															g15 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															g15 = (( (Float)(this97) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float b19;
HXDLIN(  47)														int this98 = (this94 & 255);
HXDLIN(  47)														if ((this98 == 0)) {
HXLINE(  47)															b19 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															b19 = (( (Float)(this98) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float a25;
HXDLIN(  47)														int this99 = ((col2 >> 24) & 255);
HXDLIN(  47)														if ((this99 == 0)) {
HXLINE(  47)															a25 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															a25 = (( (Float)(this99) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float r25;
HXDLIN(  47)														int this100 = ((col2 >> 16) & 255);
HXDLIN(  47)														if ((this100 == 0)) {
HXLINE(  47)															r25 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															r25 = (( (Float)(this100) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float g25;
HXDLIN(  47)														int this101 = ((col2 >> 8) & 255);
HXDLIN(  47)														if ((this101 == 0)) {
HXLINE(  47)															g25 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															g25 = (( (Float)(this101) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float b26;
HXDLIN(  47)														int this102 = (col2 & 255);
HXDLIN(  47)														if ((this102 == 0)) {
HXLINE(  47)															b26 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															b26 = (( (Float)(this102) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  47)														int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  47)														int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  47)														int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a35) + (b26 * a25))));
HXDLIN(  47)														int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  47)														int blended5 = ((((a16 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN(  47)														{
HXLINE(  47)															int v21;
HXDLIN(  47)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																v21 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            															}
            															else {
HXLINE(  47)																v21 = blended5;
            															}
HXDLIN(  47)															::iterMagic::Iimg_obj::set(this70->image,location5,v21);
            														}
            													}
            													else {
HXLINE(  47)														::Dynamic this103 = this70->image;
HXDLIN(  47)														int index16;
HXDLIN(  47)														if (this70->useVirtualPos) {
HXLINE(  47)															index16 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this70->virtualY) * ( (Float)(this70->width) )) + x17) - this70->virtualX));
            														}
            														else {
HXLINE(  47)															index16 = ::Std_obj::_hx_int(( (Float)(((y17 * this70->width) + x17)) ));
            														}
HXDLIN(  47)														int v22;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															v22 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															v22 = c14;
            														}
HXDLIN(  47)														::iterMagic::Iimg_obj::set(this103,index16,v22);
            													}
            												}
            												else {
HXLINE(  47)													if (forceClear2) {
HXLINE(  47)														::Dynamic this104 = this70->image;
HXDLIN(  47)														int x18 = (x16 + dx2);
HXDLIN(  47)														int y18 = (y16 + dy2);
HXDLIN(  47)														int index17;
HXDLIN(  47)														if (this70->useVirtualPos) {
HXLINE(  47)															index17 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - this70->virtualY) * ( (Float)(this70->width) )) + x18) - this70->virtualX));
            														}
            														else {
HXLINE(  47)															index17 = ::Std_obj::_hx_int(( (Float)(((y18 * this70->width) + x18)) ));
            														}
HXDLIN(  47)														::iterMagic::Iimg_obj::set(this104,index17,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  47)							bool v23;
HXDLIN(  47)							if (::hx::IsNotNull( this70->mask )) {
HXLINE(  47)								v23 = includeMask;
            							}
            							else {
HXLINE(  47)								v23 = false;
            							}
HXDLIN(  47)							if (v23) {
HXLINE(  47)								 ::pi_xy::ImageStruct this105 = this70->mask;
HXDLIN(  47)								Float w6 = ( (Float)(this70->width) );
HXDLIN(  47)								Float h3 = ( (Float)(this70->height) );
HXDLIN(  47)								bool transparent3 = this70->mask->transparent;
HXDLIN(  47)								Float r_x3 = x;
HXDLIN(  47)								Float r_y3 = y;
HXDLIN(  47)								Float r_w3 = w6;
HXDLIN(  47)								Float r_h3 = h3;
HXDLIN(  47)								int xmax3 = ::Std_obj::_hx_int(((r_x3 + r_w3) + 1));
HXDLIN(  47)								int ymax3 = ::Std_obj::_hx_int(((r_y3 + r_h3) + 1));
HXDLIN(  47)								int ii_min6 = ::Std_obj::_hx_int(r_x3);
HXDLIN(  47)								int ii_max6 = xmax3;
HXDLIN(  47)								int xRange__start3 = ii_min6;
HXDLIN(  47)								int xRange__max3 = ii_max6;
HXDLIN(  47)								int ii_min7 = ::Std_obj::_hx_int(r_y3);
HXDLIN(  47)								int ii_max7 = ymax3;
HXDLIN(  47)								int yRange__start3 = ii_min7;
HXDLIN(  47)								int yRange__max3 = ii_max7;
HXDLIN(  47)								int range_x3 = xRange__start3;
HXDLIN(  47)								int range_y3 = (yRange__start3 - 1);
HXDLIN(  47)								int range_xReset3 = range_x3;
HXDLIN(  47)								int range_yReset3 = range_y3;
HXDLIN(  47)								int range_xMax3 = (xRange__max3 - 2);
HXDLIN(  47)								int range_yMax3 = (yRange__max3 - 2);
HXDLIN(  47)								int _this_min3 = 0;
HXDLIN(  47)								int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN(  47)								int width3 = ::Std_obj::_hx_int(w6);
HXDLIN(  47)								int height3 = ::Std_obj::_hx_int(h3);
HXDLIN(  47)								 ::Dynamic imageType3 = null();
HXDLIN(  47)								 ::pi_xy::ImageStruct this106 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)								if (::hx::IsNull( imageType3 )) {
HXLINE(  54)									imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE(  47)								::Dynamic v24;
HXDLIN(  47)								switch((int)(( (int)(imageType3) ))){
            									case (int)0: {
HXLINE(  47)										 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::BytesImg b27 = byt3;
HXDLIN(  47)										{
HXLINE(  47)											b27->width = width3;
HXDLIN(  47)											b27->height = height3;
HXDLIN(  47)											b27->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  47)											b27->data = ::haxe::io::Bytes_obj::alloc((b27->length * 4));
HXDLIN(  47)											{
HXLINE(  47)												int len6 = b27->length;
HXDLIN(  47)												int w7 = 0;
HXDLIN(  47)												{
HXLINE(  47)													int _g60 = 0;
HXDLIN(  47)													int _g61 = b27->height;
HXDLIN(  47)													while((_g60 < _g61)){
HXLINE(  47)														_g60 = (_g60 + 1);
HXDLIN(  47)														int y19 = (_g60 - 1);
HXDLIN(  47)														{
HXLINE(  47)															int _g62 = 0;
HXDLIN(  47)															int _g63 = b27->width;
HXDLIN(  47)															while((_g62 < _g63)){
HXLINE(  47)																_g62 = (_g62 + 1);
HXDLIN(  47)																int x19 = (_g62 - 1);
HXDLIN(  47)																{
HXLINE(  47)																	w7 = (w7 + 1);
HXDLIN(  47)																	b27->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w7 = (w7 + 1);
HXDLIN(  47)																	b27->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w7 = (w7 + 1);
HXDLIN(  47)																	b27->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w7 = (w7 + 1);
HXDLIN(  47)																	b27->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v24 = b27;
            									}
            									break;
            									case (int)1: {
HXLINE(  47)										 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::ArrIntImg a17 = arrI3;
HXDLIN(  47)										{
HXLINE(  47)											a17->width = width3;
HXDLIN(  47)											a17->height = height3;
HXDLIN(  47)											a17->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)											a17->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  47)											{
HXLINE(  47)												int _g64 = 0;
HXDLIN(  47)												int _g65 = a17->length;
HXDLIN(  47)												while((_g64 < _g65)){
HXLINE(  47)													_g64 = (_g64 + 1);
HXDLIN(  47)													int i24 = (_g64 - 1);
HXDLIN(  47)													a17->data[i24] = 0;
            												}
            											}
            										}
HXDLIN(  47)										v24 = a17;
            									}
            									break;
            									case (int)2: {
HXLINE(  47)										 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::U32ArrImg b28 = u32a3;
HXDLIN(  47)										{
HXLINE(  47)											b28->width = width3;
HXDLIN(  47)											b28->height = height3;
HXDLIN(  47)											b28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  47)											int size3 = (b28->length * 4);
HXDLIN(  47)											b28->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  47)											{
HXLINE(  47)												int _g66 = 0;
HXDLIN(  47)												int _g67 = b28->length;
HXDLIN(  47)												while((_g66 < _g67)){
HXLINE(  47)													_g66 = (_g66 + 1);
HXDLIN(  47)													int i25 = (_g66 - 1);
HXDLIN(  47)													{
HXLINE(  47)														 ::haxe::io::ArrayBufferViewImpl this107 = b28->data;
HXDLIN(  47)														bool v25;
HXDLIN(  47)														if ((i25 >= 0)) {
HXLINE(  47)															v25 = (i25 < (this107->byteLength >> 2));
            														}
            														else {
HXLINE(  47)															v25 = false;
            														}
HXDLIN(  47)														if (v25) {
HXLINE(  47)															 ::haxe::io::Bytes _this3 = this107->bytes;
HXDLIN(  47)															int pos3 = ((i25 << 2) + this107->byteOffset);
HXDLIN(  47)															_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  47)															_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v24 = b28;
            									}
            									break;
            									case (int)3: {
HXLINE(  47)										 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::VecIntImg v26 = vec3;
HXDLIN(  47)										{
HXLINE(  47)											v26->width = width3;
HXDLIN(  47)											v26->height = height3;
HXDLIN(  47)											v26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  47)											v26->data = ::Array_obj< int >::__new(v26->length);
HXDLIN(  47)											{
HXLINE(  47)												int _g68 = 0;
HXDLIN(  47)												int _g69 = v26->length;
HXDLIN(  47)												while((_g68 < _g69)){
HXLINE(  47)													_g68 = (_g68 + 1);
HXDLIN(  47)													int i26 = (_g68 - 1);
HXDLIN(  47)													v26->data->__unsafe_set(i26,0);
            												}
            											}
            										}
HXDLIN(  47)										v24 = v26;
            									}
            									break;
            									case (int)4: {
HXLINE(  47)										 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::StackIntImg b29 = sInt3;
HXDLIN(  47)										{
HXLINE(  47)											b29->width = width3;
HXDLIN(  47)											b29->height = height3;
HXDLIN(  47)											b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  47)											b29->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)											{
HXLINE(  47)												int len7 = b29->length;
HXDLIN(  47)												 ::haxe::ds::GenericStack_Int d3 = b29->data;
HXDLIN(  47)												if (::hx::IsNull( d3->head )) {
HXLINE(  47)													int _g70 = 0;
HXDLIN(  47)													int _g71 = len7;
HXDLIN(  47)													while((_g70 < _g71)){
HXLINE(  47)														_g70 = (_g70 + 1);
HXDLIN(  47)														int i27 = (_g70 - 1);
HXDLIN(  47)														d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            													}
            												}
            												else {
HXLINE(  47)													int _g72 = 0;
HXDLIN(  47)													int _g73 = len7;
HXDLIN(  47)													while((_g72 < _g73)){
HXLINE(  47)														_g72 = (_g72 + 1);
HXDLIN(  47)														int i28 = (_g72 - 1);
HXDLIN(  47)														{
HXLINE(  47)															 ::haxe::ds::GenericCell_Int l3 = b29->data->head;
HXDLIN(  47)															 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  47)															{
HXLINE(  47)																int _g74 = 0;
HXDLIN(  47)																int _g75 = i28;
HXDLIN(  47)																while((_g74 < _g75)){
HXLINE(  47)																	_g74 = (_g74 + 1);
HXDLIN(  47)																	int i29 = (_g74 - 1);
HXLINE( 345)																	prev3 = l3;
HXLINE( 346)																	l3 = l3->next;
            																}
            															}
HXLINE(  47)															if (::hx::IsNull( prev3 )) {
HXLINE(  47)																b29->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  47)																l3 = null();
            															}
            															else {
HXLINE(  47)																prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  47)																l3 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v24 = b29;
            									}
            									break;
            								}
HXDLIN(  47)								this106->image = v24;
HXDLIN(  47)								this106->width = width3;
HXDLIN(  47)								this106->height = height3;
HXDLIN(  47)								this106->imageType = ( (int)(imageType3) );
HXDLIN(  47)								 ::pi_xy::ImageStruct nextImage3 = this106;
HXDLIN(  47)								nextImage3->transparent = transparent3;
HXDLIN(  47)								while((_this_min3 < _this_max3)){
HXLINE(  47)									_this_min3 = (_this_min3 + 1);
HXDLIN(  47)									int i30 = (_this_min3 - 1);
HXDLIN(  47)									if ((range_y3 > range_yMax3)) {
HXLINE(  34)										range_y3 = range_yReset3;
HXLINE(  47)										range_x3 = (range_x3 + 1);
            									}
HXDLIN(  47)									range_y3 = (range_y3 + 1);
HXDLIN(  47)									int i31 = i30;
HXDLIN(  47)									{
HXLINE(  47)										int x20 = range_x3;
HXDLIN(  47)										int y20 = range_y3;
HXDLIN(  47)										int x21 = range_x3;
HXDLIN(  47)										int y21 = (range_yMax3 - range_y3);
HXDLIN(  47)										::Dynamic this108 = this105->image;
HXDLIN(  47)										int index18;
HXDLIN(  47)										if (this105->useVirtualPos) {
HXLINE(  47)											index18 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this105->virtualY) * ( (Float)(this105->width) )) + x21) - this105->virtualX));
            										}
            										else {
HXLINE(  47)											index18 = ::Std_obj::_hx_int(( (Float)(((y21 * this105->width) + x21)) ));
            										}
HXDLIN(  47)										int c15 = ::iterMagic::Iimg_obj::get(this108,index18);
HXDLIN(  47)										int color3;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											color3 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											color3 = c15;
            										}
HXDLIN(  47)										int c16 = color3;
HXDLIN(  47)										bool v27;
HXDLIN(  47)										if ((((c16 >> 24) & 255) < 254)) {
HXLINE(  47)											v27 = nextImage3->transparent;
            										}
            										else {
HXLINE(  47)											v27 = false;
            										}
HXDLIN(  47)										if (v27) {
HXLINE(  47)											int location6;
HXDLIN(  47)											if (nextImage3->useVirtualPos) {
HXLINE(  47)												location6 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - nextImage3->virtualY) * ( (Float)(nextImage3->width) )) + x20) - nextImage3->virtualX));
            											}
            											else {
HXLINE(  47)												location6 = ::Std_obj::_hx_int(( (Float)(((y20 * nextImage3->width) + x20)) ));
            											}
HXDLIN(  47)											int this109 = ::iterMagic::Iimg_obj::get(nextImage3->image,location6);
HXDLIN(  47)											int this110;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												this110 = ((((((this109 >> 24) & 255) << 24) | ((this109 & 255) << 16)) | (((this109 >> 8) & 255) << 8)) | ((this109 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												this110 = this109;
            											}
HXDLIN(  47)											Float a18;
HXDLIN(  47)											int this111 = ((this110 >> 24) & 255);
HXDLIN(  47)											if ((this111 == 0)) {
HXLINE(  47)												a18 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a18 = (( (Float)(this111) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r16;
HXDLIN(  47)											int this112 = ((this110 >> 16) & 255);
HXDLIN(  47)											if ((this112 == 0)) {
HXLINE(  47)												r16 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r16 = (( (Float)(this112) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g16;
HXDLIN(  47)											int this113 = ((this110 >> 8) & 255);
HXDLIN(  47)											if ((this113 == 0)) {
HXLINE(  47)												g16 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g16 = (( (Float)(this113) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b110;
HXDLIN(  47)											int this114 = (this110 & 255);
HXDLIN(  47)											if ((this114 == 0)) {
HXLINE(  47)												b110 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b110 = (( (Float)(this114) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a26;
HXDLIN(  47)											int this115 = ((color3 >> 24) & 255);
HXDLIN(  47)											if ((this115 == 0)) {
HXLINE(  47)												a26 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a26 = (( (Float)(this115) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r26;
HXDLIN(  47)											int this116 = ((color3 >> 16) & 255);
HXDLIN(  47)											if ((this116 == 0)) {
HXLINE(  47)												r26 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r26 = (( (Float)(this116) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g26;
HXDLIN(  47)											int this117 = ((color3 >> 8) & 255);
HXDLIN(  47)											if ((this117 == 0)) {
HXLINE(  47)												g26 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g26 = (( (Float)(this117) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b210;
HXDLIN(  47)											int this118 = (color3 & 255);
HXDLIN(  47)											if ((this118 == 0)) {
HXLINE(  47)												b210 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b210 = (( (Float)(this118) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a36 = (a18 * (( (Float)(1) ) - a26));
HXDLIN(  47)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  47)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  47)											int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b210 * a26))));
HXDLIN(  47)											int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  47)											int blended6 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b30);
HXDLIN(  47)											{
HXLINE(  47)												int v28;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													v28 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													v28 = blended6;
            												}
HXDLIN(  47)												::iterMagic::Iimg_obj::set(nextImage3->image,location6,v28);
            											}
            										}
            										else {
HXLINE(  47)											::Dynamic this119 = nextImage3->image;
HXDLIN(  47)											int index19;
HXDLIN(  47)											if (nextImage3->useVirtualPos) {
HXLINE(  47)												index19 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - nextImage3->virtualY) * ( (Float)(nextImage3->width) )) + x20) - nextImage3->virtualX));
            											}
            											else {
HXLINE(  47)												index19 = ::Std_obj::_hx_int(( (Float)(((y20 * nextImage3->width) + x20)) ));
            											}
HXDLIN(  47)											int v29;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												v29 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												v29 = c16;
            											}
HXDLIN(  47)											::iterMagic::Iimg_obj::set(this119,index19,v29);
            										}
            									}
            								}
HXDLIN(  47)								 ::pi_xy::ImageStruct v30;
HXDLIN(  47)								if (inPlace) {
HXLINE(  47)									{
HXLINE(  47)										int x22 = ::Std_obj::_hx_int(x);
HXDLIN(  47)										int y22 = ::Std_obj::_hx_int(y);
HXDLIN(  47)										bool forceClear3 = false;
HXDLIN(  47)										{
HXLINE(  47)											int _g76 = 0;
HXDLIN(  47)											int _g77 = nextImage3->height;
HXDLIN(  47)											while((_g76 < _g77)){
HXLINE(  47)												_g76 = (_g76 + 1);
HXDLIN(  47)												int dy3 = (_g76 - 1);
HXDLIN(  47)												{
HXLINE(  47)													int _g78 = 0;
HXDLIN(  47)													int _g79 = nextImage3->width;
HXDLIN(  47)													while((_g78 < _g79)){
HXLINE(  47)														_g78 = (_g78 + 1);
HXDLIN(  47)														int dx3 = (_g78 - 1);
HXDLIN(  47)														::Dynamic this120 = nextImage3->image;
HXDLIN(  47)														int index20;
HXDLIN(  47)														if (nextImage3->useVirtualPos) {
HXLINE(  47)															index20 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - nextImage3->virtualY) * ( (Float)(nextImage3->width) )) + dx3) - nextImage3->virtualX));
            														}
            														else {
HXLINE(  47)															index20 = ::Std_obj::_hx_int(( (Float)(((dy3 * nextImage3->width) + dx3)) ));
            														}
HXDLIN(  47)														int c17 = ::iterMagic::Iimg_obj::get(this120,index20);
HXDLIN(  47)														int col3;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															col3 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															col3 = c17;
            														}
HXDLIN(  47)														bool v31;
HXDLIN(  47)														if (nextImage3->useMask) {
HXLINE(  47)															v31 = ::hx::IsNotNull( nextImage3->mask );
            														}
            														else {
HXLINE(  47)															v31 = false;
            														}
HXDLIN(  47)														if (v31) {
HXLINE(  47)															 ::pi_xy::ImageStruct this121 = nextImage3->mask;
HXDLIN(  47)															::Dynamic this122 = this121->image;
HXDLIN(  47)															int index21;
HXDLIN(  47)															if (this121->useVirtualPos) {
HXLINE(  47)																index21 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this121->virtualY) * ( (Float)(this121->width) )) + dx3) - this121->virtualX));
            															}
            															else {
HXLINE(  47)																index21 = ::Std_obj::_hx_int(( (Float)(((dy3 * this121->width) + dx3)) ));
            															}
HXDLIN(  47)															int c18 = ::iterMagic::Iimg_obj::get(this122,index21);
HXDLIN(  47)															int v32;
HXDLIN(  47)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																v32 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            															}
            															else {
HXLINE(  47)																v32 = c18;
            															}
HXDLIN(  47)															int maskPixel3 = v32;
HXDLIN(  47)															int this123 = col3;
HXDLIN(  47)															if ((maskPixel3 == 0)) {
HXLINE(  47)																col3 = this123;
            															}
            															else {
HXLINE(  47)																Float m03;
HXDLIN(  47)																int this124 = ((maskPixel3 >> 24) & 255);
HXDLIN(  47)																if ((this124 == 0)) {
HXLINE(  47)																	m03 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m03 = (( (Float)(this124) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m13;
HXDLIN(  47)																int this125 = ((maskPixel3 >> 16) & 255);
HXDLIN(  47)																if ((this125 == 0)) {
HXLINE(  47)																	m13 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m13 = (( (Float)(this125) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m23;
HXDLIN(  47)																int this126 = ((maskPixel3 >> 8) & 255);
HXDLIN(  47)																if ((this126 == 0)) {
HXLINE(  47)																	m23 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m23 = (( (Float)(this126) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m33;
HXDLIN(  47)																int this127 = (maskPixel3 & 255);
HXDLIN(  47)																if ((this127 == 0)) {
HXLINE(  47)																	m33 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m33 = (( (Float)(this127) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this123 >> 24) & 255)) )));
HXDLIN(  47)																int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this123 >> 16) & 255)) )));
HXDLIN(  47)																int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this123 >> 8) & 255)) )));
HXDLIN(  47)																int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this123 & 255)) )));
HXDLIN(  47)																col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  47)														if ((col3 != 0)) {
HXLINE(  47)															int x23 = (x22 + dx3);
HXDLIN(  47)															int y23 = (y22 + dy3);
HXDLIN(  47)															int c19 = col3;
HXDLIN(  47)															bool v33;
HXDLIN(  47)															if ((((c19 >> 24) & 255) < 254)) {
HXLINE(  47)																v33 = this105->transparent;
            															}
            															else {
HXLINE(  47)																v33 = false;
            															}
HXDLIN(  47)															if (v33) {
HXLINE(  47)																int location7;
HXDLIN(  47)																if (this105->useVirtualPos) {
HXLINE(  47)																	location7 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - this105->virtualY) * ( (Float)(this105->width) )) + x23) - this105->virtualX));
            																}
            																else {
HXLINE(  47)																	location7 = ::Std_obj::_hx_int(( (Float)(((y23 * this105->width) + x23)) ));
            																}
HXDLIN(  47)																int this128 = ::iterMagic::Iimg_obj::get(this105->image,location7);
HXDLIN(  47)																int this129;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	this129 = ((((((this128 >> 24) & 255) << 24) | ((this128 & 255) << 16)) | (((this128 >> 8) & 255) << 8)) | ((this128 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	this129 = this128;
            																}
HXDLIN(  47)																Float a110;
HXDLIN(  47)																int this130 = ((this129 >> 24) & 255);
HXDLIN(  47)																if ((this130 == 0)) {
HXLINE(  47)																	a110 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a110 = (( (Float)(this130) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r17;
HXDLIN(  47)																int this131 = ((this129 >> 16) & 255);
HXDLIN(  47)																if ((this131 == 0)) {
HXLINE(  47)																	r17 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r17 = (( (Float)(this131) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g17;
HXDLIN(  47)																int this132 = ((this129 >> 8) & 255);
HXDLIN(  47)																if ((this132 == 0)) {
HXLINE(  47)																	g17 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g17 = (( (Float)(this132) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b111;
HXDLIN(  47)																int this133 = (this129 & 255);
HXDLIN(  47)																if ((this133 == 0)) {
HXLINE(  47)																	b111 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b111 = (( (Float)(this133) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a27;
HXDLIN(  47)																int this134 = ((col3 >> 24) & 255);
HXDLIN(  47)																if ((this134 == 0)) {
HXLINE(  47)																	a27 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a27 = (( (Float)(this134) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r27;
HXDLIN(  47)																int this135 = ((col3 >> 16) & 255);
HXDLIN(  47)																if ((this135 == 0)) {
HXLINE(  47)																	r27 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r27 = (( (Float)(this135) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g27;
HXDLIN(  47)																int this136 = ((col3 >> 8) & 255);
HXDLIN(  47)																if ((this136 == 0)) {
HXLINE(  47)																	g27 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g27 = (( (Float)(this136) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b211;
HXDLIN(  47)																int this137 = (col3 & 255);
HXDLIN(  47)																if ((this137 == 0)) {
HXLINE(  47)																	b211 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b211 = (( (Float)(this137) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN(  47)																int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  47)																int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  47)																int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b211 * a27))));
HXDLIN(  47)																int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  47)																int blended7 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b31);
HXDLIN(  47)																{
HXLINE(  47)																	int v34;
HXDLIN(  47)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																		v34 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																	}
            																	else {
HXLINE(  47)																		v34 = blended7;
            																	}
HXDLIN(  47)																	::iterMagic::Iimg_obj::set(this105->image,location7,v34);
            																}
            															}
            															else {
HXLINE(  47)																::Dynamic this138 = this105->image;
HXDLIN(  47)																int index22;
HXDLIN(  47)																if (this105->useVirtualPos) {
HXLINE(  47)																	index22 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - this105->virtualY) * ( (Float)(this105->width) )) + x23) - this105->virtualX));
            																}
            																else {
HXLINE(  47)																	index22 = ::Std_obj::_hx_int(( (Float)(((y23 * this105->width) + x23)) ));
            																}
HXDLIN(  47)																int v35;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	v35 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	v35 = c19;
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this138,index22,v35);
            															}
            														}
            														else {
HXLINE(  47)															if (forceClear3) {
HXLINE(  47)																::Dynamic this139 = this105->image;
HXDLIN(  47)																int x24 = (x22 + dx3);
HXDLIN(  47)																int y24 = (y22 + dy3);
HXDLIN(  47)																int index23;
HXDLIN(  47)																if (this105->useVirtualPos) {
HXLINE(  47)																	index23 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - this105->virtualY) * ( (Float)(this105->width) )) + x24) - this105->virtualX));
            																}
            																else {
HXLINE(  47)																	index23 = ::Std_obj::_hx_int(( (Float)(((y24 * this105->width) + x24)) ));
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this139,index23,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  47)									bool v36;
HXDLIN(  47)									if (::hx::IsNotNull( this105->mask )) {
HXLINE(  47)										v36 = includeMask;
            									}
            									else {
HXLINE(  47)										v36 = false;
            									}
HXDLIN(  47)									if (v36) {
HXLINE(  47)										 ::pi_xy::ImageStruct v37 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this105->mask,x,y,( (Float)(this105->width) ),( (Float)(this105->height) ),this105->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										this105->useMask = true;
HXDLIN(  47)										this105->mask = v37;
            									}
HXLINE(  91)									nextImage3 = null();
HXLINE(  47)									v30 = this105;
            								}
            								else {
HXLINE(  47)									bool v38;
HXDLIN(  47)									if (::hx::IsNotNull( this105->mask )) {
HXLINE(  47)										v38 = includeMask;
            									}
            									else {
HXLINE(  47)										v38 = false;
            									}
HXDLIN(  47)									if (v38) {
HXLINE(  47)										 ::pi_xy::ImageStruct v39 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this105->mask,x,y,( (Float)(this105->width) ),( (Float)(this105->height) ),this105->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										nextImage3->useMask = true;
HXDLIN(  47)										nextImage3->mask = v39;
            									}
HXDLIN(  47)									v30 = nextImage3;
            								}
HXDLIN(  47)								this70->useMask = true;
HXDLIN(  47)								this70->mask = v30;
            							}
HXLINE(  91)							nextImage2 = null();
HXLINE(  47)							v17 = this70;
            						}
            						else {
HXLINE(  47)							bool v40;
HXDLIN(  47)							if (::hx::IsNotNull( this70->mask )) {
HXLINE(  47)								v40 = includeMask;
            							}
            							else {
HXLINE(  47)								v40 = false;
            							}
HXDLIN(  47)							if (v40) {
HXLINE(  47)								 ::pi_xy::ImageStruct this140 = this70->mask;
HXDLIN(  47)								Float w8 = ( (Float)(this70->width) );
HXDLIN(  47)								Float h4 = ( (Float)(this70->height) );
HXDLIN(  47)								bool transparent4 = this70->mask->transparent;
HXDLIN(  47)								Float r_x4 = x;
HXDLIN(  47)								Float r_y4 = y;
HXDLIN(  47)								Float r_w4 = w8;
HXDLIN(  47)								Float r_h4 = h4;
HXDLIN(  47)								int xmax4 = ::Std_obj::_hx_int(((r_x4 + r_w4) + 1));
HXDLIN(  47)								int ymax4 = ::Std_obj::_hx_int(((r_y4 + r_h4) + 1));
HXDLIN(  47)								int ii_min8 = ::Std_obj::_hx_int(r_x4);
HXDLIN(  47)								int ii_max8 = xmax4;
HXDLIN(  47)								int xRange__start4 = ii_min8;
HXDLIN(  47)								int xRange__max4 = ii_max8;
HXDLIN(  47)								int ii_min9 = ::Std_obj::_hx_int(r_y4);
HXDLIN(  47)								int ii_max9 = ymax4;
HXDLIN(  47)								int yRange__start4 = ii_min9;
HXDLIN(  47)								int yRange__max4 = ii_max9;
HXDLIN(  47)								int range_x4 = xRange__start4;
HXDLIN(  47)								int range_y4 = (yRange__start4 - 1);
HXDLIN(  47)								int range_xReset4 = range_x4;
HXDLIN(  47)								int range_yReset4 = range_y4;
HXDLIN(  47)								int range_xMax4 = (xRange__max4 - 2);
HXDLIN(  47)								int range_yMax4 = (yRange__max4 - 2);
HXDLIN(  47)								int _this_min4 = 0;
HXDLIN(  47)								int _this_max4 = ::Std_obj::_hx_int(( (Float)(((xRange__max4 - xRange__start4) * (yRange__max4 - yRange__start4))) ));
HXDLIN(  47)								int width4 = ::Std_obj::_hx_int(w8);
HXDLIN(  47)								int height4 = ::Std_obj::_hx_int(h4);
HXDLIN(  47)								 ::Dynamic imageType4 = null();
HXDLIN(  47)								 ::pi_xy::ImageStruct this141 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)								if (::hx::IsNull( imageType4 )) {
HXLINE(  54)									imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE(  47)								::Dynamic v41;
HXDLIN(  47)								switch((int)(( (int)(imageType4) ))){
            									case (int)0: {
HXLINE(  47)										 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::BytesImg b32 = byt4;
HXDLIN(  47)										{
HXLINE(  47)											b32->width = width4;
HXDLIN(  47)											b32->height = height4;
HXDLIN(  47)											b32->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  47)											b32->data = ::haxe::io::Bytes_obj::alloc((b32->length * 4));
HXDLIN(  47)											{
HXLINE(  47)												int len8 = b32->length;
HXDLIN(  47)												int w9 = 0;
HXDLIN(  47)												{
HXLINE(  47)													int _g80 = 0;
HXDLIN(  47)													int _g81 = b32->height;
HXDLIN(  47)													while((_g80 < _g81)){
HXLINE(  47)														_g80 = (_g80 + 1);
HXDLIN(  47)														int y25 = (_g80 - 1);
HXDLIN(  47)														{
HXLINE(  47)															int _g82 = 0;
HXDLIN(  47)															int _g83 = b32->width;
HXDLIN(  47)															while((_g82 < _g83)){
HXLINE(  47)																_g82 = (_g82 + 1);
HXDLIN(  47)																int x25 = (_g82 - 1);
HXDLIN(  47)																{
HXLINE(  47)																	w9 = (w9 + 1);
HXDLIN(  47)																	b32->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w9 = (w9 + 1);
HXDLIN(  47)																	b32->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w9 = (w9 + 1);
HXDLIN(  47)																	b32->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w9 = (w9 + 1);
HXDLIN(  47)																	b32->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v41 = b32;
            									}
            									break;
            									case (int)1: {
HXLINE(  47)										 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::ArrIntImg a28 = arrI4;
HXDLIN(  47)										{
HXLINE(  47)											a28->width = width4;
HXDLIN(  47)											a28->height = height4;
HXDLIN(  47)											a28->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)											a28->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  47)											{
HXLINE(  47)												int _g84 = 0;
HXDLIN(  47)												int _g85 = a28->length;
HXDLIN(  47)												while((_g84 < _g85)){
HXLINE(  47)													_g84 = (_g84 + 1);
HXDLIN(  47)													int i32 = (_g84 - 1);
HXDLIN(  47)													a28->data[i32] = 0;
            												}
            											}
            										}
HXDLIN(  47)										v41 = a28;
            									}
            									break;
            									case (int)2: {
HXLINE(  47)										 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::U32ArrImg b33 = u32a4;
HXDLIN(  47)										{
HXLINE(  47)											b33->width = width4;
HXDLIN(  47)											b33->height = height4;
HXDLIN(  47)											b33->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  47)											int size4 = (b33->length * 4);
HXDLIN(  47)											b33->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  47)											{
HXLINE(  47)												int _g86 = 0;
HXDLIN(  47)												int _g87 = b33->length;
HXDLIN(  47)												while((_g86 < _g87)){
HXLINE(  47)													_g86 = (_g86 + 1);
HXDLIN(  47)													int i33 = (_g86 - 1);
HXDLIN(  47)													{
HXLINE(  47)														 ::haxe::io::ArrayBufferViewImpl this142 = b33->data;
HXDLIN(  47)														bool v42;
HXDLIN(  47)														if ((i33 >= 0)) {
HXLINE(  47)															v42 = (i33 < (this142->byteLength >> 2));
            														}
            														else {
HXLINE(  47)															v42 = false;
            														}
HXDLIN(  47)														if (v42) {
HXLINE(  47)															 ::haxe::io::Bytes _this4 = this142->bytes;
HXDLIN(  47)															int pos4 = ((i33 << 2) + this142->byteOffset);
HXDLIN(  47)															_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  47)															_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v41 = b33;
            									}
            									break;
            									case (int)3: {
HXLINE(  47)										 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::VecIntImg v43 = vec4;
HXDLIN(  47)										{
HXLINE(  47)											v43->width = width4;
HXDLIN(  47)											v43->height = height4;
HXDLIN(  47)											v43->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  47)											v43->data = ::Array_obj< int >::__new(v43->length);
HXDLIN(  47)											{
HXLINE(  47)												int _g88 = 0;
HXDLIN(  47)												int _g89 = v43->length;
HXDLIN(  47)												while((_g88 < _g89)){
HXLINE(  47)													_g88 = (_g88 + 1);
HXDLIN(  47)													int i34 = (_g88 - 1);
HXDLIN(  47)													v43->data->__unsafe_set(i34,0);
            												}
            											}
            										}
HXDLIN(  47)										v41 = v43;
            									}
            									break;
            									case (int)4: {
HXLINE(  47)										 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::StackIntImg b34 = sInt4;
HXDLIN(  47)										{
HXLINE(  47)											b34->width = width4;
HXDLIN(  47)											b34->height = height4;
HXDLIN(  47)											b34->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  47)											b34->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)											{
HXLINE(  47)												int len9 = b34->length;
HXDLIN(  47)												 ::haxe::ds::GenericStack_Int d4 = b34->data;
HXDLIN(  47)												if (::hx::IsNull( d4->head )) {
HXLINE(  47)													int _g90 = 0;
HXDLIN(  47)													int _g91 = len9;
HXDLIN(  47)													while((_g90 < _g91)){
HXLINE(  47)														_g90 = (_g90 + 1);
HXDLIN(  47)														int i35 = (_g90 - 1);
HXDLIN(  47)														d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            													}
            												}
            												else {
HXLINE(  47)													int _g92 = 0;
HXDLIN(  47)													int _g93 = len9;
HXDLIN(  47)													while((_g92 < _g93)){
HXLINE(  47)														_g92 = (_g92 + 1);
HXDLIN(  47)														int i36 = (_g92 - 1);
HXDLIN(  47)														{
HXLINE(  47)															 ::haxe::ds::GenericCell_Int l4 = b34->data->head;
HXDLIN(  47)															 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  47)															{
HXLINE(  47)																int _g94 = 0;
HXDLIN(  47)																int _g95 = i36;
HXDLIN(  47)																while((_g94 < _g95)){
HXLINE(  47)																	_g94 = (_g94 + 1);
HXDLIN(  47)																	int i37 = (_g94 - 1);
HXLINE( 345)																	prev4 = l4;
HXLINE( 346)																	l4 = l4->next;
            																}
            															}
HXLINE(  47)															if (::hx::IsNull( prev4 )) {
HXLINE(  47)																b34->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  47)																l4 = null();
            															}
            															else {
HXLINE(  47)																prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  47)																l4 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v41 = b34;
            									}
            									break;
            								}
HXDLIN(  47)								this141->image = v41;
HXDLIN(  47)								this141->width = width4;
HXDLIN(  47)								this141->height = height4;
HXDLIN(  47)								this141->imageType = ( (int)(imageType4) );
HXDLIN(  47)								 ::pi_xy::ImageStruct nextImage4 = this141;
HXDLIN(  47)								nextImage4->transparent = transparent4;
HXDLIN(  47)								while((_this_min4 < _this_max4)){
HXLINE(  47)									_this_min4 = (_this_min4 + 1);
HXDLIN(  47)									int i38 = (_this_min4 - 1);
HXDLIN(  47)									if ((range_y4 > range_yMax4)) {
HXLINE(  34)										range_y4 = range_yReset4;
HXLINE(  47)										range_x4 = (range_x4 + 1);
            									}
HXDLIN(  47)									range_y4 = (range_y4 + 1);
HXDLIN(  47)									int i39 = i38;
HXDLIN(  47)									{
HXLINE(  47)										int x26 = range_x4;
HXDLIN(  47)										int y26 = range_y4;
HXDLIN(  47)										int x27 = range_x4;
HXDLIN(  47)										int y27 = (range_yMax4 - range_y4);
HXDLIN(  47)										::Dynamic this143 = this140->image;
HXDLIN(  47)										int index24;
HXDLIN(  47)										if (this140->useVirtualPos) {
HXLINE(  47)											index24 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - this140->virtualY) * ( (Float)(this140->width) )) + x27) - this140->virtualX));
            										}
            										else {
HXLINE(  47)											index24 = ::Std_obj::_hx_int(( (Float)(((y27 * this140->width) + x27)) ));
            										}
HXDLIN(  47)										int c20 = ::iterMagic::Iimg_obj::get(this143,index24);
HXDLIN(  47)										int color4;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											color4 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											color4 = c20;
            										}
HXDLIN(  47)										int c21 = color4;
HXDLIN(  47)										bool v44;
HXDLIN(  47)										if ((((c21 >> 24) & 255) < 254)) {
HXLINE(  47)											v44 = nextImage4->transparent;
            										}
            										else {
HXLINE(  47)											v44 = false;
            										}
HXDLIN(  47)										if (v44) {
HXLINE(  47)											int location8;
HXDLIN(  47)											if (nextImage4->useVirtualPos) {
HXLINE(  47)												location8 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - nextImage4->virtualY) * ( (Float)(nextImage4->width) )) + x26) - nextImage4->virtualX));
            											}
            											else {
HXLINE(  47)												location8 = ::Std_obj::_hx_int(( (Float)(((y26 * nextImage4->width) + x26)) ));
            											}
HXDLIN(  47)											int this144 = ::iterMagic::Iimg_obj::get(nextImage4->image,location8);
HXDLIN(  47)											int this145;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												this145 = ((((((this144 >> 24) & 255) << 24) | ((this144 & 255) << 16)) | (((this144 >> 8) & 255) << 8)) | ((this144 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												this145 = this144;
            											}
HXDLIN(  47)											Float a111;
HXDLIN(  47)											int this146 = ((this145 >> 24) & 255);
HXDLIN(  47)											if ((this146 == 0)) {
HXLINE(  47)												a111 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a111 = (( (Float)(this146) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r18;
HXDLIN(  47)											int this147 = ((this145 >> 16) & 255);
HXDLIN(  47)											if ((this147 == 0)) {
HXLINE(  47)												r18 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r18 = (( (Float)(this147) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g18;
HXDLIN(  47)											int this148 = ((this145 >> 8) & 255);
HXDLIN(  47)											if ((this148 == 0)) {
HXLINE(  47)												g18 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g18 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b112;
HXDLIN(  47)											int this149 = (this145 & 255);
HXDLIN(  47)											if ((this149 == 0)) {
HXLINE(  47)												b112 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b112 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a29;
HXDLIN(  47)											int this150 = ((color4 >> 24) & 255);
HXDLIN(  47)											if ((this150 == 0)) {
HXLINE(  47)												a29 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a29 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r28;
HXDLIN(  47)											int this151 = ((color4 >> 16) & 255);
HXDLIN(  47)											if ((this151 == 0)) {
HXLINE(  47)												r28 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r28 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g28;
HXDLIN(  47)											int this152 = ((color4 >> 8) & 255);
HXDLIN(  47)											if ((this152 == 0)) {
HXLINE(  47)												g28 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g28 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b212;
HXDLIN(  47)											int this153 = (color4 & 255);
HXDLIN(  47)											if ((this153 == 0)) {
HXLINE(  47)												b212 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b212 = (( (Float)(this153) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a38 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  47)											int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a29))));
HXDLIN(  47)											int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a29))));
HXDLIN(  47)											int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a38) + (b212 * a29))));
HXDLIN(  47)											int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a29)));
HXDLIN(  47)											int blended8 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b35);
HXDLIN(  47)											{
HXLINE(  47)												int v45;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													v45 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													v45 = blended8;
            												}
HXDLIN(  47)												::iterMagic::Iimg_obj::set(nextImage4->image,location8,v45);
            											}
            										}
            										else {
HXLINE(  47)											::Dynamic this154 = nextImage4->image;
HXDLIN(  47)											int index25;
HXDLIN(  47)											if (nextImage4->useVirtualPos) {
HXLINE(  47)												index25 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - nextImage4->virtualY) * ( (Float)(nextImage4->width) )) + x26) - nextImage4->virtualX));
            											}
            											else {
HXLINE(  47)												index25 = ::Std_obj::_hx_int(( (Float)(((y26 * nextImage4->width) + x26)) ));
            											}
HXDLIN(  47)											int v46;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												v46 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												v46 = c21;
            											}
HXDLIN(  47)											::iterMagic::Iimg_obj::set(this154,index25,v46);
            										}
            									}
            								}
HXDLIN(  47)								 ::pi_xy::ImageStruct v47;
HXDLIN(  47)								if (inPlace) {
HXLINE(  47)									{
HXLINE(  47)										int x28 = ::Std_obj::_hx_int(x);
HXDLIN(  47)										int y28 = ::Std_obj::_hx_int(y);
HXDLIN(  47)										bool forceClear4 = false;
HXDLIN(  47)										{
HXLINE(  47)											int _g96 = 0;
HXDLIN(  47)											int _g97 = nextImage4->height;
HXDLIN(  47)											while((_g96 < _g97)){
HXLINE(  47)												_g96 = (_g96 + 1);
HXDLIN(  47)												int dy4 = (_g96 - 1);
HXDLIN(  47)												{
HXLINE(  47)													int _g98 = 0;
HXDLIN(  47)													int _g99 = nextImage4->width;
HXDLIN(  47)													while((_g98 < _g99)){
HXLINE(  47)														_g98 = (_g98 + 1);
HXDLIN(  47)														int dx4 = (_g98 - 1);
HXDLIN(  47)														::Dynamic this155 = nextImage4->image;
HXDLIN(  47)														int index26;
HXDLIN(  47)														if (nextImage4->useVirtualPos) {
HXLINE(  47)															index26 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - nextImage4->virtualY) * ( (Float)(nextImage4->width) )) + dx4) - nextImage4->virtualX));
            														}
            														else {
HXLINE(  47)															index26 = ::Std_obj::_hx_int(( (Float)(((dy4 * nextImage4->width) + dx4)) ));
            														}
HXDLIN(  47)														int c22 = ::iterMagic::Iimg_obj::get(this155,index26);
HXDLIN(  47)														int col4;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															col4 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															col4 = c22;
            														}
HXDLIN(  47)														bool v48;
HXDLIN(  47)														if (nextImage4->useMask) {
HXLINE(  47)															v48 = ::hx::IsNotNull( nextImage4->mask );
            														}
            														else {
HXLINE(  47)															v48 = false;
            														}
HXDLIN(  47)														if (v48) {
HXLINE(  47)															 ::pi_xy::ImageStruct this156 = nextImage4->mask;
HXDLIN(  47)															::Dynamic this157 = this156->image;
HXDLIN(  47)															int index27;
HXDLIN(  47)															if (this156->useVirtualPos) {
HXLINE(  47)																index27 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this156->virtualY) * ( (Float)(this156->width) )) + dx4) - this156->virtualX));
            															}
            															else {
HXLINE(  47)																index27 = ::Std_obj::_hx_int(( (Float)(((dy4 * this156->width) + dx4)) ));
            															}
HXDLIN(  47)															int c23 = ::iterMagic::Iimg_obj::get(this157,index27);
HXDLIN(  47)															int v49;
HXDLIN(  47)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																v49 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            															}
            															else {
HXLINE(  47)																v49 = c23;
            															}
HXDLIN(  47)															int maskPixel4 = v49;
HXDLIN(  47)															int this158 = col4;
HXDLIN(  47)															if ((maskPixel4 == 0)) {
HXLINE(  47)																col4 = this158;
            															}
            															else {
HXLINE(  47)																Float m04;
HXDLIN(  47)																int this159 = ((maskPixel4 >> 24) & 255);
HXDLIN(  47)																if ((this159 == 0)) {
HXLINE(  47)																	m04 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m04 = (( (Float)(this159) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m14;
HXDLIN(  47)																int this160 = ((maskPixel4 >> 16) & 255);
HXDLIN(  47)																if ((this160 == 0)) {
HXLINE(  47)																	m14 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m14 = (( (Float)(this160) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m24;
HXDLIN(  47)																int this161 = ((maskPixel4 >> 8) & 255);
HXDLIN(  47)																if ((this161 == 0)) {
HXLINE(  47)																	m24 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m24 = (( (Float)(this161) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m34;
HXDLIN(  47)																int this162 = (maskPixel4 & 255);
HXDLIN(  47)																if ((this162 == 0)) {
HXLINE(  47)																	m34 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m34 = (( (Float)(this162) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this158 >> 24) & 255)) )));
HXDLIN(  47)																int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this158 >> 16) & 255)) )));
HXDLIN(  47)																int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this158 >> 8) & 255)) )));
HXDLIN(  47)																int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this158 & 255)) )));
HXDLIN(  47)																col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  47)														if ((col4 != 0)) {
HXLINE(  47)															int x29 = (x28 + dx4);
HXDLIN(  47)															int y29 = (y28 + dy4);
HXDLIN(  47)															int c24 = col4;
HXDLIN(  47)															bool v50;
HXDLIN(  47)															if ((((c24 >> 24) & 255) < 254)) {
HXLINE(  47)																v50 = this140->transparent;
            															}
            															else {
HXLINE(  47)																v50 = false;
            															}
HXDLIN(  47)															if (v50) {
HXLINE(  47)																int location9;
HXDLIN(  47)																if (this140->useVirtualPos) {
HXLINE(  47)																	location9 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - this140->virtualY) * ( (Float)(this140->width) )) + x29) - this140->virtualX));
            																}
            																else {
HXLINE(  47)																	location9 = ::Std_obj::_hx_int(( (Float)(((y29 * this140->width) + x29)) ));
            																}
HXDLIN(  47)																int this163 = ::iterMagic::Iimg_obj::get(this140->image,location9);
HXDLIN(  47)																int this164;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	this164 = ((((((this163 >> 24) & 255) << 24) | ((this163 & 255) << 16)) | (((this163 >> 8) & 255) << 8)) | ((this163 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	this164 = this163;
            																}
HXDLIN(  47)																Float a112;
HXDLIN(  47)																int this165 = ((this164 >> 24) & 255);
HXDLIN(  47)																if ((this165 == 0)) {
HXLINE(  47)																	a112 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a112 = (( (Float)(this165) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r19;
HXDLIN(  47)																int this166 = ((this164 >> 16) & 255);
HXDLIN(  47)																if ((this166 == 0)) {
HXLINE(  47)																	r19 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r19 = (( (Float)(this166) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g19;
HXDLIN(  47)																int this167 = ((this164 >> 8) & 255);
HXDLIN(  47)																if ((this167 == 0)) {
HXLINE(  47)																	g19 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g19 = (( (Float)(this167) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b113;
HXDLIN(  47)																int this168 = (this164 & 255);
HXDLIN(  47)																if ((this168 == 0)) {
HXLINE(  47)																	b113 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b113 = (( (Float)(this168) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a210;
HXDLIN(  47)																int this169 = ((col4 >> 24) & 255);
HXDLIN(  47)																if ((this169 == 0)) {
HXLINE(  47)																	a210 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a210 = (( (Float)(this169) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r29;
HXDLIN(  47)																int this170 = ((col4 >> 16) & 255);
HXDLIN(  47)																if ((this170 == 0)) {
HXLINE(  47)																	r29 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r29 = (( (Float)(this170) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g29;
HXDLIN(  47)																int this171 = ((col4 >> 8) & 255);
HXDLIN(  47)																if ((this171 == 0)) {
HXLINE(  47)																	g29 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g29 = (( (Float)(this171) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b213;
HXDLIN(  47)																int this172 = (col4 & 255);
HXDLIN(  47)																if ((this172 == 0)) {
HXLINE(  47)																	b213 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b213 = (( (Float)(this172) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a39 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  47)																int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a39) + (r29 * a210))));
HXDLIN(  47)																int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a39) + (g29 * a210))));
HXDLIN(  47)																int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b213 * a210))));
HXDLIN(  47)																int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN(  47)																int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b36);
HXDLIN(  47)																{
HXLINE(  47)																	int v51;
HXDLIN(  47)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																		v51 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																	}
            																	else {
HXLINE(  47)																		v51 = blended9;
            																	}
HXDLIN(  47)																	::iterMagic::Iimg_obj::set(this140->image,location9,v51);
            																}
            															}
            															else {
HXLINE(  47)																::Dynamic this173 = this140->image;
HXDLIN(  47)																int index28;
HXDLIN(  47)																if (this140->useVirtualPos) {
HXLINE(  47)																	index28 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - this140->virtualY) * ( (Float)(this140->width) )) + x29) - this140->virtualX));
            																}
            																else {
HXLINE(  47)																	index28 = ::Std_obj::_hx_int(( (Float)(((y29 * this140->width) + x29)) ));
            																}
HXDLIN(  47)																int v52;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	v52 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	v52 = c24;
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this173,index28,v52);
            															}
            														}
            														else {
HXLINE(  47)															if (forceClear4) {
HXLINE(  47)																::Dynamic this174 = this140->image;
HXDLIN(  47)																int x30 = (x28 + dx4);
HXDLIN(  47)																int y30 = (y28 + dy4);
HXDLIN(  47)																int index29;
HXDLIN(  47)																if (this140->useVirtualPos) {
HXLINE(  47)																	index29 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - this140->virtualY) * ( (Float)(this140->width) )) + x30) - this140->virtualX));
            																}
            																else {
HXLINE(  47)																	index29 = ::Std_obj::_hx_int(( (Float)(((y30 * this140->width) + x30)) ));
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this174,index29,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  47)									bool v53;
HXDLIN(  47)									if (::hx::IsNotNull( this140->mask )) {
HXLINE(  47)										v53 = includeMask;
            									}
            									else {
HXLINE(  47)										v53 = false;
            									}
HXDLIN(  47)									if (v53) {
HXLINE(  47)										 ::pi_xy::ImageStruct v54 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this140->mask,x,y,( (Float)(this140->width) ),( (Float)(this140->height) ),this140->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										this140->useMask = true;
HXDLIN(  47)										this140->mask = v54;
            									}
HXLINE(  91)									nextImage4 = null();
HXLINE(  47)									v47 = this140;
            								}
            								else {
HXLINE(  47)									bool v55;
HXDLIN(  47)									if (::hx::IsNotNull( this140->mask )) {
HXLINE(  47)										v55 = includeMask;
            									}
            									else {
HXLINE(  47)										v55 = false;
            									}
HXDLIN(  47)									if (v55) {
HXLINE(  47)										 ::pi_xy::ImageStruct v56 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this140->mask,x,y,( (Float)(this140->width) ),( (Float)(this140->height) ),this140->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										nextImage4->useMask = true;
HXDLIN(  47)										nextImage4->mask = v56;
            									}
HXDLIN(  47)									v47 = nextImage4;
            								}
HXDLIN(  47)								nextImage2->useMask = true;
HXDLIN(  47)								nextImage2->mask = v47;
            							}
HXDLIN(  47)							v17 = nextImage2;
            						}
HXDLIN(  47)						this35->useMask = true;
HXDLIN(  47)						this35->mask = v17;
            					}
HXLINE(  91)					nextImage1 = null();
HXLINE(  47)					v4 = this35;
            				}
            				else {
HXLINE(  47)					bool v57;
HXDLIN(  47)					if (::hx::IsNotNull( this35->mask )) {
HXLINE(  47)						v57 = includeMask;
            					}
            					else {
HXLINE(  47)						v57 = false;
            					}
HXDLIN(  47)					if (v57) {
HXLINE(  47)						 ::pi_xy::ImageStruct this175 = this35->mask;
HXDLIN(  47)						Float w10 = ( (Float)(this35->width) );
HXDLIN(  47)						Float h5 = ( (Float)(this35->height) );
HXDLIN(  47)						bool transparent5 = this35->mask->transparent;
HXDLIN(  47)						Float r_x5 = x;
HXDLIN(  47)						Float r_y5 = y;
HXDLIN(  47)						Float r_w5 = w10;
HXDLIN(  47)						Float r_h5 = h5;
HXDLIN(  47)						int xmax5 = ::Std_obj::_hx_int(((r_x5 + r_w5) + 1));
HXDLIN(  47)						int ymax5 = ::Std_obj::_hx_int(((r_y5 + r_h5) + 1));
HXDLIN(  47)						int ii_min10 = ::Std_obj::_hx_int(r_x5);
HXDLIN(  47)						int ii_max10 = xmax5;
HXDLIN(  47)						int xRange__start5 = ii_min10;
HXDLIN(  47)						int xRange__max5 = ii_max10;
HXDLIN(  47)						int ii_min11 = ::Std_obj::_hx_int(r_y5);
HXDLIN(  47)						int ii_max11 = ymax5;
HXDLIN(  47)						int yRange__start5 = ii_min11;
HXDLIN(  47)						int yRange__max5 = ii_max11;
HXDLIN(  47)						int range_x5 = xRange__start5;
HXDLIN(  47)						int range_y5 = (yRange__start5 - 1);
HXDLIN(  47)						int range_xReset5 = range_x5;
HXDLIN(  47)						int range_yReset5 = range_y5;
HXDLIN(  47)						int range_xMax5 = (xRange__max5 - 2);
HXDLIN(  47)						int range_yMax5 = (yRange__max5 - 2);
HXDLIN(  47)						int _this_min5 = 0;
HXDLIN(  47)						int _this_max5 = ::Std_obj::_hx_int(( (Float)(((xRange__max5 - xRange__start5) * (yRange__max5 - yRange__start5))) ));
HXDLIN(  47)						int width5 = ::Std_obj::_hx_int(w10);
HXDLIN(  47)						int height5 = ::Std_obj::_hx_int(h5);
HXDLIN(  47)						 ::Dynamic imageType5 = null();
HXDLIN(  47)						 ::pi_xy::ImageStruct this176 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)						if (::hx::IsNull( imageType5 )) {
HXLINE(  54)							imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE(  47)						::Dynamic v58;
HXDLIN(  47)						switch((int)(( (int)(imageType5) ))){
            							case (int)0: {
HXLINE(  47)								 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::BytesImg b37 = byt5;
HXDLIN(  47)								{
HXLINE(  47)									b37->width = width5;
HXDLIN(  47)									b37->height = height5;
HXDLIN(  47)									b37->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  47)									b37->data = ::haxe::io::Bytes_obj::alloc((b37->length * 4));
HXDLIN(  47)									{
HXLINE(  47)										int len10 = b37->length;
HXDLIN(  47)										int w11 = 0;
HXDLIN(  47)										{
HXLINE(  47)											int _g100 = 0;
HXDLIN(  47)											int _g101 = b37->height;
HXDLIN(  47)											while((_g100 < _g101)){
HXLINE(  47)												_g100 = (_g100 + 1);
HXDLIN(  47)												int y31 = (_g100 - 1);
HXDLIN(  47)												{
HXLINE(  47)													int _g102 = 0;
HXDLIN(  47)													int _g103 = b37->width;
HXDLIN(  47)													while((_g102 < _g103)){
HXLINE(  47)														_g102 = (_g102 + 1);
HXDLIN(  47)														int x31 = (_g102 - 1);
HXDLIN(  47)														{
HXLINE(  47)															w11 = (w11 + 1);
HXDLIN(  47)															b37->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN(  47)														{
HXLINE(  47)															w11 = (w11 + 1);
HXDLIN(  47)															b37->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN(  47)														{
HXLINE(  47)															w11 = (w11 + 1);
HXDLIN(  47)															b37->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN(  47)														{
HXLINE(  47)															w11 = (w11 + 1);
HXDLIN(  47)															b37->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  47)								v58 = b37;
            							}
            							break;
            							case (int)1: {
HXLINE(  47)								 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::ArrIntImg a41 = arrI5;
HXDLIN(  47)								{
HXLINE(  47)									a41->width = width5;
HXDLIN(  47)									a41->height = height5;
HXDLIN(  47)									a41->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)									a41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  47)									{
HXLINE(  47)										int _g104 = 0;
HXDLIN(  47)										int _g105 = a41->length;
HXDLIN(  47)										while((_g104 < _g105)){
HXLINE(  47)											_g104 = (_g104 + 1);
HXDLIN(  47)											int i40 = (_g104 - 1);
HXDLIN(  47)											a41->data[i40] = 0;
            										}
            									}
            								}
HXDLIN(  47)								v58 = a41;
            							}
            							break;
            							case (int)2: {
HXLINE(  47)								 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::U32ArrImg b38 = u32a5;
HXDLIN(  47)								{
HXLINE(  47)									b38->width = width5;
HXDLIN(  47)									b38->height = height5;
HXDLIN(  47)									b38->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  47)									int size5 = (b38->length * 4);
HXDLIN(  47)									b38->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  47)									{
HXLINE(  47)										int _g106 = 0;
HXDLIN(  47)										int _g107 = b38->length;
HXDLIN(  47)										while((_g106 < _g107)){
HXLINE(  47)											_g106 = (_g106 + 1);
HXDLIN(  47)											int i41 = (_g106 - 1);
HXDLIN(  47)											{
HXLINE(  47)												 ::haxe::io::ArrayBufferViewImpl this177 = b38->data;
HXDLIN(  47)												bool v59;
HXDLIN(  47)												if ((i41 >= 0)) {
HXLINE(  47)													v59 = (i41 < (this177->byteLength >> 2));
            												}
            												else {
HXLINE(  47)													v59 = false;
            												}
HXDLIN(  47)												if (v59) {
HXLINE(  47)													 ::haxe::io::Bytes _this5 = this177->bytes;
HXDLIN(  47)													int pos5 = ((i41 << 2) + this177->byteOffset);
HXDLIN(  47)													_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  47)													_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)													_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)													_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN(  47)								v58 = b38;
            							}
            							break;
            							case (int)3: {
HXLINE(  47)								 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::VecIntImg v60 = vec5;
HXDLIN(  47)								{
HXLINE(  47)									v60->width = width5;
HXDLIN(  47)									v60->height = height5;
HXDLIN(  47)									v60->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  47)									v60->data = ::Array_obj< int >::__new(v60->length);
HXDLIN(  47)									{
HXLINE(  47)										int _g108 = 0;
HXDLIN(  47)										int _g109 = v60->length;
HXDLIN(  47)										while((_g108 < _g109)){
HXLINE(  47)											_g108 = (_g108 + 1);
HXDLIN(  47)											int i42 = (_g108 - 1);
HXDLIN(  47)											v60->data->__unsafe_set(i42,0);
            										}
            									}
            								}
HXDLIN(  47)								v58 = v60;
            							}
            							break;
            							case (int)4: {
HXLINE(  47)								 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)								 ::iterMagic::StackIntImg b39 = sInt5;
HXDLIN(  47)								{
HXLINE(  47)									b39->width = width5;
HXDLIN(  47)									b39->height = height5;
HXDLIN(  47)									b39->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  47)									b39->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)									{
HXLINE(  47)										int len11 = b39->length;
HXDLIN(  47)										 ::haxe::ds::GenericStack_Int d5 = b39->data;
HXDLIN(  47)										if (::hx::IsNull( d5->head )) {
HXLINE(  47)											int _g110 = 0;
HXDLIN(  47)											int _g111 = len11;
HXDLIN(  47)											while((_g110 < _g111)){
HXLINE(  47)												_g110 = (_g110 + 1);
HXDLIN(  47)												int i43 = (_g110 - 1);
HXDLIN(  47)												d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            											}
            										}
            										else {
HXLINE(  47)											int _g112 = 0;
HXDLIN(  47)											int _g113 = len11;
HXDLIN(  47)											while((_g112 < _g113)){
HXLINE(  47)												_g112 = (_g112 + 1);
HXDLIN(  47)												int i44 = (_g112 - 1);
HXDLIN(  47)												{
HXLINE(  47)													 ::haxe::ds::GenericCell_Int l5 = b39->data->head;
HXDLIN(  47)													 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  47)													{
HXLINE(  47)														int _g114 = 0;
HXDLIN(  47)														int _g115 = i44;
HXDLIN(  47)														while((_g114 < _g115)){
HXLINE(  47)															_g114 = (_g114 + 1);
HXDLIN(  47)															int i45 = (_g114 - 1);
HXLINE( 345)															prev5 = l5;
HXLINE( 346)															l5 = l5->next;
            														}
            													}
HXLINE(  47)													if (::hx::IsNull( prev5 )) {
HXLINE(  47)														b39->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  47)														l5 = null();
            													}
            													else {
HXLINE(  47)														prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  47)														l5 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  47)								v58 = b39;
            							}
            							break;
            						}
HXDLIN(  47)						this176->image = v58;
HXDLIN(  47)						this176->width = width5;
HXDLIN(  47)						this176->height = height5;
HXDLIN(  47)						this176->imageType = ( (int)(imageType5) );
HXDLIN(  47)						 ::pi_xy::ImageStruct nextImage5 = this176;
HXDLIN(  47)						nextImage5->transparent = transparent5;
HXDLIN(  47)						while((_this_min5 < _this_max5)){
HXLINE(  47)							_this_min5 = (_this_min5 + 1);
HXDLIN(  47)							int i46 = (_this_min5 - 1);
HXDLIN(  47)							if ((range_y5 > range_yMax5)) {
HXLINE(  47)								range_y5 = range_yReset5;
HXDLIN(  47)								range_x5 = (range_x5 + 1);
            							}
HXDLIN(  47)							range_y5 = (range_y5 + 1);
HXDLIN(  47)							int i47 = i46;
HXDLIN(  47)							{
HXLINE(  47)								int x32 = range_x5;
HXDLIN(  47)								int y32 = range_y5;
HXDLIN(  47)								int x33 = range_x5;
HXDLIN(  47)								int y33 = (range_yMax5 - range_y5);
HXDLIN(  47)								::Dynamic this178 = this175->image;
HXDLIN(  47)								int index30;
HXDLIN(  47)								if (this175->useVirtualPos) {
HXLINE(  47)									index30 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - this175->virtualY) * ( (Float)(this175->width) )) + x33) - this175->virtualX));
            								}
            								else {
HXLINE(  47)									index30 = ::Std_obj::_hx_int(( (Float)(((y33 * this175->width) + x33)) ));
            								}
HXDLIN(  47)								int c25 = ::iterMagic::Iimg_obj::get(this178,index30);
HXDLIN(  47)								int color5;
HXDLIN(  47)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)									color5 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            								}
            								else {
HXLINE(  47)									color5 = c25;
            								}
HXDLIN(  47)								int c26 = color5;
HXDLIN(  47)								bool v61;
HXDLIN(  47)								if ((((c26 >> 24) & 255) < 254)) {
HXLINE(  47)									v61 = nextImage5->transparent;
            								}
            								else {
HXLINE(  47)									v61 = false;
            								}
HXDLIN(  47)								if (v61) {
HXLINE(  47)									int location10;
HXDLIN(  47)									if (nextImage5->useVirtualPos) {
HXLINE(  47)										location10 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - nextImage5->virtualY) * ( (Float)(nextImage5->width) )) + x32) - nextImage5->virtualX));
            									}
            									else {
HXLINE(  47)										location10 = ::Std_obj::_hx_int(( (Float)(((y32 * nextImage5->width) + x32)) ));
            									}
HXDLIN(  47)									int this179 = ::iterMagic::Iimg_obj::get(nextImage5->image,location10);
HXDLIN(  47)									int this180;
HXDLIN(  47)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)										this180 = ((((((this179 >> 24) & 255) << 24) | ((this179 & 255) << 16)) | (((this179 >> 8) & 255) << 8)) | ((this179 >> 16) & 255));
            									}
            									else {
HXLINE(  47)										this180 = this179;
            									}
HXDLIN(  47)									Float a113;
HXDLIN(  47)									int this181 = ((this180 >> 24) & 255);
HXDLIN(  47)									if ((this181 == 0)) {
HXLINE(  47)										a113 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										a113 = (( (Float)(this181) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float r110;
HXDLIN(  47)									int this182 = ((this180 >> 16) & 255);
HXDLIN(  47)									if ((this182 == 0)) {
HXLINE(  47)										r110 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										r110 = (( (Float)(this182) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float g110;
HXDLIN(  47)									int this183 = ((this180 >> 8) & 255);
HXDLIN(  47)									if ((this183 == 0)) {
HXLINE(  47)										g110 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										g110 = (( (Float)(this183) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float b114;
HXDLIN(  47)									int this184 = (this180 & 255);
HXDLIN(  47)									if ((this184 == 0)) {
HXLINE(  47)										b114 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										b114 = (( (Float)(this184) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float a211;
HXDLIN(  47)									int this185 = ((color5 >> 24) & 255);
HXDLIN(  47)									if ((this185 == 0)) {
HXLINE(  47)										a211 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										a211 = (( (Float)(this185) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float r210;
HXDLIN(  47)									int this186 = ((color5 >> 16) & 255);
HXDLIN(  47)									if ((this186 == 0)) {
HXLINE(  47)										r210 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										r210 = (( (Float)(this186) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float g210;
HXDLIN(  47)									int this187 = ((color5 >> 8) & 255);
HXDLIN(  47)									if ((this187 == 0)) {
HXLINE(  47)										g210 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										g210 = (( (Float)(this187) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float b214;
HXDLIN(  47)									int this188 = (color5 & 255);
HXDLIN(  47)									if ((this188 == 0)) {
HXLINE(  47)										b214 = ((Float)0.);
            									}
            									else {
HXLINE(  47)										b214 = (( (Float)(this188) ) / ( (Float)(255) ));
            									}
HXDLIN(  47)									Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  47)									int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN(  47)									int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN(  47)									int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b214 * a211))));
HXDLIN(  47)									int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  47)									int blended10 = ((((a42 << 24) | (r30 << 16)) | (g30 << 8)) | b40);
HXDLIN(  47)									{
HXLINE(  47)										int v62;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											v62 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											v62 = blended10;
            										}
HXDLIN(  47)										::iterMagic::Iimg_obj::set(nextImage5->image,location10,v62);
            									}
            								}
            								else {
HXLINE(  47)									::Dynamic this189 = nextImage5->image;
HXDLIN(  47)									int index31;
HXDLIN(  47)									if (nextImage5->useVirtualPos) {
HXLINE(  47)										index31 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - nextImage5->virtualY) * ( (Float)(nextImage5->width) )) + x32) - nextImage5->virtualX));
            									}
            									else {
HXLINE(  47)										index31 = ::Std_obj::_hx_int(( (Float)(((y32 * nextImage5->width) + x32)) ));
            									}
HXDLIN(  47)									int v63;
HXDLIN(  47)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)										v63 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            									}
            									else {
HXLINE(  47)										v63 = c26;
            									}
HXDLIN(  47)									::iterMagic::Iimg_obj::set(this189,index31,v63);
            								}
            							}
            						}
HXDLIN(  47)						 ::pi_xy::ImageStruct v64;
HXDLIN(  47)						if (inPlace) {
HXLINE(  47)							{
HXLINE(  47)								int x34 = ::Std_obj::_hx_int(x);
HXDLIN(  47)								int y34 = ::Std_obj::_hx_int(y);
HXDLIN(  47)								bool forceClear5 = false;
HXDLIN(  47)								{
HXLINE(  47)									int _g116 = 0;
HXDLIN(  47)									int _g117 = nextImage5->height;
HXDLIN(  47)									while((_g116 < _g117)){
HXLINE(  47)										_g116 = (_g116 + 1);
HXDLIN(  47)										int dy5 = (_g116 - 1);
HXDLIN(  47)										{
HXLINE(  47)											int _g118 = 0;
HXDLIN(  47)											int _g119 = nextImage5->width;
HXDLIN(  47)											while((_g118 < _g119)){
HXLINE(  47)												_g118 = (_g118 + 1);
HXDLIN(  47)												int dx5 = (_g118 - 1);
HXDLIN(  47)												::Dynamic this190 = nextImage5->image;
HXDLIN(  47)												int index32;
HXDLIN(  47)												if (nextImage5->useVirtualPos) {
HXLINE(  47)													index32 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - nextImage5->virtualY) * ( (Float)(nextImage5->width) )) + dx5) - nextImage5->virtualX));
            												}
            												else {
HXLINE(  47)													index32 = ::Std_obj::_hx_int(( (Float)(((dy5 * nextImage5->width) + dx5)) ));
            												}
HXDLIN(  47)												int c27 = ::iterMagic::Iimg_obj::get(this190,index32);
HXDLIN(  47)												int col5;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													col5 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													col5 = c27;
            												}
HXDLIN(  47)												bool v65;
HXDLIN(  47)												if (nextImage5->useMask) {
HXLINE(  47)													v65 = ::hx::IsNotNull( nextImage5->mask );
            												}
            												else {
HXLINE(  47)													v65 = false;
            												}
HXDLIN(  47)												if (v65) {
HXLINE(  47)													 ::pi_xy::ImageStruct this191 = nextImage5->mask;
HXDLIN(  47)													::Dynamic this192 = this191->image;
HXDLIN(  47)													int index33;
HXDLIN(  47)													if (this191->useVirtualPos) {
HXLINE(  47)														index33 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this191->virtualY) * ( (Float)(this191->width) )) + dx5) - this191->virtualX));
            													}
            													else {
HXLINE(  47)														index33 = ::Std_obj::_hx_int(( (Float)(((dy5 * this191->width) + dx5)) ));
            													}
HXDLIN(  47)													int c28 = ::iterMagic::Iimg_obj::get(this192,index33);
HXDLIN(  47)													int v66;
HXDLIN(  47)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)														v66 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            													}
            													else {
HXLINE(  47)														v66 = c28;
            													}
HXDLIN(  47)													int maskPixel5 = v66;
HXDLIN(  47)													int this193 = col5;
HXDLIN(  47)													if ((maskPixel5 == 0)) {
HXLINE(  47)														col5 = this193;
            													}
            													else {
HXLINE(  47)														Float m05;
HXDLIN(  47)														int this194 = ((maskPixel5 >> 24) & 255);
HXDLIN(  47)														if ((this194 == 0)) {
HXLINE(  47)															m05 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m05 = (( (Float)(this194) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float m15;
HXDLIN(  47)														int this195 = ((maskPixel5 >> 16) & 255);
HXDLIN(  47)														if ((this195 == 0)) {
HXLINE(  47)															m15 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m15 = (( (Float)(this195) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float m25;
HXDLIN(  47)														int this196 = ((maskPixel5 >> 8) & 255);
HXDLIN(  47)														if ((this196 == 0)) {
HXLINE(  47)															m25 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m25 = (( (Float)(this196) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float m35;
HXDLIN(  47)														int this197 = (maskPixel5 & 255);
HXDLIN(  47)														if ((this197 == 0)) {
HXLINE(  47)															m35 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															m35 = (( (Float)(this197) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this193 >> 24) & 255)) )));
HXDLIN(  47)														int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this193 >> 16) & 255)) )));
HXDLIN(  47)														int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this193 >> 8) & 255)) )));
HXDLIN(  47)														int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this193 & 255)) )));
HXDLIN(  47)														col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  47)												if ((col5 != 0)) {
HXLINE(  47)													int x35 = (x34 + dx5);
HXDLIN(  47)													int y35 = (y34 + dy5);
HXDLIN(  47)													int c29 = col5;
HXDLIN(  47)													bool v67;
HXDLIN(  47)													if ((((c29 >> 24) & 255) < 254)) {
HXLINE(  47)														v67 = this175->transparent;
            													}
            													else {
HXLINE(  47)														v67 = false;
            													}
HXDLIN(  47)													if (v67) {
HXLINE(  47)														int location11;
HXDLIN(  47)														if (this175->useVirtualPos) {
HXLINE(  47)															location11 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this175->virtualY) * ( (Float)(this175->width) )) + x35) - this175->virtualX));
            														}
            														else {
HXLINE(  47)															location11 = ::Std_obj::_hx_int(( (Float)(((y35 * this175->width) + x35)) ));
            														}
HXDLIN(  47)														int this198 = ::iterMagic::Iimg_obj::get(this175->image,location11);
HXDLIN(  47)														int this199;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															this199 = ((((((this198 >> 24) & 255) << 24) | ((this198 & 255) << 16)) | (((this198 >> 8) & 255) << 8)) | ((this198 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															this199 = this198;
            														}
HXDLIN(  47)														Float a114;
HXDLIN(  47)														int this200 = ((this199 >> 24) & 255);
HXDLIN(  47)														if ((this200 == 0)) {
HXLINE(  47)															a114 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															a114 = (( (Float)(this200) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float r111;
HXDLIN(  47)														int this201 = ((this199 >> 16) & 255);
HXDLIN(  47)														if ((this201 == 0)) {
HXLINE(  47)															r111 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															r111 = (( (Float)(this201) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float g111;
HXDLIN(  47)														int this202 = ((this199 >> 8) & 255);
HXDLIN(  47)														if ((this202 == 0)) {
HXLINE(  47)															g111 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															g111 = (( (Float)(this202) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float b115;
HXDLIN(  47)														int this203 = (this199 & 255);
HXDLIN(  47)														if ((this203 == 0)) {
HXLINE(  47)															b115 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															b115 = (( (Float)(this203) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float a212;
HXDLIN(  47)														int this204 = ((col5 >> 24) & 255);
HXDLIN(  47)														if ((this204 == 0)) {
HXLINE(  47)															a212 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															a212 = (( (Float)(this204) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float r211;
HXDLIN(  47)														int this205 = ((col5 >> 16) & 255);
HXDLIN(  47)														if ((this205 == 0)) {
HXLINE(  47)															r211 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															r211 = (( (Float)(this205) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float g211;
HXDLIN(  47)														int this206 = ((col5 >> 8) & 255);
HXDLIN(  47)														if ((this206 == 0)) {
HXLINE(  47)															g211 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															g211 = (( (Float)(this206) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float b215;
HXDLIN(  47)														int this207 = (col5 & 255);
HXDLIN(  47)														if ((this207 == 0)) {
HXLINE(  47)															b215 = ((Float)0.);
            														}
            														else {
HXLINE(  47)															b215 = (( (Float)(this207) ) / ( (Float)(255) ));
            														}
HXDLIN(  47)														Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  47)														int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r211 * a212))));
HXDLIN(  47)														int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g211 * a212))));
HXDLIN(  47)														int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b215 * a212))));
HXDLIN(  47)														int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  47)														int blended11 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b41);
HXDLIN(  47)														{
HXLINE(  47)															int v68;
HXDLIN(  47)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																v68 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            															}
            															else {
HXLINE(  47)																v68 = blended11;
            															}
HXDLIN(  47)															::iterMagic::Iimg_obj::set(this175->image,location11,v68);
            														}
            													}
            													else {
HXLINE(  47)														::Dynamic this208 = this175->image;
HXDLIN(  47)														int index34;
HXDLIN(  47)														if (this175->useVirtualPos) {
HXLINE(  47)															index34 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this175->virtualY) * ( (Float)(this175->width) )) + x35) - this175->virtualX));
            														}
            														else {
HXLINE(  47)															index34 = ::Std_obj::_hx_int(( (Float)(((y35 * this175->width) + x35)) ));
            														}
HXDLIN(  47)														int v69;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															v69 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															v69 = c29;
            														}
HXDLIN(  47)														::iterMagic::Iimg_obj::set(this208,index34,v69);
            													}
            												}
            												else {
HXLINE(  47)													if (forceClear5) {
HXLINE(  47)														::Dynamic this209 = this175->image;
HXDLIN(  47)														int x36 = (x34 + dx5);
HXDLIN(  47)														int y36 = (y34 + dy5);
HXDLIN(  47)														int index35;
HXDLIN(  47)														if (this175->useVirtualPos) {
HXLINE(  47)															index35 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - this175->virtualY) * ( (Float)(this175->width) )) + x36) - this175->virtualX));
            														}
            														else {
HXLINE(  47)															index35 = ::Std_obj::_hx_int(( (Float)(((y36 * this175->width) + x36)) ));
            														}
HXDLIN(  47)														::iterMagic::Iimg_obj::set(this209,index35,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  47)							bool v70;
HXDLIN(  47)							if (::hx::IsNotNull( this175->mask )) {
HXLINE(  47)								v70 = includeMask;
            							}
            							else {
HXLINE(  47)								v70 = false;
            							}
HXDLIN(  47)							if (v70) {
HXLINE(  47)								 ::pi_xy::ImageStruct this210 = this175->mask;
HXDLIN(  47)								Float w12 = ( (Float)(this175->width) );
HXDLIN(  47)								Float h6 = ( (Float)(this175->height) );
HXDLIN(  47)								bool transparent6 = this175->mask->transparent;
HXDLIN(  47)								Float r_x6 = x;
HXDLIN(  47)								Float r_y6 = y;
HXDLIN(  47)								Float r_w6 = w12;
HXDLIN(  47)								Float r_h6 = h6;
HXDLIN(  47)								int xmax6 = ::Std_obj::_hx_int(((r_x6 + r_w6) + 1));
HXDLIN(  47)								int ymax6 = ::Std_obj::_hx_int(((r_y6 + r_h6) + 1));
HXDLIN(  47)								int ii_min12 = ::Std_obj::_hx_int(r_x6);
HXDLIN(  47)								int ii_max12 = xmax6;
HXDLIN(  47)								int xRange__start6 = ii_min12;
HXDLIN(  47)								int xRange__max6 = ii_max12;
HXDLIN(  47)								int ii_min13 = ::Std_obj::_hx_int(r_y6);
HXDLIN(  47)								int ii_max13 = ymax6;
HXDLIN(  47)								int yRange__start6 = ii_min13;
HXDLIN(  47)								int yRange__max6 = ii_max13;
HXDLIN(  47)								int range_x6 = xRange__start6;
HXDLIN(  47)								int range_y6 = (yRange__start6 - 1);
HXDLIN(  47)								int range_xReset6 = range_x6;
HXDLIN(  47)								int range_yReset6 = range_y6;
HXDLIN(  47)								int range_xMax6 = (xRange__max6 - 2);
HXDLIN(  47)								int range_yMax6 = (yRange__max6 - 2);
HXDLIN(  47)								int _this_min6 = 0;
HXDLIN(  47)								int _this_max6 = ::Std_obj::_hx_int(( (Float)(((xRange__max6 - xRange__start6) * (yRange__max6 - yRange__start6))) ));
HXDLIN(  47)								int width6 = ::Std_obj::_hx_int(w12);
HXDLIN(  47)								int height6 = ::Std_obj::_hx_int(h6);
HXDLIN(  47)								 ::Dynamic imageType6 = null();
HXDLIN(  47)								 ::pi_xy::ImageStruct this211 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)								if (::hx::IsNull( imageType6 )) {
HXLINE(  54)									imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE(  47)								::Dynamic v71;
HXDLIN(  47)								switch((int)(( (int)(imageType6) ))){
            									case (int)0: {
HXLINE(  47)										 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::BytesImg b42 = byt6;
HXDLIN(  47)										{
HXLINE(  47)											b42->width = width6;
HXDLIN(  47)											b42->height = height6;
HXDLIN(  47)											b42->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  47)											b42->data = ::haxe::io::Bytes_obj::alloc((b42->length * 4));
HXDLIN(  47)											{
HXLINE(  47)												int len12 = b42->length;
HXDLIN(  47)												int w13 = 0;
HXDLIN(  47)												{
HXLINE(  47)													int _g120 = 0;
HXDLIN(  47)													int _g121 = b42->height;
HXDLIN(  47)													while((_g120 < _g121)){
HXLINE(  47)														_g120 = (_g120 + 1);
HXDLIN(  47)														int y37 = (_g120 - 1);
HXDLIN(  47)														{
HXLINE(  47)															int _g122 = 0;
HXDLIN(  47)															int _g123 = b42->width;
HXDLIN(  47)															while((_g122 < _g123)){
HXLINE(  47)																_g122 = (_g122 + 1);
HXDLIN(  47)																int x37 = (_g122 - 1);
HXDLIN(  47)																{
HXLINE(  47)																	w13 = (w13 + 1);
HXDLIN(  47)																	b42->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w13 = (w13 + 1);
HXDLIN(  47)																	b42->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w13 = (w13 + 1);
HXDLIN(  47)																	b42->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w13 = (w13 + 1);
HXDLIN(  47)																	b42->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v71 = b42;
            									}
            									break;
            									case (int)1: {
HXLINE(  47)										 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::ArrIntImg a44 = arrI6;
HXDLIN(  47)										{
HXLINE(  47)											a44->width = width6;
HXDLIN(  47)											a44->height = height6;
HXDLIN(  47)											a44->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)											a44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  47)											{
HXLINE(  47)												int _g124 = 0;
HXDLIN(  47)												int _g125 = a44->length;
HXDLIN(  47)												while((_g124 < _g125)){
HXLINE(  47)													_g124 = (_g124 + 1);
HXDLIN(  47)													int i48 = (_g124 - 1);
HXDLIN(  47)													a44->data[i48] = 0;
            												}
            											}
            										}
HXDLIN(  47)										v71 = a44;
            									}
            									break;
            									case (int)2: {
HXLINE(  47)										 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::U32ArrImg b43 = u32a6;
HXDLIN(  47)										{
HXLINE(  47)											b43->width = width6;
HXDLIN(  47)											b43->height = height6;
HXDLIN(  47)											b43->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  47)											int size6 = (b43->length * 4);
HXDLIN(  47)											b43->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  47)											{
HXLINE(  47)												int _g126 = 0;
HXDLIN(  47)												int _g127 = b43->length;
HXDLIN(  47)												while((_g126 < _g127)){
HXLINE(  47)													_g126 = (_g126 + 1);
HXDLIN(  47)													int i49 = (_g126 - 1);
HXDLIN(  47)													{
HXLINE(  47)														 ::haxe::io::ArrayBufferViewImpl this212 = b43->data;
HXDLIN(  47)														bool v72;
HXDLIN(  47)														if ((i49 >= 0)) {
HXLINE(  47)															v72 = (i49 < (this212->byteLength >> 2));
            														}
            														else {
HXLINE(  47)															v72 = false;
            														}
HXDLIN(  47)														if (v72) {
HXLINE(  47)															 ::haxe::io::Bytes _this6 = this212->bytes;
HXDLIN(  47)															int pos6 = ((i49 << 2) + this212->byteOffset);
HXDLIN(  47)															_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  47)															_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v71 = b43;
            									}
            									break;
            									case (int)3: {
HXLINE(  47)										 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::VecIntImg v73 = vec6;
HXDLIN(  47)										{
HXLINE(  47)											v73->width = width6;
HXDLIN(  47)											v73->height = height6;
HXDLIN(  47)											v73->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  47)											v73->data = ::Array_obj< int >::__new(v73->length);
HXDLIN(  47)											{
HXLINE(  47)												int _g128 = 0;
HXDLIN(  47)												int _g129 = v73->length;
HXDLIN(  47)												while((_g128 < _g129)){
HXLINE(  47)													_g128 = (_g128 + 1);
HXDLIN(  47)													int i50 = (_g128 - 1);
HXDLIN(  47)													v73->data->__unsafe_set(i50,0);
            												}
            											}
            										}
HXDLIN(  47)										v71 = v73;
            									}
            									break;
            									case (int)4: {
HXLINE(  47)										 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::StackIntImg b44 = sInt6;
HXDLIN(  47)										{
HXLINE(  47)											b44->width = width6;
HXDLIN(  47)											b44->height = height6;
HXDLIN(  47)											b44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  47)											b44->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)											{
HXLINE(  47)												int len13 = b44->length;
HXDLIN(  47)												 ::haxe::ds::GenericStack_Int d6 = b44->data;
HXDLIN(  47)												if (::hx::IsNull( d6->head )) {
HXLINE(  47)													int _g130 = 0;
HXDLIN(  47)													int _g131 = len13;
HXDLIN(  47)													while((_g130 < _g131)){
HXLINE(  47)														_g130 = (_g130 + 1);
HXDLIN(  47)														int i51 = (_g130 - 1);
HXDLIN(  47)														d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            													}
            												}
            												else {
HXLINE(  47)													int _g132 = 0;
HXDLIN(  47)													int _g133 = len13;
HXDLIN(  47)													while((_g132 < _g133)){
HXLINE(  47)														_g132 = (_g132 + 1);
HXDLIN(  47)														int i52 = (_g132 - 1);
HXDLIN(  47)														{
HXLINE(  47)															 ::haxe::ds::GenericCell_Int l6 = b44->data->head;
HXDLIN(  47)															 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  47)															{
HXLINE(  47)																int _g134 = 0;
HXDLIN(  47)																int _g135 = i52;
HXDLIN(  47)																while((_g134 < _g135)){
HXLINE(  47)																	_g134 = (_g134 + 1);
HXDLIN(  47)																	int i53 = (_g134 - 1);
HXLINE( 345)																	prev6 = l6;
HXLINE( 346)																	l6 = l6->next;
            																}
            															}
HXLINE(  47)															if (::hx::IsNull( prev6 )) {
HXLINE(  47)																b44->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  47)																l6 = null();
            															}
            															else {
HXLINE(  47)																prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  47)																l6 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v71 = b44;
            									}
            									break;
            								}
HXDLIN(  47)								this211->image = v71;
HXDLIN(  47)								this211->width = width6;
HXDLIN(  47)								this211->height = height6;
HXDLIN(  47)								this211->imageType = ( (int)(imageType6) );
HXDLIN(  47)								 ::pi_xy::ImageStruct nextImage6 = this211;
HXDLIN(  47)								nextImage6->transparent = transparent6;
HXDLIN(  47)								while((_this_min6 < _this_max6)){
HXLINE(  47)									_this_min6 = (_this_min6 + 1);
HXDLIN(  47)									int i54 = (_this_min6 - 1);
HXDLIN(  47)									if ((range_y6 > range_yMax6)) {
HXLINE(  34)										range_y6 = range_yReset6;
HXLINE(  47)										range_x6 = (range_x6 + 1);
            									}
HXDLIN(  47)									range_y6 = (range_y6 + 1);
HXDLIN(  47)									int i55 = i54;
HXDLIN(  47)									{
HXLINE(  47)										int x38 = range_x6;
HXDLIN(  47)										int y38 = range_y6;
HXDLIN(  47)										int x39 = range_x6;
HXDLIN(  47)										int y39 = (range_yMax6 - range_y6);
HXDLIN(  47)										::Dynamic this213 = this210->image;
HXDLIN(  47)										int index36;
HXDLIN(  47)										if (this210->useVirtualPos) {
HXLINE(  47)											index36 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this210->virtualY) * ( (Float)(this210->width) )) + x39) - this210->virtualX));
            										}
            										else {
HXLINE(  47)											index36 = ::Std_obj::_hx_int(( (Float)(((y39 * this210->width) + x39)) ));
            										}
HXDLIN(  47)										int c30 = ::iterMagic::Iimg_obj::get(this213,index36);
HXDLIN(  47)										int color6;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											color6 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											color6 = c30;
            										}
HXDLIN(  47)										int c31 = color6;
HXDLIN(  47)										bool v74;
HXDLIN(  47)										if ((((c31 >> 24) & 255) < 254)) {
HXLINE(  47)											v74 = nextImage6->transparent;
            										}
            										else {
HXLINE(  47)											v74 = false;
            										}
HXDLIN(  47)										if (v74) {
HXLINE(  47)											int location12;
HXDLIN(  47)											if (nextImage6->useVirtualPos) {
HXLINE(  47)												location12 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - nextImage6->virtualY) * ( (Float)(nextImage6->width) )) + x38) - nextImage6->virtualX));
            											}
            											else {
HXLINE(  47)												location12 = ::Std_obj::_hx_int(( (Float)(((y38 * nextImage6->width) + x38)) ));
            											}
HXDLIN(  47)											int this214 = ::iterMagic::Iimg_obj::get(nextImage6->image,location12);
HXDLIN(  47)											int this215;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												this215 = ((((((this214 >> 24) & 255) << 24) | ((this214 & 255) << 16)) | (((this214 >> 8) & 255) << 8)) | ((this214 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												this215 = this214;
            											}
HXDLIN(  47)											Float a115;
HXDLIN(  47)											int this216 = ((this215 >> 24) & 255);
HXDLIN(  47)											if ((this216 == 0)) {
HXLINE(  47)												a115 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a115 = (( (Float)(this216) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r112;
HXDLIN(  47)											int this217 = ((this215 >> 16) & 255);
HXDLIN(  47)											if ((this217 == 0)) {
HXLINE(  47)												r112 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r112 = (( (Float)(this217) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g112;
HXDLIN(  47)											int this218 = ((this215 >> 8) & 255);
HXDLIN(  47)											if ((this218 == 0)) {
HXLINE(  47)												g112 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g112 = (( (Float)(this218) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b116;
HXDLIN(  47)											int this219 = (this215 & 255);
HXDLIN(  47)											if ((this219 == 0)) {
HXLINE(  47)												b116 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b116 = (( (Float)(this219) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a213;
HXDLIN(  47)											int this220 = ((color6 >> 24) & 255);
HXDLIN(  47)											if ((this220 == 0)) {
HXLINE(  47)												a213 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a213 = (( (Float)(this220) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r212;
HXDLIN(  47)											int this221 = ((color6 >> 16) & 255);
HXDLIN(  47)											if ((this221 == 0)) {
HXLINE(  47)												r212 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r212 = (( (Float)(this221) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g212;
HXDLIN(  47)											int this222 = ((color6 >> 8) & 255);
HXDLIN(  47)											if ((this222 == 0)) {
HXLINE(  47)												g212 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g212 = (( (Float)(this222) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b216;
HXDLIN(  47)											int this223 = (color6 & 255);
HXDLIN(  47)											if ((this223 == 0)) {
HXLINE(  47)												b216 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b216 = (( (Float)(this223) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  47)											int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r212 * a213))));
HXDLIN(  47)											int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g212 * a213))));
HXDLIN(  47)											int b45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b216 * a213))));
HXDLIN(  47)											int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  47)											int blended12 = ((((a45 << 24) | (r32 << 16)) | (g32 << 8)) | b45);
HXDLIN(  47)											{
HXLINE(  47)												int v75;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													v75 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													v75 = blended12;
            												}
HXDLIN(  47)												::iterMagic::Iimg_obj::set(nextImage6->image,location12,v75);
            											}
            										}
            										else {
HXLINE(  47)											::Dynamic this224 = nextImage6->image;
HXDLIN(  47)											int index37;
HXDLIN(  47)											if (nextImage6->useVirtualPos) {
HXLINE(  47)												index37 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - nextImage6->virtualY) * ( (Float)(nextImage6->width) )) + x38) - nextImage6->virtualX));
            											}
            											else {
HXLINE(  47)												index37 = ::Std_obj::_hx_int(( (Float)(((y38 * nextImage6->width) + x38)) ));
            											}
HXDLIN(  47)											int v76;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												v76 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												v76 = c31;
            											}
HXDLIN(  47)											::iterMagic::Iimg_obj::set(this224,index37,v76);
            										}
            									}
            								}
HXDLIN(  47)								 ::pi_xy::ImageStruct v77;
HXDLIN(  47)								if (inPlace) {
HXLINE(  47)									{
HXLINE(  47)										int x40 = ::Std_obj::_hx_int(x);
HXDLIN(  47)										int y40 = ::Std_obj::_hx_int(y);
HXDLIN(  47)										bool forceClear6 = false;
HXDLIN(  47)										{
HXLINE(  47)											int _g136 = 0;
HXDLIN(  47)											int _g137 = nextImage6->height;
HXDLIN(  47)											while((_g136 < _g137)){
HXLINE(  47)												_g136 = (_g136 + 1);
HXDLIN(  47)												int dy6 = (_g136 - 1);
HXDLIN(  47)												{
HXLINE(  47)													int _g138 = 0;
HXDLIN(  47)													int _g139 = nextImage6->width;
HXDLIN(  47)													while((_g138 < _g139)){
HXLINE(  47)														_g138 = (_g138 + 1);
HXDLIN(  47)														int dx6 = (_g138 - 1);
HXDLIN(  47)														::Dynamic this225 = nextImage6->image;
HXDLIN(  47)														int index38;
HXDLIN(  47)														if (nextImage6->useVirtualPos) {
HXLINE(  47)															index38 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - nextImage6->virtualY) * ( (Float)(nextImage6->width) )) + dx6) - nextImage6->virtualX));
            														}
            														else {
HXLINE(  47)															index38 = ::Std_obj::_hx_int(( (Float)(((dy6 * nextImage6->width) + dx6)) ));
            														}
HXDLIN(  47)														int c32 = ::iterMagic::Iimg_obj::get(this225,index38);
HXDLIN(  47)														int col6;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															col6 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															col6 = c32;
            														}
HXDLIN(  47)														bool v78;
HXDLIN(  47)														if (nextImage6->useMask) {
HXLINE(  47)															v78 = ::hx::IsNotNull( nextImage6->mask );
            														}
            														else {
HXLINE(  47)															v78 = false;
            														}
HXDLIN(  47)														if (v78) {
HXLINE(  47)															 ::pi_xy::ImageStruct this226 = nextImage6->mask;
HXDLIN(  47)															::Dynamic this227 = this226->image;
HXDLIN(  47)															int index39;
HXDLIN(  47)															if (this226->useVirtualPos) {
HXLINE(  47)																index39 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this226->virtualY) * ( (Float)(this226->width) )) + dx6) - this226->virtualX));
            															}
            															else {
HXLINE(  47)																index39 = ::Std_obj::_hx_int(( (Float)(((dy6 * this226->width) + dx6)) ));
            															}
HXDLIN(  47)															int c33 = ::iterMagic::Iimg_obj::get(this227,index39);
HXDLIN(  47)															int v79;
HXDLIN(  47)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																v79 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            															}
            															else {
HXLINE(  47)																v79 = c33;
            															}
HXDLIN(  47)															int maskPixel6 = v79;
HXDLIN(  47)															int this228 = col6;
HXDLIN(  47)															if ((maskPixel6 == 0)) {
HXLINE(  47)																col6 = this228;
            															}
            															else {
HXLINE(  47)																Float m06;
HXDLIN(  47)																int this229 = ((maskPixel6 >> 24) & 255);
HXDLIN(  47)																if ((this229 == 0)) {
HXLINE(  47)																	m06 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m06 = (( (Float)(this229) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m16;
HXDLIN(  47)																int this230 = ((maskPixel6 >> 16) & 255);
HXDLIN(  47)																if ((this230 == 0)) {
HXLINE(  47)																	m16 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m16 = (( (Float)(this230) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m26;
HXDLIN(  47)																int this231 = ((maskPixel6 >> 8) & 255);
HXDLIN(  47)																if ((this231 == 0)) {
HXLINE(  47)																	m26 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m26 = (( (Float)(this231) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m36;
HXDLIN(  47)																int this232 = (maskPixel6 & 255);
HXDLIN(  47)																if ((this232 == 0)) {
HXLINE(  47)																	m36 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m36 = (( (Float)(this232) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this228 >> 24) & 255)) )));
HXDLIN(  47)																int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this228 >> 16) & 255)) )));
HXDLIN(  47)																int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this228 >> 8) & 255)) )));
HXDLIN(  47)																int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this228 & 255)) )));
HXDLIN(  47)																col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  47)														if ((col6 != 0)) {
HXLINE(  47)															int x41 = (x40 + dx6);
HXDLIN(  47)															int y41 = (y40 + dy6);
HXDLIN(  47)															int c34 = col6;
HXDLIN(  47)															bool v80;
HXDLIN(  47)															if ((((c34 >> 24) & 255) < 254)) {
HXLINE(  47)																v80 = this210->transparent;
            															}
            															else {
HXLINE(  47)																v80 = false;
            															}
HXDLIN(  47)															if (v80) {
HXLINE(  47)																int location13;
HXDLIN(  47)																if (this210->useVirtualPos) {
HXLINE(  47)																	location13 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this210->virtualY) * ( (Float)(this210->width) )) + x41) - this210->virtualX));
            																}
            																else {
HXLINE(  47)																	location13 = ::Std_obj::_hx_int(( (Float)(((y41 * this210->width) + x41)) ));
            																}
HXDLIN(  47)																int this233 = ::iterMagic::Iimg_obj::get(this210->image,location13);
HXDLIN(  47)																int this234;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	this234 = ((((((this233 >> 24) & 255) << 24) | ((this233 & 255) << 16)) | (((this233 >> 8) & 255) << 8)) | ((this233 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	this234 = this233;
            																}
HXDLIN(  47)																Float a116;
HXDLIN(  47)																int this235 = ((this234 >> 24) & 255);
HXDLIN(  47)																if ((this235 == 0)) {
HXLINE(  47)																	a116 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a116 = (( (Float)(this235) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r113;
HXDLIN(  47)																int this236 = ((this234 >> 16) & 255);
HXDLIN(  47)																if ((this236 == 0)) {
HXLINE(  47)																	r113 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r113 = (( (Float)(this236) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g113;
HXDLIN(  47)																int this237 = ((this234 >> 8) & 255);
HXDLIN(  47)																if ((this237 == 0)) {
HXLINE(  47)																	g113 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g113 = (( (Float)(this237) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b117;
HXDLIN(  47)																int this238 = (this234 & 255);
HXDLIN(  47)																if ((this238 == 0)) {
HXLINE(  47)																	b117 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b117 = (( (Float)(this238) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a214;
HXDLIN(  47)																int this239 = ((col6 >> 24) & 255);
HXDLIN(  47)																if ((this239 == 0)) {
HXLINE(  47)																	a214 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a214 = (( (Float)(this239) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r213;
HXDLIN(  47)																int this240 = ((col6 >> 16) & 255);
HXDLIN(  47)																if ((this240 == 0)) {
HXLINE(  47)																	r213 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r213 = (( (Float)(this240) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g213;
HXDLIN(  47)																int this241 = ((col6 >> 8) & 255);
HXDLIN(  47)																if ((this241 == 0)) {
HXLINE(  47)																	g213 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g213 = (( (Float)(this241) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b217;
HXDLIN(  47)																int this242 = (col6 & 255);
HXDLIN(  47)																if ((this242 == 0)) {
HXLINE(  47)																	b217 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b217 = (( (Float)(this242) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  47)																int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r213 * a214))));
HXDLIN(  47)																int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g213 * a214))));
HXDLIN(  47)																int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b217 * a214))));
HXDLIN(  47)																int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  47)																int blended13 = ((((a46 << 24) | (r33 << 16)) | (g33 << 8)) | b46);
HXDLIN(  47)																{
HXLINE(  47)																	int v81;
HXDLIN(  47)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																		v81 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            																	}
            																	else {
HXLINE(  47)																		v81 = blended13;
            																	}
HXDLIN(  47)																	::iterMagic::Iimg_obj::set(this210->image,location13,v81);
            																}
            															}
            															else {
HXLINE(  47)																::Dynamic this243 = this210->image;
HXDLIN(  47)																int index40;
HXDLIN(  47)																if (this210->useVirtualPos) {
HXLINE(  47)																	index40 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this210->virtualY) * ( (Float)(this210->width) )) + x41) - this210->virtualX));
            																}
            																else {
HXLINE(  47)																	index40 = ::Std_obj::_hx_int(( (Float)(((y41 * this210->width) + x41)) ));
            																}
HXDLIN(  47)																int v82;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	v82 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	v82 = c34;
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this243,index40,v82);
            															}
            														}
            														else {
HXLINE(  47)															if (forceClear6) {
HXLINE(  47)																::Dynamic this244 = this210->image;
HXDLIN(  47)																int x42 = (x40 + dx6);
HXDLIN(  47)																int y42 = (y40 + dy6);
HXDLIN(  47)																int index41;
HXDLIN(  47)																if (this210->useVirtualPos) {
HXLINE(  47)																	index41 = ::Std_obj::_hx_int(((((( (Float)(y42) ) - this210->virtualY) * ( (Float)(this210->width) )) + x42) - this210->virtualX));
            																}
            																else {
HXLINE(  47)																	index41 = ::Std_obj::_hx_int(( (Float)(((y42 * this210->width) + x42)) ));
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this244,index41,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  47)									bool v83;
HXDLIN(  47)									if (::hx::IsNotNull( this210->mask )) {
HXLINE(  47)										v83 = includeMask;
            									}
            									else {
HXLINE(  47)										v83 = false;
            									}
HXDLIN(  47)									if (v83) {
HXLINE(  47)										 ::pi_xy::ImageStruct v84 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this210->mask,x,y,( (Float)(this210->width) ),( (Float)(this210->height) ),this210->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										this210->useMask = true;
HXDLIN(  47)										this210->mask = v84;
            									}
HXLINE(  91)									nextImage6 = null();
HXLINE(  47)									v77 = this210;
            								}
            								else {
HXLINE(  47)									bool v85;
HXDLIN(  47)									if (::hx::IsNotNull( this210->mask )) {
HXLINE(  47)										v85 = includeMask;
            									}
            									else {
HXLINE(  47)										v85 = false;
            									}
HXDLIN(  47)									if (v85) {
HXLINE(  47)										 ::pi_xy::ImageStruct v86 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this210->mask,x,y,( (Float)(this210->width) ),( (Float)(this210->height) ),this210->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										nextImage6->useMask = true;
HXDLIN(  47)										nextImage6->mask = v86;
            									}
HXDLIN(  47)									v77 = nextImage6;
            								}
HXDLIN(  47)								this175->useMask = true;
HXDLIN(  47)								this175->mask = v77;
            							}
HXLINE(  91)							nextImage5 = null();
HXLINE(  47)							v64 = this175;
            						}
            						else {
HXLINE(  47)							bool v87;
HXDLIN(  47)							if (::hx::IsNotNull( this175->mask )) {
HXLINE(  47)								v87 = includeMask;
            							}
            							else {
HXLINE(  47)								v87 = false;
            							}
HXDLIN(  47)							if (v87) {
HXLINE(  47)								 ::pi_xy::ImageStruct this245 = this175->mask;
HXDLIN(  47)								Float w14 = ( (Float)(this175->width) );
HXDLIN(  47)								Float h7 = ( (Float)(this175->height) );
HXDLIN(  47)								bool transparent7 = this175->mask->transparent;
HXDLIN(  47)								Float r_x7 = x;
HXDLIN(  47)								Float r_y7 = y;
HXDLIN(  47)								Float r_w7 = w14;
HXDLIN(  47)								Float r_h7 = h7;
HXDLIN(  47)								int xmax7 = ::Std_obj::_hx_int(((r_x7 + r_w7) + 1));
HXDLIN(  47)								int ymax7 = ::Std_obj::_hx_int(((r_y7 + r_h7) + 1));
HXDLIN(  47)								int ii_min14 = ::Std_obj::_hx_int(r_x7);
HXDLIN(  47)								int ii_max14 = xmax7;
HXDLIN(  47)								int xRange__start7 = ii_min14;
HXDLIN(  47)								int xRange__max7 = ii_max14;
HXDLIN(  47)								int ii_min15 = ::Std_obj::_hx_int(r_y7);
HXDLIN(  47)								int ii_max15 = ymax7;
HXDLIN(  47)								int yRange__start7 = ii_min15;
HXDLIN(  47)								int yRange__max7 = ii_max15;
HXDLIN(  47)								int range_x7 = xRange__start7;
HXDLIN(  47)								int range_y7 = (yRange__start7 - 1);
HXDLIN(  47)								int range_xReset7 = range_x7;
HXDLIN(  47)								int range_yReset7 = range_y7;
HXDLIN(  47)								int range_xMax7 = (xRange__max7 - 2);
HXDLIN(  47)								int range_yMax7 = (yRange__max7 - 2);
HXDLIN(  47)								int _this_min7 = 0;
HXDLIN(  47)								int _this_max7 = ::Std_obj::_hx_int(( (Float)(((xRange__max7 - xRange__start7) * (yRange__max7 - yRange__start7))) ));
HXDLIN(  47)								int width7 = ::Std_obj::_hx_int(w14);
HXDLIN(  47)								int height7 = ::Std_obj::_hx_int(h7);
HXDLIN(  47)								 ::Dynamic imageType7 = null();
HXDLIN(  47)								 ::pi_xy::ImageStruct this246 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  47)								if (::hx::IsNull( imageType7 )) {
HXLINE(  54)									imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE(  47)								::Dynamic v88;
HXDLIN(  47)								switch((int)(( (int)(imageType7) ))){
            									case (int)0: {
HXLINE(  47)										 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::BytesImg b47 = byt7;
HXDLIN(  47)										{
HXLINE(  47)											b47->width = width7;
HXDLIN(  47)											b47->height = height7;
HXDLIN(  47)											b47->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  47)											b47->data = ::haxe::io::Bytes_obj::alloc((b47->length * 4));
HXDLIN(  47)											{
HXLINE(  47)												int len14 = b47->length;
HXDLIN(  47)												int w15 = 0;
HXDLIN(  47)												{
HXLINE(  47)													int _g140 = 0;
HXDLIN(  47)													int _g141 = b47->height;
HXDLIN(  47)													while((_g140 < _g141)){
HXLINE(  47)														_g140 = (_g140 + 1);
HXDLIN(  47)														int y43 = (_g140 - 1);
HXDLIN(  47)														{
HXLINE(  47)															int _g142 = 0;
HXDLIN(  47)															int _g143 = b47->width;
HXDLIN(  47)															while((_g142 < _g143)){
HXLINE(  47)																_g142 = (_g142 + 1);
HXDLIN(  47)																int x43 = (_g142 - 1);
HXDLIN(  47)																{
HXLINE(  47)																	w15 = (w15 + 1);
HXDLIN(  47)																	b47->data->b[(w15 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w15 = (w15 + 1);
HXDLIN(  47)																	b47->data->b[(w15 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w15 = (w15 + 1);
HXDLIN(  47)																	b47->data->b[(w15 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN(  47)																{
HXLINE(  47)																	w15 = (w15 + 1);
HXDLIN(  47)																	b47->data->b[(w15 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v88 = b47;
            									}
            									break;
            									case (int)1: {
HXLINE(  47)										 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::ArrIntImg a47 = arrI7;
HXDLIN(  47)										{
HXLINE(  47)											a47->width = width7;
HXDLIN(  47)											a47->height = height7;
HXDLIN(  47)											a47->data = ::Array_obj< int >::__new(0);
HXDLIN(  47)											a47->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  47)											{
HXLINE(  47)												int _g144 = 0;
HXDLIN(  47)												int _g145 = a47->length;
HXDLIN(  47)												while((_g144 < _g145)){
HXLINE(  47)													_g144 = (_g144 + 1);
HXDLIN(  47)													int i56 = (_g144 - 1);
HXDLIN(  47)													a47->data[i56] = 0;
            												}
            											}
            										}
HXDLIN(  47)										v88 = a47;
            									}
            									break;
            									case (int)2: {
HXLINE(  47)										 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::U32ArrImg b48 = u32a7;
HXDLIN(  47)										{
HXLINE(  47)											b48->width = width7;
HXDLIN(  47)											b48->height = height7;
HXDLIN(  47)											b48->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  47)											int size7 = (b48->length * 4);
HXDLIN(  47)											b48->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  47)											{
HXLINE(  47)												int _g146 = 0;
HXDLIN(  47)												int _g147 = b48->length;
HXDLIN(  47)												while((_g146 < _g147)){
HXLINE(  47)													_g146 = (_g146 + 1);
HXDLIN(  47)													int i57 = (_g146 - 1);
HXDLIN(  47)													{
HXLINE(  47)														 ::haxe::io::ArrayBufferViewImpl this247 = b48->data;
HXDLIN(  47)														bool v89;
HXDLIN(  47)														if ((i57 >= 0)) {
HXLINE(  47)															v89 = (i57 < (this247->byteLength >> 2));
            														}
            														else {
HXLINE(  47)															v89 = false;
            														}
HXDLIN(  47)														if (v89) {
HXLINE(  47)															 ::haxe::io::Bytes _this7 = this247->bytes;
HXDLIN(  47)															int pos7 = ((i57 << 2) + this247->byteOffset);
HXDLIN(  47)															_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  47)															_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  47)															_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v88 = b48;
            									}
            									break;
            									case (int)3: {
HXLINE(  47)										 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::VecIntImg v90 = vec7;
HXDLIN(  47)										{
HXLINE(  47)											v90->width = width7;
HXDLIN(  47)											v90->height = height7;
HXDLIN(  47)											v90->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  47)											v90->data = ::Array_obj< int >::__new(v90->length);
HXDLIN(  47)											{
HXLINE(  47)												int _g148 = 0;
HXDLIN(  47)												int _g149 = v90->length;
HXDLIN(  47)												while((_g148 < _g149)){
HXLINE(  47)													_g148 = (_g148 + 1);
HXDLIN(  47)													int i58 = (_g148 - 1);
HXDLIN(  47)													v90->data->__unsafe_set(i58,0);
            												}
            											}
            										}
HXDLIN(  47)										v88 = v90;
            									}
            									break;
            									case (int)4: {
HXLINE(  47)										 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  47)										 ::iterMagic::StackIntImg b49 = sInt7;
HXDLIN(  47)										{
HXLINE(  47)											b49->width = width7;
HXDLIN(  47)											b49->height = height7;
HXDLIN(  47)											b49->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  47)											b49->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  47)											{
HXLINE(  47)												int len15 = b49->length;
HXDLIN(  47)												 ::haxe::ds::GenericStack_Int d7 = b49->data;
HXDLIN(  47)												if (::hx::IsNull( d7->head )) {
HXLINE(  47)													int _g150 = 0;
HXDLIN(  47)													int _g151 = len15;
HXDLIN(  47)													while((_g150 < _g151)){
HXLINE(  47)														_g150 = (_g150 + 1);
HXDLIN(  47)														int i59 = (_g150 - 1);
HXDLIN(  47)														d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            													}
            												}
            												else {
HXLINE(  47)													int _g152 = 0;
HXDLIN(  47)													int _g153 = len15;
HXDLIN(  47)													while((_g152 < _g153)){
HXLINE(  47)														_g152 = (_g152 + 1);
HXDLIN(  47)														int i60 = (_g152 - 1);
HXDLIN(  47)														{
HXLINE(  47)															 ::haxe::ds::GenericCell_Int l7 = b49->data->head;
HXDLIN(  47)															 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  47)															{
HXLINE(  47)																int _g154 = 0;
HXDLIN(  47)																int _g155 = i60;
HXDLIN(  47)																while((_g154 < _g155)){
HXLINE(  47)																	_g154 = (_g154 + 1);
HXDLIN(  47)																	int i61 = (_g154 - 1);
HXLINE( 345)																	prev7 = l7;
HXLINE( 346)																	l7 = l7->next;
            																}
            															}
HXLINE(  47)															if (::hx::IsNull( prev7 )) {
HXLINE(  47)																b49->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  47)																l7 = null();
            															}
            															else {
HXLINE(  47)																prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  47)																l7 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  47)										v88 = b49;
            									}
            									break;
            								}
HXDLIN(  47)								this246->image = v88;
HXDLIN(  47)								this246->width = width7;
HXDLIN(  47)								this246->height = height7;
HXDLIN(  47)								this246->imageType = ( (int)(imageType7) );
HXDLIN(  47)								 ::pi_xy::ImageStruct nextImage7 = this246;
HXDLIN(  47)								nextImage7->transparent = transparent7;
HXDLIN(  47)								while((_this_min7 < _this_max7)){
HXLINE(  47)									_this_min7 = (_this_min7 + 1);
HXDLIN(  47)									int i62 = (_this_min7 - 1);
HXDLIN(  47)									if ((range_y7 > range_yMax7)) {
HXLINE(  34)										range_y7 = range_yReset7;
HXLINE(  47)										range_x7 = (range_x7 + 1);
            									}
HXDLIN(  47)									range_y7 = (range_y7 + 1);
HXDLIN(  47)									int i63 = i62;
HXDLIN(  47)									{
HXLINE(  47)										int x44 = range_x7;
HXDLIN(  47)										int y44 = range_y7;
HXDLIN(  47)										int x45 = range_x7;
HXDLIN(  47)										int y45 = (range_yMax7 - range_y7);
HXDLIN(  47)										::Dynamic this248 = this245->image;
HXDLIN(  47)										int index42;
HXDLIN(  47)										if (this245->useVirtualPos) {
HXLINE(  47)											index42 = ::Std_obj::_hx_int(((((( (Float)(y45) ) - this245->virtualY) * ( (Float)(this245->width) )) + x45) - this245->virtualX));
            										}
            										else {
HXLINE(  47)											index42 = ::Std_obj::_hx_int(( (Float)(((y45 * this245->width) + x45)) ));
            										}
HXDLIN(  47)										int c35 = ::iterMagic::Iimg_obj::get(this248,index42);
HXDLIN(  47)										int color7;
HXDLIN(  47)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)											color7 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            										}
            										else {
HXLINE(  47)											color7 = c35;
            										}
HXDLIN(  47)										int c36 = color7;
HXDLIN(  47)										bool v91;
HXDLIN(  47)										if ((((c36 >> 24) & 255) < 254)) {
HXLINE(  47)											v91 = nextImage7->transparent;
            										}
            										else {
HXLINE(  47)											v91 = false;
            										}
HXDLIN(  47)										if (v91) {
HXLINE(  47)											int location14;
HXDLIN(  47)											if (nextImage7->useVirtualPos) {
HXLINE(  47)												location14 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - nextImage7->virtualY) * ( (Float)(nextImage7->width) )) + x44) - nextImage7->virtualX));
            											}
            											else {
HXLINE(  47)												location14 = ::Std_obj::_hx_int(( (Float)(((y44 * nextImage7->width) + x44)) ));
            											}
HXDLIN(  47)											int this249 = ::iterMagic::Iimg_obj::get(nextImage7->image,location14);
HXDLIN(  47)											int this250;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												this250 = ((((((this249 >> 24) & 255) << 24) | ((this249 & 255) << 16)) | (((this249 >> 8) & 255) << 8)) | ((this249 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												this250 = this249;
            											}
HXDLIN(  47)											Float a117;
HXDLIN(  47)											int this251 = ((this250 >> 24) & 255);
HXDLIN(  47)											if ((this251 == 0)) {
HXLINE(  47)												a117 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a117 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r114;
HXDLIN(  47)											int this252 = ((this250 >> 16) & 255);
HXDLIN(  47)											if ((this252 == 0)) {
HXLINE(  47)												r114 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r114 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g114;
HXDLIN(  47)											int this253 = ((this250 >> 8) & 255);
HXDLIN(  47)											if ((this253 == 0)) {
HXLINE(  47)												g114 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g114 = (( (Float)(this253) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b118;
HXDLIN(  47)											int this254 = (this250 & 255);
HXDLIN(  47)											if ((this254 == 0)) {
HXLINE(  47)												b118 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b118 = (( (Float)(this254) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a215;
HXDLIN(  47)											int this255 = ((color7 >> 24) & 255);
HXDLIN(  47)											if ((this255 == 0)) {
HXLINE(  47)												a215 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												a215 = (( (Float)(this255) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float r214;
HXDLIN(  47)											int this256 = ((color7 >> 16) & 255);
HXDLIN(  47)											if ((this256 == 0)) {
HXLINE(  47)												r214 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												r214 = (( (Float)(this256) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float g214;
HXDLIN(  47)											int this257 = ((color7 >> 8) & 255);
HXDLIN(  47)											if ((this257 == 0)) {
HXLINE(  47)												g214 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												g214 = (( (Float)(this257) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float b218;
HXDLIN(  47)											int this258 = (color7 & 255);
HXDLIN(  47)											if ((this258 == 0)) {
HXLINE(  47)												b218 = ((Float)0.);
            											}
            											else {
HXLINE(  47)												b218 = (( (Float)(this258) ) / ( (Float)(255) ));
            											}
HXDLIN(  47)											Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  47)											int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r214 * a215))));
HXDLIN(  47)											int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g214 * a215))));
HXDLIN(  47)											int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b218 * a215))));
HXDLIN(  47)											int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  47)											int blended14 = ((((a48 << 24) | (r34 << 16)) | (g34 << 8)) | b50);
HXDLIN(  47)											{
HXLINE(  47)												int v92;
HXDLIN(  47)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)													v92 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            												}
            												else {
HXLINE(  47)													v92 = blended14;
            												}
HXDLIN(  47)												::iterMagic::Iimg_obj::set(nextImage7->image,location14,v92);
            											}
            										}
            										else {
HXLINE(  47)											::Dynamic this259 = nextImage7->image;
HXDLIN(  47)											int index43;
HXDLIN(  47)											if (nextImage7->useVirtualPos) {
HXLINE(  47)												index43 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - nextImage7->virtualY) * ( (Float)(nextImage7->width) )) + x44) - nextImage7->virtualX));
            											}
            											else {
HXLINE(  47)												index43 = ::Std_obj::_hx_int(( (Float)(((y44 * nextImage7->width) + x44)) ));
            											}
HXDLIN(  47)											int v93;
HXDLIN(  47)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)												v93 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            											}
            											else {
HXLINE(  47)												v93 = c36;
            											}
HXDLIN(  47)											::iterMagic::Iimg_obj::set(this259,index43,v93);
            										}
            									}
            								}
HXDLIN(  47)								 ::pi_xy::ImageStruct v94;
HXDLIN(  47)								if (inPlace) {
HXLINE(  47)									{
HXLINE(  47)										int x46 = ::Std_obj::_hx_int(x);
HXDLIN(  47)										int y46 = ::Std_obj::_hx_int(y);
HXDLIN(  47)										bool forceClear7 = false;
HXDLIN(  47)										{
HXLINE(  47)											int _g156 = 0;
HXDLIN(  47)											int _g157 = nextImage7->height;
HXDLIN(  47)											while((_g156 < _g157)){
HXLINE(  47)												_g156 = (_g156 + 1);
HXDLIN(  47)												int dy7 = (_g156 - 1);
HXDLIN(  47)												{
HXLINE(  47)													int _g158 = 0;
HXDLIN(  47)													int _g159 = nextImage7->width;
HXDLIN(  47)													while((_g158 < _g159)){
HXLINE(  47)														_g158 = (_g158 + 1);
HXDLIN(  47)														int dx7 = (_g158 - 1);
HXDLIN(  47)														::Dynamic this260 = nextImage7->image;
HXDLIN(  47)														int index44;
HXDLIN(  47)														if (nextImage7->useVirtualPos) {
HXLINE(  47)															index44 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - nextImage7->virtualY) * ( (Float)(nextImage7->width) )) + dx7) - nextImage7->virtualX));
            														}
            														else {
HXLINE(  47)															index44 = ::Std_obj::_hx_int(( (Float)(((dy7 * nextImage7->width) + dx7)) ));
            														}
HXDLIN(  47)														int c37 = ::iterMagic::Iimg_obj::get(this260,index44);
HXDLIN(  47)														int col7;
HXDLIN(  47)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)															col7 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            														}
            														else {
HXLINE(  47)															col7 = c37;
            														}
HXDLIN(  47)														bool v95;
HXDLIN(  47)														if (nextImage7->useMask) {
HXLINE(  47)															v95 = ::hx::IsNotNull( nextImage7->mask );
            														}
            														else {
HXLINE(  47)															v95 = false;
            														}
HXDLIN(  47)														if (v95) {
HXLINE(  47)															 ::pi_xy::ImageStruct this261 = nextImage7->mask;
HXDLIN(  47)															::Dynamic this262 = this261->image;
HXDLIN(  47)															int index45;
HXDLIN(  47)															if (this261->useVirtualPos) {
HXLINE(  47)																index45 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this261->virtualY) * ( (Float)(this261->width) )) + dx7) - this261->virtualX));
            															}
            															else {
HXLINE(  47)																index45 = ::Std_obj::_hx_int(( (Float)(((dy7 * this261->width) + dx7)) ));
            															}
HXDLIN(  47)															int c38 = ::iterMagic::Iimg_obj::get(this262,index45);
HXDLIN(  47)															int v96;
HXDLIN(  47)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																v96 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            															}
            															else {
HXLINE(  47)																v96 = c38;
            															}
HXDLIN(  47)															int maskPixel7 = v96;
HXDLIN(  47)															int this263 = col7;
HXDLIN(  47)															if ((maskPixel7 == 0)) {
HXLINE(  47)																col7 = this263;
            															}
            															else {
HXLINE(  47)																Float m07;
HXDLIN(  47)																int this264 = ((maskPixel7 >> 24) & 255);
HXDLIN(  47)																if ((this264 == 0)) {
HXLINE(  47)																	m07 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m07 = (( (Float)(this264) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m17;
HXDLIN(  47)																int this265 = ((maskPixel7 >> 16) & 255);
HXDLIN(  47)																if ((this265 == 0)) {
HXLINE(  47)																	m17 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m17 = (( (Float)(this265) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m27;
HXDLIN(  47)																int this266 = ((maskPixel7 >> 8) & 255);
HXDLIN(  47)																if ((this266 == 0)) {
HXLINE(  47)																	m27 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m27 = (( (Float)(this266) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float m37;
HXDLIN(  47)																int this267 = (maskPixel7 & 255);
HXDLIN(  47)																if ((this267 == 0)) {
HXLINE(  47)																	m37 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	m37 = (( (Float)(this267) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this263 >> 24) & 255)) )));
HXDLIN(  47)																int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this263 >> 16) & 255)) )));
HXDLIN(  47)																int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this263 >> 8) & 255)) )));
HXDLIN(  47)																int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this263 & 255)) )));
HXDLIN(  47)																col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  47)														if ((col7 != 0)) {
HXLINE(  47)															int x47 = (x46 + dx7);
HXDLIN(  47)															int y47 = (y46 + dy7);
HXDLIN(  47)															int c39 = col7;
HXDLIN(  47)															bool v97;
HXDLIN(  47)															if ((((c39 >> 24) & 255) < 254)) {
HXLINE(  47)																v97 = this245->transparent;
            															}
            															else {
HXLINE(  47)																v97 = false;
            															}
HXDLIN(  47)															if (v97) {
HXLINE(  47)																int location15;
HXDLIN(  47)																if (this245->useVirtualPos) {
HXLINE(  47)																	location15 = ::Std_obj::_hx_int(((((( (Float)(y47) ) - this245->virtualY) * ( (Float)(this245->width) )) + x47) - this245->virtualX));
            																}
            																else {
HXLINE(  47)																	location15 = ::Std_obj::_hx_int(( (Float)(((y47 * this245->width) + x47)) ));
            																}
HXDLIN(  47)																int this268 = ::iterMagic::Iimg_obj::get(this245->image,location15);
HXDLIN(  47)																int this269;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	this269 = ((((((this268 >> 24) & 255) << 24) | ((this268 & 255) << 16)) | (((this268 >> 8) & 255) << 8)) | ((this268 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	this269 = this268;
            																}
HXDLIN(  47)																Float a118;
HXDLIN(  47)																int this270 = ((this269 >> 24) & 255);
HXDLIN(  47)																if ((this270 == 0)) {
HXLINE(  47)																	a118 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a118 = (( (Float)(this270) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r115;
HXDLIN(  47)																int this271 = ((this269 >> 16) & 255);
HXDLIN(  47)																if ((this271 == 0)) {
HXLINE(  47)																	r115 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r115 = (( (Float)(this271) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g115;
HXDLIN(  47)																int this272 = ((this269 >> 8) & 255);
HXDLIN(  47)																if ((this272 == 0)) {
HXLINE(  47)																	g115 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g115 = (( (Float)(this272) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b119;
HXDLIN(  47)																int this273 = (this269 & 255);
HXDLIN(  47)																if ((this273 == 0)) {
HXLINE(  47)																	b119 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b119 = (( (Float)(this273) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a216;
HXDLIN(  47)																int this274 = ((col7 >> 24) & 255);
HXDLIN(  47)																if ((this274 == 0)) {
HXLINE(  47)																	a216 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	a216 = (( (Float)(this274) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float r215;
HXDLIN(  47)																int this275 = ((col7 >> 16) & 255);
HXDLIN(  47)																if ((this275 == 0)) {
HXLINE(  47)																	r215 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	r215 = (( (Float)(this275) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float g215;
HXDLIN(  47)																int this276 = ((col7 >> 8) & 255);
HXDLIN(  47)																if ((this276 == 0)) {
HXLINE(  47)																	g215 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	g215 = (( (Float)(this276) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float b219;
HXDLIN(  47)																int this277 = (col7 & 255);
HXDLIN(  47)																if ((this277 == 0)) {
HXLINE(  47)																	b219 = ((Float)0.);
            																}
            																else {
HXLINE(  47)																	b219 = (( (Float)(this277) ) / ( (Float)(255) ));
            																}
HXDLIN(  47)																Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  47)																int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r215 * a216))));
HXDLIN(  47)																int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g215 * a216))));
HXDLIN(  47)																int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b219 * a216))));
HXDLIN(  47)																int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  47)																int blended15 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b51);
HXDLIN(  47)																{
HXLINE(  47)																	int v98;
HXDLIN(  47)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																		v98 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            																	}
            																	else {
HXLINE(  47)																		v98 = blended15;
            																	}
HXDLIN(  47)																	::iterMagic::Iimg_obj::set(this245->image,location15,v98);
            																}
            															}
            															else {
HXLINE(  47)																::Dynamic this278 = this245->image;
HXDLIN(  47)																int index46;
HXDLIN(  47)																if (this245->useVirtualPos) {
HXLINE(  47)																	index46 = ::Std_obj::_hx_int(((((( (Float)(y47) ) - this245->virtualY) * ( (Float)(this245->width) )) + x47) - this245->virtualX));
            																}
            																else {
HXLINE(  47)																	index46 = ::Std_obj::_hx_int(( (Float)(((y47 * this245->width) + x47)) ));
            																}
HXDLIN(  47)																int v99;
HXDLIN(  47)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  47)																	v99 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            																}
            																else {
HXLINE(  47)																	v99 = c39;
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this278,index46,v99);
            															}
            														}
            														else {
HXLINE(  47)															if (forceClear7) {
HXLINE(  47)																::Dynamic this279 = this245->image;
HXDLIN(  47)																int x48 = (x46 + dx7);
HXDLIN(  47)																int y48 = (y46 + dy7);
HXDLIN(  47)																int index47;
HXDLIN(  47)																if (this245->useVirtualPos) {
HXLINE(  47)																	index47 = ::Std_obj::_hx_int(((((( (Float)(y48) ) - this245->virtualY) * ( (Float)(this245->width) )) + x48) - this245->virtualX));
            																}
            																else {
HXLINE(  47)																	index47 = ::Std_obj::_hx_int(( (Float)(((y48 * this245->width) + x48)) ));
            																}
HXDLIN(  47)																::iterMagic::Iimg_obj::set(this279,index47,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  47)									bool v100;
HXDLIN(  47)									if (::hx::IsNotNull( this245->mask )) {
HXLINE(  47)										v100 = includeMask;
            									}
            									else {
HXLINE(  47)										v100 = false;
            									}
HXDLIN(  47)									if (v100) {
HXLINE(  47)										 ::pi_xy::ImageStruct v101 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this245->mask,x,y,( (Float)(this245->width) ),( (Float)(this245->height) ),this245->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										this245->useMask = true;
HXDLIN(  47)										this245->mask = v101;
            									}
HXLINE(  91)									nextImage7 = null();
HXLINE(  47)									v94 = this245;
            								}
            								else {
HXLINE(  47)									bool v102;
HXDLIN(  47)									if (::hx::IsNotNull( this245->mask )) {
HXLINE(  47)										v102 = includeMask;
            									}
            									else {
HXLINE(  47)										v102 = false;
            									}
HXDLIN(  47)									if (v102) {
HXLINE(  47)										 ::pi_xy::ImageStruct v103 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this245->mask,x,y,( (Float)(this245->width) ),( (Float)(this245->height) ),this245->mask->transparent,inPlace,includeMask);
HXDLIN(  47)										nextImage7->useMask = true;
HXDLIN(  47)										nextImage7->mask = v103;
            									}
HXDLIN(  47)									v94 = nextImage7;
            								}
HXDLIN(  47)								nextImage5->useMask = true;
HXDLIN(  47)								nextImage5->mask = v94;
            							}
HXDLIN(  47)							v64 = nextImage5;
            						}
HXDLIN(  47)						nextImage1->useMask = true;
HXDLIN(  47)						nextImage1->mask = v64;
            					}
HXDLIN(  47)					v4 = nextImage1;
            				}
HXDLIN(  47)				nextImage->useMask = true;
HXDLIN(  47)				nextImage->mask = v4;
            			}
HXLINE(  48)			return nextImage;
            		}
HXLINE(  41)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlipImage_Fields__obj,imageflipX,return )

 ::pi_xy::ImageStruct FlipImage_Fields__obj::imageflipY( ::pi_xy::ImageStruct thisImage,Float x,Float y,Float w,Float h,::hx::Null< bool >  __o_transparent,::hx::Null< bool >  __o_inPlace,::hx::Null< bool >  __o_includeMask){
            		bool transparent = __o_transparent.Default(false);
            		bool inPlace = __o_inPlace.Default(false);
            		bool includeMask = __o_includeMask.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_0653826af93cdce4_61_imageflipY)
HXLINE(  62)		Float r_x = x;
HXDLIN(  62)		Float r_y = y;
HXDLIN(  62)		Float r_w = w;
HXDLIN(  62)		Float r_h = h;
HXDLIN(  62)		int xmax = ::Std_obj::_hx_int(((r_x + r_w) + 1));
HXDLIN(  62)		int ymax = ::Std_obj::_hx_int(((r_y + r_h) + 1));
HXDLIN(  62)		int ii_min = ::Std_obj::_hx_int(r_x);
HXDLIN(  62)		int ii_max = xmax;
HXDLIN(  62)		int xRange__start = ii_min;
HXDLIN(  62)		int xRange__max = ii_max;
HXDLIN(  62)		int ii_min1 = ::Std_obj::_hx_int(r_y);
HXDLIN(  62)		int ii_max1 = ymax;
HXDLIN(  62)		int yRange__start = ii_min1;
HXDLIN(  62)		int yRange__max = ii_max1;
HXDLIN(  62)		int range_x = xRange__start;
HXDLIN(  62)		int range_y = (yRange__start - 1);
HXDLIN(  62)		int range_xReset = range_x;
HXDLIN(  62)		int range_yReset = range_y;
HXDLIN(  62)		int range_xMax = (xRange__max - 2);
HXDLIN(  62)		int range_yMax = (yRange__max - 2);
HXDLIN(  62)		int _this_min = 0;
HXDLIN(  62)		int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXLINE(  63)		int width = ::Std_obj::_hx_int(w);
HXDLIN(  63)		int height = ::Std_obj::_hx_int(h);
HXDLIN(  63)		 ::Dynamic imageType = null();
HXDLIN(  63)		 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  63)		if (::hx::IsNull( imageType )) {
HXLINE(  54)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXLINE(  63)		::Dynamic _hx_tmp;
HXDLIN(  63)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  63)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  63)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  63)				{
HXLINE(  63)					b->width = width;
HXDLIN(  63)					b->height = height;
HXDLIN(  63)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  63)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  63)					{
HXLINE(  63)						int len = b->length;
HXDLIN(  63)						int w1 = 0;
HXDLIN(  63)						{
HXLINE(  63)							int _g = 0;
HXDLIN(  63)							int _g1 = b->height;
HXDLIN(  63)							while((_g < _g1)){
HXLINE(  63)								_g = (_g + 1);
HXDLIN(  63)								int y1 = (_g - 1);
HXDLIN(  63)								{
HXLINE(  63)									int _g2 = 0;
HXDLIN(  63)									int _g3 = b->width;
HXDLIN(  63)									while((_g2 < _g3)){
HXLINE(  63)										_g2 = (_g2 + 1);
HXDLIN(  63)										int x1 = (_g2 - 1);
HXDLIN(  63)										{
HXLINE(  63)											w1 = (w1 + 1);
HXDLIN(  63)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  63)										{
HXLINE(  63)											w1 = (w1 + 1);
HXDLIN(  63)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  63)										{
HXLINE(  63)											w1 = (w1 + 1);
HXDLIN(  63)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  63)										{
HXLINE(  63)											w1 = (w1 + 1);
HXDLIN(  63)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  63)				_hx_tmp = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  63)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  63)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  63)				{
HXLINE(  63)					a->width = width;
HXDLIN(  63)					a->height = height;
HXDLIN(  63)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  63)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  63)					{
HXLINE(  63)						int _g4 = 0;
HXDLIN(  63)						int _g5 = a->length;
HXDLIN(  63)						while((_g4 < _g5)){
HXLINE(  63)							_g4 = (_g4 + 1);
HXDLIN(  63)							int i = (_g4 - 1);
HXDLIN(  63)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  63)				_hx_tmp = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  63)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  63)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  63)				{
HXLINE(  63)					b1->width = width;
HXDLIN(  63)					b1->height = height;
HXDLIN(  63)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  63)					int size = (b1->length * 4);
HXDLIN(  63)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  63)					{
HXLINE(  63)						int _g6 = 0;
HXDLIN(  63)						int _g7 = b1->length;
HXDLIN(  63)						while((_g6 < _g7)){
HXLINE(  63)							_g6 = (_g6 + 1);
HXDLIN(  63)							int i1 = (_g6 - 1);
HXDLIN(  63)							{
HXLINE(  63)								 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  63)								bool _hx_tmp1;
HXDLIN(  63)								if ((i1 >= 0)) {
HXLINE(  63)									_hx_tmp1 = (i1 < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(  63)									_hx_tmp1 = false;
            								}
HXDLIN(  63)								if (_hx_tmp1) {
HXLINE(  63)									 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  63)									int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  63)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  63)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  63)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  63)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  63)				_hx_tmp = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  63)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  63)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  63)				{
HXLINE(  63)					v->width = width;
HXDLIN(  63)					v->height = height;
HXDLIN(  63)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  63)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  63)					{
HXLINE(  63)						int _g8 = 0;
HXDLIN(  63)						int _g9 = v->length;
HXDLIN(  63)						while((_g8 < _g9)){
HXLINE(  63)							_g8 = (_g8 + 1);
HXDLIN(  63)							int i2 = (_g8 - 1);
HXDLIN(  63)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  63)				_hx_tmp = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  63)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  63)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  63)				{
HXLINE(  63)					b2->width = width;
HXDLIN(  63)					b2->height = height;
HXDLIN(  63)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  63)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  63)					{
HXLINE(  63)						int len1 = b2->length;
HXDLIN(  63)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  63)						if (::hx::IsNull( d->head )) {
HXLINE(  63)							int _g10 = 0;
HXDLIN(  63)							int _g11 = len1;
HXDLIN(  63)							while((_g10 < _g11)){
HXLINE(  63)								_g10 = (_g10 + 1);
HXDLIN(  63)								int i3 = (_g10 - 1);
HXDLIN(  63)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  63)							int _g12 = 0;
HXDLIN(  63)							int _g13 = len1;
HXDLIN(  63)							while((_g12 < _g13)){
HXLINE(  63)								_g12 = (_g12 + 1);
HXDLIN(  63)								int i4 = (_g12 - 1);
HXDLIN(  63)								{
HXLINE(  63)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  63)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  63)									{
HXLINE(  63)										int _g14 = 0;
HXDLIN(  63)										int _g15 = i4;
HXDLIN(  63)										while((_g14 < _g15)){
HXLINE(  63)											_g14 = (_g14 + 1);
HXDLIN(  63)											int i5 = (_g14 - 1);
HXLINE( 345)											prev = l;
HXLINE( 346)											l = l->next;
            										}
            									}
HXLINE(  63)									if (::hx::IsNull( prev )) {
HXLINE(  63)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  63)										l = null();
            									}
            									else {
HXLINE(  63)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  63)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  63)				_hx_tmp = b2;
            			}
            			break;
            		}
HXDLIN(  63)		this1->image = _hx_tmp;
HXDLIN(  63)		this1->width = width;
HXDLIN(  63)		this1->height = height;
HXDLIN(  63)		this1->imageType = ( (int)(imageType) );
HXDLIN(  63)		 ::pi_xy::ImageStruct nextImage = this1;
HXLINE(  64)		nextImage->transparent = transparent;
HXLINE(  65)		while((_this_min < _this_max)){
HXLINE(  65)			_this_min = (_this_min + 1);
HXDLIN(  65)			int i6 = (_this_min - 1);
HXDLIN(  65)			if ((range_y > range_yMax)) {
HXLINE(  65)				range_y = range_yReset;
HXDLIN(  65)				range_x = (range_x + 1);
            			}
HXDLIN(  65)			range_y = (range_y + 1);
HXDLIN(  65)			int i7 = i6;
HXLINE(  67)			{
HXLINE(  67)				int x2 = range_x;
HXDLIN(  67)				int y2 = range_y;
HXDLIN(  67)				int x3 = range_x;
HXDLIN(  67)				int y3 = (range_yMax - range_y);
HXDLIN(  67)				::Dynamic this3 = thisImage->image;
HXDLIN(  67)				int index;
HXDLIN(  67)				if (thisImage->useVirtualPos) {
HXLINE(  67)					index = ::Std_obj::_hx_int(((((( (Float)(y3) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x3) - thisImage->virtualX));
            				}
            				else {
HXLINE(  67)					index = ::Std_obj::_hx_int(( (Float)(((y3 * thisImage->width) + x3)) ));
            				}
HXDLIN(  67)				int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  67)				int color;
HXDLIN(  67)				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)					color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            				}
            				else {
HXLINE(  67)					color = c;
            				}
HXDLIN(  67)				int c1 = color;
HXDLIN(  67)				bool _hx_tmp2;
HXDLIN(  67)				if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  67)					_hx_tmp2 = nextImage->transparent;
            				}
            				else {
HXLINE(  67)					_hx_tmp2 = false;
            				}
HXDLIN(  67)				if (_hx_tmp2) {
HXLINE(  67)					int location;
HXDLIN(  67)					if (nextImage->useVirtualPos) {
HXLINE(  67)						location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + x2) - nextImage->virtualX));
            					}
            					else {
HXLINE(  67)						location = ::Std_obj::_hx_int(( (Float)(((y2 * nextImage->width) + x2)) ));
            					}
HXDLIN(  67)					int this4 = ::iterMagic::Iimg_obj::get(nextImage->image,location);
HXDLIN(  67)					int this5;
HXDLIN(  67)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)						this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            					}
            					else {
HXLINE(  67)						this5 = this4;
            					}
HXDLIN(  67)					Float a1;
HXDLIN(  67)					int this6 = ((this5 >> 24) & 255);
HXDLIN(  67)					if ((this6 == 0)) {
HXLINE(  67)						a1 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float r1;
HXDLIN(  67)					int this7 = ((this5 >> 16) & 255);
HXDLIN(  67)					if ((this7 == 0)) {
HXLINE(  67)						r1 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float g1;
HXDLIN(  67)					int this8 = ((this5 >> 8) & 255);
HXDLIN(  67)					if ((this8 == 0)) {
HXLINE(  67)						g1 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float b11;
HXDLIN(  67)					int this9 = (this5 & 255);
HXDLIN(  67)					if ((this9 == 0)) {
HXLINE(  67)						b11 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						b11 = (( (Float)(this9) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float a2;
HXDLIN(  67)					int this10 = ((color >> 24) & 255);
HXDLIN(  67)					if ((this10 == 0)) {
HXLINE(  67)						a2 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float r2;
HXDLIN(  67)					int this11 = ((color >> 16) & 255);
HXDLIN(  67)					if ((this11 == 0)) {
HXLINE(  67)						r2 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float g2;
HXDLIN(  67)					int this12 = ((color >> 8) & 255);
HXDLIN(  67)					if ((this12 == 0)) {
HXLINE(  67)						g2 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float b21;
HXDLIN(  67)					int this13 = (color & 255);
HXDLIN(  67)					if ((this13 == 0)) {
HXLINE(  67)						b21 = ((Float)0.);
            					}
            					else {
HXLINE(  67)						b21 = (( (Float)(this13) ) / ( (Float)(255) ));
            					}
HXDLIN(  67)					Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)					int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)					int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)					int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  67)					int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)					int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  67)					{
HXLINE(  67)						int _hx_tmp3;
HXDLIN(  67)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)							_hx_tmp3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            						}
            						else {
HXLINE(  67)							_hx_tmp3 = blended;
            						}
HXDLIN(  67)						::iterMagic::Iimg_obj::set(nextImage->image,location,_hx_tmp3);
            					}
            				}
            				else {
HXLINE(  67)					::Dynamic this14 = nextImage->image;
HXDLIN(  67)					int index1;
HXDLIN(  67)					if (nextImage->useVirtualPos) {
HXLINE(  67)						index1 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + x2) - nextImage->virtualX));
            					}
            					else {
HXLINE(  67)						index1 = ::Std_obj::_hx_int(( (Float)(((y2 * nextImage->width) + x2)) ));
            					}
HXDLIN(  67)					int _hx_tmp4;
HXDLIN(  67)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)						_hx_tmp4 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            					}
            					else {
HXLINE(  67)						_hx_tmp4 = c1;
            					}
HXDLIN(  67)					::iterMagic::Iimg_obj::set(this14,index1,_hx_tmp4);
            				}
            			}
            		}
HXLINE(  88)		if (inPlace) {
HXLINE(  89)			{
HXLINE(  89)				int x4 = ::Std_obj::_hx_int(x);
HXDLIN(  89)				int y4 = ::Std_obj::_hx_int(y);
HXDLIN(  89)				bool forceClear = false;
HXDLIN(  89)				{
HXLINE(  89)					int _g16 = 0;
HXDLIN(  89)					int _g17 = nextImage->height;
HXDLIN(  89)					while((_g16 < _g17)){
HXLINE(  89)						_g16 = (_g16 + 1);
HXDLIN(  89)						int dy = (_g16 - 1);
HXDLIN(  89)						{
HXLINE(  89)							int _g18 = 0;
HXDLIN(  89)							int _g19 = nextImage->width;
HXDLIN(  89)							while((_g18 < _g19)){
HXLINE(  89)								_g18 = (_g18 + 1);
HXDLIN(  89)								int dx = (_g18 - 1);
HXDLIN(  89)								::Dynamic this15 = nextImage->image;
HXDLIN(  89)								int index2;
HXDLIN(  89)								if (nextImage->useVirtualPos) {
HXLINE(  89)									index2 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + dx) - nextImage->virtualX));
            								}
            								else {
HXLINE(  89)									index2 = ::Std_obj::_hx_int(( (Float)(((dy * nextImage->width) + dx)) ));
            								}
HXDLIN(  89)								int c2 = ::iterMagic::Iimg_obj::get(this15,index2);
HXDLIN(  89)								int col;
HXDLIN(  89)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)									col = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            								}
            								else {
HXLINE(  89)									col = c2;
            								}
HXDLIN(  89)								bool _hx_tmp5;
HXDLIN(  89)								if (nextImage->useMask) {
HXLINE(  89)									_hx_tmp5 = ::hx::IsNotNull( nextImage->mask );
            								}
            								else {
HXLINE(  89)									_hx_tmp5 = false;
            								}
HXDLIN(  89)								if (_hx_tmp5) {
HXLINE(  89)									 ::pi_xy::ImageStruct this16 = nextImage->mask;
HXDLIN(  89)									::Dynamic this17 = this16->image;
HXDLIN(  89)									int index3;
HXDLIN(  89)									if (this16->useVirtualPos) {
HXLINE(  89)										index3 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this16->virtualY) * ( (Float)(this16->width) )) + dx) - this16->virtualX));
            									}
            									else {
HXLINE(  89)										index3 = ::Std_obj::_hx_int(( (Float)(((dy * this16->width) + dx)) ));
            									}
HXDLIN(  89)									int c3 = ::iterMagic::Iimg_obj::get(this17,index3);
HXDLIN(  89)									int v1;
HXDLIN(  89)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)										v1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE(  89)										v1 = c3;
            									}
HXDLIN(  89)									int maskPixel = v1;
HXDLIN(  89)									int this18 = col;
HXDLIN(  89)									if ((maskPixel == 0)) {
HXLINE(  89)										col = this18;
            									}
            									else {
HXLINE(  89)										Float m0;
HXDLIN(  89)										int this19 = ((maskPixel >> 24) & 255);
HXDLIN(  89)										if ((this19 == 0)) {
HXLINE(  89)											m0 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											m0 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float m1;
HXDLIN(  89)										int this20 = ((maskPixel >> 16) & 255);
HXDLIN(  89)										if ((this20 == 0)) {
HXLINE(  89)											m1 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											m1 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float m2;
HXDLIN(  89)										int this21 = ((maskPixel >> 8) & 255);
HXDLIN(  89)										if ((this21 == 0)) {
HXLINE(  89)											m2 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											m2 = (( (Float)(this21) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float m3;
HXDLIN(  89)										int this22 = (maskPixel & 255);
HXDLIN(  89)										if ((this22 == 0)) {
HXLINE(  89)											m3 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											m3 = (( (Float)(this22) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this18 >> 24) & 255)) )));
HXDLIN(  89)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this18 >> 16) & 255)) )));
HXDLIN(  89)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this18 >> 8) & 255)) )));
HXDLIN(  89)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this18 & 255)) )));
HXDLIN(  89)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  89)								if ((col != 0)) {
HXLINE(  89)									int x5 = (x4 + dx);
HXDLIN(  89)									int y5 = (y4 + dy);
HXDLIN(  89)									int c4 = col;
HXDLIN(  89)									bool _hx_tmp6;
HXDLIN(  89)									if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  89)										_hx_tmp6 = thisImage->transparent;
            									}
            									else {
HXLINE(  89)										_hx_tmp6 = false;
            									}
HXDLIN(  89)									if (_hx_tmp6) {
HXLINE(  89)										int location1;
HXDLIN(  89)										if (thisImage->useVirtualPos) {
HXLINE(  89)											location1 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x5) - thisImage->virtualX));
            										}
            										else {
HXLINE(  89)											location1 = ::Std_obj::_hx_int(( (Float)(((y5 * thisImage->width) + x5)) ));
            										}
HXDLIN(  89)										int this23 = ::iterMagic::Iimg_obj::get(thisImage->image,location1);
HXDLIN(  89)										int this24;
HXDLIN(  89)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)											this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE(  89)											this24 = this23;
            										}
HXDLIN(  89)										Float a11;
HXDLIN(  89)										int this25 = ((this24 >> 24) & 255);
HXDLIN(  89)										if ((this25 == 0)) {
HXLINE(  89)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float r11;
HXDLIN(  89)										int this26 = ((this24 >> 16) & 255);
HXDLIN(  89)										if ((this26 == 0)) {
HXLINE(  89)											r11 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float g11;
HXDLIN(  89)										int this27 = ((this24 >> 8) & 255);
HXDLIN(  89)										if ((this27 == 0)) {
HXLINE(  89)											g11 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float b12;
HXDLIN(  89)										int this28 = (this24 & 255);
HXDLIN(  89)										if ((this28 == 0)) {
HXLINE(  89)											b12 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float a21;
HXDLIN(  89)										int this29 = ((col >> 24) & 255);
HXDLIN(  89)										if ((this29 == 0)) {
HXLINE(  89)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float r21;
HXDLIN(  89)										int this30 = ((col >> 16) & 255);
HXDLIN(  89)										if ((this30 == 0)) {
HXLINE(  89)											r21 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float g21;
HXDLIN(  89)										int this31 = ((col >> 8) & 255);
HXDLIN(  89)										if ((this31 == 0)) {
HXLINE(  89)											g21 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float b22;
HXDLIN(  89)										int this32 = (col & 255);
HXDLIN(  89)										if ((this32 == 0)) {
HXLINE(  89)											b22 = ((Float)0.);
            										}
            										else {
HXLINE(  89)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN(  89)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  89)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  89)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  89)										int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  89)										int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  89)										int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  89)										{
HXLINE(  89)											int _hx_tmp7;
HXDLIN(  89)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE(  89)												_hx_tmp7 = blended1;
            											}
HXDLIN(  89)											::iterMagic::Iimg_obj::set(thisImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE(  89)										::Dynamic this33 = thisImage->image;
HXDLIN(  89)										int index4;
HXDLIN(  89)										if (thisImage->useVirtualPos) {
HXLINE(  89)											index4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x5) - thisImage->virtualX));
            										}
            										else {
HXLINE(  89)											index4 = ::Std_obj::_hx_int(( (Float)(((y5 * thisImage->width) + x5)) ));
            										}
HXDLIN(  89)										int _hx_tmp8;
HXDLIN(  89)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)											_hx_tmp8 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE(  89)											_hx_tmp8 = c4;
            										}
HXDLIN(  89)										::iterMagic::Iimg_obj::set(this33,index4,_hx_tmp8);
            									}
            								}
            								else {
HXLINE(  89)									if (forceClear) {
HXLINE(  89)										::Dynamic this34 = thisImage->image;
HXDLIN(  89)										int x6 = (x4 + dx);
HXDLIN(  89)										int y6 = (y4 + dy);
HXDLIN(  89)										int index5;
HXDLIN(  89)										if (thisImage->useVirtualPos) {
HXLINE(  89)											index5 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x6) - thisImage->virtualX));
            										}
            										else {
HXLINE(  89)											index5 = ::Std_obj::_hx_int(( (Float)(((y6 * thisImage->width) + x6)) ));
            										}
HXDLIN(  89)										::iterMagic::Iimg_obj::set(this34,index5,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(  90)			bool _hx_tmp9;
HXDLIN(  90)			if (::hx::IsNotNull( thisImage->mask )) {
HXLINE(  90)				_hx_tmp9 = includeMask;
            			}
            			else {
HXLINE(  90)				_hx_tmp9 = false;
            			}
HXDLIN(  90)			if (_hx_tmp9) {
HXLINE(  90)				 ::pi_xy::ImageStruct this35 = thisImage->mask;
HXDLIN(  90)				Float w2 = ( (Float)(thisImage->width) );
HXDLIN(  90)				Float h1 = ( (Float)(thisImage->height) );
HXDLIN(  90)				bool transparent1 = thisImage->mask->transparent;
HXDLIN(  90)				Float r_x1 = x;
HXDLIN(  90)				Float r_y1 = y;
HXDLIN(  90)				Float r_w1 = w2;
HXDLIN(  90)				Float r_h1 = h1;
HXDLIN(  90)				int xmax1 = ::Std_obj::_hx_int(((r_x1 + r_w1) + 1));
HXDLIN(  90)				int ymax1 = ::Std_obj::_hx_int(((r_y1 + r_h1) + 1));
HXDLIN(  90)				int ii_min2 = ::Std_obj::_hx_int(r_x1);
HXDLIN(  90)				int ii_max2 = xmax1;
HXDLIN(  90)				int xRange__start1 = ii_min2;
HXDLIN(  90)				int xRange__max1 = ii_max2;
HXDLIN(  90)				int ii_min3 = ::Std_obj::_hx_int(r_y1);
HXDLIN(  90)				int ii_max3 = ymax1;
HXDLIN(  90)				int yRange__start1 = ii_min3;
HXDLIN(  90)				int yRange__max1 = ii_max3;
HXDLIN(  90)				int range_x1 = xRange__start1;
HXDLIN(  90)				int range_y1 = (yRange__start1 - 1);
HXDLIN(  90)				int range_xReset1 = range_x1;
HXDLIN(  90)				int range_yReset1 = range_y1;
HXDLIN(  90)				int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  90)				int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  90)				int _this_min1 = 0;
HXDLIN(  90)				int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  90)				int width1 = ::Std_obj::_hx_int(w2);
HXDLIN(  90)				int height1 = ::Std_obj::_hx_int(h1);
HXDLIN(  90)				 ::Dynamic imageType1 = null();
HXDLIN(  90)				 ::pi_xy::ImageStruct this36 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  90)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  90)				::Dynamic _hx_tmp10;
HXDLIN(  90)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE(  90)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::BytesImg b5 = byt1;
HXDLIN(  90)						{
HXLINE(  90)							b5->width = width1;
HXDLIN(  90)							b5->height = height1;
HXDLIN(  90)							b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  90)							b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN(  90)							{
HXLINE(  90)								int len2 = b5->length;
HXDLIN(  90)								int w3 = 0;
HXDLIN(  90)								{
HXLINE(  90)									int _g20 = 0;
HXDLIN(  90)									int _g21 = b5->height;
HXDLIN(  90)									while((_g20 < _g21)){
HXLINE(  90)										_g20 = (_g20 + 1);
HXDLIN(  90)										int y7 = (_g20 - 1);
HXDLIN(  90)										{
HXLINE(  90)											int _g22 = 0;
HXDLIN(  90)											int _g23 = b5->width;
HXDLIN(  90)											while((_g22 < _g23)){
HXLINE(  90)												_g22 = (_g22 + 1);
HXDLIN(  90)												int x7 = (_g22 - 1);
HXDLIN(  90)												{
HXLINE(  90)													w3 = (w3 + 1);
HXDLIN(  90)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  90)												{
HXLINE(  90)													w3 = (w3 + 1);
HXDLIN(  90)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  90)												{
HXLINE(  90)													w3 = (w3 + 1);
HXDLIN(  90)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  90)												{
HXLINE(  90)													w3 = (w3 + 1);
HXDLIN(  90)													b5->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  90)						_hx_tmp10 = b5;
            					}
            					break;
            					case (int)1: {
HXLINE(  90)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::ArrIntImg a6 = arrI1;
HXDLIN(  90)						{
HXLINE(  90)							a6->width = width1;
HXDLIN(  90)							a6->height = height1;
HXDLIN(  90)							a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  90)							a6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  90)							{
HXLINE(  90)								int _g24 = 0;
HXDLIN(  90)								int _g25 = a6->length;
HXDLIN(  90)								while((_g24 < _g25)){
HXLINE(  90)									_g24 = (_g24 + 1);
HXDLIN(  90)									int i8 = (_g24 - 1);
HXDLIN(  90)									a6->data[i8] = 0;
            								}
            							}
            						}
HXDLIN(  90)						_hx_tmp10 = a6;
            					}
            					break;
            					case (int)2: {
HXLINE(  90)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN(  90)						{
HXLINE(  90)							b6->width = width1;
HXDLIN(  90)							b6->height = height1;
HXDLIN(  90)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  90)							int size1 = (b6->length * 4);
HXDLIN(  90)							b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  90)							{
HXLINE(  90)								int _g26 = 0;
HXDLIN(  90)								int _g27 = b6->length;
HXDLIN(  90)								while((_g26 < _g27)){
HXLINE(  90)									_g26 = (_g26 + 1);
HXDLIN(  90)									int i9 = (_g26 - 1);
HXDLIN(  90)									{
HXLINE(  90)										 ::haxe::io::ArrayBufferViewImpl this37 = b6->data;
HXDLIN(  90)										bool _hx_tmp11;
HXDLIN(  90)										if ((i9 >= 0)) {
HXLINE(  90)											_hx_tmp11 = (i9 < (this37->byteLength >> 2));
            										}
            										else {
HXLINE(  90)											_hx_tmp11 = false;
            										}
HXDLIN(  90)										if (_hx_tmp11) {
HXLINE(  90)											 ::haxe::io::Bytes _this1 = this37->bytes;
HXDLIN(  90)											int pos1 = ((i9 << 2) + this37->byteOffset);
HXDLIN(  90)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  90)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  90)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  90)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  90)						_hx_tmp10 = b6;
            					}
            					break;
            					case (int)3: {
HXLINE(  90)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN(  90)						{
HXLINE(  90)							v2->width = width1;
HXDLIN(  90)							v2->height = height1;
HXDLIN(  90)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  90)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN(  90)							{
HXLINE(  90)								int _g28 = 0;
HXDLIN(  90)								int _g29 = v2->length;
HXDLIN(  90)								while((_g28 < _g29)){
HXLINE(  90)									_g28 = (_g28 + 1);
HXDLIN(  90)									int i10 = (_g28 - 1);
HXDLIN(  90)									v2->data->__unsafe_set(i10,0);
            								}
            							}
            						}
HXDLIN(  90)						_hx_tmp10 = v2;
            					}
            					break;
            					case (int)4: {
HXLINE(  90)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  90)						 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN(  90)						{
HXLINE(  90)							b7->width = width1;
HXDLIN(  90)							b7->height = height1;
HXDLIN(  90)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  90)							b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  90)							{
HXLINE(  90)								int len3 = b7->length;
HXDLIN(  90)								 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN(  90)								if (::hx::IsNull( d1->head )) {
HXLINE(  90)									int _g30 = 0;
HXDLIN(  90)									int _g31 = len3;
HXDLIN(  90)									while((_g30 < _g31)){
HXLINE(  90)										_g30 = (_g30 + 1);
HXDLIN(  90)										int i11 = (_g30 - 1);
HXDLIN(  90)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE(  90)									int _g32 = 0;
HXDLIN(  90)									int _g33 = len3;
HXDLIN(  90)									while((_g32 < _g33)){
HXLINE(  90)										_g32 = (_g32 + 1);
HXDLIN(  90)										int i12 = (_g32 - 1);
HXDLIN(  90)										{
HXLINE(  90)											 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN(  90)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  90)											{
HXLINE(  90)												int _g34 = 0;
HXDLIN(  90)												int _g35 = i12;
HXDLIN(  90)												while((_g34 < _g35)){
HXLINE(  90)													_g34 = (_g34 + 1);
HXDLIN(  90)													int i13 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  90)											if (::hx::IsNull( prev1 )) {
HXLINE(  90)												b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  90)												l1 = null();
            											}
            											else {
HXLINE(  90)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  90)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  90)						_hx_tmp10 = b7;
            					}
            					break;
            				}
HXDLIN(  90)				this36->image = _hx_tmp10;
HXDLIN(  90)				this36->width = width1;
HXDLIN(  90)				this36->height = height1;
HXDLIN(  90)				this36->imageType = ( (int)(imageType1) );
HXDLIN(  90)				 ::pi_xy::ImageStruct nextImage1 = this36;
HXDLIN(  90)				nextImage1->transparent = transparent1;
HXDLIN(  90)				while((_this_min1 < _this_max1)){
HXLINE(  90)					_this_min1 = (_this_min1 + 1);
HXDLIN(  90)					int i14 = (_this_min1 - 1);
HXDLIN(  90)					if ((range_y1 > range_yMax1)) {
HXLINE(  34)						range_y1 = range_yReset1;
HXLINE(  90)						range_x1 = (range_x1 + 1);
            					}
HXDLIN(  90)					range_y1 = (range_y1 + 1);
HXDLIN(  90)					int i15 = i14;
HXDLIN(  90)					{
HXLINE(  90)						int x8 = range_x1;
HXDLIN(  90)						int y8 = range_y1;
HXDLIN(  90)						int x9 = range_x1;
HXDLIN(  90)						int y9 = (range_yMax1 - range_y1);
HXDLIN(  90)						::Dynamic this38 = this35->image;
HXDLIN(  90)						int index6;
HXDLIN(  90)						if (this35->useVirtualPos) {
HXLINE(  90)							index6 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this35->virtualY) * ( (Float)(this35->width) )) + x9) - this35->virtualX));
            						}
            						else {
HXLINE(  90)							index6 = ::Std_obj::_hx_int(( (Float)(((y9 * this35->width) + x9)) ));
            						}
HXDLIN(  90)						int c5 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN(  90)						int color1;
HXDLIN(  90)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)							color1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            						}
            						else {
HXLINE(  90)							color1 = c5;
            						}
HXDLIN(  90)						int c6 = color1;
HXDLIN(  90)						bool _hx_tmp12;
HXDLIN(  90)						if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  90)							_hx_tmp12 = nextImage1->transparent;
            						}
            						else {
HXLINE(  90)							_hx_tmp12 = false;
            						}
HXDLIN(  90)						if (_hx_tmp12) {
HXLINE(  90)							int location2;
HXDLIN(  90)							if (nextImage1->useVirtualPos) {
HXLINE(  90)								location2 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - nextImage1->virtualY) * ( (Float)(nextImage1->width) )) + x8) - nextImage1->virtualX));
            							}
            							else {
HXLINE(  90)								location2 = ::Std_obj::_hx_int(( (Float)(((y8 * nextImage1->width) + x8)) ));
            							}
HXDLIN(  90)							int this39 = ::iterMagic::Iimg_obj::get(nextImage1->image,location2);
HXDLIN(  90)							int this40;
HXDLIN(  90)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)								this40 = ((((((this39 >> 24) & 255) << 24) | ((this39 & 255) << 16)) | (((this39 >> 8) & 255) << 8)) | ((this39 >> 16) & 255));
            							}
            							else {
HXLINE(  90)								this40 = this39;
            							}
HXDLIN(  90)							Float a12;
HXDLIN(  90)							int this41 = ((this40 >> 24) & 255);
HXDLIN(  90)							if ((this41 == 0)) {
HXLINE(  90)								a12 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								a12 = (( (Float)(this41) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float r12;
HXDLIN(  90)							int this42 = ((this40 >> 16) & 255);
HXDLIN(  90)							if ((this42 == 0)) {
HXLINE(  90)								r12 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								r12 = (( (Float)(this42) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float g12;
HXDLIN(  90)							int this43 = ((this40 >> 8) & 255);
HXDLIN(  90)							if ((this43 == 0)) {
HXLINE(  90)								g12 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								g12 = (( (Float)(this43) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float b13;
HXDLIN(  90)							int this44 = (this40 & 255);
HXDLIN(  90)							if ((this44 == 0)) {
HXLINE(  90)								b13 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								b13 = (( (Float)(this44) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float a22;
HXDLIN(  90)							int this45 = ((color1 >> 24) & 255);
HXDLIN(  90)							if ((this45 == 0)) {
HXLINE(  90)								a22 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								a22 = (( (Float)(this45) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float r22;
HXDLIN(  90)							int this46 = ((color1 >> 16) & 255);
HXDLIN(  90)							if ((this46 == 0)) {
HXLINE(  90)								r22 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								r22 = (( (Float)(this46) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float g22;
HXDLIN(  90)							int this47 = ((color1 >> 8) & 255);
HXDLIN(  90)							if ((this47 == 0)) {
HXLINE(  90)								g22 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								g22 = (( (Float)(this47) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float b23;
HXDLIN(  90)							int this48 = (color1 & 255);
HXDLIN(  90)							if ((this48 == 0)) {
HXLINE(  90)								b23 = ((Float)0.);
            							}
            							else {
HXLINE(  90)								b23 = (( (Float)(this48) ) / ( (Float)(255) ));
            							}
HXDLIN(  90)							Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  90)							int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  90)							int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  90)							int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  90)							int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  90)							int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN(  90)							{
HXLINE(  90)								int _hx_tmp13;
HXDLIN(  90)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)									_hx_tmp13 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            								}
            								else {
HXLINE(  90)									_hx_tmp13 = blended2;
            								}
HXDLIN(  90)								::iterMagic::Iimg_obj::set(nextImage1->image,location2,_hx_tmp13);
            							}
            						}
            						else {
HXLINE(  90)							::Dynamic this49 = nextImage1->image;
HXDLIN(  90)							int index7;
HXDLIN(  90)							if (nextImage1->useVirtualPos) {
HXLINE(  90)								index7 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - nextImage1->virtualY) * ( (Float)(nextImage1->width) )) + x8) - nextImage1->virtualX));
            							}
            							else {
HXLINE(  90)								index7 = ::Std_obj::_hx_int(( (Float)(((y8 * nextImage1->width) + x8)) ));
            							}
HXDLIN(  90)							int _hx_tmp14;
HXDLIN(  90)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)								_hx_tmp14 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            							}
            							else {
HXLINE(  90)								_hx_tmp14 = c6;
            							}
HXDLIN(  90)							::iterMagic::Iimg_obj::set(this49,index7,_hx_tmp14);
            						}
            					}
            				}
HXDLIN(  90)				 ::pi_xy::ImageStruct v3;
HXDLIN(  90)				if (inPlace) {
HXLINE(  90)					{
HXLINE(  90)						int x10 = ::Std_obj::_hx_int(x);
HXDLIN(  90)						int y10 = ::Std_obj::_hx_int(y);
HXDLIN(  90)						bool forceClear1 = false;
HXDLIN(  90)						{
HXLINE(  90)							int _g36 = 0;
HXDLIN(  90)							int _g37 = nextImage1->height;
HXDLIN(  90)							while((_g36 < _g37)){
HXLINE(  90)								_g36 = (_g36 + 1);
HXDLIN(  90)								int dy1 = (_g36 - 1);
HXDLIN(  90)								{
HXLINE(  90)									int _g38 = 0;
HXDLIN(  90)									int _g39 = nextImage1->width;
HXDLIN(  90)									while((_g38 < _g39)){
HXLINE(  90)										_g38 = (_g38 + 1);
HXDLIN(  90)										int dx1 = (_g38 - 1);
HXDLIN(  90)										::Dynamic this50 = nextImage1->image;
HXDLIN(  90)										int index8;
HXDLIN(  90)										if (nextImage1->useVirtualPos) {
HXLINE(  90)											index8 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - nextImage1->virtualY) * ( (Float)(nextImage1->width) )) + dx1) - nextImage1->virtualX));
            										}
            										else {
HXLINE(  90)											index8 = ::Std_obj::_hx_int(( (Float)(((dy1 * nextImage1->width) + dx1)) ));
            										}
HXDLIN(  90)										int c7 = ::iterMagic::Iimg_obj::get(this50,index8);
HXDLIN(  90)										int col1;
HXDLIN(  90)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)											col1 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            										}
            										else {
HXLINE(  90)											col1 = c7;
            										}
HXDLIN(  90)										bool v4;
HXDLIN(  90)										if (nextImage1->useMask) {
HXLINE(  90)											v4 = ::hx::IsNotNull( nextImage1->mask );
            										}
            										else {
HXLINE(  90)											v4 = false;
            										}
HXDLIN(  90)										if (v4) {
HXLINE(  90)											 ::pi_xy::ImageStruct this51 = nextImage1->mask;
HXDLIN(  90)											::Dynamic this52 = this51->image;
HXDLIN(  90)											int index9;
HXDLIN(  90)											if (this51->useVirtualPos) {
HXLINE(  90)												index9 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this51->virtualY) * ( (Float)(this51->width) )) + dx1) - this51->virtualX));
            											}
            											else {
HXLINE(  90)												index9 = ::Std_obj::_hx_int(( (Float)(((dy1 * this51->width) + dx1)) ));
            											}
HXDLIN(  90)											int c8 = ::iterMagic::Iimg_obj::get(this52,index9);
HXDLIN(  90)											int v5;
HXDLIN(  90)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)												v5 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            											}
            											else {
HXLINE(  90)												v5 = c8;
            											}
HXDLIN(  90)											int maskPixel1 = v5;
HXDLIN(  90)											int this53 = col1;
HXDLIN(  90)											if ((maskPixel1 == 0)) {
HXLINE(  90)												col1 = this53;
            											}
            											else {
HXLINE(  90)												Float m01;
HXDLIN(  90)												int this54 = ((maskPixel1 >> 24) & 255);
HXDLIN(  90)												if ((this54 == 0)) {
HXLINE(  90)													m01 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													m01 = (( (Float)(this54) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float m11;
HXDLIN(  90)												int this55 = ((maskPixel1 >> 16) & 255);
HXDLIN(  90)												if ((this55 == 0)) {
HXLINE(  90)													m11 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													m11 = (( (Float)(this55) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float m21;
HXDLIN(  90)												int this56 = ((maskPixel1 >> 8) & 255);
HXDLIN(  90)												if ((this56 == 0)) {
HXLINE(  90)													m21 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													m21 = (( (Float)(this56) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float m31;
HXDLIN(  90)												int this57 = (maskPixel1 & 255);
HXDLIN(  90)												if ((this57 == 0)) {
HXLINE(  90)													m31 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													m31 = (( (Float)(this57) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this53 >> 24) & 255)) )));
HXDLIN(  90)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this53 >> 16) & 255)) )));
HXDLIN(  90)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this53 >> 8) & 255)) )));
HXDLIN(  90)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this53 & 255)) )));
HXDLIN(  90)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  90)										if ((col1 != 0)) {
HXLINE(  90)											int x11 = (x10 + dx1);
HXDLIN(  90)											int y11 = (y10 + dy1);
HXDLIN(  90)											int c9 = col1;
HXDLIN(  90)											bool v6;
HXDLIN(  90)											if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  90)												v6 = this35->transparent;
            											}
            											else {
HXLINE(  90)												v6 = false;
            											}
HXDLIN(  90)											if (v6) {
HXLINE(  90)												int location3;
HXDLIN(  90)												if (this35->useVirtualPos) {
HXLINE(  90)													location3 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - this35->virtualY) * ( (Float)(this35->width) )) + x11) - this35->virtualX));
            												}
            												else {
HXLINE(  90)													location3 = ::Std_obj::_hx_int(( (Float)(((y11 * this35->width) + x11)) ));
            												}
HXDLIN(  90)												int this58 = ::iterMagic::Iimg_obj::get(this35->image,location3);
HXDLIN(  90)												int this59;
HXDLIN(  90)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)													this59 = ((((((this58 >> 24) & 255) << 24) | ((this58 & 255) << 16)) | (((this58 >> 8) & 255) << 8)) | ((this58 >> 16) & 255));
            												}
            												else {
HXLINE(  90)													this59 = this58;
            												}
HXDLIN(  90)												Float a13;
HXDLIN(  90)												int this60 = ((this59 >> 24) & 255);
HXDLIN(  90)												if ((this60 == 0)) {
HXLINE(  90)													a13 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													a13 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float r13;
HXDLIN(  90)												int this61 = ((this59 >> 16) & 255);
HXDLIN(  90)												if ((this61 == 0)) {
HXLINE(  90)													r13 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													r13 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float g13;
HXDLIN(  90)												int this62 = ((this59 >> 8) & 255);
HXDLIN(  90)												if ((this62 == 0)) {
HXLINE(  90)													g13 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													g13 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float b14;
HXDLIN(  90)												int this63 = (this59 & 255);
HXDLIN(  90)												if ((this63 == 0)) {
HXLINE(  90)													b14 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													b14 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float a23;
HXDLIN(  90)												int this64 = ((col1 >> 24) & 255);
HXDLIN(  90)												if ((this64 == 0)) {
HXLINE(  90)													a23 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													a23 = (( (Float)(this64) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float r23;
HXDLIN(  90)												int this65 = ((col1 >> 16) & 255);
HXDLIN(  90)												if ((this65 == 0)) {
HXLINE(  90)													r23 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													r23 = (( (Float)(this65) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float g23;
HXDLIN(  90)												int this66 = ((col1 >> 8) & 255);
HXDLIN(  90)												if ((this66 == 0)) {
HXLINE(  90)													g23 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													g23 = (( (Float)(this66) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float b24;
HXDLIN(  90)												int this67 = (col1 & 255);
HXDLIN(  90)												if ((this67 == 0)) {
HXLINE(  90)													b24 = ((Float)0.);
            												}
            												else {
HXLINE(  90)													b24 = (( (Float)(this67) ) / ( (Float)(255) ));
            												}
HXDLIN(  90)												Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  90)												int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  90)												int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  90)												int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  90)												int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  90)												int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  90)												{
HXLINE(  90)													int v7;
HXDLIN(  90)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)														v7 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE(  90)														v7 = blended3;
            													}
HXDLIN(  90)													::iterMagic::Iimg_obj::set(this35->image,location3,v7);
            												}
            											}
            											else {
HXLINE(  90)												::Dynamic this68 = this35->image;
HXDLIN(  90)												int index10;
HXDLIN(  90)												if (this35->useVirtualPos) {
HXLINE(  90)													index10 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - this35->virtualY) * ( (Float)(this35->width) )) + x11) - this35->virtualX));
            												}
            												else {
HXLINE(  90)													index10 = ::Std_obj::_hx_int(( (Float)(((y11 * this35->width) + x11)) ));
            												}
HXDLIN(  90)												int v8;
HXDLIN(  90)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  90)													v8 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            												}
            												else {
HXLINE(  90)													v8 = c9;
            												}
HXDLIN(  90)												::iterMagic::Iimg_obj::set(this68,index10,v8);
            											}
            										}
            										else {
HXLINE(  90)											if (forceClear1) {
HXLINE(  90)												::Dynamic this69 = this35->image;
HXDLIN(  90)												int x12 = (x10 + dx1);
HXDLIN(  90)												int y12 = (y10 + dy1);
HXDLIN(  90)												int index11;
HXDLIN(  90)												if (this35->useVirtualPos) {
HXLINE(  90)													index11 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - this35->virtualY) * ( (Float)(this35->width) )) + x12) - this35->virtualX));
            												}
            												else {
HXLINE(  90)													index11 = ::Std_obj::_hx_int(( (Float)(((y12 * this35->width) + x12)) ));
            												}
HXDLIN(  90)												::iterMagic::Iimg_obj::set(this69,index11,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  90)					bool v9;
HXDLIN(  90)					if (::hx::IsNotNull( this35->mask )) {
HXLINE(  90)						v9 = includeMask;
            					}
            					else {
HXLINE(  90)						v9 = false;
            					}
HXDLIN(  90)					if (v9) {
HXLINE(  90)						 ::pi_xy::ImageStruct v10 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this35->mask,x,y,( (Float)(this35->width) ),( (Float)(this35->height) ),this35->mask->transparent,inPlace,includeMask);
HXDLIN(  90)						this35->useMask = true;
HXDLIN(  90)						this35->mask = v10;
            					}
HXLINE(  91)					nextImage1 = null();
HXLINE(  90)					v3 = this35;
            				}
            				else {
HXLINE(  90)					bool v11;
HXDLIN(  90)					if (::hx::IsNotNull( this35->mask )) {
HXLINE(  90)						v11 = includeMask;
            					}
            					else {
HXLINE(  90)						v11 = false;
            					}
HXDLIN(  90)					if (v11) {
HXLINE(  90)						 ::pi_xy::ImageStruct v12 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this35->mask,x,y,( (Float)(this35->width) ),( (Float)(this35->height) ),this35->mask->transparent,inPlace,includeMask);
HXDLIN(  90)						nextImage1->useMask = true;
HXDLIN(  90)						nextImage1->mask = v12;
            					}
HXDLIN(  90)					v3 = nextImage1;
            				}
HXDLIN(  90)				thisImage->useMask = true;
HXDLIN(  90)				thisImage->mask = v3;
            			}
HXLINE(  91)			nextImage = null();
HXLINE(  92)			return thisImage;
            		}
            		else {
HXLINE(  94)			bool _hx_tmp15;
HXDLIN(  94)			if (::hx::IsNotNull( thisImage->mask )) {
HXLINE(  94)				_hx_tmp15 = includeMask;
            			}
            			else {
HXLINE(  94)				_hx_tmp15 = false;
            			}
HXDLIN(  94)			if (_hx_tmp15) {
HXLINE(  95)				 ::pi_xy::ImageStruct this70 = thisImage->mask;
HXDLIN(  95)				Float w4 = ( (Float)(thisImage->width) );
HXDLIN(  95)				Float h2 = ( (Float)(thisImage->height) );
HXDLIN(  95)				bool transparent2 = thisImage->mask->transparent;
HXDLIN(  95)				Float r_x2 = x;
HXDLIN(  95)				Float r_y2 = y;
HXDLIN(  95)				Float r_w2 = w4;
HXDLIN(  95)				Float r_h2 = h2;
HXDLIN(  95)				int xmax2 = ::Std_obj::_hx_int(((r_x2 + r_w2) + 1));
HXDLIN(  95)				int ymax2 = ::Std_obj::_hx_int(((r_y2 + r_h2) + 1));
HXDLIN(  95)				int ii_min4 = ::Std_obj::_hx_int(r_x2);
HXDLIN(  95)				int ii_max4 = xmax2;
HXDLIN(  95)				int xRange__start2 = ii_min4;
HXDLIN(  95)				int xRange__max2 = ii_max4;
HXDLIN(  95)				int ii_min5 = ::Std_obj::_hx_int(r_y2);
HXDLIN(  95)				int ii_max5 = ymax2;
HXDLIN(  95)				int yRange__start2 = ii_min5;
HXDLIN(  95)				int yRange__max2 = ii_max5;
HXDLIN(  95)				int range_x2 = xRange__start2;
HXDLIN(  95)				int range_y2 = (yRange__start2 - 1);
HXDLIN(  95)				int range_xReset2 = range_x2;
HXDLIN(  95)				int range_yReset2 = range_y2;
HXDLIN(  95)				int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  95)				int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  95)				int _this_min2 = 0;
HXDLIN(  95)				int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  95)				int width2 = ::Std_obj::_hx_int(w4);
HXDLIN(  95)				int height2 = ::Std_obj::_hx_int(h2);
HXDLIN(  95)				 ::Dynamic imageType2 = null();
HXDLIN(  95)				 ::pi_xy::ImageStruct this71 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  95)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  95)				::Dynamic _hx_tmp16;
HXDLIN(  95)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXLINE(  95)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  95)						 ::iterMagic::BytesImg b10 = byt2;
HXDLIN(  95)						{
HXLINE(  95)							b10->width = width2;
HXDLIN(  95)							b10->height = height2;
HXDLIN(  95)							b10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  95)							b10->data = ::haxe::io::Bytes_obj::alloc((b10->length * 4));
HXDLIN(  95)							{
HXLINE(  95)								int len4 = b10->length;
HXDLIN(  95)								int w5 = 0;
HXDLIN(  95)								{
HXLINE(  95)									int _g40 = 0;
HXDLIN(  95)									int _g41 = b10->height;
HXDLIN(  95)									while((_g40 < _g41)){
HXLINE(  95)										_g40 = (_g40 + 1);
HXDLIN(  95)										int y13 = (_g40 - 1);
HXDLIN(  95)										{
HXLINE(  95)											int _g42 = 0;
HXDLIN(  95)											int _g43 = b10->width;
HXDLIN(  95)											while((_g42 < _g43)){
HXLINE(  95)												_g42 = (_g42 + 1);
HXDLIN(  95)												int x13 = (_g42 - 1);
HXDLIN(  95)												{
HXLINE(  95)													w5 = (w5 + 1);
HXDLIN(  95)													b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  95)												{
HXLINE(  95)													w5 = (w5 + 1);
HXDLIN(  95)													b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  95)												{
HXLINE(  95)													w5 = (w5 + 1);
HXDLIN(  95)													b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  95)												{
HXLINE(  95)													w5 = (w5 + 1);
HXDLIN(  95)													b10->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  95)						_hx_tmp16 = b10;
            					}
            					break;
            					case (int)1: {
HXLINE(  95)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  95)						 ::iterMagic::ArrIntImg a9 = arrI2;
HXDLIN(  95)						{
HXLINE(  95)							a9->width = width2;
HXDLIN(  95)							a9->height = height2;
HXDLIN(  95)							a9->data = ::Array_obj< int >::__new(0);
HXDLIN(  95)							a9->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  95)							{
HXLINE(  95)								int _g44 = 0;
HXDLIN(  95)								int _g45 = a9->length;
HXDLIN(  95)								while((_g44 < _g45)){
HXLINE(  95)									_g44 = (_g44 + 1);
HXDLIN(  95)									int i16 = (_g44 - 1);
HXDLIN(  95)									a9->data[i16] = 0;
            								}
            							}
            						}
HXDLIN(  95)						_hx_tmp16 = a9;
            					}
            					break;
            					case (int)2: {
HXLINE(  95)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  95)						 ::iterMagic::U32ArrImg b15 = u32a2;
HXDLIN(  95)						{
HXLINE(  95)							b15->width = width2;
HXDLIN(  95)							b15->height = height2;
HXDLIN(  95)							b15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  95)							int size2 = (b15->length * 4);
HXDLIN(  95)							b15->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  95)							{
HXLINE(  95)								int _g46 = 0;
HXDLIN(  95)								int _g47 = b15->length;
HXDLIN(  95)								while((_g46 < _g47)){
HXLINE(  95)									_g46 = (_g46 + 1);
HXDLIN(  95)									int i17 = (_g46 - 1);
HXDLIN(  95)									{
HXLINE(  95)										 ::haxe::io::ArrayBufferViewImpl this72 = b15->data;
HXDLIN(  95)										bool _hx_tmp17;
HXDLIN(  95)										if ((i17 >= 0)) {
HXLINE(  95)											_hx_tmp17 = (i17 < (this72->byteLength >> 2));
            										}
            										else {
HXLINE(  95)											_hx_tmp17 = false;
            										}
HXDLIN(  95)										if (_hx_tmp17) {
HXLINE(  95)											 ::haxe::io::Bytes _this2 = this72->bytes;
HXDLIN(  95)											int pos2 = ((i17 << 2) + this72->byteOffset);
HXDLIN(  95)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  95)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  95)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  95)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  95)						_hx_tmp16 = b15;
            					}
            					break;
            					case (int)3: {
HXLINE(  95)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  95)						 ::iterMagic::VecIntImg v13 = vec2;
HXDLIN(  95)						{
HXLINE(  95)							v13->width = width2;
HXDLIN(  95)							v13->height = height2;
HXDLIN(  95)							v13->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  95)							v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  95)							{
HXLINE(  95)								int _g48 = 0;
HXDLIN(  95)								int _g49 = v13->length;
HXDLIN(  95)								while((_g48 < _g49)){
HXLINE(  95)									_g48 = (_g48 + 1);
HXDLIN(  95)									int i18 = (_g48 - 1);
HXDLIN(  95)									v13->data->__unsafe_set(i18,0);
            								}
            							}
            						}
HXDLIN(  95)						_hx_tmp16 = v13;
            					}
            					break;
            					case (int)4: {
HXLINE(  95)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  95)						 ::iterMagic::StackIntImg b16 = sInt2;
HXDLIN(  95)						{
HXLINE(  95)							b16->width = width2;
HXDLIN(  95)							b16->height = height2;
HXDLIN(  95)							b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  95)							b16->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  95)							{
HXLINE(  95)								int len5 = b16->length;
HXDLIN(  95)								 ::haxe::ds::GenericStack_Int d2 = b16->data;
HXDLIN(  95)								if (::hx::IsNull( d2->head )) {
HXLINE(  95)									int _g50 = 0;
HXDLIN(  95)									int _g51 = len5;
HXDLIN(  95)									while((_g50 < _g51)){
HXLINE(  95)										_g50 = (_g50 + 1);
HXDLIN(  95)										int i19 = (_g50 - 1);
HXDLIN(  95)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXLINE(  95)									int _g52 = 0;
HXDLIN(  95)									int _g53 = len5;
HXDLIN(  95)									while((_g52 < _g53)){
HXLINE(  95)										_g52 = (_g52 + 1);
HXDLIN(  95)										int i20 = (_g52 - 1);
HXDLIN(  95)										{
HXLINE(  95)											 ::haxe::ds::GenericCell_Int l2 = b16->data->head;
HXDLIN(  95)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  95)											{
HXLINE(  95)												int _g54 = 0;
HXDLIN(  95)												int _g55 = i20;
HXDLIN(  95)												while((_g54 < _g55)){
HXLINE(  95)													_g54 = (_g54 + 1);
HXDLIN(  95)													int i21 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE(  95)											if (::hx::IsNull( prev2 )) {
HXLINE(  95)												b16->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  95)												l2 = null();
            											}
            											else {
HXLINE(  95)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  95)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  95)						_hx_tmp16 = b16;
            					}
            					break;
            				}
HXDLIN(  95)				this71->image = _hx_tmp16;
HXDLIN(  95)				this71->width = width2;
HXDLIN(  95)				this71->height = height2;
HXDLIN(  95)				this71->imageType = ( (int)(imageType2) );
HXDLIN(  95)				 ::pi_xy::ImageStruct nextImage2 = this71;
HXDLIN(  95)				nextImage2->transparent = transparent2;
HXDLIN(  95)				while((_this_min2 < _this_max2)){
HXLINE(  95)					_this_min2 = (_this_min2 + 1);
HXDLIN(  95)					int i22 = (_this_min2 - 1);
HXDLIN(  95)					if ((range_y2 > range_yMax2)) {
HXLINE(  34)						range_y2 = range_yReset2;
HXLINE(  95)						range_x2 = (range_x2 + 1);
            					}
HXDLIN(  95)					range_y2 = (range_y2 + 1);
HXDLIN(  95)					int i23 = i22;
HXDLIN(  95)					{
HXLINE(  95)						int x14 = range_x2;
HXDLIN(  95)						int y14 = range_y2;
HXDLIN(  95)						int x15 = range_x2;
HXDLIN(  95)						int y15 = (range_yMax2 - range_y2);
HXDLIN(  95)						::Dynamic this73 = this70->image;
HXDLIN(  95)						int index12;
HXDLIN(  95)						if (this70->useVirtualPos) {
HXLINE(  95)							index12 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - this70->virtualY) * ( (Float)(this70->width) )) + x15) - this70->virtualX));
            						}
            						else {
HXLINE(  95)							index12 = ::Std_obj::_hx_int(( (Float)(((y15 * this70->width) + x15)) ));
            						}
HXDLIN(  95)						int c10 = ::iterMagic::Iimg_obj::get(this73,index12);
HXDLIN(  95)						int color2;
HXDLIN(  95)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)							color2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            						}
            						else {
HXLINE(  95)							color2 = c10;
            						}
HXDLIN(  95)						int c11 = color2;
HXDLIN(  95)						bool _hx_tmp18;
HXDLIN(  95)						if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  95)							_hx_tmp18 = nextImage2->transparent;
            						}
            						else {
HXLINE(  95)							_hx_tmp18 = false;
            						}
HXDLIN(  95)						if (_hx_tmp18) {
HXLINE(  95)							int location4;
HXDLIN(  95)							if (nextImage2->useVirtualPos) {
HXLINE(  95)								location4 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - nextImage2->virtualY) * ( (Float)(nextImage2->width) )) + x14) - nextImage2->virtualX));
            							}
            							else {
HXLINE(  95)								location4 = ::Std_obj::_hx_int(( (Float)(((y14 * nextImage2->width) + x14)) ));
            							}
HXDLIN(  95)							int this74 = ::iterMagic::Iimg_obj::get(nextImage2->image,location4);
HXDLIN(  95)							int this75;
HXDLIN(  95)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)								this75 = ((((((this74 >> 24) & 255) << 24) | ((this74 & 255) << 16)) | (((this74 >> 8) & 255) << 8)) | ((this74 >> 16) & 255));
            							}
            							else {
HXLINE(  95)								this75 = this74;
            							}
HXDLIN(  95)							Float a14;
HXDLIN(  95)							int this76 = ((this75 >> 24) & 255);
HXDLIN(  95)							if ((this76 == 0)) {
HXLINE(  95)								a14 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								a14 = (( (Float)(this76) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float r14;
HXDLIN(  95)							int this77 = ((this75 >> 16) & 255);
HXDLIN(  95)							if ((this77 == 0)) {
HXLINE(  95)								r14 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								r14 = (( (Float)(this77) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float g14;
HXDLIN(  95)							int this78 = ((this75 >> 8) & 255);
HXDLIN(  95)							if ((this78 == 0)) {
HXLINE(  95)								g14 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								g14 = (( (Float)(this78) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float b17;
HXDLIN(  95)							int this79 = (this75 & 255);
HXDLIN(  95)							if ((this79 == 0)) {
HXLINE(  95)								b17 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								b17 = (( (Float)(this79) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float a24;
HXDLIN(  95)							int this80 = ((color2 >> 24) & 255);
HXDLIN(  95)							if ((this80 == 0)) {
HXLINE(  95)								a24 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								a24 = (( (Float)(this80) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float r24;
HXDLIN(  95)							int this81 = ((color2 >> 16) & 255);
HXDLIN(  95)							if ((this81 == 0)) {
HXLINE(  95)								r24 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								r24 = (( (Float)(this81) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float g24;
HXDLIN(  95)							int this82 = ((color2 >> 8) & 255);
HXDLIN(  95)							if ((this82 == 0)) {
HXLINE(  95)								g24 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								g24 = (( (Float)(this82) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float b25;
HXDLIN(  95)							int this83 = (color2 & 255);
HXDLIN(  95)							if ((this83 == 0)) {
HXLINE(  95)								b25 = ((Float)0.);
            							}
            							else {
HXLINE(  95)								b25 = (( (Float)(this83) ) / ( (Float)(255) ));
            							}
HXDLIN(  95)							Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  95)							int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  95)							int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  95)							int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a34) + (b25 * a24))));
HXDLIN(  95)							int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  95)							int blended4 = ((((a10 << 24) | (r6 << 16)) | (g6 << 8)) | b18);
HXDLIN(  95)							{
HXLINE(  95)								int _hx_tmp19;
HXDLIN(  95)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)									_hx_tmp19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            								}
            								else {
HXLINE(  95)									_hx_tmp19 = blended4;
            								}
HXDLIN(  95)								::iterMagic::Iimg_obj::set(nextImage2->image,location4,_hx_tmp19);
            							}
            						}
            						else {
HXLINE(  95)							::Dynamic this84 = nextImage2->image;
HXDLIN(  95)							int index13;
HXDLIN(  95)							if (nextImage2->useVirtualPos) {
HXLINE(  95)								index13 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - nextImage2->virtualY) * ( (Float)(nextImage2->width) )) + x14) - nextImage2->virtualX));
            							}
            							else {
HXLINE(  95)								index13 = ::Std_obj::_hx_int(( (Float)(((y14 * nextImage2->width) + x14)) ));
            							}
HXDLIN(  95)							int _hx_tmp20;
HXDLIN(  95)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)								_hx_tmp20 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            							}
            							else {
HXLINE(  95)								_hx_tmp20 = c11;
            							}
HXDLIN(  95)							::iterMagic::Iimg_obj::set(this84,index13,_hx_tmp20);
            						}
            					}
            				}
HXDLIN(  95)				 ::pi_xy::ImageStruct v14;
HXDLIN(  95)				if (inPlace) {
HXLINE(  95)					{
HXLINE(  95)						int x16 = ::Std_obj::_hx_int(x);
HXDLIN(  95)						int y16 = ::Std_obj::_hx_int(y);
HXDLIN(  95)						bool forceClear2 = false;
HXDLIN(  95)						{
HXLINE(  95)							int _g56 = 0;
HXDLIN(  95)							int _g57 = nextImage2->height;
HXDLIN(  95)							while((_g56 < _g57)){
HXLINE(  95)								_g56 = (_g56 + 1);
HXDLIN(  95)								int dy2 = (_g56 - 1);
HXDLIN(  95)								{
HXLINE(  95)									int _g58 = 0;
HXDLIN(  95)									int _g59 = nextImage2->width;
HXDLIN(  95)									while((_g58 < _g59)){
HXLINE(  95)										_g58 = (_g58 + 1);
HXDLIN(  95)										int dx2 = (_g58 - 1);
HXDLIN(  95)										::Dynamic this85 = nextImage2->image;
HXDLIN(  95)										int index14;
HXDLIN(  95)										if (nextImage2->useVirtualPos) {
HXLINE(  95)											index14 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - nextImage2->virtualY) * ( (Float)(nextImage2->width) )) + dx2) - nextImage2->virtualX));
            										}
            										else {
HXLINE(  95)											index14 = ::Std_obj::_hx_int(( (Float)(((dy2 * nextImage2->width) + dx2)) ));
            										}
HXDLIN(  95)										int c12 = ::iterMagic::Iimg_obj::get(this85,index14);
HXDLIN(  95)										int col2;
HXDLIN(  95)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)											col2 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            										}
            										else {
HXLINE(  95)											col2 = c12;
            										}
HXDLIN(  95)										bool v15;
HXDLIN(  95)										if (nextImage2->useMask) {
HXLINE(  95)											v15 = ::hx::IsNotNull( nextImage2->mask );
            										}
            										else {
HXLINE(  95)											v15 = false;
            										}
HXDLIN(  95)										if (v15) {
HXLINE(  95)											 ::pi_xy::ImageStruct this86 = nextImage2->mask;
HXDLIN(  95)											::Dynamic this87 = this86->image;
HXDLIN(  95)											int index15;
HXDLIN(  95)											if (this86->useVirtualPos) {
HXLINE(  95)												index15 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this86->virtualY) * ( (Float)(this86->width) )) + dx2) - this86->virtualX));
            											}
            											else {
HXLINE(  95)												index15 = ::Std_obj::_hx_int(( (Float)(((dy2 * this86->width) + dx2)) ));
            											}
HXDLIN(  95)											int c13 = ::iterMagic::Iimg_obj::get(this87,index15);
HXDLIN(  95)											int v16;
HXDLIN(  95)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)												v16 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            											}
            											else {
HXLINE(  95)												v16 = c13;
            											}
HXDLIN(  95)											int maskPixel2 = v16;
HXDLIN(  95)											int this88 = col2;
HXDLIN(  95)											if ((maskPixel2 == 0)) {
HXLINE(  95)												col2 = this88;
            											}
            											else {
HXLINE(  95)												Float m02;
HXDLIN(  95)												int this89 = ((maskPixel2 >> 24) & 255);
HXDLIN(  95)												if ((this89 == 0)) {
HXLINE(  95)													m02 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													m02 = (( (Float)(this89) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float m12;
HXDLIN(  95)												int this90 = ((maskPixel2 >> 16) & 255);
HXDLIN(  95)												if ((this90 == 0)) {
HXLINE(  95)													m12 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													m12 = (( (Float)(this90) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float m22;
HXDLIN(  95)												int this91 = ((maskPixel2 >> 8) & 255);
HXDLIN(  95)												if ((this91 == 0)) {
HXLINE(  95)													m22 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													m22 = (( (Float)(this91) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float m32;
HXDLIN(  95)												int this92 = (maskPixel2 & 255);
HXDLIN(  95)												if ((this92 == 0)) {
HXLINE(  95)													m32 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													m32 = (( (Float)(this92) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this88 >> 24) & 255)) )));
HXDLIN(  95)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this88 >> 16) & 255)) )));
HXDLIN(  95)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this88 >> 8) & 255)) )));
HXDLIN(  95)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this88 & 255)) )));
HXDLIN(  95)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  95)										if ((col2 != 0)) {
HXLINE(  95)											int x17 = (x16 + dx2);
HXDLIN(  95)											int y17 = (y16 + dy2);
HXDLIN(  95)											int c14 = col2;
HXDLIN(  95)											bool v17;
HXDLIN(  95)											if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  95)												v17 = this70->transparent;
            											}
            											else {
HXLINE(  95)												v17 = false;
            											}
HXDLIN(  95)											if (v17) {
HXLINE(  95)												int location5;
HXDLIN(  95)												if (this70->useVirtualPos) {
HXLINE(  95)													location5 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this70->virtualY) * ( (Float)(this70->width) )) + x17) - this70->virtualX));
            												}
            												else {
HXLINE(  95)													location5 = ::Std_obj::_hx_int(( (Float)(((y17 * this70->width) + x17)) ));
            												}
HXDLIN(  95)												int this93 = ::iterMagic::Iimg_obj::get(this70->image,location5);
HXDLIN(  95)												int this94;
HXDLIN(  95)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)													this94 = ((((((this93 >> 24) & 255) << 24) | ((this93 & 255) << 16)) | (((this93 >> 8) & 255) << 8)) | ((this93 >> 16) & 255));
            												}
            												else {
HXLINE(  95)													this94 = this93;
            												}
HXDLIN(  95)												Float a15;
HXDLIN(  95)												int this95 = ((this94 >> 24) & 255);
HXDLIN(  95)												if ((this95 == 0)) {
HXLINE(  95)													a15 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													a15 = (( (Float)(this95) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float r15;
HXDLIN(  95)												int this96 = ((this94 >> 16) & 255);
HXDLIN(  95)												if ((this96 == 0)) {
HXLINE(  95)													r15 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													r15 = (( (Float)(this96) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float g15;
HXDLIN(  95)												int this97 = ((this94 >> 8) & 255);
HXDLIN(  95)												if ((this97 == 0)) {
HXLINE(  95)													g15 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													g15 = (( (Float)(this97) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float b19;
HXDLIN(  95)												int this98 = (this94 & 255);
HXDLIN(  95)												if ((this98 == 0)) {
HXLINE(  95)													b19 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													b19 = (( (Float)(this98) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float a25;
HXDLIN(  95)												int this99 = ((col2 >> 24) & 255);
HXDLIN(  95)												if ((this99 == 0)) {
HXLINE(  95)													a25 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													a25 = (( (Float)(this99) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float r25;
HXDLIN(  95)												int this100 = ((col2 >> 16) & 255);
HXDLIN(  95)												if ((this100 == 0)) {
HXLINE(  95)													r25 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													r25 = (( (Float)(this100) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float g25;
HXDLIN(  95)												int this101 = ((col2 >> 8) & 255);
HXDLIN(  95)												if ((this101 == 0)) {
HXLINE(  95)													g25 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													g25 = (( (Float)(this101) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float b26;
HXDLIN(  95)												int this102 = (col2 & 255);
HXDLIN(  95)												if ((this102 == 0)) {
HXLINE(  95)													b26 = ((Float)0.);
            												}
            												else {
HXLINE(  95)													b26 = (( (Float)(this102) ) / ( (Float)(255) ));
            												}
HXDLIN(  95)												Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  95)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  95)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  95)												int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a35) + (b26 * a25))));
HXDLIN(  95)												int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  95)												int blended5 = ((((a16 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN(  95)												{
HXLINE(  95)													int v18;
HXDLIN(  95)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)														v18 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            													}
            													else {
HXLINE(  95)														v18 = blended5;
            													}
HXDLIN(  95)													::iterMagic::Iimg_obj::set(this70->image,location5,v18);
            												}
            											}
            											else {
HXLINE(  95)												::Dynamic this103 = this70->image;
HXDLIN(  95)												int index16;
HXDLIN(  95)												if (this70->useVirtualPos) {
HXLINE(  95)													index16 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this70->virtualY) * ( (Float)(this70->width) )) + x17) - this70->virtualX));
            												}
            												else {
HXLINE(  95)													index16 = ::Std_obj::_hx_int(( (Float)(((y17 * this70->width) + x17)) ));
            												}
HXDLIN(  95)												int v19;
HXDLIN(  95)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)													v19 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            												}
            												else {
HXLINE(  95)													v19 = c14;
            												}
HXDLIN(  95)												::iterMagic::Iimg_obj::set(this103,index16,v19);
            											}
            										}
            										else {
HXLINE(  95)											if (forceClear2) {
HXLINE(  95)												::Dynamic this104 = this70->image;
HXDLIN(  95)												int x18 = (x16 + dx2);
HXDLIN(  95)												int y18 = (y16 + dy2);
HXDLIN(  95)												int index17;
HXDLIN(  95)												if (this70->useVirtualPos) {
HXLINE(  95)													index17 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - this70->virtualY) * ( (Float)(this70->width) )) + x18) - this70->virtualX));
            												}
            												else {
HXLINE(  95)													index17 = ::Std_obj::_hx_int(( (Float)(((y18 * this70->width) + x18)) ));
            												}
HXDLIN(  95)												::iterMagic::Iimg_obj::set(this104,index17,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  95)					bool v20;
HXDLIN(  95)					if (::hx::IsNotNull( this70->mask )) {
HXLINE(  95)						v20 = includeMask;
            					}
            					else {
HXLINE(  95)						v20 = false;
            					}
HXDLIN(  95)					if (v20) {
HXLINE(  95)						 ::pi_xy::ImageStruct v21 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this70->mask,x,y,( (Float)(this70->width) ),( (Float)(this70->height) ),this70->mask->transparent,inPlace,includeMask);
HXDLIN(  95)						this70->useMask = true;
HXDLIN(  95)						this70->mask = v21;
            					}
HXLINE(  91)					nextImage2 = null();
HXLINE(  95)					v14 = this70;
            				}
            				else {
HXLINE(  95)					bool v22;
HXDLIN(  95)					if (::hx::IsNotNull( this70->mask )) {
HXLINE(  95)						v22 = includeMask;
            					}
            					else {
HXLINE(  95)						v22 = false;
            					}
HXDLIN(  95)					if (v22) {
HXLINE(  95)						 ::pi_xy::ImageStruct v23 = ::pi_xy::imageAbstracts::_TransformImage::TransformImage_Impl__obj::flippedY(this70->mask,x,y,( (Float)(this70->width) ),( (Float)(this70->height) ),this70->mask->transparent,inPlace,includeMask);
HXDLIN(  95)						nextImage2->useMask = true;
HXDLIN(  95)						nextImage2->mask = v23;
            					}
HXDLIN(  95)					v14 = nextImage2;
            				}
HXDLIN(  95)				nextImage->useMask = true;
HXDLIN(  95)				nextImage->mask = v14;
            			}
HXLINE(  97)			return nextImage;
            		}
HXLINE(  88)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlipImage_Fields__obj,imageflipY,return )


FlipImage_Fields__obj::FlipImage_Fields__obj()
{
}

bool FlipImage_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"imageflipX") ) { outValue = imageflipX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imageflipY") ) { outValue = imageflipY_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlipImage_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlipImage_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlipImage_Fields__obj::__mClass;

static ::String FlipImage_Fields__obj_sStaticFields[] = {
	HX_("imageflipX",d0,9b,32,7b),
	HX_("imageflipY",d1,9b,32,7b),
	::String(null())
};

void FlipImage_Fields__obj::__register()
{
	FlipImage_Fields__obj _hx_dummy;
	FlipImage_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.transformation._FlipImage.FlipImage_Fields_",f4,68,73,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlipImage_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlipImage_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlipImage_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlipImage_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlipImage_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace transformation
} // end namespace _FlipImage
