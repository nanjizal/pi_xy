// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_iter_BoundIterator
#include <pi_xy/iter/BoundIterator.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_iter__BoundIterator_BoundIterator_Fields_
#include <pi_xy/iter/_BoundIterator/BoundIterator_Fields_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9ad24034b0e69d2a_69_new,"pi_xy.iter.BoundIterator","new",0x76089f0f,"pi_xy.iter.BoundIterator.new","pi_xy/iter/BoundIterator.hx",69,0xe7ee53a1)
namespace pi_xy{
namespace iter{

void BoundIterator_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9ad24034b0e69d2a_69_new)
HXLINE(  83)		this->_boundIteratorX = ::pi_xy::iter::_BoundIterator::BoundIterator_Fields__obj::boundIteratorX_dyn();
HXLINE(  78)		this->_boundIterator4 = ::pi_xy::iter::_BoundIterator::BoundIterator_Fields__obj::boundIterator4_dyn();
HXLINE(  73)		this->_boundIterator3 = ::pi_xy::iter::_BoundIterator::BoundIterator_Fields__obj::boundIterator3_dyn();
            	}

Dynamic BoundIterator_obj::__CreateEmpty() { return new BoundIterator_obj; }

void *BoundIterator_obj::_hx_vtable = 0;

Dynamic BoundIterator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BoundIterator_obj > _hx_result = new BoundIterator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BoundIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6362992d;
}


::hx::ObjectPtr< BoundIterator_obj > BoundIterator_obj::__new() {
	::hx::ObjectPtr< BoundIterator_obj > __this = new BoundIterator_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BoundIterator_obj > BoundIterator_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BoundIterator_obj *__this = (BoundIterator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BoundIterator_obj), true, "pi_xy.iter.BoundIterator"));
	*(void **)__this = BoundIterator_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BoundIterator_obj::BoundIterator_obj()
{
}

void BoundIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BoundIterator);
	HX_MARK_MEMBER_NAME(_boundIterator3,"_boundIterator3");
	HX_MARK_MEMBER_NAME(_boundIterator4,"_boundIterator4");
	HX_MARK_MEMBER_NAME(_boundIteratorX,"_boundIteratorX");
	HX_MARK_END_CLASS();
}

void BoundIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_boundIterator3,"_boundIterator3");
	HX_VISIT_MEMBER_NAME(_boundIterator4,"_boundIterator4");
	HX_VISIT_MEMBER_NAME(_boundIteratorX,"_boundIteratorX");
}

::hx::Val BoundIterator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"_boundIterator3") ) { return ::hx::Val( _boundIterator3 ); }
		if (HX_FIELD_EQ(inName,"_boundIterator4") ) { return ::hx::Val( _boundIterator4 ); }
		if (HX_FIELD_EQ(inName,"_boundIteratorX") ) { return ::hx::Val( _boundIteratorX ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BoundIterator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"_boundIterator3") ) { _boundIterator3=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_boundIterator4") ) { _boundIterator4=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_boundIteratorX") ) { _boundIteratorX=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BoundIterator_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BoundIterator_obj,_boundIterator3),HX_("_boundIterator3",06,e7,8f,cc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BoundIterator_obj,_boundIterator4),HX_("_boundIterator4",07,e7,8f,cc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BoundIterator_obj,_boundIteratorX),HX_("_boundIteratorX",2b,e7,8f,cc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BoundIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String BoundIterator_obj_sMemberFields[] = {
	HX_("_boundIterator3",06,e7,8f,cc),
	HX_("_boundIterator4",07,e7,8f,cc),
	HX_("_boundIteratorX",2b,e7,8f,cc),
	::String(null()) };

::hx::Class BoundIterator_obj::__mClass;

void BoundIterator_obj::__register()
{
	BoundIterator_obj _hx_dummy;
	BoundIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.iter.BoundIterator",9d,6b,52,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BoundIterator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BoundIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoundIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoundIterator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace iter
