// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_imageAbstracts__TransformImage_TransformImage_Impl_
#define INCLUDED_pi_xy_imageAbstracts__TransformImage_TransformImage_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(pi_xy,ImageStruct)
HX_DECLARE_CLASS3(pi_xy,imageAbstracts,_TransformImage,TransformImage_Impl_)

namespace pi_xy{
namespace imageAbstracts{
namespace _TransformImage{


class HXCPP_CLASS_ATTRIBUTES TransformImage_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TransformImage_Impl__obj OBJ_;
		TransformImage_Impl__obj();

	public:
		enum { _hx_ClassId = 0x0e424840 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.imageAbstracts._TransformImage.TransformImage_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.imageAbstracts._TransformImage.TransformImage_Impl_"); }

		inline static ::hx::ObjectPtr< TransformImage_Impl__obj > __new() {
			::hx::ObjectPtr< TransformImage_Impl__obj > __this = new TransformImage_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TransformImage_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			TransformImage_Impl__obj *__this = (TransformImage_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TransformImage_Impl__obj), false, "pi_xy.imageAbstracts._TransformImage.TransformImage_Impl_"));
			*(void **)__this = TransformImage_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TransformImage_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TransformImage_Impl_",4f,08,27,a8); }

		static  ::pi_xy::ImageStruct _new(int w,int h);
		static ::Dynamic _new_dyn();

		static  ::pi_xy::ImageStruct flippedX( ::pi_xy::ImageStruct this1,Float x,Float y,Float w,Float h,::hx::Null< bool >  transparent,::hx::Null< bool >  inPlace,::hx::Null< bool >  includeMask);
		static ::Dynamic flippedX_dyn();

		static  ::pi_xy::ImageStruct flippedY( ::pi_xy::ImageStruct this1,Float x,Float y,Float w,Float h,::hx::Null< bool >  transparent,::hx::Null< bool >  inPlace,::hx::Null< bool >  includeMask);
		static ::Dynamic flippedY_dyn();

		static  ::pi_xy::ImageStruct spunClock90( ::pi_xy::ImageStruct this1,Float x,Float y,Float w,Float h,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic spunClock90_dyn();

		static  ::pi_xy::ImageStruct spunAntiClock90( ::pi_xy::ImageStruct this1,Float x,Float y,Float w,Float h,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic spunAntiClock90_dyn();

		static  ::pi_xy::ImageStruct spun180( ::pi_xy::ImageStruct this1,Float x,Float y,Float w,Float h,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic spun180_dyn();

		static  ::pi_xy::ImageStruct scaleMatch( ::pi_xy::ImageStruct this1, ::pi_xy::ImageStruct img,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic scaleMatch_dyn();

		static  ::pi_xy::ImageStruct scaleXY( ::pi_xy::ImageStruct this1,Float sx,Float sy,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic scaleXY_dyn();

		static  ::pi_xy::ImageStruct rotateClockwiseDegrees( ::pi_xy::ImageStruct this1,Float angle,::hx::Null< Float >  centreX,::hx::Null< Float >  centreY,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic rotateClockwiseDegrees_dyn();

		static  ::pi_xy::ImageStruct rotateClockwiseRadians( ::pi_xy::ImageStruct this1,Float theta,::hx::Null< Float >  centreX,::hx::Null< Float >  centreY,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic rotateClockwiseRadians_dyn();

		static  ::pi_xy::ImageStruct rotate( ::pi_xy::ImageStruct this1,Float theta,::hx::Null< Float >  centreX,::hx::Null< Float >  centreY,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic rotate_dyn();

		static  ::pi_xy::ImageStruct scaleUpInt( ::pi_xy::ImageStruct this1,::hx::Null< int >  scaleW,::hx::Null< int >  scaleH,::hx::Null< bool >  transparent,::hx::Null< bool >  includeMask);
		static ::Dynamic scaleUpInt_dyn();

};

} // end namespace pi_xy
} // end namespace imageAbstracts
} // end namespace _TransformImage

#endif /* INCLUDED_pi_xy_imageAbstracts__TransformImage_TransformImage_Impl_ */ 
