// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_pi_xy_algo_Barycentric
#include <pi_xy/algo/Barycentric.h>
#endif
#ifndef INCLUDED_pi_xy_algo_BarycentricCoordinates
#include <pi_xy/algo/BarycentricCoordinates.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4fd92956fe43e059_88_new,"pi_xy.algo.Barycentric","new",0xd4fafe1c,"pi_xy.algo.Barycentric.new","pi_xy/algo/Barycentric.hx",88,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_101_preCalculateValues,"pi_xy.algo.Barycentric","preCalculateValues",0x958b0ac9,"pi_xy.algo.Barycentric.preCalculateValues","pi_xy/algo/Barycentric.hx",101,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_116_getInsideRatios,"pi_xy.algo.Barycentric","getInsideRatios",0xd2d63b96,"pi_xy.algo.Barycentric.getInsideRatios","pi_xy/algo/Barycentric.hx",116,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_128_getRatios,"pi_xy.algo.Barycentric","getRatios",0x536ae0fa,"pi_xy.algo.Barycentric.getRatios","pi_xy/algo/Barycentric.hx",128,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_140_get_centroidX,"pi_xy.algo.Barycentric","get_centroidX",0x9a3a5cab,"pi_xy.algo.Barycentric.get_centroidX","pi_xy/algo/Barycentric.hx",140,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_144_get_centroidY,"pi_xy.algo.Barycentric","get_centroidY",0x9a3a5cac,"pi_xy.algo.Barycentric.get_centroidY","pi_xy/algo/Barycentric.hx",144,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_148_medianABx,"pi_xy.algo.Barycentric","medianABx",0xd9db6e69,"pi_xy.algo.Barycentric.medianABx","pi_xy/algo/Barycentric.hx",148,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_152_medianBCx,"pi_xy.algo.Barycentric","medianBCx",0xd9dc3189,"pi_xy.algo.Barycentric.medianBCx","pi_xy/algo/Barycentric.hx",152,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_156_medianCAx,"pi_xy.algo.Barycentric","medianCAx",0xd9dcf20c,"pi_xy.algo.Barycentric.medianCAx","pi_xy/algo/Barycentric.hx",156,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_160_medianABy,"pi_xy.algo.Barycentric","medianABy",0xd9db6e6a,"pi_xy.algo.Barycentric.medianABy","pi_xy/algo/Barycentric.hx",160,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_164_medianBCy,"pi_xy.algo.Barycentric","medianBCy",0xd9dc318a,"pi_xy.algo.Barycentric.medianBCy","pi_xy/algo/Barycentric.hx",164,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_168_medianCAy,"pi_xy.algo.Barycentric","medianCAy",0xd9dcf20d,"pi_xy.algo.Barycentric.medianCAy","pi_xy/algo/Barycentric.hx",168,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_171_scaled,"pi_xy.algo.Barycentric","scaled",0xc4bcfa5e,"pi_xy.algo.Barycentric.scaled","pi_xy/algo/Barycentric.hx",171,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_4fd92956fe43e059_216_scalePoint,"pi_xy.algo.Barycentric","scalePoint",0xe517a32a,"pi_xy.algo.Barycentric.scalePoint","pi_xy/algo/Barycentric.hx",216,0xa63b7d34)
namespace pi_xy{
namespace algo{

void Barycentric_obj::__construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated){
            		bool preCalculated = __o_preCalculated.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4fd92956fe43e059_88_new)
HXLINE(  89)		this->ax = ax;
HXLINE(  90)		this->ay = ay;
HXLINE(  91)		this->bx = bx;
HXLINE(  92)		this->by = by;
HXLINE(  93)		this->cx = cx;
HXLINE(  94)		this->cy = cy;
HXLINE(  95)		this->preCalculated = preCalculated;
HXLINE(  96)		if (preCalculated) {
HXLINE(  97)			this->bcx = (this->bx - this->cx);
HXDLIN(  97)			this->bcy = (this->by - this->cy);
HXDLIN(  97)			this->acx = (this->ax - this->cx);
HXDLIN(  97)			this->acy = (this->ay - this->cy);
HXDLIN(  97)			Float ax1 = this->bcx;
HXDLIN(  97)			Float ay1 = this->bcy;
HXDLIN(  97)			this->dot11 = ((ax1 * ax1) + (ay1 * ay1));
HXDLIN(  97)			this->dot12 = ((this->bcx * this->acx) + (this->bcy * this->acy));
HXDLIN(  97)			Float ax2 = this->acx;
HXDLIN(  97)			Float ay2 = this->acy;
HXDLIN(  97)			this->dot22 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  97)			this->denom1 = (( (Float)(1) ) / ((this->dot11 * this->dot22) - (this->dot12 * this->dot12)));
HXDLIN(  97)			Float a = this->ax;
HXDLIN(  97)			Float b = this->bx;
HXDLIN(  97)			Float c = this->cx;
HXDLIN(  97)			 ::pi_xy::iter::IntIterStart _hx_tmp;
HXDLIN(  97)			if ((a > b)) {
HXLINE(  97)				if ((a > c)) {
HXLINE(  97)					int min;
HXDLIN(  97)					if ((b > c)) {
HXLINE(  97)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  97)						min = ::Math_obj::floor(b);
            					}
HXDLIN(  97)					int ii_min = min;
HXDLIN(  97)					int ii_max = ::Math_obj::ceil(a);
HXDLIN(  97)					_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE(  97)					int ii_min1 = ::Math_obj::floor(b);
HXDLIN(  97)					int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  97)					_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE(  97)				if ((b > c)) {
HXLINE(  97)					int min1;
HXDLIN(  97)					if ((a > c)) {
HXLINE(  97)						min1 = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  97)						min1 = ::Math_obj::ceil(a);
            					}
HXDLIN(  97)					int ii_min2 = min1;
HXDLIN(  97)					int ii_max2 = ::Math_obj::ceil(b);
HXDLIN(  97)					_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE(  97)					int ii_min3 = ::Math_obj::floor(a);
HXDLIN(  97)					int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  97)					_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  97)			this->xIter3 = _hx_tmp;
HXDLIN(  97)			Float a1 = this->ay;
HXDLIN(  97)			Float b1 = this->by;
HXDLIN(  97)			Float c1 = this->cy;
HXDLIN(  97)			 ::pi_xy::iter::IntIterStart _hx_tmp1;
HXDLIN(  97)			if ((a1 > b1)) {
HXLINE(  97)				if ((a1 > c1)) {
HXLINE(  97)					int min2;
HXDLIN(  97)					if ((b1 > c1)) {
HXLINE(  97)						min2 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  97)						min2 = ::Math_obj::floor(b1);
            					}
HXDLIN(  97)					int ii_min4 = min2;
HXDLIN(  97)					int ii_max4 = ::Math_obj::ceil(a1);
HXDLIN(  97)					_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE(  97)					int ii_min5 = ::Math_obj::floor(b1);
HXDLIN(  97)					int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  97)					_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE(  97)				if ((b1 > c1)) {
HXLINE(  97)					int min3;
HXDLIN(  97)					if ((a1 > c1)) {
HXLINE(  97)						min3 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  97)						min3 = ::Math_obj::ceil(a1);
            					}
HXDLIN(  97)					int ii_min6 = min3;
HXDLIN(  97)					int ii_max6 = ::Math_obj::ceil(b1);
HXDLIN(  97)					_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE(  97)					int ii_min7 = ::Math_obj::floor(a1);
HXDLIN(  97)					int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  97)					_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN(  97)			this->yIter3 = _hx_tmp1;
            		}
            	}

Dynamic Barycentric_obj::__CreateEmpty() { return new Barycentric_obj; }

void *Barycentric_obj::_hx_vtable = 0;

Dynamic Barycentric_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Barycentric_obj > _hx_result = new Barycentric_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Barycentric_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50e62ee4;
}

void Barycentric_obj::preCalculateValues(){
            	HX_GC_STACKFRAME(&_hx_pos_4fd92956fe43e059_101_preCalculateValues)
HXLINE( 102)		this->bcx = (this->bx - this->cx);
HXLINE( 103)		this->bcy = (this->by - this->cy);
HXLINE( 104)		this->acx = (this->ax - this->cx);
HXLINE( 105)		this->acy = (this->ay - this->cy);
HXLINE( 107)		Float ax = this->bcx;
HXDLIN( 107)		Float ay = this->bcy;
HXDLIN( 107)		this->dot11 = ((ax * ax) + (ay * ay));
HXLINE( 108)		this->dot12 = ((this->bcx * this->acx) + (this->bcy * this->acy));
HXLINE( 109)		Float ax1 = this->acx;
HXDLIN( 109)		Float ay1 = this->acy;
HXDLIN( 109)		this->dot22 = ((ax1 * ax1) + (ay1 * ay1));
HXLINE( 110)		this->denom1 = (( (Float)(1) ) / ((this->dot11 * this->dot22) - (this->dot12 * this->dot12)));
HXLINE( 111)		Float a = this->ax;
HXDLIN( 111)		Float b = this->bx;
HXDLIN( 111)		Float c = this->cx;
HXDLIN( 111)		 ::pi_xy::iter::IntIterStart _hx_tmp;
HXDLIN( 111)		if ((a > b)) {
HXLINE( 111)			if ((a > c)) {
HXLINE( 111)				int min;
HXDLIN( 111)				if ((b > c)) {
HXLINE( 111)					min = ::Math_obj::floor(c);
            				}
            				else {
HXLINE( 111)					min = ::Math_obj::floor(b);
            				}
HXDLIN( 111)				int ii_min = min;
HXDLIN( 111)				int ii_max = ::Math_obj::ceil(a);
HXDLIN( 111)				_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXLINE( 111)				int ii_min1 = ::Math_obj::floor(b);
HXDLIN( 111)				int ii_max1 = ::Math_obj::ceil(c);
HXDLIN( 111)				_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXLINE( 111)			if ((b > c)) {
HXLINE( 111)				int min1;
HXDLIN( 111)				if ((a > c)) {
HXLINE( 111)					min1 = ::Math_obj::floor(c);
            				}
            				else {
HXLINE( 111)					min1 = ::Math_obj::ceil(a);
            				}
HXDLIN( 111)				int ii_min2 = min1;
HXDLIN( 111)				int ii_max2 = ::Math_obj::ceil(b);
HXDLIN( 111)				_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXLINE( 111)				int ii_min3 = ::Math_obj::floor(a);
HXDLIN( 111)				int ii_max3 = ::Math_obj::ceil(c);
HXDLIN( 111)				_hx_tmp =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXDLIN( 111)		this->xIter3 = _hx_tmp;
HXLINE( 112)		Float a1 = this->ay;
HXDLIN( 112)		Float b1 = this->by;
HXDLIN( 112)		Float c1 = this->cy;
HXDLIN( 112)		 ::pi_xy::iter::IntIterStart _hx_tmp1;
HXDLIN( 112)		if ((a1 > b1)) {
HXLINE( 112)			if ((a1 > c1)) {
HXLINE( 112)				int min2;
HXDLIN( 112)				if ((b1 > c1)) {
HXLINE( 112)					min2 = ::Math_obj::floor(c1);
            				}
            				else {
HXLINE( 112)					min2 = ::Math_obj::floor(b1);
            				}
HXDLIN( 112)				int ii_min4 = min2;
HXDLIN( 112)				int ii_max4 = ::Math_obj::ceil(a1);
HXDLIN( 112)				_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            			}
            			else {
HXLINE( 112)				int ii_min5 = ::Math_obj::floor(b1);
HXDLIN( 112)				int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN( 112)				_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            			}
            		}
            		else {
HXLINE( 112)			if ((b1 > c1)) {
HXLINE( 112)				int min3;
HXDLIN( 112)				if ((a1 > c1)) {
HXLINE( 112)					min3 = ::Math_obj::floor(c1);
            				}
            				else {
HXLINE( 112)					min3 = ::Math_obj::ceil(a1);
            				}
HXDLIN( 112)				int ii_min6 = min3;
HXDLIN( 112)				int ii_max6 = ::Math_obj::ceil(b1);
HXDLIN( 112)				_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            			}
            			else {
HXLINE( 112)				int ii_min7 = ::Math_obj::floor(a1);
HXDLIN( 112)				int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN( 112)				_hx_tmp1 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            			}
            		}
HXDLIN( 112)		this->yIter3 = _hx_tmp1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,preCalculateValues,(void))

 ::pi_xy::algo::BarycentricCoordinates Barycentric_obj::getInsideRatios(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_4fd92956fe43e059_116_getInsideRatios)
HXDLIN( 116)		bool _hx_tmp;
HXDLIN( 116)		 ::pi_xy::iter::IntIterStart this1 = this->xIter3;
HXDLIN( 116)		bool _hx_tmp1;
HXDLIN( 116)		if ((x > (this1->start - 1))) {
HXDLIN( 116)			_hx_tmp1 = (x < (this1->max + 1));
            		}
            		else {
HXDLIN( 116)			_hx_tmp1 = false;
            		}
HXDLIN( 116)		if (_hx_tmp1) {
HXDLIN( 116)			 ::pi_xy::iter::IntIterStart this2 = this->yIter3;
HXDLIN( 116)			if ((y > (this2->start - 1))) {
HXDLIN( 116)				_hx_tmp = (y < (this2->max + 1));
            			}
            			else {
HXDLIN( 116)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 116)			_hx_tmp = false;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 117)			Float pcx = (x - this->cx);
HXDLIN( 117)			Float pcy = (y - this->cy);
HXDLIN( 117)			Float dot31 = ((pcx * this->bcx) + (pcy * this->bcy));
HXDLIN( 117)			Float dot32 = ((pcx * this->acx) + (pcy * this->acy));
HXDLIN( 117)			Float ratioA = (((this->dot22 * dot31) - (this->dot12 * dot32)) * this->denom1);
HXDLIN( 117)			Float ratioB = (((this->dot11 * dot32) - (this->dot12 * dot31)) * this->denom1);
HXDLIN( 117)			Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 117)			 ::pi_xy::algo::BarycentricCoordinates bary =  ::pi_xy::algo::BarycentricCoordinates_obj::__alloc( HX_CTX ,ratioA,ratioB,ratioC);
HXLINE( 118)			bool _hx_tmp2;
HXDLIN( 118)			bool _hx_tmp3;
HXDLIN( 118)			if ((bary->ratioA >= 0)) {
HXLINE( 118)				_hx_tmp3 = (bary->ratioB >= 0);
            			}
            			else {
HXLINE( 118)				_hx_tmp3 = false;
            			}
HXDLIN( 118)			if (_hx_tmp3) {
HXLINE( 118)				_hx_tmp2 = (bary->ratioC >= 0);
            			}
            			else {
HXLINE( 118)				_hx_tmp2 = false;
            			}
HXDLIN( 118)			if (_hx_tmp2) {
HXLINE( 119)				return bary;
            			}
            			else {
HXLINE( 121)				return null();
            			}
            		}
            		else {
HXLINE( 124)			return null();
            		}
HXLINE( 116)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Barycentric_obj,getInsideRatios,return )

 ::pi_xy::algo::BarycentricCoordinates Barycentric_obj::getRatios(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_4fd92956fe43e059_128_getRatios)
HXLINE( 129)		Float pcx = (x - this->cx);
HXLINE( 130)		Float pcy = (y - this->cy);
HXLINE( 131)		Float dot31 = ((pcx * this->bcx) + (pcy * this->bcy));
HXLINE( 132)		Float dot32 = ((pcx * this->acx) + (pcy * this->acy));
HXLINE( 133)		Float ratioA = (((this->dot22 * dot31) - (this->dot12 * dot32)) * this->denom1);
HXLINE( 134)		Float ratioB = (((this->dot11 * dot32) - (this->dot12 * dot31)) * this->denom1);
HXLINE( 135)		Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXLINE( 136)		return  ::pi_xy::algo::BarycentricCoordinates_obj::__alloc( HX_CTX ,ratioA,ratioB,ratioC);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Barycentric_obj,getRatios,return )

Float Barycentric_obj::get_centroidX(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_140_get_centroidX)
HXDLIN( 140)		return (((this->ax + this->bx) + this->cx) / ( (Float)(3) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,get_centroidX,return )

Float Barycentric_obj::get_centroidY(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_144_get_centroidY)
HXDLIN( 144)		return (((this->ay + this->by) + this->cy) / ( (Float)(3) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,get_centroidY,return )

Float Barycentric_obj::medianABx(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_148_medianABx)
HXDLIN( 148)		return ((this->ax + this->bx) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,medianABx,return )

Float Barycentric_obj::medianBCx(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_152_medianBCx)
HXDLIN( 152)		return ((this->bx + this->cx) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,medianBCx,return )

Float Barycentric_obj::medianCAx(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_156_medianCAx)
HXDLIN( 156)		return ((this->cx + this->ax) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,medianCAx,return )

Float Barycentric_obj::medianABy(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_160_medianABy)
HXDLIN( 160)		return ((this->ay + this->by) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,medianABy,return )

Float Barycentric_obj::medianBCy(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_164_medianBCy)
HXDLIN( 164)		return ((this->by + this->cy) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,medianBCy,return )

Float Barycentric_obj::medianCAy(){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_168_medianCAy)
HXDLIN( 168)		return ((this->cy + this->ay) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Barycentric_obj,medianCAy,return )

 ::pi_xy::algo::Barycentric Barycentric_obj::scaled(Float scaleA,Float scaleB,Float scaleC){
            	HX_GC_STACKFRAME(&_hx_pos_4fd92956fe43e059_171_scaled)
HXLINE( 172)		Float x0 = ((Float)0.);
HXLINE( 173)		Float y0 = ((Float)0.);
HXLINE( 174)		bool isScaledA = (scaleA != ((Float)1.));
HXLINE( 175)		bool isScaledB = (scaleB != ((Float)1.));
HXLINE( 176)		bool isScaledC = (scaleC != ((Float)1.));
HXLINE( 177)		if (isScaledA) {
HXLINE( 177)			if (isScaledB) {
HXLINE( 177)				if (isScaledC) {
HXLINE( 200)					x0 = (((this->ax + this->bx) + this->cx) / ( (Float)(3) ));
HXLINE( 201)					y0 = (((this->ay + this->by) + this->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE( 197)					x0 = this->cx;
HXLINE( 198)					y0 = this->cy;
            				}
            			}
            			else {
HXLINE( 177)				if (isScaledC) {
HXLINE( 194)					x0 = this->bx;
HXLINE( 195)					y0 = this->by;
            				}
            				else {
HXLINE( 191)					x0 = ((this->bx + this->cx) / ( (Float)(2) ));
HXLINE( 192)					y0 = ((this->by + this->cy) / ( (Float)(2) ));
            				}
            			}
            		}
            		else {
HXLINE( 177)			if (isScaledB) {
HXLINE( 177)				if (isScaledC) {
HXLINE( 188)					x0 = this->ax;
HXLINE( 189)					y0 = this->ay;
            				}
            				else {
HXLINE( 185)					x0 = ((this->cx + this->ax) / ( (Float)(2) ));
HXLINE( 186)					y0 = ((this->cy + this->ay) / ( (Float)(2) ));
            				}
            			}
            			else {
HXLINE( 177)				if (isScaledC) {
HXLINE( 182)					x0 = ((this->ax + this->bx) / ( (Float)(2) ));
HXLINE( 183)					y0 = ((this->ay + this->by) / ( (Float)(2) ));
            				}
            				else {
HXLINE( 179)					x0 = (((this->ax + this->bx) + this->cx) / ( (Float)(3) ));
HXLINE( 180)					y0 = (((this->ay + this->by) + this->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE( 204)		Float ax_;
HXDLIN( 204)		if (isScaledA) {
HXLINE( 204)			Float point = this->ax;
HXDLIN( 204)			point = (point - x0);
HXDLIN( 204)			point = (point * scaleA);
HXDLIN( 204)			point = (point + x0);
HXDLIN( 204)			ax_ = point;
            		}
            		else {
HXLINE( 204)			ax_ = this->ax;
            		}
HXLINE( 205)		Float ay_;
HXDLIN( 205)		if (isScaledA) {
HXLINE( 205)			Float point1 = this->ay;
HXDLIN( 205)			point1 = (point1 - y0);
HXDLIN( 205)			point1 = (point1 * scaleA);
HXDLIN( 205)			point1 = (point1 + y0);
HXDLIN( 205)			ay_ = point1;
            		}
            		else {
HXLINE( 205)			ay_ = this->ay;
            		}
HXLINE( 206)		Float bx_;
HXDLIN( 206)		if (isScaledB) {
HXLINE( 206)			Float point2 = this->bx;
HXDLIN( 206)			point2 = (point2 - x0);
HXDLIN( 206)			point2 = (point2 * scaleB);
HXDLIN( 206)			point2 = (point2 + x0);
HXDLIN( 206)			bx_ = point2;
            		}
            		else {
HXLINE( 206)			bx_ = this->bx;
            		}
HXLINE( 207)		Float by_;
HXDLIN( 207)		if (isScaledB) {
HXLINE( 207)			Float point3 = this->by;
HXDLIN( 207)			point3 = (point3 - y0);
HXDLIN( 207)			point3 = (point3 * scaleB);
HXDLIN( 207)			point3 = (point3 + y0);
HXDLIN( 207)			by_ = point3;
            		}
            		else {
HXLINE( 207)			by_ = this->by;
            		}
HXLINE( 208)		Float cx_;
HXDLIN( 208)		if (isScaledC) {
HXLINE( 208)			Float point4 = this->cx;
HXDLIN( 208)			point4 = (point4 - x0);
HXDLIN( 208)			point4 = (point4 * scaleC);
HXDLIN( 208)			point4 = (point4 + x0);
HXDLIN( 208)			cx_ = point4;
            		}
            		else {
HXLINE( 208)			cx_ = this->cx;
            		}
HXLINE( 209)		Float cy_;
HXDLIN( 209)		if (isScaledC) {
HXLINE( 209)			Float point5 = this->cy;
HXDLIN( 209)			point5 = (point5 - y0);
HXDLIN( 209)			point5 = (point5 * scaleC);
HXDLIN( 209)			point5 = (point5 + y0);
HXDLIN( 209)			cy_ = point5;
            		}
            		else {
HXLINE( 209)			cy_ = this->cy;
            		}
HXLINE( 212)		return  ::pi_xy::algo::Barycentric_obj::__alloc( HX_CTX ,ax_,ay_,bx_,by_,cx_,cy_,true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Barycentric_obj,scaled,return )

Float Barycentric_obj::scalePoint(Float point,Float scale,Float centre){
            	HX_STACKFRAME(&_hx_pos_4fd92956fe43e059_216_scalePoint)
HXLINE( 217)		point = (point - centre);
HXLINE( 218)		point = (point * scale);
HXLINE( 219)		point = (point + centre);
HXLINE( 220)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Barycentric_obj,scalePoint,return )


::hx::ObjectPtr< Barycentric_obj > Barycentric_obj::__new(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated) {
	::hx::ObjectPtr< Barycentric_obj > __this = new Barycentric_obj();
	__this->__construct(ax,ay,bx,by,cx,cy,__o_preCalculated);
	return __this;
}

::hx::ObjectPtr< Barycentric_obj > Barycentric_obj::__alloc(::hx::Ctx *_hx_ctx,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated) {
	Barycentric_obj *__this = (Barycentric_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Barycentric_obj), true, "pi_xy.algo.Barycentric"));
	*(void **)__this = Barycentric_obj::_hx_vtable;
	__this->__construct(ax,ay,bx,by,cx,cy,__o_preCalculated);
	return __this;
}

Barycentric_obj::Barycentric_obj()
{
}

void Barycentric_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Barycentric);
	HX_MARK_MEMBER_NAME(ax,"ax");
	HX_MARK_MEMBER_NAME(ay,"ay");
	HX_MARK_MEMBER_NAME(bx,"bx");
	HX_MARK_MEMBER_NAME(by,"by");
	HX_MARK_MEMBER_NAME(cx,"cx");
	HX_MARK_MEMBER_NAME(cy,"cy");
	HX_MARK_MEMBER_NAME(preCalculated,"preCalculated");
	HX_MARK_MEMBER_NAME(xIter3,"xIter3");
	HX_MARK_MEMBER_NAME(yIter3,"yIter3");
	HX_MARK_MEMBER_NAME(bcx,"bcx");
	HX_MARK_MEMBER_NAME(bcy,"bcy");
	HX_MARK_MEMBER_NAME(acx,"acx");
	HX_MARK_MEMBER_NAME(acy,"acy");
	HX_MARK_MEMBER_NAME(dot11,"dot11");
	HX_MARK_MEMBER_NAME(dot12,"dot12");
	HX_MARK_MEMBER_NAME(dot22,"dot22");
	HX_MARK_MEMBER_NAME(denom1,"denom1");
	HX_MARK_END_CLASS();
}

void Barycentric_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ax,"ax");
	HX_VISIT_MEMBER_NAME(ay,"ay");
	HX_VISIT_MEMBER_NAME(bx,"bx");
	HX_VISIT_MEMBER_NAME(by,"by");
	HX_VISIT_MEMBER_NAME(cx,"cx");
	HX_VISIT_MEMBER_NAME(cy,"cy");
	HX_VISIT_MEMBER_NAME(preCalculated,"preCalculated");
	HX_VISIT_MEMBER_NAME(xIter3,"xIter3");
	HX_VISIT_MEMBER_NAME(yIter3,"yIter3");
	HX_VISIT_MEMBER_NAME(bcx,"bcx");
	HX_VISIT_MEMBER_NAME(bcy,"bcy");
	HX_VISIT_MEMBER_NAME(acx,"acx");
	HX_VISIT_MEMBER_NAME(acy,"acy");
	HX_VISIT_MEMBER_NAME(dot11,"dot11");
	HX_VISIT_MEMBER_NAME(dot12,"dot12");
	HX_VISIT_MEMBER_NAME(dot22,"dot22");
	HX_VISIT_MEMBER_NAME(denom1,"denom1");
}

::hx::Val Barycentric_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { return ::hx::Val( ax ); }
		if (HX_FIELD_EQ(inName,"ay") ) { return ::hx::Val( ay ); }
		if (HX_FIELD_EQ(inName,"bx") ) { return ::hx::Val( bx ); }
		if (HX_FIELD_EQ(inName,"by") ) { return ::hx::Val( by ); }
		if (HX_FIELD_EQ(inName,"cx") ) { return ::hx::Val( cx ); }
		if (HX_FIELD_EQ(inName,"cy") ) { return ::hx::Val( cy ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bcx") ) { return ::hx::Val( bcx ); }
		if (HX_FIELD_EQ(inName,"bcy") ) { return ::hx::Val( bcy ); }
		if (HX_FIELD_EQ(inName,"acx") ) { return ::hx::Val( acx ); }
		if (HX_FIELD_EQ(inName,"acy") ) { return ::hx::Val( acy ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dot11") ) { return ::hx::Val( dot11 ); }
		if (HX_FIELD_EQ(inName,"dot12") ) { return ::hx::Val( dot12 ); }
		if (HX_FIELD_EQ(inName,"dot22") ) { return ::hx::Val( dot22 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xIter3") ) { return ::hx::Val( xIter3 ); }
		if (HX_FIELD_EQ(inName,"yIter3") ) { return ::hx::Val( yIter3 ); }
		if (HX_FIELD_EQ(inName,"denom1") ) { return ::hx::Val( denom1 ); }
		if (HX_FIELD_EQ(inName,"scaled") ) { return ::hx::Val( scaled_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getRatios") ) { return ::hx::Val( getRatios_dyn() ); }
		if (HX_FIELD_EQ(inName,"centroidX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_centroidX() ); }
		if (HX_FIELD_EQ(inName,"centroidY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_centroidY() ); }
		if (HX_FIELD_EQ(inName,"medianABx") ) { return ::hx::Val( medianABx_dyn() ); }
		if (HX_FIELD_EQ(inName,"medianBCx") ) { return ::hx::Val( medianBCx_dyn() ); }
		if (HX_FIELD_EQ(inName,"medianCAx") ) { return ::hx::Val( medianCAx_dyn() ); }
		if (HX_FIELD_EQ(inName,"medianABy") ) { return ::hx::Val( medianABy_dyn() ); }
		if (HX_FIELD_EQ(inName,"medianBCy") ) { return ::hx::Val( medianBCy_dyn() ); }
		if (HX_FIELD_EQ(inName,"medianCAy") ) { return ::hx::Val( medianCAy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scalePoint") ) { return ::hx::Val( scalePoint_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"preCalculated") ) { return ::hx::Val( preCalculated ); }
		if (HX_FIELD_EQ(inName,"get_centroidX") ) { return ::hx::Val( get_centroidX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_centroidY") ) { return ::hx::Val( get_centroidY_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getInsideRatios") ) { return ::hx::Val( getInsideRatios_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"preCalculateValues") ) { return ::hx::Val( preCalculateValues_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Barycentric_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { ax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ay") ) { ay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bx") ) { bx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"by") ) { by=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx") ) { cx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy") ) { cy=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bcx") ) { bcx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bcy") ) { bcy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acx") ) { acx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acy") ) { acy=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dot11") ) { dot11=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dot12") ) { dot12=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dot22") ) { dot22=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xIter3") ) { xIter3=inValue.Cast<  ::pi_xy::iter::IntIterStart >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yIter3") ) { yIter3=inValue.Cast<  ::pi_xy::iter::IntIterStart >(); return inValue; }
		if (HX_FIELD_EQ(inName,"denom1") ) { denom1=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"preCalculated") ) { preCalculated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Barycentric_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ax",f7,54,00,00));
	outFields->push(HX_("ay",f8,54,00,00));
	outFields->push(HX_("bx",d6,55,00,00));
	outFields->push(HX_("by",d7,55,00,00));
	outFields->push(HX_("cx",b5,56,00,00));
	outFields->push(HX_("cy",b6,56,00,00));
	outFields->push(HX_("preCalculated",41,32,bf,51));
	outFields->push(HX_("xIter3",83,6c,0d,50));
	outFields->push(HX_("yIter3",e2,c8,68,b6));
	outFields->push(HX_("bcx",97,b3,4a,00));
	outFields->push(HX_("bcy",98,b3,4a,00));
	outFields->push(HX_("acx",56,f1,49,00));
	outFields->push(HX_("acy",57,f1,49,00));
	outFields->push(HX_("dot11",a9,e1,c8,dd));
	outFields->push(HX_("dot12",aa,e1,c8,dd));
	outFields->push(HX_("dot22",89,e2,c8,dd));
	outFields->push(HX_("denom1",a6,bd,32,6c));
	outFields->push(HX_("centroidX",18,58,3e,51));
	outFields->push(HX_("centroidY",19,58,3e,51));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Barycentric_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,ax),HX_("ax",f7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,ay),HX_("ay",f8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,bx),HX_("bx",d6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,by),HX_("by",d7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,cx),HX_("cx",b5,56,00,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,cy),HX_("cy",b6,56,00,00)},
	{::hx::fsBool,(int)offsetof(Barycentric_obj,preCalculated),HX_("preCalculated",41,32,bf,51)},
	{::hx::fsObject /*  ::pi_xy::iter::IntIterStart */ ,(int)offsetof(Barycentric_obj,xIter3),HX_("xIter3",83,6c,0d,50)},
	{::hx::fsObject /*  ::pi_xy::iter::IntIterStart */ ,(int)offsetof(Barycentric_obj,yIter3),HX_("yIter3",e2,c8,68,b6)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,bcx),HX_("bcx",97,b3,4a,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,bcy),HX_("bcy",98,b3,4a,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,acx),HX_("acx",56,f1,49,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,acy),HX_("acy",57,f1,49,00)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,dot11),HX_("dot11",a9,e1,c8,dd)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,dot12),HX_("dot12",aa,e1,c8,dd)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,dot22),HX_("dot22",89,e2,c8,dd)},
	{::hx::fsFloat,(int)offsetof(Barycentric_obj,denom1),HX_("denom1",a6,bd,32,6c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Barycentric_obj_sStaticStorageInfo = 0;
#endif

static ::String Barycentric_obj_sMemberFields[] = {
	HX_("ax",f7,54,00,00),
	HX_("ay",f8,54,00,00),
	HX_("bx",d6,55,00,00),
	HX_("by",d7,55,00,00),
	HX_("cx",b5,56,00,00),
	HX_("cy",b6,56,00,00),
	HX_("preCalculated",41,32,bf,51),
	HX_("xIter3",83,6c,0d,50),
	HX_("yIter3",e2,c8,68,b6),
	HX_("bcx",97,b3,4a,00),
	HX_("bcy",98,b3,4a,00),
	HX_("acx",56,f1,49,00),
	HX_("acy",57,f1,49,00),
	HX_("dot11",a9,e1,c8,dd),
	HX_("dot12",aa,e1,c8,dd),
	HX_("dot22",89,e2,c8,dd),
	HX_("denom1",a6,bd,32,6c),
	HX_("preCalculateValues",05,65,b9,57),
	HX_("getInsideRatios",da,63,43,10),
	HX_("getRatios",3e,be,e0,37),
	HX_("get_centroidX",ef,2b,a2,12),
	HX_("get_centroidY",f0,2b,a2,12),
	HX_("medianABx",ad,4b,51,be),
	HX_("medianBCx",cd,0e,52,be),
	HX_("medianCAx",50,cf,52,be),
	HX_("medianABy",ae,4b,51,be),
	HX_("medianBCy",ce,0e,52,be),
	HX_("medianCAy",51,cf,52,be),
	HX_("scaled",9a,ea,25,3c),
	HX_("scalePoint",66,61,c3,e7),
	::String(null()) };

::hx::Class Barycentric_obj::__mClass;

void Barycentric_obj::__register()
{
	Barycentric_obj _hx_dummy;
	Barycentric_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.Barycentric",2a,00,eb,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Barycentric_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Barycentric_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Barycentric_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Barycentric_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
