// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_FillForm
#include <pi_xy/triangleGML/triGML/FillForm.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_picture_NineSlicePicture_
#include <pi_xy/triangleGML/triGML/shape/picture/NineSlicePicture_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_31b495d0e5b04451_77_new,"pi_xy.triangleGML.triGML.shape.picture.NineSlicePicture_","new",0x2039641a,"pi_xy.triangleGML.triGML.shape.picture.NineSlicePicture_.new","pi_xy/triangleGML/triGML/shape/picture/NineSlicePicture_.hx",77,0x9a06b317)
HX_LOCAL_STACK_FRAME(_hx_pos_31b495d0e5b04451_104_setParameter,"pi_xy.triangleGML.triGML.shape.picture.NineSlicePicture_","setParameter",0x216b1aad,"pi_xy.triangleGML.triGML.shape.picture.NineSlicePicture_.setParameter","pi_xy/triangleGML/triGML/shape/picture/NineSlicePicture_.hx",104,0x9a06b317)
namespace pi_xy{
namespace triangleGML{
namespace triGML{
namespace shape{
namespace picture{

void NineSlicePicture__obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_initWid,::hx::Null< Float >  __o_initHi,::hx::Null< Float >  __o_initLeft,::hx::Null< Float >  __o_initTop,::hx::Null< Float >  __o_initFat,::hx::Null< Float >  __o_initTall,::hx::Null< Float >  __o_newWid,::hx::Null< Float >  __o_newHi,::hx::Null< Float >  __o_newLeft,::hx::Null< Float >  __o_newTop,::hx::Null< Float >  __o_newFat,::hx::Null< Float >  __o_newTall, ::Dynamic imageTexture,::hx::Null< Float >  __o_pictureX,::hx::Null< Float >  __o_pictureY,::hx::Null< Float >  __o_pictureWidth,::hx::Null< Float >  __o_pictureHeight,::hx::Null< bool >  __o_rounded){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int fill = __o_fill.Default(0);
            		Float left = __o_left.Default(((Float)0.));
            		Float top = __o_top.Default(((Float)0.));
            		Float initWid = __o_initWid.Default(((Float)4.));
            		Float initHi = __o_initHi.Default(((Float)4.));
            		Float initLeft = __o_initLeft.Default(((Float)1.));
            		Float initTop = __o_initTop.Default(((Float)1.));
            		Float initFat = __o_initFat.Default(((Float)2.));
            		Float initTall = __o_initTall.Default(((Float)2.));
            		Float newWid = __o_newWid.Default(((Float)4.));
            		Float newHi = __o_newHi.Default(((Float)4.));
            		Float newLeft = __o_newLeft.Default(((Float)0.5));
            		Float newTop = __o_newTop.Default(((Float)0.5));
            		Float newFat = __o_newFat.Default(((Float)3.));
            		Float newTall = __o_newTall.Default(((Float)3.));
            		Float pictureX = __o_pictureX.Default(((Float)0.));
            		Float pictureY = __o_pictureY.Default(((Float)0.));
            		Float pictureWidth = __o_pictureWidth.Default(((Float)0.));
            		Float pictureHeight = __o_pictureHeight.Default(((Float)0.));
            		bool rounded = __o_rounded.Default(false);
            	HX_STACKFRAME(&_hx_pos_31b495d0e5b04451_77_new)
HXLINE(  78)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill);
HXLINE(  79)		this->left = left;
HXLINE(  80)		this->top = top;
HXLINE(  82)		this->initWid = initWid;
HXLINE(  83)		this->initHi = initHi;
HXLINE(  84)		this->initLeft = initLeft;
HXLINE(  85)		this->initTop = initTop;
HXLINE(  86)		this->initFat = initFat;
HXLINE(  87)		this->initTall = initTall;
HXLINE(  89)		this->newWid = newWid;
HXLINE(  90)		this->newHi = newHi;
HXLINE(  91)		this->newLeft = newLeft;
HXLINE(  92)		this->newTop = newTop;
HXLINE(  93)		this->newFat = newFat;
HXLINE(  94)		this->newTall = newTall;
HXLINE(  96)		this->imageTexture = imageTexture;
HXLINE(  97)		this->pictureX = pictureX;
HXLINE(  98)		this->pictureY = pictureY;
HXLINE(  99)		this->pictureWidth = pictureWidth;
HXLINE( 100)		this->pictureHeight = pictureHeight;
HXLINE( 101)		this->rounded = rounded;
            	}

bool NineSlicePicture__obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4f186619) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x4f186619;
		}
	} else {
		return inClassId==(int)0x79ec058e || inClassId==(int)0x7ff8cec5;
	}
}

void NineSlicePicture__obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_31b495d0e5b04451_104_setParameter)
HXDLIN( 104)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("initFat",a9,81,84,cb)) ){
HXLINE( 118)			this->initFat = ::Std_obj::parseFloat(value);
HXDLIN( 118)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("initHi",31,5e,4c,97)) ){
HXLINE( 112)			this->initHi = ::Std_obj::parseFloat(value);
HXDLIN( 112)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("initLeft",37,37,67,4c)) ){
HXLINE( 114)			this->initLeft = ::Std_obj::parseFloat(value);
HXDLIN( 114)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("initTall",5d,e8,ad,51)) ){
HXLINE( 120)			this->initTall = ::Std_obj::parseFloat(value);
HXDLIN( 120)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("initTop",65,2d,8f,cb)) ){
HXLINE( 116)			this->initTop = ::Std_obj::parseFloat(value);
HXDLIN( 116)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("initWid",e2,6e,91,cb)) ){
HXLINE( 110)			this->initWid = ::Std_obj::parseFloat(value);
HXDLIN( 110)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 106)			this->left = ::Std_obj::parseFloat(value);
HXDLIN( 106)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("newFat",59,1e,98,71)) ){
HXLINE( 131)			this->newFat = ::Std_obj::parseFloat(value);
HXDLIN( 131)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("newHi",81,e7,30,99)) ){
HXLINE( 125)			this->newHi = ::Std_obj::parseFloat(value);
HXDLIN( 125)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("newLeft",87,b4,7c,f7)) ){
HXLINE( 127)			this->newLeft = ::Std_obj::parseFloat(value);
HXDLIN( 127)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("newTall",ad,65,c3,fc)) ){
HXLINE( 133)			this->newTall = ::Std_obj::parseFloat(value);
HXDLIN( 133)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("newTop",15,ca,a2,71)) ){
HXLINE( 129)			this->newTop = ::Std_obj::parseFloat(value);
HXDLIN( 129)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("newWid",92,0b,a5,71)) ){
HXLINE( 123)			this->newWid = ::Std_obj::parseFloat(value);
HXDLIN( 123)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("pictureHeight",45,cf,20,f3)) ){
HXLINE( 141)			this->pictureHeight = ::Std_obj::parseFloat(value);
HXDLIN( 141)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("pictureWidth",68,84,62,f9)) ){
HXLINE( 139)			this->pictureWidth = ::Std_obj::parseFloat(value);
HXDLIN( 139)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("pictureX",da,75,dc,c1)) ){
HXLINE( 135)			this->pictureX = ::Std_obj::parseFloat(value);
HXDLIN( 135)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("pictureY",db,75,dc,c1)) ){
HXLINE( 137)			this->pictureY = ::Std_obj::parseFloat(value);
HXDLIN( 137)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("rounded",2d,80,0f,8d)) ){
HXLINE( 143)			bool _hx_tmp;
HXDLIN( 143)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE( 143)				_hx_tmp = true;
            			}
            			else {
HXLINE( 143)				_hx_tmp = false;
            			}
HXDLIN( 143)			this->rounded = _hx_tmp;
HXDLIN( 143)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE( 108)			this->top = ::Std_obj::parseFloat(value);
HXDLIN( 108)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE( 145)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}



NineSlicePicture__obj::NineSlicePicture__obj()
{
}

void NineSlicePicture__obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NineSlicePicture_);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(initWid,"initWid");
	HX_MARK_MEMBER_NAME(initHi,"initHi");
	HX_MARK_MEMBER_NAME(initLeft,"initLeft");
	HX_MARK_MEMBER_NAME(initTop,"initTop");
	HX_MARK_MEMBER_NAME(initFat,"initFat");
	HX_MARK_MEMBER_NAME(initTall,"initTall");
	HX_MARK_MEMBER_NAME(newWid,"newWid");
	HX_MARK_MEMBER_NAME(newHi,"newHi");
	HX_MARK_MEMBER_NAME(newLeft,"newLeft");
	HX_MARK_MEMBER_NAME(newTop,"newTop");
	HX_MARK_MEMBER_NAME(newFat,"newFat");
	HX_MARK_MEMBER_NAME(newTall,"newTall");
	HX_MARK_MEMBER_NAME(imageTexture,"imageTexture");
	HX_MARK_MEMBER_NAME(pictureX,"pictureX");
	HX_MARK_MEMBER_NAME(pictureY,"pictureY");
	HX_MARK_MEMBER_NAME(pictureWidth,"pictureWidth");
	HX_MARK_MEMBER_NAME(pictureHeight,"pictureHeight");
	HX_MARK_MEMBER_NAME(rounded,"rounded");
	 ::pi_xy::triangleGML::triGML::BasicShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NineSlicePicture__obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(initWid,"initWid");
	HX_VISIT_MEMBER_NAME(initHi,"initHi");
	HX_VISIT_MEMBER_NAME(initLeft,"initLeft");
	HX_VISIT_MEMBER_NAME(initTop,"initTop");
	HX_VISIT_MEMBER_NAME(initFat,"initFat");
	HX_VISIT_MEMBER_NAME(initTall,"initTall");
	HX_VISIT_MEMBER_NAME(newWid,"newWid");
	HX_VISIT_MEMBER_NAME(newHi,"newHi");
	HX_VISIT_MEMBER_NAME(newLeft,"newLeft");
	HX_VISIT_MEMBER_NAME(newTop,"newTop");
	HX_VISIT_MEMBER_NAME(newFat,"newFat");
	HX_VISIT_MEMBER_NAME(newTall,"newTall");
	HX_VISIT_MEMBER_NAME(imageTexture,"imageTexture");
	HX_VISIT_MEMBER_NAME(pictureX,"pictureX");
	HX_VISIT_MEMBER_NAME(pictureY,"pictureY");
	HX_VISIT_MEMBER_NAME(pictureWidth,"pictureWidth");
	HX_VISIT_MEMBER_NAME(pictureHeight,"pictureHeight");
	HX_VISIT_MEMBER_NAME(rounded,"rounded");
	 ::pi_xy::triangleGML::triGML::BasicShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NineSlicePicture__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"newHi") ) { return ::hx::Val( newHi ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"initHi") ) { return ::hx::Val( initHi ); }
		if (HX_FIELD_EQ(inName,"newWid") ) { return ::hx::Val( newWid ); }
		if (HX_FIELD_EQ(inName,"newTop") ) { return ::hx::Val( newTop ); }
		if (HX_FIELD_EQ(inName,"newFat") ) { return ::hx::Val( newFat ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"initWid") ) { return ::hx::Val( initWid ); }
		if (HX_FIELD_EQ(inName,"initTop") ) { return ::hx::Val( initTop ); }
		if (HX_FIELD_EQ(inName,"initFat") ) { return ::hx::Val( initFat ); }
		if (HX_FIELD_EQ(inName,"newLeft") ) { return ::hx::Val( newLeft ); }
		if (HX_FIELD_EQ(inName,"newTall") ) { return ::hx::Val( newTall ); }
		if (HX_FIELD_EQ(inName,"rounded") ) { return ::hx::Val( rounded ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initLeft") ) { return ::hx::Val( initLeft ); }
		if (HX_FIELD_EQ(inName,"initTall") ) { return ::hx::Val( initTall ); }
		if (HX_FIELD_EQ(inName,"pictureX") ) { return ::hx::Val( pictureX ); }
		if (HX_FIELD_EQ(inName,"pictureY") ) { return ::hx::Val( pictureY ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imageTexture") ) { return ::hx::Val( imageTexture ); }
		if (HX_FIELD_EQ(inName,"pictureWidth") ) { return ::hx::Val( pictureWidth ); }
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pictureHeight") ) { return ::hx::Val( pictureHeight ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NineSlicePicture__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"newHi") ) { newHi=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"initHi") ) { initHi=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newWid") ) { newWid=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newTop") ) { newTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newFat") ) { newFat=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"initWid") ) { initWid=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initTop") ) { initTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initFat") ) { initFat=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newLeft") ) { newLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newTall") ) { newTall=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rounded") ) { rounded=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initLeft") ) { initLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initTall") ) { initTall=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pictureX") ) { pictureX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pictureY") ) { pictureY=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imageTexture") ) { imageTexture=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pictureWidth") ) { pictureWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pictureHeight") ) { pictureHeight=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NineSlicePicture__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("initWid",e2,6e,91,cb));
	outFields->push(HX_("initHi",31,5e,4c,97));
	outFields->push(HX_("initLeft",37,37,67,4c));
	outFields->push(HX_("initTop",65,2d,8f,cb));
	outFields->push(HX_("initFat",a9,81,84,cb));
	outFields->push(HX_("initTall",5d,e8,ad,51));
	outFields->push(HX_("newWid",92,0b,a5,71));
	outFields->push(HX_("newHi",81,e7,30,99));
	outFields->push(HX_("newLeft",87,b4,7c,f7));
	outFields->push(HX_("newTop",15,ca,a2,71));
	outFields->push(HX_("newFat",59,1e,98,71));
	outFields->push(HX_("newTall",ad,65,c3,fc));
	outFields->push(HX_("imageTexture",c0,42,a9,8e));
	outFields->push(HX_("pictureX",da,75,dc,c1));
	outFields->push(HX_("pictureY",db,75,dc,c1));
	outFields->push(HX_("pictureWidth",68,84,62,f9));
	outFields->push(HX_("pictureHeight",45,cf,20,f3));
	outFields->push(HX_("rounded",2d,80,0f,8d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NineSlicePicture__obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,top),HX_("top",95,66,58,00)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,initWid),HX_("initWid",e2,6e,91,cb)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,initHi),HX_("initHi",31,5e,4c,97)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,initLeft),HX_("initLeft",37,37,67,4c)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,initTop),HX_("initTop",65,2d,8f,cb)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,initFat),HX_("initFat",a9,81,84,cb)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,initTall),HX_("initTall",5d,e8,ad,51)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,newWid),HX_("newWid",92,0b,a5,71)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,newHi),HX_("newHi",81,e7,30,99)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,newLeft),HX_("newLeft",87,b4,7c,f7)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,newTop),HX_("newTop",15,ca,a2,71)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,newFat),HX_("newFat",59,1e,98,71)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,newTall),HX_("newTall",ad,65,c3,fc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(NineSlicePicture__obj,imageTexture),HX_("imageTexture",c0,42,a9,8e)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,pictureX),HX_("pictureX",da,75,dc,c1)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,pictureY),HX_("pictureY",db,75,dc,c1)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,pictureWidth),HX_("pictureWidth",68,84,62,f9)},
	{::hx::fsFloat,(int)offsetof(NineSlicePicture__obj,pictureHeight),HX_("pictureHeight",45,cf,20,f3)},
	{::hx::fsBool,(int)offsetof(NineSlicePicture__obj,rounded),HX_("rounded",2d,80,0f,8d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NineSlicePicture__obj_sStaticStorageInfo = 0;
#endif

static ::String NineSlicePicture__obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("initWid",e2,6e,91,cb),
	HX_("initHi",31,5e,4c,97),
	HX_("initLeft",37,37,67,4c),
	HX_("initTop",65,2d,8f,cb),
	HX_("initFat",a9,81,84,cb),
	HX_("initTall",5d,e8,ad,51),
	HX_("newWid",92,0b,a5,71),
	HX_("newHi",81,e7,30,99),
	HX_("newLeft",87,b4,7c,f7),
	HX_("newTop",15,ca,a2,71),
	HX_("newFat",59,1e,98,71),
	HX_("newTall",ad,65,c3,fc),
	HX_("imageTexture",c0,42,a9,8e),
	HX_("pictureX",da,75,dc,c1),
	HX_("pictureY",db,75,dc,c1),
	HX_("pictureWidth",68,84,62,f9),
	HX_("pictureHeight",45,cf,20,f3),
	HX_("rounded",2d,80,0f,8d),
	HX_("setParameter",a7,f5,ff,6c),
	::String(null()) };

::hx::Class NineSlicePicture__obj::__mClass;

void NineSlicePicture__obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.triGML.shape.picture.NineSlicePicture_",28,0f,43,99);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NineSlicePicture__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NineSlicePicture__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NineSlicePicture__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NineSlicePicture__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML
} // end namespace shape
} // end namespace picture
