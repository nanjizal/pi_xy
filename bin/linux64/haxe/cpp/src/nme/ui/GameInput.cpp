// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_GameInputEvent
#include <nme/events/GameInputEvent.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_ui_GameInput
#include <nme/ui/GameInput.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputControl
#include <nme/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputDevice
#include <nme/ui/GameInputDevice.h>
#endif
#ifndef INCLUDED_nme_ui_KeyboardInputDevice
#include <nme/ui/KeyboardInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_22_new,"nme.ui.GameInput","new",0xa94a0218,"nme.ui.GameInput.new","nme/ui/GameInput.hx",22,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_38_addKeyboardDevice0,"nme.ui.GameInput","addKeyboardDevice0",0x6c26a51a,"nme.ui.GameInput.addKeyboardDevice0","nme/ui/GameInput.hx",38,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_67_addEventListener,"nme.ui.GameInput","addEventListener",0x80372715,"nme.ui.GameInput.addEventListener","nme/ui/GameInput.hx",67,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_62_hasInstances,"nme.ui.GameInput","hasInstances",0xd72e3fcc,"nme.ui.GameInput.hasInstances","nme/ui/GameInput.hx",62,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_85_getBest,"nme.ui.GameInput","getBest",0x03b40e92,"nme.ui.GameInput.getBest","nme/ui/GameInput.hx",85,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_96_getDeviceAt,"nme.ui.GameInput","getDeviceAt",0x2c1f5397,"nme.ui.GameInput.getDeviceAt","nme/ui/GameInput.hx",96,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_110_getGamepadGuid,"nme.ui.GameInput","getGamepadGuid",0xf0bb1b1c,"nme.ui.GameInput.getGamepadGuid","nme/ui/GameInput.hx",110,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_117_getGamepadName,"nme.ui.GameInput","getGamepadName",0xf54c6fde,"nme.ui.GameInput.getGamepadName","nme/ui/GameInput.hx",117,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_121___getDevice,"nme.ui.GameInput","__getDevice",0x7d8d5864,"nme.ui.GameInput.__getDevice","nme/ui/GameInput.hx",121,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_140_nmeGamepadConnect,"nme.ui.GameInput","nmeGamepadConnect",0xd04766e7,"nme.ui.GameInput.nmeGamepadConnect","nme/ui/GameInput.hx",140,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_152_nmeGamepadDisconnect,"nme.ui.GameInput","nmeGamepadDisconnect",0xcf0e757f,"nme.ui.GameInput.nmeGamepadDisconnect","nme/ui/GameInput.hx",152,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_175_nmeGamepadAxisMove,"nme.ui.GameInput","nmeGamepadAxisMove",0x437302b5,"nme.ui.GameInput.nmeGamepadAxisMove","nme/ui/GameInput.hx",175,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_195_nmeGamepadButton,"nme.ui.GameInput","nmeGamepadButton",0xa39c6595,"nme.ui.GameInput.nmeGamepadButton","nme/ui/GameInput.hx",195,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_13_boot,"nme.ui.GameInput","boot",0x6f90d37a,"nme.ui.GameInput.boot","nme/ui/GameInput.hx",13,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_14_boot,"nme.ui.GameInput","boot",0x6f90d37a,"nme.ui.GameInput.boot","nme/ui/GameInput.hx",14,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_16_boot,"nme.ui.GameInput","boot",0x6f90d37a,"nme.ui.GameInput.boot","nme/ui/GameInput.hx",16,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_17_boot,"nme.ui.GameInput","boot",0x6f90d37a,"nme.ui.GameInput.boot","nme/ui/GameInput.hx",17,0xc43a6ef8)
HX_LOCAL_STACK_FRAME(_hx_pos_79d9af6038aa2c5d_18_boot,"nme.ui.GameInput","boot",0x6f90d37a,"nme.ui.GameInput.boot","nme/ui/GameInput.hx",18,0xc43a6ef8)
namespace nme{
namespace ui{

void GameInput_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_22_new)
HXLINE(  23)		super::__construct(null());
HXLINE(  24)		::nme::ui::GameInput_obj::nmeInstances->push(::hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic GameInput_obj::__CreateEmpty() { return new GameInput_obj; }

void *GameInput_obj::_hx_vtable = 0;

Dynamic GameInput_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameInput_obj > _hx_result = new GameInput_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameInput_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a8ca3e2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0a8ca3e2;
	} else {
		return inClassId==(int)0x169017a6;
	}
}

 ::nme::ui::GameInputDevice GameInput_obj::addKeyboardDevice0(){
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_38_addKeyboardDevice0)
HXLINE(  39)		if (::hx::IsNotNull( ::nme::ui::GameInput_obj::nmeKeyboardDevices->__get(0).StaticCast<  ::nme::ui::KeyboardInputDevice >() )) {
HXLINE(  40)			return ::nme::ui::GameInput_obj::nmeKeyboardDevices->__get(0).StaticCast<  ::nme::ui::KeyboardInputDevice >();
            		}
HXLINE(  42)		 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  42)		_g->set(0,32);
HXDLIN(  42)		_g->set(1,13);
HXDLIN(  42)		_g->set(2,188);
HXDLIN(  42)		_g->set(3,190);
HXDLIN(  42)		_g->set(11,38);
HXDLIN(  42)		_g->set(12,40);
HXDLIN(  42)		_g->set(13,37);
HXDLIN(  42)		_g->set(14,39);
HXDLIN(  42)		_g->set(6,27);
HXDLIN(  42)		_g->set(7,9);
HXDLIN(  42)		 ::nme::ui::KeyboardInputDevice device =  ::nme::ui::KeyboardInputDevice_obj::__alloc( HX_CTX ,HX_("Keyboard0",89,35,2e,5e),HX_("Keyboard0",89,35,2e,5e),_g);
HXLINE(  54)		::nme::ui::GameInput_obj::nmeKeyboardDevices[0] = device;
HXLINE(  55)		this->dispatchEvent( ::nme::events::GameInputEvent_obj::__alloc( HX_CTX ,HX_("deviceAdded",4a,08,84,0b),null(),null(),device));
HXLINE(  56)		return device;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameInput_obj,addKeyboardDevice0,return )

void GameInput_obj::addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  __o_useCapture,::hx::Null< int >  __o_priority,::hx::Null< bool >  __o_useWeakReference){
            		bool useCapture = __o_useCapture.Default(false);
            		int priority = __o_priority.Default(0);
            		bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_67_addEventListener)
HXLINE(  68)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
HXLINE(  69)		if ((type == HX_("deviceAdded",4a,08,84,0b))) {
HXLINE(  71)			{
HXLINE(  71)				int _g = 0;
HXDLIN(  71)				::Array< ::Dynamic> _g1 = ::nme::ui::GameInput_obj::nmeDevices;
HXDLIN(  71)				while((_g < _g1->length)){
HXLINE(  71)					 ::nme::ui::GameInputDevice device = _g1->__get(_g).StaticCast<  ::nme::ui::GameInputDevice >();
HXDLIN(  71)					_g = (_g + 1);
HXLINE(  73)					if (::hx::IsNotNull( device )) {
HXLINE(  74)						this->dispatchEvent( ::nme::events::GameInputEvent_obj::__alloc( HX_CTX ,HX_("deviceAdded",4a,08,84,0b),null(),null(),device));
            					}
            				}
            			}
HXLINE(  76)			{
HXLINE(  76)				int _g2 = 0;
HXDLIN(  76)				::Array< ::Dynamic> _g3 = ::nme::ui::GameInput_obj::nmeKeyboardDevices;
HXDLIN(  76)				while((_g2 < _g3->length)){
HXLINE(  76)					 ::nme::ui::KeyboardInputDevice device1 = _g3->__get(_g2).StaticCast<  ::nme::ui::KeyboardInputDevice >();
HXDLIN(  76)					_g2 = (_g2 + 1);
HXLINE(  78)					if (::hx::IsNotNull( device1 )) {
HXLINE(  79)						this->dispatchEvent( ::nme::events::GameInputEvent_obj::__alloc( HX_CTX ,HX_("deviceAdded",4a,08,84,0b),null(),null(),device1));
            					}
            				}
            			}
            		}
            	}


bool GameInput_obj::isSupported;

int GameInput_obj::numDevices;

::Array< ::Dynamic> GameInput_obj::nmeDevices;

::Array< ::Dynamic> GameInput_obj::nmeInstances;

::Array< ::Dynamic> GameInput_obj::nmeKeyboardDevices;

bool GameInput_obj::hasInstances(){
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_62_hasInstances)
HXDLIN(  62)		if ((::nme::ui::GameInput_obj::nmeInstances->length <= 0)) {
HXDLIN(  62)			return (::nme::ui::GameInput_obj::nmeKeyboardDevices->length > 0);
            		}
            		else {
HXDLIN(  62)			return true;
            		}
HXDLIN(  62)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameInput_obj,hasInstances,return )

 ::nme::ui::GameInputDevice GameInput_obj::getBest(){
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_85_getBest)
HXLINE(  86)		{
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d = ::nme::ui::GameInput_obj::getDeviceAt(0);
HXLINE(  89)				if (::hx::IsNotNull( d )) {
HXLINE(  90)					return d;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d1 = ::nme::ui::GameInput_obj::getDeviceAt(1);
HXLINE(  89)				if (::hx::IsNotNull( d1 )) {
HXLINE(  90)					return d1;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d2 = ::nme::ui::GameInput_obj::getDeviceAt(2);
HXLINE(  89)				if (::hx::IsNotNull( d2 )) {
HXLINE(  90)					return d2;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d3 = ::nme::ui::GameInput_obj::getDeviceAt(3);
HXLINE(  89)				if (::hx::IsNotNull( d3 )) {
HXLINE(  90)					return d3;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d4 = ::nme::ui::GameInput_obj::getDeviceAt(4);
HXLINE(  89)				if (::hx::IsNotNull( d4 )) {
HXLINE(  90)					return d4;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d5 = ::nme::ui::GameInput_obj::getDeviceAt(5);
HXLINE(  89)				if (::hx::IsNotNull( d5 )) {
HXLINE(  90)					return d5;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d6 = ::nme::ui::GameInput_obj::getDeviceAt(6);
HXLINE(  89)				if (::hx::IsNotNull( d6 )) {
HXLINE(  90)					return d6;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d7 = ::nme::ui::GameInput_obj::getDeviceAt(7);
HXLINE(  89)				if (::hx::IsNotNull( d7 )) {
HXLINE(  90)					return d7;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d8 = ::nme::ui::GameInput_obj::getDeviceAt(8);
HXLINE(  89)				if (::hx::IsNotNull( d8 )) {
HXLINE(  90)					return d8;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d9 = ::nme::ui::GameInput_obj::getDeviceAt(9);
HXLINE(  89)				if (::hx::IsNotNull( d9 )) {
HXLINE(  90)					return d9;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d10 = ::nme::ui::GameInput_obj::getDeviceAt(10);
HXLINE(  89)				if (::hx::IsNotNull( d10 )) {
HXLINE(  90)					return d10;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d11 = ::nme::ui::GameInput_obj::getDeviceAt(11);
HXLINE(  89)				if (::hx::IsNotNull( d11 )) {
HXLINE(  90)					return d11;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d12 = ::nme::ui::GameInput_obj::getDeviceAt(12);
HXLINE(  89)				if (::hx::IsNotNull( d12 )) {
HXLINE(  90)					return d12;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d13 = ::nme::ui::GameInput_obj::getDeviceAt(13);
HXLINE(  89)				if (::hx::IsNotNull( d13 )) {
HXLINE(  90)					return d13;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d14 = ::nme::ui::GameInput_obj::getDeviceAt(14);
HXLINE(  89)				if (::hx::IsNotNull( d14 )) {
HXLINE(  90)					return d14;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d15 = ::nme::ui::GameInput_obj::getDeviceAt(15);
HXLINE(  89)				if (::hx::IsNotNull( d15 )) {
HXLINE(  90)					return d15;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d16 = ::nme::ui::GameInput_obj::getDeviceAt(16);
HXLINE(  89)				if (::hx::IsNotNull( d16 )) {
HXLINE(  90)					return d16;
            				}
            			}
HXLINE(  87)			{
HXLINE(  88)				 ::nme::ui::GameInputDevice d17 = ::nme::ui::GameInput_obj::getDeviceAt(17);
HXLINE(  89)				if (::hx::IsNotNull( d17 )) {
HXLINE(  90)					return d17;
            				}
            			}
            		}
HXLINE(  92)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GameInput_obj,getBest,return )

 ::nme::ui::GameInputDevice GameInput_obj::getDeviceAt(int index){
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_96_getDeviceAt)
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if ((index >= 0)) {
HXLINE(  97)			_hx_tmp = (index < ::nme::ui::GameInput_obj::nmeDevices->length);
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  99)			return ::nme::ui::GameInput_obj::nmeDevices->__get(index).StaticCast<  ::nme::ui::GameInputDevice >();
            		}
HXLINE( 101)		index = (index - 16);
HXLINE( 102)		bool _hx_tmp1;
HXDLIN( 102)		if ((index >= 0)) {
HXLINE( 102)			_hx_tmp1 = (index < ::nme::ui::GameInput_obj::nmeKeyboardDevices->length);
            		}
            		else {
HXLINE( 102)			_hx_tmp1 = false;
            		}
HXDLIN( 102)		if (_hx_tmp1) {
HXLINE( 103)			return ::nme::ui::GameInput_obj::nmeKeyboardDevices->__get(index).StaticCast<  ::nme::ui::KeyboardInputDevice >();
            		}
HXLINE( 104)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameInput_obj,getDeviceAt,return )

::String GameInput_obj::getGamepadGuid(int index){
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_110_getGamepadGuid)
HXDLIN( 110)		return (HX_("guid",89,1d,6e,44) + index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameInput_obj,getGamepadGuid,return )

::String GameInput_obj::getGamepadName(int index){
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_117_getGamepadName)
HXDLIN( 117)		return (HX_("name",4b,72,ff,48) + index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameInput_obj,getGamepadName,return )

 ::nme::ui::GameInputDevice GameInput_obj::_hx___getDevice(int index){
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_121___getDevice)
HXLINE( 122)		bool _hx_tmp;
HXDLIN( 122)		if ((index >= 0)) {
HXLINE( 122)			_hx_tmp = (index > 16);
            		}
            		else {
HXLINE( 122)			_hx_tmp = true;
            		}
HXDLIN( 122)		if (_hx_tmp) {
HXLINE( 122)			return null();
            		}
HXLINE( 123)		if (::hx::IsNull( ::nme::ui::GameInput_obj::nmeDevices->__get(index).StaticCast<  ::nme::ui::GameInputDevice >() )) {
HXLINE( 125)			::Array< ::Dynamic> _hx_tmp1 = ::nme::ui::GameInput_obj::nmeDevices;
HXDLIN( 125)			::String _hx_tmp2 = ::nme::ui::GameInput_obj::getGamepadGuid(index);
HXDLIN( 125)			_hx_tmp1[index] =  ::nme::ui::GameInputDevice_obj::__alloc( HX_CTX ,_hx_tmp2,::nme::ui::GameInput_obj::getGamepadName(index));
HXLINE( 126)			::nme::ui::GameInput_obj::numDevices = 0;
HXLINE( 127)			{
HXLINE( 127)				int _g = 0;
HXDLIN( 127)				::Array< ::Dynamic> _g1 = ::nme::ui::GameInput_obj::nmeDevices;
HXDLIN( 127)				while((_g < _g1->length)){
HXLINE( 127)					 ::nme::ui::GameInputDevice nmeDevice = _g1->__get(_g).StaticCast<  ::nme::ui::GameInputDevice >();
HXDLIN( 127)					_g = (_g + 1);
HXLINE( 129)					if (::hx::IsNotNull( nmeDevice )) {
HXLINE( 130)						::nme::ui::GameInput_obj::numDevices++;
            					}
            				}
            			}
            		}
HXLINE( 134)		return ::nme::ui::GameInput_obj::nmeDevices->__get(index).StaticCast<  ::nme::ui::GameInputDevice >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameInput_obj,_hx___getDevice,return )

void GameInput_obj::nmeGamepadConnect(int index){
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_140_nmeGamepadConnect)
HXLINE( 141)		 ::nme::ui::GameInputDevice device = ::nme::ui::GameInput_obj::_hx___getDevice(index);
HXLINE( 142)		if (::hx::IsNull( device )) {
HXLINE( 142)			return;
            		}
HXLINE( 144)		{
HXLINE( 144)			int _g = 0;
HXDLIN( 144)			::Array< ::Dynamic> _g1 = ::nme::ui::GameInput_obj::nmeInstances;
HXDLIN( 144)			while((_g < _g1->length)){
HXLINE( 144)				 ::nme::ui::GameInput instance = _g1->__get(_g).StaticCast<  ::nme::ui::GameInput >();
HXDLIN( 144)				_g = (_g + 1);
HXLINE( 146)				instance->dispatchEvent( ::nme::events::GameInputEvent_obj::__alloc( HX_CTX ,HX_("deviceAdded",4a,08,84,0b),null(),null(),device));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameInput_obj,nmeGamepadConnect,(void))

void GameInput_obj::nmeGamepadDisconnect(int index){
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_152_nmeGamepadDisconnect)
HXLINE( 153)		 ::nme::ui::GameInputDevice device = ::nme::ui::GameInput_obj::nmeDevices->__get(index).StaticCast<  ::nme::ui::GameInputDevice >();
HXLINE( 154)		if (::hx::IsNotNull( device )) {
HXLINE( 156)			::nme::ui::GameInput_obj::nmeDevices[index] = null();
HXLINE( 157)			::nme::ui::GameInput_obj::numDevices = 0;
HXLINE( 158)			{
HXLINE( 158)				int _g = 0;
HXDLIN( 158)				::Array< ::Dynamic> _g1 = ::nme::ui::GameInput_obj::nmeDevices;
HXDLIN( 158)				while((_g < _g1->length)){
HXLINE( 158)					 ::nme::ui::GameInputDevice nmeDevice = _g1->__get(_g).StaticCast<  ::nme::ui::GameInputDevice >();
HXDLIN( 158)					_g = (_g + 1);
HXLINE( 160)					if (::hx::IsNotNull( nmeDevice )) {
HXLINE( 161)						::nme::ui::GameInput_obj::numDevices++;
            					}
            				}
            			}
HXLINE( 164)			{
HXLINE( 164)				int _g2 = 0;
HXDLIN( 164)				::Array< ::Dynamic> _g3 = ::nme::ui::GameInput_obj::nmeInstances;
HXDLIN( 164)				while((_g2 < _g3->length)){
HXLINE( 164)					 ::nme::ui::GameInput instance = _g3->__get(_g2).StaticCast<  ::nme::ui::GameInput >();
HXDLIN( 164)					_g2 = (_g2 + 1);
HXLINE( 166)					instance->dispatchEvent( ::nme::events::GameInputEvent_obj::__alloc( HX_CTX ,HX_("deviceRemoved",aa,c9,5b,59),null(),null(),device));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GameInput_obj,nmeGamepadDisconnect,(void))

void GameInput_obj::nmeGamepadAxisMove(int index,int axis,Float value){
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_175_nmeGamepadAxisMove)
HXLINE( 176)		 ::nme::ui::GameInputDevice device = ::nme::ui::GameInput_obj::_hx___getDevice(index);
HXLINE( 177)		if (::hx::IsNull( device )) {
HXLINE( 177)			return;
            		}
HXLINE( 178)		if (device->enabled) {
HXLINE( 180)			if (!(device->nmeAxis->exists(axis))) {
HXLINE( 182)				 ::nme::ui::GameInputControl control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,device,(HX_("AXIS_",9e,28,6e,a7) + axis),( (Float)(-1) ),( (Float)(1) ),null());
HXLINE( 183)				device->nmeAxis->set(axis,control);
HXLINE( 184)				device->nmeControls->push(control);
            			}
HXLINE( 187)			 ::nme::ui::GameInputControl control1 = ( ( ::nme::ui::GameInputControl)(device->nmeAxis->get(axis)) );
HXLINE( 188)			control1->value = value;
HXLINE( 189)			control1->dispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GameInput_obj,nmeGamepadAxisMove,(void))

void GameInput_obj::nmeGamepadButton(int index,int button,int down){
            	HX_GC_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_195_nmeGamepadButton)
HXLINE( 196)		 ::nme::ui::GameInputDevice device = ::nme::ui::GameInput_obj::_hx___getDevice(index);
HXLINE( 197)		if (::hx::IsNull( device )) {
HXLINE( 197)			return;
            		}
HXLINE( 199)		if (device->enabled) {
HXLINE( 201)			if (!(device->nmeButton->exists(button))) {
HXLINE( 203)				 ::nme::ui::GameInputControl control =  ::nme::ui::GameInputControl_obj::__alloc( HX_CTX ,device,(HX_("BUTTON_",2d,26,49,4a) + button),( (Float)(0) ),( (Float)(1) ),null());
HXLINE( 204)				device->nmeButton->set(button,control);
HXLINE( 205)				device->nmeControls->push(control);
            			}
HXLINE( 208)			 ::nme::ui::GameInputControl control1 = ( ( ::nme::ui::GameInputControl)(device->nmeButton->get(button)) );
HXLINE( 209)			control1->value = ( (Float)(down) );
HXLINE( 210)			control1->dispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GameInput_obj,nmeGamepadButton,(void))


::hx::ObjectPtr< GameInput_obj > GameInput_obj::__new() {
	::hx::ObjectPtr< GameInput_obj > __this = new GameInput_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< GameInput_obj > GameInput_obj::__alloc(::hx::Ctx *_hx_ctx) {
	GameInput_obj *__this = (GameInput_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameInput_obj), true, "nme.ui.GameInput"));
	*(void **)__this = GameInput_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GameInput_obj::GameInput_obj()
{
}

::hx::Val GameInput_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return ::hx::Val( addEventListener_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addKeyboardDevice0") ) { return ::hx::Val( addKeyboardDevice0_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GameInput_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getBest") ) { outValue = getBest_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numDevices") ) { outValue = ( numDevices ); return true; }
		if (HX_FIELD_EQ(inName,"nmeDevices") ) { outValue = ( nmeDevices ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isSupported") ) { outValue = ( isSupported ); return true; }
		if (HX_FIELD_EQ(inName,"getDeviceAt") ) { outValue = getDeviceAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getDevice") ) { outValue = _hx___getDevice_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeInstances") ) { outValue = ( nmeInstances ); return true; }
		if (HX_FIELD_EQ(inName,"hasInstances") ) { outValue = hasInstances_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getGamepadGuid") ) { outValue = getGamepadGuid_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGamepadName") ) { outValue = getGamepadName_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nmeGamepadButton") ) { outValue = nmeGamepadButton_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeGamepadConnect") ) { outValue = nmeGamepadConnect_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeKeyboardDevices") ) { outValue = ( nmeKeyboardDevices ); return true; }
		if (HX_FIELD_EQ(inName,"nmeGamepadAxisMove") ) { outValue = nmeGamepadAxisMove_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nmeGamepadDisconnect") ) { outValue = nmeGamepadDisconnect_dyn(); return true; }
	}
	return false;
}

bool GameInput_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"numDevices") ) { numDevices=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"nmeDevices") ) { nmeDevices=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isSupported") ) { isSupported=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeInstances") ) { nmeInstances=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeKeyboardDevices") ) { nmeKeyboardDevices=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GameInput_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo GameInput_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &GameInput_obj::isSupported,HX_("isSupported",e4,7c,8a,f3)},
	{::hx::fsInt,(void *) &GameInput_obj::numDevices,HX_("numDevices",77,65,89,07)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GameInput_obj::nmeDevices,HX_("nmeDevices",77,8c,6a,a6)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GameInput_obj::nmeInstances,HX_("nmeInstances",18,73,43,e9)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GameInput_obj::nmeKeyboardDevices,HX_("nmeKeyboardDevices",90,d4,b5,7e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GameInput_obj_sMemberFields[] = {
	HX_("addKeyboardDevice0",d2,27,e0,2d),
	HX_("addEventListener",cd,0b,64,f1),
	::String(null()) };

static void GameInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameInput_obj::isSupported,"isSupported");
	HX_MARK_MEMBER_NAME(GameInput_obj::numDevices,"numDevices");
	HX_MARK_MEMBER_NAME(GameInput_obj::nmeDevices,"nmeDevices");
	HX_MARK_MEMBER_NAME(GameInput_obj::nmeInstances,"nmeInstances");
	HX_MARK_MEMBER_NAME(GameInput_obj::nmeKeyboardDevices,"nmeKeyboardDevices");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameInput_obj::isSupported,"isSupported");
	HX_VISIT_MEMBER_NAME(GameInput_obj::numDevices,"numDevices");
	HX_VISIT_MEMBER_NAME(GameInput_obj::nmeDevices,"nmeDevices");
	HX_VISIT_MEMBER_NAME(GameInput_obj::nmeInstances,"nmeInstances");
	HX_VISIT_MEMBER_NAME(GameInput_obj::nmeKeyboardDevices,"nmeKeyboardDevices");
};

#endif

::hx::Class GameInput_obj::__mClass;

static ::String GameInput_obj_sStaticFields[] = {
	HX_("isSupported",e4,7c,8a,f3),
	HX_("numDevices",77,65,89,07),
	HX_("nmeDevices",77,8c,6a,a6),
	HX_("nmeInstances",18,73,43,e9),
	HX_("nmeKeyboardDevices",90,d4,b5,7e),
	HX_("hasInstances",84,68,6c,d8),
	HX_("getBest",da,a0,96,13),
	HX_("getDeviceAt",df,a9,8c,ca),
	HX_("getGamepadGuid",d4,e1,5e,5c),
	HX_("getGamepadName",96,36,f0,60),
	HX_("__getDevice",ac,ae,fa,1b),
	HX_("nmeGamepadConnect",2f,a3,62,66),
	HX_("nmeGamepadDisconnect",37,16,38,94),
	HX_("nmeGamepadAxisMove",6d,85,2c,05),
	HX_("nmeGamepadButton",4d,4a,c9,14),
	::String(null())
};

void GameInput_obj::__register()
{
	GameInput_obj _hx_dummy;
	GameInput_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.ui.GameInput",26,56,f1,66);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GameInput_obj::__GetStatic;
	__mClass->mSetStaticField = &GameInput_obj::__SetStatic;
	__mClass->mMarkFunc = GameInput_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GameInput_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameInput_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameInput_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GameInput_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_13_boot)
HXDLIN(  13)		isSupported = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_14_boot)
HXDLIN(  14)		numDevices = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_16_boot)
HXDLIN(  16)		nmeDevices = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_17_boot)
HXDLIN(  17)		nmeInstances = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_79d9af6038aa2c5d_18_boot)
HXDLIN(  18)		nmeKeyboardDevices = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace nme
} // end namespace ui
