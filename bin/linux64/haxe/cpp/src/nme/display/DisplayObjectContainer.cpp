// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_errors_ArgumentError
#include <nme/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_nme_errors_Error
#include <nme/errors/Error.h>
#endif
#ifndef INCLUDED_nme_errors_RangeError
#include <nme/errors/RangeError.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_202c04ef354c202e_19_new,"nme.display.DisplayObjectContainer","new",0x8bd68a46,"nme.display.DisplayObjectContainer.new","nme/display/DisplayObjectContainer.hx",19,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_25_addChild,"nme.display.DisplayObjectContainer","addChild",0x382a7415,"nme.display.DisplayObjectContainer.addChild","nme/display/DisplayObjectContainer.hx",25,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_31_addChildAt,"nme.display.DisplayObjectContainer","addChildAt",0x6ebf9c68,"nme.display.DisplayObjectContainer.addChildAt","nme/display/DisplayObjectContainer.hx",31,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_39_areInaccessibleObjectsUnderPoint,"nme.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0xc7058497,"nme.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","nme/display/DisplayObjectContainer.hx",39,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_43_contains,"nme.display.DisplayObjectContainer","contains",0xa58efe79,"nme.display.DisplayObjectContainer.contains","nme/display/DisplayObjectContainer.hx",43,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_58_getChildAt,"nme.display.DisplayObjectContainer","getChildAt",0x5696f693,"nme.display.DisplayObjectContainer.getChildAt","nme/display/DisplayObjectContainer.hx",58,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_69_getChildByName,"nme.display.DisplayObjectContainer","getChildByName",0x0b661d62,"nme.display.DisplayObjectContainer.getChildByName","nme/display/DisplayObjectContainer.hx",69,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_78_getChildIndex,"nme.display.DisplayObjectContainer","getChildIndex",0xfe5abd72,"nme.display.DisplayObjectContainer.getChildIndex","nme/display/DisplayObjectContainer.hx",78,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_82_getObjectsUnderPoint,"nme.display.DisplayObjectContainer","getObjectsUnderPoint",0xa07ad3f0,"nme.display.DisplayObjectContainer.getObjectsUnderPoint","nme/display/DisplayObjectContainer.hx",82,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_88_nmeAddChild,"nme.display.DisplayObjectContainer","nmeAddChild",0xe8962907,"nme.display.DisplayObjectContainer.nmeAddChild","nme/display/DisplayObjectContainer.hx",88,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_108_nmeBroadcast,"nme.display.DisplayObjectContainer","nmeBroadcast",0x05086c35,"nme.display.DisplayObjectContainer.nmeBroadcast","nme/display/DisplayObjectContainer.hx",108,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_131_nmeFindByID,"nme.display.DisplayObjectContainer","nmeFindByID",0xbd365f97,"nme.display.DisplayObjectContainer.nmeFindByID","nme/display/DisplayObjectContainer.hx",131,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_146_nmeGetChildIndex,"nme.display.DisplayObjectContainer","nmeGetChildIndex",0xe95fdb40,"nme.display.DisplayObjectContainer.nmeGetChildIndex","nme/display/DisplayObjectContainer.hx",146,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_153_nmeGetObjectsUnderPoint,"nme.display.DisplayObjectContainer","nmeGetObjectsUnderPoint",0x0d9b2be2,"nme.display.DisplayObjectContainer.nmeGetObjectsUnderPoint","nme/display/DisplayObjectContainer.hx",153,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_160_nmeOnAdded,"nme.display.DisplayObjectContainer","nmeOnAdded",0x220bc755,"nme.display.DisplayObjectContainer.nmeOnAdded","nme/display/DisplayObjectContainer.hx",160,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_167_nmeOnRemoved,"nme.display.DisplayObjectContainer","nmeOnRemoved",0xf099a175,"nme.display.DisplayObjectContainer.nmeOnRemoved","nme/display/DisplayObjectContainer.hx",167,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_174_nmeRemoveChildFromArray,"nme.display.DisplayObjectContainer","nmeRemoveChildFromArray",0x8f693543,"nme.display.DisplayObjectContainer.nmeRemoveChildFromArray","nme/display/DisplayObjectContainer.hx",174,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_184_nmeSetChildIndex,"nme.display.DisplayObjectContainer","nmeSetChildIndex",0x2e65bd4c,"nme.display.DisplayObjectContainer.nmeSetChildIndex","nme/display/DisplayObjectContainer.hx",184,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_244_nmeSwapChildrenAt,"nme.display.DisplayObjectContainer","nmeSwapChildrenAt",0x3558fed1,"nme.display.DisplayObjectContainer.nmeSwapChildrenAt","nme/display/DisplayObjectContainer.hx",244,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_258_removeChild,"nme.display.DisplayObjectContainer","removeChild",0x1b35969e,"nme.display.DisplayObjectContainer.removeChild","nme/display/DisplayObjectContainer.hx",258,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_272_removeChildAt,"nme.display.DisplayObjectContainer","removeChildAt",0x84bf3331,"nme.display.DisplayObjectContainer.removeChildAt","nme/display/DisplayObjectContainer.hx",272,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_283_removeChildren,"nme.display.DisplayObjectContainer","removeChildren",0xa2b2b97d,"nme.display.DisplayObjectContainer.removeChildren","nme/display/DisplayObjectContainer.hx",283,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_306_setChildIndex,"nme.display.DisplayObjectContainer","setChildIndex",0x43609f7e,"nme.display.DisplayObjectContainer.setChildIndex","nme/display/DisplayObjectContainer.hx",306,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_310_swapChildren,"nme.display.DisplayObjectContainer","swapChildren",0x6819244c,"nme.display.DisplayObjectContainer.swapChildren","nme/display/DisplayObjectContainer.hx",310,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_320_swapChildrenAt,"nme.display.DisplayObjectContainer","swapChildrenAt",0x7be4085f,"nme.display.DisplayObjectContainer.swapChildrenAt","nme/display/DisplayObjectContainer.hx",320,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_324_get_mouseChildren,"nme.display.DisplayObjectContainer","get_mouseChildren",0xa1612441,"nme.display.DisplayObjectContainer.get_mouseChildren","nme/display/DisplayObjectContainer.hx",324,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_326_set_mouseChildren,"nme.display.DisplayObjectContainer","set_mouseChildren",0xc4cefc4d,"nme.display.DisplayObjectContainer.set_mouseChildren","nme/display/DisplayObjectContainer.hx",326,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_331_get_numChildren,"nme.display.DisplayObjectContainer","get_numChildren",0xa9871c22,"nme.display.DisplayObjectContainer.get_numChildren","nme/display/DisplayObjectContainer.hx",331,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_332_get_tabChildren,"nme.display.DisplayObjectContainer","get_tabChildren",0x988cbf31,"nme.display.DisplayObjectContainer.get_tabChildren","nme/display/DisplayObjectContainer.hx",332,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_202c04ef354c202e_333_set_tabChildren,"nme.display.DisplayObjectContainer","set_tabChildren",0x94583c3d,"nme.display.DisplayObjectContainer.set_tabChildren","nme/display/DisplayObjectContainer.hx",333,0xb12222a8)
HX_LOCAL_STACK_FRAME(_hx_pos_6db060301365e5bb_9_boot,"nme.display.DisplayObjectContainer","boot",0xc7fb738c,"nme.display.DisplayObjectContainer.boot","nme/PrimeLoader.hx",9,0xcf416155)
namespace nme{
namespace display{

void DisplayObjectContainer_obj::__construct( ::Dynamic inHandle,::String inType){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_19_new)
HXLINE(  20)		super::__construct(inHandle,inType);
HXLINE(  21)		this->nmeChildren = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ff07575) {
		if (inClassId<=(int)0x048b25c1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x048b25c1;
		} else {
			return inClassId==(int)0x0ff07575;
		}
	} else {
		return inClassId==(int)0x169017a6 || inClassId==(int)0x5e732244;
	}
}

 ::nme::display::DisplayObject DisplayObjectContainer_obj::addChild( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_25_addChild)
HXLINE(  26)		{
HXLINE(  26)			if (::hx::IsInstanceEq( child,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  26)				HX_STACK_DO_THROW(HX_("Adding to self",b2,fe,1c,cf));
            			}
HXDLIN(  26)			if (::hx::IsInstanceEq( child->nmeParent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  26)				this->setChildIndex(child,(this->nmeChildren->length - 1));
            			}
            			else {
HXLINE(  26)				child->nmeSetParent(::hx::ObjectPtr<OBJ_>(this));
HXDLIN(  26)				this->nmeChildren->push(child);
HXDLIN(  26)				if (::hx::IsNotNull( child->nmeHandle )) {
HXLINE(  26)					::nme::display::DisplayObjectContainer_obj::nme_doc_add_child(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(child->nmeHandle));
            				}
            			}
            		}
HXLINE(  27)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::nme::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::nme::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_31_addChildAt)
HXLINE(  32)		{
HXLINE(  32)			if (::hx::IsInstanceEq( child,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  32)				HX_STACK_DO_THROW(HX_("Adding to self",b2,fe,1c,cf));
            			}
HXDLIN(  32)			if (::hx::IsInstanceEq( child->nmeParent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  32)				this->setChildIndex(child,(this->nmeChildren->length - 1));
            			}
            			else {
HXLINE(  32)				child->nmeSetParent(::hx::ObjectPtr<OBJ_>(this));
HXDLIN(  32)				this->nmeChildren->push(child);
HXDLIN(  32)				if (::hx::IsNotNull( child->nmeHandle )) {
HXLINE(  32)					::nme::display::DisplayObjectContainer_obj::nme_doc_add_child(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(child->nmeHandle));
            				}
            			}
            		}
HXLINE(  33)		{
HXLINE(  33)			if ((index > this->nmeChildren->length)) {
HXLINE(  33)				HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            			}
HXDLIN(  33)			int orig = this->nmeGetChildIndex(child);
HXDLIN(  33)			if ((orig < 0)) {
HXLINE(  33)				::String msg = ((HX_("setChildIndex : object ",93,4a,81,b4) + child->toString()) + HX_(" not found.",39,f7,8e,4f));
HXDLIN(  33)				if (::hx::IsInstanceEq( child->nmeParent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  33)					int realindex = -1;
HXDLIN(  33)					{
HXLINE(  33)						int _g = 0;
HXDLIN(  33)						int _g1 = this->nmeChildren->length;
HXDLIN(  33)						while((_g < _g1)){
HXLINE(  33)							_g = (_g + 1);
HXDLIN(  33)							int i = (_g - 1);
HXDLIN(  33)							if (::hx::IsInstanceEq( this->nmeChildren->__get(i).StaticCast<  ::nme::display::DisplayObject >(),child )) {
HXLINE(  33)								realindex = i;
HXDLIN(  33)								goto _hx_goto_2;
            							}
            						}
            						_hx_goto_2:;
            					}
HXDLIN(  33)					if ((realindex != -1)) {
HXLINE(  33)						msg = (msg + (HX_("Internal error: Real child index was ",00,bf,50,8a) + ::Std_obj::string(realindex)));
            					}
            					else {
HXLINE(  33)						msg = (msg + HX_("Internal error: Child was not in nmeChildren array!",eb,c5,0c,c2));
            					}
            				}
HXDLIN(  33)				HX_STACK_DO_THROW(msg);
            			}
HXDLIN(  33)			::nme::display::DisplayObjectContainer_obj::nme_doc_set_child_index(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(child->nmeHandle),index);
HXDLIN(  33)			if ((index < orig)) {
HXLINE(  33)				int i1 = orig;
HXDLIN(  33)				while((i1 > index)){
HXLINE(  33)					this->nmeChildren[i1] = this->nmeChildren->__get((i1 - 1)).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN(  33)					i1 = (i1 - 1);
            				}
HXDLIN(  33)				this->nmeChildren[index] = child;
            			}
            			else {
HXLINE(  33)				if ((orig < index)) {
HXLINE(  33)					int i2 = orig;
HXDLIN(  33)					while((i2 < index)){
HXLINE(  33)						this->nmeChildren[i2] = this->nmeChildren->__get((i2 + 1)).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN(  33)						i2 = (i2 + 1);
            					}
HXDLIN(  33)					this->nmeChildren[index] = child;
            				}
            			}
            		}
HXLINE(  34)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::nme::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_39_areInaccessibleObjectsUnderPoint)
HXDLIN(  39)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_43_contains)
HXLINE(  44)		if (::hx::IsNull( child )) {
HXLINE(  45)			return false;
            		}
HXLINE(  47)		if (::hx::IsInstanceEq( ::hx::ObjectPtr<OBJ_>(this),child )) {
HXLINE(  48)			return true;
            		}
HXLINE(  50)		{
HXLINE(  50)			int _g = 0;
HXDLIN(  50)			::Array< ::Dynamic> _g1 = this->nmeChildren;
HXDLIN(  50)			while((_g < _g1->length)){
HXLINE(  50)				 ::nme::display::DisplayObject c = _g1->__get(_g).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN(  50)				_g = (_g + 1);
HXLINE(  51)				if (::hx::IsInstanceEq( c,child )) {
HXLINE(  52)					return true;
            				}
            			}
            		}
HXLINE(  54)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::nme::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_GC_STACKFRAME(&_hx_pos_202c04ef354c202e_58_getChildAt)
HXLINE(  59)		bool _hx_tmp;
HXDLIN(  59)		if ((index >= 0)) {
HXLINE(  59)			_hx_tmp = (index < this->nmeChildren->length);
            		}
            		else {
HXLINE(  59)			_hx_tmp = false;
            		}
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  60)			return this->nmeChildren->__get(index).StaticCast<  ::nme::display::DisplayObject >();
            		}
HXLINE(  63)		HX_STACK_DO_THROW( ::nme::errors::RangeError_obj::__alloc( HX_CTX ,(((HX_("getChildAt : index out of bounds ",cf,fc,a7,dc) + index) + HX_("/",2f,00,00,00)) + this->nmeChildren->length)));
HXDLIN(  63)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::nme::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_69_getChildByName)
HXLINE(  70)		{
HXLINE(  70)			int _g = 0;
HXDLIN(  70)			::Array< ::Dynamic> _g1 = this->nmeChildren;
HXDLIN(  70)			while((_g < _g1->length)){
HXLINE(  70)				 ::nme::display::DisplayObject c = _g1->__get(_g).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN(  70)				_g = (_g + 1);
HXLINE(  71)				if ((name == c->get_name())) {
HXLINE(  72)					return c;
            				}
            			}
            		}
HXLINE(  73)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_78_getChildIndex)
HXDLIN(  78)		return this->nmeGetChildIndex(child);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::nme::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_82_getObjectsUnderPoint)
HXLINE(  83)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE(  84)		this->nmeGetObjectsUnderPoint(point,result);
HXLINE(  85)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

void DisplayObjectContainer_obj::nmeAddChild( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_88_nmeAddChild)
HXLINE(  89)		if (::hx::IsInstanceEq( child,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  91)			HX_STACK_DO_THROW(HX_("Adding to self",b2,fe,1c,cf));
            		}
HXLINE(  94)		if (::hx::IsInstanceEq( child->nmeParent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  96)			this->setChildIndex(child,(this->nmeChildren->length - 1));
            		}
            		else {
HXLINE( 101)			child->nmeSetParent(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 102)			this->nmeChildren->push(child);
HXLINE( 103)			if (::hx::IsNotNull( child->nmeHandle )) {
HXLINE( 104)				::nme::display::DisplayObjectContainer_obj::nme_doc_add_child(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(child->nmeHandle));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,nmeAddChild,(void))

void DisplayObjectContainer_obj::nmeBroadcast( ::nme::events::Event inEvt){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_108_nmeBroadcast)
HXLINE( 109)		int i = 0;
HXLINE( 111)		if ((this->nmeChildren->length > 0)) {
HXLINE( 112)			while(true){
HXLINE( 114)				 ::nme::display::DisplayObject child = this->nmeChildren->__get(i).StaticCast<  ::nme::display::DisplayObject >();
HXLINE( 115)				child->nmeBroadcast(inEvt);
HXLINE( 117)				if ((i >= this->nmeChildren->length)) {
HXLINE( 118)					goto _hx_goto_15;
            				}
HXLINE( 120)				if (::hx::IsInstanceEq( this->nmeChildren->__get(i).StaticCast<  ::nme::display::DisplayObject >(),child )) {
HXLINE( 122)					i = (i + 1);
HXLINE( 123)					if ((i >= this->nmeChildren->length)) {
HXLINE( 124)						goto _hx_goto_15;
            					}
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 128)		this->super::nmeBroadcast(inEvt);
            	}


 ::nme::display::DisplayObject DisplayObjectContainer_obj::nmeFindByID(int inID){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_131_nmeFindByID)
HXLINE( 132)		if ((this->nmeID == inID)) {
HXLINE( 133)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 135)		{
HXLINE( 135)			int _g = 0;
HXDLIN( 135)			::Array< ::Dynamic> _g1 = this->nmeChildren;
HXDLIN( 135)			while((_g < _g1->length)){
HXLINE( 135)				 ::nme::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 135)				_g = (_g + 1);
HXLINE( 137)				 ::nme::display::DisplayObject found = child->nmeFindByID(inID);
HXLINE( 139)				if (::hx::IsNotNull( found )) {
HXLINE( 140)					return found;
            				}
            			}
            		}
HXLINE( 143)		return this->super::nmeFindByID(inID);
            	}


int DisplayObjectContainer_obj::nmeGetChildIndex( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_146_nmeGetChildIndex)
HXLINE( 147)		{
HXLINE( 147)			int _g = 0;
HXDLIN( 147)			int _g1 = this->nmeChildren->length;
HXDLIN( 147)			while((_g < _g1)){
HXLINE( 147)				_g = (_g + 1);
HXDLIN( 147)				int i = (_g - 1);
HXLINE( 148)				if (::hx::IsInstanceEq( this->nmeChildren->__get(i).StaticCast<  ::nme::display::DisplayObject >(),child )) {
HXLINE( 149)					return i;
            				}
            			}
            		}
HXLINE( 150)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,nmeGetChildIndex,return )

void DisplayObjectContainer_obj::nmeGetObjectsUnderPoint( ::nme::geom::Point point,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_153_nmeGetObjectsUnderPoint)
HXLINE( 154)		this->super::nmeGetObjectsUnderPoint(point,result);
HXLINE( 156)		{
HXLINE( 156)			int _g = 0;
HXDLIN( 156)			::Array< ::Dynamic> _g1 = this->nmeChildren;
HXDLIN( 156)			while((_g < _g1->length)){
HXLINE( 156)				 ::nme::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 156)				_g = (_g + 1);
HXLINE( 157)				child->nmeGetObjectsUnderPoint(point,result);
            			}
            		}
            	}


void DisplayObjectContainer_obj::nmeOnAdded( ::nme::display::DisplayObject inObj,bool inIsOnStage){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_160_nmeOnAdded)
HXLINE( 161)		this->super::nmeOnAdded(inObj,inIsOnStage);
HXLINE( 163)		{
HXLINE( 163)			int _g = 0;
HXDLIN( 163)			::Array< ::Dynamic> _g1 = this->nmeChildren;
HXDLIN( 163)			while((_g < _g1->length)){
HXLINE( 163)				 ::nme::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 163)				_g = (_g + 1);
HXLINE( 164)				child->nmeOnAdded(inObj,inIsOnStage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::nmeOnRemoved( ::nme::display::DisplayObject inObj,bool inWasOnStage){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_167_nmeOnRemoved)
HXLINE( 168)		this->super::nmeOnRemoved(inObj,inWasOnStage);
HXLINE( 170)		{
HXLINE( 170)			int _g = 0;
HXDLIN( 170)			::Array< ::Dynamic> _g1 = this->nmeChildren;
HXDLIN( 170)			while((_g < _g1->length)){
HXLINE( 170)				 ::nme::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 170)				_g = (_g + 1);
HXLINE( 171)				child->nmeOnRemoved(inObj,inWasOnStage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::nmeRemoveChildFromArray( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_174_nmeRemoveChildFromArray)
HXLINE( 175)		int i = this->nmeGetChildIndex(child);
HXLINE( 177)		if ((i >= 0)) {
HXLINE( 179)			::nme::display::DisplayObjectContainer_obj::nme_doc_remove_child(::hx::DynamicPtr(this->nmeHandle),i);
HXLINE( 180)			this->nmeChildren->removeRange(i,1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,nmeRemoveChildFromArray,(void))

void DisplayObjectContainer_obj::nmeSetChildIndex( ::nme::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_184_nmeSetChildIndex)
HXLINE( 185)		if ((index > this->nmeChildren->length)) {
HXLINE( 186)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE( 188)		 ::nme::display::DisplayObject s = null();
HXLINE( 189)		int orig = this->nmeGetChildIndex(child);
HXLINE( 191)		if ((orig < 0)) {
HXLINE( 193)			::String msg = ((HX_("setChildIndex : object ",93,4a,81,b4) + child->toString()) + HX_(" not found.",39,f7,8e,4f));
HXLINE( 195)			if (::hx::IsInstanceEq( child->nmeParent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 197)				int realindex = -1;
HXLINE( 199)				{
HXLINE( 199)					int _g = 0;
HXDLIN( 199)					int _g1 = this->nmeChildren->length;
HXDLIN( 199)					while((_g < _g1)){
HXLINE( 199)						_g = (_g + 1);
HXDLIN( 199)						int i = (_g - 1);
HXLINE( 201)						if (::hx::IsInstanceEq( this->nmeChildren->__get(i).StaticCast<  ::nme::display::DisplayObject >(),child )) {
HXLINE( 203)							realindex = i;
HXLINE( 204)							goto _hx_goto_28;
            						}
            					}
            					_hx_goto_28:;
            				}
HXLINE( 208)				if ((realindex != -1)) {
HXLINE( 209)					msg = (msg + (HX_("Internal error: Real child index was ",00,bf,50,8a) + ::Std_obj::string(realindex)));
            				}
            				else {
HXLINE( 211)					msg = (msg + HX_("Internal error: Child was not in nmeChildren array!",eb,c5,0c,c2));
            				}
            			}
HXLINE( 214)			HX_STACK_DO_THROW(msg);
            		}
HXLINE( 217)		::nme::display::DisplayObjectContainer_obj::nme_doc_set_child_index(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(child->nmeHandle),index);
HXLINE( 219)		if ((index < orig)) {
HXLINE( 221)			int i1 = orig;
HXLINE( 223)			while((i1 > index)){
HXLINE( 225)				this->nmeChildren[i1] = this->nmeChildren->__get((i1 - 1)).StaticCast<  ::nme::display::DisplayObject >();
HXLINE( 226)				i1 = (i1 - 1);
            			}
HXLINE( 229)			this->nmeChildren[index] = child;
            		}
            		else {
HXLINE( 231)			if ((orig < index)) {
HXLINE( 233)				int i2 = orig;
HXLINE( 234)				while((i2 < index)){
HXLINE( 236)					this->nmeChildren[i2] = this->nmeChildren->__get((i2 + 1)).StaticCast<  ::nme::display::DisplayObject >();
HXLINE( 237)					i2 = (i2 + 1);
            				}
HXLINE( 240)				this->nmeChildren[index] = child;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,nmeSetChildIndex,(void))

void DisplayObjectContainer_obj::nmeSwapChildrenAt(int index1,int index2){
            	HX_GC_STACKFRAME(&_hx_pos_202c04ef354c202e_244_nmeSwapChildrenAt)
HXLINE( 245)		bool _hx_tmp;
HXDLIN( 245)		bool _hx_tmp1;
HXDLIN( 245)		bool _hx_tmp2;
HXDLIN( 245)		if ((index1 >= 0)) {
HXLINE( 245)			_hx_tmp2 = (index2 < 0);
            		}
            		else {
HXLINE( 245)			_hx_tmp2 = true;
            		}
HXDLIN( 245)		if (!(_hx_tmp2)) {
HXLINE( 245)			_hx_tmp1 = (index1 > this->nmeChildren->length);
            		}
            		else {
HXLINE( 245)			_hx_tmp1 = true;
            		}
HXDLIN( 245)		if (!(_hx_tmp1)) {
HXLINE( 245)			_hx_tmp = (index2 > this->nmeChildren->length);
            		}
            		else {
HXLINE( 245)			_hx_tmp = true;
            		}
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 246)			HX_STACK_DO_THROW( ::nme::errors::RangeError_obj::__alloc( HX_CTX ,HX_("swapChildrenAt : index out of bounds",fd,03,a9,7f)));
            		}
HXLINE( 248)		if ((index1 != index2)) {
HXLINE( 250)			 ::nme::display::DisplayObject tmp = this->nmeChildren->__get(index1).StaticCast<  ::nme::display::DisplayObject >();
HXLINE( 251)			this->nmeChildren[index1] = this->nmeChildren->__get(index2).StaticCast<  ::nme::display::DisplayObject >();
HXLINE( 252)			this->nmeChildren[index2] = tmp;
HXLINE( 253)			::nme::display::DisplayObjectContainer_obj::nme_doc_swap_children(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(index1),::hx::DynamicPtr(index2));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,nmeSwapChildrenAt,(void))

 ::nme::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::nme::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_258_removeChild)
HXLINE( 259)		int c = this->nmeGetChildIndex(child);
HXLINE( 261)		if ((c >= 0)) {
HXLINE( 263)			child->nmeSetParent(null());
HXLINE( 264)			return child;
            		}
HXLINE( 268)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::nme::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_GC_STACKFRAME(&_hx_pos_202c04ef354c202e_272_removeChildAt)
HXLINE( 273)		bool _hx_tmp;
HXDLIN( 273)		if ((index >= 0)) {
HXLINE( 273)			_hx_tmp = (index < this->nmeChildren->length);
            		}
            		else {
HXLINE( 273)			_hx_tmp = false;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			 ::nme::display::DisplayObject result = this->nmeChildren->__get(index).StaticCast<  ::nme::display::DisplayObject >();
HXLINE( 276)			result->nmeSetParent(null());
HXLINE( 277)			return result;
            		}
HXLINE( 280)		HX_STACK_DO_THROW( ::nme::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("The supplied DisplayObject must be a child of the caller.",e6,f4,27,a5),null()));
HXDLIN( 280)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_202c04ef354c202e_283_removeChildren)
HXLINE( 284)		if ((endIndex == (int)2147483647)) {
HXLINE( 286)			endIndex = (this->nmeChildren->length - 1);
HXLINE( 287)			if ((endIndex < 0)) {
HXLINE( 288)				return;
            			}
            		}
HXLINE( 291)		if ((beginIndex > (this->nmeChildren->length - 1))) {
HXLINE( 292)			return;
            		}
            		else {
HXLINE( 293)			bool _hx_tmp;
HXDLIN( 293)			bool _hx_tmp1;
HXDLIN( 293)			if ((endIndex >= beginIndex)) {
HXLINE( 293)				_hx_tmp1 = (beginIndex < 0);
            			}
            			else {
HXLINE( 293)				_hx_tmp1 = true;
            			}
HXDLIN( 293)			if (!(_hx_tmp1)) {
HXLINE( 293)				_hx_tmp = (endIndex > this->nmeChildren->length);
            			}
            			else {
HXLINE( 293)				_hx_tmp = true;
            			}
HXDLIN( 293)			if (_hx_tmp) {
HXLINE( 294)				HX_STACK_DO_THROW( ::nme::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 296)		int numRemovals = (endIndex - beginIndex);
HXLINE( 297)		while((numRemovals >= 0)){
HXLINE( 299)			this->removeChildAt(beginIndex);
HXLINE( 300)			numRemovals = (numRemovals - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

void DisplayObjectContainer_obj::setChildIndex( ::nme::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_306_setChildIndex)
HXDLIN( 306)		if ((index > this->nmeChildren->length)) {
HXDLIN( 306)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXDLIN( 306)		int orig = this->nmeGetChildIndex(child);
HXDLIN( 306)		if ((orig < 0)) {
HXDLIN( 306)			::String msg = ((HX_("setChildIndex : object ",93,4a,81,b4) + child->toString()) + HX_(" not found.",39,f7,8e,4f));
HXDLIN( 306)			if (::hx::IsInstanceEq( child->nmeParent,::hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 306)				int realindex = -1;
HXDLIN( 306)				{
HXDLIN( 306)					int _g = 0;
HXDLIN( 306)					int _g1 = this->nmeChildren->length;
HXDLIN( 306)					while((_g < _g1)){
HXDLIN( 306)						_g = (_g + 1);
HXDLIN( 306)						int i = (_g - 1);
HXDLIN( 306)						if (::hx::IsInstanceEq( this->nmeChildren->__get(i).StaticCast<  ::nme::display::DisplayObject >(),child )) {
HXDLIN( 306)							realindex = i;
HXDLIN( 306)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
HXDLIN( 306)				if ((realindex != -1)) {
HXDLIN( 306)					msg = (msg + (HX_("Internal error: Real child index was ",00,bf,50,8a) + ::Std_obj::string(realindex)));
            				}
            				else {
HXDLIN( 306)					msg = (msg + HX_("Internal error: Child was not in nmeChildren array!",eb,c5,0c,c2));
            				}
            			}
HXDLIN( 306)			HX_STACK_DO_THROW(msg);
            		}
HXDLIN( 306)		::nme::display::DisplayObjectContainer_obj::nme_doc_set_child_index(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(child->nmeHandle),index);
HXDLIN( 306)		if ((index < orig)) {
HXDLIN( 306)			int i1 = orig;
HXDLIN( 306)			while((i1 > index)){
HXDLIN( 306)				this->nmeChildren[i1] = this->nmeChildren->__get((i1 - 1)).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 306)				i1 = (i1 - 1);
            			}
HXDLIN( 306)			this->nmeChildren[index] = child;
            		}
            		else {
HXDLIN( 306)			if ((orig < index)) {
HXDLIN( 306)				int i2 = orig;
HXDLIN( 306)				while((i2 < index)){
HXDLIN( 306)					this->nmeChildren[i2] = this->nmeChildren->__get((i2 + 1)).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 306)					i2 = (i2 + 1);
            				}
HXDLIN( 306)				this->nmeChildren[index] = child;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::swapChildren( ::nme::display::DisplayObject child1, ::nme::display::DisplayObject child2){
            	HX_GC_STACKFRAME(&_hx_pos_202c04ef354c202e_310_swapChildren)
HXLINE( 311)		int idx1 = this->nmeGetChildIndex(child1);
HXLINE( 312)		int idx2 = this->nmeGetChildIndex(child2);
HXLINE( 313)		bool _hx_tmp;
HXDLIN( 313)		if ((idx1 >= 0)) {
HXLINE( 313)			_hx_tmp = (idx2 < 0);
            		}
            		else {
HXLINE( 313)			_hx_tmp = true;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 314)			HX_STACK_DO_THROW(HX_("swapChildren:Could not find children",32,ad,6e,85));
            		}
HXLINE( 315)		{
HXLINE( 315)			bool _hx_tmp1;
HXDLIN( 315)			bool _hx_tmp2;
HXDLIN( 315)			bool _hx_tmp3;
HXDLIN( 315)			if ((idx1 >= 0)) {
HXLINE( 315)				_hx_tmp3 = (idx2 < 0);
            			}
            			else {
HXLINE( 315)				_hx_tmp3 = true;
            			}
HXDLIN( 315)			if (!(_hx_tmp3)) {
HXLINE( 315)				_hx_tmp2 = (idx1 > this->nmeChildren->length);
            			}
            			else {
HXLINE( 315)				_hx_tmp2 = true;
            			}
HXDLIN( 315)			if (!(_hx_tmp2)) {
HXLINE( 315)				_hx_tmp1 = (idx2 > this->nmeChildren->length);
            			}
            			else {
HXLINE( 315)				_hx_tmp1 = true;
            			}
HXDLIN( 315)			if (_hx_tmp1) {
HXLINE( 315)				HX_STACK_DO_THROW( ::nme::errors::RangeError_obj::__alloc( HX_CTX ,HX_("swapChildrenAt : index out of bounds",fd,03,a9,7f)));
            			}
HXDLIN( 315)			if ((idx1 != idx2)) {
HXLINE( 315)				 ::nme::display::DisplayObject tmp = this->nmeChildren->__get(idx1).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 315)				this->nmeChildren[idx1] = this->nmeChildren->__get(idx2).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 315)				this->nmeChildren[idx2] = tmp;
HXDLIN( 315)				::nme::display::DisplayObjectContainer_obj::nme_doc_swap_children(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(idx1),::hx::DynamicPtr(idx2));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_GC_STACKFRAME(&_hx_pos_202c04ef354c202e_320_swapChildrenAt)
HXDLIN( 320)		bool _hx_tmp;
HXDLIN( 320)		bool _hx_tmp1;
HXDLIN( 320)		bool _hx_tmp2;
HXDLIN( 320)		if ((index1 >= 0)) {
HXDLIN( 320)			_hx_tmp2 = (index2 < 0);
            		}
            		else {
HXDLIN( 320)			_hx_tmp2 = true;
            		}
HXDLIN( 320)		if (!(_hx_tmp2)) {
HXDLIN( 320)			_hx_tmp1 = (index1 > this->nmeChildren->length);
            		}
            		else {
HXDLIN( 320)			_hx_tmp1 = true;
            		}
HXDLIN( 320)		if (!(_hx_tmp1)) {
HXDLIN( 320)			_hx_tmp = (index2 > this->nmeChildren->length);
            		}
            		else {
HXDLIN( 320)			_hx_tmp = true;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXDLIN( 320)			HX_STACK_DO_THROW( ::nme::errors::RangeError_obj::__alloc( HX_CTX ,HX_("swapChildrenAt : index out of bounds",fd,03,a9,7f)));
            		}
HXDLIN( 320)		if ((index1 != index2)) {
HXDLIN( 320)			 ::nme::display::DisplayObject tmp = this->nmeChildren->__get(index1).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 320)			this->nmeChildren[index1] = this->nmeChildren->__get(index2).StaticCast<  ::nme::display::DisplayObject >();
HXDLIN( 320)			this->nmeChildren[index2] = tmp;
HXDLIN( 320)			::nme::display::DisplayObjectContainer_obj::nme_doc_swap_children(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(index1),::hx::DynamicPtr(index2));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

bool DisplayObjectContainer_obj::get_mouseChildren(){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_324_get_mouseChildren)
HXDLIN( 324)		return ::nme::display::DisplayObjectContainer_obj::nme_doc_get_mouse_children(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_mouseChildren,return )

bool DisplayObjectContainer_obj::set_mouseChildren(bool inVal){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_326_set_mouseChildren)
HXLINE( 327)		::nme::display::DisplayObjectContainer_obj::nme_doc_set_mouse_children(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 328)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_mouseChildren,return )

int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_331_get_numChildren)
HXDLIN( 331)		return this->nmeChildren->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )

bool DisplayObjectContainer_obj::get_tabChildren(){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_332_get_tabChildren)
HXDLIN( 332)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_tabChildren,return )

bool DisplayObjectContainer_obj::set_tabChildren(bool inValue){
            	HX_STACKFRAME(&_hx_pos_202c04ef354c202e_333_set_tabChildren)
HXDLIN( 333)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_tabChildren,return )

::cpp::Function<  ::hx::Object *  () > DisplayObjectContainer_obj::nme_create_display_object_container;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObjectContainer_obj::nme_doc_add_child;

::cpp::Function< void  ( ::hx::Object *,int) > DisplayObjectContainer_obj::nme_doc_remove_child;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int) > DisplayObjectContainer_obj::nme_doc_set_child_index;

::cpp::Function< bool  ( ::hx::Object *) > DisplayObjectContainer_obj::nme_doc_get_mouse_children;

::cpp::Function< void  ( ::hx::Object *,bool) > DisplayObjectContainer_obj::nme_doc_set_mouse_children;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > DisplayObjectContainer_obj::nme_doc_swap_children;


::hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new( ::Dynamic inHandle,::String inType) {
	::hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct(inHandle,inType);
	return __this;
}

::hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inHandle,::String inType) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "nme.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct(inHandle,inType);
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(numChildren,"numChildren");
	HX_MARK_MEMBER_NAME(nmeChildren,"nmeChildren");
	 ::nme::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(numChildren,"numChildren");
	HX_VISIT_MEMBER_NAME(nmeChildren,"nmeChildren");
	 ::nme::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return ::hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return ::hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeOnAdded") ) { return ::hx::Val( nmeOnAdded_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_numChildren() : numChildren ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_tabChildren() ); }
		if (HX_FIELD_EQ(inName,"nmeChildren") ) { return ::hx::Val( nmeChildren ); }
		if (HX_FIELD_EQ(inName,"nmeAddChild") ) { return ::hx::Val( nmeAddChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeFindByID") ) { return ::hx::Val( nmeFindByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return ::hx::Val( removeChild_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeBroadcast") ) { return ::hx::Val( nmeBroadcast_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeOnRemoved") ) { return ::hx::Val( nmeOnRemoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return ::hx::Val( swapChildren_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_mouseChildren() ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return ::hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return ::hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return ::hx::Val( setChildIndex_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return ::hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return ::hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return ::hx::Val( swapChildrenAt_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return ::hx::Val( get_numChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabChildren") ) { return ::hx::Val( get_tabChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabChildren") ) { return ::hx::Val( set_tabChildren_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nmeGetChildIndex") ) { return ::hx::Val( nmeGetChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeSetChildIndex") ) { return ::hx::Val( nmeSetChildIndex_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeSwapChildrenAt") ) { return ::hx::Val( nmeSwapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseChildren") ) { return ::hx::Val( get_mouseChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseChildren") ) { return ::hx::Val( set_mouseChildren_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return ::hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nmeGetObjectsUnderPoint") ) { return ::hx::Val( nmeGetObjectsUnderPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeRemoveChildFromArray") ) { return ::hx::Val( nmeRemoveChildFromArray_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return ::hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObjectContainer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"nme_doc_add_child") ) { outValue = ( nme_doc_add_child ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_doc_remove_child") ) { outValue = ( nme_doc_remove_child ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"nme_doc_swap_children") ) { outValue = ( nme_doc_swap_children ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_doc_set_child_index") ) { outValue = ( nme_doc_set_child_index ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_doc_get_mouse_children") ) { outValue = ( nme_doc_get_mouse_children ); return true; }
		if (HX_FIELD_EQ(inName,"nme_doc_set_mouse_children") ) { outValue = ( nme_doc_set_mouse_children ); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"nme_create_display_object_container") ) { outValue = ( nme_create_display_object_container ); return true; }
	}
	return false;
}

::hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { numChildren=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_tabChildren(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"nmeChildren") ) { nmeChildren=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_mouseChildren(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObjectContainer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"nme_doc_add_child") ) { nme_doc_add_child=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_doc_remove_child") ) { nme_doc_remove_child=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"nme_doc_swap_children") ) { nme_doc_swap_children=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_doc_set_child_index") ) { nme_doc_set_child_index=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int) > >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_doc_get_mouse_children") ) { nme_doc_get_mouse_children=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_doc_set_mouse_children") ) { nme_doc_set_mouse_children=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"nme_create_display_object_container") ) { nme_create_display_object_container=ioValue.Cast< ::cpp::Function<  ::hx::Object *  () > >(); return true; }
	}
	return false;
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mouseChildren",84,18,6b,ff));
	outFields->push(HX_("numChildren",a5,69,80,5c));
	outFields->push(HX_("tabChildren",b4,0c,86,4b));
	outFields->push(HX_("nmeChildren",a5,62,a1,c2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(DisplayObjectContainer_obj,numChildren),HX_("numChildren",a5,69,80,5c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DisplayObjectContainer_obj,nmeChildren),HX_("nmeChildren",a5,62,a1,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DisplayObjectContainer_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  () > */ ,(void *) &DisplayObjectContainer_obj::nme_create_display_object_container,HX_("nme_create_display_object_container",08,d9,1f,03)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObjectContainer_obj::nme_doc_add_child,HX_("nme_doc_add_child",fe,eb,e5,d1)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &DisplayObjectContainer_obj::nme_doc_remove_child,HX_("nme_doc_remove_child",e1,c5,52,0f)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int) > */ ,(void *) &DisplayObjectContainer_obj::nme_doc_set_child_index,HX_("nme_doc_set_child_index",d2,47,56,94)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &DisplayObjectContainer_obj::nme_doc_get_mouse_children,HX_("nme_doc_get_mouse_children",62,ec,16,6a)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &DisplayObjectContainer_obj::nme_doc_set_mouse_children,HX_("nme_doc_set_mouse_children",d6,1e,c6,46)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObjectContainer_obj::nme_doc_swap_children,HX_("nme_doc_swap_children",eb,d5,ce,b4)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_("numChildren",a5,69,80,5c),
	HX_("nmeChildren",a5,62,a1,c2),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("areInaccessibleObjectsUnderPoint",3d,22,9b,1e),
	HX_("contains",1f,5a,7b,2c),
	HX_("getChildAt",b9,07,0e,b6),
	HX_("getChildByName",88,b9,73,a3),
	HX_("getChildIndex",0c,68,02,b9),
	HX_("getObjectsUnderPoint",96,10,d5,80),
	HX_("nmeAddChild",21,19,4e,11),
	HX_("nmeBroadcast",db,92,42,7d),
	HX_("nmeFindByID",b1,4f,ee,e5),
	HX_("nmeGetChildIndex",e6,4c,29,d5),
	HX_("nmeGetObjectsUnderPoint",fc,da,07,78),
	HX_("nmeOnAdded",7b,d8,82,81),
	HX_("nmeOnRemoved",1b,c8,d3,68),
	HX_("nmeRemoveChildFromArray",5d,e4,d5,f9),
	HX_("nmeSetChildIndex",f2,2e,2f,1a),
	HX_("nmeSwapChildrenAt",6b,fe,d2,99),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("removeChildren",a3,55,c0,3a),
	HX_("setChildIndex",18,4a,08,fe),
	HX_("swapChildren",f2,4a,53,e0),
	HX_("swapChildrenAt",85,a4,f1,13),
	HX_("get_mouseChildren",db,23,db,05),
	HX_("set_mouseChildren",e7,fb,48,29),
	HX_("get_numChildren",3c,21,62,1d),
	HX_("get_tabChildren",4b,c4,67,0c),
	HX_("set_tabChildren",57,41,33,08),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_create_display_object_container,"nme_create_display_object_container");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_add_child,"nme_doc_add_child");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_remove_child,"nme_doc_remove_child");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_set_child_index,"nme_doc_set_child_index");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_get_mouse_children,"nme_doc_get_mouse_children");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_set_mouse_children,"nme_doc_set_mouse_children");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_swap_children,"nme_doc_swap_children");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_create_display_object_container,"nme_create_display_object_container");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_add_child,"nme_doc_add_child");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_remove_child,"nme_doc_remove_child");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_set_child_index,"nme_doc_set_child_index");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_get_mouse_children,"nme_doc_get_mouse_children");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_set_mouse_children,"nme_doc_set_mouse_children");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::nme_doc_swap_children,"nme_doc_swap_children");
};

#endif

::hx::Class DisplayObjectContainer_obj::__mClass;

static ::String DisplayObjectContainer_obj_sStaticFields[] = {
	HX_("nme_create_display_object_container",08,d9,1f,03),
	HX_("nme_doc_add_child",fe,eb,e5,d1),
	HX_("nme_doc_remove_child",e1,c5,52,0f),
	HX_("nme_doc_set_child_index",d2,47,56,94),
	HX_("nme_doc_get_mouse_children",62,ec,16,6a),
	HX_("nme_doc_set_mouse_children",d6,1e,c6,46),
	HX_("nme_doc_swap_children",eb,d5,ce,b4),
	::String(null())
};

void DisplayObjectContainer_obj::__register()
{
	DisplayObjectContainer_obj _hx_dummy;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.DisplayObjectContainer",54,af,ee,e0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObjectContainer_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObjectContainer_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObjectContainer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_create_display_object_container = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_create_display_object_container",08,d9,1f,03),HX_("o",6f,00,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_doc_add_child = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_add_child",fe,eb,e5,d1),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_doc_remove_child = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_remove_child",e1,c5,52,0f),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_doc_set_child_index = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_set_child_index",d2,47,56,94),HX_("ooiv",0d,45,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_doc_get_mouse_children = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_get_mouse_children",62,ec,16,6a),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_doc_set_mouse_children = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_set_mouse_children",d6,1e,c6,46),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6db060301365e5bb_9_boot)
HXDLIN(   9)		nme_doc_swap_children = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_swap_children",eb,d5,ce,b4),HX_("ooov",47,4a,b3,49),false);
            	}
}

} // end namespace nme
} // end namespace display
