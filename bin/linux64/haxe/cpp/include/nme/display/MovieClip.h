// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_MovieClip
#define INCLUDED_nme_display_MovieClip

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(nme,display,FrameLabel)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,MovieClip)
HX_DECLARE_CLASS2(nme,display,Sprite)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES MovieClip_obj : public  ::nme::display::Sprite_obj
{
	public:
		typedef  ::nme::display::Sprite_obj super;
		typedef MovieClip_obj OBJ_;
		MovieClip_obj();

	public:
		enum { _hx_ClassId = 0x4c4ee220 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.MovieClip")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.MovieClip"); }
		static ::hx::ObjectPtr< MovieClip_obj > __new();
		static ::hx::ObjectPtr< MovieClip_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MovieClip_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MovieClip",80,e2,ed,b9); }

		int currentFrame;
		bool enabled;
		int framesLoaded;
		int totalFrames;
		int mCurrentFrame;
		int mTotalFrames;
		int get___currentFrame();
		::Dynamic get___currentFrame_dyn();

		int set___currentFrame(int f);
		::Dynamic set___currentFrame_dyn();

		int get___totalFrames();
		::Dynamic get___totalFrames_dyn();

		int set___totalFrames(int f);
		::Dynamic set___totalFrames_dyn();

		 ::haxe::ds::IntMap _hx___frameScripts;
		::Array< ::Dynamic> _hx___currentLabels;
		::String _hx___currentFrameLabel;
		::String _hx___currentLabel;
		void gotoAndPlay( ::Dynamic frame,::String scene);
		::Dynamic gotoAndPlay_dyn();

		void gotoAndStop( ::Dynamic frame,::String scene);
		::Dynamic gotoAndStop_dyn();

		void nextFrame();
		::Dynamic nextFrame_dyn();

		::String nmeGetType();

		void play();
		::Dynamic play_dyn();

		void prevFrame();
		::Dynamic prevFrame_dyn();

		void stop();
		::Dynamic stop_dyn();

		int get_currentFrame();
		::Dynamic get_currentFrame_dyn();

		int get_framesLoaded();
		::Dynamic get_framesLoaded_dyn();

		int get_totalFrames();
		::Dynamic get_totalFrames_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_MovieClip */ 
