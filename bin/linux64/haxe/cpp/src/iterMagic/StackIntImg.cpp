// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_RawImageData
#include <iterMagic/RawImageData.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_336_new,"iterMagic.StackIntImg","new",0xfabaf115,"iterMagic.StackIntImg.new","iterMagic/Img.hx",336,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_341_set,"iterMagic.StackIntImg","set",0xfabebc57,"iterMagic.StackIntImg.set","iterMagic/Img.hx",341,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_358_get,"iterMagic.StackIntImg","get",0xfab5a14b,"iterMagic.StackIntImg.get","iterMagic/Img.hx",358,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_369_zero,"iterMagic.StackIntImg","zero",0x70c68cd3,"iterMagic.StackIntImg.zero","iterMagic/Img.hx",369,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_379_size,"iterMagic.StackIntImg","size",0x6c291e6c,"iterMagic.StackIntImg.size","iterMagic/Img.hx",379,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_386_setRaw,"iterMagic.StackIntImg","setRaw",0x4ddee1d1,"iterMagic.StackIntImg.setRaw","iterMagic/Img.hx",386,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_411_getRaw,"iterMagic.StackIntImg","getRaw",0x81968d5d,"iterMagic.StackIntImg.getRaw","iterMagic/Img.hx",411,0x8899afd5)
namespace iterMagic{

void StackIntImg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_336_new)
HXDLIN( 336)		this->count = 0;
            	}

Dynamic StackIntImg_obj::__CreateEmpty() { return new StackIntImg_obj; }

void *StackIntImg_obj::_hx_vtable = 0;

Dynamic StackIntImg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StackIntImg_obj > _hx_result = new StackIntImg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StackIntImg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4fcb89eb;
}

static ::iterMagic::Iimg_obj _hx_iterMagic_StackIntImg__hx_iterMagic_Iimg= {
	( int (::hx::Object::*)(int,int))&::iterMagic::StackIntImg_obj::set,
	( int (::hx::Object::*)(int))&::iterMagic::StackIntImg_obj::get,
	(  ::Dynamic (::hx::Object::*)(int))&::iterMagic::StackIntImg_obj::zero_e55b6ed4,
	(  ::Dynamic (::hx::Object::*)(int,int))&::iterMagic::StackIntImg_obj::size_a9623fd7,
	(  ::iterMagic::RawImageData (::hx::Object::*)( ::iterMagic::RawImageData))&::iterMagic::StackIntImg_obj::setRaw,
	(  ::iterMagic::RawImageData (::hx::Object::*)())&::iterMagic::StackIntImg_obj::getRaw,
};

 ::Dynamic StackIntImg_obj::size_a9623fd7(int width,int height) {
			return size(width,height);
}

 ::Dynamic StackIntImg_obj::zero_e55b6ed4(int len) {
			return zero(len);
}
void *StackIntImg_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed2c7ccf: return &_hx_iterMagic_StackIntImg__hx_iterMagic_Iimg;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int StackIntImg_obj::set(int index,int value){
            	HX_GC_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_341_set)
HXLINE( 342)		 ::haxe::ds::GenericCell_Int l = this->data->head;
HXLINE( 343)		 ::haxe::ds::GenericCell_Int prev = null();
HXLINE( 344)		{
HXLINE( 344)			int _g = 0;
HXDLIN( 344)			int _g1 = index;
HXDLIN( 344)			while((_g < _g1)){
HXLINE( 344)				_g = (_g + 1);
HXDLIN( 344)				int i = (_g - 1);
HXLINE( 345)				prev = l;
HXLINE( 346)				l = l->next;
            			}
            		}
HXLINE( 348)		if (::hx::IsNull( prev )) {
HXLINE( 349)			this->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,value,l->next);
HXLINE( 350)			l = null();
            		}
            		else {
HXLINE( 352)			prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,value,l->next);
HXLINE( 353)			l = null();
            		}
HXLINE( 355)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(StackIntImg_obj,set,return )

int StackIntImg_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_358_get)
HXLINE( 359)		 ::haxe::ds::GenericCell_Int l = this->data->head;
HXLINE( 360)		 ::haxe::ds::GenericCell_Int prev = l;
HXLINE( 361)		index = (index + 1);
HXLINE( 362)		{
HXLINE( 362)			int _g = 0;
HXDLIN( 362)			int _g1 = index;
HXDLIN( 362)			while((_g < _g1)){
HXLINE( 362)				_g = (_g + 1);
HXDLIN( 362)				int i = (_g - 1);
HXLINE( 363)				prev = l;
HXLINE( 364)				l = l->next;
            			}
            		}
HXLINE( 366)		return prev->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StackIntImg_obj,get,return )

 ::haxe::ds::GenericStack_Int StackIntImg_obj::zero(int len){
            	HX_GC_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_369_zero)
HXLINE( 370)		 ::haxe::ds::GenericStack_Int d = this->data;
HXLINE( 371)		if (::hx::IsNull( d->head )) {
HXLINE( 372)			int _g = 0;
HXDLIN( 372)			int _g1 = len;
HXDLIN( 372)			while((_g < _g1)){
HXLINE( 372)				_g = (_g + 1);
HXDLIN( 372)				int i = (_g - 1);
HXDLIN( 372)				d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            			}
            		}
            		else {
HXLINE( 374)			int _g2 = 0;
HXDLIN( 374)			int _g3 = len;
HXDLIN( 374)			while((_g2 < _g3)){
HXLINE( 374)				_g2 = (_g2 + 1);
HXDLIN( 374)				int i1 = (_g2 - 1);
HXDLIN( 374)				{
HXLINE( 374)					 ::haxe::ds::GenericCell_Int l = this->data->head;
HXDLIN( 374)					 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 374)					{
HXLINE( 374)						int _g4 = 0;
HXDLIN( 374)						int _g5 = i1;
HXDLIN( 374)						while((_g4 < _g5)){
HXLINE( 374)							_g4 = (_g4 + 1);
HXDLIN( 374)							int i2 = (_g4 - 1);
HXDLIN( 374)							prev = l;
HXDLIN( 374)							l = l->next;
            						}
            					}
HXDLIN( 374)					if (::hx::IsNull( prev )) {
HXLINE( 374)						this->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 374)						l = null();
            					}
            					else {
HXLINE( 374)						prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 374)						l = null();
            					}
            				}
            			}
            		}
HXLINE( 376)		return this->data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StackIntImg_obj,zero,return )

 ::haxe::ds::GenericStack_Int StackIntImg_obj::size(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_379_size)
HXLINE( 380)		this->width = width;
HXLINE( 381)		this->height = height;
HXLINE( 382)		this->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXLINE( 383)		this->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXLINE( 384)		int len = this->length;
HXDLIN( 384)		 ::haxe::ds::GenericStack_Int d = this->data;
HXDLIN( 384)		if (::hx::IsNull( d->head )) {
HXLINE( 384)			int _g = 0;
HXDLIN( 384)			int _g1 = len;
HXDLIN( 384)			while((_g < _g1)){
HXLINE( 384)				_g = (_g + 1);
HXDLIN( 384)				int i = (_g - 1);
HXDLIN( 384)				d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            			}
            		}
            		else {
HXLINE( 384)			int _g2 = 0;
HXDLIN( 384)			int _g3 = len;
HXDLIN( 384)			while((_g2 < _g3)){
HXLINE( 384)				_g2 = (_g2 + 1);
HXDLIN( 384)				int i1 = (_g2 - 1);
HXDLIN( 384)				{
HXLINE( 384)					 ::haxe::ds::GenericCell_Int l = this->data->head;
HXDLIN( 384)					 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 384)					{
HXLINE( 384)						int _g4 = 0;
HXDLIN( 384)						int _g5 = i1;
HXDLIN( 384)						while((_g4 < _g5)){
HXLINE( 384)							_g4 = (_g4 + 1);
HXDLIN( 384)							int i2 = (_g4 - 1);
HXDLIN( 384)							prev = l;
HXDLIN( 384)							l = l->next;
            						}
            					}
HXDLIN( 384)					if (::hx::IsNull( prev )) {
HXLINE( 384)						this->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 384)						l = null();
            					}
            					else {
HXLINE( 384)						prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 384)						l = null();
            					}
            				}
            			}
            		}
HXDLIN( 384)		return this->data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(StackIntImg_obj,size,return )

 ::iterMagic::RawImageData StackIntImg_obj::setRaw( ::iterMagic::RawImageData d){
            	HX_GC_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_386_setRaw)
HXLINE( 387)		 ::haxe::ds::GenericStack_Int dataD;
HXDLIN( 387)		if ((d->_hx_getIndex() == 4)) {
HXLINE( 388)			 ::haxe::ds::GenericStack_Int s = d->_hx_getObject(0).StaticCast<  ::haxe::ds::GenericStack_Int >();
HXLINE( 389)			int l = 0;
HXLINE( 390)			{
HXLINE( 390)				 ::Dynamic i = s->iterator();
HXDLIN( 390)				while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 390)					int i1 = ( (int)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 390)					l = (l + 1);
            				}
            			}
HXLINE( 391)			if ((l == this->length)) {
HXLINE( 387)				dataD = s;
            			}
            			else {
HXLINE( 394)				int diff = (l - this->length);
HXLINE( 395)				if ((diff > 0)) {
HXLINE( 396)					HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("StackInt is too long ",fb,dd,56,95) + diff),null(),null()));
            				}
            				else {
HXLINE( 397)					if ((diff < 0)) {
HXLINE( 398)						HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("StackInt is too short ",6d,ad,0e,dc) + diff),null(),null()));
            					}
            				}
HXLINE( 387)				dataD = null();
            			}
            		}
            		else {
HXLINE( 403)			 ::iterMagic::RawImageData notS = d;
HXLINE( 404)			HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("can not accept incorrect RawImageData ",6d,da,1b,a7) + ::Std_obj::string(notS)),null(),null()));
            		}
HXLINE( 407)		if (::hx::IsNotNull( dataD )) {
HXLINE( 407)			this->data = dataD;
            		}
HXLINE( 408)		return d;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StackIntImg_obj,setRaw,return )

 ::iterMagic::RawImageData StackIntImg_obj::getRaw(){
            	HX_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_411_getRaw)
HXDLIN( 411)		return ::iterMagic::RawImageData_obj::RawStackImg(this->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StackIntImg_obj,getRaw,return )


::hx::ObjectPtr< StackIntImg_obj > StackIntImg_obj::__new() {
	::hx::ObjectPtr< StackIntImg_obj > __this = new StackIntImg_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< StackIntImg_obj > StackIntImg_obj::__alloc(::hx::Ctx *_hx_ctx) {
	StackIntImg_obj *__this = (StackIntImg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StackIntImg_obj), true, "iterMagic.StackIntImg"));
	*(void **)__this = StackIntImg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StackIntImg_obj::StackIntImg_obj()
{
}

void StackIntImg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StackIntImg);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void StackIntImg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val StackIntImg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"zero") ) { return ::hx::Val( zero_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"setRaw") ) { return ::hx::Val( setRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRaw") ) { return ::hx::Val( getRaw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StackIntImg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::ds::GenericStack_Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StackIntImg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("count",cf,44,63,4a));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StackIntImg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::GenericStack_Int */ ,(int)offsetof(StackIntImg_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,count),HX_("count",cf,44,63,4a)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StackIntImg_obj_sStaticStorageInfo = 0;
#endif

static ::String StackIntImg_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("count",cf,44,63,4a),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("length",e6,94,07,9f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("zero",28,0f,f1,50),
	HX_("size",c1,a0,53,4c),
	HX_("setRaw",66,63,6e,6f),
	HX_("getRaw",f2,0e,26,a3),
	::String(null()) };

::hx::Class StackIntImg_obj::__mClass;

void StackIntImg_obj::__register()
{
	StackIntImg_obj _hx_dummy;
	StackIntImg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.StackIntImg",a3,c2,a5,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StackIntImg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StackIntImg_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StackIntImg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StackIntImg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
