// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_net_NetStream
#define INCLUDED_nme_net_NetStream

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,media,SoundTransform)
HX_DECLARE_CLASS2(nme,media,StageVideo)
HX_DECLARE_CLASS2(nme,net,NetConnection)
HX_DECLARE_CLASS2(nme,net,NetStream)

namespace nme{
namespace net{


class HXCPP_CLASS_ATTRIBUTES NetStream_obj : public  ::nme::events::EventDispatcher_obj
{
	public:
		typedef  ::nme::events::EventDispatcher_obj super;
		typedef NetStream_obj OBJ_;
		NetStream_obj();

	public:
		enum { _hx_ClassId = 0x5bdd2d02 };

		void __construct( ::nme::net::NetConnection inConnection,::String peerID);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.net.NetStream")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.net.NetStream"); }
		static ::hx::ObjectPtr< NetStream_obj > __new( ::nme::net::NetConnection inConnection,::String peerID);
		static ::hx::ObjectPtr< NetStream_obj > __alloc(::hx::Ctx *_hx_ctx, ::nme::net::NetConnection inConnection,::String peerID);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NetStream_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NetStream",9d,5c,f0,f3); }

		static void __boot();
		static ::String CONNECT_TO_FMS;
		static ::String DIRECT_CONNECTIONS;
		int bytesTotal;
		int bytesLoaded;
		int decodedFrames;
		 ::Dynamic client;
		int objectEncoding;
		::cpp::VirtualArray peerStreams;
		Float time;
		 ::nme::net::NetConnection nmeConnection;
		bool nmeReceiveAudio;
		bool nmeReceiveVideo;
		Float nmeVolume;
		Float nmeSoundPan;
		::String nmeFilename;
		bool nmePaused;
		Float nmeSeek;
		 ::nme::media::StageVideo nmeAttachedVideo;
		void attach( ::nme::net::NetConnection inConnection);
		::Dynamic attach_dyn();

		Float get_time();
		::Dynamic get_time_dyn();

		void seek(Float offset);
		::Dynamic seek_dyn();

		void close();
		::Dynamic close_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		void play(::String inFilename,::hx::Null< Float >  startSeconds, ::Dynamic lenSeconds, ::Dynamic p4, ::Dynamic p5);
		::Dynamic play_dyn();

		void pause();
		::Dynamic pause_dyn();

		void togglePause();
		::Dynamic togglePause_dyn();

		void resume();
		::Dynamic resume_dyn();

		void receiveAudio(bool flag);
		::Dynamic receiveAudio_dyn();

		void receiveVideo(bool flag);
		::Dynamic receiveVideo_dyn();

		bool onPeerConnect( ::nme::net::NetStream subscriber);
		::Dynamic onPeerConnect_dyn();

		int get_bytesTotal();
		::Dynamic get_bytesTotal_dyn();

		int get_bytesLoaded();
		::Dynamic get_bytesLoaded_dyn();

		int get_decodedFrames();
		::Dynamic get_decodedFrames_dyn();

		::cpp::VirtualArray get_peerStreams();
		::Dynamic get_peerStreams_dyn();

		 ::nme::media::SoundTransform get_soundTransform();
		::Dynamic get_soundTransform_dyn();

		 ::nme::media::SoundTransform set_soundTransform( ::nme::media::SoundTransform inTransform);
		::Dynamic set_soundTransform_dyn();

};

} // end namespace nme
} // end namespace net

#endif /* INCLUDED_nme_net_NetStream */ 
