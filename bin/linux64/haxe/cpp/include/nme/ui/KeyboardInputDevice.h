// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_ui_KeyboardInputDevice
#define INCLUDED_nme_ui_KeyboardInputDevice

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_ui_GameInputDevice
#include <nme/ui/GameInputDevice.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,KeyboardEvent)
HX_DECLARE_CLASS2(nme,ui,GameInputDevice)
HX_DECLARE_CLASS2(nme,ui,KeyboardInputDevice)

namespace nme{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES KeyboardInputDevice_obj : public  ::nme::ui::GameInputDevice_obj
{
	public:
		typedef  ::nme::ui::GameInputDevice_obj super;
		typedef KeyboardInputDevice_obj OBJ_;
		KeyboardInputDevice_obj();

	public:
		enum { _hx_ClassId = 0x0e3f6083 };

		void __construct(::String id,::String name, ::haxe::ds::IntMap inButtonKeys);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.ui.KeyboardInputDevice")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.ui.KeyboardInputDevice"); }
		static ::hx::ObjectPtr< KeyboardInputDevice_obj > __new(::String id,::String name, ::haxe::ds::IntMap inButtonKeys);
		static ::hx::ObjectPtr< KeyboardInputDevice_obj > __alloc(::hx::Ctx *_hx_ctx,::String id,::String name, ::haxe::ds::IntMap inButtonKeys);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~KeyboardInputDevice_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KeyboardInputDevice",b9,0e,14,48); }

		static void __boot();
		static ::Array< ::Dynamic> allDevices;
		static void keyDown( ::nme::events::KeyboardEvent ev);
		static ::Dynamic keyDown_dyn();

		static void keyUp( ::nme::events::KeyboardEvent ev);
		static ::Dynamic keyUp_dyn();

		::Array< int > buttonKeys;
		void onKey(int code,bool isDown);
		::Dynamic onKey_dyn();

};

} // end namespace nme
} // end namespace ui

#endif /* INCLUDED_nme_ui_KeyboardInputDevice */ 
