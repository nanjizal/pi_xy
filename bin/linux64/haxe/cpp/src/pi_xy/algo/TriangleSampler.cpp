// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_TriangleSampler
#include <pi_xy/algo/TriangleSampler.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_798c0ada6ef2fcdc_6_get_x0,"pi_xy.algo.TriangleSampler","get_x0",0x8283e6c3,"pi_xy.algo.TriangleSampler.get_x0","pi_xy/algo/TriangleSampler.hx",6,0xccaf2d32)
HX_LOCAL_STACK_FRAME(_hx_pos_798c0ada6ef2fcdc_10_get_x1,"pi_xy.algo.TriangleSampler","get_x1",0x8283e6c4,"pi_xy.algo.TriangleSampler.get_x1","pi_xy/algo/TriangleSampler.hx",10,0xccaf2d32)
HX_LOCAL_STACK_FRAME(_hx_pos_798c0ada6ef2fcdc_14_get_x2,"pi_xy.algo.TriangleSampler","get_x2",0x8283e6c5,"pi_xy.algo.TriangleSampler.get_x2","pi_xy/algo/TriangleSampler.hx",14,0xccaf2d32)
HX_LOCAL_STACK_FRAME(_hx_pos_798c0ada6ef2fcdc_18_get_y0,"pi_xy.algo.TriangleSampler","get_y0",0x8283e7a2,"pi_xy.algo.TriangleSampler.get_y0","pi_xy/algo/TriangleSampler.hx",18,0xccaf2d32)
HX_LOCAL_STACK_FRAME(_hx_pos_798c0ada6ef2fcdc_22_get_y1,"pi_xy.algo.TriangleSampler","get_y1",0x8283e7a3,"pi_xy.algo.TriangleSampler.get_y1","pi_xy/algo/TriangleSampler.hx",22,0xccaf2d32)
HX_LOCAL_STACK_FRAME(_hx_pos_798c0ada6ef2fcdc_26_get_y2,"pi_xy.algo.TriangleSampler","get_y2",0x8283e7a4,"pi_xy.algo.TriangleSampler.get_y2","pi_xy/algo/TriangleSampler.hx",26,0xccaf2d32)
namespace pi_xy{
namespace algo{

void TriangleSampler_obj::__construct() { }

Dynamic TriangleSampler_obj::__CreateEmpty() { return new TriangleSampler_obj; }

void *TriangleSampler_obj::_hx_vtable = 0;

Dynamic TriangleSampler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriangleSampler_obj > _hx_result = new TriangleSampler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TriangleSampler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x16224926;
}

Float TriangleSampler_obj::x0;

Float TriangleSampler_obj::get_x0(){
            	HX_STACKFRAME(&_hx_pos_798c0ada6ef2fcdc_6_get_x0)
HXDLIN(   6)		return ((Float)-0.66446302438867455);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TriangleSampler_obj,get_x0,return )

Float TriangleSampler_obj::x1;

Float TriangleSampler_obj::get_x1(){
            	HX_STACKFRAME(&_hx_pos_798c0ada6ef2fcdc_10_get_x1)
HXDLIN(  10)		return ((Float)-0.664463024388674772);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TriangleSampler_obj,get_x1,return )

Float TriangleSampler_obj::x2;

Float TriangleSampler_obj::get_x2(){
            	HX_STACKFRAME(&_hx_pos_798c0ada6ef2fcdc_14_get_x2)
HXDLIN(  14)		return ((Float)-0.353553390593274064);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TriangleSampler_obj,get_x2,return )

Float TriangleSampler_obj::y0;

Float TriangleSampler_obj::get_y0(){
            	HX_STACKFRAME(&_hx_pos_798c0ada6ef2fcdc_18_get_y0)
HXDLIN(  18)		return ((Float)0.241844762647975359);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TriangleSampler_obj,get_y0,return )

Float TriangleSampler_obj::y1;

Float TriangleSampler_obj::get_y1(){
            	HX_STACKFRAME(&_hx_pos_798c0ada6ef2fcdc_22_get_y1)
HXDLIN(  22)		return ((Float)-0.241844762647974887);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TriangleSampler_obj,get_y1,return )

Float TriangleSampler_obj::y2;

Float TriangleSampler_obj::get_y2(){
            	HX_STACKFRAME(&_hx_pos_798c0ada6ef2fcdc_26_get_y2)
HXDLIN(  26)		return ((Float)-0.612372435695794248);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TriangleSampler_obj,get_y2,return )


TriangleSampler_obj::TriangleSampler_obj()
{
}

bool TriangleSampler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x0") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_x0() : x0 ); return true; }
		if (HX_FIELD_EQ(inName,"x1") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_x1() : x1 ); return true; }
		if (HX_FIELD_EQ(inName,"x2") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_x2() : x2 ); return true; }
		if (HX_FIELD_EQ(inName,"y0") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_y0() : y0 ); return true; }
		if (HX_FIELD_EQ(inName,"y1") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_y1() : y1 ); return true; }
		if (HX_FIELD_EQ(inName,"y2") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_y2() : y2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_x0") ) { outValue = get_x0_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_x1") ) { outValue = get_x1_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_x2") ) { outValue = get_x2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y0") ) { outValue = get_y0_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y1") ) { outValue = get_y1_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y2") ) { outValue = get_y2_dyn(); return true; }
	}
	return false;
}

bool TriangleSampler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x0") ) { x0=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"x1") ) { x1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"y0") ) { y0=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TriangleSampler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo TriangleSampler_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &TriangleSampler_obj::x0,HX_("x0",b8,68,00,00)},
	{::hx::fsFloat,(void *) &TriangleSampler_obj::x1,HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(void *) &TriangleSampler_obj::x2,HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(void *) &TriangleSampler_obj::y0,HX_("y0",97,69,00,00)},
	{::hx::fsFloat,(void *) &TriangleSampler_obj::y1,HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(void *) &TriangleSampler_obj::y2,HX_("y2",99,69,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void TriangleSampler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TriangleSampler_obj::x0,"x0");
	HX_MARK_MEMBER_NAME(TriangleSampler_obj::x1,"x1");
	HX_MARK_MEMBER_NAME(TriangleSampler_obj::x2,"x2");
	HX_MARK_MEMBER_NAME(TriangleSampler_obj::y0,"y0");
	HX_MARK_MEMBER_NAME(TriangleSampler_obj::y1,"y1");
	HX_MARK_MEMBER_NAME(TriangleSampler_obj::y2,"y2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TriangleSampler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TriangleSampler_obj::x0,"x0");
	HX_VISIT_MEMBER_NAME(TriangleSampler_obj::x1,"x1");
	HX_VISIT_MEMBER_NAME(TriangleSampler_obj::x2,"x2");
	HX_VISIT_MEMBER_NAME(TriangleSampler_obj::y0,"y0");
	HX_VISIT_MEMBER_NAME(TriangleSampler_obj::y1,"y1");
	HX_VISIT_MEMBER_NAME(TriangleSampler_obj::y2,"y2");
};

#endif

::hx::Class TriangleSampler_obj::__mClass;

static ::String TriangleSampler_obj_sStaticFields[] = {
	HX_("x0",b8,68,00,00),
	HX_("get_x0",01,00,30,a3),
	HX_("x1",b9,68,00,00),
	HX_("get_x1",02,00,30,a3),
	HX_("x2",ba,68,00,00),
	HX_("get_x2",03,00,30,a3),
	HX_("y0",97,69,00,00),
	HX_("get_y0",e0,00,30,a3),
	HX_("y1",98,69,00,00),
	HX_("get_y1",e1,00,30,a3),
	HX_("y2",99,69,00,00),
	HX_("get_y2",e2,00,30,a3),
	::String(null())
};

void TriangleSampler_obj::__register()
{
	TriangleSampler_obj _hx_dummy;
	TriangleSampler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.TriangleSampler",6c,35,70,5a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TriangleSampler_obj::__GetStatic;
	__mClass->mSetStaticField = &TriangleSampler_obj::__SetStatic;
	__mClass->mMarkFunc = TriangleSampler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TriangleSampler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TriangleSampler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TriangleSampler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriangleSampler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriangleSampler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
