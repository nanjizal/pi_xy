// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_contour_ArrowShape_
#include <pi_xy/triangleGML/triGML/shape/contour/ArrowShape_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69d6cd9bf27014f6_32_new,"pi_xy.triangleGML.triGML.shape.contour.ArrowShape_","new",0xe779d1fc,"pi_xy.triangleGML.triGML.shape.contour.ArrowShape_.new","pi_xy/triangleGML/triGML/shape/contour/ArrowShape_.hx",32,0x680a50b5)
HX_LOCAL_STACK_FRAME(_hx_pos_69d6cd9bf27014f6_45_setParameter,"pi_xy.triangleGML.triGML.shape.contour.ArrowShape_","setParameter",0xe8f2e08b,"pi_xy.triangleGML.triGML.shape.contour.ArrowShape_.setParameter","pi_xy/triangleGML/triGML/shape/contour/ArrowShape_.hx",45,0x680a50b5)
namespace pi_xy{
namespace triangleGML{
namespace triGML{
namespace shape{
namespace contour{

void ArrowShape__obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< bool >  __o_both,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< Float >  __o_arrowWidth,::hx::Null< Float >  __o_arrowHeight){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(-1048576);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		bool both = __o_both.Default(false);
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		Float x1 = __o_x1.Default(((Float)0.));
            		Float y1 = __o_y1.Default(((Float)0.));
            		Float x2 = __o_x2.Default(((Float)0.));
            		Float y2 = __o_y2.Default(((Float)0.));
            		Float arrowWidth = __o_arrowWidth.Default(((Float)0.));
            		Float arrowHeight = __o_arrowHeight.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_69d6cd9bf27014f6_32_new)
HXLINE(  33)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray);
HXLINE(  34)		this->both = both;
HXLINE(  35)		this->flare = flare;
HXLINE(  36)		this->reverseFlare = reverseFlare;
HXLINE(  37)		this->x1 = x1;
HXLINE(  38)		this->y1 = y1;
HXLINE(  39)		this->x2 = x2;
HXLINE(  40)		this->y2 = y2;
HXLINE(  41)		this->arrowHeight = arrowHeight;
HXLINE(  42)		this->arrowWidth = arrowWidth;
            	}

bool ArrowShape__obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4b4b811c) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x4b4b811c;
		}
	} else {
		return inClassId==(int)0x7ff8cec5;
	}
}

void ArrowShape__obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_69d6cd9bf27014f6_45_setParameter)
HXDLIN(  45)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("arrowHeight",90,f2,2a,bd)) ){
HXLINE(  63)			this->arrowHeight = ::Std_obj::parseFloat(value);
HXDLIN(  63)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("arrowWidth",7d,93,05,3e)) ){
HXLINE(  61)			this->arrowWidth = ::Std_obj::parseFloat(value);
HXDLIN(  61)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("both",81,88,1b,41)) ){
HXLINE(  47)			bool _hx_tmp;
HXDLIN(  47)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  47)				_hx_tmp = true;
            			}
            			else {
HXLINE(  47)				_hx_tmp = false;
            			}
HXDLIN(  47)			this->both = _hx_tmp;
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("flare",ce,34,8c,02)) ){
HXLINE(  49)			bool _hx_tmp1;
HXDLIN(  49)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  49)				_hx_tmp1 = true;
            			}
            			else {
HXLINE(  49)				_hx_tmp1 = false;
            			}
HXDLIN(  49)			this->flare = _hx_tmp1;
HXDLIN(  49)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("reverseFlare",4c,10,f1,18)) ){
HXLINE(  51)			bool _hx_tmp2;
HXDLIN(  51)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  51)				_hx_tmp2 = true;
            			}
            			else {
HXLINE(  51)				_hx_tmp2 = false;
            			}
HXDLIN(  51)			this->reverseFlare = _hx_tmp2;
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x1",b9,68,00,00)) ){
HXLINE(  53)			this->x1 = ::Std_obj::parseFloat(value);
HXDLIN(  53)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x2",ba,68,00,00)) ){
HXLINE(  57)			this->x2 = ::Std_obj::parseFloat(value);
HXDLIN(  57)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y1",98,69,00,00)) ){
HXLINE(  55)			this->y1 = ::Std_obj::parseFloat(value);
HXDLIN(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y2",99,69,00,00)) ){
HXLINE(  59)			this->y2 = ::Std_obj::parseFloat(value);
HXDLIN(  59)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  65)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}



ArrowShape__obj::ArrowShape__obj()
{
}

::hx::Val ArrowShape__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"both") ) { return ::hx::Val( both ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flare") ) { return ::hx::Val( flare ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"arrowWidth") ) { return ::hx::Val( arrowWidth ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"arrowHeight") ) { return ::hx::Val( arrowHeight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reverseFlare") ) { return ::hx::Val( reverseFlare ); }
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ArrowShape__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"both") ) { both=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flare") ) { flare=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"arrowWidth") ) { arrowWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"arrowHeight") ) { arrowHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reverseFlare") ) { reverseFlare=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrowShape__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	outFields->push(HX_("both",81,88,1b,41));
	outFields->push(HX_("flare",ce,34,8c,02));
	outFields->push(HX_("reverseFlare",4c,10,f1,18));
	outFields->push(HX_("arrowWidth",7d,93,05,3e));
	outFields->push(HX_("arrowHeight",90,f2,2a,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ArrowShape__obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(ArrowShape__obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(ArrowShape__obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(ArrowShape__obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(ArrowShape__obj,y2),HX_("y2",99,69,00,00)},
	{::hx::fsBool,(int)offsetof(ArrowShape__obj,both),HX_("both",81,88,1b,41)},
	{::hx::fsBool,(int)offsetof(ArrowShape__obj,flare),HX_("flare",ce,34,8c,02)},
	{::hx::fsBool,(int)offsetof(ArrowShape__obj,reverseFlare),HX_("reverseFlare",4c,10,f1,18)},
	{::hx::fsFloat,(int)offsetof(ArrowShape__obj,arrowWidth),HX_("arrowWidth",7d,93,05,3e)},
	{::hx::fsFloat,(int)offsetof(ArrowShape__obj,arrowHeight),HX_("arrowHeight",90,f2,2a,bd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ArrowShape__obj_sStaticStorageInfo = 0;
#endif

static ::String ArrowShape__obj_sMemberFields[] = {
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("both",81,88,1b,41),
	HX_("flare",ce,34,8c,02),
	HX_("reverseFlare",4c,10,f1,18),
	HX_("arrowWidth",7d,93,05,3e),
	HX_("arrowHeight",90,f2,2a,bd),
	HX_("setParameter",a7,f5,ff,6c),
	::String(null()) };

::hx::Class ArrowShape__obj::__mClass;

void ArrowShape__obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.triGML.shape.contour.ArrowShape_",0a,64,ba,8f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ArrowShape__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ArrowShape__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrowShape__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrowShape__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML
} // end namespace shape
} // end namespace contour
