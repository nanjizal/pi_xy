// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Assets
#include <nme/Assets.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_text_Font
#include <nme/text/Font.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c429e73bd1829c7_24_new,"nme.text.Font","new",0x63e3a31a,"nme.text.Font.new","nme/text/Font.hx",24,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_71_get_fontStyle,"nme.text.Font","get_fontStyle",0x13415bf3,"nme.text.Font.get_fontStyle","nme/text/Font.hx",71,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_100_toString,"nme.text.Font","toString",0xdea6dbb2,"nme.text.Font.toString","nme/text/Font.hx",100,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_104_enumerateFonts,"nme.text.Font","enumerateFonts",0x829f5d86,"nme.text.Font.enumerateFonts","nme/text/Font.hx",104,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_115_enumerateFonts,"nme.text.Font","enumerateFonts",0x829f5d86,"nme.text.Font.enumerateFonts","nme/text/Font.hx",115,0xe0f9ad36)
static const ::String _hx_array_data_0d21ce28_6[] = {
	HX_("BOLD",85,49,dc,2b),HX_("BOLD_ITALIC",aa,0d,c2,88),HX_("ITALIC",f0,da,e6,b8),HX_("REGULAR",3c,26,5c,02),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_123_load,"nme.text.Font","load",0x02002a2c,"nme.text.Font.load","nme/text/Font.hx",123,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_129_loadBytes,"nme.text.Font","loadBytes",0xa3a0ee9f,"nme.text.Font.loadBytes","nme/text/Font.hx",129,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_136_registerFontData,"nme.text.Font","registerFontData",0xb307f222,"nme.text.Font.registerFontData","nme/text/Font.hx",136,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_146_registerFont,"nme.text.Font","registerFont",0xbeb0a3d8,"nme.text.Font.registerFont","nme/text/Font.hx",146,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_161_get_useNative,"nme.text.Font","get_useNative",0xbbef6c4f,"nme.text.Font.get_useNative","nme/text/Font.hx",161,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_162_set_useNative,"nme.text.Font","set_useNative",0x00f54e5b,"nme.text.Font.set_useNative","nme/text/Font.hx",162,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_20_boot,"nme.text.Font","boot",0xfb641438,"nme.text.Font.boot","nme/text/Font.hx",20,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_4cec2e5319778313_9_boot,"nme.text.Font","boot",0xfb641438,"nme.text.Font.boot","nme/PrimeLoader.hx",9,0xcf416155)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_171_boot,"nme.text.Font","boot",0xfb641438,"nme.text.Font.boot","nme/text/Font.hx",171,0xe0f9ad36)
HX_LOCAL_STACK_FRAME(_hx_pos_8c429e73bd1829c7_172_boot,"nme.text.Font","boot",0xfb641438,"nme.text.Font.boot","nme/text/Font.hx",172,0xe0f9ad36)
namespace nme{
namespace text{

void Font_obj::__construct(::String __o_inFilename,::String inStyle,::String inType,::String resourceName,::String id){
            		::String inFilename = __o_inFilename;
            		if (::hx::IsNull(__o_inFilename)) inFilename = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_24_new)
HXLINE(  25)		this->knownFontStyle = inStyle;
HXLINE(  27)		if ((inFilename == HX_("",00,00,00,00))) {
HXLINE(  29)			::hx::Class fontClass = ::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  30)			::String name;
HXDLIN(  30)			if (::hx::IsNotNull( resourceName )) {
HXLINE(  30)				name = resourceName;
            			}
            			else {
HXLINE(  31)				if (::Reflect_obj::hasField(fontClass,HX_("resourceName",39,7a,62,90))) {
HXLINE(  30)					name = ( (::String)(::Reflect_obj::field(fontClass,HX_("resourceName",39,7a,62,90))) );
            				}
            				else {
HXLINE(  30)					name = null();
            				}
            			}
HXLINE(  33)			if (::hx::IsNotNull( name )) {
HXLINE(  35)				this->fontName = id;
HXLINE(  36)				 ::nme::text::Font existing = ( ( ::nme::text::Font)(::nme::text::Font_obj::nmeRegisteredFonts->get(this->fontName)) );
HXLINE(  37)				if (::hx::IsNotNull( existing )) {
HXLINE(  39)					this->fontType = existing->fontType;
HXLINE(  40)					this->knownFontStyle = existing->knownFontStyle;
            				}
            				else {
HXLINE(  44)					this->fontType = HX_("EMBEDDED",8a,a9,e7,37);
HXLINE(  45)					 ::nme::utils::ByteArray bytes = ::nme::Assets_obj::getResource(name);
HXLINE(  46)					if (::hx::IsNotNull( bytes )) {
HXLINE(  48)						::nme::text::Font_obj::registerFontData(::hx::ObjectPtr<OBJ_>(this),bytes);
            					}
            					else {
HXLINE(  51)						::haxe::Log_obj::trace((HX_("Could not find font data for ",57,bf,ff,af) + name),::hx::SourceInfo(HX_("nme/text/Font.hx",36,ad,f9,e0),51,HX_("nme.text.Font",28,ce,21,0d),HX_("new",60,d0,53,00)));
            					}
            				}
            			}
            			else {
HXLINE(  56)				::String className = ::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this)));
HXLINE(  57)				this->fontName = ( (::String)(className.split(HX_(".",2e,00,00,00))->pop()) );
HXLINE(  58)				this->knownFontStyle = HX_("REGULAR",3c,26,5c,02);
HXLINE(  59)				this->fontType = HX_("EMBEDDED",8a,a9,e7,37);
            			}
            		}
            		else {
HXLINE(  64)			this->fontName = inFilename;
HXLINE(  65)			::String _hx_tmp;
HXDLIN(  65)			if (::hx::IsNull( inStyle )) {
HXLINE(  65)				_hx_tmp = HX_("REGULAR",3c,26,5c,02);
            			}
            			else {
HXLINE(  65)				_hx_tmp = inStyle;
            			}
HXDLIN(  65)			this->knownFontStyle = _hx_tmp;
HXLINE(  66)			::String _hx_tmp1;
HXDLIN(  66)			if (::hx::IsNull( inType )) {
HXLINE(  66)				_hx_tmp1 = HX_("EMBEDDED",8a,a9,e7,37);
            			}
            			else {
HXLINE(  66)				_hx_tmp1 = inType;
            			}
HXDLIN(  66)			this->fontType = _hx_tmp1;
            		}
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17acd962;
}

::String Font_obj::get_fontStyle(){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_71_get_fontStyle)
HXLINE(  72)		if (::hx::IsNull( this->knownFontStyle )) {
HXLINE(  74)			this->knownFontStyle = HX_("REGULAR",3c,26,5c,02);
HXLINE(  76)			 ::Dynamic details = ::nme::text::Font_obj::freetype_import_font(this->fontName,null(),0,null());
HXLINE(  77)			if (::hx::IsNotNull( details )) {
HXLINE(  79)				bool _hx_tmp;
HXDLIN(  79)				if (( (bool)(details->__Field(HX_("is_bold",3a,d1,84,fd),::hx::paccDynamic)) )) {
HXLINE(  79)					_hx_tmp = ( (bool)(details->__Field(HX_("is_italic",e5,95,88,ab),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(  79)					_hx_tmp = false;
            				}
HXDLIN(  79)				if (_hx_tmp) {
HXLINE(  81)					this->knownFontStyle = HX_("BOLD_ITALIC",aa,0d,c2,88);
            				}
            				else {
HXLINE(  83)					if (( (bool)(details->__Field(HX_("is_bold",3a,d1,84,fd),::hx::paccDynamic)) )) {
HXLINE(  85)						this->knownFontStyle = HX_("BOLD",85,49,dc,2b);
            					}
            					else {
HXLINE(  87)						if (( (bool)(details->__Field(HX_("is_italic",e5,95,88,ab),::hx::paccDynamic)) )) {
HXLINE(  89)							this->knownFontStyle = HX_("ITALIC",f0,da,e6,b8);
            						}
            					}
            				}
            			}
            		}
HXLINE(  94)		return this->knownFontStyle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_fontStyle,return )

::String Font_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_100_toString)
HXDLIN( 100)		return ((((((HX_("{ name=",2d,2a,c0,5c) + this->fontName) + HX_(", style=",60,5b,2d,1d)) + this->knownFontStyle) + HX_(", type=",4f,65,e7,0b)) + this->fontType) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,toString,return )

 ::haxe::ds::StringMap Font_obj::nmeRegisteredFonts;

::Array< ::Dynamic> Font_obj::nmeDeviceFonts;

::Array< ::Dynamic> Font_obj::enumerateFonts(::hx::Null< bool >  __o_enumerateDeviceFonts){
            		bool enumerateDeviceFonts = __o_enumerateDeviceFonts.Default(false);
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_104_enumerateFonts)
HXLINE( 105)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE( 106)		{
HXLINE( 106)			 ::Dynamic key = ::nme::text::Font_obj::nmeRegisteredFonts->keys();
HXDLIN( 106)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 106)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 107)				result->push(::nme::text::Font_obj::nmeRegisteredFonts->get(key1));
            			}
            		}
HXLINE( 109)		if (enumerateDeviceFonts) {
HXLINE( 111)			if (::hx::IsNull( ::nme::text::Font_obj::nmeDeviceFonts )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,styles) HXARGC(2)
            				void _hx_run(::String name,int style){
            					HX_GC_STACKFRAME(&_hx_pos_8c429e73bd1829c7_115_enumerateFonts)
HXLINE( 115)					::Array< ::Dynamic> _hx_tmp = ::nme::text::Font_obj::nmeDeviceFonts;
HXDLIN( 115)					_hx_tmp->push( ::nme::text::Font_obj::__alloc( HX_CTX ,name,styles->__get(style),HX_("DEVICE",96,88,fa,23),null(),null()));
            				}
            				HX_END_LOCAL_FUNC2((void))

HXLINE( 113)				::nme::text::Font_obj::nmeDeviceFonts = ::Array_obj< ::Dynamic>::__new();
HXLINE( 114)				::Array< ::String > styles = ::Array_obj< ::String >::fromData( _hx_array_data_0d21ce28_6,4);
HXLINE( 115)				::nme::text::Font_obj::nme_font_iterate_device_fonts(::hx::DynamicPtr( ::Dynamic(new _hx_Closure_0(styles))));
            			}
HXLINE( 117)			result = result->concat(::nme::text::Font_obj::nmeDeviceFonts);
            		}
HXLINE( 119)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,enumerateFonts,return )

 ::Dynamic Font_obj::load(::String inFilename){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_123_load)
HXLINE( 124)		 ::Dynamic result = ::nme::text::Font_obj::freetype_import_font(inFilename,null(),2048,null());
HXLINE( 125)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,load,return )

 ::Dynamic Font_obj::loadBytes( ::nme::utils::ByteArray inBytes){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_129_loadBytes)
HXLINE( 130)		 ::Dynamic result = ::nme::text::Font_obj::freetype_import_font(HX_("",00,00,00,00),null(),2048,inBytes);
HXLINE( 131)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadBytes,return )

void Font_obj::registerFontData( ::nme::text::Font instance, ::nme::utils::ByteArray inBytes){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_136_registerFontData)
HXLINE( 137)		if (::nme::text::Font_obj::nmeRegisteredFonts->exists(instance->fontName)) {
HXLINE( 138)			return;
            		}
HXLINE( 140)		::nme::text::Font_obj::nme_font_register_font(instance->fontName,inBytes);
HXLINE( 141)		::nme::text::Font_obj::nmeRegisteredFonts->set(instance->fontName,instance);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Font_obj,registerFontData,(void))

void Font_obj::registerFont(::hx::Class font){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_146_registerFont)
HXLINE( 147)		 ::nme::text::Font instance = ( ( ::nme::text::Font)(::Type_obj::createInstance(font,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,null())->init(2,null()))) );
HXLINE( 148)		if (::hx::IsNotNull( instance )) {
HXLINE( 150)			if (::nme::text::Font_obj::nmeRegisteredFonts->exists(instance->fontName)) {
HXLINE( 151)				return;
            			}
HXLINE( 153)			if (::Reflect_obj::hasField(font,HX_("resourceName",39,7a,62,90))) {
HXLINE( 154)				::String instance1 = instance->fontName;
HXDLIN( 154)				 ::nme::utils::ByteArray _hx_tmp = ::nme::utils::ByteArray_obj::fromBytes(::haxe::Resource_obj::getBytes(( (::String)(::Reflect_obj::field(font,HX_("resourceName",39,7a,62,90))) )));
HXDLIN( 154)				::nme::text::Font_obj::nme_font_register_font(instance1,_hx_tmp);
            			}
HXLINE( 156)			::nme::text::Font_obj::nmeRegisteredFonts->set(instance->fontName,instance);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,registerFont,(void))

bool Font_obj::get_useNative(){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_161_get_useNative)
HXDLIN( 161)		return ::nme::text::Font_obj::nme_font_get_use_native();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_useNative,return )

bool Font_obj::set_useNative(bool inVal){
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_162_set_useNative)
HXDLIN( 162)		::nme::text::Font_obj::nme_font_set_use_native(inVal);
HXDLIN( 162)		return inVal;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,set_useNative,return )

::cpp::Function< void  (bool) > Font_obj::nme_font_set_use_native;

::cpp::Function< bool  () > Font_obj::nme_font_get_use_native;

 ::Dynamic Font_obj::freetype_import_font;

 ::Dynamic Font_obj::nme_font_register_font;

::cpp::Function< void  ( ::hx::Object *) > Font_obj::nme_font_iterate_device_fonts;


::hx::ObjectPtr< Font_obj > Font_obj::__new(::String __o_inFilename,::String inStyle,::String inType,::String resourceName,::String id) {
	::hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(__o_inFilename,inStyle,inType,resourceName,id);
	return __this;
}

::hx::ObjectPtr< Font_obj > Font_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_inFilename,::String inStyle,::String inType,::String resourceName,::String id) {
	Font_obj *__this = (Font_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "nme.text.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(__o_inFilename,inStyle,inType,resourceName,id);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(fontName,"fontName");
	HX_MARK_MEMBER_NAME(fontType,"fontType");
	HX_MARK_MEMBER_NAME(knownFontStyle,"knownFontStyle");
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fontName,"fontName");
	HX_VISIT_MEMBER_NAME(fontType,"fontType");
	HX_VISIT_MEMBER_NAME(knownFontStyle,"knownFontStyle");
}

::hx::Val Font_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { return ::hx::Val( fontName ); }
		if (HX_FIELD_EQ(inName,"fontType") ) { return ::hx::Val( fontType ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontStyle") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_fontStyle() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_fontStyle") ) { return ::hx::Val( get_fontStyle_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"knownFontStyle") ) { return ::hx::Val( knownFontStyle ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"useNative") ) { if (inCallProp != ::hx::paccNever) { outValue = ( get_useNative() ); return true; } }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"registerFont") ) { outValue = registerFont_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_useNative") ) { outValue = get_useNative_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_useNative") ) { outValue = set_useNative_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeDeviceFonts") ) { outValue = ( nmeDeviceFonts ); return true; }
		if (HX_FIELD_EQ(inName,"enumerateFonts") ) { outValue = enumerateFonts_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"registerFontData") ) { outValue = registerFontData_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeRegisteredFonts") ) { outValue = ( nmeRegisteredFonts ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"freetype_import_font") ) { outValue = ( freetype_import_font ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_font_register_font") ) { outValue = ( nme_font_register_font ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_font_set_use_native") ) { outValue = ( nme_font_set_use_native ); return true; }
		if (HX_FIELD_EQ(inName,"nme_font_get_use_native") ) { outValue = ( nme_font_get_use_native ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_font_iterate_device_fonts") ) { outValue = ( nme_font_iterate_device_fonts ); return true; }
	}
	return false;
}

::hx::Val Font_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { fontName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontType") ) { fontType=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"knownFontStyle") ) { knownFontStyle=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Font_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"useNative") ) { if (inCallProp != ::hx::paccNever)  ioValue = ( set_useNative(ioValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeDeviceFonts") ) { nmeDeviceFonts=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeRegisteredFonts") ) { nmeRegisteredFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"freetype_import_font") ) { freetype_import_font=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_font_register_font") ) { nme_font_register_font=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_font_set_use_native") ) { nme_font_set_use_native=ioValue.Cast< ::cpp::Function< void  (bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_font_get_use_native") ) { nme_font_get_use_native=ioValue.Cast< ::cpp::Function< bool  () > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_font_iterate_device_fonts") ) { nme_font_iterate_device_fonts=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fontName",ba,8f,7d,cb));
	outFields->push(HX_("fontStyle",e2,48,f9,2f));
	outFields->push(HX_("fontType",29,10,87,cf));
	outFields->push(HX_("knownFontStyle",df,d3,57,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Font_obj,fontName),HX_("fontName",ba,8f,7d,cb)},
	{::hx::fsString,(int)offsetof(Font_obj,fontType),HX_("fontType",29,10,87,cf)},
	{::hx::fsString,(int)offsetof(Font_obj,knownFontStyle),HX_("knownFontStyle",df,d3,57,32)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Font_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Font_obj::nmeRegisteredFonts,HX_("nmeRegisteredFonts",3c,a2,77,80)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Font_obj::nmeDeviceFonts,HX_("nmeDeviceFonts",a8,05,fa,21)},
	{::hx::fsObject /* ::cpp::Function< void  (bool) > */ ,(void *) &Font_obj::nme_font_set_use_native,HX_("nme_font_set_use_native",83,87,ad,eb)},
	{::hx::fsObject /* ::cpp::Function< bool  () > */ ,(void *) &Font_obj::nme_font_get_use_native,HX_("nme_font_get_use_native",0f,9f,8d,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Font_obj::freetype_import_font,HX_("freetype_import_font",90,2e,4f,69)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Font_obj::nme_font_register_font,HX_("nme_font_register_font",54,17,cc,90)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &Font_obj::nme_font_iterate_device_fonts,HX_("nme_font_iterate_device_fonts",f7,28,23,2e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_("fontName",ba,8f,7d,cb),
	HX_("fontType",29,10,87,cf),
	HX_("knownFontStyle",df,d3,57,32),
	HX_("get_fontStyle",b9,1c,5d,f1),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::nmeRegisteredFonts,"nmeRegisteredFonts");
	HX_MARK_MEMBER_NAME(Font_obj::nmeDeviceFonts,"nmeDeviceFonts");
	HX_MARK_MEMBER_NAME(Font_obj::nme_font_set_use_native,"nme_font_set_use_native");
	HX_MARK_MEMBER_NAME(Font_obj::nme_font_get_use_native,"nme_font_get_use_native");
	HX_MARK_MEMBER_NAME(Font_obj::freetype_import_font,"freetype_import_font");
	HX_MARK_MEMBER_NAME(Font_obj::nme_font_register_font,"nme_font_register_font");
	HX_MARK_MEMBER_NAME(Font_obj::nme_font_iterate_device_fonts,"nme_font_iterate_device_fonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::nmeRegisteredFonts,"nmeRegisteredFonts");
	HX_VISIT_MEMBER_NAME(Font_obj::nmeDeviceFonts,"nmeDeviceFonts");
	HX_VISIT_MEMBER_NAME(Font_obj::nme_font_set_use_native,"nme_font_set_use_native");
	HX_VISIT_MEMBER_NAME(Font_obj::nme_font_get_use_native,"nme_font_get_use_native");
	HX_VISIT_MEMBER_NAME(Font_obj::freetype_import_font,"freetype_import_font");
	HX_VISIT_MEMBER_NAME(Font_obj::nme_font_register_font,"nme_font_register_font");
	HX_VISIT_MEMBER_NAME(Font_obj::nme_font_iterate_device_fonts,"nme_font_iterate_device_fonts");
};

#endif

::hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_("nmeRegisteredFonts",3c,a2,77,80),
	HX_("nmeDeviceFonts",a8,05,fa,21),
	HX_("enumerateFonts",00,4a,cc,fc),
	HX_("load",26,9a,b7,47),
	HX_("loadBytes",65,54,cf,d8),
	HX_("registerFontData",1c,71,a4,c3),
	HX_("registerFont",d2,9d,af,bf),
	HX_("get_useNative",15,2d,0b,9a),
	HX_("set_useNative",21,0f,11,df),
	HX_("nme_font_set_use_native",83,87,ad,eb),
	HX_("nme_font_get_use_native",0f,9f,8d,cb),
	HX_("freetype_import_font",90,2e,4f,69),
	HX_("nme_font_register_font",54,17,cc,90),
	HX_("nme_font_iterate_device_fonts",f7,28,23,2e),
	::String(null())
};

void Font_obj::__register()
{
	Font_obj _hx_dummy;
	Font_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.text.Font",28,ce,21,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &Font_obj::__SetStatic;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Font_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_8c429e73bd1829c7_20_boot)
HXDLIN(  20)		nmeRegisteredFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_4cec2e5319778313_9_boot)
HXDLIN(   9)		nme_font_set_use_native = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_font_set_use_native",83,87,ad,eb),HX_("bv",d4,55,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4cec2e5319778313_9_boot)
HXDLIN(   9)		nme_font_get_use_native = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_font_get_use_native",0f,9f,8d,cb),HX_("b",62,00,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_171_boot)
HXDLIN( 171)		freetype_import_font = ::nme::Loader_obj::load(HX_("freetype_import_font",90,2e,4f,69),4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8c429e73bd1829c7_172_boot)
HXDLIN( 172)		nme_font_register_font = ::nme::Loader_obj::load(HX_("nme_font_register_font",54,17,cc,90),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_4cec2e5319778313_9_boot)
HXDLIN(   9)		nme_font_iterate_device_fonts = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_font_iterate_device_fonts",f7,28,23,2e),HX_("ov",27,61,00,00),false);
            	}
}

} // end namespace nme
} // end namespace text
