// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_JoystickEvent
#include <nme/events/JoystickEvent.h>
#endif
#ifndef INCLUDED_nme_ui_GamepadAxis
#include <nme/ui/GamepadAxis.h>
#endif
#ifndef INCLUDED_nme_ui_GamepadButton
#include <nme/ui/GamepadButton.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d19df9dbf42db572_39_new,"nme.events.JoystickEvent","new",0x053bf923,"nme.events.JoystickEvent.new","nme/events/JoystickEvent.hx",39,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_30_get_z,"nme.events.JoystickEvent","get_z",0xbf36c4d4,"nme.events.JoystickEvent.get_z","nme/events/JoystickEvent.hx",30,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_34_get_w,"nme.events.JoystickEvent","get_w",0xbf36c4d1,"nme.events.JoystickEvent.get_w","nme/events/JoystickEvent.hx",34,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_53_clone,"nme.events.JoystickEvent","clone",0x763932e0,"nme.events.JoystickEvent.clone","nme/events/JoystickEvent.hx",53,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_57_toString,"nme.events.JoystickEvent","toString",0xa88d0509,"nme.events.JoystickEvent.toString","nme/events/JoystickEvent.hx",57,0xd91d6dcd)
static const ::String _hx_array_data_c8a22bb1_5[] = {
	HX_("[JoystickEvent type=",c6,08,75,ed),
};
static const ::String _hx_array_data_c8a22bb1_6[] = {
	HX_(" device=",c7,6a,b7,fd),
};
static const ::String _hx_array_data_c8a22bb1_7[] = {
	HX_(" user=",72,fb,9d,75),
};
static const ::String _hx_array_data_c8a22bb1_8[] = {
	HX_(" id=",e2,d7,76,15),
};
static const ::String _hx_array_data_c8a22bb1_9[] = {
	HX_("(",28,00,00,00),
};
static const ::String _hx_array_data_c8a22bb1_10[] = {
	HX_(")",29,00,00,00),
};
static const ::String _hx_array_data_c8a22bb1_11[] = {
	HX_(" x=",e5,b0,18,00),
};
static const ::String _hx_array_data_c8a22bb1_12[] = {
	HX_("]",5d,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_70_idLabel,"nme.events.JoystickEvent","idLabel",0xf4198e5c,"nme.events.JoystickEvent.idLabel","nme/events/JoystickEvent.hx",70,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_9_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",9,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_10_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",10,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_11_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",11,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_12_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",12,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_13_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",13,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_14_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",14,0xd91d6dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_d19df9dbf42db572_15_boot,"nme.events.JoystickEvent","boot",0x8757060f,"nme.events.JoystickEvent.boot","nme/events/JoystickEvent.hx",15,0xd91d6dcd)
namespace nme{
namespace events{

void JoystickEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_device,::hx::Null< int >  __o_id,::hx::Null< int >  __o_userId,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::Array< Float > axis,::hx::Null< bool >  __o_isGamePad){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int device = __o_device.Default(0);
            		int id = __o_id.Default(0);
            		int userId = __o_userId.Default(0);
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		bool isGamePad = __o_isGamePad.Default(false);
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_39_new)
HXLINE(  40)		super::__construct(type,bubbles,cancelable);
HXLINE(  42)		this->device = device;
HXLINE(  43)		this->id = id;
HXLINE(  44)		this->user = userId;
HXLINE(  45)		this->axis = axis;
HXLINE(  46)		this->x = x;
HXLINE(  47)		this->y = y;
HXLINE(  48)		this->isGamePad = isGamePad;
            	}

Dynamic JoystickEvent_obj::__CreateEmpty() { return new JoystickEvent_obj; }

void *JoystickEvent_obj::_hx_vtable = 0;

Dynamic JoystickEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< JoystickEvent_obj > _hx_result = new JoystickEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

bool JoystickEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x536d715f;
	}
}

Float JoystickEvent_obj::get_z(){
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_30_get_z)
HXDLIN(  30)		if (::hx::IsNull( this->axis )) {
HXDLIN(  30)			return ( (Float)(0) );
            		}
            		else {
HXDLIN(  30)			return this->axis->__get(2);
            		}
HXDLIN(  30)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(JoystickEvent_obj,get_z,return )

Float JoystickEvent_obj::get_w(){
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_34_get_w)
HXDLIN(  34)		if (::hx::IsNull( this->axis )) {
HXDLIN(  34)			return ( (Float)(0) );
            		}
            		else {
HXDLIN(  34)			return this->axis->__get(3);
            		}
HXDLIN(  34)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(JoystickEvent_obj,get_w,return )

 ::nme::events::Event JoystickEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_d19df9dbf42db572_53_clone)
HXDLIN(  53)		::String _hx_tmp = this->get_type();
HXDLIN(  53)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  53)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  53)		return  ::nme::events::JoystickEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->device,this->id,this->user,this->x,this->y,this->axis,null());
            	}


::String JoystickEvent_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_d19df9dbf42db572_57_toString)
HXLINE(  58)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  59)		{
HXLINE(  59)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  59)				buf->flush();
            			}
HXDLIN(  59)			if (::hx::IsNull( buf->b )) {
HXLINE(  59)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_5,1);
            			}
            			else {
HXLINE(  59)				buf->b->push(HX_("[JoystickEvent type=",c6,08,75,ed));
            			}
            		}
HXDLIN(  59)		{
HXLINE(  59)			::String x = this->get_type();
HXDLIN(  59)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  59)				buf->flush();
            			}
HXDLIN(  59)			if (::hx::IsNull( buf->b )) {
HXLINE(  59)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE(  59)				::Array< ::String > buf1 = buf->b;
HXDLIN(  59)				buf1->push(::Std_obj::string(x));
            			}
            		}
HXLINE(  60)		{
HXLINE(  60)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  60)				buf->flush();
            			}
HXDLIN(  60)			if (::hx::IsNull( buf->b )) {
HXLINE(  60)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_6,1);
            			}
            			else {
HXLINE(  60)				buf->b->push(HX_(" device=",c7,6a,b7,fd));
            			}
            		}
HXDLIN(  60)		{
HXLINE(  60)			int x1 = this->device;
HXDLIN(  60)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  60)				buf->flush();
            			}
HXDLIN(  60)			if (::hx::IsNull( buf->b )) {
HXLINE(  60)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE(  60)				::Array< ::String > buf2 = buf->b;
HXDLIN(  60)				buf2->push(::Std_obj::string(x1));
            			}
            		}
HXLINE(  61)		{
HXLINE(  61)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  61)				buf->flush();
            			}
HXDLIN(  61)			if (::hx::IsNull( buf->b )) {
HXLINE(  61)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_7,1);
            			}
            			else {
HXLINE(  61)				buf->b->push(HX_(" user=",72,fb,9d,75));
            			}
            		}
HXDLIN(  61)		{
HXLINE(  61)			int x2 = this->user;
HXDLIN(  61)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  61)				buf->flush();
            			}
HXDLIN(  61)			if (::hx::IsNull( buf->b )) {
HXLINE(  61)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            			}
            			else {
HXLINE(  61)				::Array< ::String > buf3 = buf->b;
HXDLIN(  61)				buf3->push(::Std_obj::string(x2));
            			}
            		}
HXLINE(  62)		{
HXLINE(  62)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  62)				buf->flush();
            			}
HXDLIN(  62)			if (::hx::IsNull( buf->b )) {
HXLINE(  62)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_8,1);
            			}
            			else {
HXLINE(  62)				buf->b->push(HX_(" id=",e2,d7,76,15));
            			}
            		}
HXDLIN(  62)		{
HXLINE(  62)			int x3 = this->id;
HXDLIN(  62)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  62)				buf->flush();
            			}
HXDLIN(  62)			if (::hx::IsNull( buf->b )) {
HXLINE(  62)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            			}
            			else {
HXLINE(  62)				::Array< ::String > buf4 = buf->b;
HXDLIN(  62)				buf4->push(::Std_obj::string(x3));
            			}
            		}
HXLINE(  63)		{
HXLINE(  63)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  63)				buf->flush();
            			}
HXDLIN(  63)			if (::hx::IsNull( buf->b )) {
HXLINE(  63)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_9,1);
            			}
            			else {
HXLINE(  63)				buf->b->push(HX_("(",28,00,00,00));
            			}
            		}
HXDLIN(  63)		{
HXLINE(  63)			::String x4 = this->idLabel();
HXDLIN(  63)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  63)				buf->flush();
            			}
HXDLIN(  63)			if (::hx::IsNull( buf->b )) {
HXLINE(  63)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            			}
            			else {
HXLINE(  63)				::Array< ::String > buf5 = buf->b;
HXDLIN(  63)				buf5->push(::Std_obj::string(x4));
            			}
            		}
HXDLIN(  63)		{
HXLINE(  63)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  63)				buf->flush();
            			}
HXDLIN(  63)			if (::hx::IsNull( buf->b )) {
HXLINE(  63)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_10,1);
            			}
            			else {
HXLINE(  63)				buf->b->push(HX_(")",29,00,00,00));
            			}
            		}
HXLINE(  64)		{
HXLINE(  64)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  64)				buf->flush();
            			}
HXDLIN(  64)			if (::hx::IsNull( buf->b )) {
HXLINE(  64)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_11,1);
            			}
            			else {
HXLINE(  64)				buf->b->push(HX_(" x=",e5,b0,18,00));
            			}
            		}
HXDLIN(  64)		{
HXLINE(  64)			Float x5 = this->x;
HXDLIN(  64)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  64)				buf->flush();
            			}
HXDLIN(  64)			if (::hx::IsNull( buf->b )) {
HXLINE(  64)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            			}
            			else {
HXLINE(  64)				::Array< ::String > buf6 = buf->b;
HXDLIN(  64)				buf6->push(::Std_obj::string(x5));
            			}
            		}
HXLINE(  65)		{
HXLINE(  65)			if (::hx::IsNotNull( buf->charBuf )) {
HXLINE(  65)				buf->flush();
            			}
HXDLIN(  65)			if (::hx::IsNull( buf->b )) {
HXLINE(  65)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_c8a22bb1_12,1);
            			}
            			else {
HXLINE(  65)				buf->b->push(HX_("]",5d,00,00,00));
            			}
            		}
HXLINE(  66)		return buf->toString();
            	}


::String JoystickEvent_obj::idLabel(){
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_70_idLabel)
HXLINE(  71)		::String _hx_switch_0 = this->get_type();
            		if (  (_hx_switch_0==HX_("axisMove",52,90,f4,8f)) ){
HXLINE(  78)			::String _hx_tmp = (::nme::ui::GamepadAxis_obj::toString(this->id) + HX_("[x:",dd,75,45,00));
HXDLIN(  78)			return ((((_hx_tmp + this->x) + HX_(" y:",c1,b1,18,00)) + this->y) + HX_("]",5d,00,00,00));
HXDLIN(  78)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("ballMove",b0,5c,fd,37)) ){
HXLINE(  82)			return ((((HX_("BALL_MOVE[x:",ec,e5,cf,65) + this->x) + HX_(" y:",c1,b1,18,00)) + this->y) + HX_("]",5d,00,00,00));
HXDLIN(  82)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("buttonDown",74,67,64,ac)) ){
HXLINE(  74)			return (::nme::ui::GamepadButton_obj::toString(this->id) + HX_("[pressed]",d6,ce,e1,6b));
HXDLIN(  74)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("buttonUp",ed,8c,32,5c)) ){
HXLINE(  76)			return (::nme::ui::GamepadButton_obj::toString(this->id) + HX_("[released]",45,b9,28,ee));
HXDLIN(  76)			goto _hx_goto_13;
            		}
            		if (  (_hx_switch_0==HX_("hatMove",0c,98,0b,ab)) ){
HXLINE(  80)			return ((((HX_("HAT_MOVE[x:",28,b3,e2,4c) + this->x) + HX_(" y:",c1,b1,18,00)) + this->y) + HX_("]",5d,00,00,00));
HXDLIN(  80)			goto _hx_goto_13;
            		}
            		_hx_goto_13:;
HXLINE(  84)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(JoystickEvent_obj,idLabel,return )

::String JoystickEvent_obj::AXIS_MOVE;

::String JoystickEvent_obj::BALL_MOVE;

::String JoystickEvent_obj::BUTTON_DOWN;

::String JoystickEvent_obj::BUTTON_UP;

::String JoystickEvent_obj::HAT_MOVE;

::String JoystickEvent_obj::DEVICE_ADDED;

::String JoystickEvent_obj::DEVICE_REMOVED;


::hx::ObjectPtr< JoystickEvent_obj > JoystickEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_device,::hx::Null< int >  __o_id,::hx::Null< int >  __o_userId,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::Array< Float > axis,::hx::Null< bool >  __o_isGamePad) {
	::hx::ObjectPtr< JoystickEvent_obj > __this = new JoystickEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_device,__o_id,__o_userId,__o_x,__o_y,axis,__o_isGamePad);
	return __this;
}

::hx::ObjectPtr< JoystickEvent_obj > JoystickEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_device,::hx::Null< int >  __o_id,::hx::Null< int >  __o_userId,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::Array< Float > axis,::hx::Null< bool >  __o_isGamePad) {
	JoystickEvent_obj *__this = (JoystickEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(JoystickEvent_obj), true, "nme.events.JoystickEvent"));
	*(void **)__this = JoystickEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_device,__o_id,__o_userId,__o_x,__o_y,axis,__o_isGamePad);
	return __this;
}

JoystickEvent_obj::JoystickEvent_obj()
{
}

void JoystickEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(JoystickEvent);
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(device,"device");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(user,"user");
	HX_MARK_MEMBER_NAME(isGamePad,"isGamePad");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(w,"w");
	 ::nme::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void JoystickEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(device,"device");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(user,"user");
	HX_VISIT_MEMBER_NAME(isGamePad,"isGamePad");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(w,"w");
	 ::nme::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val JoystickEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_z() : z ); }
		if (HX_FIELD_EQ(inName,"w") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_w() : w ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { return ::hx::Val( axis ); }
		if (HX_FIELD_EQ(inName,"user") ) { return ::hx::Val( user ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_z") ) { return ::hx::Val( get_z_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_w") ) { return ::hx::Val( get_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { return ::hx::Val( device ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"idLabel") ) { return ::hx::Val( idLabel_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isGamePad") ) { return ::hx::Val( isGamePad ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val JoystickEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { device=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isGamePad") ) { isGamePad=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void JoystickEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("axis",a1,1c,79,40));
	outFields->push(HX_("device",96,dc,77,71));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("user",4b,92,ad,4d));
	outFields->push(HX_("isGamePad",b7,15,6c,8d));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("w",77,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo JoystickEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(JoystickEvent_obj,axis),HX_("axis",a1,1c,79,40)},
	{::hx::fsInt,(int)offsetof(JoystickEvent_obj,device),HX_("device",96,dc,77,71)},
	{::hx::fsInt,(int)offsetof(JoystickEvent_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsInt,(int)offsetof(JoystickEvent_obj,user),HX_("user",4b,92,ad,4d)},
	{::hx::fsBool,(int)offsetof(JoystickEvent_obj,isGamePad),HX_("isGamePad",b7,15,6c,8d)},
	{::hx::fsFloat,(int)offsetof(JoystickEvent_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(JoystickEvent_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(JoystickEvent_obj,z),HX_("z",7a,00,00,00)},
	{::hx::fsFloat,(int)offsetof(JoystickEvent_obj,w),HX_("w",77,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo JoystickEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &JoystickEvent_obj::AXIS_MOVE,HX_("AXIS_MOVE",af,7a,13,2a)},
	{::hx::fsString,(void *) &JoystickEvent_obj::BALL_MOVE,HX_("BALL_MOVE",91,80,bd,89)},
	{::hx::fsString,(void *) &JoystickEvent_obj::BUTTON_DOWN,HX_("BUTTON_DOWN",0f,01,0b,f3)},
	{::hx::fsString,(void *) &JoystickEvent_obj::BUTTON_UP,HX_("BUTTON_UP",c8,15,81,4b)},
	{::hx::fsString,(void *) &JoystickEvent_obj::HAT_MOVE,HX_("HAT_MOVE",d5,55,50,21)},
	{::hx::fsString,(void *) &JoystickEvent_obj::DEVICE_ADDED,HX_("DEVICE_ADDED",f7,70,3d,b6)},
	{::hx::fsString,(void *) &JoystickEvent_obj::DEVICE_REMOVED,HX_("DEVICE_REMOVED",97,5b,c2,33)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String JoystickEvent_obj_sMemberFields[] = {
	HX_("axis",a1,1c,79,40),
	HX_("device",96,dc,77,71),
	HX_("id",db,5b,00,00),
	HX_("user",4b,92,ad,4d),
	HX_("isGamePad",b7,15,6c,8d),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("w",77,00,00,00),
	HX_("get_z",51,a5,60,91),
	HX_("get_w",4e,a5,60,91),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	HX_("idLabel",19,48,da,0c),
	::String(null()) };

static void JoystickEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::AXIS_MOVE,"AXIS_MOVE");
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::BALL_MOVE,"BALL_MOVE");
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::BUTTON_DOWN,"BUTTON_DOWN");
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::BUTTON_UP,"BUTTON_UP");
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::HAT_MOVE,"HAT_MOVE");
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::DEVICE_ADDED,"DEVICE_ADDED");
	HX_MARK_MEMBER_NAME(JoystickEvent_obj::DEVICE_REMOVED,"DEVICE_REMOVED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JoystickEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::AXIS_MOVE,"AXIS_MOVE");
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::BALL_MOVE,"BALL_MOVE");
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::BUTTON_DOWN,"BUTTON_DOWN");
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::BUTTON_UP,"BUTTON_UP");
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::HAT_MOVE,"HAT_MOVE");
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::DEVICE_ADDED,"DEVICE_ADDED");
	HX_VISIT_MEMBER_NAME(JoystickEvent_obj::DEVICE_REMOVED,"DEVICE_REMOVED");
};

#endif

::hx::Class JoystickEvent_obj::__mClass;

static ::String JoystickEvent_obj_sStaticFields[] = {
	HX_("AXIS_MOVE",af,7a,13,2a),
	HX_("BALL_MOVE",91,80,bd,89),
	HX_("BUTTON_DOWN",0f,01,0b,f3),
	HX_("BUTTON_UP",c8,15,81,4b),
	HX_("HAT_MOVE",d5,55,50,21),
	HX_("DEVICE_ADDED",f7,70,3d,b6),
	HX_("DEVICE_REMOVED",97,5b,c2,33),
	::String(null())
};

void JoystickEvent_obj::__register()
{
	JoystickEvent_obj _hx_dummy;
	JoystickEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.JoystickEvent",b1,2b,a2,c8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = JoystickEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(JoystickEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(JoystickEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< JoystickEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JoystickEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JoystickEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JoystickEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void JoystickEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_9_boot)
HXDLIN(   9)		AXIS_MOVE = HX_("axisMove",52,90,f4,8f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_10_boot)
HXDLIN(  10)		BALL_MOVE = HX_("ballMove",b0,5c,fd,37);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_11_boot)
HXDLIN(  11)		BUTTON_DOWN = HX_("buttonDown",74,67,64,ac);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_12_boot)
HXDLIN(  12)		BUTTON_UP = HX_("buttonUp",ed,8c,32,5c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_13_boot)
HXDLIN(  13)		HAT_MOVE = HX_("hatMove",0c,98,0b,ab);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_14_boot)
HXDLIN(  14)		DEVICE_ADDED = HX_("deviceAdded",4a,08,84,0b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d19df9dbf42db572_15_boot)
HXDLIN(  15)		DEVICE_REMOVED = HX_("deviceRemoved",aa,c9,5b,59);
            	}
}

} // end namespace nme
} // end namespace events
