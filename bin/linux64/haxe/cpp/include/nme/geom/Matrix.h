// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_geom_Matrix
#define INCLUDED_nme_geom_Matrix

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,geom,Matrix)
HX_DECLARE_CLASS2(nme,geom,Point)

namespace nme{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Matrix_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Matrix_obj OBJ_;
		Matrix_obj();

	public:
		enum { _hx_ClassId = 0x7fb44563 };

		void __construct( ::Dynamic in_a, ::Dynamic in_b, ::Dynamic in_c, ::Dynamic in_d, ::Dynamic in_tx, ::Dynamic in_ty);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.geom.Matrix")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.geom.Matrix"); }
		static ::hx::ObjectPtr< Matrix_obj > __new( ::Dynamic in_a, ::Dynamic in_b, ::Dynamic in_c, ::Dynamic in_d, ::Dynamic in_tx, ::Dynamic in_ty);
		static ::hx::ObjectPtr< Matrix_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic in_a, ::Dynamic in_b, ::Dynamic in_c, ::Dynamic in_d, ::Dynamic in_tx, ::Dynamic in_ty);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Matrix_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Matrix",61,aa,5c,f0); }

		Float a;
		Float b;
		Float c;
		Float d;
		Float tx;
		Float ty;
		void copyFrom( ::nme::geom::Matrix src);
		::Dynamic copyFrom_dyn();

		 ::nme::geom::Matrix clone();
		::Dynamic clone_dyn();

		void concat( ::nme::geom::Matrix m);
		::Dynamic concat_dyn();

		void createBox(Float scaleX,Float scaleY, ::Dynamic rotation, ::Dynamic tx, ::Dynamic ty);
		::Dynamic createBox_dyn();

		void createGradientBox(Float in_width,Float in_height, ::Dynamic rotation, ::Dynamic in_tx, ::Dynamic in_ty);
		::Dynamic createGradientBox_dyn();

		 ::nme::geom::Point deltaTransformPoint( ::nme::geom::Point point);
		::Dynamic deltaTransformPoint_dyn();

		void identity();
		::Dynamic identity_dyn();

		 ::nme::geom::Matrix invert();
		::Dynamic invert_dyn();

		 ::nme::geom::Matrix mult( ::nme::geom::Matrix m);
		::Dynamic mult_dyn();

		void rotate(Float inTheta);
		::Dynamic rotate_dyn();

		void scale(Float inSX,Float inSY);
		::Dynamic scale_dyn();

		void setRotation(Float inTheta, ::Dynamic inScale);
		::Dynamic setRotation_dyn();

		void setTo(Float a,Float b,Float c,Float d,Float tx,Float ty);
		::Dynamic setTo_dyn();

		 ::nme::geom::Point transformPoint( ::nme::geom::Point inPos);
		::Dynamic transformPoint_dyn();

		void translate(Float inDX,Float inDY);
		::Dynamic translate_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace nme
} // end namespace geom

#endif /* INCLUDED_nme_geom_Matrix */ 
