// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_FillForm
#include <pi_xy/triangleGML/triGML/FillForm.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_form_ArcForm_
#include <pi_xy/triangleGML/triGML/shape/form/ArcForm_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_976791863cbd463c_33_new,"pi_xy.triangleGML.triGML.shape.form.ArcForm_","new",0xc5d6da1c,"pi_xy.triangleGML.triGML.shape.form.ArcForm_.new","pi_xy/triangleGML/triGML/shape/form/ArcForm_.hx",33,0x13dd7a73)
HX_LOCAL_STACK_FRAME(_hx_pos_976791863cbd463c_45_setParameter,"pi_xy.triangleGML.triGML.shape.form.ArcForm_","setParameter",0x3403d46b,"pi_xy.triangleGML.triGML.shape.form.ArcForm_.setParameter","pi_xy/triangleGML/triGML/shape/form/ArcForm_.hx",45,0x13dd7a73)
namespace pi_xy{
namespace triangleGML{
namespace triGML{
namespace shape{
namespace form{

void ArcForm__obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height,::hx::Null< Float >  __o_startAngle,::hx::Null< Float >  __o_sweepAngle,::String __o_arcType){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int fill = __o_fill.Default(0);
            		Float left = __o_left.Default(((Float)0.));
            		Float top = __o_top.Default(((Float)0.));
            		Float width = __o_width.Default(((Float)1.));
            		Float height = __o_height.Default(((Float)1.));
            		Float startAngle = __o_startAngle.Default(((Float)0.));
            		Float sweepAngle = __o_sweepAngle.Default(((Float)0.));
            		::String arcType = __o_arcType;
            		if (::hx::IsNull(__o_arcType)) arcType = HX_("pie",4c,58,55,00);
            	HX_STACKFRAME(&_hx_pos_976791863cbd463c_33_new)
HXLINE(  34)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill);
HXLINE(  35)		this->left = left;
HXLINE(  36)		this->top = top;
HXLINE(  37)		this->width = width;
HXLINE(  38)		this->height = height;
HXLINE(  39)		this->startAngle = startAngle;
HXLINE(  40)		this->sweepAngle = sweepAngle;
HXLINE(  41)		this->arcType = arcType;
HXLINE(  42)		this->rx = (width / ( (Float)(2) ));
HXLINE(  43)		this->ry = (height / ( (Float)(2) ));
            	}

bool ArcForm__obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x46fd841c) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x46fd841c;
		}
	} else {
		return inClassId==(int)0x4f186619 || inClassId==(int)0x7ff8cec5;
	}
}

void ArcForm__obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_976791863cbd463c_45_setParameter)
HXLINE(  46)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("arcType",2c,ae,de,8e)) ){
HXLINE(  62)			this->arcType = value;
HXDLIN(  62)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(  54)			this->height = ::Std_obj::parseFloat(value);
HXDLIN(  54)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  48)			this->left = ::Std_obj::parseFloat(value);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("startAngle",11,1c,f9,3e)) ){
HXLINE(  56)			Float degree = ::Std_obj::parseFloat(value);
HXLINE(  57)			Float _hx_tmp;
HXDLIN(  57)			if ((degree == 0)) {
HXLINE(  57)				_hx_tmp = ( (Float)(0) );
            			}
            			else {
HXLINE(  57)				_hx_tmp = ((::Math_obj::PI * degree) / ( (Float)(180) ));
            			}
HXDLIN(  57)			this->startAngle = _hx_tmp;
HXLINE(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("sweepAngle",47,a6,92,e6)) ){
HXLINE(  59)			Float degree1 = ::Std_obj::parseFloat(value);
HXLINE(  60)			Float _hx_tmp1;
HXDLIN(  60)			if ((degree1 == 0)) {
HXLINE(  60)				_hx_tmp1 = ( (Float)(0) );
            			}
            			else {
HXLINE(  60)				_hx_tmp1 = ((::Math_obj::PI * degree1) / ( (Float)(180) ));
            			}
HXDLIN(  60)			this->sweepAngle = _hx_tmp1;
HXLINE(  58)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(  50)			this->top = ::Std_obj::parseFloat(value);
HXDLIN(  50)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(  52)			this->width = ::Std_obj::parseFloat(value);
HXDLIN(  52)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  64)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
HXLINE(  66)		this->rx = (this->width / ( (Float)(2) ));
HXLINE(  67)		this->ry = (this->height / ( (Float)(2) ));
            	}



ArcForm__obj::ArcForm__obj()
{
}

void ArcForm__obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArcForm_);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(startAngle,"startAngle");
	HX_MARK_MEMBER_NAME(sweepAngle,"sweepAngle");
	HX_MARK_MEMBER_NAME(arcType,"arcType");
	HX_MARK_MEMBER_NAME(rx,"rx");
	HX_MARK_MEMBER_NAME(ry,"ry");
	 ::pi_xy::triangleGML::triGML::BasicShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ArcForm__obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(startAngle,"startAngle");
	HX_VISIT_MEMBER_NAME(sweepAngle,"sweepAngle");
	HX_VISIT_MEMBER_NAME(arcType,"arcType");
	HX_VISIT_MEMBER_NAME(rx,"rx");
	HX_VISIT_MEMBER_NAME(ry,"ry");
	 ::pi_xy::triangleGML::triGML::BasicShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ArcForm__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rx") ) { return ::hx::Val( rx ); }
		if (HX_FIELD_EQ(inName,"ry") ) { return ::hx::Val( ry ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arcType") ) { return ::hx::Val( arcType ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startAngle") ) { return ::hx::Val( startAngle ); }
		if (HX_FIELD_EQ(inName,"sweepAngle") ) { return ::hx::Val( sweepAngle ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ArcForm__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rx") ) { rx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ry") ) { ry=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arcType") ) { arcType=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startAngle") ) { startAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepAngle") ) { sweepAngle=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArcForm__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("startAngle",11,1c,f9,3e));
	outFields->push(HX_("sweepAngle",47,a6,92,e6));
	outFields->push(HX_("arcType",2c,ae,de,8e));
	outFields->push(HX_("rx",c6,63,00,00));
	outFields->push(HX_("ry",c7,63,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ArcForm__obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,top),HX_("top",95,66,58,00)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,startAngle),HX_("startAngle",11,1c,f9,3e)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,sweepAngle),HX_("sweepAngle",47,a6,92,e6)},
	{::hx::fsString,(int)offsetof(ArcForm__obj,arcType),HX_("arcType",2c,ae,de,8e)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,rx),HX_("rx",c6,63,00,00)},
	{::hx::fsFloat,(int)offsetof(ArcForm__obj,ry),HX_("ry",c7,63,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ArcForm__obj_sStaticStorageInfo = 0;
#endif

static ::String ArcForm__obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("startAngle",11,1c,f9,3e),
	HX_("sweepAngle",47,a6,92,e6),
	HX_("arcType",2c,ae,de,8e),
	HX_("rx",c6,63,00,00),
	HX_("ry",c7,63,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	::String(null()) };

::hx::Class ArcForm__obj::__mClass;

void ArcForm__obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.triGML.shape.form.ArcForm_",2a,dc,a8,dc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ArcForm__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ArcForm__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArcForm__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArcForm__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML
} // end namespace shape
} // end namespace form
