// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_NativeResource
#include <nme/NativeResource.h>
#endif
#ifndef INCLUDED_nme_events_ErrorEvent
#include <nme/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_HTTPStatusEvent
#include <nme/events/HTTPStatusEvent.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IOErrorEvent
#include <nme/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_ProgressEvent
#include <nme/events/ProgressEvent.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif
#ifndef INCLUDED_nme_net_URLLoader
#include <nme/net/URLLoader.h>
#endif
#ifndef INCLUDED_nme_net_URLLoaderDataFormat
#include <nme/net/URLLoaderDataFormat.h>
#endif
#ifndef INCLUDED_nme_net_URLRequest
#include <nme/net/URLRequest.h>
#endif
#ifndef INCLUDED_nme_net_URLRequestHeader
#include <nme/net/URLRequestHeader.h>
#endif
#ifndef INCLUDED_nme_net_URLVariablesBase
#include <nme/net/URLVariablesBase.h>
#endif
#ifndef INCLUDED_nme_net__URLVariables_URLVariables_Impl_
#include <nme/net/_URLVariables/URLVariables_Impl_.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d89a013d80562c4a_54_new,"nme.net.URLLoader","new",0xaa8b73bb,"nme.net.URLLoader.new","nme/net/URLLoader.hx",54,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_68_close,"nme.net.URLLoader","close",0xaa4e87d3,"nme.net.URLLoader.close","nme/net/URLLoader.hx",68,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_84_load,"nme.net.URLLoader","load",0x8e2ee66b,"nme.net.URLLoader.load","nme/net/URLLoader.hx",84,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_132_nmeDataComplete,"nme.net.URLLoader","nmeDataComplete",0x1cba0144,"nme.net.URLLoader.nmeDataComplete","nme/net/URLLoader.hx",132,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_174_onError,"nme.net.URLLoader","onError",0x51235704,"nme.net.URLLoader.onError","nme/net/URLLoader.hx",174,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_181_dispatchHTTPStatus,"nme.net.URLLoader","dispatchHTTPStatus",0xe1fcab19,"nme.net.URLLoader.dispatchHTTPStatus","nme/net/URLLoader.hx",181,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_197_update,"nme.net.URLLoader","update",0xd31c2d8e,"nme.net.URLLoader.update","nme/net/URLLoader.hx",197,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_271_getErrorMessage,"nme.net.URLLoader","getErrorMessage",0x6a383070,"nme.net.URLLoader.getErrorMessage","nme/net/URLLoader.hx",271,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_272_getData,"nme.net.URLLoader","getData",0x5ca1f2bb,"nme.net.URLLoader.getData","nme/net/URLLoader.hx",272,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_274_getString,"nme.net.URLLoader","getString",0x2dbbcba2,"nme.net.URLLoader.getString","nme/net/URLLoader.hx",274,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_278_getCode,"nme.net.URLLoader","getCode",0x5c034dbe,"nme.net.URLLoader.getCode","nme/net/URLLoader.hx",278,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_279_updateLoader,"nme.net.URLLoader","updateLoader",0xf3e78841,"nme.net.URLLoader.updateLoader","nme/net/URLLoader.hx",279,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_280_getHeaders,"nme.net.URLLoader","getHeaders",0x40ab2655,"nme.net.URLLoader.getHeaders","nme/net/URLLoader.hx",280,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_281_createLoader,"nme.net.URLLoader","createLoader",0x16792174,"nme.net.URLLoader.createLoader","nme/net/URLLoader.hx",281,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_282_getCookies,"nme.net.URLLoader","getCookies",0x84910b5e,"nme.net.URLLoader.getCookies","nme/net/URLLoader.hx",282,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_286_disposeHandler,"nme.net.URLLoader","disposeHandler",0xbdc06d70,"nme.net.URLLoader.disposeHandler","nme/net/URLLoader.hx",286,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_73_hasActive,"nme.net.URLLoader","hasActive",0xf7640e5b,"nme.net.URLLoader.hasActive","nme/net/URLLoader.hx",73,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_79_initialize,"nme.net.URLLoader","initialize",0x7afc7f55,"nme.net.URLLoader.initialize","nme/net/URLLoader.hx",79,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_152_nmeLoadPending,"nme.net.URLLoader","nmeLoadPending",0x8fb3a5b0,"nme.net.URLLoader.nmeLoadPending","nme/net/URLLoader.hx",152,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_157_nmePollData,"nme.net.URLLoader","nmePollData",0xd608cbca,"nme.net.URLLoader.nmePollData","nme/net/URLLoader.hx",157,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_283_pollLoaders,"nme.net.URLLoader","pollLoaders",0xa1dd3edc,"nme.net.URLLoader.pollLoaders","nme/net/URLLoader.hx",283,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_42_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",42,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_44_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",44,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_45_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",45,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_46_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",46,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_47_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",47,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_48_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",48,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_290_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",290,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_291_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",291,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_292_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",292,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_293_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",293,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_294_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",294,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_295_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",295,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_296_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",296,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_297_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",297,0xa395eb97)
HX_LOCAL_STACK_FRAME(_hx_pos_d89a013d80562c4a_298_boot,"nme.net.URLLoader","boot",0x8792d077,"nme.net.URLLoader.boot","nme/net/URLLoader.hx",298,0xa395eb97)
namespace nme{
namespace net{

void URLLoader_obj::__construct( ::nme::net::URLRequest request){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_54_new)
HXLINE(  55)		super::__construct(null());
HXLINE(  57)		this->nmeHandle = null();
HXLINE(  58)		this->bytesLoaded = 0;
HXLINE(  59)		this->bytesTotal = -1;
HXLINE(  60)		this->state = 0;
HXLINE(  61)		this->dataFormat = ::nme::net::URLLoaderDataFormat_obj::TEXT_dyn();
HXLINE(  63)		if (::hx::IsNotNull( request )) {
HXLINE(  64)			this->load(request);
            		}
            	}

Dynamic URLLoader_obj::__CreateEmpty() { return new URLLoader_obj; }

void *URLLoader_obj::_hx_vtable = 0;

Dynamic URLLoader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< URLLoader_obj > _hx_result = new URLLoader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool URLLoader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x58354643;
	}
}

void URLLoader_obj::close(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_68_close)
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,close,(void))

void URLLoader_obj::load( ::nme::net::URLRequest request){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_84_load)
HXLINE(  85)		this->state = 1;
HXLINE(  86)		::String pref = request->url.substr(0,7);
HXLINE(  88)		bool _hx_tmp;
HXDLIN(  88)		if ((pref != HX_("http://",52,75,cd,5a))) {
HXLINE(  88)			_hx_tmp = (pref != HX_("https:/",60,bf,f8,5a));
            		}
            		else {
HXLINE(  88)			_hx_tmp = false;
            		}
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  90)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  92)				 ::nme::utils::ByteArray bytes = ::nme::utils::ByteArray_obj::readFile(request->url);
HXLINE(  94)				if (::hx::IsNull( bytes )) {
HXLINE(  95)					HX_STACK_DO_THROW(((HX_("Could not open file \"",48,89,1a,4a) + request->url) + HX_("\"",22,00,00,00)));
            				}
HXLINE(  97)				switch((int)(this->dataFormat->_hx_getIndex())){
            					case (int)1: {
HXLINE( 100)						this->data = bytes->asString();
            					}
            					break;
            					case (int)2: {
HXLINE( 102)						this->data = ::nme::net::_URLVariables::URLVariables_Impl__obj::_new(bytes->asString());
            					}
            					break;
            					default:{
HXLINE( 104)						this->data = bytes;
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 108)					{
HXLINE( 108)						null();
            					}
HXDLIN( 108)					 ::Dynamic e = _g;
HXLINE( 110)					this->onError(( (::String)(e) ));
HXLINE( 111)					return;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 114)			this->nmeDataComplete();
            		}
            		else {
HXLINE( 118)			request->nmePrepare();
HXLINE( 119)			this->nmeHandle = this->createLoader(request);
HXLINE( 121)			if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 122)				this->onError(HX_("Could not open URL",45,5d,35,ab));
            			}
            			else {
HXLINE( 126)				::nme::net::URLLoader_obj::activeLoaders->push(::hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLLoader_obj,load,(void))

void URLLoader_obj::nmeDataComplete(){
            	HX_GC_STACKFRAME(&_hx_pos_d89a013d80562c4a_132_nmeDataComplete)
HXLINE( 133)		::nme::net::URLLoader_obj::activeLoaders->remove(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 135)		if (::hx::IsNotNull( this->nmeOnComplete )) {
HXLINE( 137)			if (( (bool)(this->nmeOnComplete(this->data)) )) {
HXLINE( 138)				this->dispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            			}
            			else {
HXLINE( 140)				this->DispatchIOErrorEvent();
            			}
            		}
            		else {
HXLINE( 145)			this->dispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            		}
HXLINE( 147)		this->disposeHandler();
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,nmeDataComplete,(void))

void URLLoader_obj::onError(::String msg){
            	HX_GC_STACKFRAME(&_hx_pos_d89a013d80562c4a_174_onError)
HXLINE( 175)		::nme::net::URLLoader_obj::activeLoaders->remove(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 176)		this->dispatchEvent( ::nme::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,msg,null()));
HXLINE( 177)		this->disposeHandler();
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLLoader_obj,onError,(void))

void URLLoader_obj::dispatchHTTPStatus(int code){
            	HX_GC_STACKFRAME(&_hx_pos_d89a013d80562c4a_181_dispatchHTTPStatus)
HXLINE( 182)		 ::nme::events::HTTPStatusEvent evt =  ::nme::events::HTTPStatusEvent_obj::__alloc( HX_CTX ,HX_("httpStatus",da,4c,74,0a),false,false,code);
HXLINE( 183)		::Array< ::String > headers = this->getHeaders();
HXLINE( 185)		{
HXLINE( 185)			int _g = 0;
HXDLIN( 185)			while((_g < headers->length)){
HXLINE( 185)				::String h = headers->__get(_g);
HXDLIN( 185)				_g = (_g + 1);
HXLINE( 187)				int idx = h.indexOf(HX_(": ",a6,32,00,00),null());
HXLINE( 188)				if ((idx > 0)) {
HXLINE( 189)					::Array< ::Dynamic> evt1 = evt->responseHeaders;
HXDLIN( 189)					::String _hx_tmp = h.substr(0,idx);
HXDLIN( 189)					evt1->push( ::nme::net::URLRequestHeader_obj::__alloc( HX_CTX ,_hx_tmp,h.substr((idx + 2),((h.length - idx) - 4))));
            				}
            			}
            		}
HXLINE( 192)		this->dispatchEvent(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLLoader_obj,dispatchHTTPStatus,(void))

void URLLoader_obj::update(){
            	HX_GC_STACKFRAME(&_hx_pos_d89a013d80562c4a_197_update)
HXDLIN( 197)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 199)			int old_loaded = this->bytesLoaded;
HXLINE( 200)			int old_total = this->bytesTotal;
HXLINE( 201)			this->updateLoader();
HXLINE( 203)			bool _hx_tmp;
HXDLIN( 203)			if ((old_total < 0)) {
HXLINE( 203)				_hx_tmp = (this->bytesTotal > 0);
            			}
            			else {
HXLINE( 203)				_hx_tmp = false;
            			}
HXDLIN( 203)			if (_hx_tmp) {
HXLINE( 205)				this->dispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("open",ca,03,b4,49),null(),null()));
            			}
HXLINE( 208)			bool _hx_tmp1;
HXDLIN( 208)			if ((this->bytesTotal > 0)) {
HXLINE( 208)				_hx_tmp1 = (this->bytesLoaded != old_loaded);
            			}
            			else {
HXLINE( 208)				_hx_tmp1 = false;
            			}
HXDLIN( 208)			if (_hx_tmp1) {
HXLINE( 210)				this->dispatchEvent( ::nme::events::ProgressEvent_obj::__alloc( HX_CTX ,HX_("progress",ad,f7,2a,86),false,false,this->bytesLoaded,this->bytesTotal));
            			}
HXLINE( 213)			int code = this->getCode();
HXLINE( 215)			if ((this->state == 3)) {
HXLINE( 217)				this->dispatchHTTPStatus(code);
HXLINE( 219)				if ((code < 400)) {
HXLINE( 222)					switch((int)(this->dataFormat->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE( 225)							this->data = this->getString();
            						}
            						break;
            						default:{
HXLINE( 227)							this->data = this->getData();
            						}
            					}
HXLINE( 229)					this->nmeDataComplete();
            				}
            				else {
HXLINE( 235)					 ::nme::events::IOErrorEvent evt =  ::nme::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,(HX_("HTTP status code ",7d,f2,80,e8) + ::Std_obj::string(code)),code);
HXLINE( 236)					this->dispatchEvent(evt);
HXLINE( 237)					this->disposeHandler();
            				}
            			}
            			else {
HXLINE( 241)				if ((this->state == 4)) {
HXLINE( 243)					this->dispatchHTTPStatus(code);
HXLINE( 245)					 ::nme::events::IOErrorEvent evt1 =  ::nme::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,this->getErrorMessage(),code);
HXLINE( 247)					this->dispatchEvent(evt1);
HXLINE( 248)					this->disposeHandler();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,update,(void))

::String URLLoader_obj::getErrorMessage(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_271_getErrorMessage)
HXDLIN( 271)		return ( (::String)(::nme::net::URLLoader_obj::nme_curl_get_error_message(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,getErrorMessage,return )

 ::nme::utils::ByteArray URLLoader_obj::getData(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_272_getData)
HXDLIN( 272)		return ( ( ::nme::utils::ByteArray)(::nme::net::URLLoader_obj::nme_curl_get_data(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,getData,return )

::String URLLoader_obj::getString(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_274_getString)
HXLINE( 275)		 ::nme::utils::ByteArray bytes = this->getData();
HXLINE( 276)		if (::hx::IsNull( bytes )) {
HXLINE( 276)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 276)			return bytes->asString();
            		}
HXDLIN( 276)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,getString,return )

int URLLoader_obj::getCode(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_278_getCode)
HXDLIN( 278)		return ( (int)(::nme::net::URLLoader_obj::nme_curl_get_code(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,getCode,return )

void URLLoader_obj::updateLoader(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_279_updateLoader)
HXDLIN( 279)		::nme::net::URLLoader_obj::nme_curl_update_loader(this->nmeHandle,::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,updateLoader,(void))

::Array< ::String > URLLoader_obj::getHeaders(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_280_getHeaders)
HXDLIN( 280)		return ( (::Array< ::String >)(::nme::net::URLLoader_obj::nme_curl_get_headers(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,getHeaders,return )

 ::Dynamic URLLoader_obj::createLoader( ::nme::net::URLRequest request){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_281_createLoader)
HXDLIN( 281)		return ::nme::net::URLLoader_obj::nme_curl_create(request);
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLLoader_obj,createLoader,return )

::Array< ::String > URLLoader_obj::getCookies(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_282_getCookies)
HXDLIN( 282)		return ( (::Array< ::String >)(::nme::net::URLLoader_obj::nme_curl_get_cookies(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,getCookies,return )

void URLLoader_obj::disposeHandler(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_286_disposeHandler)
HXDLIN( 286)		if (::hx::IsNotNull( this->nmeHandle )) {
HXDLIN( 286)			::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(this->nmeHandle));
HXDLIN( 286)			this->nmeHandle = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,disposeHandler,(void))

 ::haxe::ds::List URLLoader_obj::activeLoaders;

int URLLoader_obj::urlInvalid;

int URLLoader_obj::urlInit;

int URLLoader_obj::urlLoading;

int URLLoader_obj::urlComplete;

int URLLoader_obj::urlError;

bool URLLoader_obj::hasActive(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_73_hasActive)
HXDLIN(  73)		return !(::nme::net::URLLoader_obj::activeLoaders->isEmpty());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,hasActive,return )

void URLLoader_obj::initialize(::String inCACertFilePath){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_79_initialize)
HXDLIN(  79)		::nme::net::URLLoader_obj::nme_curl_initialize(inCACertFilePath);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(URLLoader_obj,initialize,(void))

bool URLLoader_obj::nmeLoadPending(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_152_nmeLoadPending)
HXDLIN( 152)		return !(::nme::net::URLLoader_obj::activeLoaders->isEmpty());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,nmeLoadPending,return )

void URLLoader_obj::nmePollData(){
            	HX_GC_STACKFRAME(&_hx_pos_d89a013d80562c4a_157_nmePollData)
HXDLIN( 157)		if (!(::nme::net::URLLoader_obj::activeLoaders->isEmpty())) {
HXLINE( 159)			::nme::net::URLLoader_obj::pollLoaders();
HXLINE( 161)			 ::haxe::ds::List oldLoaders = ::nme::net::URLLoader_obj::activeLoaders;
HXLINE( 162)			::nme::net::URLLoader_obj::activeLoaders =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 164)			{
HXLINE( 164)				 ::haxe::ds::_List::ListNode _g_head = oldLoaders->h;
HXDLIN( 164)				while(::hx::IsNotNull( _g_head )){
HXLINE( 164)					 ::nme::net::URLLoader val = ( ( ::nme::net::URLLoader)(_g_head->item) );
HXDLIN( 164)					_g_head = _g_head->next;
HXDLIN( 164)					 ::nme::net::URLLoader loader = val;
HXLINE( 166)					loader->update();
HXLINE( 167)					if ((loader->state == 2)) {
HXLINE( 168)						::nme::net::URLLoader_obj::activeLoaders->push(loader);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,nmePollData,(void))

void URLLoader_obj::pollLoaders(){
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_283_pollLoaders)
HXDLIN( 283)		::nme::net::URLLoader_obj::nme_curl_process_loaders();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(URLLoader_obj,pollLoaders,(void))

 ::Dynamic URLLoader_obj::nme_curl_create;

 ::Dynamic URLLoader_obj::nme_curl_process_loaders;

 ::Dynamic URLLoader_obj::nme_curl_update_loader;

 ::Dynamic URLLoader_obj::nme_curl_get_code;

 ::Dynamic URLLoader_obj::nme_curl_get_error_message;

 ::Dynamic URLLoader_obj::nme_curl_get_data;

 ::Dynamic URLLoader_obj::nme_curl_get_cookies;

 ::Dynamic URLLoader_obj::nme_curl_get_headers;

 ::Dynamic URLLoader_obj::nme_curl_initialize;


::hx::ObjectPtr< URLLoader_obj > URLLoader_obj::__new( ::nme::net::URLRequest request) {
	::hx::ObjectPtr< URLLoader_obj > __this = new URLLoader_obj();
	__this->__construct(request);
	return __this;
}

::hx::ObjectPtr< URLLoader_obj > URLLoader_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::net::URLRequest request) {
	URLLoader_obj *__this = (URLLoader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(URLLoader_obj), true, "nme.net.URLLoader"));
	*(void **)__this = URLLoader_obj::_hx_vtable;
	__this->__construct(request);
	return __this;
}

URLLoader_obj::URLLoader_obj()
{
}

void URLLoader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(URLLoader);
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(dataFormat,"dataFormat");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(nmeOnComplete,"nmeOnComplete");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void URLLoader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(dataFormat,"dataFormat");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(nmeOnComplete,"nmeOnComplete");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val URLLoader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { return ::hx::Val( onError_dyn() ); }
		if (HX_FIELD_EQ(inName,"getData") ) { return ::hx::Val( getData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCode") ) { return ::hx::Val( getCode_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"getString") ) { return ::hx::Val( getString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return ::hx::Val( bytesTotal ); }
		if (HX_FIELD_EQ(inName,"dataFormat") ) { return ::hx::Val( dataFormat ); }
		if (HX_FIELD_EQ(inName,"getHeaders") ) { return ::hx::Val( getHeaders_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCookies") ) { return ::hx::Val( getCookies_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return ::hx::Val( bytesLoaded ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateLoader") ) { return ::hx::Val( updateLoader_dyn() ); }
		if (HX_FIELD_EQ(inName,"createLoader") ) { return ::hx::Val( createLoader_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"nmeOnComplete") ) { return ::hx::Val( nmeOnComplete ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"disposeHandler") ) { return ::hx::Val( disposeHandler_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeDataComplete") ) { return ::hx::Val( nmeDataComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"getErrorMessage") ) { return ::hx::Val( getErrorMessage_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"dispatchHTTPStatus") ) { return ::hx::Val( dispatchHTTPStatus_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool URLLoader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"hasActive") ) { outValue = hasActive_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nmePollData") ) { outValue = nmePollData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pollLoaders") ) { outValue = pollLoaders_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"activeLoaders") ) { outValue = ( activeLoaders ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeLoadPending") ) { outValue = nmeLoadPending_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nme_curl_create") ) { outValue = ( nme_curl_create ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nme_curl_get_code") ) { outValue = ( nme_curl_get_code ); return true; }
		if (HX_FIELD_EQ(inName,"nme_curl_get_data") ) { outValue = ( nme_curl_get_data ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_curl_initialize") ) { outValue = ( nme_curl_initialize ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_curl_get_cookies") ) { outValue = ( nme_curl_get_cookies ); return true; }
		if (HX_FIELD_EQ(inName,"nme_curl_get_headers") ) { outValue = ( nme_curl_get_headers ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_curl_update_loader") ) { outValue = ( nme_curl_update_loader ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_curl_process_loaders") ) { outValue = ( nme_curl_process_loaders ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_curl_get_error_message") ) { outValue = ( nme_curl_get_error_message ); return true; }
	}
	return false;
}

::hx::Val URLLoader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataFormat") ) { dataFormat=inValue.Cast<  ::nme::net::URLLoaderDataFormat >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"nmeOnComplete") ) { nmeOnComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool URLLoader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"activeLoaders") ) { activeLoaders=ioValue.Cast<  ::haxe::ds::List >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nme_curl_create") ) { nme_curl_create=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nme_curl_get_code") ) { nme_curl_get_code=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_curl_get_data") ) { nme_curl_get_data=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_curl_initialize") ) { nme_curl_initialize=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_curl_get_cookies") ) { nme_curl_get_cookies=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_curl_get_headers") ) { nme_curl_get_headers=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_curl_update_loader") ) { nme_curl_update_loader=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_curl_process_loaders") ) { nme_curl_process_loaders=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_curl_get_error_message") ) { nme_curl_get_error_message=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void URLLoader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytesLoaded",d0,66,ca,99));
	outFields->push(HX_("bytesTotal",59,57,da,45));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("dataFormat",01,55,30,e9));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("state",11,76,0b,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo URLLoader_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(URLLoader_obj,bytesLoaded),HX_("bytesLoaded",d0,66,ca,99)},
	{::hx::fsInt,(int)offsetof(URLLoader_obj,bytesTotal),HX_("bytesTotal",59,57,da,45)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(URLLoader_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsObject /*  ::nme::net::URLLoaderDataFormat */ ,(int)offsetof(URLLoader_obj,dataFormat),HX_("dataFormat",01,55,30,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(URLLoader_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsInt,(int)offsetof(URLLoader_obj,state),HX_("state",11,76,0b,84)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(URLLoader_obj,nmeOnComplete),HX_("nmeOnComplete",de,c3,27,23)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo URLLoader_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::List */ ,(void *) &URLLoader_obj::activeLoaders,HX_("activeLoaders",da,13,b9,c0)},
	{::hx::fsInt,(void *) &URLLoader_obj::urlInvalid,HX_("urlInvalid",48,b3,6a,fb)},
	{::hx::fsInt,(void *) &URLLoader_obj::urlInit,HX_("urlInit",1f,76,d9,f5)},
	{::hx::fsInt,(void *) &URLLoader_obj::urlLoading,HX_("urlLoading",cd,a6,15,c9)},
	{::hx::fsInt,(void *) &URLLoader_obj::urlComplete,HX_("urlComplete",48,6f,22,de)},
	{::hx::fsInt,(void *) &URLLoader_obj::urlError,HX_("urlError",d9,3d,7f,dd)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_create,HX_("nme_curl_create",76,f9,41,86)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_process_loaders,HX_("nme_curl_process_loaders",36,9a,79,04)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_update_loader,HX_("nme_curl_update_loader",8f,a7,31,4c)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_get_code,HX_("nme_curl_get_code",b0,11,57,ab)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_get_error_message,HX_("nme_curl_get_error_message",2d,5a,0d,7a)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_get_data,HX_("nme_curl_get_data",ad,b6,f5,ab)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_get_cookies,HX_("nme_curl_get_cookies",ac,ca,ae,cf)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_get_headers,HX_("nme_curl_get_headers",a3,e5,c8,8b)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLLoader_obj::nme_curl_initialize,HX_("nme_curl_initialize",ca,88,81,b7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String URLLoader_obj_sMemberFields[] = {
	HX_("bytesLoaded",d0,66,ca,99),
	HX_("bytesTotal",59,57,da,45),
	HX_("data",2a,56,63,42),
	HX_("dataFormat",01,55,30,e9),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("state",11,76,0b,84),
	HX_("nmeOnComplete",de,c3,27,23),
	HX_("close",b8,17,63,48),
	HX_("load",26,9a,b7,47),
	HX_("nmeDataComplete",69,41,ad,20),
	HX_("onError",29,6a,67,09),
	HX_("dispatchHTTPStatus",14,50,06,fe),
	HX_("update",09,86,05,87),
	HX_("getErrorMessage",95,70,2b,6e),
	HX_("getData",e0,05,e6,14),
	HX_("getString",07,b2,86,8d),
	HX_("getCode",e3,60,47,14),
	HX_("updateLoader",fc,ee,32,58),
	HX_("getHeaders",50,d8,69,b2),
	HX_("createLoader",2f,88,c4,7a),
	HX_("getCookies",59,bd,4f,f6),
	HX_("disposeHandler",eb,38,bf,58),
	::String(null()) };

static void URLLoader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(URLLoader_obj::activeLoaders,"activeLoaders");
	HX_MARK_MEMBER_NAME(URLLoader_obj::urlInvalid,"urlInvalid");
	HX_MARK_MEMBER_NAME(URLLoader_obj::urlInit,"urlInit");
	HX_MARK_MEMBER_NAME(URLLoader_obj::urlLoading,"urlLoading");
	HX_MARK_MEMBER_NAME(URLLoader_obj::urlComplete,"urlComplete");
	HX_MARK_MEMBER_NAME(URLLoader_obj::urlError,"urlError");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_create,"nme_curl_create");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_process_loaders,"nme_curl_process_loaders");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_update_loader,"nme_curl_update_loader");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_get_code,"nme_curl_get_code");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_get_error_message,"nme_curl_get_error_message");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_get_data,"nme_curl_get_data");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_get_cookies,"nme_curl_get_cookies");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_get_headers,"nme_curl_get_headers");
	HX_MARK_MEMBER_NAME(URLLoader_obj::nme_curl_initialize,"nme_curl_initialize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void URLLoader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(URLLoader_obj::activeLoaders,"activeLoaders");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::urlInvalid,"urlInvalid");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::urlInit,"urlInit");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::urlLoading,"urlLoading");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::urlComplete,"urlComplete");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::urlError,"urlError");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_create,"nme_curl_create");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_process_loaders,"nme_curl_process_loaders");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_update_loader,"nme_curl_update_loader");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_get_code,"nme_curl_get_code");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_get_error_message,"nme_curl_get_error_message");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_get_data,"nme_curl_get_data");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_get_cookies,"nme_curl_get_cookies");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_get_headers,"nme_curl_get_headers");
	HX_VISIT_MEMBER_NAME(URLLoader_obj::nme_curl_initialize,"nme_curl_initialize");
};

#endif

::hx::Class URLLoader_obj::__mClass;

static ::String URLLoader_obj_sStaticFields[] = {
	HX_("activeLoaders",da,13,b9,c0),
	HX_("urlInvalid",48,b3,6a,fb),
	HX_("urlInit",1f,76,d9,f5),
	HX_("urlLoading",cd,a6,15,c9),
	HX_("urlComplete",48,6f,22,de),
	HX_("urlError",d9,3d,7f,dd),
	HX_("hasActive",c0,f4,2e,57),
	HX_("initialize",50,31,bb,ec),
	HX_("nmeLoadPending",2b,71,b2,2a),
	HX_("nmePollData",6f,d5,25,eb),
	HX_("pollLoaders",81,48,fa,b6),
	HX_("nme_curl_create",76,f9,41,86),
	HX_("nme_curl_process_loaders",36,9a,79,04),
	HX_("nme_curl_update_loader",8f,a7,31,4c),
	HX_("nme_curl_get_code",b0,11,57,ab),
	HX_("nme_curl_get_error_message",2d,5a,0d,7a),
	HX_("nme_curl_get_data",ad,b6,f5,ab),
	HX_("nme_curl_get_cookies",ac,ca,ae,cf),
	HX_("nme_curl_get_headers",a3,e5,c8,8b),
	HX_("nme_curl_initialize",ca,88,81,b7),
	::String(null())
};

void URLLoader_obj::__register()
{
	URLLoader_obj _hx_dummy;
	URLLoader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.net.URLLoader",49,7a,ca,f3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &URLLoader_obj::__GetStatic;
	__mClass->mSetStaticField = &URLLoader_obj::__SetStatic;
	__mClass->mMarkFunc = URLLoader_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(URLLoader_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(URLLoader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< URLLoader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = URLLoader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = URLLoader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = URLLoader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void URLLoader_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d89a013d80562c4a_42_boot)
HXDLIN(  42)		activeLoaders =  ::haxe::ds::List_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_44_boot)
HXDLIN(  44)		urlInvalid = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_45_boot)
HXDLIN(  45)		urlInit = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_46_boot)
HXDLIN(  46)		urlLoading = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_47_boot)
HXDLIN(  47)		urlComplete = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_48_boot)
HXDLIN(  48)		urlError = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_290_boot)
HXDLIN( 290)		nme_curl_create = ::nme::Loader_obj::load(HX_("nme_curl_create",76,f9,41,86),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_291_boot)
HXDLIN( 291)		nme_curl_process_loaders = ::nme::Loader_obj::load(HX_("nme_curl_process_loaders",36,9a,79,04),0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_292_boot)
HXDLIN( 292)		nme_curl_update_loader = ::nme::Loader_obj::load(HX_("nme_curl_update_loader",8f,a7,31,4c),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_293_boot)
HXDLIN( 293)		nme_curl_get_code = ::nme::Loader_obj::load(HX_("nme_curl_get_code",b0,11,57,ab),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_294_boot)
HXDLIN( 294)		nme_curl_get_error_message = ::nme::Loader_obj::load(HX_("nme_curl_get_error_message",2d,5a,0d,7a),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_295_boot)
HXDLIN( 295)		nme_curl_get_data = ::nme::Loader_obj::load(HX_("nme_curl_get_data",ad,b6,f5,ab),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_296_boot)
HXDLIN( 296)		nme_curl_get_cookies = ::nme::Loader_obj::load(HX_("nme_curl_get_cookies",ac,ca,ae,cf),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_297_boot)
HXDLIN( 297)		nme_curl_get_headers = ::nme::Loader_obj::load(HX_("nme_curl_get_headers",a3,e5,c8,8b),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d89a013d80562c4a_298_boot)
HXDLIN( 298)		nme_curl_initialize = ::nme::Loader_obj::load(HX_("nme_curl_initialize",ca,88,81,b7),1);
            	}
}

} // end namespace nme
} // end namespace net
