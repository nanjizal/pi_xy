// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_BitmapData
#define INCLUDED_nme_display_BitmapData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,display,BitmapData)
HX_DECLARE_CLASS2(nme,display,BlendMode)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,filters,BitmapFilter)
HX_DECLARE_CLASS2(nme,geom,ColorTransform)
HX_DECLARE_CLASS2(nme,geom,Matrix)
HX_DECLARE_CLASS2(nme,geom,Point)
HX_DECLARE_CLASS2(nme,geom,Rectangle)
HX_DECLARE_CLASS2(nme,utils,ArrayBufferView)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)
HX_DECLARE_CLASS2(nme,utils,UInt8Array)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES BitmapData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BitmapData_obj OBJ_;
		BitmapData_obj();

	public:
		enum { _hx_ClassId = 0x02e44101 };

		void __construct(int inWidth,int inHeight,::hx::Null< bool >  __o_inTransparent, ::Dynamic inFillARGB,::hx::Null< int >  __o_inPixelFormat);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.BitmapData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.BitmapData"); }
		static ::hx::ObjectPtr< BitmapData_obj > __new(int inWidth,int inHeight,::hx::Null< bool >  __o_inTransparent, ::Dynamic inFillARGB,::hx::Null< int >  __o_inPixelFormat);
		static ::hx::ObjectPtr< BitmapData_obj > __alloc(::hx::Ctx *_hx_ctx,int inWidth,int inHeight,::hx::Null< bool >  __o_inTransparent, ::Dynamic inFillARGB,::hx::Null< int >  __o_inPixelFormat);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BitmapData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("BitmapData",d9,b9,71,2a); }

		static void __boot();
		static ::String PNG;
		static ::String JPG;
		static int TRANSPARENT;
		static int HARDWARE;
		static int FLAG_NOREPEAT_NONPOT;
		static int FLAG_FIXED_FORMAT;
		static int FLAG_MIPMAPS;
		static int CHANNEL_RED;
		static int CHANNEL_GREEN;
		static int CHANNEL_BLUE;
		static int CHANNEL_ALPHA;
		static int FLOAT_UNSCALED;
		static int FLOAT_ZERO_MEAN;
		static int FLOAT_128_MEAN;
		static int FLOAT_UNIT_SCALE;
		static int FLOAT_STD_SCALE;
		static int FLOAT_SWIZZLE_RGB;
		static int FLOAT_100_SCALE;
		static int FLOAT_NORM;
		static int FLOAT_EXPAND;
		static int CLEAR;
		static int BLACK;
		static int WHITE;
		static int RED;
		static int GREEN;
		static int BLUE;
		static bool defaultPremultiplied;
		static bool defaultMipmaps;
		static  ::nme::display::BitmapData createPremultiplied(int width,int height,::hx::Null< int >  inArgb);
		static ::Dynamic createPremultiplied_dyn();

		static  ::nme::display::BitmapData createGrey(int width,int height, ::Dynamic inLuma);
		static ::Dynamic createGrey_dyn();

		static  ::nme::display::BitmapData createAlpha(int width,int height,::hx::Null< int >  inAlpha);
		static ::Dynamic createAlpha_dyn();

		static  ::nme::display::BitmapData createUInt16(int width,int height);
		static ::Dynamic createUInt16_dyn();

		static  ::nme::display::BitmapData createUInt32(int width,int height);
		static ::Dynamic createUInt32_dyn();

		static int createColor(int inRGB,::hx::Null< int >  inAlpha);
		static ::Dynamic createColor_dyn();

		static int extractAlpha(int v);
		static ::Dynamic extractAlpha_dyn();

		static int extractColor(int v);
		static ::Dynamic extractColor_dyn();

		static bool sameValue(int a,int b);
		static ::Dynamic sameValue_dyn();

		static int flip_pixel4(int pix4);
		static ::Dynamic flip_pixel4_dyn();

		static int ucompare(int n1,int n2);
		static ::Dynamic ucompare_dyn();

		static  ::nme::utils::ByteArray getRGBAPixels( ::nme::display::BitmapData bitmapData);
		static ::Dynamic getRGBAPixels_dyn();

		static  ::nme::display::BitmapData load(::String inFilename,::hx::Null< int >  format, ::Dynamic inOnMarker);
		static ::Dynamic load_dyn();

		static  ::nme::display::BitmapData loadFromBytes( ::nme::utils::ByteArray inBytes, ::nme::utils::ByteArray inRawAlpha, ::Dynamic inOnMarker);
		static ::Dynamic loadFromBytes_dyn();

		static  ::nme::display::BitmapData loadFromHaxeBytes( ::haxe::io::Bytes inBytes, ::haxe::io::Bytes inRawAlpha, ::Dynamic inOnMarker);
		static ::Dynamic loadFromHaxeBytes_dyn();

		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_apply_filter;
		static Dynamic nme_bitmap_data_apply_filter_dyn() { return nme_bitmap_data_apply_filter;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_generate_filter_rect;
		static Dynamic nme_bitmap_data_generate_filter_rect_dyn() { return nme_bitmap_data_generate_filter_rect;}
		static ::cpp::Function<  ::hx::Object *  (int,int,int,int,bool) > nme_bitmap_data_create;
		static Dynamic nme_bitmap_data_create_dyn() { return nme_bitmap_data_create;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_load;
		static Dynamic nme_bitmap_data_load_dyn() { return nme_bitmap_data_load;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_from_bytes;
		static Dynamic nme_bitmap_data_from_bytes_dyn() { return nme_bitmap_data_from_bytes;}
		static ::cpp::Function< void  ( ::hx::Object *,int) > nme_bitmap_data_clear;
		static Dynamic nme_bitmap_data_clear_dyn() { return nme_bitmap_data_clear;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > nme_bitmap_data_clone;
		static Dynamic nme_bitmap_data_clone_dyn() { return nme_bitmap_data_clone;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_color_transform;
		static Dynamic nme_bitmap_data_color_transform_dyn() { return nme_bitmap_data_color_transform;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > nme_bitmap_data_copy;
		static Dynamic nme_bitmap_data_copy_dyn() { return nme_bitmap_data_copy;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int,int) > nme_bitmap_data_copy_channel;
		static Dynamic nme_bitmap_data_copy_channel_dyn() { return nme_bitmap_data_copy_channel;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > nme_bitmap_data_fill;
		static Dynamic nme_bitmap_data_fill_dyn() { return nme_bitmap_data_fill;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > nme_bitmap_data_get_pixels;
		static Dynamic nme_bitmap_data_get_pixels_dyn() { return nme_bitmap_data_get_pixels;}
		static ::cpp::Function< int  ( ::hx::Object *,int,int) > nme_bitmap_data_get_pixel;
		static Dynamic nme_bitmap_data_get_pixel_dyn() { return nme_bitmap_data_get_pixel;}
		static ::cpp::Function< int  ( ::hx::Object *,int,int) > nme_bitmap_data_get_pixel32;
		static Dynamic nme_bitmap_data_get_pixel32_dyn() { return nme_bitmap_data_get_pixel32;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_get_array;
		static Dynamic nme_bitmap_data_get_array_dyn() { return nme_bitmap_data_get_array;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int,bool, ::hx::Object *) > nme_bitmap_data_get_color_bounds_rect;
		static Dynamic nme_bitmap_data_get_color_bounds_rect_dyn() { return nme_bitmap_data_get_color_bounds_rect;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int) > nme_bitmap_data_scroll;
		static Dynamic nme_bitmap_data_scroll_dyn() { return nme_bitmap_data_scroll;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int,int) > nme_bitmap_data_set_pixel;
		static Dynamic nme_bitmap_data_set_pixel_dyn() { return nme_bitmap_data_set_pixel;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int,int) > nme_bitmap_data_set_pixel32;
		static Dynamic nme_bitmap_data_set_pixel32_dyn() { return nme_bitmap_data_set_pixel32;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,int) > nme_bitmap_data_set_bytes;
		static Dynamic nme_bitmap_data_set_bytes_dyn() { return nme_bitmap_data_set_bytes;}
		static ::cpp::Function< void  ( ::hx::Object *,int,bool) > nme_bitmap_data_set_format;
		static Dynamic nme_bitmap_data_set_format_dyn() { return nme_bitmap_data_set_format;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_bitmap_data_get_format;
		static Dynamic nme_bitmap_data_get_format_dyn() { return nme_bitmap_data_get_format;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_bitmap_data_set_array;
		static Dynamic nme_bitmap_data_set_array_dyn() { return nme_bitmap_data_set_array;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_bitmap_data_create_hardware_surface;
		static Dynamic nme_bitmap_data_create_hardware_surface_dyn() { return nme_bitmap_data_create_hardware_surface;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_bitmap_data_destroy_hardware_surface;
		static Dynamic nme_bitmap_data_destroy_hardware_surface_dyn() { return nme_bitmap_data_destroy_hardware_surface;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *,bool) > nme_render_surface_to_surface;
		static Dynamic nme_render_surface_to_surface_dyn() { return nme_render_surface_to_surface;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_bitmap_data_height;
		static Dynamic nme_bitmap_data_height_dyn() { return nme_bitmap_data_height;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_bitmap_data_width;
		static Dynamic nme_bitmap_data_width_dyn() { return nme_bitmap_data_width;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_bitmap_data_get_transparent;
		static Dynamic nme_bitmap_data_get_transparent_dyn() { return nme_bitmap_data_get_transparent;}
		static ::cpp::Function< void  ( ::hx::Object *,int) > nme_bitmap_data_set_flags;
		static Dynamic nme_bitmap_data_set_flags_dyn() { return nme_bitmap_data_set_flags;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_bitmap_data_get_flags;
		static Dynamic nme_bitmap_data_get_flags_dyn() { return nme_bitmap_data_get_flags;}
		static  ::Dynamic nme_bitmap_data_encode;
		static Dynamic nme_bitmap_data_encode_dyn() { return nme_bitmap_data_encode;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_bitmap_data_dump_bits;
		static Dynamic nme_bitmap_data_dump_bits_dyn() { return nme_bitmap_data_dump_bits;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_bitmap_data_dispose;
		static Dynamic nme_bitmap_data_dispose_dyn() { return nme_bitmap_data_dispose;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int,int,int,bool) > nme_bitmap_data_noise;
		static Dynamic nme_bitmap_data_noise_dyn() { return nme_bitmap_data_noise;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int,int) > nme_bitmap_data_flood_fill;
		static Dynamic nme_bitmap_data_flood_fill_dyn() { return nme_bitmap_data_flood_fill;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_bitmap_data_get_prem_alpha;
		static Dynamic nme_bitmap_data_get_prem_alpha_dyn() { return nme_bitmap_data_get_prem_alpha;}
		static ::cpp::Function< void  ( ::hx::Object *,bool) > nme_bitmap_data_set_prem_alpha;
		static Dynamic nme_bitmap_data_set_prem_alpha_dyn() { return nme_bitmap_data_set_prem_alpha;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > nme_bitmap_data_get_floats32;
		static Dynamic nme_bitmap_data_get_floats32_dyn() { return nme_bitmap_data_get_floats32;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int,int, ::hx::Object *) > nme_bitmap_data_set_floats32;
		static Dynamic nme_bitmap_data_set_floats32_dyn() { return nme_bitmap_data_set_floats32;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > nme_bitmap_data_get_uints8;
		static Dynamic nme_bitmap_data_get_uints8_dyn() { return nme_bitmap_data_get_uints8;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int,int,int) > nme_bitmap_data_set_uints8;
		static Dynamic nme_bitmap_data_set_uints8_dyn() { return nme_bitmap_data_set_uints8;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > nme_bitmap_data_get_data_handle;
		static Dynamic nme_bitmap_data_get_data_handle_dyn() { return nme_bitmap_data_get_data_handle;}
		int height;
		 ::nme::geom::Rectangle rect;
		bool transparent;
		int width;
		 ::Dynamic nmeHandle;
		 ::nme::utils::UInt8Array data;
		void clear(int color);
		::Dynamic clear_dyn();

		void colorTransform( ::nme::geom::Rectangle rect, ::nme::geom::ColorTransform colorTransform);
		::Dynamic colorTransform_dyn();

		void copyChannel( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint,int inSourceChannel,int inDestChannel);
		::Dynamic copyChannel_dyn();

		void copyPixels( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint, ::nme::display::BitmapData alphaBitmapData, ::nme::geom::Point alphaPoint,::hx::Null< bool >  mergeAlpha);
		::Dynamic copyPixels_dyn();

		void createHardwareSurface();
		::Dynamic createHardwareSurface_dyn();

		void destroyHardwareSurface();
		::Dynamic destroyHardwareSurface_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		void dumpBits();
		::Dynamic dumpBits_dyn();

		 ::nme::utils::ByteArray encode(::String inFormat,::hx::Null< Float >  inQuality);
		::Dynamic encode_dyn();

		void fillRect( ::nme::geom::Rectangle rect,int inColour);
		::Dynamic fillRect_dyn();

		void fillRectEx( ::nme::geom::Rectangle rect,int inColour,::hx::Null< int >  inAlpha);
		::Dynamic fillRectEx_dyn();

		void floodFill(int x,int y,int color);
		::Dynamic floodFill_dyn();

		 ::nme::geom::Rectangle getColorBoundsRect(int mask,int color,::hx::Null< bool >  findColor);
		::Dynamic getColorBoundsRect_dyn();

		int getPixel(int x,int y);
		::Dynamic getPixel_dyn();

		int getPixel32(int x,int y);
		::Dynamic getPixel32_dyn();

		 ::nme::utils::ByteArray getPixels( ::nme::geom::Rectangle rect);
		::Dynamic getPixels_dyn();

		::Array< int > getVector( ::nme::geom::Rectangle rect);
		::Dynamic getVector_dyn();

		void nmeDrawToSurface( ::Dynamic inSurface, ::nme::geom::Matrix matrix, ::nme::geom::ColorTransform colorTransform,::String blendMode, ::nme::geom::Rectangle clipRect,bool smoothing);
		::Dynamic nmeDrawToSurface_dyn();

		void nmeLoadFromBytes( ::nme::utils::ByteArray inBytes, ::nme::utils::ByteArray inRawAlpha, ::Dynamic onAppData);
		::Dynamic nmeLoadFromBytes_dyn();

		void scroll(int inDX,int inDY);
		::Dynamic scroll_dyn();

		void setFlags(int inFlags);
		::Dynamic setFlags_dyn();

		int getFlags();
		::Dynamic getFlags_dyn();

		void setPixel(int inX,int inY,int inColour);
		::Dynamic setPixel_dyn();

		void setPixel32(int inX,int inY,int inColour);
		::Dynamic setPixel32_dyn();

		void setPixels( ::nme::geom::Rectangle rect, ::nme::utils::ByteArray pixels);
		::Dynamic setPixels_dyn();

		void setVector( ::nme::geom::Rectangle rect,::Array< int > inPixels);
		::Dynamic setVector_dyn();

		 ::nme::utils::UInt8Array get_data();
		::Dynamic get_data_dyn();

		void getData( ::Dynamic dataHandle,::hx::Null< int >  inPixelFormat,::hx::Null< int >  dataOffset,::hx::Null< int >  dataStride,::hx::Null< int >  subSample);
		::Dynamic getData_dyn();

		 ::Dynamic getDataHandle();
		::Dynamic getDataHandle_dyn();

		 ::nme::utils::ByteArray getBytes(::hx::Null< int >  inPixelFormat);
		::Dynamic getBytes_dyn();

		void getUInts8( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,::hx::Null< int >  subSample);
		::Dynamic getUInts8_dyn();

		void setData( ::Dynamic dataHandle,::hx::Null< int >  inPixelFormat,::hx::Null< int >  dataOffset,::hx::Null< int >  dataStride,::hx::Null< int >  expand);
		::Dynamic setData_dyn();

		void setUInts8( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,::hx::Null< int >  expand);
		::Dynamic setUInts8_dyn();

		void getFloats32( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,int transform,::hx::Null< int >  subSample, ::nme::geom::Rectangle subrect);
		::Dynamic getFloats32_dyn();

		void setFloats32( ::Dynamic dataHandle,int dataOffset,int dataStride,int pixelFormat,int transform,::hx::Null< int >  expand, ::nme::geom::Rectangle subrect);
		::Dynamic setFloats32_dyn();

		void setFormat(int format,::hx::Null< bool >  inConvert);
		::Dynamic setFormat_dyn();

		int set_format(int format);
		::Dynamic set_format_dyn();

		int get_format();
		::Dynamic get_format_dyn();

		void noise(int randomSeed,::hx::Null< int >  low,::hx::Null< int >  high,::hx::Null< int >  channelOptions,::hx::Null< bool >  grayScale);
		::Dynamic noise_dyn();

		 ::nme::geom::Rectangle get_rect();
		::Dynamic get_rect_dyn();

		int get_width();
		::Dynamic get_width_dyn();

		int get_height();
		::Dynamic get_height_dyn();

		bool get_transparent();
		::Dynamic get_transparent_dyn();

		bool get_premultipliedAlpha();
		::Dynamic get_premultipliedAlpha_dyn();

		bool set_premultipliedAlpha(bool inVal);
		::Dynamic set_premultipliedAlpha_dyn();

		bool get_mipmaps();
		::Dynamic get_mipmaps_dyn();

		bool set_mipmaps(bool inMipmaps);
		::Dynamic set_mipmaps_dyn();

		void applyFilter( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint, ::nme::filters::BitmapFilter filter);
		::Dynamic applyFilter_dyn();

		 ::nme::display::BitmapData clone();
		::Dynamic clone_dyn();

		 ::nme::display::BitmapData cloneRect(int x0,int y0,int inWidth,int inHeight);
		::Dynamic cloneRect_dyn();

		void draw(::Dynamic source, ::nme::geom::Matrix matrix, ::nme::geom::ColorTransform colorTransform, ::nme::display::BlendMode blendMode, ::nme::geom::Rectangle clipRect,::hx::Null< bool >  smoothing);
		::Dynamic draw_dyn();

		void unmultiplyAlpha();
		::Dynamic unmultiplyAlpha_dyn();

		int threshold( ::nme::display::BitmapData sourceBitmapData, ::nme::geom::Rectangle sourceRect, ::nme::geom::Point destPoint,::String operation,int threshold,::hx::Null< int >  color,::hx::Null< int >  mask,::hx::Null< bool >  copySource);
		::Dynamic threshold_dyn();

		int _self_threshold(::String operation,int threshold,::hx::Null< int >  color,::hx::Null< int >  mask);
		::Dynamic _self_threshold_dyn();

		 ::nme::geom::Rectangle generateFilterRect( ::nme::geom::Rectangle sourceRect, ::nme::filters::BitmapFilter filter);
		::Dynamic generateFilterRect_dyn();

		void save(::String inFilename,::hx::Null< Float >  inQuality);
		::Dynamic save_dyn();

		void lock();
		::Dynamic lock_dyn();

		void unlock( ::nme::geom::Rectangle changeRect);
		::Dynamic unlock_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_BitmapData */ 
