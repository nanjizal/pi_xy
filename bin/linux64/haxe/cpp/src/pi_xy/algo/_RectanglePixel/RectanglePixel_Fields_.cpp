// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__RectanglePixel_RectanglePixel_Fields_
#include <pi_xy/algo/_RectanglePixel/RectanglePixel_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_cb868fe29407f993_14_fillRadialRect,"pi_xy.algo._RectanglePixel.RectanglePixel_Fields_","fillRadialRect",0xeedd57ea,"pi_xy.algo._RectanglePixel.RectanglePixel_Fields_.fillRadialRect","pi_xy/algo/RectanglePixel.hx",14,0xf418ac33)
namespace pi_xy{
namespace algo{
namespace _RectanglePixel{

void RectanglePixel_Fields__obj::__construct() { }

Dynamic RectanglePixel_Fields__obj::__CreateEmpty() { return new RectanglePixel_Fields__obj; }

void *RectanglePixel_Fields__obj::_hx_vtable = 0;

Dynamic RectanglePixel_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RectanglePixel_Fields__obj > _hx_result = new RectanglePixel_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RectanglePixel_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f6cc462;
}

void RectanglePixel_Fields__obj::fillRadialRect( ::pi_xy::ImageStruct pixelimage,Float x,Float y,Float wid,Float hi,int colorIn,int colorOut, ::Dynamic __o_gx, ::Dynamic __o_gy, ::Dynamic __o_edgePoints){
            		 ::Dynamic gx = __o_gx;
            		if (::hx::IsNull(__o_gx)) gx = 0;
            		 ::Dynamic gy = __o_gy;
            		if (::hx::IsNull(__o_gy)) gy = 0;
            		 ::Dynamic edgePoints = __o_edgePoints;
            		if (::hx::IsNull(__o_edgePoints)) edgePoints = 4;
            	HX_GC_STACKFRAME(&_hx_pos_cb868fe29407f993_14_fillRadialRect)
HXLINE(  15)		if (::hx::IsLess( edgePoints,4 )) {
HXLINE(  15)			edgePoints = 4;
            		}
HXLINE(  16)		if (::hx::IsLess( gx,((Float)-1.) )) {
HXLINE(  16)			gx = -1;
            		}
HXLINE(  17)		if (::hx::IsGreater( gx,((Float)1.) )) {
HXLINE(  17)			gx = 1;
            		}
HXLINE(  18)		if (::hx::IsLess( gy,((Float)-1.) )) {
HXLINE(  18)			gy = ((Float)-1.);
            		}
HXLINE(  19)		if (::hx::IsGreater( gy,((Float)1.) )) {
HXLINE(  19)			gy = 1;
            		}
HXLINE(  21)		Float mx = ((x + (wid / ( (Float)(2) ))) + ((( (Float)(gx) ) * wid) / ( (Float)(2) )));
HXLINE(  22)		Float my = ((y + (hi / ( (Float)(2) ))) + ((( (Float)(gy) ) * hi) / ( (Float)(2) )));
HXLINE(  23)		Float bx = (x + wid);
HXLINE(  24)		Float cy = (y + hi);
HXLINE(  25)		 ::Dynamic l = edgePoints;
HXLINE(  27)		Float lastX = x;
HXLINE(  28)		Float lastY = y;
HXLINE(  29)		Float nextX;
HXLINE(  30)		Float nextY;
HXLINE(  31)		Float gap = (wid / ( (Float)(l) ));
HXLINE(  34)		{
HXLINE(  34)			int _g = 1;
HXDLIN(  34)			int _g1 = (( (int)(l) ) - 2);
HXDLIN(  34)			while((_g < _g1)){
HXLINE(  34)				_g = (_g + 1);
HXDLIN(  34)				int i = (_g - 1);
HXLINE(  35)				nextX = (x + (gap * ( (Float)(i) )));
HXLINE(  36)				nextY = y;
HXLINE(  37)				{
HXLINE(  37)					 ::pi_xy::ImageStruct this1 = pixelimage;
HXDLIN(  37)					{
HXLINE(  37)						bool hasHit = false;
HXDLIN(  37)						bool hasUndo = false;
HXDLIN(  37)						int aA = ((colorOut >> 24) & 255);
HXDLIN(  37)						int rA = ((colorOut >> 16) & 255);
HXDLIN(  37)						int gA = ((colorOut >> 8) & 255);
HXDLIN(  37)						int bA = (colorOut & 255);
HXDLIN(  37)						int aB = ((colorIn >> 24) & 255);
HXDLIN(  37)						int rB = ((colorIn >> 16) & 255);
HXDLIN(  37)						int gB = ((colorIn >> 8) & 255);
HXDLIN(  37)						int bB = (colorIn & 255);
HXDLIN(  37)						int aC = ((colorOut >> 24) & 255);
HXDLIN(  37)						int rC = ((colorOut >> 16) & 255);
HXDLIN(  37)						int gC = ((colorOut >> 8) & 255);
HXDLIN(  37)						int bC = (colorOut & 255);
HXDLIN(  37)						Float bcx = (lastX - nextX);
HXDLIN(  37)						Float bcy = (lastY - nextY);
HXDLIN(  37)						Float acx = (mx - nextX);
HXDLIN(  37)						Float acy = (my - nextY);
HXDLIN(  37)						Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  37)						Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  37)						Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  37)						Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  37)						 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  37)						if ((mx > lastX)) {
HXLINE(  37)							if ((mx > nextX)) {
HXLINE(  37)								int min;
HXDLIN(  37)								if ((lastX > nextX)) {
HXLINE(  37)									min = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  37)									min = ::Math_obj::floor(lastX);
            								}
HXDLIN(  37)								int ii_min = min;
HXDLIN(  37)								int ii_max = ::Math_obj::ceil(mx);
HXDLIN(  37)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            							}
            							else {
HXLINE(  37)								int ii_min1 = ::Math_obj::floor(lastX);
HXDLIN(  37)								int ii_max1 = ::Math_obj::ceil(nextX);
HXDLIN(  37)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            							}
            						}
            						else {
HXLINE(  37)							if ((lastX > nextX)) {
HXLINE(  37)								int min1;
HXDLIN(  37)								if ((mx > nextX)) {
HXLINE(  37)									min1 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  37)									min1 = ::Math_obj::ceil(mx);
            								}
HXDLIN(  37)								int ii_min2 = min1;
HXDLIN(  37)								int ii_max2 = ::Math_obj::ceil(lastX);
HXDLIN(  37)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            							}
            							else {
HXLINE(  37)								int ii_min3 = ::Math_obj::floor(mx);
HXDLIN(  37)								int ii_max3 = ::Math_obj::ceil(nextX);
HXDLIN(  37)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            							}
            						}
HXDLIN(  37)						 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  37)						if ((my > lastY)) {
HXLINE(  37)							if ((my > nextY)) {
HXLINE(  37)								int min2;
HXDLIN(  37)								if ((lastY > nextY)) {
HXLINE(  37)									min2 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  37)									min2 = ::Math_obj::floor(lastY);
            								}
HXDLIN(  37)								int ii_min4 = min2;
HXDLIN(  37)								int ii_max4 = ::Math_obj::ceil(my);
HXDLIN(  37)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            							}
            							else {
HXLINE(  37)								int ii_min5 = ::Math_obj::floor(lastY);
HXDLIN(  37)								int ii_max5 = ::Math_obj::ceil(nextY);
HXDLIN(  37)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            							}
            						}
            						else {
HXLINE(  37)							if ((lastY > nextY)) {
HXLINE(  37)								int min3;
HXDLIN(  37)								if ((my > nextY)) {
HXLINE(  37)									min3 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  37)									min3 = ::Math_obj::ceil(my);
            								}
HXDLIN(  37)								int ii_min6 = min3;
HXDLIN(  37)								int ii_max6 = ::Math_obj::ceil(lastY);
HXDLIN(  37)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            							}
            							else {
HXLINE(  37)								int ii_min7 = ::Math_obj::floor(my);
HXDLIN(  37)								int ii_max7 = ::Math_obj::ceil(nextY);
HXDLIN(  37)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            							}
            						}
HXDLIN(  37)						 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  37)						if (hasUndo) {
HXLINE(  37)							int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  37)							int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  37)							 ::Dynamic imageType = null();
HXDLIN(  37)							 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  37)							if (::hx::IsNull( imageType )) {
HXLINE(  54)								imageType = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  37)							::Dynamic undoImage1;
HXDLIN(  37)							switch((int)(( (int)(imageType) ))){
            								case (int)0: {
HXLINE(  37)									 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  37)									 ::iterMagic::BytesImg b = byt;
HXDLIN(  37)									{
HXLINE(  37)										b->width = width;
HXDLIN(  37)										b->height = height;
HXDLIN(  37)										b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  37)										b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  37)										{
HXLINE(  37)											int len = b->length;
HXDLIN(  37)											int w = 0;
HXDLIN(  37)											{
HXLINE(  37)												int _g2 = 0;
HXDLIN(  37)												int _g3 = b->height;
HXDLIN(  37)												while((_g2 < _g3)){
HXLINE(  37)													_g2 = (_g2 + 1);
HXDLIN(  37)													int y1 = (_g2 - 1);
HXDLIN(  37)													{
HXLINE(  37)														int _g4 = 0;
HXDLIN(  37)														int _g5 = b->width;
HXDLIN(  37)														while((_g4 < _g5)){
HXLINE(  37)															_g4 = (_g4 + 1);
HXDLIN(  37)															int x1 = (_g4 - 1);
HXDLIN(  37)															{
HXLINE(  37)																w = (w + 1);
HXDLIN(  37)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  37)															{
HXLINE(  37)																w = (w + 1);
HXDLIN(  37)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  37)															{
HXLINE(  37)																w = (w + 1);
HXDLIN(  37)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  37)															{
HXLINE(  37)																w = (w + 1);
HXDLIN(  37)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  37)									undoImage1 = b;
            								}
            								break;
            								case (int)1: {
HXLINE(  37)									 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)									 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  37)									{
HXLINE(  37)										a->width = width;
HXDLIN(  37)										a->height = height;
HXDLIN(  37)										a->data = ::Array_obj< int >::__new(0);
HXDLIN(  37)										a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  37)										{
HXLINE(  37)											int _g6 = 0;
HXDLIN(  37)											int _g7 = a->length;
HXDLIN(  37)											while((_g6 < _g7)){
HXLINE(  37)												_g6 = (_g6 + 1);
HXDLIN(  37)												int i1 = (_g6 - 1);
HXDLIN(  37)												a->data[i1] = 0;
            											}
            										}
            									}
HXDLIN(  37)									undoImage1 = a;
            								}
            								break;
            								case (int)2: {
HXLINE(  37)									 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  37)									 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  37)									{
HXLINE(  37)										b1->width = width;
HXDLIN(  37)										b1->height = height;
HXDLIN(  37)										b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  37)										int size = (b1->length * 4);
HXDLIN(  37)										b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  37)										{
HXLINE(  37)											int _g8 = 0;
HXDLIN(  37)											int _g9 = b1->length;
HXDLIN(  37)											while((_g8 < _g9)){
HXLINE(  37)												_g8 = (_g8 + 1);
HXDLIN(  37)												int i2 = (_g8 - 1);
HXDLIN(  37)												{
HXLINE(  37)													 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  37)													bool undoImage2;
HXDLIN(  37)													if ((i2 >= 0)) {
HXLINE(  37)														undoImage2 = (i2 < (this3->byteLength >> 2));
            													}
            													else {
HXLINE(  37)														undoImage2 = false;
            													}
HXDLIN(  37)													if (undoImage2) {
HXLINE(  37)														 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  37)														int pos = ((i2 << 2) + this3->byteOffset);
HXDLIN(  37)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  37)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  37)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  37)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  37)									undoImage1 = b1;
            								}
            								break;
            								case (int)3: {
HXLINE(  37)									 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)									 ::iterMagic::VecIntImg v = vec;
HXDLIN(  37)									{
HXLINE(  37)										v->width = width;
HXDLIN(  37)										v->height = height;
HXDLIN(  37)										v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  37)										v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  37)										{
HXLINE(  37)											int _g10 = 0;
HXDLIN(  37)											int _g11 = v->length;
HXDLIN(  37)											while((_g10 < _g11)){
HXLINE(  37)												_g10 = (_g10 + 1);
HXDLIN(  37)												int i3 = (_g10 - 1);
HXDLIN(  37)												v->data->__unsafe_set(i3,0);
            											}
            										}
            									}
HXDLIN(  37)									undoImage1 = v;
            								}
            								break;
            								case (int)4: {
HXLINE(  37)									 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)									 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  37)									{
HXLINE(  37)										b2->width = width;
HXDLIN(  37)										b2->height = height;
HXDLIN(  37)										b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  37)										b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  37)										{
HXLINE(  37)											int len1 = b2->length;
HXDLIN(  37)											 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  37)											if (::hx::IsNull( d->head )) {
HXLINE(  37)												int _g12 = 0;
HXDLIN(  37)												int _g13 = len1;
HXDLIN(  37)												while((_g12 < _g13)){
HXLINE(  37)													_g12 = (_g12 + 1);
HXDLIN(  37)													int i4 = (_g12 - 1);
HXDLIN(  37)													d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            												}
            											}
            											else {
HXLINE(  37)												int _g14 = 0;
HXDLIN(  37)												int _g15 = len1;
HXDLIN(  37)												while((_g14 < _g15)){
HXLINE(  37)													_g14 = (_g14 + 1);
HXDLIN(  37)													int i5 = (_g14 - 1);
HXDLIN(  37)													{
HXLINE(  37)														 ::haxe::ds::GenericCell_Int l1 = b2->data->head;
HXDLIN(  37)														 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  37)														{
HXLINE(  37)															int _g16 = 0;
HXDLIN(  37)															int _g17 = i5;
HXDLIN(  37)															while((_g16 < _g17)){
HXLINE(  37)																_g16 = (_g16 + 1);
HXDLIN(  37)																int i6 = (_g16 - 1);
HXLINE( 345)																prev = l1;
HXLINE( 346)																l1 = l1->next;
            															}
            														}
HXLINE(  37)														if (::hx::IsNull( prev )) {
HXLINE(  37)															b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  37)															l1 = null();
            														}
            														else {
HXLINE(  37)															prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  37)															l1 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  37)									undoImage1 = b2;
            								}
            								break;
            							}
HXDLIN(  37)							this2->image = undoImage1;
HXDLIN(  37)							this2->width = width;
HXDLIN(  37)							this2->height = height;
HXDLIN(  37)							this2->imageType = ( (int)(imageType) );
HXDLIN(  37)							undoImage = this2;
HXDLIN(  37)							{
HXLINE(  37)								int rectLeft = xIter3->start;
HXDLIN(  37)								int rectTop = yIter3->start;
HXDLIN(  37)								int rectRight = xIter3->max;
HXDLIN(  37)								bool forceClear = false;
HXDLIN(  37)								{
HXLINE(  37)									int _g18 = rectTop;
HXDLIN(  37)									int _g19 = yIter3->max;
HXDLIN(  37)									while((_g18 < _g19)){
HXLINE(  37)										_g18 = (_g18 + 1);
HXDLIN(  37)										int dy = (_g18 - 1);
HXDLIN(  37)										{
HXLINE(  37)											int _g20 = rectLeft;
HXDLIN(  37)											int _g21 = rectRight;
HXDLIN(  37)											while((_g20 < _g21)){
HXLINE(  37)												_g20 = (_g20 + 1);
HXDLIN(  37)												int dx = (_g20 - 1);
HXDLIN(  37)												::Dynamic this4 = this1->image;
HXDLIN(  37)												int index;
HXDLIN(  37)												if (this1->useVirtualPos) {
HXLINE(  37)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  37)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  37)												int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN(  37)												int col;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  37)													col = c;
            												}
HXDLIN(  37)												bool _hx_tmp;
HXDLIN(  37)												if (this1->useMask) {
HXLINE(  37)													_hx_tmp = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXLINE(  37)													_hx_tmp = false;
            												}
HXDLIN(  37)												if (_hx_tmp) {
HXLINE(  37)													 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN(  37)													::Dynamic this6 = this5->image;
HXDLIN(  37)													int index1;
HXDLIN(  37)													if (this5->useVirtualPos) {
HXLINE(  37)														index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx) - this5->virtualX));
            													}
            													else {
HXLINE(  37)														index1 = ::Std_obj::_hx_int(( (Float)(((dy * this5->width) + dx)) ));
            													}
HXDLIN(  37)													int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN(  37)													int v1;
HXDLIN(  37)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)														v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            													}
            													else {
HXLINE(  37)														v1 = c1;
            													}
HXDLIN(  37)													int maskPixel = v1;
HXDLIN(  37)													int this7 = col;
HXDLIN(  37)													if ((maskPixel == 0)) {
HXLINE(  37)														col = this7;
            													}
            													else {
HXLINE(  37)														Float m0;
HXDLIN(  37)														int this8 = ((maskPixel >> 24) & 255);
HXDLIN(  37)														if ((this8 == 0)) {
HXLINE(  37)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float m1;
HXDLIN(  37)														int this9 = ((maskPixel >> 16) & 255);
HXDLIN(  37)														if ((this9 == 0)) {
HXLINE(  37)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float m2;
HXDLIN(  37)														int this10 = ((maskPixel >> 8) & 255);
HXDLIN(  37)														if ((this10 == 0)) {
HXLINE(  37)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float m3;
HXDLIN(  37)														int this11 = (maskPixel & 255);
HXDLIN(  37)														if ((this11 == 0)) {
HXLINE(  37)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN(  37)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN(  37)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN(  37)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN(  37)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  37)												if ((col != 0)) {
HXLINE(  37)													int x2 = (dx - rectLeft);
HXDLIN(  37)													int y2 = (dy - rectTop);
HXDLIN(  37)													int c2 = col;
HXDLIN(  37)													bool _hx_tmp1;
HXDLIN(  37)													if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  37)														_hx_tmp1 = undoImage->transparent;
            													}
            													else {
HXLINE(  37)														_hx_tmp1 = false;
            													}
HXDLIN(  37)													if (_hx_tmp1) {
HXLINE(  37)														int location;
HXDLIN(  37)														if (undoImage->useVirtualPos) {
HXLINE(  37)															location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            														}
            														else {
HXLINE(  37)															location = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            														}
HXDLIN(  37)														int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  37)														int this13;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															this13 = this12;
            														}
HXDLIN(  37)														Float a1;
HXDLIN(  37)														int this14 = ((this13 >> 24) & 255);
HXDLIN(  37)														if ((this14 == 0)) {
HXLINE(  37)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float r1;
HXDLIN(  37)														int this15 = ((this13 >> 16) & 255);
HXDLIN(  37)														if ((this15 == 0)) {
HXLINE(  37)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float g1;
HXDLIN(  37)														int this16 = ((this13 >> 8) & 255);
HXDLIN(  37)														if ((this16 == 0)) {
HXLINE(  37)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float b11;
HXDLIN(  37)														int this17 = (this13 & 255);
HXDLIN(  37)														if ((this17 == 0)) {
HXLINE(  37)															b11 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float a2;
HXDLIN(  37)														int this18 = ((col >> 24) & 255);
HXDLIN(  37)														if ((this18 == 0)) {
HXLINE(  37)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float r2;
HXDLIN(  37)														int this19 = ((col >> 16) & 255);
HXDLIN(  37)														if ((this19 == 0)) {
HXLINE(  37)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float g2;
HXDLIN(  37)														int this20 = ((col >> 8) & 255);
HXDLIN(  37)														if ((this20 == 0)) {
HXLINE(  37)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float b21;
HXDLIN(  37)														int this21 = (col & 255);
HXDLIN(  37)														if ((this21 == 0)) {
HXLINE(  37)															b21 = ((Float)0.);
            														}
            														else {
HXLINE(  37)															b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            														}
HXDLIN(  37)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  37)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  37)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  37)														int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  37)														int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  37)														int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  37)														{
HXLINE(  37)															int _hx_tmp2;
HXDLIN(  37)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  37)																_hx_tmp2 = blended;
            															}
HXDLIN(  37)															::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            														}
            													}
            													else {
HXLINE(  37)														::Dynamic this22 = undoImage->image;
HXDLIN(  37)														int index2;
HXDLIN(  37)														if (undoImage->useVirtualPos) {
HXLINE(  37)															index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            														}
            														else {
HXLINE(  37)															index2 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            														}
HXDLIN(  37)														int _hx_tmp3;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															_hx_tmp3 = c2;
            														}
HXDLIN(  37)														::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            													}
            												}
            												else {
HXLINE(  37)													if (forceClear) {
HXLINE(  37)														::Dynamic this23 = undoImage->image;
HXDLIN(  37)														int x3 = (dx - rectLeft);
HXDLIN(  37)														int y3 = (dy - rectTop);
HXDLIN(  37)														int index3;
HXDLIN(  37)														if (undoImage->useVirtualPos) {
HXLINE(  37)															index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            														}
            														else {
HXLINE(  37)															index3 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            														}
HXDLIN(  37)														::iterMagic::Iimg_obj::set(this23,index3,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  37)						{
HXLINE(  37)							int _g_min = xIter3->start;
HXDLIN(  37)							int _g_max = xIter3->max;
HXDLIN(  37)							while((_g_min < _g_max)){
HXLINE(  37)								_g_min = (_g_min + 1);
HXDLIN(  37)								int px = (_g_min - 1);
HXDLIN(  37)								Float pcx = (( (Float)(px) ) - nextX);
HXDLIN(  37)								{
HXLINE(  37)									int _g_min1 = yIter3->start;
HXDLIN(  37)									int _g_max1 = yIter3->max;
HXDLIN(  37)									while((_g_min1 < _g_max1)){
HXLINE(  37)										_g_min1 = (_g_min1 + 1);
HXDLIN(  37)										int py = (_g_min1 - 1);
HXDLIN(  37)										Float pcy = (( (Float)(py) ) - nextY);
HXDLIN(  37)										Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  37)										Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  37)										Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  37)										Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  37)										Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  37)										bool _hx_tmp4;
HXDLIN(  37)										bool _hx_tmp5;
HXDLIN(  37)										if ((ratioA >= 0)) {
HXLINE(  37)											_hx_tmp5 = (ratioB >= 0);
            										}
            										else {
HXLINE(  37)											_hx_tmp5 = false;
            										}
HXDLIN(  37)										if (_hx_tmp5) {
HXLINE(  37)											_hx_tmp4 = (ratioC >= 0);
            										}
            										else {
HXLINE(  37)											_hx_tmp4 = false;
            										}
HXDLIN(  37)										if (_hx_tmp4) {
HXLINE(  37)											int i7 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN(  37)											if ((i7 > 255)) {
HXLINE(  24)												i7 = 255;
            											}
HXLINE(  37)											if ((i7 < 0)) {
HXLINE(  25)												i7 = 0;
            											}
HXLINE(  37)											int a5 = i7;
HXDLIN(  37)											int i8 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN(  37)											if ((i8 > 255)) {
HXLINE(  24)												i8 = 255;
            											}
HXLINE(  37)											if ((i8 < 0)) {
HXLINE(  25)												i8 = 0;
            											}
HXLINE(  37)											int r3 = i8;
HXDLIN(  37)											int i9 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN(  37)											if ((i9 > 255)) {
HXLINE(  24)												i9 = 255;
            											}
HXLINE(  37)											if ((i9 < 0)) {
HXLINE(  25)												i9 = 0;
            											}
HXLINE(  37)											int g3 = i9;
HXDLIN(  37)											int i10 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN(  37)											if ((i10 > 255)) {
HXLINE(  24)												i10 = 255;
            											}
HXLINE(  37)											if ((i10 < 0)) {
HXLINE(  25)												i10 = 0;
            											}
HXLINE(  37)											int b4 = i10;
HXDLIN(  37)											{
HXLINE(  37)												int location1;
HXDLIN(  37)												if (this1->useVirtualPos) {
HXLINE(  37)													location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            												}
            												else {
HXLINE(  37)													location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            												}
HXDLIN(  37)												bool _hx_tmp6;
HXDLIN(  37)												if (this1->transparent) {
HXLINE(  37)													_hx_tmp6 = (a5 < 254);
            												}
            												else {
HXLINE(  37)													_hx_tmp6 = false;
            												}
HXDLIN(  37)												if (_hx_tmp6) {
HXLINE(  37)													int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN(  37)													int old;
HXDLIN(  37)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)														old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            													}
            													else {
HXLINE(  37)														old = this24;
            													}
HXDLIN(  37)													int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  37)													Float a11;
HXDLIN(  37)													int this25 = ((old >> 24) & 255);
HXDLIN(  37)													if ((this25 == 0)) {
HXLINE(  37)														a11 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float r11;
HXDLIN(  37)													int this26 = ((old >> 16) & 255);
HXDLIN(  37)													if ((this26 == 0)) {
HXLINE(  37)														r11 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float g11;
HXDLIN(  37)													int this27 = ((old >> 8) & 255);
HXDLIN(  37)													if ((this27 == 0)) {
HXLINE(  37)														g11 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float b12;
HXDLIN(  37)													int this28 = (old & 255);
HXDLIN(  37)													if ((this28 == 0)) {
HXLINE(  37)														b12 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float a21;
HXDLIN(  37)													int this29 = ((rhs >> 24) & 255);
HXDLIN(  37)													if ((this29 == 0)) {
HXLINE(  37)														a21 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float r21;
HXDLIN(  37)													int this30 = ((rhs >> 16) & 255);
HXDLIN(  37)													if ((this30 == 0)) {
HXLINE(  37)														r21 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float g21;
HXDLIN(  37)													int this31 = ((rhs >> 8) & 255);
HXDLIN(  37)													if ((this31 == 0)) {
HXLINE(  37)														g21 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float b22;
HXDLIN(  37)													int this32 = (rhs & 255);
HXDLIN(  37)													if ((this32 == 0)) {
HXLINE(  37)														b22 = ((Float)0.);
            													}
            													else {
HXLINE(  37)														b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            													}
HXDLIN(  37)													Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  37)													int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  37)													int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  37)													int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  37)													int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  37)													int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  37)													{
HXLINE(  37)														int _hx_tmp7;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															_hx_tmp7 = blended1;
            														}
HXDLIN(  37)														::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            													}
            												}
            												else {
HXLINE(  37)													int value;
HXDLIN(  37)													if (this1->isLittle) {
HXLINE(  37)														value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            													}
            													else {
HXLINE(  37)														value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            													}
HXDLIN(  37)													::iterMagic::Iimg_obj::set(this1->image,location1,value);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  37)						if ((hasHit == false)) {
HXLINE(  37)							 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,nextX,nextY,true);
HXDLIN(  37)							if (hasUndo) {
HXLINE(  37)								v2->undoImage = undoImage;
HXDLIN(  37)								v2->undoX = xIter3->start;
HXDLIN(  37)								v2->undoY = yIter3->start;
            							}
            						}
            					}
            				}
HXLINE(  38)				lastX = nextX;
HXLINE(  39)				lastY = nextY;
            			}
            		}
HXLINE(  41)		{
HXLINE(  41)			 ::pi_xy::ImageStruct this33 = pixelimage;
HXDLIN(  41)			{
HXLINE(  41)				bool hasHit1 = false;
HXDLIN(  41)				bool hasUndo1 = false;
HXDLIN(  41)				int aA1 = ((colorOut >> 24) & 255);
HXDLIN(  41)				int rA1 = ((colorOut >> 16) & 255);
HXDLIN(  41)				int gA1 = ((colorOut >> 8) & 255);
HXDLIN(  41)				int bA1 = (colorOut & 255);
HXDLIN(  41)				int aB1 = ((colorIn >> 24) & 255);
HXDLIN(  41)				int rB1 = ((colorIn >> 16) & 255);
HXDLIN(  41)				int gB1 = ((colorIn >> 8) & 255);
HXDLIN(  41)				int bB1 = (colorIn & 255);
HXDLIN(  41)				int aC1 = ((colorOut >> 24) & 255);
HXDLIN(  41)				int rC1 = ((colorOut >> 16) & 255);
HXDLIN(  41)				int gC1 = ((colorOut >> 8) & 255);
HXDLIN(  41)				int bC1 = (colorOut & 255);
HXDLIN(  41)				Float bcx1 = (lastX - bx);
HXDLIN(  41)				Float bcy1 = (lastY - y);
HXDLIN(  41)				Float acx1 = (mx - bx);
HXDLIN(  41)				Float acy1 = (my - y);
HXDLIN(  41)				Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  41)				Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  41)				Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  41)				Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  41)				 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  41)				if ((mx > lastX)) {
HXLINE(  41)					if ((mx > bx)) {
HXLINE(  41)						int min4;
HXDLIN(  41)						if ((lastX > bx)) {
HXLINE(  41)							min4 = ::Math_obj::floor(bx);
            						}
            						else {
HXLINE(  41)							min4 = ::Math_obj::floor(lastX);
            						}
HXDLIN(  41)						int ii_min8 = min4;
HXDLIN(  41)						int ii_max8 = ::Math_obj::ceil(mx);
HXDLIN(  41)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            					}
            					else {
HXLINE(  41)						int ii_min9 = ::Math_obj::floor(lastX);
HXDLIN(  41)						int ii_max9 = ::Math_obj::ceil(bx);
HXDLIN(  41)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            					}
            				}
            				else {
HXLINE(  41)					if ((lastX > bx)) {
HXLINE(  41)						int min5;
HXDLIN(  41)						if ((mx > bx)) {
HXLINE(  41)							min5 = ::Math_obj::floor(bx);
            						}
            						else {
HXLINE(  41)							min5 = ::Math_obj::ceil(mx);
            						}
HXDLIN(  41)						int ii_min10 = min5;
HXDLIN(  41)						int ii_max10 = ::Math_obj::ceil(lastX);
HXDLIN(  41)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            					}
            					else {
HXLINE(  41)						int ii_min11 = ::Math_obj::floor(mx);
HXDLIN(  41)						int ii_max11 = ::Math_obj::ceil(bx);
HXDLIN(  41)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            					}
            				}
HXDLIN(  41)				 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  41)				if ((my > lastY)) {
HXLINE(  41)					if ((my > y)) {
HXLINE(  41)						int min6;
HXDLIN(  41)						if ((lastY > y)) {
HXLINE(  41)							min6 = ::Math_obj::floor(y);
            						}
            						else {
HXLINE(  41)							min6 = ::Math_obj::floor(lastY);
            						}
HXDLIN(  41)						int ii_min12 = min6;
HXDLIN(  41)						int ii_max12 = ::Math_obj::ceil(my);
HXDLIN(  41)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            					}
            					else {
HXLINE(  41)						int ii_min13 = ::Math_obj::floor(lastY);
HXDLIN(  41)						int ii_max13 = ::Math_obj::ceil(y);
HXDLIN(  41)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            					}
            				}
            				else {
HXLINE(  41)					if ((lastY > y)) {
HXLINE(  41)						int min7;
HXDLIN(  41)						if ((my > y)) {
HXLINE(  41)							min7 = ::Math_obj::floor(y);
            						}
            						else {
HXLINE(  41)							min7 = ::Math_obj::ceil(my);
            						}
HXDLIN(  41)						int ii_min14 = min7;
HXDLIN(  41)						int ii_max14 = ::Math_obj::ceil(lastY);
HXDLIN(  41)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            					}
            					else {
HXLINE(  41)						int ii_min15 = ::Math_obj::floor(my);
HXDLIN(  41)						int ii_max15 = ::Math_obj::ceil(y);
HXDLIN(  41)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            					}
            				}
HXDLIN(  41)				 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  41)				if (hasUndo1) {
HXLINE(  41)					int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  41)					int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  41)					 ::Dynamic imageType1 = null();
HXDLIN(  41)					 ::pi_xy::ImageStruct this34 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  41)					if (::hx::IsNull( imageType1 )) {
HXLINE(  54)						imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  41)					::Dynamic undoImage4;
HXDLIN(  41)					switch((int)(( (int)(imageType1) ))){
            						case (int)0: {
HXLINE(  41)							 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  41)							 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  41)							{
HXLINE(  41)								b6->width = width1;
HXDLIN(  41)								b6->height = height1;
HXDLIN(  41)								b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  41)								b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  41)								{
HXLINE(  41)									int len2 = b6->length;
HXDLIN(  41)									int w1 = 0;
HXDLIN(  41)									{
HXLINE(  41)										int _g22 = 0;
HXDLIN(  41)										int _g23 = b6->height;
HXDLIN(  41)										while((_g22 < _g23)){
HXLINE(  41)											_g22 = (_g22 + 1);
HXDLIN(  41)											int y4 = (_g22 - 1);
HXDLIN(  41)											{
HXLINE(  41)												int _g24 = 0;
HXDLIN(  41)												int _g25 = b6->width;
HXDLIN(  41)												while((_g24 < _g25)){
HXLINE(  41)													_g24 = (_g24 + 1);
HXDLIN(  41)													int x4 = (_g24 - 1);
HXDLIN(  41)													{
HXLINE(  41)														w1 = (w1 + 1);
HXDLIN(  41)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  41)													{
HXLINE(  41)														w1 = (w1 + 1);
HXDLIN(  41)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  41)													{
HXLINE(  41)														w1 = (w1 + 1);
HXDLIN(  41)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  41)													{
HXLINE(  41)														w1 = (w1 + 1);
HXDLIN(  41)														b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  41)							undoImage4 = b6;
            						}
            						break;
            						case (int)1: {
HXLINE(  41)							 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  41)							 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  41)							{
HXLINE(  41)								a7->width = width1;
HXDLIN(  41)								a7->height = height1;
HXDLIN(  41)								a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  41)								a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  41)								{
HXLINE(  41)									int _g26 = 0;
HXDLIN(  41)									int _g27 = a7->length;
HXDLIN(  41)									while((_g26 < _g27)){
HXLINE(  41)										_g26 = (_g26 + 1);
HXDLIN(  41)										int i11 = (_g26 - 1);
HXDLIN(  41)										a7->data[i11] = 0;
            									}
            								}
            							}
HXDLIN(  41)							undoImage4 = a7;
            						}
            						break;
            						case (int)2: {
HXLINE(  41)							 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  41)							 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  41)							{
HXLINE(  41)								b7->width = width1;
HXDLIN(  41)								b7->height = height1;
HXDLIN(  41)								b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  41)								int size1 = (b7->length * 4);
HXDLIN(  41)								b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  41)								{
HXLINE(  41)									int _g28 = 0;
HXDLIN(  41)									int _g29 = b7->length;
HXDLIN(  41)									while((_g28 < _g29)){
HXLINE(  41)										_g28 = (_g28 + 1);
HXDLIN(  41)										int i12 = (_g28 - 1);
HXDLIN(  41)										{
HXLINE(  41)											 ::haxe::io::ArrayBufferViewImpl this35 = b7->data;
HXDLIN(  41)											bool undoImage5;
HXDLIN(  41)											if ((i12 >= 0)) {
HXLINE(  41)												undoImage5 = (i12 < (this35->byteLength >> 2));
            											}
            											else {
HXLINE(  41)												undoImage5 = false;
            											}
HXDLIN(  41)											if (undoImage5) {
HXLINE(  41)												 ::haxe::io::Bytes _this1 = this35->bytes;
HXDLIN(  41)												int pos1 = ((i12 << 2) + this35->byteOffset);
HXDLIN(  41)												_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  41)												_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  41)												_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  41)												_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  41)							undoImage4 = b7;
            						}
            						break;
            						case (int)3: {
HXLINE(  41)							 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  41)							 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  41)							{
HXLINE(  41)								v3->width = width1;
HXDLIN(  41)								v3->height = height1;
HXDLIN(  41)								v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  41)								v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  41)								{
HXLINE(  41)									int _g30 = 0;
HXDLIN(  41)									int _g31 = v3->length;
HXDLIN(  41)									while((_g30 < _g31)){
HXLINE(  41)										_g30 = (_g30 + 1);
HXDLIN(  41)										int i13 = (_g30 - 1);
HXDLIN(  41)										v3->data->__unsafe_set(i13,0);
            									}
            								}
            							}
HXDLIN(  41)							undoImage4 = v3;
            						}
            						break;
            						case (int)4: {
HXLINE(  41)							 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  41)							 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  41)							{
HXLINE(  41)								b8->width = width1;
HXDLIN(  41)								b8->height = height1;
HXDLIN(  41)								b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  41)								b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  41)								{
HXLINE(  41)									int len3 = b8->length;
HXDLIN(  41)									 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  41)									if (::hx::IsNull( d1->head )) {
HXLINE(  41)										int _g32 = 0;
HXDLIN(  41)										int _g33 = len3;
HXDLIN(  41)										while((_g32 < _g33)){
HXLINE(  41)											_g32 = (_g32 + 1);
HXDLIN(  41)											int i14 = (_g32 - 1);
HXDLIN(  41)											d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            										}
            									}
            									else {
HXLINE(  41)										int _g34 = 0;
HXDLIN(  41)										int _g35 = len3;
HXDLIN(  41)										while((_g34 < _g35)){
HXLINE(  41)											_g34 = (_g34 + 1);
HXDLIN(  41)											int i15 = (_g34 - 1);
HXDLIN(  41)											{
HXLINE(  41)												 ::haxe::ds::GenericCell_Int l2 = b8->data->head;
HXDLIN(  41)												 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  41)												{
HXLINE(  41)													int _g36 = 0;
HXDLIN(  41)													int _g37 = i15;
HXDLIN(  41)													while((_g36 < _g37)){
HXLINE(  41)														_g36 = (_g36 + 1);
HXDLIN(  41)														int i16 = (_g36 - 1);
HXLINE( 345)														prev1 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE(  41)												if (::hx::IsNull( prev1 )) {
HXLINE(  41)													b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  41)													l2 = null();
            												}
            												else {
HXLINE(  41)													prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  41)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  41)							undoImage4 = b8;
            						}
            						break;
            					}
HXDLIN(  41)					this34->image = undoImage4;
HXDLIN(  41)					this34->width = width1;
HXDLIN(  41)					this34->height = height1;
HXDLIN(  41)					this34->imageType = ( (int)(imageType1) );
HXDLIN(  41)					undoImage3 = this34;
HXDLIN(  41)					{
HXLINE(  41)						int rectLeft1 = xIter31->start;
HXDLIN(  41)						int rectTop1 = yIter31->start;
HXDLIN(  41)						int rectRight1 = xIter31->max;
HXDLIN(  41)						bool forceClear1 = false;
HXDLIN(  41)						{
HXLINE(  41)							int _g38 = rectTop1;
HXDLIN(  41)							int _g39 = yIter31->max;
HXDLIN(  41)							while((_g38 < _g39)){
HXLINE(  41)								_g38 = (_g38 + 1);
HXDLIN(  41)								int dy1 = (_g38 - 1);
HXDLIN(  41)								{
HXLINE(  41)									int _g40 = rectLeft1;
HXDLIN(  41)									int _g41 = rectRight1;
HXDLIN(  41)									while((_g40 < _g41)){
HXLINE(  41)										_g40 = (_g40 + 1);
HXDLIN(  41)										int dx1 = (_g40 - 1);
HXDLIN(  41)										::Dynamic this36 = this33->image;
HXDLIN(  41)										int index4;
HXDLIN(  41)										if (this33->useVirtualPos) {
HXLINE(  41)											index4 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this33->virtualY) * ( (Float)(this33->width) )) + dx1) - this33->virtualX));
            										}
            										else {
HXLINE(  41)											index4 = ::Std_obj::_hx_int(( (Float)(((dy1 * this33->width) + dx1)) ));
            										}
HXDLIN(  41)										int c3 = ::iterMagic::Iimg_obj::get(this36,index4);
HXDLIN(  41)										int col1;
HXDLIN(  41)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)											col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            										}
            										else {
HXLINE(  41)											col1 = c3;
            										}
HXDLIN(  41)										bool _hx_tmp8;
HXDLIN(  41)										if (this33->useMask) {
HXLINE(  41)											_hx_tmp8 = ::hx::IsNotNull( this33->mask );
            										}
            										else {
HXLINE(  41)											_hx_tmp8 = false;
            										}
HXDLIN(  41)										if (_hx_tmp8) {
HXLINE(  41)											 ::pi_xy::ImageStruct this37 = this33->mask;
HXDLIN(  41)											::Dynamic this38 = this37->image;
HXDLIN(  41)											int index5;
HXDLIN(  41)											if (this37->useVirtualPos) {
HXLINE(  41)												index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx1) - this37->virtualX));
            											}
            											else {
HXLINE(  41)												index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this37->width) + dx1)) ));
            											}
HXDLIN(  41)											int c4 = ::iterMagic::Iimg_obj::get(this38,index5);
HXDLIN(  41)											int v4;
HXDLIN(  41)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)												v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            											}
            											else {
HXLINE(  41)												v4 = c4;
            											}
HXDLIN(  41)											int maskPixel1 = v4;
HXDLIN(  41)											int this39 = col1;
HXDLIN(  41)											if ((maskPixel1 == 0)) {
HXLINE(  41)												col1 = this39;
            											}
            											else {
HXLINE(  41)												Float m01;
HXDLIN(  41)												int this40 = ((maskPixel1 >> 24) & 255);
HXDLIN(  41)												if ((this40 == 0)) {
HXLINE(  41)													m01 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													m01 = (( (Float)(this40) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float m11;
HXDLIN(  41)												int this41 = ((maskPixel1 >> 16) & 255);
HXDLIN(  41)												if ((this41 == 0)) {
HXLINE(  41)													m11 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													m11 = (( (Float)(this41) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float m21;
HXDLIN(  41)												int this42 = ((maskPixel1 >> 8) & 255);
HXDLIN(  41)												if ((this42 == 0)) {
HXLINE(  41)													m21 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													m21 = (( (Float)(this42) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float m31;
HXDLIN(  41)												int this43 = (maskPixel1 & 255);
HXDLIN(  41)												if ((this43 == 0)) {
HXLINE(  41)													m31 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													m31 = (( (Float)(this43) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this39 >> 24) & 255)) )));
HXDLIN(  41)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this39 >> 16) & 255)) )));
HXDLIN(  41)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this39 >> 8) & 255)) )));
HXDLIN(  41)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this39 & 255)) )));
HXDLIN(  41)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  41)										if ((col1 != 0)) {
HXLINE(  41)											int x5 = (dx1 - rectLeft1);
HXDLIN(  41)											int y5 = (dy1 - rectTop1);
HXDLIN(  41)											int c5 = col1;
HXDLIN(  41)											bool _hx_tmp9;
HXDLIN(  41)											if ((((c5 >> 24) & 255) < 254)) {
HXLINE(  41)												_hx_tmp9 = undoImage3->transparent;
            											}
            											else {
HXLINE(  41)												_hx_tmp9 = false;
            											}
HXDLIN(  41)											if (_hx_tmp9) {
HXLINE(  41)												int location2;
HXDLIN(  41)												if (undoImage3->useVirtualPos) {
HXLINE(  41)													location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  41)													location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  41)												int this44 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  41)												int this45;
HXDLIN(  41)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)													this45 = ((((((this44 >> 24) & 255) << 24) | ((this44 & 255) << 16)) | (((this44 >> 8) & 255) << 8)) | ((this44 >> 16) & 255));
            												}
            												else {
HXLINE(  41)													this45 = this44;
            												}
HXDLIN(  41)												Float a12;
HXDLIN(  41)												int this46 = ((this45 >> 24) & 255);
HXDLIN(  41)												if ((this46 == 0)) {
HXLINE(  41)													a12 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													a12 = (( (Float)(this46) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float r12;
HXDLIN(  41)												int this47 = ((this45 >> 16) & 255);
HXDLIN(  41)												if ((this47 == 0)) {
HXLINE(  41)													r12 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													r12 = (( (Float)(this47) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float g12;
HXDLIN(  41)												int this48 = ((this45 >> 8) & 255);
HXDLIN(  41)												if ((this48 == 0)) {
HXLINE(  41)													g12 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													g12 = (( (Float)(this48) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float b13;
HXDLIN(  41)												int this49 = (this45 & 255);
HXDLIN(  41)												if ((this49 == 0)) {
HXLINE(  41)													b13 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													b13 = (( (Float)(this49) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float a22;
HXDLIN(  41)												int this50 = ((col1 >> 24) & 255);
HXDLIN(  41)												if ((this50 == 0)) {
HXLINE(  41)													a22 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													a22 = (( (Float)(this50) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float r22;
HXDLIN(  41)												int this51 = ((col1 >> 16) & 255);
HXDLIN(  41)												if ((this51 == 0)) {
HXLINE(  41)													r22 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													r22 = (( (Float)(this51) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float g22;
HXDLIN(  41)												int this52 = ((col1 >> 8) & 255);
HXDLIN(  41)												if ((this52 == 0)) {
HXLINE(  41)													g22 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													g22 = (( (Float)(this52) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float b23;
HXDLIN(  41)												int this53 = (col1 & 255);
HXDLIN(  41)												if ((this53 == 0)) {
HXLINE(  41)													b23 = ((Float)0.);
            												}
            												else {
HXLINE(  41)													b23 = (( (Float)(this53) ) / ( (Float)(255) ));
            												}
HXDLIN(  41)												Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  41)												int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  41)												int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  41)												int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  41)												int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  41)												int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  41)												{
HXLINE(  41)													int _hx_tmp10;
HXDLIN(  41)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)														_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            													}
            													else {
HXLINE(  41)														_hx_tmp10 = blended2;
            													}
HXDLIN(  41)													::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            												}
            											}
            											else {
HXLINE(  41)												::Dynamic this54 = undoImage3->image;
HXDLIN(  41)												int index6;
HXDLIN(  41)												if (undoImage3->useVirtualPos) {
HXLINE(  41)													index6 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  41)													index6 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  41)												int _hx_tmp11;
HXDLIN(  41)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)													_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            												}
            												else {
HXLINE(  41)													_hx_tmp11 = c5;
            												}
HXDLIN(  41)												::iterMagic::Iimg_obj::set(this54,index6,_hx_tmp11);
            											}
            										}
            										else {
HXLINE(  41)											if (forceClear1) {
HXLINE(  41)												::Dynamic this55 = undoImage3->image;
HXDLIN(  41)												int x6 = (dx1 - rectLeft1);
HXDLIN(  41)												int y6 = (dy1 - rectTop1);
HXDLIN(  41)												int index7;
HXDLIN(  41)												if (undoImage3->useVirtualPos) {
HXLINE(  41)													index7 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  41)													index7 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            												}
HXDLIN(  41)												::iterMagic::Iimg_obj::set(this55,index7,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  41)				{
HXLINE(  41)					int _g_min2 = xIter31->start;
HXDLIN(  41)					int _g_max2 = xIter31->max;
HXDLIN(  41)					while((_g_min2 < _g_max2)){
HXLINE(  41)						_g_min2 = (_g_min2 + 1);
HXDLIN(  41)						int px1 = (_g_min2 - 1);
HXDLIN(  41)						Float pcx1 = (( (Float)(px1) ) - bx);
HXDLIN(  41)						{
HXLINE(  41)							int _g_min3 = yIter31->start;
HXDLIN(  41)							int _g_max3 = yIter31->max;
HXDLIN(  41)							while((_g_min3 < _g_max3)){
HXLINE(  41)								_g_min3 = (_g_min3 + 1);
HXDLIN(  41)								int py1 = (_g_min3 - 1);
HXDLIN(  41)								Float pcy1 = (( (Float)(py1) ) - y);
HXDLIN(  41)								Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  41)								Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  41)								Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  41)								Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  41)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  41)								bool _hx_tmp12;
HXDLIN(  41)								bool _hx_tmp13;
HXDLIN(  41)								if ((ratioA1 >= 0)) {
HXLINE(  41)									_hx_tmp13 = (ratioB1 >= 0);
            								}
            								else {
HXLINE(  41)									_hx_tmp13 = false;
            								}
HXDLIN(  41)								if (_hx_tmp13) {
HXLINE(  41)									_hx_tmp12 = (ratioC1 >= 0);
            								}
            								else {
HXLINE(  41)									_hx_tmp12 = false;
            								}
HXDLIN(  41)								if (_hx_tmp12) {
HXLINE(  41)									int i17 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN(  41)									if ((i17 > 255)) {
HXLINE(  24)										i17 = 255;
            									}
HXLINE(  41)									if ((i17 < 0)) {
HXLINE(  25)										i17 = 0;
            									}
HXLINE(  41)									int a9 = i17;
HXDLIN(  41)									int i18 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN(  41)									if ((i18 > 255)) {
HXLINE(  24)										i18 = 255;
            									}
HXLINE(  41)									if ((i18 < 0)) {
HXLINE(  25)										i18 = 0;
            									}
HXLINE(  41)									int r6 = i18;
HXDLIN(  41)									int i19 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN(  41)									if ((i19 > 255)) {
HXLINE(  24)										i19 = 255;
            									}
HXLINE(  41)									if ((i19 < 0)) {
HXLINE(  25)										i19 = 0;
            									}
HXLINE(  41)									int g6 = i19;
HXDLIN(  41)									int i20 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN(  41)									if ((i20 > 255)) {
HXLINE(  24)										i20 = 255;
            									}
HXLINE(  41)									if ((i20 < 0)) {
HXLINE(  25)										i20 = 0;
            									}
HXLINE(  41)									int b10 = i20;
HXDLIN(  41)									{
HXLINE(  41)										int location3;
HXDLIN(  41)										if (this33->useVirtualPos) {
HXLINE(  41)											location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this33->virtualY) * ( (Float)(this33->width) )) + px1) - this33->virtualX));
            										}
            										else {
HXLINE(  41)											location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this33->width) + px1)) ));
            										}
HXDLIN(  41)										bool _hx_tmp14;
HXDLIN(  41)										if (this33->transparent) {
HXLINE(  41)											_hx_tmp14 = (a9 < 254);
            										}
            										else {
HXLINE(  41)											_hx_tmp14 = false;
            										}
HXDLIN(  41)										if (_hx_tmp14) {
HXLINE(  41)											int this56 = ::iterMagic::Iimg_obj::get(this33->image,location3);
HXDLIN(  41)											int old1;
HXDLIN(  41)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)												old1 = ((((((this56 >> 24) & 255) << 24) | ((this56 & 255) << 16)) | (((this56 >> 8) & 255) << 8)) | ((this56 >> 16) & 255));
            											}
            											else {
HXLINE(  41)												old1 = this56;
            											}
HXDLIN(  41)											int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  41)											Float a13;
HXDLIN(  41)											int this57 = ((old1 >> 24) & 255);
HXDLIN(  41)											if ((this57 == 0)) {
HXLINE(  41)												a13 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												a13 = (( (Float)(this57) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float r13;
HXDLIN(  41)											int this58 = ((old1 >> 16) & 255);
HXDLIN(  41)											if ((this58 == 0)) {
HXLINE(  41)												r13 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												r13 = (( (Float)(this58) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float g13;
HXDLIN(  41)											int this59 = ((old1 >> 8) & 255);
HXDLIN(  41)											if ((this59 == 0)) {
HXLINE(  41)												g13 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												g13 = (( (Float)(this59) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float b14;
HXDLIN(  41)											int this60 = (old1 & 255);
HXDLIN(  41)											if ((this60 == 0)) {
HXLINE(  41)												b14 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												b14 = (( (Float)(this60) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float a23;
HXDLIN(  41)											int this61 = ((rhs1 >> 24) & 255);
HXDLIN(  41)											if ((this61 == 0)) {
HXLINE(  41)												a23 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												a23 = (( (Float)(this61) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float r23;
HXDLIN(  41)											int this62 = ((rhs1 >> 16) & 255);
HXDLIN(  41)											if ((this62 == 0)) {
HXLINE(  41)												r23 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												r23 = (( (Float)(this62) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float g23;
HXDLIN(  41)											int this63 = ((rhs1 >> 8) & 255);
HXDLIN(  41)											if ((this63 == 0)) {
HXLINE(  41)												g23 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												g23 = (( (Float)(this63) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float b24;
HXDLIN(  41)											int this64 = (rhs1 & 255);
HXDLIN(  41)											if ((this64 == 0)) {
HXLINE(  41)												b24 = ((Float)0.);
            											}
            											else {
HXLINE(  41)												b24 = (( (Float)(this64) ) / ( (Float)(255) ));
            											}
HXDLIN(  41)											Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  41)											int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  41)											int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  41)											int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  41)											int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  41)											int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN(  41)											{
HXLINE(  41)												int _hx_tmp15;
HXDLIN(  41)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  41)													_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            												}
            												else {
HXLINE(  41)													_hx_tmp15 = blended3;
            												}
HXDLIN(  41)												::iterMagic::Iimg_obj::set(this33->image,location3,_hx_tmp15);
            											}
            										}
            										else {
HXLINE(  41)											int value1;
HXDLIN(  41)											if (this33->isLittle) {
HXLINE(  41)												value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  41)												value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            											}
HXDLIN(  41)											::iterMagic::Iimg_obj::set(this33->image,location3,value1);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  41)				if ((hasHit1 == false)) {
HXLINE(  41)					 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,bx,y,true);
HXDLIN(  41)					if (hasUndo1) {
HXLINE(  41)						v5->undoImage = undoImage3;
HXDLIN(  41)						v5->undoX = xIter31->start;
HXDLIN(  41)						v5->undoY = yIter31->start;
            					}
            				}
            			}
            		}
HXLINE(  43)		lastX = bx;
HXLINE(  44)		lastY = y;
HXLINE(  45)		gap = (hi / ( (Float)(l) ));
HXLINE(  46)		{
HXLINE(  46)			int _g42 = 1;
HXDLIN(  46)			int _g43 = (( (int)(l) ) - 2);
HXDLIN(  46)			while((_g42 < _g43)){
HXLINE(  46)				_g42 = (_g42 + 1);
HXDLIN(  46)				int i21 = (_g42 - 1);
HXLINE(  47)				nextX = bx;
HXLINE(  48)				nextY = (y + (gap * ( (Float)(i21) )));
HXLINE(  49)				{
HXLINE(  49)					 ::pi_xy::ImageStruct this65 = pixelimage;
HXDLIN(  49)					{
HXLINE(  49)						bool hasHit2 = false;
HXDLIN(  49)						bool hasUndo2 = false;
HXDLIN(  49)						int aA2 = ((colorOut >> 24) & 255);
HXDLIN(  49)						int rA2 = ((colorOut >> 16) & 255);
HXDLIN(  49)						int gA2 = ((colorOut >> 8) & 255);
HXDLIN(  49)						int bA2 = (colorOut & 255);
HXDLIN(  49)						int aB2 = ((colorIn >> 24) & 255);
HXDLIN(  49)						int rB2 = ((colorIn >> 16) & 255);
HXDLIN(  49)						int gB2 = ((colorIn >> 8) & 255);
HXDLIN(  49)						int bB2 = (colorIn & 255);
HXDLIN(  49)						int aC2 = ((colorOut >> 24) & 255);
HXDLIN(  49)						int rC2 = ((colorOut >> 16) & 255);
HXDLIN(  49)						int gC2 = ((colorOut >> 8) & 255);
HXDLIN(  49)						int bC2 = (colorOut & 255);
HXDLIN(  49)						Float bcx2 = (lastX - nextX);
HXDLIN(  49)						Float bcy2 = (lastY - nextY);
HXDLIN(  49)						Float acx2 = (mx - nextX);
HXDLIN(  49)						Float acy2 = (my - nextY);
HXDLIN(  49)						Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  49)						Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  49)						Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  49)						Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  49)						 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  49)						if ((mx > lastX)) {
HXLINE(  49)							if ((mx > nextX)) {
HXLINE(  49)								int min8;
HXDLIN(  49)								if ((lastX > nextX)) {
HXLINE(  49)									min8 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  49)									min8 = ::Math_obj::floor(lastX);
            								}
HXDLIN(  49)								int ii_min16 = min8;
HXDLIN(  49)								int ii_max16 = ::Math_obj::ceil(mx);
HXDLIN(  49)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            							}
            							else {
HXLINE(  49)								int ii_min17 = ::Math_obj::floor(lastX);
HXDLIN(  49)								int ii_max17 = ::Math_obj::ceil(nextX);
HXDLIN(  49)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            							}
            						}
            						else {
HXLINE(  49)							if ((lastX > nextX)) {
HXLINE(  49)								int min9;
HXDLIN(  49)								if ((mx > nextX)) {
HXLINE(  49)									min9 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  49)									min9 = ::Math_obj::ceil(mx);
            								}
HXDLIN(  49)								int ii_min18 = min9;
HXDLIN(  49)								int ii_max18 = ::Math_obj::ceil(lastX);
HXDLIN(  49)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            							}
            							else {
HXLINE(  49)								int ii_min19 = ::Math_obj::floor(mx);
HXDLIN(  49)								int ii_max19 = ::Math_obj::ceil(nextX);
HXDLIN(  49)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            							}
            						}
HXDLIN(  49)						 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  49)						if ((my > lastY)) {
HXLINE(  49)							if ((my > nextY)) {
HXLINE(  49)								int min10;
HXDLIN(  49)								if ((lastY > nextY)) {
HXLINE(  49)									min10 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  49)									min10 = ::Math_obj::floor(lastY);
            								}
HXDLIN(  49)								int ii_min20 = min10;
HXDLIN(  49)								int ii_max20 = ::Math_obj::ceil(my);
HXDLIN(  49)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            							}
            							else {
HXLINE(  49)								int ii_min21 = ::Math_obj::floor(lastY);
HXDLIN(  49)								int ii_max21 = ::Math_obj::ceil(nextY);
HXDLIN(  49)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            							}
            						}
            						else {
HXLINE(  49)							if ((lastY > nextY)) {
HXLINE(  49)								int min11;
HXDLIN(  49)								if ((my > nextY)) {
HXLINE(  49)									min11 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  49)									min11 = ::Math_obj::ceil(my);
            								}
HXDLIN(  49)								int ii_min22 = min11;
HXDLIN(  49)								int ii_max22 = ::Math_obj::ceil(lastY);
HXDLIN(  49)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            							}
            							else {
HXLINE(  49)								int ii_min23 = ::Math_obj::floor(my);
HXDLIN(  49)								int ii_max23 = ::Math_obj::ceil(nextY);
HXDLIN(  49)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            							}
            						}
HXDLIN(  49)						 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  49)						if (hasUndo2) {
HXLINE(  49)							int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  49)							int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  49)							 ::Dynamic imageType2 = null();
HXDLIN(  49)							 ::pi_xy::ImageStruct this66 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  49)							if (::hx::IsNull( imageType2 )) {
HXLINE(  54)								imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  49)							::Dynamic undoImage7;
HXDLIN(  49)							switch((int)(( (int)(imageType2) ))){
            								case (int)0: {
HXLINE(  49)									 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  49)									 ::iterMagic::BytesImg b16 = byt2;
HXDLIN(  49)									{
HXLINE(  49)										b16->width = width2;
HXDLIN(  49)										b16->height = height2;
HXDLIN(  49)										b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  49)										b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN(  49)										{
HXLINE(  49)											int len4 = b16->length;
HXDLIN(  49)											int w2 = 0;
HXDLIN(  49)											{
HXLINE(  49)												int _g44 = 0;
HXDLIN(  49)												int _g45 = b16->height;
HXDLIN(  49)												while((_g44 < _g45)){
HXLINE(  49)													_g44 = (_g44 + 1);
HXDLIN(  49)													int y7 = (_g44 - 1);
HXDLIN(  49)													{
HXLINE(  49)														int _g46 = 0;
HXDLIN(  49)														int _g47 = b16->width;
HXDLIN(  49)														while((_g46 < _g47)){
HXLINE(  49)															_g46 = (_g46 + 1);
HXDLIN(  49)															int x7 = (_g46 - 1);
HXDLIN(  49)															{
HXLINE(  49)																w2 = (w2 + 1);
HXDLIN(  49)																b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  49)															{
HXLINE(  49)																w2 = (w2 + 1);
HXDLIN(  49)																b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  49)															{
HXLINE(  49)																w2 = (w2 + 1);
HXDLIN(  49)																b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  49)															{
HXLINE(  49)																w2 = (w2 + 1);
HXDLIN(  49)																b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  49)									undoImage7 = b16;
            								}
            								break;
            								case (int)1: {
HXLINE(  49)									 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  49)									 ::iterMagic::ArrIntImg a14 = arrI2;
HXDLIN(  49)									{
HXLINE(  49)										a14->width = width2;
HXDLIN(  49)										a14->height = height2;
HXDLIN(  49)										a14->data = ::Array_obj< int >::__new(0);
HXDLIN(  49)										a14->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  49)										{
HXLINE(  49)											int _g48 = 0;
HXDLIN(  49)											int _g49 = a14->length;
HXDLIN(  49)											while((_g48 < _g49)){
HXLINE(  49)												_g48 = (_g48 + 1);
HXDLIN(  49)												int i22 = (_g48 - 1);
HXDLIN(  49)												a14->data[i22] = 0;
            											}
            										}
            									}
HXDLIN(  49)									undoImage7 = a14;
            								}
            								break;
            								case (int)2: {
HXLINE(  49)									 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  49)									 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN(  49)									{
HXLINE(  49)										b17->width = width2;
HXDLIN(  49)										b17->height = height2;
HXDLIN(  49)										b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  49)										int size2 = (b17->length * 4);
HXDLIN(  49)										b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  49)										{
HXLINE(  49)											int _g50 = 0;
HXDLIN(  49)											int _g51 = b17->length;
HXDLIN(  49)											while((_g50 < _g51)){
HXLINE(  49)												_g50 = (_g50 + 1);
HXDLIN(  49)												int i23 = (_g50 - 1);
HXDLIN(  49)												{
HXLINE(  49)													 ::haxe::io::ArrayBufferViewImpl this67 = b17->data;
HXDLIN(  49)													bool undoImage8;
HXDLIN(  49)													if ((i23 >= 0)) {
HXLINE(  49)														undoImage8 = (i23 < (this67->byteLength >> 2));
            													}
            													else {
HXLINE(  49)														undoImage8 = false;
            													}
HXDLIN(  49)													if (undoImage8) {
HXLINE(  49)														 ::haxe::io::Bytes _this2 = this67->bytes;
HXDLIN(  49)														int pos2 = ((i23 << 2) + this67->byteOffset);
HXDLIN(  49)														_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  49)														_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  49)														_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  49)														_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  49)									undoImage7 = b17;
            								}
            								break;
            								case (int)3: {
HXLINE(  49)									 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  49)									 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN(  49)									{
HXLINE(  49)										v6->width = width2;
HXDLIN(  49)										v6->height = height2;
HXDLIN(  49)										v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  49)										v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  49)										{
HXLINE(  49)											int _g52 = 0;
HXDLIN(  49)											int _g53 = v6->length;
HXDLIN(  49)											while((_g52 < _g53)){
HXLINE(  49)												_g52 = (_g52 + 1);
HXDLIN(  49)												int i24 = (_g52 - 1);
HXDLIN(  49)												v6->data->__unsafe_set(i24,0);
            											}
            										}
            									}
HXDLIN(  49)									undoImage7 = v6;
            								}
            								break;
            								case (int)4: {
HXLINE(  49)									 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  49)									 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN(  49)									{
HXLINE(  49)										b18->width = width2;
HXDLIN(  49)										b18->height = height2;
HXDLIN(  49)										b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  49)										b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  49)										{
HXLINE(  49)											int len5 = b18->length;
HXDLIN(  49)											 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN(  49)											if (::hx::IsNull( d2->head )) {
HXLINE(  49)												int _g54 = 0;
HXDLIN(  49)												int _g55 = len5;
HXDLIN(  49)												while((_g54 < _g55)){
HXLINE(  49)													_g54 = (_g54 + 1);
HXDLIN(  49)													int i25 = (_g54 - 1);
HXDLIN(  49)													d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            												}
            											}
            											else {
HXLINE(  49)												int _g56 = 0;
HXDLIN(  49)												int _g57 = len5;
HXDLIN(  49)												while((_g56 < _g57)){
HXLINE(  49)													_g56 = (_g56 + 1);
HXDLIN(  49)													int i26 = (_g56 - 1);
HXDLIN(  49)													{
HXLINE(  49)														 ::haxe::ds::GenericCell_Int l3 = b18->data->head;
HXDLIN(  49)														 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  49)														{
HXLINE(  49)															int _g58 = 0;
HXDLIN(  49)															int _g59 = i26;
HXDLIN(  49)															while((_g58 < _g59)){
HXLINE(  49)																_g58 = (_g58 + 1);
HXDLIN(  49)																int i27 = (_g58 - 1);
HXLINE( 345)																prev2 = l3;
HXLINE( 346)																l3 = l3->next;
            															}
            														}
HXLINE(  49)														if (::hx::IsNull( prev2 )) {
HXLINE(  49)															b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  49)															l3 = null();
            														}
            														else {
HXLINE(  49)															prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  49)															l3 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  49)									undoImage7 = b18;
            								}
            								break;
            							}
HXDLIN(  49)							this66->image = undoImage7;
HXDLIN(  49)							this66->width = width2;
HXDLIN(  49)							this66->height = height2;
HXDLIN(  49)							this66->imageType = ( (int)(imageType2) );
HXDLIN(  49)							undoImage6 = this66;
HXDLIN(  49)							{
HXLINE(  49)								int rectLeft2 = xIter32->start;
HXDLIN(  49)								int rectTop2 = yIter32->start;
HXDLIN(  49)								int rectRight2 = xIter32->max;
HXDLIN(  49)								bool forceClear2 = false;
HXDLIN(  49)								{
HXLINE(  49)									int _g60 = rectTop2;
HXDLIN(  49)									int _g61 = yIter32->max;
HXDLIN(  49)									while((_g60 < _g61)){
HXLINE(  49)										_g60 = (_g60 + 1);
HXDLIN(  49)										int dy2 = (_g60 - 1);
HXDLIN(  49)										{
HXLINE(  49)											int _g62 = rectLeft2;
HXDLIN(  49)											int _g63 = rectRight2;
HXDLIN(  49)											while((_g62 < _g63)){
HXLINE(  49)												_g62 = (_g62 + 1);
HXDLIN(  49)												int dx2 = (_g62 - 1);
HXDLIN(  49)												::Dynamic this68 = this65->image;
HXDLIN(  49)												int index8;
HXDLIN(  49)												if (this65->useVirtualPos) {
HXLINE(  49)													index8 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this65->virtualY) * ( (Float)(this65->width) )) + dx2) - this65->virtualX));
            												}
            												else {
HXLINE(  49)													index8 = ::Std_obj::_hx_int(( (Float)(((dy2 * this65->width) + dx2)) ));
            												}
HXDLIN(  49)												int c6 = ::iterMagic::Iimg_obj::get(this68,index8);
HXDLIN(  49)												int col2;
HXDLIN(  49)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)													col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            												}
            												else {
HXLINE(  49)													col2 = c6;
            												}
HXDLIN(  49)												bool _hx_tmp16;
HXDLIN(  49)												if (this65->useMask) {
HXLINE(  49)													_hx_tmp16 = ::hx::IsNotNull( this65->mask );
            												}
            												else {
HXLINE(  49)													_hx_tmp16 = false;
            												}
HXDLIN(  49)												if (_hx_tmp16) {
HXLINE(  49)													 ::pi_xy::ImageStruct this69 = this65->mask;
HXDLIN(  49)													::Dynamic this70 = this69->image;
HXDLIN(  49)													int index9;
HXDLIN(  49)													if (this69->useVirtualPos) {
HXLINE(  49)														index9 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this69->virtualY) * ( (Float)(this69->width) )) + dx2) - this69->virtualX));
            													}
            													else {
HXLINE(  49)														index9 = ::Std_obj::_hx_int(( (Float)(((dy2 * this69->width) + dx2)) ));
            													}
HXDLIN(  49)													int c7 = ::iterMagic::Iimg_obj::get(this70,index9);
HXDLIN(  49)													int v7;
HXDLIN(  49)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)														v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            													}
            													else {
HXLINE(  49)														v7 = c7;
            													}
HXDLIN(  49)													int maskPixel2 = v7;
HXDLIN(  49)													int this71 = col2;
HXDLIN(  49)													if ((maskPixel2 == 0)) {
HXLINE(  49)														col2 = this71;
            													}
            													else {
HXLINE(  49)														Float m02;
HXDLIN(  49)														int this72 = ((maskPixel2 >> 24) & 255);
HXDLIN(  49)														if ((this72 == 0)) {
HXLINE(  49)															m02 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															m02 = (( (Float)(this72) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float m12;
HXDLIN(  49)														int this73 = ((maskPixel2 >> 16) & 255);
HXDLIN(  49)														if ((this73 == 0)) {
HXLINE(  49)															m12 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															m12 = (( (Float)(this73) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float m22;
HXDLIN(  49)														int this74 = ((maskPixel2 >> 8) & 255);
HXDLIN(  49)														if ((this74 == 0)) {
HXLINE(  49)															m22 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															m22 = (( (Float)(this74) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float m32;
HXDLIN(  49)														int this75 = (maskPixel2 & 255);
HXDLIN(  49)														if ((this75 == 0)) {
HXLINE(  49)															m32 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															m32 = (( (Float)(this75) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this71 >> 24) & 255)) )));
HXDLIN(  49)														int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this71 >> 16) & 255)) )));
HXDLIN(  49)														int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this71 >> 8) & 255)) )));
HXDLIN(  49)														int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this71 & 255)) )));
HXDLIN(  49)														col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  49)												if ((col2 != 0)) {
HXLINE(  49)													int x8 = (dx2 - rectLeft2);
HXDLIN(  49)													int y8 = (dy2 - rectTop2);
HXDLIN(  49)													int c8 = col2;
HXDLIN(  49)													bool _hx_tmp17;
HXDLIN(  49)													if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  49)														_hx_tmp17 = undoImage6->transparent;
            													}
            													else {
HXLINE(  49)														_hx_tmp17 = false;
            													}
HXDLIN(  49)													if (_hx_tmp17) {
HXLINE(  49)														int location4;
HXDLIN(  49)														if (undoImage6->useVirtualPos) {
HXLINE(  49)															location4 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            														}
            														else {
HXLINE(  49)															location4 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            														}
HXDLIN(  49)														int this76 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  49)														int this77;
HXDLIN(  49)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)															this77 = ((((((this76 >> 24) & 255) << 24) | ((this76 & 255) << 16)) | (((this76 >> 8) & 255) << 8)) | ((this76 >> 16) & 255));
            														}
            														else {
HXLINE(  49)															this77 = this76;
            														}
HXDLIN(  49)														Float a15;
HXDLIN(  49)														int this78 = ((this77 >> 24) & 255);
HXDLIN(  49)														if ((this78 == 0)) {
HXLINE(  49)															a15 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															a15 = (( (Float)(this78) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float r14;
HXDLIN(  49)														int this79 = ((this77 >> 16) & 255);
HXDLIN(  49)														if ((this79 == 0)) {
HXLINE(  49)															r14 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															r14 = (( (Float)(this79) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float g14;
HXDLIN(  49)														int this80 = ((this77 >> 8) & 255);
HXDLIN(  49)														if ((this80 == 0)) {
HXLINE(  49)															g14 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															g14 = (( (Float)(this80) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float b19;
HXDLIN(  49)														int this81 = (this77 & 255);
HXDLIN(  49)														if ((this81 == 0)) {
HXLINE(  49)															b19 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															b19 = (( (Float)(this81) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float a24;
HXDLIN(  49)														int this82 = ((col2 >> 24) & 255);
HXDLIN(  49)														if ((this82 == 0)) {
HXLINE(  49)															a24 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															a24 = (( (Float)(this82) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float r24;
HXDLIN(  49)														int this83 = ((col2 >> 16) & 255);
HXDLIN(  49)														if ((this83 == 0)) {
HXLINE(  49)															r24 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															r24 = (( (Float)(this83) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float g24;
HXDLIN(  49)														int this84 = ((col2 >> 8) & 255);
HXDLIN(  49)														if ((this84 == 0)) {
HXLINE(  49)															g24 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															g24 = (( (Float)(this84) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float b25;
HXDLIN(  49)														int this85 = (col2 & 255);
HXDLIN(  49)														if ((this85 == 0)) {
HXLINE(  49)															b25 = ((Float)0.);
            														}
            														else {
HXLINE(  49)															b25 = (( (Float)(this85) ) / ( (Float)(255) ));
            														}
HXDLIN(  49)														Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  49)														int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  49)														int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  49)														int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN(  49)														int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  49)														int blended4 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN(  49)														{
HXLINE(  49)															int _hx_tmp18;
HXDLIN(  49)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)																_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            															}
            															else {
HXLINE(  49)																_hx_tmp18 = blended4;
            															}
HXDLIN(  49)															::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            														}
            													}
            													else {
HXLINE(  49)														::Dynamic this86 = undoImage6->image;
HXDLIN(  49)														int index10;
HXDLIN(  49)														if (undoImage6->useVirtualPos) {
HXLINE(  49)															index10 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            														}
            														else {
HXLINE(  49)															index10 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            														}
HXDLIN(  49)														int _hx_tmp19;
HXDLIN(  49)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)															_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            														}
            														else {
HXLINE(  49)															_hx_tmp19 = c8;
            														}
HXDLIN(  49)														::iterMagic::Iimg_obj::set(this86,index10,_hx_tmp19);
            													}
            												}
            												else {
HXLINE(  49)													if (forceClear2) {
HXLINE(  49)														::Dynamic this87 = undoImage6->image;
HXDLIN(  49)														int x9 = (dx2 - rectLeft2);
HXDLIN(  49)														int y9 = (dy2 - rectTop2);
HXDLIN(  49)														int index11;
HXDLIN(  49)														if (undoImage6->useVirtualPos) {
HXLINE(  49)															index11 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            														}
            														else {
HXLINE(  49)															index11 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            														}
HXDLIN(  49)														::iterMagic::Iimg_obj::set(this87,index11,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  49)						{
HXLINE(  49)							int _g_min4 = xIter32->start;
HXDLIN(  49)							int _g_max4 = xIter32->max;
HXDLIN(  49)							while((_g_min4 < _g_max4)){
HXLINE(  49)								_g_min4 = (_g_min4 + 1);
HXDLIN(  49)								int px2 = (_g_min4 - 1);
HXDLIN(  49)								Float pcx2 = (( (Float)(px2) ) - nextX);
HXDLIN(  49)								{
HXLINE(  49)									int _g_min5 = yIter32->start;
HXDLIN(  49)									int _g_max5 = yIter32->max;
HXDLIN(  49)									while((_g_min5 < _g_max5)){
HXLINE(  49)										_g_min5 = (_g_min5 + 1);
HXDLIN(  49)										int py2 = (_g_min5 - 1);
HXDLIN(  49)										Float pcy2 = (( (Float)(py2) ) - nextY);
HXDLIN(  49)										Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  49)										Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  49)										Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  49)										Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  49)										Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  49)										bool _hx_tmp20;
HXDLIN(  49)										bool _hx_tmp21;
HXDLIN(  49)										if ((ratioA2 >= 0)) {
HXLINE(  49)											_hx_tmp21 = (ratioB2 >= 0);
            										}
            										else {
HXLINE(  49)											_hx_tmp21 = false;
            										}
HXDLIN(  49)										if (_hx_tmp21) {
HXLINE(  49)											_hx_tmp20 = (ratioC2 >= 0);
            										}
            										else {
HXLINE(  49)											_hx_tmp20 = false;
            										}
HXDLIN(  49)										if (_hx_tmp20) {
HXLINE(  49)											int i28 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN(  49)											if ((i28 > 255)) {
HXLINE(  24)												i28 = 255;
            											}
HXLINE(  49)											if ((i28 < 0)) {
HXLINE(  25)												i28 = 0;
            											}
HXLINE(  49)											int a17 = i28;
HXDLIN(  49)											int i29 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN(  49)											if ((i29 > 255)) {
HXLINE(  24)												i29 = 255;
            											}
HXLINE(  49)											if ((i29 < 0)) {
HXLINE(  25)												i29 = 0;
            											}
HXLINE(  49)											int r9 = i29;
HXDLIN(  49)											int i30 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN(  49)											if ((i30 > 255)) {
HXLINE(  24)												i30 = 255;
            											}
HXLINE(  49)											if ((i30 < 0)) {
HXLINE(  25)												i30 = 0;
            											}
HXLINE(  49)											int g9 = i30;
HXDLIN(  49)											int i31 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN(  49)											if ((i31 > 255)) {
HXLINE(  24)												i31 = 255;
            											}
HXLINE(  49)											if ((i31 < 0)) {
HXLINE(  25)												i31 = 0;
            											}
HXLINE(  49)											int b26 = i31;
HXDLIN(  49)											{
HXLINE(  49)												int location5;
HXDLIN(  49)												if (this65->useVirtualPos) {
HXLINE(  49)													location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this65->virtualY) * ( (Float)(this65->width) )) + px2) - this65->virtualX));
            												}
            												else {
HXLINE(  49)													location5 = ::Std_obj::_hx_int(( (Float)(((py2 * this65->width) + px2)) ));
            												}
HXDLIN(  49)												bool _hx_tmp22;
HXDLIN(  49)												if (this65->transparent) {
HXLINE(  49)													_hx_tmp22 = (a17 < 254);
            												}
            												else {
HXLINE(  49)													_hx_tmp22 = false;
            												}
HXDLIN(  49)												if (_hx_tmp22) {
HXLINE(  49)													int this88 = ::iterMagic::Iimg_obj::get(this65->image,location5);
HXDLIN(  49)													int old2;
HXDLIN(  49)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)														old2 = ((((((this88 >> 24) & 255) << 24) | ((this88 & 255) << 16)) | (((this88 >> 8) & 255) << 8)) | ((this88 >> 16) & 255));
            													}
            													else {
HXLINE(  49)														old2 = this88;
            													}
HXDLIN(  49)													int rhs2 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN(  49)													Float a18;
HXDLIN(  49)													int this89 = ((old2 >> 24) & 255);
HXDLIN(  49)													if ((this89 == 0)) {
HXLINE(  49)														a18 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														a18 = (( (Float)(this89) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float r15;
HXDLIN(  49)													int this90 = ((old2 >> 16) & 255);
HXDLIN(  49)													if ((this90 == 0)) {
HXLINE(  49)														r15 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														r15 = (( (Float)(this90) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float g15;
HXDLIN(  49)													int this91 = ((old2 >> 8) & 255);
HXDLIN(  49)													if ((this91 == 0)) {
HXLINE(  49)														g15 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														g15 = (( (Float)(this91) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float b110;
HXDLIN(  49)													int this92 = (old2 & 255);
HXDLIN(  49)													if ((this92 == 0)) {
HXLINE(  49)														b110 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														b110 = (( (Float)(this92) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float a25;
HXDLIN(  49)													int this93 = ((rhs2 >> 24) & 255);
HXDLIN(  49)													if ((this93 == 0)) {
HXLINE(  49)														a25 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														a25 = (( (Float)(this93) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float r25;
HXDLIN(  49)													int this94 = ((rhs2 >> 16) & 255);
HXDLIN(  49)													if ((this94 == 0)) {
HXLINE(  49)														r25 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														r25 = (( (Float)(this94) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float g25;
HXDLIN(  49)													int this95 = ((rhs2 >> 8) & 255);
HXDLIN(  49)													if ((this95 == 0)) {
HXLINE(  49)														g25 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														g25 = (( (Float)(this95) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float b27;
HXDLIN(  49)													int this96 = (rhs2 & 255);
HXDLIN(  49)													if ((this96 == 0)) {
HXLINE(  49)														b27 = ((Float)0.);
            													}
            													else {
HXLINE(  49)														b27 = (( (Float)(this96) ) / ( (Float)(255) ));
            													}
HXDLIN(  49)													Float a35 = (a18 * (( (Float)(1) ) - a25));
HXDLIN(  49)													int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  49)													int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  49)													int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN(  49)													int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  49)													int blended5 = ((((a19 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN(  49)													{
HXLINE(  49)														int _hx_tmp23;
HXDLIN(  49)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  49)															_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            														}
            														else {
HXLINE(  49)															_hx_tmp23 = blended5;
            														}
HXDLIN(  49)														::iterMagic::Iimg_obj::set(this65->image,location5,_hx_tmp23);
            													}
            												}
            												else {
HXLINE(  49)													int value2;
HXDLIN(  49)													if (this65->isLittle) {
HXLINE(  49)														value2 = ((((a17 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            													}
            													else {
HXLINE(  49)														value2 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            													}
HXDLIN(  49)													::iterMagic::Iimg_obj::set(this65->image,location5,value2);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  49)						if ((hasHit2 == false)) {
HXLINE(  49)							 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,nextX,nextY,true);
HXDLIN(  49)							if (hasUndo2) {
HXLINE(  49)								v8->undoImage = undoImage6;
HXDLIN(  49)								v8->undoX = xIter32->start;
HXDLIN(  49)								v8->undoY = yIter32->start;
            							}
            						}
            					}
            				}
HXLINE(  50)				lastX = nextX;
HXLINE(  51)				lastY = nextY;
            			}
            		}
HXLINE(  53)		{
HXLINE(  53)			 ::pi_xy::ImageStruct this97 = pixelimage;
HXDLIN(  53)			{
HXLINE(  53)				bool hasHit3 = false;
HXDLIN(  53)				bool hasUndo3 = false;
HXDLIN(  53)				int aA3 = ((colorOut >> 24) & 255);
HXDLIN(  53)				int rA3 = ((colorOut >> 16) & 255);
HXDLIN(  53)				int gA3 = ((colorOut >> 8) & 255);
HXDLIN(  53)				int bA3 = (colorOut & 255);
HXDLIN(  53)				int aB3 = ((colorIn >> 24) & 255);
HXDLIN(  53)				int rB3 = ((colorIn >> 16) & 255);
HXDLIN(  53)				int gB3 = ((colorIn >> 8) & 255);
HXDLIN(  53)				int bB3 = (colorIn & 255);
HXDLIN(  53)				int aC3 = ((colorOut >> 24) & 255);
HXDLIN(  53)				int rC3 = ((colorOut >> 16) & 255);
HXDLIN(  53)				int gC3 = ((colorOut >> 8) & 255);
HXDLIN(  53)				int bC3 = (colorOut & 255);
HXDLIN(  53)				Float bcx3 = (lastX - bx);
HXDLIN(  53)				Float bcy3 = (lastY - cy);
HXDLIN(  53)				Float acx3 = (mx - bx);
HXDLIN(  53)				Float acy3 = (my - cy);
HXDLIN(  53)				Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  53)				Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  53)				Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  53)				Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  53)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  53)				if ((mx > lastX)) {
HXLINE(  53)					if ((mx > bx)) {
HXLINE(  53)						int min12;
HXDLIN(  53)						if ((lastX > bx)) {
HXLINE(  53)							min12 = ::Math_obj::floor(bx);
            						}
            						else {
HXLINE(  53)							min12 = ::Math_obj::floor(lastX);
            						}
HXDLIN(  53)						int ii_min24 = min12;
HXDLIN(  53)						int ii_max24 = ::Math_obj::ceil(mx);
HXDLIN(  53)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            					}
            					else {
HXLINE(  53)						int ii_min25 = ::Math_obj::floor(lastX);
HXDLIN(  53)						int ii_max25 = ::Math_obj::ceil(bx);
HXDLIN(  53)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            					}
            				}
            				else {
HXLINE(  53)					if ((lastX > bx)) {
HXLINE(  53)						int min13;
HXDLIN(  53)						if ((mx > bx)) {
HXLINE(  53)							min13 = ::Math_obj::floor(bx);
            						}
            						else {
HXLINE(  53)							min13 = ::Math_obj::ceil(mx);
            						}
HXDLIN(  53)						int ii_min26 = min13;
HXDLIN(  53)						int ii_max26 = ::Math_obj::ceil(lastX);
HXDLIN(  53)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            					}
            					else {
HXLINE(  53)						int ii_min27 = ::Math_obj::floor(mx);
HXDLIN(  53)						int ii_max27 = ::Math_obj::ceil(bx);
HXDLIN(  53)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            					}
            				}
HXDLIN(  53)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  53)				if ((my > lastY)) {
HXLINE(  53)					if ((my > cy)) {
HXLINE(  53)						int min14;
HXDLIN(  53)						if ((lastY > cy)) {
HXLINE(  53)							min14 = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  53)							min14 = ::Math_obj::floor(lastY);
            						}
HXDLIN(  53)						int ii_min28 = min14;
HXDLIN(  53)						int ii_max28 = ::Math_obj::ceil(my);
HXDLIN(  53)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            					}
            					else {
HXLINE(  53)						int ii_min29 = ::Math_obj::floor(lastY);
HXDLIN(  53)						int ii_max29 = ::Math_obj::ceil(cy);
HXDLIN(  53)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            					}
            				}
            				else {
HXLINE(  53)					if ((lastY > cy)) {
HXLINE(  53)						int min15;
HXDLIN(  53)						if ((my > cy)) {
HXLINE(  53)							min15 = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  53)							min15 = ::Math_obj::ceil(my);
            						}
HXDLIN(  53)						int ii_min30 = min15;
HXDLIN(  53)						int ii_max30 = ::Math_obj::ceil(lastY);
HXDLIN(  53)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            					}
            					else {
HXLINE(  53)						int ii_min31 = ::Math_obj::floor(my);
HXDLIN(  53)						int ii_max31 = ::Math_obj::ceil(cy);
HXDLIN(  53)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            					}
            				}
HXDLIN(  53)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  53)				if (hasUndo3) {
HXLINE(  53)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  53)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  53)					 ::Dynamic imageType3 = null();
HXDLIN(  53)					 ::pi_xy::ImageStruct this98 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  53)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  53)					::Dynamic undoImage10;
HXDLIN(  53)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXLINE(  53)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  53)							 ::iterMagic::BytesImg b29 = byt3;
HXDLIN(  53)							{
HXLINE(  53)								b29->width = width3;
HXDLIN(  53)								b29->height = height3;
HXDLIN(  53)								b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  53)								b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN(  53)								{
HXLINE(  53)									int len6 = b29->length;
HXDLIN(  53)									int w3 = 0;
HXDLIN(  53)									{
HXLINE(  53)										int _g64 = 0;
HXDLIN(  53)										int _g65 = b29->height;
HXDLIN(  53)										while((_g64 < _g65)){
HXLINE(  53)											_g64 = (_g64 + 1);
HXDLIN(  53)											int y10 = (_g64 - 1);
HXDLIN(  53)											{
HXLINE(  53)												int _g66 = 0;
HXDLIN(  53)												int _g67 = b29->width;
HXDLIN(  53)												while((_g66 < _g67)){
HXLINE(  53)													_g66 = (_g66 + 1);
HXDLIN(  53)													int x10 = (_g66 - 1);
HXDLIN(  53)													{
HXLINE(  53)														w3 = (w3 + 1);
HXDLIN(  53)														b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  53)													{
HXLINE(  53)														w3 = (w3 + 1);
HXDLIN(  53)														b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  53)													{
HXLINE(  53)														w3 = (w3 + 1);
HXDLIN(  53)														b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  53)													{
HXLINE(  53)														w3 = (w3 + 1);
HXDLIN(  53)														b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  53)							undoImage10 = b29;
            						}
            						break;
            						case (int)1: {
HXLINE(  53)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  53)							 ::iterMagic::ArrIntImg a20 = arrI3;
HXDLIN(  53)							{
HXLINE(  53)								a20->width = width3;
HXDLIN(  53)								a20->height = height3;
HXDLIN(  53)								a20->data = ::Array_obj< int >::__new(0);
HXDLIN(  53)								a20->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  53)								{
HXLINE(  53)									int _g68 = 0;
HXDLIN(  53)									int _g69 = a20->length;
HXDLIN(  53)									while((_g68 < _g69)){
HXLINE(  53)										_g68 = (_g68 + 1);
HXDLIN(  53)										int i32 = (_g68 - 1);
HXDLIN(  53)										a20->data[i32] = 0;
            									}
            								}
            							}
HXDLIN(  53)							undoImage10 = a20;
            						}
            						break;
            						case (int)2: {
HXLINE(  53)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  53)							 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN(  53)							{
HXLINE(  53)								b30->width = width3;
HXDLIN(  53)								b30->height = height3;
HXDLIN(  53)								b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  53)								int size3 = (b30->length * 4);
HXDLIN(  53)								b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  53)								{
HXLINE(  53)									int _g70 = 0;
HXDLIN(  53)									int _g71 = b30->length;
HXDLIN(  53)									while((_g70 < _g71)){
HXLINE(  53)										_g70 = (_g70 + 1);
HXDLIN(  53)										int i33 = (_g70 - 1);
HXDLIN(  53)										{
HXLINE(  53)											 ::haxe::io::ArrayBufferViewImpl this99 = b30->data;
HXDLIN(  53)											bool undoImage11;
HXDLIN(  53)											if ((i33 >= 0)) {
HXLINE(  53)												undoImage11 = (i33 < (this99->byteLength >> 2));
            											}
            											else {
HXLINE(  53)												undoImage11 = false;
            											}
HXDLIN(  53)											if (undoImage11) {
HXLINE(  53)												 ::haxe::io::Bytes _this3 = this99->bytes;
HXDLIN(  53)												int pos3 = ((i33 << 2) + this99->byteOffset);
HXDLIN(  53)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  53)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  53)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  53)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  53)							undoImage10 = b30;
            						}
            						break;
            						case (int)3: {
HXLINE(  53)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  53)							 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN(  53)							{
HXLINE(  53)								v9->width = width3;
HXDLIN(  53)								v9->height = height3;
HXDLIN(  53)								v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  53)								v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  53)								{
HXLINE(  53)									int _g72 = 0;
HXDLIN(  53)									int _g73 = v9->length;
HXDLIN(  53)									while((_g72 < _g73)){
HXLINE(  53)										_g72 = (_g72 + 1);
HXDLIN(  53)										int i34 = (_g72 - 1);
HXDLIN(  53)										v9->data->__unsafe_set(i34,0);
            									}
            								}
            							}
HXDLIN(  53)							undoImage10 = v9;
            						}
            						break;
            						case (int)4: {
HXLINE(  53)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  53)							 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN(  53)							{
HXLINE(  53)								b31->width = width3;
HXDLIN(  53)								b31->height = height3;
HXDLIN(  53)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  53)								b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  53)								{
HXLINE(  53)									int len7 = b31->length;
HXDLIN(  53)									 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN(  53)									if (::hx::IsNull( d3->head )) {
HXLINE(  53)										int _g74 = 0;
HXDLIN(  53)										int _g75 = len7;
HXDLIN(  53)										while((_g74 < _g75)){
HXLINE(  53)											_g74 = (_g74 + 1);
HXDLIN(  53)											int i35 = (_g74 - 1);
HXDLIN(  53)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXLINE(  53)										int _g76 = 0;
HXDLIN(  53)										int _g77 = len7;
HXDLIN(  53)										while((_g76 < _g77)){
HXLINE(  53)											_g76 = (_g76 + 1);
HXDLIN(  53)											int i36 = (_g76 - 1);
HXDLIN(  53)											{
HXLINE(  53)												 ::haxe::ds::GenericCell_Int l4 = b31->data->head;
HXDLIN(  53)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  53)												{
HXLINE(  53)													int _g78 = 0;
HXDLIN(  53)													int _g79 = i36;
HXDLIN(  53)													while((_g78 < _g79)){
HXLINE(  53)														_g78 = (_g78 + 1);
HXDLIN(  53)														int i37 = (_g78 - 1);
HXLINE( 345)														prev3 = l4;
HXLINE( 346)														l4 = l4->next;
            													}
            												}
HXLINE(  53)												if (::hx::IsNull( prev3 )) {
HXLINE(  53)													b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  53)													l4 = null();
            												}
            												else {
HXLINE(  53)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  53)													l4 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  53)							undoImage10 = b31;
            						}
            						break;
            					}
HXDLIN(  53)					this98->image = undoImage10;
HXDLIN(  53)					this98->width = width3;
HXDLIN(  53)					this98->height = height3;
HXDLIN(  53)					this98->imageType = ( (int)(imageType3) );
HXDLIN(  53)					undoImage9 = this98;
HXDLIN(  53)					{
HXLINE(  53)						int rectLeft3 = xIter33->start;
HXDLIN(  53)						int rectTop3 = yIter33->start;
HXDLIN(  53)						int rectRight3 = xIter33->max;
HXDLIN(  53)						bool forceClear3 = false;
HXDLIN(  53)						{
HXLINE(  53)							int _g80 = rectTop3;
HXDLIN(  53)							int _g81 = yIter33->max;
HXDLIN(  53)							while((_g80 < _g81)){
HXLINE(  53)								_g80 = (_g80 + 1);
HXDLIN(  53)								int dy3 = (_g80 - 1);
HXDLIN(  53)								{
HXLINE(  53)									int _g82 = rectLeft3;
HXDLIN(  53)									int _g83 = rectRight3;
HXDLIN(  53)									while((_g82 < _g83)){
HXLINE(  53)										_g82 = (_g82 + 1);
HXDLIN(  53)										int dx3 = (_g82 - 1);
HXDLIN(  53)										::Dynamic this100 = this97->image;
HXDLIN(  53)										int index12;
HXDLIN(  53)										if (this97->useVirtualPos) {
HXLINE(  53)											index12 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx3) - this97->virtualX));
            										}
            										else {
HXLINE(  53)											index12 = ::Std_obj::_hx_int(( (Float)(((dy3 * this97->width) + dx3)) ));
            										}
HXDLIN(  53)										int c9 = ::iterMagic::Iimg_obj::get(this100,index12);
HXDLIN(  53)										int col3;
HXDLIN(  53)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)											col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXLINE(  53)											col3 = c9;
            										}
HXDLIN(  53)										bool _hx_tmp24;
HXDLIN(  53)										if (this97->useMask) {
HXLINE(  53)											_hx_tmp24 = ::hx::IsNotNull( this97->mask );
            										}
            										else {
HXLINE(  53)											_hx_tmp24 = false;
            										}
HXDLIN(  53)										if (_hx_tmp24) {
HXLINE(  53)											 ::pi_xy::ImageStruct this101 = this97->mask;
HXDLIN(  53)											::Dynamic this102 = this101->image;
HXDLIN(  53)											int index13;
HXDLIN(  53)											if (this101->useVirtualPos) {
HXLINE(  53)												index13 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this101->virtualY) * ( (Float)(this101->width) )) + dx3) - this101->virtualX));
            											}
            											else {
HXLINE(  53)												index13 = ::Std_obj::_hx_int(( (Float)(((dy3 * this101->width) + dx3)) ));
            											}
HXDLIN(  53)											int c10 = ::iterMagic::Iimg_obj::get(this102,index13);
HXDLIN(  53)											int v10;
HXDLIN(  53)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)												v10 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            											}
            											else {
HXLINE(  53)												v10 = c10;
            											}
HXDLIN(  53)											int maskPixel3 = v10;
HXDLIN(  53)											int this103 = col3;
HXDLIN(  53)											if ((maskPixel3 == 0)) {
HXLINE(  53)												col3 = this103;
            											}
            											else {
HXLINE(  53)												Float m03;
HXDLIN(  53)												int this104 = ((maskPixel3 >> 24) & 255);
HXDLIN(  53)												if ((this104 == 0)) {
HXLINE(  53)													m03 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													m03 = (( (Float)(this104) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float m13;
HXDLIN(  53)												int this105 = ((maskPixel3 >> 16) & 255);
HXDLIN(  53)												if ((this105 == 0)) {
HXLINE(  53)													m13 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													m13 = (( (Float)(this105) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float m23;
HXDLIN(  53)												int this106 = ((maskPixel3 >> 8) & 255);
HXDLIN(  53)												if ((this106 == 0)) {
HXLINE(  53)													m23 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													m23 = (( (Float)(this106) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float m33;
HXDLIN(  53)												int this107 = (maskPixel3 & 255);
HXDLIN(  53)												if ((this107 == 0)) {
HXLINE(  53)													m33 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													m33 = (( (Float)(this107) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this103 >> 24) & 255)) )));
HXDLIN(  53)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this103 >> 16) & 255)) )));
HXDLIN(  53)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this103 >> 8) & 255)) )));
HXDLIN(  53)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this103 & 255)) )));
HXDLIN(  53)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  53)										if ((col3 != 0)) {
HXLINE(  53)											int x11 = (dx3 - rectLeft3);
HXDLIN(  53)											int y11 = (dy3 - rectTop3);
HXDLIN(  53)											int c11 = col3;
HXDLIN(  53)											bool _hx_tmp25;
HXDLIN(  53)											if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  53)												_hx_tmp25 = undoImage9->transparent;
            											}
            											else {
HXLINE(  53)												_hx_tmp25 = false;
            											}
HXDLIN(  53)											if (_hx_tmp25) {
HXLINE(  53)												int location6;
HXDLIN(  53)												if (undoImage9->useVirtualPos) {
HXLINE(  53)													location6 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  53)													location6 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN(  53)												int this108 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  53)												int this109;
HXDLIN(  53)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)													this109 = ((((((this108 >> 24) & 255) << 24) | ((this108 & 255) << 16)) | (((this108 >> 8) & 255) << 8)) | ((this108 >> 16) & 255));
            												}
            												else {
HXLINE(  53)													this109 = this108;
            												}
HXDLIN(  53)												Float a110;
HXDLIN(  53)												int this110 = ((this109 >> 24) & 255);
HXDLIN(  53)												if ((this110 == 0)) {
HXLINE(  53)													a110 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													a110 = (( (Float)(this110) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float r16;
HXDLIN(  53)												int this111 = ((this109 >> 16) & 255);
HXDLIN(  53)												if ((this111 == 0)) {
HXLINE(  53)													r16 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													r16 = (( (Float)(this111) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float g16;
HXDLIN(  53)												int this112 = ((this109 >> 8) & 255);
HXDLIN(  53)												if ((this112 == 0)) {
HXLINE(  53)													g16 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													g16 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float b111;
HXDLIN(  53)												int this113 = (this109 & 255);
HXDLIN(  53)												if ((this113 == 0)) {
HXLINE(  53)													b111 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													b111 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float a26;
HXDLIN(  53)												int this114 = ((col3 >> 24) & 255);
HXDLIN(  53)												if ((this114 == 0)) {
HXLINE(  53)													a26 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													a26 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float r26;
HXDLIN(  53)												int this115 = ((col3 >> 16) & 255);
HXDLIN(  53)												if ((this115 == 0)) {
HXLINE(  53)													r26 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													r26 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float g26;
HXDLIN(  53)												int this116 = ((col3 >> 8) & 255);
HXDLIN(  53)												if ((this116 == 0)) {
HXLINE(  53)													g26 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													g26 = (( (Float)(this116) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float b210;
HXDLIN(  53)												int this117 = (col3 & 255);
HXDLIN(  53)												if ((this117 == 0)) {
HXLINE(  53)													b210 = ((Float)0.);
            												}
            												else {
HXLINE(  53)													b210 = (( (Float)(this117) ) / ( (Float)(255) ));
            												}
HXDLIN(  53)												Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  53)												int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  53)												int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  53)												int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a26))));
HXDLIN(  53)												int a27 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  53)												int blended6 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN(  53)												{
HXLINE(  53)													int _hx_tmp26;
HXDLIN(  53)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)														_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXLINE(  53)														_hx_tmp26 = blended6;
            													}
HXDLIN(  53)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            												}
            											}
            											else {
HXLINE(  53)												::Dynamic this118 = undoImage9->image;
HXDLIN(  53)												int index14;
HXDLIN(  53)												if (undoImage9->useVirtualPos) {
HXLINE(  53)													index14 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  53)													index14 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN(  53)												int _hx_tmp27;
HXDLIN(  53)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)													_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            												}
            												else {
HXLINE(  53)													_hx_tmp27 = c11;
            												}
HXDLIN(  53)												::iterMagic::Iimg_obj::set(this118,index14,_hx_tmp27);
            											}
            										}
            										else {
HXLINE(  53)											if (forceClear3) {
HXLINE(  53)												::Dynamic this119 = undoImage9->image;
HXDLIN(  53)												int x12 = (dx3 - rectLeft3);
HXDLIN(  53)												int y12 = (dy3 - rectTop3);
HXDLIN(  53)												int index15;
HXDLIN(  53)												if (undoImage9->useVirtualPos) {
HXLINE(  53)													index15 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  53)													index15 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            												}
HXDLIN(  53)												::iterMagic::Iimg_obj::set(this119,index15,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  53)				{
HXLINE(  53)					int _g_min6 = xIter33->start;
HXDLIN(  53)					int _g_max6 = xIter33->max;
HXDLIN(  53)					while((_g_min6 < _g_max6)){
HXLINE(  53)						_g_min6 = (_g_min6 + 1);
HXDLIN(  53)						int px3 = (_g_min6 - 1);
HXDLIN(  53)						Float pcx3 = (( (Float)(px3) ) - bx);
HXDLIN(  53)						{
HXLINE(  53)							int _g_min7 = yIter33->start;
HXDLIN(  53)							int _g_max7 = yIter33->max;
HXDLIN(  53)							while((_g_min7 < _g_max7)){
HXLINE(  53)								_g_min7 = (_g_min7 + 1);
HXDLIN(  53)								int py3 = (_g_min7 - 1);
HXDLIN(  53)								Float pcy3 = (( (Float)(py3) ) - cy);
HXDLIN(  53)								Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  53)								Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  53)								Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  53)								Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  53)								Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  53)								bool _hx_tmp28;
HXDLIN(  53)								bool _hx_tmp29;
HXDLIN(  53)								if ((ratioA3 >= 0)) {
HXLINE(  53)									_hx_tmp29 = (ratioB3 >= 0);
            								}
            								else {
HXLINE(  53)									_hx_tmp29 = false;
            								}
HXDLIN(  53)								if (_hx_tmp29) {
HXLINE(  53)									_hx_tmp28 = (ratioC3 >= 0);
            								}
            								else {
HXLINE(  53)									_hx_tmp28 = false;
            								}
HXDLIN(  53)								if (_hx_tmp28) {
HXLINE(  53)									int i38 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN(  53)									if ((i38 > 255)) {
HXLINE(  24)										i38 = 255;
            									}
HXLINE(  53)									if ((i38 < 0)) {
HXLINE(  25)										i38 = 0;
            									}
HXLINE(  53)									int a28 = i38;
HXDLIN(  53)									int i39 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN(  53)									if ((i39 > 255)) {
HXLINE(  24)										i39 = 255;
            									}
HXLINE(  53)									if ((i39 < 0)) {
HXLINE(  25)										i39 = 0;
            									}
HXLINE(  53)									int r18 = i39;
HXDLIN(  53)									int i40 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN(  53)									if ((i40 > 255)) {
HXLINE(  24)										i40 = 255;
            									}
HXLINE(  53)									if ((i40 < 0)) {
HXLINE(  25)										i40 = 0;
            									}
HXLINE(  53)									int g18 = i40;
HXDLIN(  53)									int i41 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN(  53)									if ((i41 > 255)) {
HXLINE(  24)										i41 = 255;
            									}
HXLINE(  53)									if ((i41 < 0)) {
HXLINE(  25)										i41 = 0;
            									}
HXLINE(  53)									int b33 = i41;
HXDLIN(  53)									{
HXLINE(  53)										int location7;
HXDLIN(  53)										if (this97->useVirtualPos) {
HXLINE(  53)											location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this97->virtualY) * ( (Float)(this97->width) )) + px3) - this97->virtualX));
            										}
            										else {
HXLINE(  53)											location7 = ::Std_obj::_hx_int(( (Float)(((py3 * this97->width) + px3)) ));
            										}
HXDLIN(  53)										bool _hx_tmp30;
HXDLIN(  53)										if (this97->transparent) {
HXLINE(  53)											_hx_tmp30 = (a28 < 254);
            										}
            										else {
HXLINE(  53)											_hx_tmp30 = false;
            										}
HXDLIN(  53)										if (_hx_tmp30) {
HXLINE(  53)											int this120 = ::iterMagic::Iimg_obj::get(this97->image,location7);
HXDLIN(  53)											int old3;
HXDLIN(  53)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)												old3 = ((((((this120 >> 24) & 255) << 24) | ((this120 & 255) << 16)) | (((this120 >> 8) & 255) << 8)) | ((this120 >> 16) & 255));
            											}
            											else {
HXLINE(  53)												old3 = this120;
            											}
HXDLIN(  53)											int rhs3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN(  53)											Float a111;
HXDLIN(  53)											int this121 = ((old3 >> 24) & 255);
HXDLIN(  53)											if ((this121 == 0)) {
HXLINE(  53)												a111 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												a111 = (( (Float)(this121) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float r19;
HXDLIN(  53)											int this122 = ((old3 >> 16) & 255);
HXDLIN(  53)											if ((this122 == 0)) {
HXLINE(  53)												r19 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												r19 = (( (Float)(this122) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float g19;
HXDLIN(  53)											int this123 = ((old3 >> 8) & 255);
HXDLIN(  53)											if ((this123 == 0)) {
HXLINE(  53)												g19 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												g19 = (( (Float)(this123) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float b112;
HXDLIN(  53)											int this124 = (old3 & 255);
HXDLIN(  53)											if ((this124 == 0)) {
HXLINE(  53)												b112 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												b112 = (( (Float)(this124) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float a29;
HXDLIN(  53)											int this125 = ((rhs3 >> 24) & 255);
HXDLIN(  53)											if ((this125 == 0)) {
HXLINE(  53)												a29 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												a29 = (( (Float)(this125) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float r27;
HXDLIN(  53)											int this126 = ((rhs3 >> 16) & 255);
HXDLIN(  53)											if ((this126 == 0)) {
HXLINE(  53)												r27 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												r27 = (( (Float)(this126) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float g27;
HXDLIN(  53)											int this127 = ((rhs3 >> 8) & 255);
HXDLIN(  53)											if ((this127 == 0)) {
HXLINE(  53)												g27 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												g27 = (( (Float)(this127) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float b211;
HXDLIN(  53)											int this128 = (rhs3 & 255);
HXDLIN(  53)											if ((this128 == 0)) {
HXLINE(  53)												b211 = ((Float)0.);
            											}
            											else {
HXLINE(  53)												b211 = (( (Float)(this128) ) / ( (Float)(255) ));
            											}
HXDLIN(  53)											Float a37 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  53)											int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a29))));
HXDLIN(  53)											int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a29))));
HXDLIN(  53)											int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a29))));
HXDLIN(  53)											int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a29)));
HXDLIN(  53)											int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN(  53)											{
HXLINE(  53)												int _hx_tmp31;
HXDLIN(  53)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  53)													_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXLINE(  53)													_hx_tmp31 = blended7;
            												}
HXDLIN(  53)												::iterMagic::Iimg_obj::set(this97->image,location7,_hx_tmp31);
            											}
            										}
            										else {
HXLINE(  53)											int value3;
HXDLIN(  53)											if (this97->isLittle) {
HXLINE(  53)												value3 = ((((a28 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            											}
            											else {
HXLINE(  53)												value3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            											}
HXDLIN(  53)											::iterMagic::Iimg_obj::set(this97->image,location7,value3);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  53)				if ((hasHit3 == false)) {
HXLINE(  53)					 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,bx,cy,true);
HXDLIN(  53)					if (hasUndo3) {
HXLINE(  53)						v11->undoImage = undoImage9;
HXDLIN(  53)						v11->undoX = xIter33->start;
HXDLIN(  53)						v11->undoY = yIter33->start;
            					}
            				}
            			}
            		}
HXLINE(  55)		lastX = bx;
HXLINE(  56)		lastY = cy;
HXLINE(  57)		gap = (wid / ( (Float)(l) ));
HXLINE(  58)		{
HXLINE(  58)			int _g84 = 1;
HXDLIN(  58)			int _g85 = (( (int)(l) ) - 2);
HXDLIN(  58)			while((_g84 < _g85)){
HXLINE(  58)				_g84 = (_g84 + 1);
HXDLIN(  58)				int i42 = (_g84 - 1);
HXLINE(  59)				nextX = (bx - (gap * ( (Float)(i42) )));
HXLINE(  60)				nextY = cy;
HXLINE(  61)				{
HXLINE(  61)					 ::pi_xy::ImageStruct this129 = pixelimage;
HXDLIN(  61)					{
HXLINE(  61)						bool hasHit4 = false;
HXDLIN(  61)						bool hasUndo4 = false;
HXDLIN(  61)						int aA4 = ((colorOut >> 24) & 255);
HXDLIN(  61)						int rA4 = ((colorOut >> 16) & 255);
HXDLIN(  61)						int gA4 = ((colorOut >> 8) & 255);
HXDLIN(  61)						int bA4 = (colorOut & 255);
HXDLIN(  61)						int aB4 = ((colorIn >> 24) & 255);
HXDLIN(  61)						int rB4 = ((colorIn >> 16) & 255);
HXDLIN(  61)						int gB4 = ((colorIn >> 8) & 255);
HXDLIN(  61)						int bB4 = (colorIn & 255);
HXDLIN(  61)						int aC4 = ((colorOut >> 24) & 255);
HXDLIN(  61)						int rC4 = ((colorOut >> 16) & 255);
HXDLIN(  61)						int gC4 = ((colorOut >> 8) & 255);
HXDLIN(  61)						int bC4 = (colorOut & 255);
HXDLIN(  61)						Float bcx4 = (lastX - nextX);
HXDLIN(  61)						Float bcy4 = (lastY - nextY);
HXDLIN(  61)						Float acx4 = (mx - nextX);
HXDLIN(  61)						Float acy4 = (my - nextY);
HXDLIN(  61)						Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN(  61)						Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN(  61)						Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN(  61)						Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN(  61)						 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  61)						if ((mx > lastX)) {
HXLINE(  61)							if ((mx > nextX)) {
HXLINE(  61)								int min16;
HXDLIN(  61)								if ((lastX > nextX)) {
HXLINE(  61)									min16 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  61)									min16 = ::Math_obj::floor(lastX);
            								}
HXDLIN(  61)								int ii_min32 = min16;
HXDLIN(  61)								int ii_max32 = ::Math_obj::ceil(mx);
HXDLIN(  61)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            							}
            							else {
HXLINE(  61)								int ii_min33 = ::Math_obj::floor(lastX);
HXDLIN(  61)								int ii_max33 = ::Math_obj::ceil(nextX);
HXDLIN(  61)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            							}
            						}
            						else {
HXLINE(  61)							if ((lastX > nextX)) {
HXLINE(  61)								int min17;
HXDLIN(  61)								if ((mx > nextX)) {
HXLINE(  61)									min17 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  61)									min17 = ::Math_obj::ceil(mx);
            								}
HXDLIN(  61)								int ii_min34 = min17;
HXDLIN(  61)								int ii_max34 = ::Math_obj::ceil(lastX);
HXDLIN(  61)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            							}
            							else {
HXLINE(  61)								int ii_min35 = ::Math_obj::floor(mx);
HXDLIN(  61)								int ii_max35 = ::Math_obj::ceil(nextX);
HXDLIN(  61)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            							}
            						}
HXDLIN(  61)						 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  61)						if ((my > lastY)) {
HXLINE(  61)							if ((my > nextY)) {
HXLINE(  61)								int min18;
HXDLIN(  61)								if ((lastY > nextY)) {
HXLINE(  61)									min18 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  61)									min18 = ::Math_obj::floor(lastY);
            								}
HXDLIN(  61)								int ii_min36 = min18;
HXDLIN(  61)								int ii_max36 = ::Math_obj::ceil(my);
HXDLIN(  61)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            							}
            							else {
HXLINE(  61)								int ii_min37 = ::Math_obj::floor(lastY);
HXDLIN(  61)								int ii_max37 = ::Math_obj::ceil(nextY);
HXDLIN(  61)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            							}
            						}
            						else {
HXLINE(  61)							if ((lastY > nextY)) {
HXLINE(  61)								int min19;
HXDLIN(  61)								if ((my > nextY)) {
HXLINE(  61)									min19 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  61)									min19 = ::Math_obj::ceil(my);
            								}
HXDLIN(  61)								int ii_min38 = min19;
HXDLIN(  61)								int ii_max38 = ::Math_obj::ceil(lastY);
HXDLIN(  61)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            							}
            							else {
HXLINE(  61)								int ii_min39 = ::Math_obj::floor(my);
HXDLIN(  61)								int ii_max39 = ::Math_obj::ceil(nextY);
HXDLIN(  61)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            							}
            						}
HXDLIN(  61)						 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  61)						if (hasUndo4) {
HXLINE(  61)							int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  61)							int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  61)							 ::Dynamic imageType4 = null();
HXDLIN(  61)							 ::pi_xy::ImageStruct this130 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  61)							if (::hx::IsNull( imageType4 )) {
HXLINE(  54)								imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  61)							::Dynamic undoImage13;
HXDLIN(  61)							switch((int)(( (int)(imageType4) ))){
            								case (int)0: {
HXLINE(  61)									 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  61)									 ::iterMagic::BytesImg b35 = byt4;
HXDLIN(  61)									{
HXLINE(  61)										b35->width = width4;
HXDLIN(  61)										b35->height = height4;
HXDLIN(  61)										b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  61)										b35->data = ::haxe::io::Bytes_obj::alloc((b35->length * 4));
HXDLIN(  61)										{
HXLINE(  61)											int len8 = b35->length;
HXDLIN(  61)											int w4 = 0;
HXDLIN(  61)											{
HXLINE(  61)												int _g86 = 0;
HXDLIN(  61)												int _g87 = b35->height;
HXDLIN(  61)												while((_g86 < _g87)){
HXLINE(  61)													_g86 = (_g86 + 1);
HXDLIN(  61)													int y13 = (_g86 - 1);
HXDLIN(  61)													{
HXLINE(  61)														int _g88 = 0;
HXDLIN(  61)														int _g89 = b35->width;
HXDLIN(  61)														while((_g88 < _g89)){
HXLINE(  61)															_g88 = (_g88 + 1);
HXDLIN(  61)															int x13 = (_g88 - 1);
HXDLIN(  61)															{
HXLINE(  61)																w4 = (w4 + 1);
HXDLIN(  61)																b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  61)															{
HXLINE(  61)																w4 = (w4 + 1);
HXDLIN(  61)																b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  61)															{
HXLINE(  61)																w4 = (w4 + 1);
HXDLIN(  61)																b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  61)															{
HXLINE(  61)																w4 = (w4 + 1);
HXDLIN(  61)																b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  61)									undoImage13 = b35;
            								}
            								break;
            								case (int)1: {
HXLINE(  61)									 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  61)									 ::iterMagic::ArrIntImg a38 = arrI4;
HXDLIN(  61)									{
HXLINE(  61)										a38->width = width4;
HXDLIN(  61)										a38->height = height4;
HXDLIN(  61)										a38->data = ::Array_obj< int >::__new(0);
HXDLIN(  61)										a38->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  61)										{
HXLINE(  61)											int _g90 = 0;
HXDLIN(  61)											int _g91 = a38->length;
HXDLIN(  61)											while((_g90 < _g91)){
HXLINE(  61)												_g90 = (_g90 + 1);
HXDLIN(  61)												int i43 = (_g90 - 1);
HXDLIN(  61)												a38->data[i43] = 0;
            											}
            										}
            									}
HXDLIN(  61)									undoImage13 = a38;
            								}
            								break;
            								case (int)2: {
HXLINE(  61)									 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  61)									 ::iterMagic::U32ArrImg b36 = u32a4;
HXDLIN(  61)									{
HXLINE(  61)										b36->width = width4;
HXDLIN(  61)										b36->height = height4;
HXDLIN(  61)										b36->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  61)										int size4 = (b36->length * 4);
HXDLIN(  61)										b36->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  61)										{
HXLINE(  61)											int _g92 = 0;
HXDLIN(  61)											int _g93 = b36->length;
HXDLIN(  61)											while((_g92 < _g93)){
HXLINE(  61)												_g92 = (_g92 + 1);
HXDLIN(  61)												int i44 = (_g92 - 1);
HXDLIN(  61)												{
HXLINE(  61)													 ::haxe::io::ArrayBufferViewImpl this131 = b36->data;
HXDLIN(  61)													bool undoImage14;
HXDLIN(  61)													if ((i44 >= 0)) {
HXLINE(  61)														undoImage14 = (i44 < (this131->byteLength >> 2));
            													}
            													else {
HXLINE(  61)														undoImage14 = false;
            													}
HXDLIN(  61)													if (undoImage14) {
HXLINE(  61)														 ::haxe::io::Bytes _this4 = this131->bytes;
HXDLIN(  61)														int pos4 = ((i44 << 2) + this131->byteOffset);
HXDLIN(  61)														_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  61)														_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  61)														_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  61)														_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  61)									undoImage13 = b36;
            								}
            								break;
            								case (int)3: {
HXLINE(  61)									 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  61)									 ::iterMagic::VecIntImg v12 = vec4;
HXDLIN(  61)									{
HXLINE(  61)										v12->width = width4;
HXDLIN(  61)										v12->height = height4;
HXDLIN(  61)										v12->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  61)										v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN(  61)										{
HXLINE(  61)											int _g94 = 0;
HXDLIN(  61)											int _g95 = v12->length;
HXDLIN(  61)											while((_g94 < _g95)){
HXLINE(  61)												_g94 = (_g94 + 1);
HXDLIN(  61)												int i45 = (_g94 - 1);
HXDLIN(  61)												v12->data->__unsafe_set(i45,0);
            											}
            										}
            									}
HXDLIN(  61)									undoImage13 = v12;
            								}
            								break;
            								case (int)4: {
HXLINE(  61)									 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  61)									 ::iterMagic::StackIntImg b37 = sInt4;
HXDLIN(  61)									{
HXLINE(  61)										b37->width = width4;
HXDLIN(  61)										b37->height = height4;
HXDLIN(  61)										b37->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  61)										b37->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  61)										{
HXLINE(  61)											int len9 = b37->length;
HXDLIN(  61)											 ::haxe::ds::GenericStack_Int d4 = b37->data;
HXDLIN(  61)											if (::hx::IsNull( d4->head )) {
HXLINE(  61)												int _g96 = 0;
HXDLIN(  61)												int _g97 = len9;
HXDLIN(  61)												while((_g96 < _g97)){
HXLINE(  61)													_g96 = (_g96 + 1);
HXDLIN(  61)													int i46 = (_g96 - 1);
HXDLIN(  61)													d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            												}
            											}
            											else {
HXLINE(  61)												int _g98 = 0;
HXDLIN(  61)												int _g99 = len9;
HXDLIN(  61)												while((_g98 < _g99)){
HXLINE(  61)													_g98 = (_g98 + 1);
HXDLIN(  61)													int i47 = (_g98 - 1);
HXDLIN(  61)													{
HXLINE(  61)														 ::haxe::ds::GenericCell_Int l5 = b37->data->head;
HXDLIN(  61)														 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  61)														{
HXLINE(  61)															int _g100 = 0;
HXDLIN(  61)															int _g101 = i47;
HXDLIN(  61)															while((_g100 < _g101)){
HXLINE(  61)																_g100 = (_g100 + 1);
HXDLIN(  61)																int i48 = (_g100 - 1);
HXLINE( 345)																prev4 = l5;
HXLINE( 346)																l5 = l5->next;
            															}
            														}
HXLINE(  61)														if (::hx::IsNull( prev4 )) {
HXLINE(  61)															b37->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  61)															l5 = null();
            														}
            														else {
HXLINE(  61)															prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  61)															l5 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  61)									undoImage13 = b37;
            								}
            								break;
            							}
HXDLIN(  61)							this130->image = undoImage13;
HXDLIN(  61)							this130->width = width4;
HXDLIN(  61)							this130->height = height4;
HXDLIN(  61)							this130->imageType = ( (int)(imageType4) );
HXDLIN(  61)							undoImage12 = this130;
HXDLIN(  61)							{
HXLINE(  61)								int rectLeft4 = xIter34->start;
HXDLIN(  61)								int rectTop4 = yIter34->start;
HXDLIN(  61)								int rectRight4 = xIter34->max;
HXDLIN(  61)								bool forceClear4 = false;
HXDLIN(  61)								{
HXLINE(  61)									int _g102 = rectTop4;
HXDLIN(  61)									int _g103 = yIter34->max;
HXDLIN(  61)									while((_g102 < _g103)){
HXLINE(  61)										_g102 = (_g102 + 1);
HXDLIN(  61)										int dy4 = (_g102 - 1);
HXDLIN(  61)										{
HXLINE(  61)											int _g104 = rectLeft4;
HXDLIN(  61)											int _g105 = rectRight4;
HXDLIN(  61)											while((_g104 < _g105)){
HXLINE(  61)												_g104 = (_g104 + 1);
HXDLIN(  61)												int dx4 = (_g104 - 1);
HXDLIN(  61)												::Dynamic this132 = this129->image;
HXDLIN(  61)												int index16;
HXDLIN(  61)												if (this129->useVirtualPos) {
HXLINE(  61)													index16 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this129->virtualY) * ( (Float)(this129->width) )) + dx4) - this129->virtualX));
            												}
            												else {
HXLINE(  61)													index16 = ::Std_obj::_hx_int(( (Float)(((dy4 * this129->width) + dx4)) ));
            												}
HXDLIN(  61)												int c12 = ::iterMagic::Iimg_obj::get(this132,index16);
HXDLIN(  61)												int col4;
HXDLIN(  61)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)													col4 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            												}
            												else {
HXLINE(  61)													col4 = c12;
            												}
HXDLIN(  61)												bool _hx_tmp32;
HXDLIN(  61)												if (this129->useMask) {
HXLINE(  61)													_hx_tmp32 = ::hx::IsNotNull( this129->mask );
            												}
            												else {
HXLINE(  61)													_hx_tmp32 = false;
            												}
HXDLIN(  61)												if (_hx_tmp32) {
HXLINE(  61)													 ::pi_xy::ImageStruct this133 = this129->mask;
HXDLIN(  61)													::Dynamic this134 = this133->image;
HXDLIN(  61)													int index17;
HXDLIN(  61)													if (this133->useVirtualPos) {
HXLINE(  61)														index17 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this133->virtualY) * ( (Float)(this133->width) )) + dx4) - this133->virtualX));
            													}
            													else {
HXLINE(  61)														index17 = ::Std_obj::_hx_int(( (Float)(((dy4 * this133->width) + dx4)) ));
            													}
HXDLIN(  61)													int c13 = ::iterMagic::Iimg_obj::get(this134,index17);
HXDLIN(  61)													int v13;
HXDLIN(  61)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)														v13 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            													}
            													else {
HXLINE(  61)														v13 = c13;
            													}
HXDLIN(  61)													int maskPixel4 = v13;
HXDLIN(  61)													int this135 = col4;
HXDLIN(  61)													if ((maskPixel4 == 0)) {
HXLINE(  61)														col4 = this135;
            													}
            													else {
HXLINE(  61)														Float m04;
HXDLIN(  61)														int this136 = ((maskPixel4 >> 24) & 255);
HXDLIN(  61)														if ((this136 == 0)) {
HXLINE(  61)															m04 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															m04 = (( (Float)(this136) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float m14;
HXDLIN(  61)														int this137 = ((maskPixel4 >> 16) & 255);
HXDLIN(  61)														if ((this137 == 0)) {
HXLINE(  61)															m14 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															m14 = (( (Float)(this137) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float m24;
HXDLIN(  61)														int this138 = ((maskPixel4 >> 8) & 255);
HXDLIN(  61)														if ((this138 == 0)) {
HXLINE(  61)															m24 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															m24 = (( (Float)(this138) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float m34;
HXDLIN(  61)														int this139 = (maskPixel4 & 255);
HXDLIN(  61)														if ((this139 == 0)) {
HXLINE(  61)															m34 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															m34 = (( (Float)(this139) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this135 >> 24) & 255)) )));
HXDLIN(  61)														int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this135 >> 16) & 255)) )));
HXDLIN(  61)														int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this135 >> 8) & 255)) )));
HXDLIN(  61)														int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this135 & 255)) )));
HXDLIN(  61)														col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  61)												if ((col4 != 0)) {
HXLINE(  61)													int x14 = (dx4 - rectLeft4);
HXDLIN(  61)													int y14 = (dy4 - rectTop4);
HXDLIN(  61)													int c14 = col4;
HXDLIN(  61)													bool _hx_tmp33;
HXDLIN(  61)													if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  61)														_hx_tmp33 = undoImage12->transparent;
            													}
            													else {
HXLINE(  61)														_hx_tmp33 = false;
            													}
HXDLIN(  61)													if (_hx_tmp33) {
HXLINE(  61)														int location8;
HXDLIN(  61)														if (undoImage12->useVirtualPos) {
HXLINE(  61)															location8 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  61)															location8 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            														}
HXDLIN(  61)														int this140 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  61)														int this141;
HXDLIN(  61)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)															this141 = ((((((this140 >> 24) & 255) << 24) | ((this140 & 255) << 16)) | (((this140 >> 8) & 255) << 8)) | ((this140 >> 16) & 255));
            														}
            														else {
HXLINE(  61)															this141 = this140;
            														}
HXDLIN(  61)														Float a112;
HXDLIN(  61)														int this142 = ((this141 >> 24) & 255);
HXDLIN(  61)														if ((this142 == 0)) {
HXLINE(  61)															a112 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															a112 = (( (Float)(this142) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float r110;
HXDLIN(  61)														int this143 = ((this141 >> 16) & 255);
HXDLIN(  61)														if ((this143 == 0)) {
HXLINE(  61)															r110 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															r110 = (( (Float)(this143) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float g110;
HXDLIN(  61)														int this144 = ((this141 >> 8) & 255);
HXDLIN(  61)														if ((this144 == 0)) {
HXLINE(  61)															g110 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															g110 = (( (Float)(this144) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float b113;
HXDLIN(  61)														int this145 = (this141 & 255);
HXDLIN(  61)														if ((this145 == 0)) {
HXLINE(  61)															b113 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															b113 = (( (Float)(this145) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float a210;
HXDLIN(  61)														int this146 = ((col4 >> 24) & 255);
HXDLIN(  61)														if ((this146 == 0)) {
HXLINE(  61)															a210 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															a210 = (( (Float)(this146) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float r28;
HXDLIN(  61)														int this147 = ((col4 >> 16) & 255);
HXDLIN(  61)														if ((this147 == 0)) {
HXLINE(  61)															r28 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															r28 = (( (Float)(this147) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float g28;
HXDLIN(  61)														int this148 = ((col4 >> 8) & 255);
HXDLIN(  61)														if ((this148 == 0)) {
HXLINE(  61)															g28 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															g28 = (( (Float)(this148) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float b212;
HXDLIN(  61)														int this149 = (col4 & 255);
HXDLIN(  61)														if ((this149 == 0)) {
HXLINE(  61)															b212 = ((Float)0.);
            														}
            														else {
HXLINE(  61)															b212 = (( (Float)(this149) ) / ( (Float)(255) ));
            														}
HXDLIN(  61)														Float a39 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  61)														int r29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r28 * a210))));
HXDLIN(  61)														int g29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g28 * a210))));
HXDLIN(  61)														int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b212 * a210))));
HXDLIN(  61)														int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN(  61)														int blended8 = ((((a40 << 24) | (r29 << 16)) | (g29 << 8)) | b38);
HXDLIN(  61)														{
HXLINE(  61)															int _hx_tmp34;
HXDLIN(  61)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)																_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            															}
            															else {
HXLINE(  61)																_hx_tmp34 = blended8;
            															}
HXDLIN(  61)															::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp34);
            														}
            													}
            													else {
HXLINE(  61)														::Dynamic this150 = undoImage12->image;
HXDLIN(  61)														int index18;
HXDLIN(  61)														if (undoImage12->useVirtualPos) {
HXLINE(  61)															index18 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  61)															index18 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            														}
HXDLIN(  61)														int _hx_tmp35;
HXDLIN(  61)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)															_hx_tmp35 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            														}
            														else {
HXLINE(  61)															_hx_tmp35 = c14;
            														}
HXDLIN(  61)														::iterMagic::Iimg_obj::set(this150,index18,_hx_tmp35);
            													}
            												}
            												else {
HXLINE(  61)													if (forceClear4) {
HXLINE(  61)														::Dynamic this151 = undoImage12->image;
HXDLIN(  61)														int x15 = (dx4 - rectLeft4);
HXDLIN(  61)														int y15 = (dy4 - rectTop4);
HXDLIN(  61)														int index19;
HXDLIN(  61)														if (undoImage12->useVirtualPos) {
HXLINE(  61)															index19 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  61)															index19 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            														}
HXDLIN(  61)														::iterMagic::Iimg_obj::set(this151,index19,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  61)						{
HXLINE(  61)							int _g_min8 = xIter34->start;
HXDLIN(  61)							int _g_max8 = xIter34->max;
HXDLIN(  61)							while((_g_min8 < _g_max8)){
HXLINE(  61)								_g_min8 = (_g_min8 + 1);
HXDLIN(  61)								int px4 = (_g_min8 - 1);
HXDLIN(  61)								Float pcx4 = (( (Float)(px4) ) - nextX);
HXDLIN(  61)								{
HXLINE(  61)									int _g_min9 = yIter34->start;
HXDLIN(  61)									int _g_max9 = yIter34->max;
HXDLIN(  61)									while((_g_min9 < _g_max9)){
HXLINE(  61)										_g_min9 = (_g_min9 + 1);
HXDLIN(  61)										int py4 = (_g_min9 - 1);
HXDLIN(  61)										Float pcy4 = (( (Float)(py4) ) - nextY);
HXDLIN(  61)										Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN(  61)										Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN(  61)										Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN(  61)										Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN(  61)										Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  61)										bool _hx_tmp36;
HXDLIN(  61)										bool _hx_tmp37;
HXDLIN(  61)										if ((ratioA4 >= 0)) {
HXLINE(  61)											_hx_tmp37 = (ratioB4 >= 0);
            										}
            										else {
HXLINE(  61)											_hx_tmp37 = false;
            										}
HXDLIN(  61)										if (_hx_tmp37) {
HXLINE(  61)											_hx_tmp36 = (ratioC4 >= 0);
            										}
            										else {
HXLINE(  61)											_hx_tmp36 = false;
            										}
HXDLIN(  61)										if (_hx_tmp36) {
HXLINE(  61)											int i49 = ::Std_obj::_hx_int((((( (Float)(aA4) ) * ratioA4) + (( (Float)(aB4) ) * ratioB4)) + (( (Float)(aC4) ) * ratioC4)));
HXDLIN(  61)											if ((i49 > 255)) {
HXLINE(  24)												i49 = 255;
            											}
HXLINE(  61)											if ((i49 < 0)) {
HXLINE(  25)												i49 = 0;
            											}
HXLINE(  61)											int a41 = i49;
HXDLIN(  61)											int i50 = ::Std_obj::_hx_int((((( (Float)(rA4) ) * ratioA4) + (( (Float)(rB4) ) * ratioB4)) + (( (Float)(rC4) ) * ratioC4)));
HXDLIN(  61)											if ((i50 > 255)) {
HXLINE(  24)												i50 = 255;
            											}
HXLINE(  61)											if ((i50 < 0)) {
HXLINE(  25)												i50 = 0;
            											}
HXLINE(  61)											int r30 = i50;
HXDLIN(  61)											int i51 = ::Std_obj::_hx_int((((( (Float)(gA4) ) * ratioA4) + (( (Float)(gB4) ) * ratioB4)) + (( (Float)(gC4) ) * ratioC4)));
HXDLIN(  61)											if ((i51 > 255)) {
HXLINE(  24)												i51 = 255;
            											}
HXLINE(  61)											if ((i51 < 0)) {
HXLINE(  25)												i51 = 0;
            											}
HXLINE(  61)											int g30 = i51;
HXDLIN(  61)											int i52 = ::Std_obj::_hx_int((((( (Float)(bA4) ) * ratioA4) + (( (Float)(bB4) ) * ratioB4)) + (( (Float)(bC4) ) * ratioC4)));
HXDLIN(  61)											if ((i52 > 255)) {
HXLINE(  24)												i52 = 255;
            											}
HXLINE(  61)											if ((i52 < 0)) {
HXLINE(  25)												i52 = 0;
            											}
HXLINE(  61)											int b39 = i52;
HXDLIN(  61)											{
HXLINE(  61)												int location9;
HXDLIN(  61)												if (this129->useVirtualPos) {
HXLINE(  61)													location9 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this129->virtualY) * ( (Float)(this129->width) )) + px4) - this129->virtualX));
            												}
            												else {
HXLINE(  61)													location9 = ::Std_obj::_hx_int(( (Float)(((py4 * this129->width) + px4)) ));
            												}
HXDLIN(  61)												bool _hx_tmp38;
HXDLIN(  61)												if (this129->transparent) {
HXLINE(  61)													_hx_tmp38 = (a41 < 254);
            												}
            												else {
HXLINE(  61)													_hx_tmp38 = false;
            												}
HXDLIN(  61)												if (_hx_tmp38) {
HXLINE(  61)													int this152 = ::iterMagic::Iimg_obj::get(this129->image,location9);
HXDLIN(  61)													int old4;
HXDLIN(  61)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)														old4 = ((((((this152 >> 24) & 255) << 24) | ((this152 & 255) << 16)) | (((this152 >> 8) & 255) << 8)) | ((this152 >> 16) & 255));
            													}
            													else {
HXLINE(  61)														old4 = this152;
            													}
HXDLIN(  61)													int rhs4 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b39);
HXDLIN(  61)													Float a113;
HXDLIN(  61)													int this153 = ((old4 >> 24) & 255);
HXDLIN(  61)													if ((this153 == 0)) {
HXLINE(  61)														a113 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														a113 = (( (Float)(this153) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float r111;
HXDLIN(  61)													int this154 = ((old4 >> 16) & 255);
HXDLIN(  61)													if ((this154 == 0)) {
HXLINE(  61)														r111 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														r111 = (( (Float)(this154) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float g111;
HXDLIN(  61)													int this155 = ((old4 >> 8) & 255);
HXDLIN(  61)													if ((this155 == 0)) {
HXLINE(  61)														g111 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														g111 = (( (Float)(this155) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float b114;
HXDLIN(  61)													int this156 = (old4 & 255);
HXDLIN(  61)													if ((this156 == 0)) {
HXLINE(  61)														b114 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														b114 = (( (Float)(this156) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float a211;
HXDLIN(  61)													int this157 = ((rhs4 >> 24) & 255);
HXDLIN(  61)													if ((this157 == 0)) {
HXLINE(  61)														a211 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														a211 = (( (Float)(this157) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float r210;
HXDLIN(  61)													int this158 = ((rhs4 >> 16) & 255);
HXDLIN(  61)													if ((this158 == 0)) {
HXLINE(  61)														r210 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														r210 = (( (Float)(this158) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float g210;
HXDLIN(  61)													int this159 = ((rhs4 >> 8) & 255);
HXDLIN(  61)													if ((this159 == 0)) {
HXLINE(  61)														g210 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														g210 = (( (Float)(this159) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float b213;
HXDLIN(  61)													int this160 = (rhs4 & 255);
HXDLIN(  61)													if ((this160 == 0)) {
HXLINE(  61)														b213 = ((Float)0.);
            													}
            													else {
HXLINE(  61)														b213 = (( (Float)(this160) ) / ( (Float)(255) ));
            													}
HXDLIN(  61)													Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  61)													int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a211))));
HXDLIN(  61)													int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a211))));
HXDLIN(  61)													int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b213 * a211))));
HXDLIN(  61)													int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  61)													int blended9 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b40);
HXDLIN(  61)													{
HXLINE(  61)														int _hx_tmp39;
HXDLIN(  61)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  61)															_hx_tmp39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            														}
            														else {
HXLINE(  61)															_hx_tmp39 = blended9;
            														}
HXDLIN(  61)														::iterMagic::Iimg_obj::set(this129->image,location9,_hx_tmp39);
            													}
            												}
            												else {
HXLINE(  61)													int value4;
HXDLIN(  61)													if (this129->isLittle) {
HXLINE(  61)														value4 = ((((a41 << 24) | (b39 << 16)) | (g30 << 8)) | r30);
            													}
            													else {
HXLINE(  61)														value4 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b39);
            													}
HXDLIN(  61)													::iterMagic::Iimg_obj::set(this129->image,location9,value4);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  61)						if ((hasHit4 == false)) {
HXLINE(  61)							 ::pi_xy::algo::HitTri v14 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,nextX,nextY,true);
HXDLIN(  61)							if (hasUndo4) {
HXLINE(  61)								v14->undoImage = undoImage12;
HXDLIN(  61)								v14->undoX = xIter34->start;
HXDLIN(  61)								v14->undoY = yIter34->start;
            							}
            						}
            					}
            				}
HXLINE(  62)				lastX = nextX;
HXLINE(  63)				lastY = nextY;
            			}
            		}
HXLINE(  65)		{
HXLINE(  65)			 ::pi_xy::ImageStruct this161 = pixelimage;
HXDLIN(  65)			{
HXLINE(  65)				bool hasHit5 = false;
HXDLIN(  65)				bool hasUndo5 = false;
HXDLIN(  65)				int aA5 = ((colorOut >> 24) & 255);
HXDLIN(  65)				int rA5 = ((colorOut >> 16) & 255);
HXDLIN(  65)				int gA5 = ((colorOut >> 8) & 255);
HXDLIN(  65)				int bA5 = (colorOut & 255);
HXDLIN(  65)				int aB5 = ((colorIn >> 24) & 255);
HXDLIN(  65)				int rB5 = ((colorIn >> 16) & 255);
HXDLIN(  65)				int gB5 = ((colorIn >> 8) & 255);
HXDLIN(  65)				int bB5 = (colorIn & 255);
HXDLIN(  65)				int aC5 = ((colorOut >> 24) & 255);
HXDLIN(  65)				int rC5 = ((colorOut >> 16) & 255);
HXDLIN(  65)				int gC5 = ((colorOut >> 8) & 255);
HXDLIN(  65)				int bC5 = (colorOut & 255);
HXDLIN(  65)				Float bcx5 = (lastX - x);
HXDLIN(  65)				Float bcy5 = (lastY - cy);
HXDLIN(  65)				Float acx5 = (mx - x);
HXDLIN(  65)				Float acy5 = (my - cy);
HXDLIN(  65)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN(  65)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN(  65)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN(  65)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN(  65)				 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  65)				if ((mx > lastX)) {
HXLINE(  65)					if ((mx > x)) {
HXLINE(  65)						int min20;
HXDLIN(  65)						if ((lastX > x)) {
HXLINE(  65)							min20 = ::Math_obj::floor(x);
            						}
            						else {
HXLINE(  65)							min20 = ::Math_obj::floor(lastX);
            						}
HXDLIN(  65)						int ii_min40 = min20;
HXDLIN(  65)						int ii_max40 = ::Math_obj::ceil(mx);
HXDLIN(  65)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXLINE(  65)						int ii_min41 = ::Math_obj::floor(lastX);
HXDLIN(  65)						int ii_max41 = ::Math_obj::ceil(x);
HXDLIN(  65)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXLINE(  65)					if ((lastX > x)) {
HXLINE(  65)						int min21;
HXDLIN(  65)						if ((mx > x)) {
HXLINE(  65)							min21 = ::Math_obj::floor(x);
            						}
            						else {
HXLINE(  65)							min21 = ::Math_obj::ceil(mx);
            						}
HXDLIN(  65)						int ii_min42 = min21;
HXDLIN(  65)						int ii_max42 = ::Math_obj::ceil(lastX);
HXDLIN(  65)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXLINE(  65)						int ii_min43 = ::Math_obj::floor(mx);
HXDLIN(  65)						int ii_max43 = ::Math_obj::ceil(x);
HXDLIN(  65)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN(  65)				 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  65)				if ((my > lastY)) {
HXLINE(  65)					if ((my > cy)) {
HXLINE(  65)						int min22;
HXDLIN(  65)						if ((lastY > cy)) {
HXLINE(  65)							min22 = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  65)							min22 = ::Math_obj::floor(lastY);
            						}
HXDLIN(  65)						int ii_min44 = min22;
HXDLIN(  65)						int ii_max44 = ::Math_obj::ceil(my);
HXDLIN(  65)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXLINE(  65)						int ii_min45 = ::Math_obj::floor(lastY);
HXDLIN(  65)						int ii_max45 = ::Math_obj::ceil(cy);
HXDLIN(  65)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXLINE(  65)					if ((lastY > cy)) {
HXLINE(  65)						int min23;
HXDLIN(  65)						if ((my > cy)) {
HXLINE(  65)							min23 = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  65)							min23 = ::Math_obj::ceil(my);
            						}
HXDLIN(  65)						int ii_min46 = min23;
HXDLIN(  65)						int ii_max46 = ::Math_obj::ceil(lastY);
HXDLIN(  65)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXLINE(  65)						int ii_min47 = ::Math_obj::floor(my);
HXDLIN(  65)						int ii_max47 = ::Math_obj::ceil(cy);
HXDLIN(  65)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN(  65)				 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  65)				if (hasUndo5) {
HXLINE(  65)					int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  65)					int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  65)					 ::Dynamic imageType5 = null();
HXDLIN(  65)					 ::pi_xy::ImageStruct this162 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  65)					if (::hx::IsNull( imageType5 )) {
HXLINE(  54)						imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  65)					::Dynamic undoImage16;
HXDLIN(  65)					switch((int)(( (int)(imageType5) ))){
            						case (int)0: {
HXLINE(  65)							 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  65)							 ::iterMagic::BytesImg b41 = byt5;
HXDLIN(  65)							{
HXLINE(  65)								b41->width = width5;
HXDLIN(  65)								b41->height = height5;
HXDLIN(  65)								b41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  65)								b41->data = ::haxe::io::Bytes_obj::alloc((b41->length * 4));
HXDLIN(  65)								{
HXLINE(  65)									int len10 = b41->length;
HXDLIN(  65)									int w5 = 0;
HXDLIN(  65)									{
HXLINE(  65)										int _g106 = 0;
HXDLIN(  65)										int _g107 = b41->height;
HXDLIN(  65)										while((_g106 < _g107)){
HXLINE(  65)											_g106 = (_g106 + 1);
HXDLIN(  65)											int y16 = (_g106 - 1);
HXDLIN(  65)											{
HXLINE(  65)												int _g108 = 0;
HXDLIN(  65)												int _g109 = b41->width;
HXDLIN(  65)												while((_g108 < _g109)){
HXLINE(  65)													_g108 = (_g108 + 1);
HXDLIN(  65)													int x16 = (_g108 - 1);
HXDLIN(  65)													{
HXLINE(  65)														w5 = (w5 + 1);
HXDLIN(  65)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  65)													{
HXLINE(  65)														w5 = (w5 + 1);
HXDLIN(  65)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  65)													{
HXLINE(  65)														w5 = (w5 + 1);
HXDLIN(  65)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  65)													{
HXLINE(  65)														w5 = (w5 + 1);
HXDLIN(  65)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  65)							undoImage16 = b41;
            						}
            						break;
            						case (int)1: {
HXLINE(  65)							 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)							 ::iterMagic::ArrIntImg a43 = arrI5;
HXDLIN(  65)							{
HXLINE(  65)								a43->width = width5;
HXDLIN(  65)								a43->height = height5;
HXDLIN(  65)								a43->data = ::Array_obj< int >::__new(0);
HXDLIN(  65)								a43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  65)								{
HXLINE(  65)									int _g110 = 0;
HXDLIN(  65)									int _g111 = a43->length;
HXDLIN(  65)									while((_g110 < _g111)){
HXLINE(  65)										_g110 = (_g110 + 1);
HXDLIN(  65)										int i53 = (_g110 - 1);
HXDLIN(  65)										a43->data[i53] = 0;
            									}
            								}
            							}
HXDLIN(  65)							undoImage16 = a43;
            						}
            						break;
            						case (int)2: {
HXLINE(  65)							 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  65)							 ::iterMagic::U32ArrImg b42 = u32a5;
HXDLIN(  65)							{
HXLINE(  65)								b42->width = width5;
HXDLIN(  65)								b42->height = height5;
HXDLIN(  65)								b42->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  65)								int size5 = (b42->length * 4);
HXDLIN(  65)								b42->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  65)								{
HXLINE(  65)									int _g112 = 0;
HXDLIN(  65)									int _g113 = b42->length;
HXDLIN(  65)									while((_g112 < _g113)){
HXLINE(  65)										_g112 = (_g112 + 1);
HXDLIN(  65)										int i54 = (_g112 - 1);
HXDLIN(  65)										{
HXLINE(  65)											 ::haxe::io::ArrayBufferViewImpl this163 = b42->data;
HXDLIN(  65)											bool undoImage17;
HXDLIN(  65)											if ((i54 >= 0)) {
HXLINE(  65)												undoImage17 = (i54 < (this163->byteLength >> 2));
            											}
            											else {
HXLINE(  65)												undoImage17 = false;
            											}
HXDLIN(  65)											if (undoImage17) {
HXLINE(  65)												 ::haxe::io::Bytes _this5 = this163->bytes;
HXDLIN(  65)												int pos5 = ((i54 << 2) + this163->byteOffset);
HXDLIN(  65)												_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  65)												_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  65)												_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  65)												_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  65)							undoImage16 = b42;
            						}
            						break;
            						case (int)3: {
HXLINE(  65)							 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)							 ::iterMagic::VecIntImg v15 = vec5;
HXDLIN(  65)							{
HXLINE(  65)								v15->width = width5;
HXDLIN(  65)								v15->height = height5;
HXDLIN(  65)								v15->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  65)								v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN(  65)								{
HXLINE(  65)									int _g114 = 0;
HXDLIN(  65)									int _g115 = v15->length;
HXDLIN(  65)									while((_g114 < _g115)){
HXLINE(  65)										_g114 = (_g114 + 1);
HXDLIN(  65)										int i55 = (_g114 - 1);
HXDLIN(  65)										v15->data->__unsafe_set(i55,0);
            									}
            								}
            							}
HXDLIN(  65)							undoImage16 = v15;
            						}
            						break;
            						case (int)4: {
HXLINE(  65)							 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)							 ::iterMagic::StackIntImg b43 = sInt5;
HXDLIN(  65)							{
HXLINE(  65)								b43->width = width5;
HXDLIN(  65)								b43->height = height5;
HXDLIN(  65)								b43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  65)								b43->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  65)								{
HXLINE(  65)									int len11 = b43->length;
HXDLIN(  65)									 ::haxe::ds::GenericStack_Int d5 = b43->data;
HXDLIN(  65)									if (::hx::IsNull( d5->head )) {
HXLINE(  65)										int _g116 = 0;
HXDLIN(  65)										int _g117 = len11;
HXDLIN(  65)										while((_g116 < _g117)){
HXLINE(  65)											_g116 = (_g116 + 1);
HXDLIN(  65)											int i56 = (_g116 - 1);
HXDLIN(  65)											d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            										}
            									}
            									else {
HXLINE(  65)										int _g118 = 0;
HXDLIN(  65)										int _g119 = len11;
HXDLIN(  65)										while((_g118 < _g119)){
HXLINE(  65)											_g118 = (_g118 + 1);
HXDLIN(  65)											int i57 = (_g118 - 1);
HXDLIN(  65)											{
HXLINE(  65)												 ::haxe::ds::GenericCell_Int l6 = b43->data->head;
HXDLIN(  65)												 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  65)												{
HXLINE(  65)													int _g120 = 0;
HXDLIN(  65)													int _g121 = i57;
HXDLIN(  65)													while((_g120 < _g121)){
HXLINE(  65)														_g120 = (_g120 + 1);
HXDLIN(  65)														int i58 = (_g120 - 1);
HXLINE( 345)														prev5 = l6;
HXLINE( 346)														l6 = l6->next;
            													}
            												}
HXLINE(  65)												if (::hx::IsNull( prev5 )) {
HXLINE(  65)													b43->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  65)													l6 = null();
            												}
            												else {
HXLINE(  65)													prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  65)													l6 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  65)							undoImage16 = b43;
            						}
            						break;
            					}
HXDLIN(  65)					this162->image = undoImage16;
HXDLIN(  65)					this162->width = width5;
HXDLIN(  65)					this162->height = height5;
HXDLIN(  65)					this162->imageType = ( (int)(imageType5) );
HXDLIN(  65)					undoImage15 = this162;
HXDLIN(  65)					{
HXLINE(  65)						int rectLeft5 = xIter35->start;
HXDLIN(  65)						int rectTop5 = yIter35->start;
HXDLIN(  65)						int rectRight5 = xIter35->max;
HXDLIN(  65)						bool forceClear5 = false;
HXDLIN(  65)						{
HXLINE(  65)							int _g122 = rectTop5;
HXDLIN(  65)							int _g123 = yIter35->max;
HXDLIN(  65)							while((_g122 < _g123)){
HXLINE(  65)								_g122 = (_g122 + 1);
HXDLIN(  65)								int dy5 = (_g122 - 1);
HXDLIN(  65)								{
HXLINE(  65)									int _g124 = rectLeft5;
HXDLIN(  65)									int _g125 = rectRight5;
HXDLIN(  65)									while((_g124 < _g125)){
HXLINE(  65)										_g124 = (_g124 + 1);
HXDLIN(  65)										int dx5 = (_g124 - 1);
HXDLIN(  65)										::Dynamic this164 = this161->image;
HXDLIN(  65)										int index20;
HXDLIN(  65)										if (this161->useVirtualPos) {
HXLINE(  65)											index20 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this161->virtualY) * ( (Float)(this161->width) )) + dx5) - this161->virtualX));
            										}
            										else {
HXLINE(  65)											index20 = ::Std_obj::_hx_int(( (Float)(((dy5 * this161->width) + dx5)) ));
            										}
HXDLIN(  65)										int c15 = ::iterMagic::Iimg_obj::get(this164,index20);
HXDLIN(  65)										int col5;
HXDLIN(  65)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)											col5 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE(  65)											col5 = c15;
            										}
HXDLIN(  65)										bool _hx_tmp40;
HXDLIN(  65)										if (this161->useMask) {
HXLINE(  65)											_hx_tmp40 = ::hx::IsNotNull( this161->mask );
            										}
            										else {
HXLINE(  65)											_hx_tmp40 = false;
            										}
HXDLIN(  65)										if (_hx_tmp40) {
HXLINE(  65)											 ::pi_xy::ImageStruct this165 = this161->mask;
HXDLIN(  65)											::Dynamic this166 = this165->image;
HXDLIN(  65)											int index21;
HXDLIN(  65)											if (this165->useVirtualPos) {
HXLINE(  65)												index21 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this165->virtualY) * ( (Float)(this165->width) )) + dx5) - this165->virtualX));
            											}
            											else {
HXLINE(  65)												index21 = ::Std_obj::_hx_int(( (Float)(((dy5 * this165->width) + dx5)) ));
            											}
HXDLIN(  65)											int c16 = ::iterMagic::Iimg_obj::get(this166,index21);
HXDLIN(  65)											int v16;
HXDLIN(  65)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)												v16 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            											}
            											else {
HXLINE(  65)												v16 = c16;
            											}
HXDLIN(  65)											int maskPixel5 = v16;
HXDLIN(  65)											int this167 = col5;
HXDLIN(  65)											if ((maskPixel5 == 0)) {
HXLINE(  65)												col5 = this167;
            											}
            											else {
HXLINE(  65)												Float m05;
HXDLIN(  65)												int this168 = ((maskPixel5 >> 24) & 255);
HXDLIN(  65)												if ((this168 == 0)) {
HXLINE(  65)													m05 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													m05 = (( (Float)(this168) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float m15;
HXDLIN(  65)												int this169 = ((maskPixel5 >> 16) & 255);
HXDLIN(  65)												if ((this169 == 0)) {
HXLINE(  65)													m15 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													m15 = (( (Float)(this169) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float m25;
HXDLIN(  65)												int this170 = ((maskPixel5 >> 8) & 255);
HXDLIN(  65)												if ((this170 == 0)) {
HXLINE(  65)													m25 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													m25 = (( (Float)(this170) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float m35;
HXDLIN(  65)												int this171 = (maskPixel5 & 255);
HXDLIN(  65)												if ((this171 == 0)) {
HXLINE(  65)													m35 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													m35 = (( (Float)(this171) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this167 >> 24) & 255)) )));
HXDLIN(  65)												int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this167 >> 16) & 255)) )));
HXDLIN(  65)												int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this167 >> 8) & 255)) )));
HXDLIN(  65)												int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this167 & 255)) )));
HXDLIN(  65)												col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  65)										if ((col5 != 0)) {
HXLINE(  65)											int x17 = (dx5 - rectLeft5);
HXDLIN(  65)											int y17 = (dy5 - rectTop5);
HXDLIN(  65)											int c17 = col5;
HXDLIN(  65)											bool _hx_tmp41;
HXDLIN(  65)											if ((((c17 >> 24) & 255) < 254)) {
HXLINE(  65)												_hx_tmp41 = undoImage15->transparent;
            											}
            											else {
HXLINE(  65)												_hx_tmp41 = false;
            											}
HXDLIN(  65)											if (_hx_tmp41) {
HXLINE(  65)												int location10;
HXDLIN(  65)												if (undoImage15->useVirtualPos) {
HXLINE(  65)													location10 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  65)													location10 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            												}
HXDLIN(  65)												int this172 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  65)												int this173;
HXDLIN(  65)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)													this173 = ((((((this172 >> 24) & 255) << 24) | ((this172 & 255) << 16)) | (((this172 >> 8) & 255) << 8)) | ((this172 >> 16) & 255));
            												}
            												else {
HXLINE(  65)													this173 = this172;
            												}
HXDLIN(  65)												Float a114;
HXDLIN(  65)												int this174 = ((this173 >> 24) & 255);
HXDLIN(  65)												if ((this174 == 0)) {
HXLINE(  65)													a114 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													a114 = (( (Float)(this174) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float r112;
HXDLIN(  65)												int this175 = ((this173 >> 16) & 255);
HXDLIN(  65)												if ((this175 == 0)) {
HXLINE(  65)													r112 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													r112 = (( (Float)(this175) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float g112;
HXDLIN(  65)												int this176 = ((this173 >> 8) & 255);
HXDLIN(  65)												if ((this176 == 0)) {
HXLINE(  65)													g112 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													g112 = (( (Float)(this176) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float b115;
HXDLIN(  65)												int this177 = (this173 & 255);
HXDLIN(  65)												if ((this177 == 0)) {
HXLINE(  65)													b115 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													b115 = (( (Float)(this177) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float a212;
HXDLIN(  65)												int this178 = ((col5 >> 24) & 255);
HXDLIN(  65)												if ((this178 == 0)) {
HXLINE(  65)													a212 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													a212 = (( (Float)(this178) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float r211;
HXDLIN(  65)												int this179 = ((col5 >> 16) & 255);
HXDLIN(  65)												if ((this179 == 0)) {
HXLINE(  65)													r211 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													r211 = (( (Float)(this179) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float g211;
HXDLIN(  65)												int this180 = ((col5 >> 8) & 255);
HXDLIN(  65)												if ((this180 == 0)) {
HXLINE(  65)													g211 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													g211 = (( (Float)(this180) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float b214;
HXDLIN(  65)												int this181 = (col5 & 255);
HXDLIN(  65)												if ((this181 == 0)) {
HXLINE(  65)													b214 = ((Float)0.);
            												}
            												else {
HXLINE(  65)													b214 = (( (Float)(this181) ) / ( (Float)(255) ));
            												}
HXDLIN(  65)												Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  65)												int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a212))));
HXDLIN(  65)												int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a212))));
HXDLIN(  65)												int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b214 * a212))));
HXDLIN(  65)												int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  65)												int blended10 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b44);
HXDLIN(  65)												{
HXLINE(  65)													int _hx_tmp42;
HXDLIN(  65)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)														_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            													}
            													else {
HXLINE(  65)														_hx_tmp42 = blended10;
            													}
HXDLIN(  65)													::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp42);
            												}
            											}
            											else {
HXLINE(  65)												::Dynamic this182 = undoImage15->image;
HXDLIN(  65)												int index22;
HXDLIN(  65)												if (undoImage15->useVirtualPos) {
HXLINE(  65)													index22 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  65)													index22 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            												}
HXDLIN(  65)												int _hx_tmp43;
HXDLIN(  65)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)													_hx_tmp43 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            												}
            												else {
HXLINE(  65)													_hx_tmp43 = c17;
            												}
HXDLIN(  65)												::iterMagic::Iimg_obj::set(this182,index22,_hx_tmp43);
            											}
            										}
            										else {
HXLINE(  65)											if (forceClear5) {
HXLINE(  65)												::Dynamic this183 = undoImage15->image;
HXDLIN(  65)												int x18 = (dx5 - rectLeft5);
HXDLIN(  65)												int y18 = (dy5 - rectTop5);
HXDLIN(  65)												int index23;
HXDLIN(  65)												if (undoImage15->useVirtualPos) {
HXLINE(  65)													index23 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  65)													index23 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN(  65)												::iterMagic::Iimg_obj::set(this183,index23,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  65)				{
HXLINE(  65)					int _g_min10 = xIter35->start;
HXDLIN(  65)					int _g_max10 = xIter35->max;
HXDLIN(  65)					while((_g_min10 < _g_max10)){
HXLINE(  65)						_g_min10 = (_g_min10 + 1);
HXDLIN(  65)						int px5 = (_g_min10 - 1);
HXDLIN(  65)						Float pcx5 = (( (Float)(px5) ) - x);
HXDLIN(  65)						{
HXLINE(  65)							int _g_min11 = yIter35->start;
HXDLIN(  65)							int _g_max11 = yIter35->max;
HXDLIN(  65)							while((_g_min11 < _g_max11)){
HXLINE(  65)								_g_min11 = (_g_min11 + 1);
HXDLIN(  65)								int py5 = (_g_min11 - 1);
HXDLIN(  65)								Float pcy5 = (( (Float)(py5) ) - cy);
HXDLIN(  65)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN(  65)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN(  65)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN(  65)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN(  65)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  65)								bool _hx_tmp44;
HXDLIN(  65)								bool _hx_tmp45;
HXDLIN(  65)								if ((ratioA5 >= 0)) {
HXLINE(  65)									_hx_tmp45 = (ratioB5 >= 0);
            								}
            								else {
HXLINE(  65)									_hx_tmp45 = false;
            								}
HXDLIN(  65)								if (_hx_tmp45) {
HXLINE(  65)									_hx_tmp44 = (ratioC5 >= 0);
            								}
            								else {
HXLINE(  65)									_hx_tmp44 = false;
            								}
HXDLIN(  65)								if (_hx_tmp44) {
HXLINE(  65)									int i59 = ::Std_obj::_hx_int((((( (Float)(aA5) ) * ratioA5) + (( (Float)(aB5) ) * ratioB5)) + (( (Float)(aC5) ) * ratioC5)));
HXDLIN(  65)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE(  65)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE(  65)									int a45 = i59;
HXDLIN(  65)									int i60 = ::Std_obj::_hx_int((((( (Float)(rA5) ) * ratioA5) + (( (Float)(rB5) ) * ratioB5)) + (( (Float)(rC5) ) * ratioC5)));
HXDLIN(  65)									if ((i60 > 255)) {
HXLINE(  24)										i60 = 255;
            									}
HXLINE(  65)									if ((i60 < 0)) {
HXLINE(  25)										i60 = 0;
            									}
HXLINE(  65)									int r33 = i60;
HXDLIN(  65)									int i61 = ::Std_obj::_hx_int((((( (Float)(gA5) ) * ratioA5) + (( (Float)(gB5) ) * ratioB5)) + (( (Float)(gC5) ) * ratioC5)));
HXDLIN(  65)									if ((i61 > 255)) {
HXLINE(  24)										i61 = 255;
            									}
HXLINE(  65)									if ((i61 < 0)) {
HXLINE(  25)										i61 = 0;
            									}
HXLINE(  65)									int g33 = i61;
HXDLIN(  65)									int i62 = ::Std_obj::_hx_int((((( (Float)(bA5) ) * ratioA5) + (( (Float)(bB5) ) * ratioB5)) + (( (Float)(bC5) ) * ratioC5)));
HXDLIN(  65)									if ((i62 > 255)) {
HXLINE(  24)										i62 = 255;
            									}
HXLINE(  65)									if ((i62 < 0)) {
HXLINE(  25)										i62 = 0;
            									}
HXLINE(  65)									int b45 = i62;
HXDLIN(  65)									{
HXLINE(  65)										int location11;
HXDLIN(  65)										if (this161->useVirtualPos) {
HXLINE(  65)											location11 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - this161->virtualY) * ( (Float)(this161->width) )) + px5) - this161->virtualX));
            										}
            										else {
HXLINE(  65)											location11 = ::Std_obj::_hx_int(( (Float)(((py5 * this161->width) + px5)) ));
            										}
HXDLIN(  65)										bool _hx_tmp46;
HXDLIN(  65)										if (this161->transparent) {
HXLINE(  65)											_hx_tmp46 = (a45 < 254);
            										}
            										else {
HXLINE(  65)											_hx_tmp46 = false;
            										}
HXDLIN(  65)										if (_hx_tmp46) {
HXLINE(  65)											int this184 = ::iterMagic::Iimg_obj::get(this161->image,location11);
HXDLIN(  65)											int old5;
HXDLIN(  65)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)												old5 = ((((((this184 >> 24) & 255) << 24) | ((this184 & 255) << 16)) | (((this184 >> 8) & 255) << 8)) | ((this184 >> 16) & 255));
            											}
            											else {
HXLINE(  65)												old5 = this184;
            											}
HXDLIN(  65)											int rhs5 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b45);
HXDLIN(  65)											Float a115;
HXDLIN(  65)											int this185 = ((old5 >> 24) & 255);
HXDLIN(  65)											if ((this185 == 0)) {
HXLINE(  65)												a115 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												a115 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float r113;
HXDLIN(  65)											int this186 = ((old5 >> 16) & 255);
HXDLIN(  65)											if ((this186 == 0)) {
HXLINE(  65)												r113 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												r113 = (( (Float)(this186) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float g113;
HXDLIN(  65)											int this187 = ((old5 >> 8) & 255);
HXDLIN(  65)											if ((this187 == 0)) {
HXLINE(  65)												g113 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												g113 = (( (Float)(this187) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float b116;
HXDLIN(  65)											int this188 = (old5 & 255);
HXDLIN(  65)											if ((this188 == 0)) {
HXLINE(  65)												b116 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												b116 = (( (Float)(this188) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float a213;
HXDLIN(  65)											int this189 = ((rhs5 >> 24) & 255);
HXDLIN(  65)											if ((this189 == 0)) {
HXLINE(  65)												a213 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												a213 = (( (Float)(this189) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float r212;
HXDLIN(  65)											int this190 = ((rhs5 >> 16) & 255);
HXDLIN(  65)											if ((this190 == 0)) {
HXLINE(  65)												r212 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												r212 = (( (Float)(this190) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float g212;
HXDLIN(  65)											int this191 = ((rhs5 >> 8) & 255);
HXDLIN(  65)											if ((this191 == 0)) {
HXLINE(  65)												g212 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												g212 = (( (Float)(this191) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float b215;
HXDLIN(  65)											int this192 = (rhs5 & 255);
HXDLIN(  65)											if ((this192 == 0)) {
HXLINE(  65)												b215 = ((Float)0.);
            											}
            											else {
HXLINE(  65)												b215 = (( (Float)(this192) ) / ( (Float)(255) ));
            											}
HXDLIN(  65)											Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  65)											int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r212 * a213))));
HXDLIN(  65)											int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g212 * a213))));
HXDLIN(  65)											int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b215 * a213))));
HXDLIN(  65)											int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  65)											int blended11 = ((((a46 << 24) | (r34 << 16)) | (g34 << 8)) | b46);
HXDLIN(  65)											{
HXLINE(  65)												int _hx_tmp47;
HXDLIN(  65)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)													_hx_tmp47 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE(  65)													_hx_tmp47 = blended11;
            												}
HXDLIN(  65)												::iterMagic::Iimg_obj::set(this161->image,location11,_hx_tmp47);
            											}
            										}
            										else {
HXLINE(  65)											int value5;
HXDLIN(  65)											if (this161->isLittle) {
HXLINE(  65)												value5 = ((((a45 << 24) | (b45 << 16)) | (g33 << 8)) | r33);
            											}
            											else {
HXLINE(  65)												value5 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b45);
            											}
HXDLIN(  65)											::iterMagic::Iimg_obj::set(this161->image,location11,value5);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  65)				if ((hasHit5 == false)) {
HXLINE(  65)					 ::pi_xy::algo::HitTri v17 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,x,cy,true);
HXDLIN(  65)					if (hasUndo5) {
HXLINE(  65)						v17->undoImage = undoImage15;
HXDLIN(  65)						v17->undoX = xIter35->start;
HXDLIN(  65)						v17->undoY = yIter35->start;
            					}
            				}
            			}
            		}
HXLINE(  68)		lastX = x;
HXLINE(  69)		lastY = cy;
HXLINE(  70)		gap = (wid / ( (Float)(l) ));
HXLINE(  71)		{
HXLINE(  71)			int _g126 = 1;
HXDLIN(  71)			int _g127 = (( (int)(l) ) - 2);
HXDLIN(  71)			while((_g126 < _g127)){
HXLINE(  71)				_g126 = (_g126 + 1);
HXDLIN(  71)				int i63 = (_g126 - 1);
HXLINE(  72)				nextX = x;
HXLINE(  73)				nextY = (cy - (gap * ( (Float)(i63) )));
HXLINE(  74)				{
HXLINE(  74)					 ::pi_xy::ImageStruct this193 = pixelimage;
HXDLIN(  74)					{
HXLINE(  74)						bool hasHit6 = false;
HXDLIN(  74)						bool hasUndo6 = false;
HXDLIN(  74)						int aA6 = ((colorOut >> 24) & 255);
HXDLIN(  74)						int rA6 = ((colorOut >> 16) & 255);
HXDLIN(  74)						int gA6 = ((colorOut >> 8) & 255);
HXDLIN(  74)						int bA6 = (colorOut & 255);
HXDLIN(  74)						int aB6 = ((colorIn >> 24) & 255);
HXDLIN(  74)						int rB6 = ((colorIn >> 16) & 255);
HXDLIN(  74)						int gB6 = ((colorIn >> 8) & 255);
HXDLIN(  74)						int bB6 = (colorIn & 255);
HXDLIN(  74)						int aC6 = ((colorOut >> 24) & 255);
HXDLIN(  74)						int rC6 = ((colorOut >> 16) & 255);
HXDLIN(  74)						int gC6 = ((colorOut >> 8) & 255);
HXDLIN(  74)						int bC6 = (colorOut & 255);
HXDLIN(  74)						Float bcx6 = (lastX - nextX);
HXDLIN(  74)						Float bcy6 = (lastY - nextY);
HXDLIN(  74)						Float acx6 = (mx - nextX);
HXDLIN(  74)						Float acy6 = (my - nextY);
HXDLIN(  74)						Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN(  74)						Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN(  74)						Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN(  74)						Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN(  74)						 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  74)						if ((mx > lastX)) {
HXLINE(  74)							if ((mx > nextX)) {
HXLINE(  74)								int min24;
HXDLIN(  74)								if ((lastX > nextX)) {
HXLINE(  74)									min24 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  74)									min24 = ::Math_obj::floor(lastX);
            								}
HXDLIN(  74)								int ii_min48 = min24;
HXDLIN(  74)								int ii_max48 = ::Math_obj::ceil(mx);
HXDLIN(  74)								xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            							}
            							else {
HXLINE(  74)								int ii_min49 = ::Math_obj::floor(lastX);
HXDLIN(  74)								int ii_max49 = ::Math_obj::ceil(nextX);
HXDLIN(  74)								xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            							}
            						}
            						else {
HXLINE(  74)							if ((lastX > nextX)) {
HXLINE(  74)								int min25;
HXDLIN(  74)								if ((mx > nextX)) {
HXLINE(  74)									min25 = ::Math_obj::floor(nextX);
            								}
            								else {
HXLINE(  74)									min25 = ::Math_obj::ceil(mx);
            								}
HXDLIN(  74)								int ii_min50 = min25;
HXDLIN(  74)								int ii_max50 = ::Math_obj::ceil(lastX);
HXDLIN(  74)								xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            							}
            							else {
HXLINE(  74)								int ii_min51 = ::Math_obj::floor(mx);
HXDLIN(  74)								int ii_max51 = ::Math_obj::ceil(nextX);
HXDLIN(  74)								xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            							}
            						}
HXDLIN(  74)						 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  74)						if ((my > lastY)) {
HXLINE(  74)							if ((my > nextY)) {
HXLINE(  74)								int min26;
HXDLIN(  74)								if ((lastY > nextY)) {
HXLINE(  74)									min26 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  74)									min26 = ::Math_obj::floor(lastY);
            								}
HXDLIN(  74)								int ii_min52 = min26;
HXDLIN(  74)								int ii_max52 = ::Math_obj::ceil(my);
HXDLIN(  74)								yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            							}
            							else {
HXLINE(  74)								int ii_min53 = ::Math_obj::floor(lastY);
HXDLIN(  74)								int ii_max53 = ::Math_obj::ceil(nextY);
HXDLIN(  74)								yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            							}
            						}
            						else {
HXLINE(  74)							if ((lastY > nextY)) {
HXLINE(  74)								int min27;
HXDLIN(  74)								if ((my > nextY)) {
HXLINE(  74)									min27 = ::Math_obj::floor(nextY);
            								}
            								else {
HXLINE(  74)									min27 = ::Math_obj::ceil(my);
            								}
HXDLIN(  74)								int ii_min54 = min27;
HXDLIN(  74)								int ii_max54 = ::Math_obj::ceil(lastY);
HXDLIN(  74)								yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            							}
            							else {
HXLINE(  74)								int ii_min55 = ::Math_obj::floor(my);
HXDLIN(  74)								int ii_max55 = ::Math_obj::ceil(nextY);
HXDLIN(  74)								yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            							}
            						}
HXDLIN(  74)						 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  74)						if (hasUndo6) {
HXLINE(  74)							int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  74)							int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  74)							 ::Dynamic imageType6 = null();
HXDLIN(  74)							 ::pi_xy::ImageStruct this194 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  74)							if (::hx::IsNull( imageType6 )) {
HXLINE(  54)								imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  74)							::Dynamic undoImage19;
HXDLIN(  74)							switch((int)(( (int)(imageType6) ))){
            								case (int)0: {
HXLINE(  74)									 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  74)									 ::iterMagic::BytesImg b47 = byt6;
HXDLIN(  74)									{
HXLINE(  74)										b47->width = width6;
HXDLIN(  74)										b47->height = height6;
HXDLIN(  74)										b47->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  74)										b47->data = ::haxe::io::Bytes_obj::alloc((b47->length * 4));
HXDLIN(  74)										{
HXLINE(  74)											int len12 = b47->length;
HXDLIN(  74)											int w6 = 0;
HXDLIN(  74)											{
HXLINE(  74)												int _g128 = 0;
HXDLIN(  74)												int _g129 = b47->height;
HXDLIN(  74)												while((_g128 < _g129)){
HXLINE(  74)													_g128 = (_g128 + 1);
HXDLIN(  74)													int y19 = (_g128 - 1);
HXDLIN(  74)													{
HXLINE(  74)														int _g130 = 0;
HXDLIN(  74)														int _g131 = b47->width;
HXDLIN(  74)														while((_g130 < _g131)){
HXLINE(  74)															_g130 = (_g130 + 1);
HXDLIN(  74)															int x19 = (_g130 - 1);
HXDLIN(  74)															{
HXLINE(  74)																w6 = (w6 + 1);
HXDLIN(  74)																b47->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  74)															{
HXLINE(  74)																w6 = (w6 + 1);
HXDLIN(  74)																b47->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  74)															{
HXLINE(  74)																w6 = (w6 + 1);
HXDLIN(  74)																b47->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  74)															{
HXLINE(  74)																w6 = (w6 + 1);
HXDLIN(  74)																b47->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  74)									undoImage19 = b47;
            								}
            								break;
            								case (int)1: {
HXLINE(  74)									 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  74)									 ::iterMagic::ArrIntImg a47 = arrI6;
HXDLIN(  74)									{
HXLINE(  74)										a47->width = width6;
HXDLIN(  74)										a47->height = height6;
HXDLIN(  74)										a47->data = ::Array_obj< int >::__new(0);
HXDLIN(  74)										a47->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  74)										{
HXLINE(  74)											int _g132 = 0;
HXDLIN(  74)											int _g133 = a47->length;
HXDLIN(  74)											while((_g132 < _g133)){
HXLINE(  74)												_g132 = (_g132 + 1);
HXDLIN(  74)												int i64 = (_g132 - 1);
HXDLIN(  74)												a47->data[i64] = 0;
            											}
            										}
            									}
HXDLIN(  74)									undoImage19 = a47;
            								}
            								break;
            								case (int)2: {
HXLINE(  74)									 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  74)									 ::iterMagic::U32ArrImg b48 = u32a6;
HXDLIN(  74)									{
HXLINE(  74)										b48->width = width6;
HXDLIN(  74)										b48->height = height6;
HXDLIN(  74)										b48->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  74)										int size6 = (b48->length * 4);
HXDLIN(  74)										b48->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  74)										{
HXLINE(  74)											int _g134 = 0;
HXDLIN(  74)											int _g135 = b48->length;
HXDLIN(  74)											while((_g134 < _g135)){
HXLINE(  74)												_g134 = (_g134 + 1);
HXDLIN(  74)												int i65 = (_g134 - 1);
HXDLIN(  74)												{
HXLINE(  74)													 ::haxe::io::ArrayBufferViewImpl this195 = b48->data;
HXDLIN(  74)													bool undoImage20;
HXDLIN(  74)													if ((i65 >= 0)) {
HXLINE(  74)														undoImage20 = (i65 < (this195->byteLength >> 2));
            													}
            													else {
HXLINE(  74)														undoImage20 = false;
            													}
HXDLIN(  74)													if (undoImage20) {
HXLINE(  74)														 ::haxe::io::Bytes _this6 = this195->bytes;
HXDLIN(  74)														int pos6 = ((i65 << 2) + this195->byteOffset);
HXDLIN(  74)														_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  74)														_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  74)														_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  74)														_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  74)									undoImage19 = b48;
            								}
            								break;
            								case (int)3: {
HXLINE(  74)									 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  74)									 ::iterMagic::VecIntImg v18 = vec6;
HXDLIN(  74)									{
HXLINE(  74)										v18->width = width6;
HXDLIN(  74)										v18->height = height6;
HXDLIN(  74)										v18->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  74)										v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN(  74)										{
HXLINE(  74)											int _g136 = 0;
HXDLIN(  74)											int _g137 = v18->length;
HXDLIN(  74)											while((_g136 < _g137)){
HXLINE(  74)												_g136 = (_g136 + 1);
HXDLIN(  74)												int i66 = (_g136 - 1);
HXDLIN(  74)												v18->data->__unsafe_set(i66,0);
            											}
            										}
            									}
HXDLIN(  74)									undoImage19 = v18;
            								}
            								break;
            								case (int)4: {
HXLINE(  74)									 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  74)									 ::iterMagic::StackIntImg b49 = sInt6;
HXDLIN(  74)									{
HXLINE(  74)										b49->width = width6;
HXDLIN(  74)										b49->height = height6;
HXDLIN(  74)										b49->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  74)										b49->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  74)										{
HXLINE(  74)											int len13 = b49->length;
HXDLIN(  74)											 ::haxe::ds::GenericStack_Int d6 = b49->data;
HXDLIN(  74)											if (::hx::IsNull( d6->head )) {
HXLINE(  74)												int _g138 = 0;
HXDLIN(  74)												int _g139 = len13;
HXDLIN(  74)												while((_g138 < _g139)){
HXLINE(  74)													_g138 = (_g138 + 1);
HXDLIN(  74)													int i67 = (_g138 - 1);
HXDLIN(  74)													d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            												}
            											}
            											else {
HXLINE(  74)												int _g140 = 0;
HXDLIN(  74)												int _g141 = len13;
HXDLIN(  74)												while((_g140 < _g141)){
HXLINE(  74)													_g140 = (_g140 + 1);
HXDLIN(  74)													int i68 = (_g140 - 1);
HXDLIN(  74)													{
HXLINE(  74)														 ::haxe::ds::GenericCell_Int l7 = b49->data->head;
HXDLIN(  74)														 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  74)														{
HXLINE(  74)															int _g142 = 0;
HXDLIN(  74)															int _g143 = i68;
HXDLIN(  74)															while((_g142 < _g143)){
HXLINE(  74)																_g142 = (_g142 + 1);
HXDLIN(  74)																int i69 = (_g142 - 1);
HXLINE( 345)																prev6 = l7;
HXLINE( 346)																l7 = l7->next;
            															}
            														}
HXLINE(  74)														if (::hx::IsNull( prev6 )) {
HXLINE(  74)															b49->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  74)															l7 = null();
            														}
            														else {
HXLINE(  74)															prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  74)															l7 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  74)									undoImage19 = b49;
            								}
            								break;
            							}
HXDLIN(  74)							this194->image = undoImage19;
HXDLIN(  74)							this194->width = width6;
HXDLIN(  74)							this194->height = height6;
HXDLIN(  74)							this194->imageType = ( (int)(imageType6) );
HXDLIN(  74)							undoImage18 = this194;
HXDLIN(  74)							{
HXLINE(  74)								int rectLeft6 = xIter36->start;
HXDLIN(  74)								int rectTop6 = yIter36->start;
HXDLIN(  74)								int rectRight6 = xIter36->max;
HXDLIN(  74)								bool forceClear6 = false;
HXDLIN(  74)								{
HXLINE(  74)									int _g144 = rectTop6;
HXDLIN(  74)									int _g145 = yIter36->max;
HXDLIN(  74)									while((_g144 < _g145)){
HXLINE(  74)										_g144 = (_g144 + 1);
HXDLIN(  74)										int dy6 = (_g144 - 1);
HXDLIN(  74)										{
HXLINE(  74)											int _g146 = rectLeft6;
HXDLIN(  74)											int _g147 = rectRight6;
HXDLIN(  74)											while((_g146 < _g147)){
HXLINE(  74)												_g146 = (_g146 + 1);
HXDLIN(  74)												int dx6 = (_g146 - 1);
HXDLIN(  74)												::Dynamic this196 = this193->image;
HXDLIN(  74)												int index24;
HXDLIN(  74)												if (this193->useVirtualPos) {
HXLINE(  74)													index24 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this193->virtualY) * ( (Float)(this193->width) )) + dx6) - this193->virtualX));
            												}
            												else {
HXLINE(  74)													index24 = ::Std_obj::_hx_int(( (Float)(((dy6 * this193->width) + dx6)) ));
            												}
HXDLIN(  74)												int c18 = ::iterMagic::Iimg_obj::get(this196,index24);
HXDLIN(  74)												int col6;
HXDLIN(  74)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)													col6 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            												}
            												else {
HXLINE(  74)													col6 = c18;
            												}
HXDLIN(  74)												bool _hx_tmp48;
HXDLIN(  74)												if (this193->useMask) {
HXLINE(  74)													_hx_tmp48 = ::hx::IsNotNull( this193->mask );
            												}
            												else {
HXLINE(  74)													_hx_tmp48 = false;
            												}
HXDLIN(  74)												if (_hx_tmp48) {
HXLINE(  74)													 ::pi_xy::ImageStruct this197 = this193->mask;
HXDLIN(  74)													::Dynamic this198 = this197->image;
HXDLIN(  74)													int index25;
HXDLIN(  74)													if (this197->useVirtualPos) {
HXLINE(  74)														index25 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this197->virtualY) * ( (Float)(this197->width) )) + dx6) - this197->virtualX));
            													}
            													else {
HXLINE(  74)														index25 = ::Std_obj::_hx_int(( (Float)(((dy6 * this197->width) + dx6)) ));
            													}
HXDLIN(  74)													int c19 = ::iterMagic::Iimg_obj::get(this198,index25);
HXDLIN(  74)													int v19;
HXDLIN(  74)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)														v19 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            													}
            													else {
HXLINE(  74)														v19 = c19;
            													}
HXDLIN(  74)													int maskPixel6 = v19;
HXDLIN(  74)													int this199 = col6;
HXDLIN(  74)													if ((maskPixel6 == 0)) {
HXLINE(  74)														col6 = this199;
            													}
            													else {
HXLINE(  74)														Float m06;
HXDLIN(  74)														int this200 = ((maskPixel6 >> 24) & 255);
HXDLIN(  74)														if ((this200 == 0)) {
HXLINE(  74)															m06 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															m06 = (( (Float)(this200) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float m16;
HXDLIN(  74)														int this201 = ((maskPixel6 >> 16) & 255);
HXDLIN(  74)														if ((this201 == 0)) {
HXLINE(  74)															m16 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															m16 = (( (Float)(this201) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float m26;
HXDLIN(  74)														int this202 = ((maskPixel6 >> 8) & 255);
HXDLIN(  74)														if ((this202 == 0)) {
HXLINE(  74)															m26 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															m26 = (( (Float)(this202) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float m36;
HXDLIN(  74)														int this203 = (maskPixel6 & 255);
HXDLIN(  74)														if ((this203 == 0)) {
HXLINE(  74)															m36 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															m36 = (( (Float)(this203) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this199 >> 24) & 255)) )));
HXDLIN(  74)														int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this199 >> 16) & 255)) )));
HXDLIN(  74)														int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this199 >> 8) & 255)) )));
HXDLIN(  74)														int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this199 & 255)) )));
HXDLIN(  74)														col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  74)												if ((col6 != 0)) {
HXLINE(  74)													int x20 = (dx6 - rectLeft6);
HXDLIN(  74)													int y20 = (dy6 - rectTop6);
HXDLIN(  74)													int c20 = col6;
HXDLIN(  74)													bool _hx_tmp49;
HXDLIN(  74)													if ((((c20 >> 24) & 255) < 254)) {
HXLINE(  74)														_hx_tmp49 = undoImage18->transparent;
            													}
            													else {
HXLINE(  74)														_hx_tmp49 = false;
            													}
HXDLIN(  74)													if (_hx_tmp49) {
HXLINE(  74)														int location12;
HXDLIN(  74)														if (undoImage18->useVirtualPos) {
HXLINE(  74)															location12 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x20) - undoImage18->virtualX));
            														}
            														else {
HXLINE(  74)															location12 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage18->width) + x20)) ));
            														}
HXDLIN(  74)														int this204 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN(  74)														int this205;
HXDLIN(  74)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)															this205 = ((((((this204 >> 24) & 255) << 24) | ((this204 & 255) << 16)) | (((this204 >> 8) & 255) << 8)) | ((this204 >> 16) & 255));
            														}
            														else {
HXLINE(  74)															this205 = this204;
            														}
HXDLIN(  74)														Float a116;
HXDLIN(  74)														int this206 = ((this205 >> 24) & 255);
HXDLIN(  74)														if ((this206 == 0)) {
HXLINE(  74)															a116 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															a116 = (( (Float)(this206) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float r114;
HXDLIN(  74)														int this207 = ((this205 >> 16) & 255);
HXDLIN(  74)														if ((this207 == 0)) {
HXLINE(  74)															r114 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															r114 = (( (Float)(this207) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float g114;
HXDLIN(  74)														int this208 = ((this205 >> 8) & 255);
HXDLIN(  74)														if ((this208 == 0)) {
HXLINE(  74)															g114 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															g114 = (( (Float)(this208) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float b117;
HXDLIN(  74)														int this209 = (this205 & 255);
HXDLIN(  74)														if ((this209 == 0)) {
HXLINE(  74)															b117 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															b117 = (( (Float)(this209) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float a214;
HXDLIN(  74)														int this210 = ((col6 >> 24) & 255);
HXDLIN(  74)														if ((this210 == 0)) {
HXLINE(  74)															a214 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															a214 = (( (Float)(this210) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float r213;
HXDLIN(  74)														int this211 = ((col6 >> 16) & 255);
HXDLIN(  74)														if ((this211 == 0)) {
HXLINE(  74)															r213 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															r213 = (( (Float)(this211) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float g213;
HXDLIN(  74)														int this212 = ((col6 >> 8) & 255);
HXDLIN(  74)														if ((this212 == 0)) {
HXLINE(  74)															g213 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															g213 = (( (Float)(this212) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float b216;
HXDLIN(  74)														int this213 = (col6 & 255);
HXDLIN(  74)														if ((this213 == 0)) {
HXLINE(  74)															b216 = ((Float)0.);
            														}
            														else {
HXLINE(  74)															b216 = (( (Float)(this213) ) / ( (Float)(255) ));
            														}
HXDLIN(  74)														Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  74)														int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a313) + (r213 * a214))));
HXDLIN(  74)														int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a313) + (g213 * a214))));
HXDLIN(  74)														int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b216 * a214))));
HXDLIN(  74)														int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  74)														int blended12 = ((((a48 << 24) | (r35 << 16)) | (g35 << 8)) | b50);
HXDLIN(  74)														{
HXLINE(  74)															int _hx_tmp50;
HXDLIN(  74)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)																_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            															}
            															else {
HXLINE(  74)																_hx_tmp50 = blended12;
            															}
HXDLIN(  74)															::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp50);
            														}
            													}
            													else {
HXLINE(  74)														::Dynamic this214 = undoImage18->image;
HXDLIN(  74)														int index26;
HXDLIN(  74)														if (undoImage18->useVirtualPos) {
HXLINE(  74)															index26 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x20) - undoImage18->virtualX));
            														}
            														else {
HXLINE(  74)															index26 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage18->width) + x20)) ));
            														}
HXDLIN(  74)														int _hx_tmp51;
HXDLIN(  74)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)															_hx_tmp51 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            														}
            														else {
HXLINE(  74)															_hx_tmp51 = c20;
            														}
HXDLIN(  74)														::iterMagic::Iimg_obj::set(this214,index26,_hx_tmp51);
            													}
            												}
            												else {
HXLINE(  74)													if (forceClear6) {
HXLINE(  74)														::Dynamic this215 = undoImage18->image;
HXDLIN(  74)														int x21 = (dx6 - rectLeft6);
HXDLIN(  74)														int y21 = (dy6 - rectTop6);
HXDLIN(  74)														int index27;
HXDLIN(  74)														if (undoImage18->useVirtualPos) {
HXLINE(  74)															index27 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            														}
            														else {
HXLINE(  74)															index27 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            														}
HXDLIN(  74)														::iterMagic::Iimg_obj::set(this215,index27,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  74)						{
HXLINE(  74)							int _g_min12 = xIter36->start;
HXDLIN(  74)							int _g_max12 = xIter36->max;
HXDLIN(  74)							while((_g_min12 < _g_max12)){
HXLINE(  74)								_g_min12 = (_g_min12 + 1);
HXDLIN(  74)								int px6 = (_g_min12 - 1);
HXDLIN(  74)								Float pcx6 = (( (Float)(px6) ) - nextX);
HXDLIN(  74)								{
HXLINE(  74)									int _g_min13 = yIter36->start;
HXDLIN(  74)									int _g_max13 = yIter36->max;
HXDLIN(  74)									while((_g_min13 < _g_max13)){
HXLINE(  74)										_g_min13 = (_g_min13 + 1);
HXDLIN(  74)										int py6 = (_g_min13 - 1);
HXDLIN(  74)										Float pcy6 = (( (Float)(py6) ) - nextY);
HXDLIN(  74)										Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN(  74)										Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN(  74)										Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN(  74)										Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN(  74)										Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN(  74)										bool _hx_tmp52;
HXDLIN(  74)										bool _hx_tmp53;
HXDLIN(  74)										if ((ratioA6 >= 0)) {
HXLINE(  74)											_hx_tmp53 = (ratioB6 >= 0);
            										}
            										else {
HXLINE(  74)											_hx_tmp53 = false;
            										}
HXDLIN(  74)										if (_hx_tmp53) {
HXLINE(  74)											_hx_tmp52 = (ratioC6 >= 0);
            										}
            										else {
HXLINE(  74)											_hx_tmp52 = false;
            										}
HXDLIN(  74)										if (_hx_tmp52) {
HXLINE(  74)											int i70 = ::Std_obj::_hx_int((((( (Float)(aA6) ) * ratioA6) + (( (Float)(aB6) ) * ratioB6)) + (( (Float)(aC6) ) * ratioC6)));
HXDLIN(  74)											if ((i70 > 255)) {
HXLINE(  24)												i70 = 255;
            											}
HXLINE(  74)											if ((i70 < 0)) {
HXLINE(  25)												i70 = 0;
            											}
HXLINE(  74)											int a49 = i70;
HXDLIN(  74)											int i71 = ::Std_obj::_hx_int((((( (Float)(rA6) ) * ratioA6) + (( (Float)(rB6) ) * ratioB6)) + (( (Float)(rC6) ) * ratioC6)));
HXDLIN(  74)											if ((i71 > 255)) {
HXLINE(  24)												i71 = 255;
            											}
HXLINE(  74)											if ((i71 < 0)) {
HXLINE(  25)												i71 = 0;
            											}
HXLINE(  74)											int r36 = i71;
HXDLIN(  74)											int i72 = ::Std_obj::_hx_int((((( (Float)(gA6) ) * ratioA6) + (( (Float)(gB6) ) * ratioB6)) + (( (Float)(gC6) ) * ratioC6)));
HXDLIN(  74)											if ((i72 > 255)) {
HXLINE(  24)												i72 = 255;
            											}
HXLINE(  74)											if ((i72 < 0)) {
HXLINE(  25)												i72 = 0;
            											}
HXLINE(  74)											int g36 = i72;
HXDLIN(  74)											int i73 = ::Std_obj::_hx_int((((( (Float)(bA6) ) * ratioA6) + (( (Float)(bB6) ) * ratioB6)) + (( (Float)(bC6) ) * ratioC6)));
HXDLIN(  74)											if ((i73 > 255)) {
HXLINE(  24)												i73 = 255;
            											}
HXLINE(  74)											if ((i73 < 0)) {
HXLINE(  25)												i73 = 0;
            											}
HXLINE(  74)											int b51 = i73;
HXDLIN(  74)											{
HXLINE(  74)												int location13;
HXDLIN(  74)												if (this193->useVirtualPos) {
HXLINE(  74)													location13 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - this193->virtualY) * ( (Float)(this193->width) )) + px6) - this193->virtualX));
            												}
            												else {
HXLINE(  74)													location13 = ::Std_obj::_hx_int(( (Float)(((py6 * this193->width) + px6)) ));
            												}
HXDLIN(  74)												bool _hx_tmp54;
HXDLIN(  74)												if (this193->transparent) {
HXLINE(  74)													_hx_tmp54 = (a49 < 254);
            												}
            												else {
HXLINE(  74)													_hx_tmp54 = false;
            												}
HXDLIN(  74)												if (_hx_tmp54) {
HXLINE(  74)													int this216 = ::iterMagic::Iimg_obj::get(this193->image,location13);
HXDLIN(  74)													int old6;
HXDLIN(  74)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)														old6 = ((((((this216 >> 24) & 255) << 24) | ((this216 & 255) << 16)) | (((this216 >> 8) & 255) << 8)) | ((this216 >> 16) & 255));
            													}
            													else {
HXLINE(  74)														old6 = this216;
            													}
HXDLIN(  74)													int rhs6 = ((((a49 << 24) | (r36 << 16)) | (g36 << 8)) | b51);
HXDLIN(  74)													Float a117;
HXDLIN(  74)													int this217 = ((old6 >> 24) & 255);
HXDLIN(  74)													if ((this217 == 0)) {
HXLINE(  74)														a117 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														a117 = (( (Float)(this217) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float r115;
HXDLIN(  74)													int this218 = ((old6 >> 16) & 255);
HXDLIN(  74)													if ((this218 == 0)) {
HXLINE(  74)														r115 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														r115 = (( (Float)(this218) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float g115;
HXDLIN(  74)													int this219 = ((old6 >> 8) & 255);
HXDLIN(  74)													if ((this219 == 0)) {
HXLINE(  74)														g115 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														g115 = (( (Float)(this219) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float b118;
HXDLIN(  74)													int this220 = (old6 & 255);
HXDLIN(  74)													if ((this220 == 0)) {
HXLINE(  74)														b118 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														b118 = (( (Float)(this220) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float a215;
HXDLIN(  74)													int this221 = ((rhs6 >> 24) & 255);
HXDLIN(  74)													if ((this221 == 0)) {
HXLINE(  74)														a215 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														a215 = (( (Float)(this221) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float r214;
HXDLIN(  74)													int this222 = ((rhs6 >> 16) & 255);
HXDLIN(  74)													if ((this222 == 0)) {
HXLINE(  74)														r214 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														r214 = (( (Float)(this222) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float g214;
HXDLIN(  74)													int this223 = ((rhs6 >> 8) & 255);
HXDLIN(  74)													if ((this223 == 0)) {
HXLINE(  74)														g214 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														g214 = (( (Float)(this223) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float b217;
HXDLIN(  74)													int this224 = (rhs6 & 255);
HXDLIN(  74)													if ((this224 == 0)) {
HXLINE(  74)														b217 = ((Float)0.);
            													}
            													else {
HXLINE(  74)														b217 = (( (Float)(this224) ) / ( (Float)(255) ));
            													}
HXDLIN(  74)													Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  74)													int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a314) + (r214 * a215))));
HXDLIN(  74)													int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a314) + (g214 * a215))));
HXDLIN(  74)													int b52 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b217 * a215))));
HXDLIN(  74)													int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  74)													int blended13 = ((((a50 << 24) | (r37 << 16)) | (g37 << 8)) | b52);
HXDLIN(  74)													{
HXLINE(  74)														int _hx_tmp55;
HXDLIN(  74)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  74)															_hx_tmp55 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            														}
            														else {
HXLINE(  74)															_hx_tmp55 = blended13;
            														}
HXDLIN(  74)														::iterMagic::Iimg_obj::set(this193->image,location13,_hx_tmp55);
            													}
            												}
            												else {
HXLINE(  74)													int value6;
HXDLIN(  74)													if (this193->isLittle) {
HXLINE(  74)														value6 = ((((a49 << 24) | (b51 << 16)) | (g36 << 8)) | r36);
            													}
            													else {
HXLINE(  74)														value6 = ((((a49 << 24) | (r36 << 16)) | (g36 << 8)) | b51);
            													}
HXDLIN(  74)													::iterMagic::Iimg_obj::set(this193->image,location13,value6);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  74)						if ((hasHit6 == false)) {
HXLINE(  74)							 ::pi_xy::algo::HitTri v20 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,nextX,nextY,true);
HXDLIN(  74)							if (hasUndo6) {
HXLINE(  74)								v20->undoImage = undoImage18;
HXDLIN(  74)								v20->undoX = xIter36->start;
HXDLIN(  74)								v20->undoY = yIter36->start;
            							}
            						}
            					}
            				}
HXLINE(  75)				lastX = nextX;
HXLINE(  76)				lastY = nextY;
            			}
            		}
HXLINE(  78)		{
HXLINE(  78)			 ::pi_xy::ImageStruct this225 = pixelimage;
HXDLIN(  78)			{
HXLINE(  78)				bool hasHit7 = false;
HXDLIN(  78)				bool hasUndo7 = false;
HXDLIN(  78)				int aA7 = ((colorOut >> 24) & 255);
HXDLIN(  78)				int rA7 = ((colorOut >> 16) & 255);
HXDLIN(  78)				int gA7 = ((colorOut >> 8) & 255);
HXDLIN(  78)				int bA7 = (colorOut & 255);
HXDLIN(  78)				int aB7 = ((colorIn >> 24) & 255);
HXDLIN(  78)				int rB7 = ((colorIn >> 16) & 255);
HXDLIN(  78)				int gB7 = ((colorIn >> 8) & 255);
HXDLIN(  78)				int bB7 = (colorIn & 255);
HXDLIN(  78)				int aC7 = ((colorOut >> 24) & 255);
HXDLIN(  78)				int rC7 = ((colorOut >> 16) & 255);
HXDLIN(  78)				int gC7 = ((colorOut >> 8) & 255);
HXDLIN(  78)				int bC7 = (colorOut & 255);
HXDLIN(  78)				Float bcx7 = (lastX - x);
HXDLIN(  78)				Float bcy7 = (lastY - y);
HXDLIN(  78)				Float acx7 = (mx - x);
HXDLIN(  78)				Float acy7 = (my - y);
HXDLIN(  78)				Float dot117 = ((bcx7 * bcx7) + (bcy7 * bcy7));
HXDLIN(  78)				Float dot127 = ((bcx7 * acx7) + (bcy7 * acy7));
HXDLIN(  78)				Float dot227 = ((acx7 * acx7) + (acy7 * acy7));
HXDLIN(  78)				Float denom17 = (( (Float)(1) ) / ((dot117 * dot227) - (dot127 * dot127)));
HXDLIN(  78)				 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  78)				if ((mx > lastX)) {
HXLINE(  78)					if ((mx > x)) {
HXLINE(  78)						int min28;
HXDLIN(  78)						if ((lastX > x)) {
HXLINE(  78)							min28 = ::Math_obj::floor(x);
            						}
            						else {
HXLINE(  78)							min28 = ::Math_obj::floor(lastX);
            						}
HXDLIN(  78)						int ii_min56 = min28;
HXDLIN(  78)						int ii_max56 = ::Math_obj::ceil(mx);
HXDLIN(  78)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            					}
            					else {
HXLINE(  78)						int ii_min57 = ::Math_obj::floor(lastX);
HXDLIN(  78)						int ii_max57 = ::Math_obj::ceil(x);
HXDLIN(  78)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            					}
            				}
            				else {
HXLINE(  78)					if ((lastX > x)) {
HXLINE(  78)						int min29;
HXDLIN(  78)						if ((mx > x)) {
HXLINE(  78)							min29 = ::Math_obj::floor(x);
            						}
            						else {
HXLINE(  78)							min29 = ::Math_obj::ceil(mx);
            						}
HXDLIN(  78)						int ii_min58 = min29;
HXDLIN(  78)						int ii_max58 = ::Math_obj::ceil(lastX);
HXDLIN(  78)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            					}
            					else {
HXLINE(  78)						int ii_min59 = ::Math_obj::floor(mx);
HXDLIN(  78)						int ii_max59 = ::Math_obj::ceil(x);
HXDLIN(  78)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            					}
            				}
HXDLIN(  78)				 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  78)				if ((my > lastY)) {
HXLINE(  78)					if ((my > y)) {
HXLINE(  78)						int min30;
HXDLIN(  78)						if ((lastY > y)) {
HXLINE(  78)							min30 = ::Math_obj::floor(y);
            						}
            						else {
HXLINE(  78)							min30 = ::Math_obj::floor(lastY);
            						}
HXDLIN(  78)						int ii_min60 = min30;
HXDLIN(  78)						int ii_max60 = ::Math_obj::ceil(my);
HXDLIN(  78)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            					}
            					else {
HXLINE(  78)						int ii_min61 = ::Math_obj::floor(lastY);
HXDLIN(  78)						int ii_max61 = ::Math_obj::ceil(y);
HXDLIN(  78)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            					}
            				}
            				else {
HXLINE(  78)					if ((lastY > y)) {
HXLINE(  78)						int min31;
HXDLIN(  78)						if ((my > y)) {
HXLINE(  78)							min31 = ::Math_obj::floor(y);
            						}
            						else {
HXLINE(  78)							min31 = ::Math_obj::ceil(my);
            						}
HXDLIN(  78)						int ii_min62 = min31;
HXDLIN(  78)						int ii_max62 = ::Math_obj::ceil(lastY);
HXDLIN(  78)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            					}
            					else {
HXLINE(  78)						int ii_min63 = ::Math_obj::floor(my);
HXDLIN(  78)						int ii_max63 = ::Math_obj::ceil(y);
HXDLIN(  78)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            					}
            				}
HXDLIN(  78)				 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  78)				if (hasUndo7) {
HXLINE(  78)					int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  78)					int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  78)					 ::Dynamic imageType7 = null();
HXDLIN(  78)					 ::pi_xy::ImageStruct this226 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  78)					if (::hx::IsNull( imageType7 )) {
HXLINE(  54)						imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  78)					::Dynamic undoImage22;
HXDLIN(  78)					switch((int)(( (int)(imageType7) ))){
            						case (int)0: {
HXLINE(  78)							 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  78)							 ::iterMagic::BytesImg b53 = byt7;
HXDLIN(  78)							{
HXLINE(  78)								b53->width = width7;
HXDLIN(  78)								b53->height = height7;
HXDLIN(  78)								b53->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  78)								b53->data = ::haxe::io::Bytes_obj::alloc((b53->length * 4));
HXDLIN(  78)								{
HXLINE(  78)									int len14 = b53->length;
HXDLIN(  78)									int w7 = 0;
HXDLIN(  78)									{
HXLINE(  78)										int _g148 = 0;
HXDLIN(  78)										int _g149 = b53->height;
HXDLIN(  78)										while((_g148 < _g149)){
HXLINE(  78)											_g148 = (_g148 + 1);
HXDLIN(  78)											int y22 = (_g148 - 1);
HXDLIN(  78)											{
HXLINE(  78)												int _g150 = 0;
HXDLIN(  78)												int _g151 = b53->width;
HXDLIN(  78)												while((_g150 < _g151)){
HXLINE(  78)													_g150 = (_g150 + 1);
HXDLIN(  78)													int x22 = (_g150 - 1);
HXDLIN(  78)													{
HXLINE(  78)														w7 = (w7 + 1);
HXDLIN(  78)														b53->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  78)													{
HXLINE(  78)														w7 = (w7 + 1);
HXDLIN(  78)														b53->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  78)													{
HXLINE(  78)														w7 = (w7 + 1);
HXDLIN(  78)														b53->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  78)													{
HXLINE(  78)														w7 = (w7 + 1);
HXDLIN(  78)														b53->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  78)							undoImage22 = b53;
            						}
            						break;
            						case (int)1: {
HXLINE(  78)							 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)							 ::iterMagic::ArrIntImg a51 = arrI7;
HXDLIN(  78)							{
HXLINE(  78)								a51->width = width7;
HXDLIN(  78)								a51->height = height7;
HXDLIN(  78)								a51->data = ::Array_obj< int >::__new(0);
HXDLIN(  78)								a51->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  78)								{
HXLINE(  78)									int _g152 = 0;
HXDLIN(  78)									int _g153 = a51->length;
HXDLIN(  78)									while((_g152 < _g153)){
HXLINE(  78)										_g152 = (_g152 + 1);
HXDLIN(  78)										int i74 = (_g152 - 1);
HXDLIN(  78)										a51->data[i74] = 0;
            									}
            								}
            							}
HXDLIN(  78)							undoImage22 = a51;
            						}
            						break;
            						case (int)2: {
HXLINE(  78)							 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  78)							 ::iterMagic::U32ArrImg b54 = u32a7;
HXDLIN(  78)							{
HXLINE(  78)								b54->width = width7;
HXDLIN(  78)								b54->height = height7;
HXDLIN(  78)								b54->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  78)								int size7 = (b54->length * 4);
HXDLIN(  78)								b54->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  78)								{
HXLINE(  78)									int _g154 = 0;
HXDLIN(  78)									int _g155 = b54->length;
HXDLIN(  78)									while((_g154 < _g155)){
HXLINE(  78)										_g154 = (_g154 + 1);
HXDLIN(  78)										int i75 = (_g154 - 1);
HXDLIN(  78)										{
HXLINE(  78)											 ::haxe::io::ArrayBufferViewImpl this227 = b54->data;
HXDLIN(  78)											bool undoImage23;
HXDLIN(  78)											if ((i75 >= 0)) {
HXLINE(  78)												undoImage23 = (i75 < (this227->byteLength >> 2));
            											}
            											else {
HXLINE(  78)												undoImage23 = false;
            											}
HXDLIN(  78)											if (undoImage23) {
HXLINE(  78)												 ::haxe::io::Bytes _this7 = this227->bytes;
HXDLIN(  78)												int pos7 = ((i75 << 2) + this227->byteOffset);
HXDLIN(  78)												_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  78)												_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  78)												_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  78)												_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  78)							undoImage22 = b54;
            						}
            						break;
            						case (int)3: {
HXLINE(  78)							 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)							 ::iterMagic::VecIntImg v21 = vec7;
HXDLIN(  78)							{
HXLINE(  78)								v21->width = width7;
HXDLIN(  78)								v21->height = height7;
HXDLIN(  78)								v21->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  78)								v21->data = ::Array_obj< int >::__new(v21->length);
HXDLIN(  78)								{
HXLINE(  78)									int _g156 = 0;
HXDLIN(  78)									int _g157 = v21->length;
HXDLIN(  78)									while((_g156 < _g157)){
HXLINE(  78)										_g156 = (_g156 + 1);
HXDLIN(  78)										int i76 = (_g156 - 1);
HXDLIN(  78)										v21->data->__unsafe_set(i76,0);
            									}
            								}
            							}
HXDLIN(  78)							undoImage22 = v21;
            						}
            						break;
            						case (int)4: {
HXLINE(  78)							 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)							 ::iterMagic::StackIntImg b55 = sInt7;
HXDLIN(  78)							{
HXLINE(  78)								b55->width = width7;
HXDLIN(  78)								b55->height = height7;
HXDLIN(  78)								b55->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  78)								b55->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  78)								{
HXLINE(  78)									int len15 = b55->length;
HXDLIN(  78)									 ::haxe::ds::GenericStack_Int d7 = b55->data;
HXDLIN(  78)									if (::hx::IsNull( d7->head )) {
HXLINE(  78)										int _g158 = 0;
HXDLIN(  78)										int _g159 = len15;
HXDLIN(  78)										while((_g158 < _g159)){
HXLINE(  78)											_g158 = (_g158 + 1);
HXDLIN(  78)											int i77 = (_g158 - 1);
HXDLIN(  78)											d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            										}
            									}
            									else {
HXLINE(  78)										int _g160 = 0;
HXDLIN(  78)										int _g161 = len15;
HXDLIN(  78)										while((_g160 < _g161)){
HXLINE(  78)											_g160 = (_g160 + 1);
HXDLIN(  78)											int i78 = (_g160 - 1);
HXDLIN(  78)											{
HXLINE(  78)												 ::haxe::ds::GenericCell_Int l8 = b55->data->head;
HXDLIN(  78)												 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  78)												{
HXLINE(  78)													int _g162 = 0;
HXDLIN(  78)													int _g163 = i78;
HXDLIN(  78)													while((_g162 < _g163)){
HXLINE(  78)														_g162 = (_g162 + 1);
HXDLIN(  78)														int i79 = (_g162 - 1);
HXLINE( 345)														prev7 = l8;
HXLINE( 346)														l8 = l8->next;
            													}
            												}
HXLINE(  78)												if (::hx::IsNull( prev7 )) {
HXLINE(  78)													b55->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  78)													l8 = null();
            												}
            												else {
HXLINE(  78)													prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  78)													l8 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  78)							undoImage22 = b55;
            						}
            						break;
            					}
HXDLIN(  78)					this226->image = undoImage22;
HXDLIN(  78)					this226->width = width7;
HXDLIN(  78)					this226->height = height7;
HXDLIN(  78)					this226->imageType = ( (int)(imageType7) );
HXDLIN(  78)					undoImage21 = this226;
HXDLIN(  78)					{
HXLINE(  78)						int rectLeft7 = xIter37->start;
HXDLIN(  78)						int rectTop7 = yIter37->start;
HXDLIN(  78)						int rectRight7 = xIter37->max;
HXDLIN(  78)						bool forceClear7 = false;
HXDLIN(  78)						{
HXLINE(  78)							int _g164 = rectTop7;
HXDLIN(  78)							int _g165 = yIter37->max;
HXDLIN(  78)							while((_g164 < _g165)){
HXLINE(  78)								_g164 = (_g164 + 1);
HXDLIN(  78)								int dy7 = (_g164 - 1);
HXDLIN(  78)								{
HXLINE(  78)									int _g166 = rectLeft7;
HXDLIN(  78)									int _g167 = rectRight7;
HXDLIN(  78)									while((_g166 < _g167)){
HXLINE(  78)										_g166 = (_g166 + 1);
HXDLIN(  78)										int dx7 = (_g166 - 1);
HXDLIN(  78)										::Dynamic this228 = this225->image;
HXDLIN(  78)										int index28;
HXDLIN(  78)										if (this225->useVirtualPos) {
HXLINE(  78)											index28 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this225->virtualY) * ( (Float)(this225->width) )) + dx7) - this225->virtualX));
            										}
            										else {
HXLINE(  78)											index28 = ::Std_obj::_hx_int(( (Float)(((dy7 * this225->width) + dx7)) ));
            										}
HXDLIN(  78)										int c21 = ::iterMagic::Iimg_obj::get(this228,index28);
HXDLIN(  78)										int col7;
HXDLIN(  78)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)											col7 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            										}
            										else {
HXLINE(  78)											col7 = c21;
            										}
HXDLIN(  78)										bool _hx_tmp56;
HXDLIN(  78)										if (this225->useMask) {
HXLINE(  78)											_hx_tmp56 = ::hx::IsNotNull( this225->mask );
            										}
            										else {
HXLINE(  78)											_hx_tmp56 = false;
            										}
HXDLIN(  78)										if (_hx_tmp56) {
HXLINE(  78)											 ::pi_xy::ImageStruct this229 = this225->mask;
HXDLIN(  78)											::Dynamic this230 = this229->image;
HXDLIN(  78)											int index29;
HXDLIN(  78)											if (this229->useVirtualPos) {
HXLINE(  78)												index29 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this229->virtualY) * ( (Float)(this229->width) )) + dx7) - this229->virtualX));
            											}
            											else {
HXLINE(  78)												index29 = ::Std_obj::_hx_int(( (Float)(((dy7 * this229->width) + dx7)) ));
            											}
HXDLIN(  78)											int c22 = ::iterMagic::Iimg_obj::get(this230,index29);
HXDLIN(  78)											int v22;
HXDLIN(  78)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)												v22 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            											}
            											else {
HXLINE(  78)												v22 = c22;
            											}
HXDLIN(  78)											int maskPixel7 = v22;
HXDLIN(  78)											int this231 = col7;
HXDLIN(  78)											if ((maskPixel7 == 0)) {
HXLINE(  78)												col7 = this231;
            											}
            											else {
HXLINE(  78)												Float m07;
HXDLIN(  78)												int this232 = ((maskPixel7 >> 24) & 255);
HXDLIN(  78)												if ((this232 == 0)) {
HXLINE(  78)													m07 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													m07 = (( (Float)(this232) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float m17;
HXDLIN(  78)												int this233 = ((maskPixel7 >> 16) & 255);
HXDLIN(  78)												if ((this233 == 0)) {
HXLINE(  78)													m17 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													m17 = (( (Float)(this233) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float m27;
HXDLIN(  78)												int this234 = ((maskPixel7 >> 8) & 255);
HXDLIN(  78)												if ((this234 == 0)) {
HXLINE(  78)													m27 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													m27 = (( (Float)(this234) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float m37;
HXDLIN(  78)												int this235 = (maskPixel7 & 255);
HXDLIN(  78)												if ((this235 == 0)) {
HXLINE(  78)													m37 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													m37 = (( (Float)(this235) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this231 >> 24) & 255)) )));
HXDLIN(  78)												int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this231 >> 16) & 255)) )));
HXDLIN(  78)												int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this231 >> 8) & 255)) )));
HXDLIN(  78)												int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this231 & 255)) )));
HXDLIN(  78)												col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  78)										if ((col7 != 0)) {
HXLINE(  78)											int x23 = (dx7 - rectLeft7);
HXDLIN(  78)											int y23 = (dy7 - rectTop7);
HXDLIN(  78)											int c23 = col7;
HXDLIN(  78)											bool _hx_tmp57;
HXDLIN(  78)											if ((((c23 >> 24) & 255) < 254)) {
HXLINE(  78)												_hx_tmp57 = undoImage21->transparent;
            											}
            											else {
HXLINE(  78)												_hx_tmp57 = false;
            											}
HXDLIN(  78)											if (_hx_tmp57) {
HXLINE(  78)												int location14;
HXDLIN(  78)												if (undoImage21->useVirtualPos) {
HXLINE(  78)													location14 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x23) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  78)													location14 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage21->width) + x23)) ));
            												}
HXDLIN(  78)												int this236 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN(  78)												int this237;
HXDLIN(  78)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)													this237 = ((((((this236 >> 24) & 255) << 24) | ((this236 & 255) << 16)) | (((this236 >> 8) & 255) << 8)) | ((this236 >> 16) & 255));
            												}
            												else {
HXLINE(  78)													this237 = this236;
            												}
HXDLIN(  78)												Float a118;
HXDLIN(  78)												int this238 = ((this237 >> 24) & 255);
HXDLIN(  78)												if ((this238 == 0)) {
HXLINE(  78)													a118 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													a118 = (( (Float)(this238) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float r116;
HXDLIN(  78)												int this239 = ((this237 >> 16) & 255);
HXDLIN(  78)												if ((this239 == 0)) {
HXLINE(  78)													r116 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													r116 = (( (Float)(this239) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float g116;
HXDLIN(  78)												int this240 = ((this237 >> 8) & 255);
HXDLIN(  78)												if ((this240 == 0)) {
HXLINE(  78)													g116 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													g116 = (( (Float)(this240) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float b119;
HXDLIN(  78)												int this241 = (this237 & 255);
HXDLIN(  78)												if ((this241 == 0)) {
HXLINE(  78)													b119 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													b119 = (( (Float)(this241) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float a216;
HXDLIN(  78)												int this242 = ((col7 >> 24) & 255);
HXDLIN(  78)												if ((this242 == 0)) {
HXLINE(  78)													a216 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													a216 = (( (Float)(this242) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float r215;
HXDLIN(  78)												int this243 = ((col7 >> 16) & 255);
HXDLIN(  78)												if ((this243 == 0)) {
HXLINE(  78)													r215 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													r215 = (( (Float)(this243) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float g215;
HXDLIN(  78)												int this244 = ((col7 >> 8) & 255);
HXDLIN(  78)												if ((this244 == 0)) {
HXLINE(  78)													g215 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													g215 = (( (Float)(this244) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float b218;
HXDLIN(  78)												int this245 = (col7 & 255);
HXDLIN(  78)												if ((this245 == 0)) {
HXLINE(  78)													b218 = ((Float)0.);
            												}
            												else {
HXLINE(  78)													b218 = (( (Float)(this245) ) / ( (Float)(255) ));
            												}
HXDLIN(  78)												Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  78)												int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a315) + (r215 * a216))));
HXDLIN(  78)												int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a315) + (g215 * a216))));
HXDLIN(  78)												int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b218 * a216))));
HXDLIN(  78)												int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  78)												int blended14 = ((((a52 << 24) | (r38 << 16)) | (g38 << 8)) | b56);
HXDLIN(  78)												{
HXLINE(  78)													int _hx_tmp58;
HXDLIN(  78)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)														_hx_tmp58 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            													}
            													else {
HXLINE(  78)														_hx_tmp58 = blended14;
            													}
HXDLIN(  78)													::iterMagic::Iimg_obj::set(undoImage21->image,location14,_hx_tmp58);
            												}
            											}
            											else {
HXLINE(  78)												::Dynamic this246 = undoImage21->image;
HXDLIN(  78)												int index30;
HXDLIN(  78)												if (undoImage21->useVirtualPos) {
HXLINE(  78)													index30 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x23) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  78)													index30 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage21->width) + x23)) ));
            												}
HXDLIN(  78)												int _hx_tmp59;
HXDLIN(  78)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)													_hx_tmp59 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            												}
            												else {
HXLINE(  78)													_hx_tmp59 = c23;
            												}
HXDLIN(  78)												::iterMagic::Iimg_obj::set(this246,index30,_hx_tmp59);
            											}
            										}
            										else {
HXLINE(  78)											if (forceClear7) {
HXLINE(  78)												::Dynamic this247 = undoImage21->image;
HXDLIN(  78)												int x24 = (dx7 - rectLeft7);
HXDLIN(  78)												int y24 = (dy7 - rectTop7);
HXDLIN(  78)												int index31;
HXDLIN(  78)												if (undoImage21->useVirtualPos) {
HXLINE(  78)													index31 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  78)													index31 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN(  78)												::iterMagic::Iimg_obj::set(this247,index31,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  78)				{
HXLINE(  78)					int _g_min14 = xIter37->start;
HXDLIN(  78)					int _g_max14 = xIter37->max;
HXDLIN(  78)					while((_g_min14 < _g_max14)){
HXLINE(  78)						_g_min14 = (_g_min14 + 1);
HXDLIN(  78)						int px7 = (_g_min14 - 1);
HXDLIN(  78)						Float pcx7 = (( (Float)(px7) ) - x);
HXDLIN(  78)						{
HXLINE(  78)							int _g_min15 = yIter37->start;
HXDLIN(  78)							int _g_max15 = yIter37->max;
HXDLIN(  78)							while((_g_min15 < _g_max15)){
HXLINE(  78)								_g_min15 = (_g_min15 + 1);
HXDLIN(  78)								int py7 = (_g_min15 - 1);
HXDLIN(  78)								Float pcy7 = (( (Float)(py7) ) - y);
HXDLIN(  78)								Float dot317 = ((pcx7 * bcx7) + (pcy7 * bcy7));
HXDLIN(  78)								Float dot327 = ((pcx7 * acx7) + (pcy7 * acy7));
HXDLIN(  78)								Float ratioA7 = (((dot227 * dot317) - (dot127 * dot327)) * denom17);
HXDLIN(  78)								Float ratioB7 = (((dot117 * dot327) - (dot127 * dot317)) * denom17);
HXDLIN(  78)								Float ratioC7 = ((((Float)1.0) - ratioB7) - ratioA7);
HXDLIN(  78)								bool _hx_tmp60;
HXDLIN(  78)								bool _hx_tmp61;
HXDLIN(  78)								if ((ratioA7 >= 0)) {
HXLINE(  78)									_hx_tmp61 = (ratioB7 >= 0);
            								}
            								else {
HXLINE(  78)									_hx_tmp61 = false;
            								}
HXDLIN(  78)								if (_hx_tmp61) {
HXLINE(  78)									_hx_tmp60 = (ratioC7 >= 0);
            								}
            								else {
HXLINE(  78)									_hx_tmp60 = false;
            								}
HXDLIN(  78)								if (_hx_tmp60) {
HXLINE(  78)									int i80 = ::Std_obj::_hx_int((((( (Float)(aA7) ) * ratioA7) + (( (Float)(aB7) ) * ratioB7)) + (( (Float)(aC7) ) * ratioC7)));
HXDLIN(  78)									if ((i80 > 255)) {
HXLINE(  24)										i80 = 255;
            									}
HXLINE(  78)									if ((i80 < 0)) {
HXLINE(  25)										i80 = 0;
            									}
HXLINE(  78)									int a53 = i80;
HXDLIN(  78)									int i81 = ::Std_obj::_hx_int((((( (Float)(rA7) ) * ratioA7) + (( (Float)(rB7) ) * ratioB7)) + (( (Float)(rC7) ) * ratioC7)));
HXDLIN(  78)									if ((i81 > 255)) {
HXLINE(  24)										i81 = 255;
            									}
HXLINE(  78)									if ((i81 < 0)) {
HXLINE(  25)										i81 = 0;
            									}
HXLINE(  78)									int r39 = i81;
HXDLIN(  78)									int i82 = ::Std_obj::_hx_int((((( (Float)(gA7) ) * ratioA7) + (( (Float)(gB7) ) * ratioB7)) + (( (Float)(gC7) ) * ratioC7)));
HXDLIN(  78)									if ((i82 > 255)) {
HXLINE(  24)										i82 = 255;
            									}
HXLINE(  78)									if ((i82 < 0)) {
HXLINE(  25)										i82 = 0;
            									}
HXLINE(  78)									int g39 = i82;
HXDLIN(  78)									int i83 = ::Std_obj::_hx_int((((( (Float)(bA7) ) * ratioA7) + (( (Float)(bB7) ) * ratioB7)) + (( (Float)(bC7) ) * ratioC7)));
HXDLIN(  78)									if ((i83 > 255)) {
HXLINE(  24)										i83 = 255;
            									}
HXLINE(  78)									if ((i83 < 0)) {
HXLINE(  25)										i83 = 0;
            									}
HXLINE(  78)									int b57 = i83;
HXDLIN(  78)									{
HXLINE(  78)										int location15;
HXDLIN(  78)										if (this225->useVirtualPos) {
HXLINE(  78)											location15 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - this225->virtualY) * ( (Float)(this225->width) )) + px7) - this225->virtualX));
            										}
            										else {
HXLINE(  78)											location15 = ::Std_obj::_hx_int(( (Float)(((py7 * this225->width) + px7)) ));
            										}
HXDLIN(  78)										bool _hx_tmp62;
HXDLIN(  78)										if (this225->transparent) {
HXLINE(  78)											_hx_tmp62 = (a53 < 254);
            										}
            										else {
HXLINE(  78)											_hx_tmp62 = false;
            										}
HXDLIN(  78)										if (_hx_tmp62) {
HXLINE(  78)											int this248 = ::iterMagic::Iimg_obj::get(this225->image,location15);
HXDLIN(  78)											int old7;
HXDLIN(  78)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)												old7 = ((((((this248 >> 24) & 255) << 24) | ((this248 & 255) << 16)) | (((this248 >> 8) & 255) << 8)) | ((this248 >> 16) & 255));
            											}
            											else {
HXLINE(  78)												old7 = this248;
            											}
HXDLIN(  78)											int rhs7 = ((((a53 << 24) | (r39 << 16)) | (g39 << 8)) | b57);
HXDLIN(  78)											Float a119;
HXDLIN(  78)											int this249 = ((old7 >> 24) & 255);
HXDLIN(  78)											if ((this249 == 0)) {
HXLINE(  78)												a119 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												a119 = (( (Float)(this249) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float r117;
HXDLIN(  78)											int this250 = ((old7 >> 16) & 255);
HXDLIN(  78)											if ((this250 == 0)) {
HXLINE(  78)												r117 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												r117 = (( (Float)(this250) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float g117;
HXDLIN(  78)											int this251 = ((old7 >> 8) & 255);
HXDLIN(  78)											if ((this251 == 0)) {
HXLINE(  78)												g117 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												g117 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float b120;
HXDLIN(  78)											int this252 = (old7 & 255);
HXDLIN(  78)											if ((this252 == 0)) {
HXLINE(  78)												b120 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												b120 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float a217;
HXDLIN(  78)											int this253 = ((rhs7 >> 24) & 255);
HXDLIN(  78)											if ((this253 == 0)) {
HXLINE(  78)												a217 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												a217 = (( (Float)(this253) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float r216;
HXDLIN(  78)											int this254 = ((rhs7 >> 16) & 255);
HXDLIN(  78)											if ((this254 == 0)) {
HXLINE(  78)												r216 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												r216 = (( (Float)(this254) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float g216;
HXDLIN(  78)											int this255 = ((rhs7 >> 8) & 255);
HXDLIN(  78)											if ((this255 == 0)) {
HXLINE(  78)												g216 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												g216 = (( (Float)(this255) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float b219;
HXDLIN(  78)											int this256 = (rhs7 & 255);
HXDLIN(  78)											if ((this256 == 0)) {
HXLINE(  78)												b219 = ((Float)0.);
            											}
            											else {
HXLINE(  78)												b219 = (( (Float)(this256) ) / ( (Float)(255) ));
            											}
HXDLIN(  78)											Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN(  78)											int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a316) + (r216 * a217))));
HXDLIN(  78)											int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a316) + (g216 * a217))));
HXDLIN(  78)											int b58 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b219 * a217))));
HXDLIN(  78)											int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  78)											int blended15 = ((((a54 << 24) | (r40 << 16)) | (g40 << 8)) | b58);
HXDLIN(  78)											{
HXLINE(  78)												int _hx_tmp63;
HXDLIN(  78)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)													_hx_tmp63 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            												}
            												else {
HXLINE(  78)													_hx_tmp63 = blended15;
            												}
HXDLIN(  78)												::iterMagic::Iimg_obj::set(this225->image,location15,_hx_tmp63);
            											}
            										}
            										else {
HXLINE(  78)											int value7;
HXDLIN(  78)											if (this225->isLittle) {
HXLINE(  78)												value7 = ((((a53 << 24) | (b57 << 16)) | (g39 << 8)) | r39);
            											}
            											else {
HXLINE(  78)												value7 = ((((a53 << 24) | (r39 << 16)) | (g39 << 8)) | b57);
            											}
HXDLIN(  78)											::iterMagic::Iimg_obj::set(this225->image,location15,value7);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  78)				if ((hasHit7 == false)) {
HXLINE(  78)					 ::pi_xy::algo::HitTri v23 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,x,y,true);
HXDLIN(  78)					if (hasUndo7) {
HXLINE(  78)						v23->undoImage = undoImage21;
HXDLIN(  78)						v23->undoX = xIter37->start;
HXDLIN(  78)						v23->undoY = yIter37->start;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(RectanglePixel_Fields__obj,fillRadialRect,(void))


RectanglePixel_Fields__obj::RectanglePixel_Fields__obj()
{
}

bool RectanglePixel_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"fillRadialRect") ) { outValue = fillRadialRect_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RectanglePixel_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *RectanglePixel_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class RectanglePixel_Fields__obj::__mClass;

static ::String RectanglePixel_Fields__obj_sStaticFields[] = {
	HX_("fillRadialRect",06,c8,54,61),
	::String(null())
};

void RectanglePixel_Fields__obj::__register()
{
	RectanglePixel_Fields__obj _hx_dummy;
	RectanglePixel_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._RectanglePixel.RectanglePixel_Fields_",0a,c0,47,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RectanglePixel_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RectanglePixel_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< RectanglePixel_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectanglePixel_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectanglePixel_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _RectanglePixel
