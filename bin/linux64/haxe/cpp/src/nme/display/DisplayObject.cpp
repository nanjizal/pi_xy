// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_NativeResource
#include <nme/NativeResource.h>
#endif
#ifndef INCLUDED_nme_app_IAppEventHandler
#include <nme/app/IAppEventHandler.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
#ifndef INCLUDED_nme_display_BlendMode
#include <nme/display/BlendMode.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_Graphics
#include <nme/display/Graphics.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_LoaderInfo
#include <nme/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_nme_display_PixelSnapping
#include <nme/display/PixelSnapping.h>
#endif
#ifndef INCLUDED_nme_display_Stage
#include <nme/display/Stage.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_EventPhase
#include <nme/events/EventPhase.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_geom_ColorTransform
#include <nme/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_nme_geom_Matrix
#include <nme/geom/Matrix.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif
#ifndef INCLUDED_nme_geom_Transform
#include <nme/geom/Transform.h>
#endif
#ifndef INCLUDED_nme_net_URLLoader
#include <nme/net/URLLoader.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_58_new,"nme.display.DisplayObject","new",0xeeb7739f,"nme.display.DisplayObject.new","nme/display/DisplayObject.hx",58,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_71_dispose,"nme.display.DisplayObject","dispose",0xadfc2f5e,"nme.display.DisplayObject.dispose","nme/display/DisplayObject.hx",71,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_76_dispatchEvent,"nme.display.DisplayObject","dispatchEvent",0x038e8eff,"nme.display.DisplayObject.dispatchEvent","nme/display/DisplayObject.hx",76,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_91_get_hitEnabled,"nme.display.DisplayObject","get_hitEnabled",0x96fd65d8,"nme.display.DisplayObject.get_hitEnabled","nme/display/DisplayObject.hx",91,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_93_set_hitEnabled,"nme.display.DisplayObject","set_hitEnabled",0xb71d4e4c,"nme.display.DisplayObject.set_hitEnabled","nme/display/DisplayObject.hx",93,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_99_getBounds,"nme.display.DisplayObject","getBounds",0xa37c2c2a,"nme.display.DisplayObject.getBounds","nme/display/DisplayObject.hx",99,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_106_getRect,"nme.display.DisplayObject","getRect",0x10d9ab99,"nme.display.DisplayObject.getRect","nme/display/DisplayObject.hx",106,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_113_globalToLocal,"nme.display.DisplayObject","globalToLocal",0xa8d816cc,"nme.display.DisplayObject.globalToLocal","nme/display/DisplayObject.hx",113,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_120_hitTestObject,"nme.display.DisplayObject","hitTestObject",0x148e1ce3,"nme.display.DisplayObject.hitTestObject","nme/display/DisplayObject.hx",120,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_145_hitTestPoint,"nme.display.DisplayObject","hitTestPoint",0x4e0526ac,"nme.display.DisplayObject.hitTestPoint","nme/display/DisplayObject.hx",145,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_149_localToGlobal,"nme.display.DisplayObject","localToGlobal",0x851509c8,"nme.display.DisplayObject.localToGlobal","nme/display/DisplayObject.hx",149,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_157_encodeDisplay,"nme.display.DisplayObject","encodeDisplay",0xb87936cb,"nme.display.DisplayObject.encodeDisplay","nme/display/DisplayObject.hx",157,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_170_nmeAsInteractiveObject,"nme.display.DisplayObject","nmeAsInteractiveObject",0xf74e456a,"nme.display.DisplayObject.nmeAsInteractiveObject","nme/display/DisplayObject.hx",170,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_174_nmeBroadcast,"nme.display.DisplayObject","nmeBroadcast",0xe7260fbc,"nme.display.DisplayObject.nmeBroadcast","nme/display/DisplayObject.hx",174,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_177_nmeDispatchEvent,"nme.display.DisplayObject","nmeDispatchEvent",0xb705ad3b,"nme.display.DisplayObject.nmeDispatchEvent","nme/display/DisplayObject.hx",177,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_189_nmeDrawToSurface,"nme.display.DisplayObject","nmeDrawToSurface",0xdca59789,"nme.display.DisplayObject.nmeDrawToSurface","nme/display/DisplayObject.hx",189,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_192_nmeFindByID,"nme.display.DisplayObject","nmeFindByID",0x0e95c9f0,"nme.display.DisplayObject.nmeFindByID","nme/display/DisplayObject.hx",192,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_198_nmeFireEvent,"nme.display.DisplayObject","nmeFireEvent",0x79799d3f,"nme.display.DisplayObject.nmeFireEvent","nme/display/DisplayObject.hx",198,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_247_nmeGetColorTransform,"nme.display.DisplayObject","nmeGetColorTransform",0x0263a67a,"nme.display.DisplayObject.nmeGetColorTransform","nme/display/DisplayObject.hx",247,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_253_nmeGetConcatenatedColorTransform,"nme.display.DisplayObject","nmeGetConcatenatedColorTransform",0x0431dd69,"nme.display.DisplayObject.nmeGetConcatenatedColorTransform","nme/display/DisplayObject.hx",253,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_259_nmeGetConcatenatedMatrix,"nme.display.DisplayObject","nmeGetConcatenatedMatrix",0x6a515c21,"nme.display.DisplayObject.nmeGetConcatenatedMatrix","nme/display/DisplayObject.hx",259,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_267_fillMatrix,"nme.display.DisplayObject","fillMatrix",0xe5738fc5,"nme.display.DisplayObject.fillMatrix","nme/display/DisplayObject.hx",267,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_270_nmeGetInteractiveObjectStack,"nme.display.DisplayObject","nmeGetInteractiveObjectStack",0x67b76d38,"nme.display.DisplayObject.nmeGetInteractiveObjectStack","nme/display/DisplayObject.hx",270,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_280_nmeGetMatrix,"nme.display.DisplayObject","nmeGetMatrix",0x402b2c32,"nme.display.DisplayObject.nmeGetMatrix","nme/display/DisplayObject.hx",280,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_287_nmeGetObjectsUnderPoint,"nme.display.DisplayObject","nmeGetObjectsUnderPoint",0x655d37bb,"nme.display.DisplayObject.nmeGetObjectsUnderPoint","nme/display/DisplayObject.hx",287,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_291_nmeGetPixelBounds,"nme.display.DisplayObject","nmeGetPixelBounds",0xfb714a0a,"nme.display.DisplayObject.nmeGetPixelBounds","nme/display/DisplayObject.hx",291,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_297_nmeOnAdded,"nme.display.DisplayObject","nmeOnAdded",0xa793ab1c,"nme.display.DisplayObject.nmeOnAdded","nme/display/DisplayObject.hx",297,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_313_nmeOnRemoved,"nme.display.DisplayObject","nmeOnRemoved",0xd2b744fc,"nme.display.DisplayObject.nmeOnRemoved","nme/display/DisplayObject.hx",313,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_330_nmeSetColorTransform,"nme.display.DisplayObject","nmeSetColorTransform",0x25d17e86,"nme.display.DisplayObject.nmeSetColorTransform","nme/display/DisplayObject.hx",330,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_334_nmeSetMatrix,"nme.display.DisplayObject","nmeSetMatrix",0x237c183e,"nme.display.DisplayObject.nmeSetMatrix","nme/display/DisplayObject.hx",334,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_337_nmeSetParent,"nme.display.DisplayObject","nmeSetParent",0x5531e727,"nme.display.DisplayObject.nmeSetParent","nme/display/DisplayObject.hx",337,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_370_toString,"nme.display.DisplayObject","toString",0x9f78090d,"nme.display.DisplayObject.toString","nme/display/DisplayObject.hx",370,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_374_get_alpha,"nme.display.DisplayObject","get_alpha",0x26482034,"nme.display.DisplayObject.get_alpha","nme/display/DisplayObject.hx",374,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_376_set_alpha,"nme.display.DisplayObject","set_alpha",0x09990c40,"nme.display.DisplayObject.set_alpha","nme/display/DisplayObject.hx",376,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_382_get_opaqueBackground,"nme.display.DisplayObject","get_opaqueBackground",0x12fee319,"nme.display.DisplayObject.get_opaqueBackground","nme/display/DisplayObject.hx",382,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_391_set_opaqueBackground,"nme.display.DisplayObject","set_opaqueBackground",0xdfb69a8d,"nme.display.DisplayObject.set_opaqueBackground","nme/display/DisplayObject.hx",391,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_401_get_blendMode,"nme.display.DisplayObject","get_blendMode",0x0ac5802a,"nme.display.DisplayObject.get_blendMode","nme/display/DisplayObject.hx",401,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_407_set_blendMode,"nme.display.DisplayObject","set_blendMode",0x4fcb6236,"nme.display.DisplayObject.set_blendMode","nme/display/DisplayObject.hx",407,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_412_get_cacheAsBitmap,"nme.display.DisplayObject","get_cacheAsBitmap",0x86c6c1b9,"nme.display.DisplayObject.get_cacheAsBitmap","nme/display/DisplayObject.hx",412,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_414_set_cacheAsBitmap,"nme.display.DisplayObject","set_cacheAsBitmap",0xaa3499c5,"nme.display.DisplayObject.set_cacheAsBitmap","nme/display/DisplayObject.hx",414,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_419_get_pedanticBitmapCaching,"nme.display.DisplayObject","get_pedanticBitmapCaching",0x111349f4,"nme.display.DisplayObject.get_pedanticBitmapCaching","nme/display/DisplayObject.hx",419,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_421_set_pedanticBitmapCaching,"nme.display.DisplayObject","set_pedanticBitmapCaching",0x7d6a0e00,"nme.display.DisplayObject.set_pedanticBitmapCaching","nme/display/DisplayObject.hx",421,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_426_get_respectScrollRectExtent,"nme.display.DisplayObject","get_respectScrollRectExtent",0xf55cec57,"nme.display.DisplayObject.get_respectScrollRectExtent","nme/display/DisplayObject.hx",426,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_428_set_respectScrollRectExtent,"nme.display.DisplayObject","set_respectScrollRectExtent",0x37f5cb63,"nme.display.DisplayObject.set_respectScrollRectExtent","nme/display/DisplayObject.hx",428,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_435_get_pixelSnapping,"nme.display.DisplayObject","get_pixelSnapping",0xd558ed38,"nme.display.DisplayObject.get_pixelSnapping","nme/display/DisplayObject.hx",435,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_441_set_pixelSnapping,"nme.display.DisplayObject","set_pixelSnapping",0xf8c6c544,"nme.display.DisplayObject.set_pixelSnapping","nme/display/DisplayObject.hx",441,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_455_get_filters,"nme.display.DisplayObject","get_filters",0xb7e87c11,"nme.display.DisplayObject.get_filters","nme/display/DisplayObject.hx",455,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_467_set_filters,"nme.display.DisplayObject","set_filters",0xc255831d,"nme.display.DisplayObject.set_filters","nme/display/DisplayObject.hx",467,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_486_get_graphics,"nme.display.DisplayObject","get_graphics",0x316529b5,"nme.display.DisplayObject.get_graphics","nme/display/DisplayObject.hx",486,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_493_get_height,"nme.display.DisplayObject","get_height",0x18e44a51,"nme.display.DisplayObject.get_height","nme/display/DisplayObject.hx",493,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_495_set_height,"nme.display.DisplayObject","set_height",0x1c61e8c5,"nme.display.DisplayObject.set_height","nme/display/DisplayObject.hx",495,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_501_set_mask,"nme.display.DisplayObject","set_mask",0xdd778e4a,"nme.display.DisplayObject.set_mask","nme/display/DisplayObject.hx",501,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_507_get_mouseX,"nme.display.DisplayObject","get_mouseX",0xe2a68cfd,"nme.display.DisplayObject.get_mouseX","nme/display/DisplayObject.hx",507,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_508_get_mouseY,"nme.display.DisplayObject","get_mouseY",0xe2a68cfe,"nme.display.DisplayObject.get_mouseY","nme/display/DisplayObject.hx",508,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_510_get_name,"nme.display.DisplayObject","get_name",0x2fc36635,"nme.display.DisplayObject.get_name","nme/display/DisplayObject.hx",510,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_512_set_name,"nme.display.DisplayObject","set_name",0xde20bfa9,"nme.display.DisplayObject.set_name","nme/display/DisplayObject.hx",512,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_517_get_parent,"nme.display.DisplayObject","get_parent",0x04164794,"nme.display.DisplayObject.get_parent","nme/display/DisplayObject.hx",517,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_519_get_rotation,"nme.display.DisplayObject","get_rotation",0x27836e28,"nme.display.DisplayObject.get_rotation","nme/display/DisplayObject.hx",519,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_521_set_rotation,"nme.display.DisplayObject","set_rotation",0x3c7c919c,"nme.display.DisplayObject.set_rotation","nme/display/DisplayObject.hx",521,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_526_get_scale9Grid,"nme.display.DisplayObject","get_scale9Grid",0x4c7d103f,"nme.display.DisplayObject.get_scale9Grid","nme/display/DisplayObject.hx",526,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_528_set_scale9Grid,"nme.display.DisplayObject","set_scale9Grid",0x6c9cf8b3,"nme.display.DisplayObject.set_scale9Grid","nme/display/DisplayObject.hx",528,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_534_get_scaleX,"nme.display.DisplayObject","get_scaleX",0x52be2cf8,"nme.display.DisplayObject.get_scaleX","nme/display/DisplayObject.hx",534,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_536_set_scaleX,"nme.display.DisplayObject","set_scaleX",0x563bcb6c,"nme.display.DisplayObject.set_scaleX","nme/display/DisplayObject.hx",536,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_541_get_scaleY,"nme.display.DisplayObject","get_scaleY",0x52be2cf9,"nme.display.DisplayObject.get_scaleY","nme/display/DisplayObject.hx",541,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_543_set_scaleY,"nme.display.DisplayObject","set_scaleY",0x563bcb6d,"nme.display.DisplayObject.set_scaleY","nme/display/DisplayObject.hx",543,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_548_get_scrollRect,"nme.display.DisplayObject","get_scrollRect",0xc6c19b3b,"nme.display.DisplayObject.get_scrollRect","nme/display/DisplayObject.hx",548,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_550_set_scrollRect,"nme.display.DisplayObject","set_scrollRect",0xe6e183af,"nme.display.DisplayObject.set_scrollRect","nme/display/DisplayObject.hx",550,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_557_get_stage,"nme.display.DisplayObject","get_stage",0x88bce394,"nme.display.DisplayObject.get_stage","nme/display/DisplayObject.hx",557,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_564_get_transform,"nme.display.DisplayObject","get_transform",0x4420c942,"nme.display.DisplayObject.get_transform","nme/display/DisplayObject.hx",564,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_566_set_transform,"nme.display.DisplayObject","set_transform",0x8926ab4e,"nme.display.DisplayObject.set_transform","nme/display/DisplayObject.hx",566,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_572_get_visible,"nme.display.DisplayObject","get_visible",0x51c652c8,"nme.display.DisplayObject.get_visible","nme/display/DisplayObject.hx",572,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_574_set_visible,"nme.display.DisplayObject","set_visible",0x5c3359d4,"nme.display.DisplayObject.set_visible","nme/display/DisplayObject.hx",574,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_579_get_width,"nme.display.DisplayObject","get_width",0xcf142edc,"nme.display.DisplayObject.get_width","nme/display/DisplayObject.hx",579,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_581_set_width,"nme.display.DisplayObject","set_width",0xb2651ae8,"nme.display.DisplayObject.set_width","nme/display/DisplayObject.hx",581,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_586_get_x,"nme.display.DisplayObject","get_x",0x9a62d64e,"nme.display.DisplayObject.get_x","nme/display/DisplayObject.hx",586,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_588_set_x,"nme.display.DisplayObject","set_x",0x8331cc5a,"nme.display.DisplayObject.set_x","nme/display/DisplayObject.hx",588,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_593_get_y,"nme.display.DisplayObject","get_y",0x9a62d64f,"nme.display.DisplayObject.get_y","nme/display/DisplayObject.hx",593,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_595_set_y,"nme.display.DisplayObject","set_y",0x8331cc5b,"nme.display.DisplayObject.set_y","nme/display/DisplayObject.hx",595,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_163_decodeDisplay,"nme.display.DisplayObject","decodeDisplay",0x22fddeb3,"nme.display.DisplayObject.decodeDisplay","nme/display/DisplayObject.hx",163,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_161_boot,"nme.display.DisplayObject","boot",0xe9e6b813,"nme.display.DisplayObject.boot","nme/display/DisplayObject.hx",161,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_17435606fcc6e5bd_9_boot,"nme.display.DisplayObject","boot",0xe9e6b813,"nme.display.DisplayObject.boot","nme/PrimeLoader.hx",9,0xcf416155)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_621_boot,"nme.display.DisplayObject","boot",0xe9e6b813,"nme.display.DisplayObject.boot","nme/display/DisplayObject.hx",621,0xd0c831b3)
HX_LOCAL_STACK_FRAME(_hx_pos_5e11f79dab5c6fd5_623_boot,"nme.display.DisplayObject","boot",0xe9e6b813,"nme.display.DisplayObject.boot","nme/display/DisplayObject.hx",623,0xd0c831b3)
namespace nme{
namespace display{

void DisplayObject_obj::__construct( ::Dynamic inHandle,::String inType){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_58_new)
HXLINE(  59)		this->nmeHandle = inHandle;
HXLINE(  60)		if (::hx::IsNotNull( this->nmeParent )) {
HXLINE(  61)			::nme::display::DisplayObject_obj::nme_doc_add_child(::hx::DynamicPtr(this->nmeParent->nmeHandle),::hx::DynamicPtr(this->nmeHandle));
            		}
HXLINE(  62)		this->nmeID = ::nme::display::DisplayObject_obj::nme_display_object_get_id(::hx::DynamicPtr(this->nmeHandle));
HXLINE(  64)		super::__construct(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  65)		if (::hx::IsNotNull( inType )) {
HXLINE(  66)			this->set_name(((inType + HX_(" ",20,00,00,00)) + this->nmeID));
            		}
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

void *DisplayObject_obj::_hx_vtable = 0;

Dynamic DisplayObject_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DisplayObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ff07575) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ff07575;
	} else {
		return inClassId==(int)0x169017a6;
	}
}

static ::nme::display::IBitmapDrawable_obj _hx_nme_display_DisplayObject__hx_nme_display_IBitmapDrawable= {
	( void (::hx::Object::*)( ::Dynamic, ::nme::geom::Matrix, ::nme::geom::ColorTransform,::String, ::nme::geom::Rectangle,bool))&::nme::display::DisplayObject_obj::nmeDrawToSurface,
};

void *DisplayObject_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xfe58bb1a: return &_hx_nme_display_DisplayObject__hx_nme_display_IBitmapDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void DisplayObject_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_71_dispose)
HXDLIN(  71)		if (::hx::IsNotNull( this->nmeHandle )) {
HXDLIN(  71)			::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(this->nmeHandle));
HXDLIN(  71)			this->nmeHandle = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,dispose,(void))

bool DisplayObject_obj::dispatchEvent( ::nme::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_76_dispatchEvent)
HXLINE(  77)		bool result = this->nmeDispatchEvent(event);
HXLINE(  79)		if (event->nmeGetIsCancelled()) {
HXLINE(  80)			return true;
            		}
HXLINE(  82)		bool _hx_tmp;
HXDLIN(  82)		if (event->get_bubbles()) {
HXLINE(  82)			_hx_tmp = ::hx::IsNotNull( this->get_parent() );
            		}
            		else {
HXLINE(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  84)			this->get_parent()->dispatchEvent(event);
            		}
HXLINE(  87)		return result;
            	}


bool DisplayObject_obj::get_hitEnabled(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_91_get_hitEnabled)
HXDLIN(  91)		return ::nme::display::DisplayObject_obj::nme_display_object_get_hit_enabled(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_hitEnabled,return )

bool DisplayObject_obj::set_hitEnabled(bool inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_93_set_hitEnabled)
HXLINE(  94)		::nme::display::DisplayObject_obj::nme_display_object_set_hit_enabled(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE(  95)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_hitEnabled,return )

 ::nme::geom::Rectangle DisplayObject_obj::getBounds( ::nme::display::DisplayObject targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_99_getBounds)
HXLINE( 100)		 ::nme::geom::Rectangle result =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 101)		::nme::display::DisplayObject_obj::nme_display_object_get_bounds(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(targetCoordinateSpace->nmeHandle),::hx::DynamicPtr(result),true);
HXLINE( 102)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getBounds,return )

 ::nme::geom::Rectangle DisplayObject_obj::getRect( ::nme::display::DisplayObject targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_106_getRect)
HXLINE( 107)		 ::nme::geom::Rectangle result =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 108)		::nme::display::DisplayObject_obj::nme_display_object_get_bounds(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(targetCoordinateSpace->nmeHandle),::hx::DynamicPtr(result),false);
HXLINE( 109)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getRect,return )

 ::nme::geom::Point DisplayObject_obj::globalToLocal( ::nme::geom::Point inGlobal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_113_globalToLocal)
HXLINE( 114)		 ::nme::geom::Point result = inGlobal->clone();
HXLINE( 115)		::nme::display::DisplayObject_obj::nme_display_object_global_to_local(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(result));
HXLINE( 116)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,globalToLocal,return )

bool DisplayObject_obj::hitTestObject( ::nme::display::DisplayObject object){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_120_hitTestObject)
HXLINE( 121)		bool _hx_tmp;
HXDLIN( 121)		bool _hx_tmp1;
HXDLIN( 121)		if (::hx::IsNotNull( object )) {
HXLINE( 121)			_hx_tmp1 = ::hx::IsNotNull( object->get_parent() );
            		}
            		else {
HXLINE( 121)			_hx_tmp1 = false;
            		}
HXDLIN( 121)		if (_hx_tmp1) {
HXLINE( 121)			_hx_tmp = ::hx::IsNotNull( this->get_parent() );
            		}
            		else {
HXLINE( 121)			_hx_tmp = false;
            		}
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 123)			 ::nme::geom::Matrix currentMatrix = this->get_transform()->get_concatenatedMatrix();
HXLINE( 124)			 ::nme::geom::Matrix targetMatrix = object->get_transform()->get_concatenatedMatrix();
HXLINE( 126)			 ::nme::geom::Point xPoint =  ::nme::geom::Point_obj::__alloc( HX_CTX ,1,0);
HXLINE( 127)			 ::nme::geom::Point yPoint =  ::nme::geom::Point_obj::__alloc( HX_CTX ,0,1);
HXLINE( 129)			Float currentWidth = this->get_width();
HXDLIN( 129)			Float currentWidth1 = (currentWidth * currentMatrix->deltaTransformPoint(xPoint)->get_length());
HXLINE( 130)			Float currentHeight = this->get_height();
HXDLIN( 130)			Float currentHeight1 = (currentHeight * currentMatrix->deltaTransformPoint(yPoint)->get_length());
HXLINE( 131)			Float targetWidth = object->get_width();
HXDLIN( 131)			Float targetWidth1 = (targetWidth * targetMatrix->deltaTransformPoint(xPoint)->get_length());
HXLINE( 132)			Float targetHeight = object->get_height();
HXDLIN( 132)			Float targetHeight1 = (targetHeight * targetMatrix->deltaTransformPoint(yPoint)->get_length());
HXLINE( 134)			 ::nme::geom::Rectangle currentRect =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,currentMatrix->tx,currentMatrix->ty,currentWidth1,currentHeight1);
HXLINE( 135)			 ::nme::geom::Rectangle targetRect =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,targetMatrix->tx,targetMatrix->ty,targetWidth1,targetHeight1);
HXLINE( 137)			return currentRect->intersects(targetRect);
            		}
HXLINE( 140)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestObject,return )

bool DisplayObject_obj::hitTestPoint(Float x,Float y,::hx::Null< bool >  __o_shapeFlag){
            		bool shapeFlag = __o_shapeFlag.Default(false);
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_145_hitTestPoint)
HXDLIN( 145)		return ::nme::display::DisplayObject_obj::nme_display_object_hit_test_point(::hx::DynamicPtr(this->nmeHandle),x,y,shapeFlag,true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,hitTestPoint,return )

 ::nme::geom::Point DisplayObject_obj::localToGlobal( ::nme::geom::Point inLocal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_149_localToGlobal)
HXLINE( 150)		 ::nme::geom::Point result = inLocal->clone();
HXLINE( 151)		::nme::display::DisplayObject_obj::nme_display_object_local_to_global(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(result));
HXLINE( 152)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,localToGlobal,return )

 ::nme::utils::ByteArray DisplayObject_obj::encodeDisplay(::hx::Null< int >  __o_inFlags){
            		int inFlags = __o_inFlags.Default(0);
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_157_encodeDisplay)
HXDLIN( 157)		return ( ( ::Dynamic)(::nme::display::DisplayObject_obj::nme_display_object_encode(::hx::DynamicPtr(this->nmeHandle),inFlags)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,encodeDisplay,return )

 ::nme::display::InteractiveObject DisplayObject_obj::nmeAsInteractiveObject(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_170_nmeAsInteractiveObject)
HXDLIN( 170)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,nmeAsInteractiveObject,return )

void DisplayObject_obj::nmeBroadcast( ::nme::events::Event inEvt){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_174_nmeBroadcast)
HXDLIN( 174)		this->nmeDispatchEvent(inEvt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeBroadcast,(void))

bool DisplayObject_obj::nmeDispatchEvent( ::nme::events::Event inEvt){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_177_nmeDispatchEvent)
HXLINE( 178)		if (::hx::IsNull( inEvt->get_target() )) {
HXLINE( 180)			inEvt->set_target(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 183)		inEvt->set_currentTarget(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 184)		return this->super::dispatchEvent(inEvt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeDispatchEvent,return )

void DisplayObject_obj::nmeDrawToSurface( ::Dynamic inSurface, ::nme::geom::Matrix matrix, ::nme::geom::ColorTransform colorTransform,::String blendMode, ::nme::geom::Rectangle clipRect,bool smoothing){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_189_nmeDrawToSurface)
HXDLIN( 189)		::nme::display::DisplayObject_obj::nme_display_object_draw_to_surface(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(inSurface),::hx::DynamicPtr(matrix),::hx::DynamicPtr(colorTransform),0,::hx::DynamicPtr(clipRect));
            	}


HX_DEFINE_DYNAMIC_FUNC6(DisplayObject_obj,nmeDrawToSurface,(void))

 ::nme::display::DisplayObject DisplayObject_obj::nmeFindByID(int inID){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_192_nmeFindByID)
HXLINE( 193)		if ((this->nmeID == inID)) {
HXLINE( 194)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 195)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeFindByID,return )

void DisplayObject_obj::nmeFireEvent( ::nme::events::Event inEvt){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_198_nmeFireEvent)
HXLINE( 199)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 201)		if (::hx::IsNotNull( this->nmeParent )) {
HXLINE( 202)			this->nmeParent->nmeGetInteractiveObjectStack(stack);
            		}
HXLINE( 204)		int l = stack->length;
HXLINE( 206)		if ((l > 0)) {
HXLINE( 209)			inEvt->nmeSetPhase(::nme::events::EventPhase_obj::CAPTURING_PHASE);
HXLINE( 210)			stack->reverse();
HXLINE( 212)			{
HXLINE( 212)				int _g = 0;
HXDLIN( 212)				while((_g < stack->length)){
HXLINE( 212)					 ::nme::display::InteractiveObject obj = stack->__get(_g).StaticCast<  ::nme::display::InteractiveObject >();
HXDLIN( 212)					_g = (_g + 1);
HXLINE( 214)					inEvt->set_currentTarget(obj);
HXLINE( 215)					obj->nmeDispatchEvent(inEvt);
HXLINE( 217)					if (inEvt->nmeGetIsCancelled()) {
HXLINE( 218)						return;
            					}
            				}
            			}
            		}
HXLINE( 223)		inEvt->nmeSetPhase(::nme::events::EventPhase_obj::AT_TARGET);
HXLINE( 224)		inEvt->set_currentTarget(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 225)		this->nmeDispatchEvent(inEvt);
HXLINE( 227)		if (inEvt->nmeGetIsCancelled()) {
HXLINE( 228)			return;
            		}
HXLINE( 231)		if (inEvt->get_bubbles()) {
HXLINE( 233)			inEvt->nmeSetPhase(::nme::events::EventPhase_obj::BUBBLING_PHASE);
HXLINE( 234)			stack->reverse();
HXLINE( 236)			{
HXLINE( 236)				int _g1 = 0;
HXDLIN( 236)				while((_g1 < stack->length)){
HXLINE( 236)					 ::nme::display::InteractiveObject obj1 = stack->__get(_g1).StaticCast<  ::nme::display::InteractiveObject >();
HXDLIN( 236)					_g1 = (_g1 + 1);
HXLINE( 238)					inEvt->set_currentTarget(obj1);
HXLINE( 239)					obj1->nmeDispatchEvent(inEvt);
HXLINE( 241)					if (inEvt->nmeGetIsCancelled()) {
HXLINE( 242)						return;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeFireEvent,(void))

 ::nme::geom::ColorTransform DisplayObject_obj::nmeGetColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_247_nmeGetColorTransform)
HXLINE( 248)		 ::nme::geom::ColorTransform trans =  ::nme::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 249)		::nme::display::DisplayObject_obj::nme_display_object_get_color_transform(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(trans),false);
HXLINE( 250)		return trans;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,nmeGetColorTransform,return )

 ::nme::geom::ColorTransform DisplayObject_obj::nmeGetConcatenatedColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_253_nmeGetConcatenatedColorTransform)
HXLINE( 254)		 ::nme::geom::ColorTransform trans =  ::nme::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 255)		::nme::display::DisplayObject_obj::nme_display_object_get_color_transform(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(trans),true);
HXLINE( 256)		return trans;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,nmeGetConcatenatedColorTransform,return )

 ::nme::geom::Matrix DisplayObject_obj::nmeGetConcatenatedMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_259_nmeGetConcatenatedMatrix)
HXLINE( 260)		 ::nme::geom::Matrix mtx =  ::nme::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 261)		::nme::display::DisplayObject_obj::nme_display_object_get_matrix(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(mtx),true);
HXLINE( 262)		return mtx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,nmeGetConcatenatedMatrix,return )

void DisplayObject_obj::fillMatrix( ::nme::geom::Matrix outMatrix,bool concatenated){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_267_fillMatrix)
HXDLIN( 267)		::nme::display::DisplayObject_obj::nme_display_object_get_matrix(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(outMatrix),concatenated);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,fillMatrix,(void))

void DisplayObject_obj::nmeGetInteractiveObjectStack(::Array< ::Dynamic> outStack){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_270_nmeGetInteractiveObjectStack)
HXLINE( 271)		 ::nme::display::InteractiveObject io = this->nmeAsInteractiveObject();
HXLINE( 273)		if (::hx::IsNotNull( io )) {
HXLINE( 274)			outStack->push(io);
            		}
HXLINE( 276)		if (::hx::IsNotNull( this->nmeParent )) {
HXLINE( 277)			this->nmeParent->nmeGetInteractiveObjectStack(outStack);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeGetInteractiveObjectStack,(void))

 ::nme::geom::Matrix DisplayObject_obj::nmeGetMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_280_nmeGetMatrix)
HXLINE( 281)		 ::nme::geom::Matrix mtx =  ::nme::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 282)		::nme::display::DisplayObject_obj::nme_display_object_get_matrix(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(mtx),false);
HXLINE( 283)		return mtx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,nmeGetMatrix,return )

void DisplayObject_obj::nmeGetObjectsUnderPoint( ::nme::geom::Point point,::Array< ::Dynamic> result){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_287_nmeGetObjectsUnderPoint)
HXDLIN( 287)		if (::nme::display::DisplayObject_obj::nme_display_object_hit_test_point(::hx::DynamicPtr(this->nmeHandle),point->x,point->y,true,false)) {
HXLINE( 288)			result->push(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,nmeGetObjectsUnderPoint,(void))

 ::nme::geom::Rectangle DisplayObject_obj::nmeGetPixelBounds(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_291_nmeGetPixelBounds)
HXLINE( 292)		 ::nme::geom::Rectangle rect =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 293)		::nme::display::DisplayObject_obj::nme_display_object_get_pixel_bounds(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rect));
HXLINE( 294)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,nmeGetPixelBounds,return )

void DisplayObject_obj::nmeOnAdded( ::nme::display::DisplayObject inObj,bool inIsOnStage){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_297_nmeOnAdded)
HXLINE( 298)		if (::hx::IsInstanceEq( inObj,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 300)			 ::nme::events::Event evt =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("added",c0,d4,43,1c),true,false);
HXLINE( 301)			evt->set_target(inObj);
HXLINE( 302)			this->dispatchEvent(evt);
            		}
HXLINE( 305)		if (inIsOnStage) {
HXLINE( 307)			 ::nme::events::Event evt1 =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false);
HXLINE( 308)			evt1->set_target(inObj);
HXLINE( 309)			this->dispatchEvent(evt1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,nmeOnAdded,(void))

void DisplayObject_obj::nmeOnRemoved( ::nme::display::DisplayObject inObj,bool inWasOnStage){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_313_nmeOnRemoved)
HXLINE( 314)		if (::hx::IsInstanceEq( inObj,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 316)			 ::nme::events::Event evt =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,false);
HXLINE( 317)			evt->set_target(inObj);
HXLINE( 318)			this->dispatchEvent(evt);
            		}
HXLINE( 321)		if (inWasOnStage) {
HXLINE( 323)			 ::nme::events::Event evt1 =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 324)			evt1->set_target(inObj);
HXLINE( 325)			this->dispatchEvent(evt1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,nmeOnRemoved,(void))

void DisplayObject_obj::nmeSetColorTransform( ::nme::geom::ColorTransform inTrans){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_330_nmeSetColorTransform)
HXDLIN( 330)		::nme::display::DisplayObject_obj::nme_display_object_set_color_transform(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(inTrans));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeSetColorTransform,(void))

void DisplayObject_obj::nmeSetMatrix( ::nme::geom::Matrix inMatrix){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_334_nmeSetMatrix)
HXDLIN( 334)		::nme::display::DisplayObject_obj::nme_display_object_set_matrix(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(inMatrix));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeSetMatrix,(void))

 ::nme::display::DisplayObjectContainer DisplayObject_obj::nmeSetParent( ::nme::display::DisplayObjectContainer inParent){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_337_nmeSetParent)
HXLINE( 338)		if (::hx::IsInstanceEq( inParent,this->nmeParent )) {
HXLINE( 339)			return inParent;
            		}
HXLINE( 341)		if (::hx::IsNotNull( this->nmeParent )) {
HXLINE( 342)			this->nmeParent->nmeRemoveChildFromArray(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 344)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 347)			this->nmeParent = inParent;
            		}
            		else {
HXLINE( 349)			bool _hx_tmp;
HXDLIN( 349)			if (::hx::IsNull( this->nmeParent )) {
HXLINE( 349)				_hx_tmp = ::hx::IsNotNull( inParent );
            			}
            			else {
HXLINE( 349)				_hx_tmp = false;
            			}
HXDLIN( 349)			if (_hx_tmp) {
HXLINE( 351)				this->nmeParent = inParent;
HXLINE( 352)				this->nmeOnAdded(::hx::ObjectPtr<OBJ_>(this),::hx::IsNotNull( this->get_stage() ));
            			}
            			else {
HXLINE( 354)				bool _hx_tmp1;
HXDLIN( 354)				if (::hx::IsNotNull( this->nmeParent )) {
HXLINE( 354)					_hx_tmp1 = ::hx::IsNull( inParent );
            				}
            				else {
HXLINE( 354)					_hx_tmp1 = false;
            				}
HXDLIN( 354)				if (_hx_tmp1) {
HXLINE( 356)					bool was_on_stage = ::hx::IsNotNull( this->get_stage() );
HXLINE( 357)					this->nmeParent = inParent;
HXLINE( 358)					this->nmeOnRemoved(::hx::ObjectPtr<OBJ_>(this),was_on_stage);
            				}
            				else {
HXLINE( 362)					this->nmeParent = inParent;
            				}
            			}
            		}
HXLINE( 365)		return inParent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,nmeSetParent,return )

::String DisplayObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_370_toString)
HXDLIN( 370)		return this->get_name();
            	}


Float DisplayObject_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_374_get_alpha)
HXDLIN( 374)		return ::nme::display::DisplayObject_obj::nme_display_object_get_alpha(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float inAlpha){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_376_set_alpha)
HXLINE( 377)		::nme::display::DisplayObject_obj::nme_display_object_set_alpha(::hx::DynamicPtr(this->nmeHandle),inAlpha);
HXLINE( 378)		return inAlpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

 ::Dynamic DisplayObject_obj::get_opaqueBackground(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_382_get_opaqueBackground)
HXLINE( 383)		int i = ::nme::display::DisplayObject_obj::nme_display_object_get_bg(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 384)		if (((i & 16777216) == 0)) {
HXLINE( 385)			return null();
            		}
HXLINE( 387)		return (i & 16777215);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_opaqueBackground,return )

 ::Dynamic DisplayObject_obj::set_opaqueBackground( ::Dynamic inBG){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_391_set_opaqueBackground)
HXLINE( 392)		if (::hx::IsNull( inBG )) {
HXLINE( 393)			::nme::display::DisplayObject_obj::nme_display_object_set_bg(::hx::DynamicPtr(this->nmeHandle),0);
            		}
            		else {
HXLINE( 395)			::nme::display::DisplayObject_obj::nme_display_object_set_bg(::hx::DynamicPtr(this->nmeHandle),( (int)(inBG) ));
            		}
HXLINE( 397)		return inBG;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_opaqueBackground,return )

 ::nme::display::BlendMode DisplayObject_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_401_get_blendMode)
HXLINE( 402)		int i = ::nme::display::DisplayObject_obj::nme_display_object_get_blend_mode(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 403)		return ::Type_obj::createEnumIndex(::hx::ClassOf< ::nme::display::BlendMode >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_blendMode,return )

 ::nme::display::BlendMode DisplayObject_obj::set_blendMode( ::nme::display::BlendMode inMode){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_407_set_blendMode)
HXLINE( 408)		::cpp::Function< void  ( ::hx::Object *,int) > _hx_tmp = ::nme::display::DisplayObject_obj::nme_display_object_set_blend_mode;
HXDLIN( 408)		 ::Dynamic _hx_tmp1 = this->nmeHandle;
HXDLIN( 408)		_hx_tmp(::hx::DynamicPtr(_hx_tmp1),_hx_getEnumValueIndex(inMode));
HXLINE( 409)		return inMode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

bool DisplayObject_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_412_get_cacheAsBitmap)
HXDLIN( 412)		return ::nme::display::DisplayObject_obj::nme_display_object_get_cache_as_bitmap(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmap,return )

bool DisplayObject_obj::set_cacheAsBitmap(bool inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_414_set_cacheAsBitmap)
HXLINE( 415)		::nme::display::DisplayObject_obj::nme_display_object_set_cache_as_bitmap(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 416)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmap,return )

bool DisplayObject_obj::get_pedanticBitmapCaching(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_419_get_pedanticBitmapCaching)
HXDLIN( 419)		return ::nme::display::DisplayObject_obj::nme_display_object_get_pedantic_bitmap_caching(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_pedanticBitmapCaching,return )

bool DisplayObject_obj::set_pedanticBitmapCaching(bool inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_421_set_pedanticBitmapCaching)
HXLINE( 422)		::nme::display::DisplayObject_obj::nme_display_object_set_pedantic_bitmap_caching(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 423)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_pedanticBitmapCaching,return )

bool DisplayObject_obj::get_respectScrollRectExtent(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_426_get_respectScrollRectExtent)
HXDLIN( 426)		return ::nme::display::DisplayObject_obj::nme_display_object_get_respect_scroll_rect_extent(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_respectScrollRectExtent,return )

bool DisplayObject_obj::set_respectScrollRectExtent(bool inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_428_set_respectScrollRectExtent)
HXLINE( 429)		::nme::display::DisplayObject_obj::nme_display_object_set_respect_scroll_rect_extent(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 430)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_respectScrollRectExtent,return )

 ::nme::display::PixelSnapping DisplayObject_obj::get_pixelSnapping(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_435_get_pixelSnapping)
HXLINE( 436)		int val = ::nme::display::DisplayObject_obj::nme_display_object_get_pixel_snapping(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 437)		return ::Type_obj::createEnumIndex(::hx::ClassOf< ::nme::display::PixelSnapping >(),val,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_pixelSnapping,return )

 ::nme::display::PixelSnapping DisplayObject_obj::set_pixelSnapping( ::nme::display::PixelSnapping inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_441_set_pixelSnapping)
HXLINE( 442)		if (::hx::IsNull( inVal )) {
HXLINE( 444)			::nme::display::DisplayObject_obj::nme_display_object_set_pixel_snapping(::hx::DynamicPtr(this->nmeHandle),0);
            		}
            		else {
HXLINE( 448)			::cpp::Function< void  ( ::hx::Object *,int) > _hx_tmp = ::nme::display::DisplayObject_obj::nme_display_object_set_pixel_snapping;
HXDLIN( 448)			 ::Dynamic _hx_tmp1 = this->nmeHandle;
HXDLIN( 448)			_hx_tmp(::hx::DynamicPtr(_hx_tmp1),_hx_getEnumValueIndex(inVal));
            		}
HXLINE( 451)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_pixelSnapping,return )

::cpp::VirtualArray DisplayObject_obj::get_filters(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_455_get_filters)
HXLINE( 456)		if (::hx::IsNull( this->nmeFilters )) {
HXLINE( 456)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 458)		::cpp::VirtualArray result = ::cpp::VirtualArray_obj::__new();
HXLINE( 460)		{
HXLINE( 460)			int _g = 0;
HXDLIN( 460)			::cpp::VirtualArray _g1 = this->nmeFilters;
HXDLIN( 460)			while((_g < _g1->get_length())){
HXLINE( 460)				 ::Dynamic filter = _g1->__get(_g);
HXDLIN( 460)				_g = (_g + 1);
HXLINE( 461)				result->push(filter->__Field(HX_("clone",5d,13,63,48),::hx::paccDynamic)());
            			}
            		}
HXLINE( 463)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filters,return )

::cpp::VirtualArray DisplayObject_obj::set_filters(::cpp::VirtualArray inFilters){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_467_set_filters)
HXLINE( 468)		if (::hx::IsNull( inFilters )) {
HXLINE( 470)			this->nmeFilters = null();
            		}
            		else {
HXLINE( 474)			this->nmeFilters = ::cpp::VirtualArray_obj::__new();
HXLINE( 476)			{
HXLINE( 476)				int _g = 0;
HXDLIN( 476)				while((_g < inFilters->get_length())){
HXLINE( 476)					 ::Dynamic filter = inFilters->__get(_g);
HXDLIN( 476)					_g = (_g + 1);
HXLINE( 477)					::cpp::VirtualArray _hx_tmp = this->nmeFilters;
HXDLIN( 477)					_hx_tmp->push(filter->__Field(HX_("clone",5d,13,63,48),::hx::paccDynamic)());
            				}
            			}
            		}
HXLINE( 480)		::nme::display::DisplayObject_obj::nme_display_object_set_filters(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(this->nmeFilters));
HXLINE( 482)		return inFilters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filters,return )

 ::nme::display::Graphics DisplayObject_obj::get_graphics(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_486_get_graphics)
HXLINE( 487)		if (::hx::IsNull( this->nmeGraphicsCache )) {
HXLINE( 488)			this->nmeGraphicsCache =  ::nme::display::Graphics_obj::__alloc( HX_CTX ,( ( ::Dynamic)(::nme::display::DisplayObject_obj::nme_display_object_get_graphics(::hx::DynamicPtr(this->nmeHandle))) ));
            		}
HXLINE( 490)		return this->nmeGraphicsCache;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_graphics,return )

Float DisplayObject_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_493_get_height)
HXDLIN( 493)		return ::nme::display::DisplayObject_obj::nme_display_object_get_height(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_495_set_height)
HXLINE( 496)		::nme::display::DisplayObject_obj::nme_display_object_set_height(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 497)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

 ::nme::display::DisplayObject DisplayObject_obj::set_mask( ::nme::display::DisplayObject inObject){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_501_set_mask)
HXLINE( 502)		this->mask = inObject;
HXLINE( 503)		 ::hx::Object * _hx_tmp;
HXDLIN( 503)		if (::hx::IsNull( inObject )) {
HXLINE( 503)			_hx_tmp = ::hx::DynamicPtr(null());
            		}
            		else {
HXLINE( 503)			_hx_tmp = ::hx::DynamicPtr(inObject->nmeHandle);
            		}
HXDLIN( 503)		::nme::display::DisplayObject_obj::nme_display_object_set_mask(::hx::DynamicPtr(this->nmeHandle),_hx_tmp);
HXLINE( 504)		return inObject;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

Float DisplayObject_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_507_get_mouseX)
HXDLIN( 507)		return ::nme::display::DisplayObject_obj::nme_display_object_get_mouse_x(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseX,return )

Float DisplayObject_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_508_get_mouseY)
HXDLIN( 508)		return ::nme::display::DisplayObject_obj::nme_display_object_get_mouse_y(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseY,return )

::String DisplayObject_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_510_get_name)
HXDLIN( 510)		return ( (::String)(::nme::display::DisplayObject_obj::nme_display_object_get_name(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_512_set_name)
HXLINE( 513)		::nme::display::DisplayObject_obj::nme_display_object_set_name(this->nmeHandle,inVal);
HXLINE( 514)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::nme::display::DisplayObjectContainer DisplayObject_obj::get_parent(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_517_get_parent)
HXDLIN( 517)		return this->nmeParent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_parent,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_519_get_rotation)
HXDLIN( 519)		return ::nme::display::DisplayObject_obj::nme_display_object_get_rotation(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_521_set_rotation)
HXLINE( 522)		::nme::display::DisplayObject_obj::nme_display_object_set_rotation(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 523)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

 ::nme::geom::Rectangle DisplayObject_obj::get_scale9Grid(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_526_get_scale9Grid)
HXDLIN( 526)		if (::hx::IsNull( this->nmeScale9Grid )) {
HXDLIN( 526)			return null();
            		}
            		else {
HXDLIN( 526)			return this->nmeScale9Grid->clone();
            		}
HXDLIN( 526)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scale9Grid,return )

 ::nme::geom::Rectangle DisplayObject_obj::set_scale9Grid( ::nme::geom::Rectangle inRect){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_528_set_scale9Grid)
HXLINE( 529)		 ::nme::geom::Rectangle _hx_tmp;
HXDLIN( 529)		if (::hx::IsNull( inRect )) {
HXLINE( 529)			_hx_tmp = null();
            		}
            		else {
HXLINE( 529)			_hx_tmp = inRect->clone();
            		}
HXDLIN( 529)		this->nmeScale9Grid = _hx_tmp;
HXLINE( 530)		::nme::display::DisplayObject_obj::nme_display_object_set_scale9_grid(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(this->nmeScale9Grid));
HXLINE( 531)		return inRect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scale9Grid,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_534_get_scaleX)
HXDLIN( 534)		return ::nme::display::DisplayObject_obj::nme_display_object_get_scale_x(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_536_set_scaleX)
HXLINE( 537)		::nme::display::DisplayObject_obj::nme_display_object_set_scale_x(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 538)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_541_get_scaleY)
HXDLIN( 541)		return ::nme::display::DisplayObject_obj::nme_display_object_get_scale_y(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_543_set_scaleY)
HXLINE( 544)		::nme::display::DisplayObject_obj::nme_display_object_set_scale_y(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 545)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

 ::nme::geom::Rectangle DisplayObject_obj::get_scrollRect(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_548_get_scrollRect)
HXDLIN( 548)		if (::hx::IsNull( this->nmeScrollRect )) {
HXDLIN( 548)			return null();
            		}
            		else {
HXDLIN( 548)			return this->nmeScrollRect->clone();
            		}
HXDLIN( 548)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scrollRect,return )

 ::nme::geom::Rectangle DisplayObject_obj::set_scrollRect( ::nme::geom::Rectangle inRect){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_550_set_scrollRect)
HXLINE( 551)		 ::nme::geom::Rectangle _hx_tmp;
HXDLIN( 551)		if (::hx::IsNull( inRect )) {
HXLINE( 551)			_hx_tmp = null();
            		}
            		else {
HXLINE( 551)			_hx_tmp = inRect->clone();
            		}
HXDLIN( 551)		this->nmeScrollRect = _hx_tmp;
HXLINE( 552)		::nme::display::DisplayObject_obj::nme_display_object_set_scroll_rect(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(this->nmeScrollRect));
HXLINE( 553)		return inRect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scrollRect,return )

 ::nme::display::Stage DisplayObject_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_557_get_stage)
HXLINE( 558)		if (::hx::IsNotNull( this->nmeParent )) {
HXLINE( 559)			return this->nmeParent->get_stage();
            		}
HXLINE( 561)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_stage,return )

 ::nme::geom::Transform DisplayObject_obj::get_transform(){
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_564_get_transform)
HXDLIN( 564)		return  ::nme::geom::Transform_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transform,return )

 ::nme::geom::Transform DisplayObject_obj::set_transform( ::nme::geom::Transform inTransform){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_566_set_transform)
HXLINE( 567)		this->nmeSetMatrix(inTransform->get_matrix());
HXLINE( 568)		this->nmeSetColorTransform(inTransform->get_colorTransform());
HXLINE( 569)		return inTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transform,return )

bool DisplayObject_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_572_get_visible)
HXDLIN( 572)		return ::nme::display::DisplayObject_obj::nme_display_object_get_visible(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

bool DisplayObject_obj::set_visible(bool inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_574_set_visible)
HXLINE( 575)		::nme::display::DisplayObject_obj::nme_display_object_set_visible(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 576)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

Float DisplayObject_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_579_get_width)
HXDLIN( 579)		return ::nme::display::DisplayObject_obj::nme_display_object_get_width(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_581_set_width)
HXLINE( 582)		::nme::display::DisplayObject_obj::nme_display_object_set_width(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 583)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_586_get_x)
HXDLIN( 586)		return ::nme::display::DisplayObject_obj::nme_display_object_get_x(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_588_set_x)
HXLINE( 589)		::nme::display::DisplayObject_obj::nme_display_object_set_x(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 590)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_593_get_y)
HXDLIN( 593)		return ::nme::display::DisplayObject_obj::nme_display_object_get_y(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float inVal){
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_595_set_y)
HXLINE( 596)		::nme::display::DisplayObject_obj::nme_display_object_set_y(::hx::DynamicPtr(this->nmeHandle),inVal);
HXLINE( 597)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

int DisplayObject_obj::DISPLAY_KEEP_ID;

 ::nme::display::DisplayObject DisplayObject_obj::decodeDisplay( ::nme::utils::ByteArray inBytes,::hx::Null< int >  __o_inFlags){
            		int inFlags = __o_inFlags.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_163_decodeDisplay)
HXLINE( 164)		 ::hx::Object * handle = ::nme::display::DisplayObject_obj::nme_display_object_decode(::hx::DynamicPtr(inBytes),inFlags);
HXLINE( 166)		return  ::nme::display::DisplayObject_obj::__alloc( HX_CTX ,( ( ::Dynamic)(handle) ),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,decodeDisplay,return )

::cpp::Function<  ::hx::Object *  () > DisplayObject_obj::nme_create_display_object;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_graphics;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *) > DisplayObject_obj::nme_display_object_draw_to_surface;

::cpp::Function< int  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_id;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_x;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_x;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_y;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_y;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_scale_x;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_scale_x;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_scale_y;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_scale_y;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_mouse_x;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_mouse_y;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_rotation;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_rotation;

::cpp::Function< int  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_bg;

::cpp::Function< void  ( ::hx::Object *,int) > DisplayObject_obj::nme_display_object_set_bg;

 ::Dynamic DisplayObject_obj::nme_display_object_get_name;

 ::Dynamic DisplayObject_obj::nme_display_object_set_name;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_width;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_width;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_height;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_height;

::cpp::Function< Float  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_alpha;

::cpp::Function< void  ( ::hx::Object *,Float) > DisplayObject_obj::nme_display_object_set_alpha;

::cpp::Function< int  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_blend_mode;

::cpp::Function< void  ( ::hx::Object *,int) > DisplayObject_obj::nme_display_object_set_blend_mode;

::cpp::Function< bool  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_cache_as_bitmap;

::cpp::Function< void  ( ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_set_cache_as_bitmap;

::cpp::Function< bool  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_pedantic_bitmap_caching;

::cpp::Function< void  ( ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_set_pedantic_bitmap_caching;

::cpp::Function< bool  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_respect_scroll_rect_extent;

::cpp::Function< void  ( ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_set_respect_scroll_rect_extent;

::cpp::Function< int  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_pixel_snapping;

::cpp::Function< void  ( ::hx::Object *,int) > DisplayObject_obj::nme_display_object_set_pixel_snapping;

::cpp::Function< bool  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_visible;

::cpp::Function< void  ( ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_set_visible;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_set_filters;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_global_to_local;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_local_to_global;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_set_scale9_grid;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_set_scroll_rect;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_set_mask;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_set_matrix;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_get_matrix;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_get_color_transform;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_set_color_transform;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_display_object_get_pixel_bounds;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_get_bounds;

::cpp::Function< bool  ( ::hx::Object *,Float,Float,bool,bool) > DisplayObject_obj::nme_display_object_hit_test_point;

::cpp::Function< bool  ( ::hx::Object *) > DisplayObject_obj::nme_display_object_get_hit_enabled;

::cpp::Function< void  ( ::hx::Object *,bool) > DisplayObject_obj::nme_display_object_set_hit_enabled;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > DisplayObject_obj::nme_doc_add_child;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *,int) > DisplayObject_obj::nme_display_object_encode;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *,int) > DisplayObject_obj::nme_display_object_decode;


::hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new( ::Dynamic inHandle,::String inType) {
	::hx::ObjectPtr< DisplayObject_obj > __this = new DisplayObject_obj();
	__this->__construct(inHandle,inType);
	return __this;
}

::hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inHandle,::String inType) {
	DisplayObject_obj *__this = (DisplayObject_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObject_obj), true, "nme.display.DisplayObject"));
	*(void **)__this = DisplayObject_obj::_hx_vtable;
	__this->__construct(inHandle,inType);
	return __this;
}

DisplayObject_obj::DisplayObject_obj()
{
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_MEMBER_NAME(graphics,"graphics");
	HX_MARK_MEMBER_NAME(loaderInfo,"loaderInfo");
	HX_MARK_MEMBER_NAME(mask,"mask");
	HX_MARK_MEMBER_NAME(mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(mouseY,"mouseY");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(nmeFilters,"nmeFilters");
	HX_MARK_MEMBER_NAME(nmeGraphicsCache,"nmeGraphicsCache");
	HX_MARK_MEMBER_NAME(nmeID,"nmeID");
	HX_MARK_MEMBER_NAME(nmeParent,"nmeParent");
	HX_MARK_MEMBER_NAME(nmeScale9Grid,"nmeScale9Grid");
	HX_MARK_MEMBER_NAME(nmeScrollRect,"nmeScrollRect");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(graphics,"graphics");
	HX_VISIT_MEMBER_NAME(loaderInfo,"loaderInfo");
	HX_VISIT_MEMBER_NAME(mask,"mask");
	HX_VISIT_MEMBER_NAME(mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(mouseY,"mouseY");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(nmeFilters,"nmeFilters");
	HX_VISIT_MEMBER_NAME(nmeGraphicsCache,"nmeGraphicsCache");
	HX_VISIT_MEMBER_NAME(nmeID,"nmeID");
	HX_VISIT_MEMBER_NAME(nmeParent,"nmeParent");
	HX_VISIT_MEMBER_NAME(nmeScale9Grid,"nmeScale9Grid");
	HX_VISIT_MEMBER_NAME(nmeScrollRect,"nmeScrollRect");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DisplayObject_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_y() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { return ::hx::Val( mask ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_name() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"stage") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_stage() : stage ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"nmeID") ) { return ::hx::Val( nmeID ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_mouseX() : mouseX ); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_mouseY() : mouseY ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_parent() : parent ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_scaleY() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_filters() ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_visible() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return ::hx::Val( getRect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_graphics() : graphics ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return ::hx::Val( set_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return ::hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return ::hx::Val( set_name_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_transform() ); }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"nmeParent") ) { return ::hx::Val( nmeParent ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return ::hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return ::hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return ::hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stage") ) { return ::hx::Val( get_stage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hitEnabled") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_hitEnabled() ); }
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { return ::hx::Val( loaderInfo ); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_scale9Grid() ); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_scrollRect() ); }
		if (HX_FIELD_EQ(inName,"nmeFilters") ) { return ::hx::Val( nmeFilters ); }
		if (HX_FIELD_EQ(inName,"fillMatrix") ) { return ::hx::Val( fillMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeOnAdded") ) { return ::hx::Val( nmeOnAdded_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return ::hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return ::hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_parent") ) { return ::hx::Val( get_parent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return ::hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return ::hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return ::hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return ::hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nmeFindByID") ) { return ::hx::Val( nmeFindByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_filters") ) { return ::hx::Val( get_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return ::hx::Val( set_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return ::hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return ::hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hitTestPoint") ) { return ::hx::Val( hitTestPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeBroadcast") ) { return ::hx::Val( nmeBroadcast_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeFireEvent") ) { return ::hx::Val( nmeFireEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeGetMatrix") ) { return ::hx::Val( nmeGetMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeOnRemoved") ) { return ::hx::Val( nmeOnRemoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeSetMatrix") ) { return ::hx::Val( nmeSetMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeSetParent") ) { return ::hx::Val( nmeSetParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_graphics") ) { return ::hx::Val( get_graphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return ::hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return ::hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_cacheAsBitmap() ); }
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_pixelSnapping() ); }
		if (HX_FIELD_EQ(inName,"nmeScale9Grid") ) { return ::hx::Val( nmeScale9Grid ); }
		if (HX_FIELD_EQ(inName,"nmeScrollRect") ) { return ::hx::Val( nmeScrollRect ); }
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return ::hx::Val( dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return ::hx::Val( globalToLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTestObject") ) { return ::hx::Val( hitTestObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return ::hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"encodeDisplay") ) { return ::hx::Val( encodeDisplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return ::hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return ::hx::Val( set_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return ::hx::Val( get_transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return ::hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_hitEnabled") ) { return ::hx::Val( get_hitEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hitEnabled") ) { return ::hx::Val( set_hitEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale9Grid") ) { return ::hx::Val( get_scale9Grid_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale9Grid") ) { return ::hx::Val( set_scale9Grid_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollRect") ) { return ::hx::Val( get_scrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollRect") ) { return ::hx::Val( set_scrollRect_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_opaqueBackground() ); }
		if (HX_FIELD_EQ(inName,"nmeGraphicsCache") ) { return ::hx::Val( nmeGraphicsCache ); }
		if (HX_FIELD_EQ(inName,"nmeDispatchEvent") ) { return ::hx::Val( nmeDispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeDrawToSurface") ) { return ::hx::Val( nmeDrawToSurface_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeGetPixelBounds") ) { return ::hx::Val( nmeGetPixelBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return ::hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return ::hx::Val( set_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pixelSnapping") ) { return ::hx::Val( get_pixelSnapping_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pixelSnapping") ) { return ::hx::Val( set_pixelSnapping_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nmeGetColorTransform") ) { return ::hx::Val( nmeGetColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeSetColorTransform") ) { return ::hx::Val( nmeSetColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_opaqueBackground") ) { return ::hx::Val( get_opaqueBackground_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_opaqueBackground") ) { return ::hx::Val( set_opaqueBackground_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"pedanticBitmapCaching") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_pedanticBitmapCaching() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nmeAsInteractiveObject") ) { return ::hx::Val( nmeAsInteractiveObject_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"respectScrollRectExtent") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_respectScrollRectExtent() ); }
		if (HX_FIELD_EQ(inName,"nmeGetObjectsUnderPoint") ) { return ::hx::Val( nmeGetObjectsUnderPoint_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nmeGetConcatenatedMatrix") ) { return ::hx::Val( nmeGetConcatenatedMatrix_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"get_pedanticBitmapCaching") ) { return ::hx::Val( get_pedanticBitmapCaching_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pedanticBitmapCaching") ) { return ::hx::Val( set_pedanticBitmapCaching_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"get_respectScrollRectExtent") ) { return ::hx::Val( get_respectScrollRectExtent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_respectScrollRectExtent") ) { return ::hx::Val( set_respectScrollRectExtent_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nmeGetInteractiveObjectStack") ) { return ::hx::Val( nmeGetInteractiveObjectStack_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nmeGetConcatenatedColorTransform") ) { return ::hx::Val( nmeGetConcatenatedColorTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"decodeDisplay") ) { outValue = decodeDisplay_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nme_doc_add_child") ) { outValue = ( nme_doc_add_child ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_x") ) { outValue = ( nme_display_object_get_x ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_x") ) { outValue = ( nme_display_object_set_x ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_y") ) { outValue = ( nme_display_object_get_y ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_y") ) { outValue = ( nme_display_object_set_y ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_create_display_object") ) { outValue = ( nme_create_display_object ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_id") ) { outValue = ( nme_display_object_get_id ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_bg") ) { outValue = ( nme_display_object_get_bg ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_bg") ) { outValue = ( nme_display_object_set_bg ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_encode") ) { outValue = ( nme_display_object_encode ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_decode") ) { outValue = ( nme_display_object_decode ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_name") ) { outValue = ( nme_display_object_get_name ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_name") ) { outValue = ( nme_display_object_set_name ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_mask") ) { outValue = ( nme_display_object_set_mask ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_width") ) { outValue = ( nme_display_object_get_width ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_width") ) { outValue = ( nme_display_object_set_width ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_alpha") ) { outValue = ( nme_display_object_get_alpha ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_alpha") ) { outValue = ( nme_display_object_set_alpha ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_height") ) { outValue = ( nme_display_object_get_height ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_height") ) { outValue = ( nme_display_object_set_height ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_matrix") ) { outValue = ( nme_display_object_set_matrix ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_matrix") ) { outValue = ( nme_display_object_get_matrix ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_bounds") ) { outValue = ( nme_display_object_get_bounds ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_scale_x") ) { outValue = ( nme_display_object_get_scale_x ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scale_x") ) { outValue = ( nme_display_object_set_scale_x ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_scale_y") ) { outValue = ( nme_display_object_get_scale_y ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scale_y") ) { outValue = ( nme_display_object_set_scale_y ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_mouse_x") ) { outValue = ( nme_display_object_get_mouse_x ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_mouse_y") ) { outValue = ( nme_display_object_get_mouse_y ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_visible") ) { outValue = ( nme_display_object_get_visible ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_visible") ) { outValue = ( nme_display_object_set_visible ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_filters") ) { outValue = ( nme_display_object_set_filters ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_graphics") ) { outValue = ( nme_display_object_get_graphics ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_rotation") ) { outValue = ( nme_display_object_get_rotation ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_rotation") ) { outValue = ( nme_display_object_set_rotation ); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_blend_mode") ) { outValue = ( nme_display_object_get_blend_mode ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_blend_mode") ) { outValue = ( nme_display_object_set_blend_mode ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_hit_test_point") ) { outValue = ( nme_display_object_hit_test_point ); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"nme_display_object_draw_to_surface") ) { outValue = ( nme_display_object_draw_to_surface ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_global_to_local") ) { outValue = ( nme_display_object_global_to_local ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_local_to_global") ) { outValue = ( nme_display_object_local_to_global ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scale9_grid") ) { outValue = ( nme_display_object_set_scale9_grid ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scroll_rect") ) { outValue = ( nme_display_object_set_scroll_rect ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_hit_enabled") ) { outValue = ( nme_display_object_get_hit_enabled ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_hit_enabled") ) { outValue = ( nme_display_object_set_hit_enabled ); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_pixel_bounds") ) { outValue = ( nme_display_object_get_pixel_bounds ); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_pixel_snapping") ) { outValue = ( nme_display_object_get_pixel_snapping ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_pixel_snapping") ) { outValue = ( nme_display_object_set_pixel_snapping ); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_cache_as_bitmap") ) { outValue = ( nme_display_object_get_cache_as_bitmap ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_cache_as_bitmap") ) { outValue = ( nme_display_object_set_cache_as_bitmap ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_color_transform") ) { outValue = ( nme_display_object_get_color_transform ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_color_transform") ) { outValue = ( nme_display_object_set_color_transform ); return true; }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_pedantic_bitmap_caching") ) { outValue = ( nme_display_object_get_pedantic_bitmap_caching ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_pedantic_bitmap_caching") ) { outValue = ( nme_display_object_set_pedantic_bitmap_caching ); return true; }
		break;
	case 49:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_respect_scroll_rect_extent") ) { outValue = ( nme_display_object_get_respect_scroll_rect_extent ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_respect_scroll_rect_extent") ) { outValue = ( nme_display_object_set_respect_scroll_rect_extent ); return true; }
	}
	return false;
}

::hx::Val DisplayObject_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_mask(inValue.Cast<  ::nme::display::DisplayObject >()) );mask=inValue.Cast<  ::nme::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_name(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::nme::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_width(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"nmeID") ) { nmeID=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_height(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::nme::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_filters(inValue.Cast< ::cpp::VirtualArray >()) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_visible(inValue.Cast< bool >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=inValue.Cast<  ::nme::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_blendMode(inValue.Cast<  ::nme::display::BlendMode >()) ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_transform(inValue.Cast<  ::nme::geom::Transform >()) ); }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeParent") ) { nmeParent=inValue.Cast<  ::nme::display::DisplayObjectContainer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hitEnabled") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_hitEnabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { loaderInfo=inValue.Cast<  ::nme::display::LoaderInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_scale9Grid(inValue.Cast<  ::nme::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_scrollRect(inValue.Cast<  ::nme::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"nmeFilters") ) { nmeFilters=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_cacheAsBitmap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_pixelSnapping(inValue.Cast<  ::nme::display::PixelSnapping >()) ); }
		if (HX_FIELD_EQ(inName,"nmeScale9Grid") ) { nmeScale9Grid=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeScrollRect") ) { nmeScrollRect=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_opaqueBackground(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"nmeGraphicsCache") ) { nmeGraphicsCache=inValue.Cast<  ::nme::display::Graphics >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"pedanticBitmapCaching") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_pedanticBitmapCaching(inValue.Cast< bool >()) ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"respectScrollRectExtent") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_respectScrollRectExtent(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"nme_doc_add_child") ) { nme_doc_add_child=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_x") ) { nme_display_object_get_x=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_x") ) { nme_display_object_set_x=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_y") ) { nme_display_object_get_y=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_y") ) { nme_display_object_set_y=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_create_display_object") ) { nme_create_display_object=ioValue.Cast< ::cpp::Function<  ::hx::Object *  () > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_id") ) { nme_display_object_get_id=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_bg") ) { nme_display_object_get_bg=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_bg") ) { nme_display_object_set_bg=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_encode") ) { nme_display_object_encode=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_decode") ) { nme_display_object_decode=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,int) > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_name") ) { nme_display_object_get_name=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_name") ) { nme_display_object_set_name=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_mask") ) { nme_display_object_set_mask=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_width") ) { nme_display_object_get_width=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_width") ) { nme_display_object_set_width=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_alpha") ) { nme_display_object_get_alpha=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_alpha") ) { nme_display_object_set_alpha=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_height") ) { nme_display_object_get_height=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_height") ) { nme_display_object_set_height=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_matrix") ) { nme_display_object_set_matrix=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_matrix") ) { nme_display_object_get_matrix=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_bounds") ) { nme_display_object_get_bounds=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_scale_x") ) { nme_display_object_get_scale_x=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scale_x") ) { nme_display_object_set_scale_x=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_scale_y") ) { nme_display_object_get_scale_y=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scale_y") ) { nme_display_object_set_scale_y=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_mouse_x") ) { nme_display_object_get_mouse_x=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_mouse_y") ) { nme_display_object_get_mouse_y=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_visible") ) { nme_display_object_get_visible=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_visible") ) { nme_display_object_set_visible=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_filters") ) { nme_display_object_set_filters=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_graphics") ) { nme_display_object_get_graphics=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_rotation") ) { nme_display_object_get_rotation=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_rotation") ) { nme_display_object_set_rotation=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_blend_mode") ) { nme_display_object_get_blend_mode=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_blend_mode") ) { nme_display_object_set_blend_mode=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_hit_test_point") ) { nme_display_object_hit_test_point=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *,Float,Float,bool,bool) > >(); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"nme_display_object_draw_to_surface") ) { nme_display_object_draw_to_surface=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_global_to_local") ) { nme_display_object_global_to_local=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_local_to_global") ) { nme_display_object_local_to_global=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scale9_grid") ) { nme_display_object_set_scale9_grid=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_scroll_rect") ) { nme_display_object_set_scroll_rect=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_hit_enabled") ) { nme_display_object_get_hit_enabled=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_hit_enabled") ) { nme_display_object_set_hit_enabled=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_pixel_bounds") ) { nme_display_object_get_pixel_bounds=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_pixel_snapping") ) { nme_display_object_get_pixel_snapping=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_pixel_snapping") ) { nme_display_object_set_pixel_snapping=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_cache_as_bitmap") ) { nme_display_object_get_cache_as_bitmap=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_cache_as_bitmap") ) { nme_display_object_set_cache_as_bitmap=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_color_transform") ) { nme_display_object_get_color_transform=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,bool) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_color_transform") ) { nme_display_object_set_color_transform=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_pedantic_bitmap_caching") ) { nme_display_object_get_pedantic_bitmap_caching=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_pedantic_bitmap_caching") ) { nme_display_object_set_pedantic_bitmap_caching=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 49:
		if (HX_FIELD_EQ(inName,"nme_display_object_get_respect_scroll_rect_extent") ) { nme_display_object_get_respect_scroll_rect_extent=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_respect_scroll_rect_extent") ) { nme_display_object_set_respect_scroll_rect_extent=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("blendMode",54,e4,37,0c));
	outFields->push(HX_("cacheAsBitmap",e3,82,0f,6a));
	outFields->push(HX_("pedanticBitmapCaching",1e,45,20,18));
	outFields->push(HX_("respectScrollRectExtent",01,86,fe,95));
	outFields->push(HX_("pixelSnapping",62,ae,a1,b8));
	outFields->push(HX_("filters",bb,a1,46,09));
	outFields->push(HX_("graphics",cb,f8,67,12));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("hitEnabled",6e,a6,a2,d9));
	outFields->push(HX_("loaderInfo",21,b2,e4,b6));
	outFields->push(HX_("mask",ec,40,56,48));
	outFields->push(HX_("mouseX",93,4a,0e,cc));
	outFields->push(HX_("mouseY",94,4a,0e,cc));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("opaqueBackground",2f,b8,a7,1a));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("rotation",3e,3d,86,08));
	outFields->push(HX_("scale9Grid",d5,50,22,8f));
	outFields->push(HX_("scaleX",8e,ea,25,3c));
	outFields->push(HX_("scaleY",8f,ea,25,3c));
	outFields->push(HX_("scrollRect",d1,db,66,09));
	outFields->push(HX_("stage",be,6a,0b,84));
	outFields->push(HX_("transform",6c,2d,93,45));
	outFields->push(HX_("visible",72,78,24,a3));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("nmeFilters",15,07,48,d8));
	outFields->push(HX_("nmeGraphicsCache",51,36,90,74));
	outFields->push(HX_("nmeID",a1,f4,6c,9e));
	outFields->push(HX_("nmeParent",10,09,40,88));
	outFields->push(HX_("nmeScale9Grid",bb,3f,cb,54));
	outFields->push(HX_("nmeScrollRect",b7,ca,0f,cf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::display::Graphics */ ,(int)offsetof(DisplayObject_obj,graphics),HX_("graphics",cb,f8,67,12)},
	{::hx::fsObject /*  ::nme::display::LoaderInfo */ ,(int)offsetof(DisplayObject_obj,loaderInfo),HX_("loaderInfo",21,b2,e4,b6)},
	{::hx::fsObject /*  ::nme::display::DisplayObject */ ,(int)offsetof(DisplayObject_obj,mask),HX_("mask",ec,40,56,48)},
	{::hx::fsFloat,(int)offsetof(DisplayObject_obj,mouseX),HX_("mouseX",93,4a,0e,cc)},
	{::hx::fsFloat,(int)offsetof(DisplayObject_obj,mouseY),HX_("mouseY",94,4a,0e,cc)},
	{::hx::fsObject /*  ::nme::display::DisplayObjectContainer */ ,(int)offsetof(DisplayObject_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsObject /*  ::nme::display::Stage */ ,(int)offsetof(DisplayObject_obj,stage),HX_("stage",be,6a,0b,84)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DisplayObject_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(DisplayObject_obj,nmeFilters),HX_("nmeFilters",15,07,48,d8)},
	{::hx::fsObject /*  ::nme::display::Graphics */ ,(int)offsetof(DisplayObject_obj,nmeGraphicsCache),HX_("nmeGraphicsCache",51,36,90,74)},
	{::hx::fsInt,(int)offsetof(DisplayObject_obj,nmeID),HX_("nmeID",a1,f4,6c,9e)},
	{::hx::fsObject /*  ::nme::display::DisplayObjectContainer */ ,(int)offsetof(DisplayObject_obj,nmeParent),HX_("nmeParent",10,09,40,88)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(DisplayObject_obj,nmeScale9Grid),HX_("nmeScale9Grid",bb,3f,cb,54)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(DisplayObject_obj,nmeScrollRect),HX_("nmeScrollRect",b7,ca,0f,cf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &DisplayObject_obj::DISPLAY_KEEP_ID,HX_("DISPLAY_KEEP_ID",38,68,4d,99)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  () > */ ,(void *) &DisplayObject_obj::nme_create_display_object,HX_("nme_create_display_object",86,c4,80,49)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_graphics,HX_("nme_display_object_get_graphics",1e,78,61,09)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,int, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_draw_to_surface,HX_("nme_display_object_draw_to_surface",ba,4e,16,36)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_id,HX_("nme_display_object_get_id",ee,ca,64,6f)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_x,HX_("nme_display_object_get_x",c5,54,45,2d)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_x,HX_("nme_display_object_set_x",d1,4a,14,16)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_y,HX_("nme_display_object_get_y",c6,54,45,2d)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_y,HX_("nme_display_object_set_y",d2,4a,14,16)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_scale_x,HX_("nme_display_object_get_scale_x",50,64,f8,e0)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_scale_x,HX_("nme_display_object_set_scale_x",5c,6b,65,eb)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_scale_y,HX_("nme_display_object_get_scale_y",51,64,f8,e0)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_scale_y,HX_("nme_display_object_set_scale_y",5d,6b,65,eb)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_mouse_x,HX_("nme_display_object_get_mouse_x",ab,08,64,3c)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_mouse_y,HX_("nme_display_object_get_mouse_y",ac,08,64,3c)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_rotation,HX_("nme_display_object_get_rotation",91,bc,7f,ff)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_rotation,HX_("nme_display_object_set_rotation",05,e0,78,14)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_bg,HX_("nme_display_object_get_bg",d8,c4,64,6f)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_bg,HX_("nme_display_object_set_bg",4c,19,ad,3b)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &DisplayObject_obj::nme_display_object_get_name,HX_("nme_display_object_get_name",1e,0c,ac,ad)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &DisplayObject_obj::nme_display_object_set_name,HX_("nme_display_object_set_name",92,65,09,5c)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_width,HX_("nme_display_object_get_width",d3,b4,bc,7c)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_width,HX_("nme_display_object_set_width",df,a0,0d,60)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_height,HX_("nme_display_object_get_height",7a,fc,b0,5e)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_height,HX_("nme_display_object_set_height",ee,9a,2e,62)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_alpha,HX_("nme_display_object_get_alpha",2b,a6,f0,d3)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_alpha,HX_("nme_display_object_set_alpha",37,92,41,b7)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_blend_mode,HX_("nme_display_object_get_blend_mode",64,7b,72,c8)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_blend_mode,HX_("nme_display_object_set_blend_mode",d8,63,92,e8)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_cache_as_bitmap,HX_("nme_display_object_get_cache_as_bitmap",6c,cc,57,9e)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_cache_as_bitmap,HX_("nme_display_object_set_cache_as_bitmap",78,bf,f4,da)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_pedantic_bitmap_caching,HX_("nme_display_object_get_pedantic_bitmap_caching",09,98,b5,54)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_pedantic_bitmap_caching,HX_("nme_display_object_set_pedantic_bitmap_caching",15,77,4e,97)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_respect_scroll_rect_extent,HX_("nme_display_object_get_respect_scroll_rect_extent",1f,37,e3,64)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_respect_scroll_rect_extent,HX_("nme_display_object_set_respect_scroll_rect_extent",93,47,ce,3f)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_pixel_snapping,HX_("nme_display_object_get_pixel_snapping",68,a5,15,91)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_pixel_snapping,HX_("nme_display_object_set_pixel_snapping",dc,d7,c4,6d)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_visible,HX_("nme_display_object_get_visible",7f,84,15,1f)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_visible,HX_("nme_display_object_set_visible",8b,8b,82,29)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_filters,HX_("nme_display_object_set_filters",d4,b4,a4,8f)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_global_to_local,HX_("nme_display_object_global_to_local",f9,24,9f,71)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_local_to_global,HX_("nme_display_object_local_to_global",c9,8a,e6,aa)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_scale9_grid,HX_("nme_display_object_set_scale9_grid",6f,e9,ab,88)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_scroll_rect,HX_("nme_display_object_set_scroll_rect",6f,55,d0,c4)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_mask,HX_("nme_display_object_set_mask",33,34,60,5b)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_matrix,HX_("nme_display_object_set_matrix",48,c9,aa,1b)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_matrix,HX_("nme_display_object_get_matrix",d4,2a,2d,18)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_color_transform,HX_("nme_display_object_get_color_transform",5d,35,0c,56)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_color_transform,HX_("nme_display_object_set_color_transform",69,28,a9,92)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_pixel_bounds,HX_("nme_display_object_get_pixel_bounds",21,73,64,06)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *, ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_bounds,HX_("nme_display_object_get_bounds",08,7b,82,c2)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *,Float,Float,bool,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_hit_test_point,HX_("nme_display_object_hit_test_point",d9,50,5c,48)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_display_object_get_hit_enabled,HX_("nme_display_object_get_hit_enabled",e2,45,d0,99)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &DisplayObject_obj::nme_display_object_set_hit_enabled,HX_("nme_display_object_set_hit_enabled",ee,c2,9b,95)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &DisplayObject_obj::nme_doc_add_child,HX_("nme_doc_add_child",fe,eb,e5,d1)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,int) > */ ,(void *) &DisplayObject_obj::nme_display_object_encode,HX_("nme_display_object_encode",e0,c9,18,c6)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,int) > */ ,(void *) &DisplayObject_obj::nme_display_object_decode,HX_("nme_display_object_decode",f8,34,22,31)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_("graphics",cb,f8,67,12),
	HX_("loaderInfo",21,b2,e4,b6),
	HX_("mask",ec,40,56,48),
	HX_("mouseX",93,4a,0e,cc),
	HX_("mouseY",94,4a,0e,cc),
	HX_("parent",2a,05,7e,ed),
	HX_("stage",be,6a,0b,84),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("nmeFilters",15,07,48,d8),
	HX_("nmeGraphicsCache",51,36,90,74),
	HX_("nmeID",a1,f4,6c,9e),
	HX_("nmeParent",10,09,40,88),
	HX_("nmeScale9Grid",bb,3f,cb,54),
	HX_("nmeScrollRect",b7,ca,0f,cf),
	HX_("dispose",9f,80,4c,bb),
	HX_("dispatchEvent",00,c7,64,c6),
	HX_("get_hitEnabled",b7,2e,98,4f),
	HX_("set_hitEnabled",2b,17,b8,6f),
	HX_("getBounds",ab,0f,74,e2),
	HX_("getRect",da,fc,29,1e),
	HX_("globalToLocal",cd,4e,ae,6b),
	HX_("hitTestObject",e4,54,64,d7),
	HX_("hitTestPoint",cb,a9,21,e4),
	HX_("localToGlobal",c9,41,eb,47),
	HX_("encodeDisplay",cc,6e,4f,7b),
	HX_("nmeAsInteractiveObject",49,85,3b,34),
	HX_("nmeBroadcast",db,92,42,7d),
	HX_("nmeDispatchEvent",da,ab,8b,e2),
	HX_("nmeDrawToSurface",28,96,2b,08),
	HX_("nmeFindByID",b1,4f,ee,e5),
	HX_("nmeFireEvent",5e,20,96,0f),
	HX_("nmeGetColorTransform",99,e0,76,28),
	HX_("nmeGetConcatenatedColorTransform",08,4a,83,89),
	HX_("nmeGetConcatenatedMatrix",c0,91,f5,ac),
	HX_("fillMatrix",24,bd,62,bf),
	HX_("nmeGetInteractiveObjectStack",57,5e,d0,95),
	HX_("nmeGetMatrix",51,af,47,d6),
	HX_("nmeGetObjectsUnderPoint",fc,da,07,78),
	HX_("nmeGetPixelBounds",8b,16,2a,e5),
	HX_("nmeOnAdded",7b,d8,82,81),
	HX_("nmeOnRemoved",1b,c8,d3,68),
	HX_("nmeSetColorTransform",a5,b8,e4,4b),
	HX_("nmeSetMatrix",5d,9b,98,b9),
	HX_("nmeSetParent",46,6a,4e,eb),
	HX_("toString",ac,d0,6e,38),
	HX_("get_alpha",b5,03,40,65),
	HX_("set_alpha",c1,ef,90,48),
	HX_("get_opaqueBackground",38,1d,12,39),
	HX_("set_opaqueBackground",ac,d4,c9,05),
	HX_("get_blendMode",2b,b8,9b,cd),
	HX_("set_blendMode",37,9a,a1,12),
	HX_("get_cacheAsBitmap",3a,8e,7f,70),
	HX_("set_cacheAsBitmap",46,66,ed,93),
	HX_("get_pedanticBitmapCaching",75,ff,1d,1e),
	HX_("set_pedanticBitmapCaching",81,c3,74,8a),
	HX_("get_respectScrollRectExtent",18,c4,a0,62),
	HX_("set_respectScrollRectExtent",24,a3,39,a5),
	HX_("get_pixelSnapping",b9,b9,11,bf),
	HX_("set_pixelSnapping",c5,91,7f,e2),
	HX_("get_filters",d2,01,41,8f),
	HX_("set_filters",de,08,ae,99),
	HX_("get_graphics",d4,ac,81,c7),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("set_mask",e9,55,6e,76),
	HX_("get_mouseX",5c,ba,95,bc),
	HX_("get_mouseY",5d,ba,95,bc),
	HX_("get_name",d4,2d,ba,c8),
	HX_("set_name",48,87,17,77),
	HX_("get_parent",f3,74,05,de),
	HX_("get_rotation",47,f1,9f,bd),
	HX_("set_rotation",bb,14,99,d2),
	HX_("get_scale9Grid",1e,d9,17,05),
	HX_("set_scale9Grid",92,c1,37,25),
	HX_("get_scaleX",57,5a,ad,2c),
	HX_("set_scaleX",cb,f8,2a,30),
	HX_("get_scaleY",58,5a,ad,2c),
	HX_("set_scaleY",cc,f8,2a,30),
	HX_("get_scrollRect",1a,64,5c,7f),
	HX_("set_scrollRect",8e,4c,7c,9f),
	HX_("get_stage",15,c7,b4,c7),
	HX_("get_transform",43,01,f7,06),
	HX_("set_transform",4f,e3,fc,4b),
	HX_("get_visible",89,d8,1e,29),
	HX_("set_visible",95,df,8b,33),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::DISPLAY_KEEP_ID,"DISPLAY_KEEP_ID");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_create_display_object,"nme_create_display_object");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_graphics,"nme_display_object_get_graphics");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_draw_to_surface,"nme_display_object_draw_to_surface");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_id,"nme_display_object_get_id");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_x,"nme_display_object_get_x");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_x,"nme_display_object_set_x");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_y,"nme_display_object_get_y");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_y,"nme_display_object_set_y");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_scale_x,"nme_display_object_get_scale_x");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scale_x,"nme_display_object_set_scale_x");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_scale_y,"nme_display_object_get_scale_y");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scale_y,"nme_display_object_set_scale_y");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_mouse_x,"nme_display_object_get_mouse_x");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_mouse_y,"nme_display_object_get_mouse_y");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_rotation,"nme_display_object_get_rotation");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_rotation,"nme_display_object_set_rotation");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_bg,"nme_display_object_get_bg");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_bg,"nme_display_object_set_bg");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_name,"nme_display_object_get_name");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_name,"nme_display_object_set_name");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_width,"nme_display_object_get_width");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_width,"nme_display_object_set_width");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_height,"nme_display_object_get_height");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_height,"nme_display_object_set_height");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_alpha,"nme_display_object_get_alpha");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_alpha,"nme_display_object_set_alpha");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_blend_mode,"nme_display_object_get_blend_mode");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_blend_mode,"nme_display_object_set_blend_mode");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_cache_as_bitmap,"nme_display_object_get_cache_as_bitmap");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_cache_as_bitmap,"nme_display_object_set_cache_as_bitmap");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_pedantic_bitmap_caching,"nme_display_object_get_pedantic_bitmap_caching");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_pedantic_bitmap_caching,"nme_display_object_set_pedantic_bitmap_caching");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_respect_scroll_rect_extent,"nme_display_object_get_respect_scroll_rect_extent");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_respect_scroll_rect_extent,"nme_display_object_set_respect_scroll_rect_extent");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_pixel_snapping,"nme_display_object_get_pixel_snapping");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_pixel_snapping,"nme_display_object_set_pixel_snapping");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_visible,"nme_display_object_get_visible");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_visible,"nme_display_object_set_visible");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_filters,"nme_display_object_set_filters");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_global_to_local,"nme_display_object_global_to_local");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_local_to_global,"nme_display_object_local_to_global");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scale9_grid,"nme_display_object_set_scale9_grid");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scroll_rect,"nme_display_object_set_scroll_rect");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_mask,"nme_display_object_set_mask");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_matrix,"nme_display_object_set_matrix");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_matrix,"nme_display_object_get_matrix");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_color_transform,"nme_display_object_get_color_transform");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_color_transform,"nme_display_object_set_color_transform");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_pixel_bounds,"nme_display_object_get_pixel_bounds");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_bounds,"nme_display_object_get_bounds");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_hit_test_point,"nme_display_object_hit_test_point");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_hit_enabled,"nme_display_object_get_hit_enabled");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_hit_enabled,"nme_display_object_set_hit_enabled");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_doc_add_child,"nme_doc_add_child");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_encode,"nme_display_object_encode");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::nme_display_object_decode,"nme_display_object_decode");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::DISPLAY_KEEP_ID,"DISPLAY_KEEP_ID");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_create_display_object,"nme_create_display_object");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_graphics,"nme_display_object_get_graphics");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_draw_to_surface,"nme_display_object_draw_to_surface");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_id,"nme_display_object_get_id");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_x,"nme_display_object_get_x");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_x,"nme_display_object_set_x");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_y,"nme_display_object_get_y");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_y,"nme_display_object_set_y");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_scale_x,"nme_display_object_get_scale_x");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scale_x,"nme_display_object_set_scale_x");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_scale_y,"nme_display_object_get_scale_y");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scale_y,"nme_display_object_set_scale_y");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_mouse_x,"nme_display_object_get_mouse_x");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_mouse_y,"nme_display_object_get_mouse_y");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_rotation,"nme_display_object_get_rotation");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_rotation,"nme_display_object_set_rotation");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_bg,"nme_display_object_get_bg");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_bg,"nme_display_object_set_bg");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_name,"nme_display_object_get_name");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_name,"nme_display_object_set_name");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_width,"nme_display_object_get_width");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_width,"nme_display_object_set_width");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_height,"nme_display_object_get_height");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_height,"nme_display_object_set_height");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_alpha,"nme_display_object_get_alpha");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_alpha,"nme_display_object_set_alpha");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_blend_mode,"nme_display_object_get_blend_mode");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_blend_mode,"nme_display_object_set_blend_mode");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_cache_as_bitmap,"nme_display_object_get_cache_as_bitmap");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_cache_as_bitmap,"nme_display_object_set_cache_as_bitmap");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_pedantic_bitmap_caching,"nme_display_object_get_pedantic_bitmap_caching");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_pedantic_bitmap_caching,"nme_display_object_set_pedantic_bitmap_caching");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_respect_scroll_rect_extent,"nme_display_object_get_respect_scroll_rect_extent");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_respect_scroll_rect_extent,"nme_display_object_set_respect_scroll_rect_extent");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_pixel_snapping,"nme_display_object_get_pixel_snapping");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_pixel_snapping,"nme_display_object_set_pixel_snapping");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_visible,"nme_display_object_get_visible");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_visible,"nme_display_object_set_visible");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_filters,"nme_display_object_set_filters");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_global_to_local,"nme_display_object_global_to_local");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_local_to_global,"nme_display_object_local_to_global");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scale9_grid,"nme_display_object_set_scale9_grid");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_scroll_rect,"nme_display_object_set_scroll_rect");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_mask,"nme_display_object_set_mask");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_matrix,"nme_display_object_set_matrix");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_matrix,"nme_display_object_get_matrix");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_color_transform,"nme_display_object_get_color_transform");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_color_transform,"nme_display_object_set_color_transform");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_pixel_bounds,"nme_display_object_get_pixel_bounds");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_bounds,"nme_display_object_get_bounds");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_hit_test_point,"nme_display_object_hit_test_point");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_get_hit_enabled,"nme_display_object_get_hit_enabled");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_set_hit_enabled,"nme_display_object_set_hit_enabled");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_doc_add_child,"nme_doc_add_child");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_encode,"nme_display_object_encode");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::nme_display_object_decode,"nme_display_object_decode");
};

#endif

::hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_("DISPLAY_KEEP_ID",38,68,4d,99),
	HX_("decodeDisplay",b4,16,d4,e5),
	HX_("nme_create_display_object",86,c4,80,49),
	HX_("nme_display_object_get_graphics",1e,78,61,09),
	HX_("nme_display_object_draw_to_surface",ba,4e,16,36),
	HX_("nme_display_object_get_id",ee,ca,64,6f),
	HX_("nme_display_object_get_x",c5,54,45,2d),
	HX_("nme_display_object_set_x",d1,4a,14,16),
	HX_("nme_display_object_get_y",c6,54,45,2d),
	HX_("nme_display_object_set_y",d2,4a,14,16),
	HX_("nme_display_object_get_scale_x",50,64,f8,e0),
	HX_("nme_display_object_set_scale_x",5c,6b,65,eb),
	HX_("nme_display_object_get_scale_y",51,64,f8,e0),
	HX_("nme_display_object_set_scale_y",5d,6b,65,eb),
	HX_("nme_display_object_get_mouse_x",ab,08,64,3c),
	HX_("nme_display_object_get_mouse_y",ac,08,64,3c),
	HX_("nme_display_object_get_rotation",91,bc,7f,ff),
	HX_("nme_display_object_set_rotation",05,e0,78,14),
	HX_("nme_display_object_get_bg",d8,c4,64,6f),
	HX_("nme_display_object_set_bg",4c,19,ad,3b),
	HX_("nme_display_object_get_name",1e,0c,ac,ad),
	HX_("nme_display_object_set_name",92,65,09,5c),
	HX_("nme_display_object_get_width",d3,b4,bc,7c),
	HX_("nme_display_object_set_width",df,a0,0d,60),
	HX_("nme_display_object_get_height",7a,fc,b0,5e),
	HX_("nme_display_object_set_height",ee,9a,2e,62),
	HX_("nme_display_object_get_alpha",2b,a6,f0,d3),
	HX_("nme_display_object_set_alpha",37,92,41,b7),
	HX_("nme_display_object_get_blend_mode",64,7b,72,c8),
	HX_("nme_display_object_set_blend_mode",d8,63,92,e8),
	HX_("nme_display_object_get_cache_as_bitmap",6c,cc,57,9e),
	HX_("nme_display_object_set_cache_as_bitmap",78,bf,f4,da),
	HX_("nme_display_object_get_pedantic_bitmap_caching",09,98,b5,54),
	HX_("nme_display_object_set_pedantic_bitmap_caching",15,77,4e,97),
	HX_("nme_display_object_get_respect_scroll_rect_extent",1f,37,e3,64),
	HX_("nme_display_object_set_respect_scroll_rect_extent",93,47,ce,3f),
	HX_("nme_display_object_get_pixel_snapping",68,a5,15,91),
	HX_("nme_display_object_set_pixel_snapping",dc,d7,c4,6d),
	HX_("nme_display_object_get_visible",7f,84,15,1f),
	HX_("nme_display_object_set_visible",8b,8b,82,29),
	HX_("nme_display_object_set_filters",d4,b4,a4,8f),
	HX_("nme_display_object_global_to_local",f9,24,9f,71),
	HX_("nme_display_object_local_to_global",c9,8a,e6,aa),
	HX_("nme_display_object_set_scale9_grid",6f,e9,ab,88),
	HX_("nme_display_object_set_scroll_rect",6f,55,d0,c4),
	HX_("nme_display_object_set_mask",33,34,60,5b),
	HX_("nme_display_object_set_matrix",48,c9,aa,1b),
	HX_("nme_display_object_get_matrix",d4,2a,2d,18),
	HX_("nme_display_object_get_color_transform",5d,35,0c,56),
	HX_("nme_display_object_set_color_transform",69,28,a9,92),
	HX_("nme_display_object_get_pixel_bounds",21,73,64,06),
	HX_("nme_display_object_get_bounds",08,7b,82,c2),
	HX_("nme_display_object_hit_test_point",d9,50,5c,48),
	HX_("nme_display_object_get_hit_enabled",e2,45,d0,99),
	HX_("nme_display_object_set_hit_enabled",ee,c2,9b,95),
	HX_("nme_doc_add_child",fe,eb,e5,d1),
	HX_("nme_display_object_encode",e0,c9,18,c6),
	HX_("nme_display_object_decode",f8,34,22,31),
	::String(null())
};

void DisplayObject_obj::__register()
{
	DisplayObject_obj _hx_dummy;
	DisplayObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.DisplayObject",2d,b8,b7,04);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_161_boot)
HXDLIN( 161)		DISPLAY_KEEP_ID = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_create_display_object = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_create_display_object",86,c4,80,49),HX_("o",6f,00,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_graphics = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_graphics",1e,78,61,09),HX_("oo",20,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_draw_to_surface = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_draw_to_surface",ba,4e,16,36),HX_("ooooiov",90,ab,94,9c),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_id = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_id",ee,ca,64,6f),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_x = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_x",c5,54,45,2d),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_x = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_x",d1,4a,14,16),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_y = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_y",c6,54,45,2d),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_y = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_y",d2,4a,14,16),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_scale_x = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_scale_x",50,64,f8,e0),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_scale_x = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_scale_x",5c,6b,65,eb),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_scale_y = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_scale_y",51,64,f8,e0),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_scale_y = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_scale_y",5d,6b,65,eb),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_mouse_x = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_mouse_x",ab,08,64,3c),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_mouse_y = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_mouse_y",ac,08,64,3c),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_rotation = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_rotation",91,bc,7f,ff),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_rotation = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_rotation",05,e0,78,14),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_bg = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_bg",d8,c4,64,6f),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_bg = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_bg",4c,19,ad,3b),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_621_boot)
HXDLIN( 621)		nme_display_object_get_name = ::nme::Loader_obj::load(HX_("nme_display_object_get_name",1e,0c,ac,ad),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5e11f79dab5c6fd5_623_boot)
HXDLIN( 623)		nme_display_object_set_name = ::nme::Loader_obj::load(HX_("nme_display_object_set_name",92,65,09,5c),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_width = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_width",d3,b4,bc,7c),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_width = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_width",df,a0,0d,60),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_height = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_height",7a,fc,b0,5e),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_height = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_height",ee,9a,2e,62),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_alpha = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_alpha",2b,a6,f0,d3),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_alpha = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_alpha",37,92,41,b7),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_blend_mode = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_blend_mode",64,7b,72,c8),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_blend_mode = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_blend_mode",d8,63,92,e8),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_cache_as_bitmap = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_cache_as_bitmap",6c,cc,57,9e),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_cache_as_bitmap = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_cache_as_bitmap",78,bf,f4,da),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_pedantic_bitmap_caching = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_pedantic_bitmap_caching",09,98,b5,54),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_pedantic_bitmap_caching = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_pedantic_bitmap_caching",15,77,4e,97),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_respect_scroll_rect_extent = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_respect_scroll_rect_extent",1f,37,e3,64),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_respect_scroll_rect_extent = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_respect_scroll_rect_extent",93,47,ce,3f),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_pixel_snapping = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_pixel_snapping",68,a5,15,91),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_pixel_snapping = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_pixel_snapping",dc,d7,c4,6d),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_visible = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_visible",7f,84,15,1f),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_visible = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_visible",8b,8b,82,29),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_filters = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_filters",d4,b4,a4,8f),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_global_to_local = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_global_to_local",f9,24,9f,71),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_local_to_global = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_local_to_global",c9,8a,e6,aa),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_scale9_grid = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_scale9_grid",6f,e9,ab,88),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_scroll_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_scroll_rect",6f,55,d0,c4),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_mask = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_mask",33,34,60,5b),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_matrix = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_matrix",48,c9,aa,1b),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_matrix = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_matrix",d4,2a,2d,18),HX_("oobv",f4,3e,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_color_transform = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_color_transform",5d,35,0c,56),HX_("oobv",f4,3e,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_color_transform = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_color_transform",69,28,a9,92),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_pixel_bounds = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_pixel_bounds",21,73,64,06),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_bounds = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_bounds",08,7b,82,c2),HX_("ooobv",e3,a2,2d,33),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_hit_test_point = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_hit_test_point",d9,50,5c,48),HX_("oddbbb",53,18,13,38),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_get_hit_enabled = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_get_hit_enabled",e2,45,d0,99),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_set_hit_enabled = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_set_hit_enabled",ee,c2,9b,95),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_doc_add_child = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_doc_add_child",fe,eb,e5,d1),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_encode = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_encode",e0,c9,18,c6),HX_("oio",15,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_17435606fcc6e5bd_9_boot)
HXDLIN(   9)		nme_display_object_decode = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_display_object_decode",f8,34,22,31),HX_("oio",15,96,54,00),false);
            	}
}

} // end namespace nme
} // end namespace display
