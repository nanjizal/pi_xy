// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_FocusEvent
#include <nme/events/FocusEvent.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a1b929de331f4b6c_19_new,"nme.events.FocusEvent","new",0x0a5279c1,"nme.events.FocusEvent.new","nme/events/FocusEvent.hx",19,0x7f4c72af)
HX_LOCAL_STACK_FRAME(_hx_pos_a1b929de331f4b6c_29_clone,"nme.events.FocusEvent","clone",0xce6796fe,"nme.events.FocusEvent.clone","nme/events/FocusEvent.hx",29,0x7f4c72af)
HX_LOCAL_STACK_FRAME(_hx_pos_a1b929de331f4b6c_34_toString,"nme.events.FocusEvent","toString",0x4e4987ab,"nme.events.FocusEvent.toString","nme/events/FocusEvent.hx",34,0x7f4c72af)
HX_LOCAL_STACK_FRAME(_hx_pos_a1b929de331f4b6c_9_boot,"nme.events.FocusEvent","boot",0xf5f10fb1,"nme.events.FocusEvent.boot","nme/events/FocusEvent.hx",9,0x7f4c72af)
HX_LOCAL_STACK_FRAME(_hx_pos_a1b929de331f4b6c_10_boot,"nme.events.FocusEvent","boot",0xf5f10fb1,"nme.events.FocusEvent.boot","nme/events/FocusEvent.hx",10,0x7f4c72af)
HX_LOCAL_STACK_FRAME(_hx_pos_a1b929de331f4b6c_11_boot,"nme.events.FocusEvent","boot",0xf5f10fb1,"nme.events.FocusEvent.boot","nme/events/FocusEvent.hx",11,0x7f4c72af)
HX_LOCAL_STACK_FRAME(_hx_pos_a1b929de331f4b6c_12_boot,"nme.events.FocusEvent","boot",0xf5f10fb1,"nme.events.FocusEvent.boot","nme/events/FocusEvent.hx",12,0x7f4c72af)
namespace nme{
namespace events{

void FocusEvent_obj::__construct(::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_shiftKey,::hx::Null< int >  __o_keyCode,::String __o_direction){
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            		bool shiftKey = __o_shiftKey.Default(false);
            		int keyCode = __o_keyCode.Default(0);
            		::String direction = __o_direction;
            		if (::hx::IsNull(__o_direction)) direction = HX_("none",b8,12,0a,49);
            	HX_STACKFRAME(&_hx_pos_a1b929de331f4b6c_19_new)
HXLINE(  20)		super::__construct(inType,bubbles,cancelable);
HXLINE(  22)		this->relatedObject = relatedObject;
HXLINE(  23)		this->keyCode = keyCode;
HXLINE(  24)		this->shiftKey = shiftKey;
            	}

Dynamic FocusEvent_obj::__CreateEmpty() { return new FocusEvent_obj; }

void *FocusEvent_obj::_hx_vtable = 0;

Dynamic FocusEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FocusEvent_obj > _hx_result = new FocusEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FocusEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x378506e1;
	}
}

 ::nme::events::Event FocusEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_a1b929de331f4b6c_29_clone)
HXDLIN(  29)		::String _hx_tmp = this->get_type();
HXDLIN(  29)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  29)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  29)		return  ::nme::events::FocusEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->relatedObject,this->shiftKey,this->keyCode,null());
            	}


::String FocusEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a1b929de331f4b6c_34_toString)
HXDLIN(  34)		::String _hx_tmp = ((HX_("[FocusEvent type=",40,6d,12,39) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  34)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  34)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" relatedObject=",13,62,ef,68));
HXDLIN(  34)		::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(this->relatedObject)) + HX_(" shiftKey=",40,5f,4f,db));
HXDLIN(  34)		::String _hx_tmp4 = ((_hx_tmp3 + ::Std_obj::string(this->shiftKey)) + HX_(" keyCode=",71,1c,ed,ec));
HXDLIN(  34)		return ((_hx_tmp4 + this->keyCode) + HX_("]",5d,00,00,00));
            	}


::String FocusEvent_obj::FOCUS_IN;

::String FocusEvent_obj::FOCUS_OUT;

::String FocusEvent_obj::KEY_FOCUS_CHANGE;

::String FocusEvent_obj::MOUSE_FOCUS_CHANGE;


::hx::ObjectPtr< FocusEvent_obj > FocusEvent_obj::__new(::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_shiftKey,::hx::Null< int >  __o_keyCode,::String __o_direction) {
	::hx::ObjectPtr< FocusEvent_obj > __this = new FocusEvent_obj();
	__this->__construct(inType,__o_bubbles,__o_cancelable,relatedObject,__o_shiftKey,__o_keyCode,__o_direction);
	return __this;
}

::hx::ObjectPtr< FocusEvent_obj > FocusEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_shiftKey,::hx::Null< int >  __o_keyCode,::String __o_direction) {
	FocusEvent_obj *__this = (FocusEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FocusEvent_obj), true, "nme.events.FocusEvent"));
	*(void **)__this = FocusEvent_obj::_hx_vtable;
	__this->__construct(inType,__o_bubbles,__o_cancelable,relatedObject,__o_shiftKey,__o_keyCode,__o_direction);
	return __this;
}

FocusEvent_obj::FocusEvent_obj()
{
}

void FocusEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FocusEvent);
	HX_MARK_MEMBER_NAME(keyCode,"keyCode");
	HX_MARK_MEMBER_NAME(relatedObject,"relatedObject");
	HX_MARK_MEMBER_NAME(shiftKey,"shiftKey");
	 ::nme::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FocusEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCode,"keyCode");
	HX_VISIT_MEMBER_NAME(relatedObject,"relatedObject");
	HX_VISIT_MEMBER_NAME(shiftKey,"shiftKey");
	 ::nme::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FocusEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { return ::hx::Val( keyCode ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return ::hx::Val( shiftKey ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { return ::hx::Val( relatedObject ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FocusEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { relatedObject=inValue.Cast<  ::nme::display::InteractiveObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FocusEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCode",6c,22,9e,9b));
	outFields->push(HX_("relatedObject",0a,bf,cb,e8));
	outFields->push(HX_("shiftKey",3d,92,9f,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FocusEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FocusEvent_obj,keyCode),HX_("keyCode",6c,22,9e,9b)},
	{::hx::fsObject /*  ::nme::display::InteractiveObject */ ,(int)offsetof(FocusEvent_obj,relatedObject),HX_("relatedObject",0a,bf,cb,e8)},
	{::hx::fsBool,(int)offsetof(FocusEvent_obj,shiftKey),HX_("shiftKey",3d,92,9f,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FocusEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &FocusEvent_obj::FOCUS_IN,HX_("FOCUS_IN",4c,61,08,6b)},
	{::hx::fsString,(void *) &FocusEvent_obj::FOCUS_OUT,HX_("FOCUS_OUT",27,55,51,3c)},
	{::hx::fsString,(void *) &FocusEvent_obj::KEY_FOCUS_CHANGE,HX_("KEY_FOCUS_CHANGE",57,48,06,94)},
	{::hx::fsString,(void *) &FocusEvent_obj::MOUSE_FOCUS_CHANGE,HX_("MOUSE_FOCUS_CHANGE",11,c4,6c,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FocusEvent_obj_sMemberFields[] = {
	HX_("keyCode",6c,22,9e,9b),
	HX_("relatedObject",0a,bf,cb,e8),
	HX_("shiftKey",3d,92,9f,99),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void FocusEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FocusEvent_obj::FOCUS_IN,"FOCUS_IN");
	HX_MARK_MEMBER_NAME(FocusEvent_obj::FOCUS_OUT,"FOCUS_OUT");
	HX_MARK_MEMBER_NAME(FocusEvent_obj::KEY_FOCUS_CHANGE,"KEY_FOCUS_CHANGE");
	HX_MARK_MEMBER_NAME(FocusEvent_obj::MOUSE_FOCUS_CHANGE,"MOUSE_FOCUS_CHANGE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FocusEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FocusEvent_obj::FOCUS_IN,"FOCUS_IN");
	HX_VISIT_MEMBER_NAME(FocusEvent_obj::FOCUS_OUT,"FOCUS_OUT");
	HX_VISIT_MEMBER_NAME(FocusEvent_obj::KEY_FOCUS_CHANGE,"KEY_FOCUS_CHANGE");
	HX_VISIT_MEMBER_NAME(FocusEvent_obj::MOUSE_FOCUS_CHANGE,"MOUSE_FOCUS_CHANGE");
};

#endif

::hx::Class FocusEvent_obj::__mClass;

static ::String FocusEvent_obj_sStaticFields[] = {
	HX_("FOCUS_IN",4c,61,08,6b),
	HX_("FOCUS_OUT",27,55,51,3c),
	HX_("KEY_FOCUS_CHANGE",57,48,06,94),
	HX_("MOUSE_FOCUS_CHANGE",11,c4,6c,3d),
	::String(null())
};

void FocusEvent_obj::__register()
{
	FocusEvent_obj _hx_dummy;
	FocusEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.FocusEvent",4f,85,c8,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FocusEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FocusEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FocusEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FocusEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FocusEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FocusEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FocusEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FocusEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a1b929de331f4b6c_9_boot)
HXDLIN(   9)		FOCUS_IN = HX_("focusIn",dd,45,83,41);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a1b929de331f4b6c_10_boot)
HXDLIN(  10)		FOCUS_OUT = HX_("focusOut",96,6f,5e,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a1b929de331f4b6c_11_boot)
HXDLIN(  11)		KEY_FOCUS_CHANGE = HX_("keyFocusChange",09,9c,8e,e5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a1b929de331f4b6c_12_boot)
HXDLIN(  12)		MOUSE_FOCUS_CHANGE = HX_("mouseFocusChange",43,f1,81,96);
            	}
}

} // end namespace nme
} // end namespace events
