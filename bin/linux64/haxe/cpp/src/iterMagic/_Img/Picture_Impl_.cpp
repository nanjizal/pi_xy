// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_Pic
#include <iterMagic/Pic.h>
#endif
#ifndef INCLUDED_iterMagic_RawImageData
#include <iterMagic/RawImageData.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_iterMagic__Img_Picture_Impl_
#include <iterMagic/_Img/Picture_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_421__new,"iterMagic._Img.Picture_Impl_","_new",0x81edaee2,"iterMagic._Img.Picture_Impl_._new","iterMagic/Img.hx",421,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_428_set,"iterMagic._Img.Picture_Impl_","set",0x89406d41,"iterMagic._Img.Picture_Impl_.set","iterMagic/Img.hx",428,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_433_get,"iterMagic._Img.Picture_Impl_","get",0x89375235,"iterMagic._Img.Picture_Impl_.get","iterMagic/Img.hx",433,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_436_fromTo,"iterMagic._Img.Picture_Impl_","fromTo",0x3c8f5946,"iterMagic._Img.Picture_Impl_.fromTo","iterMagic/Img.hx",436,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_441_toFrom,"iterMagic._Img.Picture_Impl_","toFrom",0x0044cc46,"iterMagic._Img.Picture_Impl_.toFrom","iterMagic/Img.hx",441,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_448_get_raw,"iterMagic._Img.Picture_Impl_","get_raw",0x8fa72b9e,"iterMagic._Img.Picture_Impl_.get_raw","iterMagic/Img.hx",448,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_452_set_raw,"iterMagic._Img.Picture_Impl_","set_raw",0x82a8bcaa,"iterMagic._Img.Picture_Impl_.set_raw","iterMagic/Img.hx",452,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_455_traceGrid,"iterMagic._Img.Picture_Impl_","traceGrid",0xbc3f0aca,"iterMagic._Img.Picture_Impl_.traceGrid","iterMagic/Img.hx",455,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_458_imgToString,"iterMagic._Img.Picture_Impl_","imgToString",0x77c2dc6e,"iterMagic._Img.Picture_Impl_.imgToString","iterMagic/Img.hx",458,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_461_imageTypeString,"iterMagic._Img.Picture_Impl_","imageTypeString",0xf6fa9e85,"iterMagic._Img.Picture_Impl_.imageTypeString","iterMagic/Img.hx",461,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_acfeee5d98007f27_465_position,"iterMagic._Img.Picture_Impl_","position",0x223a8eaa,"iterMagic._Img.Picture_Impl_.position","iterMagic/Img.hx",465,0x8899afd5)
namespace iterMagic{
namespace _Img{

void Picture_Impl__obj::__construct() { }

Dynamic Picture_Impl__obj::__CreateEmpty() { return new Picture_Impl__obj; }

void *Picture_Impl__obj::_hx_vtable = 0;

Dynamic Picture_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Picture_Impl__obj > _hx_result = new Picture_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Picture_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x27401d85;
}

 ::iterMagic::Pic Picture_Impl__obj::_new(int width,int height,::hx::Null< int >  __o_imageType){
            		int imageType = __o_imageType.Default(2);
            	HX_GC_STACKFRAME(&_hx_pos_acfeee5d98007f27_421__new)
HXDLIN( 421)		 ::iterMagic::Pic this1 =  ::iterMagic::Pic_obj::__alloc( HX_CTX );
HXLINE( 423)		::Dynamic _hx_tmp;
HXDLIN( 423)		switch((int)(imageType)){
            			case (int)0: {
HXLINE( 423)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 423)				 ::iterMagic::BytesImg b = byt;
HXDLIN( 423)				{
HXLINE( 423)					b->width = width;
HXDLIN( 423)					b->height = height;
HXDLIN( 423)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 423)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 423)					{
HXLINE( 423)						int len = b->length;
HXDLIN( 423)						int w = 0;
HXDLIN( 423)						{
HXLINE( 423)							int _g = 0;
HXDLIN( 423)							int _g1 = b->height;
HXDLIN( 423)							while((_g < _g1)){
HXLINE( 423)								_g = (_g + 1);
HXDLIN( 423)								int y = (_g - 1);
HXDLIN( 423)								{
HXLINE( 423)									int _g2 = 0;
HXDLIN( 423)									int _g3 = b->width;
HXDLIN( 423)									while((_g2 < _g3)){
HXLINE( 423)										_g2 = (_g2 + 1);
HXDLIN( 423)										int x = (_g2 - 1);
HXDLIN( 423)										{
HXLINE( 423)											w = (w + 1);
HXDLIN( 423)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 423)										{
HXLINE( 423)											w = (w + 1);
HXDLIN( 423)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 423)										{
HXLINE( 423)											w = (w + 1);
HXDLIN( 423)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN( 423)										{
HXLINE( 423)											w = (w + 1);
HXDLIN( 423)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 423)				_hx_tmp = b;
            			}
            			break;
            			case (int)1: {
HXLINE( 423)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 423)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 423)				{
HXLINE( 423)					a->width = width;
HXDLIN( 423)					a->height = height;
HXDLIN( 423)					a->data = ::Array_obj< int >::__new(0);
HXDLIN( 423)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 423)					{
HXLINE( 423)						int _g4 = 0;
HXDLIN( 423)						int _g5 = a->length;
HXDLIN( 423)						while((_g4 < _g5)){
HXLINE( 423)							_g4 = (_g4 + 1);
HXDLIN( 423)							int i = (_g4 - 1);
HXDLIN( 423)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN( 423)				_hx_tmp = a;
            			}
            			break;
            			case (int)2: {
HXLINE( 423)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 423)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 423)				{
HXLINE( 423)					b1->width = width;
HXDLIN( 423)					b1->height = height;
HXDLIN( 423)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 423)					int size = (b1->length * 4);
HXDLIN( 423)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 423)					{
HXLINE( 423)						int _g6 = 0;
HXDLIN( 423)						int _g7 = b1->length;
HXDLIN( 423)						while((_g6 < _g7)){
HXLINE( 423)							_g6 = (_g6 + 1);
HXDLIN( 423)							int i1 = (_g6 - 1);
HXDLIN( 423)							{
HXLINE( 423)								 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 423)								bool _hx_tmp1;
HXDLIN( 423)								if ((i1 >= 0)) {
HXLINE( 423)									_hx_tmp1 = (i1 < (this2->byteLength >> 2));
            								}
            								else {
HXLINE( 423)									_hx_tmp1 = false;
            								}
HXDLIN( 423)								if (_hx_tmp1) {
HXLINE( 423)									 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 423)									int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 423)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 423)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 423)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 423)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN( 423)				_hx_tmp = b1;
            			}
            			break;
            			case (int)3: {
HXLINE( 423)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 423)				 ::iterMagic::VecIntImg v = vec;
HXDLIN( 423)				{
HXLINE( 423)					v->width = width;
HXDLIN( 423)					v->height = height;
HXDLIN( 423)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 423)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 423)					{
HXLINE( 423)						int _g8 = 0;
HXDLIN( 423)						int _g9 = v->length;
HXDLIN( 423)						while((_g8 < _g9)){
HXLINE( 423)							_g8 = (_g8 + 1);
HXDLIN( 423)							int i2 = (_g8 - 1);
HXDLIN( 423)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN( 423)				_hx_tmp = v;
            			}
            			break;
            			case (int)4: {
HXLINE( 423)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 423)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 423)				{
HXLINE( 423)					b2->width = width;
HXDLIN( 423)					b2->height = height;
HXDLIN( 423)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 423)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 423)					{
HXLINE( 423)						int len1 = b2->length;
HXDLIN( 423)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 423)						if (::hx::IsNull( d->head )) {
HXLINE( 423)							int _g10 = 0;
HXDLIN( 423)							int _g11 = len1;
HXDLIN( 423)							while((_g10 < _g11)){
HXLINE( 423)								_g10 = (_g10 + 1);
HXDLIN( 423)								int i3 = (_g10 - 1);
HXDLIN( 423)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE( 423)							int _g12 = 0;
HXDLIN( 423)							int _g13 = len1;
HXDLIN( 423)							while((_g12 < _g13)){
HXLINE( 423)								_g12 = (_g12 + 1);
HXDLIN( 423)								int i4 = (_g12 - 1);
HXDLIN( 423)								{
HXLINE( 423)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 423)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 423)									{
HXLINE( 423)										int _g14 = 0;
HXDLIN( 423)										int _g15 = i4;
HXDLIN( 423)										while((_g14 < _g15)){
HXLINE( 423)											_g14 = (_g14 + 1);
HXDLIN( 423)											int i5 = (_g14 - 1);
HXDLIN( 423)											prev = l;
HXDLIN( 423)											l = l->next;
            										}
            									}
HXDLIN( 423)									if (::hx::IsNull( prev )) {
HXLINE( 423)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 423)										l = null();
            									}
            									else {
HXLINE( 423)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 423)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 423)				_hx_tmp = b2;
            			}
            			break;
            		}
HXDLIN( 423)		this1->img = _hx_tmp;
HXLINE( 421)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Picture_Impl__obj,_new,return )

int Picture_Impl__obj::set( ::iterMagic::Pic this1,int index,int value){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_428_set)
HXDLIN( 428)		return ::iterMagic::Iimg_obj::set(this1->img,index,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Picture_Impl__obj,set,return )

int Picture_Impl__obj::get( ::iterMagic::Pic this1,int index){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_433_get)
HXDLIN( 433)		return ::iterMagic::Iimg_obj::get(this1->img,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Picture_Impl__obj,get,return )

 ::iterMagic::Pic Picture_Impl__obj::fromTo( ::iterMagic::Pic a, ::iterMagic::Pic b){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_436_fromTo)
HXLINE( 437)		{
HXLINE( 437)			int _g = 0;
HXDLIN( 437)			int _g1 = ( (int)(b->img->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 437)			while((_g < _g1)){
HXLINE( 437)				_g = (_g + 1);
HXDLIN( 437)				int i = (_g - 1);
HXDLIN( 437)				{
HXLINE( 437)					::Dynamic this1 = b->img;
HXDLIN( 437)					::iterMagic::Iimg_obj::set(this1,i,::iterMagic::Iimg_obj::get(a->img,i));
            				}
            			}
            		}
HXLINE( 438)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Picture_Impl__obj,fromTo,return )

 ::iterMagic::Pic Picture_Impl__obj::toFrom( ::iterMagic::Pic a, ::iterMagic::Pic b){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_441_toFrom)
HXLINE( 442)		{
HXLINE( 442)			int _g = 0;
HXDLIN( 442)			int _g1 = ( (int)(b->img->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 442)			while((_g < _g1)){
HXLINE( 442)				_g = (_g + 1);
HXDLIN( 442)				int i = (_g - 1);
HXDLIN( 442)				{
HXLINE( 442)					::Dynamic this1 = a->img;
HXDLIN( 442)					::iterMagic::Iimg_obj::set(this1,i,::iterMagic::Iimg_obj::get(b->img,i));
            				}
            			}
            		}
HXLINE( 443)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Picture_Impl__obj,toFrom,return )

 ::iterMagic::RawImageData Picture_Impl__obj::get_raw( ::iterMagic::Pic this1){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_448_get_raw)
HXDLIN( 448)		return ::iterMagic::Iimg_obj::getRaw(this1->img);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Picture_Impl__obj,get_raw,return )

 ::iterMagic::RawImageData Picture_Impl__obj::set_raw( ::iterMagic::Pic this1, ::iterMagic::RawImageData d){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_452_set_raw)
HXDLIN( 452)		return ::iterMagic::Iimg_obj::setRaw(this1->img,d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Picture_Impl__obj,set_raw,return )

void Picture_Impl__obj::traceGrid( ::iterMagic::Pic this1){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_455_traceGrid)
HXDLIN( 455)		::Dynamic this2 = this1->img;
HXDLIN( 455)		int count = 0;
HXDLIN( 455)		::String str = HX_("[ ",65,4f,00,00);
HXDLIN( 455)		{
HXDLIN( 455)			int _g = 0;
HXDLIN( 455)			int _g1 = ( (int)(this2->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
HXDLIN( 455)			while((_g < _g1)){
HXDLIN( 455)				_g = (_g + 1);
HXDLIN( 455)				int y = (_g - 1);
HXDLIN( 455)				{
HXDLIN( 455)					int _g2 = 0;
HXDLIN( 455)					int _g3 = ( (int)(this2->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
HXDLIN( 455)					while((_g2 < _g3)){
HXDLIN( 455)						_g2 = (_g2 + 1);
HXDLIN( 455)						int x = (_g2 - 1);
HXDLIN( 455)						count = (count + 1);
HXDLIN( 455)						str = (str + (::iterMagic::Iimg_obj::get(this2,(count - 1)) + HX_(", ",74,26,00,00)));
            					}
            				}
HXDLIN( 455)				str = str.substr(0,(str.length - 2));
HXDLIN( 455)				::haxe::Log_obj::trace((str + HX_(" ]",3d,1c,00,00)),::hx::SourceInfo(HX_("iterMagic/Img.hx",d5,af,99,88),650,HX_("iterMagic._Img.ImgMulti_Impl_",07,ef,b8,30),HX_("traceGrid",eb,b7,8e,bb)));
HXDLIN( 455)				str = HX_("[ ",65,4f,00,00);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Picture_Impl__obj,traceGrid,(void))

::String Picture_Impl__obj::imgToString( ::iterMagic::Pic this1){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_458_imgToString)
HXDLIN( 458)		::Dynamic this2 = this1->img;
HXDLIN( 458)		::String str = HX_("[",5b,00,00,00);
HXDLIN( 458)		{
HXDLIN( 458)			int _g = 0;
HXDLIN( 458)			int _g1 = ( (int)(this2->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 458)			while((_g < _g1)){
HXDLIN( 458)				_g = (_g + 1);
HXDLIN( 458)				int i = (_g - 1);
HXDLIN( 458)				str = (str + (::Std_obj::string(::iterMagic::Iimg_obj::get(this2,i)) + HX_(",",2c,00,00,00)));
            			}
            		}
HXDLIN( 458)		return (str.substr(0,(str.length - 1)) + HX_("]",5d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Picture_Impl__obj,imgToString,return )

 ::Dynamic Picture_Impl__obj::imageTypeString( ::iterMagic::Pic this1){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_461_imageTypeString)
HXDLIN( 461)		::Dynamic this2 = this1->img;
HXDLIN( 461)		 ::Dynamic v;
HXDLIN( 461)		if (::Std_obj::isOfType(this2,::hx::ClassOf< ::iterMagic::ArrIntImg >())) {
HXDLIN( 461)			v = 1;
            		}
            		else {
HXDLIN( 461)			if (::Std_obj::isOfType(this2,::hx::ClassOf< ::iterMagic::VecIntImg >())) {
HXDLIN( 461)				v = 3;
            			}
            			else {
HXDLIN( 461)				if (::Std_obj::isOfType(this2,::hx::ClassOf< ::iterMagic::BytesImg >())) {
HXDLIN( 461)					v = 0;
            				}
            				else {
HXDLIN( 461)					if (::Std_obj::isOfType(this2,::hx::ClassOf< ::iterMagic::U32ArrImg >())) {
HXDLIN( 461)						v = 2;
            					}
            					else {
HXDLIN( 461)						if (::Std_obj::isOfType(this2,::hx::ClassOf< ::iterMagic::StackIntImg >())) {
HXDLIN( 461)							v = 4;
            						}
            						else {
HXDLIN( 461)							v = null();
            						}
            					}
            				}
            			}
            		}
HXDLIN( 461)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Picture_Impl__obj,imageTypeString,return )

int Picture_Impl__obj::position( ::iterMagic::Pic this1,Float px,Float py){
            	HX_STACKFRAME(&_hx_pos_acfeee5d98007f27_465_position)
HXDLIN( 465)		return ::Std_obj::_hx_int(((py * ( (Float)(this1->img->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) )) + px));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Picture_Impl__obj,position,return )


Picture_Impl__obj::Picture_Impl__obj()
{
}

bool Picture_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fromTo") ) { outValue = fromTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFrom") ) { outValue = toFrom_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_raw") ) { outValue = get_raw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_raw") ) { outValue = set_raw_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { outValue = position_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"traceGrid") ) { outValue = traceGrid_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"imgToString") ) { outValue = imgToString_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"imageTypeString") ) { outValue = imageTypeString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Picture_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Picture_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Picture_Impl__obj::__mClass;

static ::String Picture_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("fromTo",85,9d,c6,b5),
	HX_("toFrom",85,10,7c,79),
	HX_("get_raw",7f,9e,cb,26),
	HX_("set_raw",8b,2f,cd,19),
	HX_("traceGrid",eb,b7,8e,bb),
	HX_("imgToString",cf,d3,30,ac),
	HX_("imageTypeString",66,5a,0e,39),
	HX_("position",a9,a0,fa,ca),
	::String(null())
};

void Picture_Impl__obj::__register()
{
	Picture_Impl__obj _hx_dummy;
	Picture_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic._Img.Picture_Impl_",8d,36,ae,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Picture_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Picture_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Picture_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Picture_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Picture_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
} // end namespace _Img
