// Generated by Haxe 4.3.0-rc.1+
(function ($global) { "use strict";
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = true;
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var htmlHelper_canvas_CanvasSetup = function() {
	this.divertTrace = new htmlHelper_tools_DivertTrace();
	var e = null;
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var dom = canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	var canvas = this1;
	canvas.width = 1024;
	canvas.height = 768;
	var dom = canvas;
	var style = dom.style;
	style.background = "black";
	window.document.body.appendChild(canvas);
	var this1 = new htmlHelper_canvas_CanvasPlus(canvas.getContext("2d",null),10,10);
	this.surface = this1;
	var factor = 4.;
	this.overSampleCanvas(canvas,this.surface.me,factor);
};
htmlHelper_canvas_CanvasSetup.__name__ = true;
htmlHelper_canvas_CanvasSetup.prototype = {
	overSampleCanvas: function(canvas,ctx,factor) {
		var width = canvas.width;
		var height = canvas.height;
		canvas.width = 0 | (width * factor | 0);
		canvas.height = 0 | (height * factor | 0);
		canvas.style.width = width + "px";
		canvas.style.height = height + "px";
		ctx.scale(factor,factor);
	}
};
var htmlHelper_canvas_CanvasPlus = function(me,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.me = me;
};
htmlHelper_canvas_CanvasPlus.__name__ = true;
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var pixelimage_DemoUse = function() {
	this.canvasSetup = new htmlHelper_canvas_CanvasSetup();
	haxe_Log.trace("Pixelimage example on Canvas",{ fileName : "src/pixelimage/DemoUse.hx", lineNumber : 16, className : "pixelimage.DemoUse", methodName : "new"});
	var g = this.canvasSetup.surface;
	var this1 = new Uint32Array(12582912);
	var this2 = new pixelimage_ImageStruct(4096,3072,this1);
	var this1 = this2;
	var p = this1;
	p.transparent = true;
	pixelimage_Pixelimage.setRelativePosition(p,0,0);
	this.drawGrid(p);
	this.drawAlphaTriangle(p);
	this.drawRadials(p);
	this.drawGridMask(p);
	var dx = -1.;
	var dy = -1.;
	var fat = -1.;
	var tall = -1.;
	if(tall == null) {
		tall = -1.;
	}
	if(fat == null) {
		fat = -1.;
	}
	if(dy == null) {
		dy = -1.;
	}
	if(dx == null) {
		dx = -1.;
	}
	if(dx < 0.) {
		var smallest = 150;
		var goldenRatio = 1.61803398875;
		dx = smallest / (goldenRatio + 2);
	}
	if(dy < 0.) {
		dy = dx;
	}
	if(fat < 0.) {
		fat = 280 - 2 * dx;
	}
	if(tall < 0.) {
		tall = 150 - 2 * dy;
	}
	var rightRadius = 280 - fat - dx;
	var bottomRadius = 150 - tall - dy;
	var farX = 1340 + dx + fat;
	var lowerY = 280 + dy + tall;
	var cx = 1340 + dx;
	var cy = 280 + dy;
	var targetError = 1.05;
	if(targetError == null) {
		targetError = 1.05;
	}
	var targetError1 = targetError;
	if(targetError1 == null) {
		targetError1 = 1.05;
	}
	var rSmall = dx > dy ? dy : dx;
	var targetE = targetError1;
	if(targetE == null) {
		targetE = 1.05;
	}
	var result = Math.ceil(Math.PI / Math.acos(1 - targetE / rSmall));
	var noSides = result < 12 ? 12 : result > 500 ? 500 : result;
	var sides = Math.ceil(noSides / 4) * 4;
	var theta = 2 * Math.PI / sides;
	var omega = Math.PI;
	var quarter = sides / 4 | 0;
	var lastX = 0.;
	var lastY = 0.;
	lastX = cx + dx * Math.cos(sides * theta + omega);
	lastY = cy + dy * Math.sin(sides * theta + omega);
	var _g = 0;
	var _g1 = quarter + 1;
	while(_g < _g1) {
		var i = _g++;
		var nextX = cx + dx * Math.cos(i * theta + 0.0001 + omega);
		var nextY = cy + dy * Math.sin(i * theta + 0.0001 + omega);
		var bx = lastX;
		var by = lastY;
		var cx1 = nextX;
		var cy1 = nextY;
		var adjustWinding = cx * by - bx * cy + (bx * cy1 - cx1 * by) + (cx1 * cy - cx * cy1) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx1;
			by = cy1;
			cx1 = bx_;
			cy1 = by_;
		}
		var s0 = cy * cx1 - cx * cy1;
		var sx = cy1 - cy;
		var sy = cx - cx1;
		var t0 = cx * by - cy * bx;
		var tx = cy - by;
		var ty = bx - cx;
		var A = -by * cx1 + cy * (-bx + cx1) + cx * (by - cy1) + bx * cy1;
		var ii = cy > by ? cy > cy1 ? new IntIterator(by > cy1 ? Math.floor(cy1) : Math.floor(by),Math.ceil(cy)) : new IntIterator(Math.floor(by),Math.ceil(cy1)) : by > cy1 ? new IntIterator(cy > cy1 ? Math.floor(cy1) : Math.ceil(cy),Math.ceil(by)) : new IntIterator(Math.floor(cy),Math.ceil(cy1));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g2 = cx > bx ? cx > cx1 ? new IntIterator(bx > cx1 ? Math.floor(cx1) : Math.floor(bx),Math.ceil(cx)) : new IntIterator(Math.floor(bx),Math.ceil(cx1)) : bx > cx1 ? new IntIterator(cx > cx1 ? Math.floor(cx1) : Math.ceil(cx),Math.ceil(bx)) : new IntIterator(Math.floor(cx),Math.ceil(cx1));
		while(_g2.min < _g2.max) {
			var x = _g2.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this2 = -7702922;
					var c = this2;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this3 = p.image[location];
						var this4 = this3;
						var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
						var this6 = this5 >> 24 & 255;
						var a1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this5 >> 16 & 255;
						var r1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this5 >> 8 & 255;
						var g1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = this5 & 255;
						var b1 = this9 == 0 ? 0. : this9 / 255;
						var this10 = 255;
						var a2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = 138;
						var r2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = 118;
						var g2 = this12 == 0 ? 0. : this12 / 255;
						var this13 = 118;
						var b2 = this13 == 0 ? 0. : this13 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g3 << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		lastX = nextX;
		lastY = nextY;
	}
	var x = 1340 + dx;
	var bx = x + fat;
	var cy = 280 + dy;
	var aA = 255;
	var rA = 84;
	var gA = 89;
	var bA = 81;
	var aB = 255;
	var rB = 138;
	var gB = 118;
	var bB = 118;
	var aC = 255;
	var rC = 138;
	var gC = 118;
	var bC = 118;
	var bcx = bx - x;
	var bcy = 280 - cy;
	var acx = x - x;
	var acy = 280 - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = x > bx ? x > x ? new IntIterator(bx > x ? Math.floor(x) : Math.floor(bx),Math.ceil(x)) : new IntIterator(Math.floor(bx),Math.ceil(x)) : bx > x ? new IntIterator(x > x ? Math.floor(x) : Math.ceil(x),Math.ceil(bx)) : new IntIterator(Math.floor(x),Math.ceil(x));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - x;
		var _g1 = cy > 280 ? cy > 280 ? new IntIterator(Math.floor(280),Math.ceil(cy)) : new IntIterator(Math.floor(280),Math.ceil(280)) : new IntIterator(Math.floor(cy),Math.ceil(280));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var aA = 255;
	var rA = 84;
	var gA = 89;
	var bA = 81;
	var aB = 255;
	var rB = 84;
	var gB = 89;
	var bB = 81;
	var aC = 255;
	var rC = 138;
	var gC = 118;
	var bC = 118;
	var bcx = bx - x;
	var bcy = cy - cy;
	var acx = bx - x;
	var acy = 280 - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = x > bx ? x > bx ? new IntIterator(bx > bx ? Math.floor(bx) : Math.floor(bx),Math.ceil(x)) : new IntIterator(Math.floor(bx),Math.ceil(bx)) : bx > bx ? new IntIterator(x > bx ? Math.floor(bx) : Math.ceil(x),Math.ceil(bx)) : new IntIterator(Math.floor(x),Math.ceil(bx));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - x;
		var _g1 = cy > cy ? cy > 280 ? new IntIterator(cy > 280 ? Math.floor(280) : Math.floor(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(280)) : cy > 280 ? new IntIterator(cy > 280 ? Math.floor(280) : Math.ceil(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(280));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var cy = 280 + dy;
	var targetError = 1.05;
	if(targetError == null) {
		targetError = 1.05;
	}
	var targetError1 = targetError;
	if(targetError1 == null) {
		targetError1 = 1.05;
	}
	var rSmall = rightRadius > dy ? dy : rightRadius;
	var targetE = targetError1;
	if(targetE == null) {
		targetE = 1.05;
	}
	var result = Math.ceil(Math.PI / Math.acos(1 - targetE / rSmall));
	var noSides = result < 12 ? 12 : result > 500 ? 500 : result;
	var sides = Math.ceil(noSides / 4) * 4;
	var theta = 2 * Math.PI / sides;
	var omega = 3 * Math.PI / 2;
	var quarter = sides / 4 | 0;
	var lastX = 0.;
	var lastY = 0.;
	lastX = farX + rightRadius * Math.cos(sides * theta + omega);
	lastY = cy + dy * Math.sin(sides * theta + omega);
	var _g = 0;
	var _g1 = quarter + 1;
	while(_g < _g1) {
		var i = _g++;
		var nextX = farX + rightRadius * Math.cos(i * theta + 0.0001 + omega);
		var nextY = cy + dy * Math.sin(i * theta + 0.0001 + omega);
		var bx = lastX;
		var by = lastY;
		var cx = nextX;
		var cy1 = nextY;
		var adjustWinding = farX * by - bx * cy + (bx * cy1 - cx * by) + (cx * cy - farX * cy1) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy1;
			cx = bx_;
			cy1 = by_;
		}
		var s0 = cy * cx - farX * cy1;
		var sx = cy1 - cy;
		var sy = farX - cx;
		var t0 = farX * by - cy * bx;
		var tx = cy - by;
		var ty = bx - farX;
		var A = -by * cx + cy * (-bx + cx) + farX * (by - cy1) + bx * cy1;
		var ii = cy > by ? cy > cy1 ? new IntIterator(by > cy1 ? Math.floor(cy1) : Math.floor(by),Math.ceil(cy)) : new IntIterator(Math.floor(by),Math.ceil(cy1)) : by > cy1 ? new IntIterator(cy > cy1 ? Math.floor(cy1) : Math.ceil(cy),Math.ceil(by)) : new IntIterator(Math.floor(cy),Math.ceil(cy1));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g2 = farX > bx ? farX > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(farX)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(farX > cx ? Math.floor(cx) : Math.ceil(farX),Math.ceil(bx)) : new IntIterator(Math.floor(farX),Math.ceil(cx));
		while(_g2.min < _g2.max) {
			var x = _g2.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this2 = -11249327;
					var c = this2;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this3 = p.image[location];
						var this4 = this3;
						var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
						var this6 = this5 >> 24 & 255;
						var a1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this5 >> 16 & 255;
						var r1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this5 >> 8 & 255;
						var g1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = this5 & 255;
						var b1 = this9 == 0 ? 0. : this9 / 255;
						var this10 = 255;
						var a2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = 84;
						var r2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = 89;
						var g2 = this12 == 0 ? 0. : this12 / 255;
						var this13 = 81;
						var b2 = this13 == 0 ? 0. : this13 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g3 << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		lastX = nextX;
		lastY = nextY;
	}
	var y = 280 + dy;
	var bx = 1340 + dx;
	var cy = y + tall;
	var aA = 255;
	var rA = 138;
	var gA = 118;
	var bA = 118;
	var aB = 255;
	var rB = 138;
	var gB = 118;
	var bB = 118;
	var aC = 255;
	var rC = 81;
	var gC = 81;
	var bC = 93;
	var bcx = bx - 1340;
	var bcy = y - cy;
	var acx = 0;
	var acy = y - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = 1340 > bx ? new IntIterator(Math.floor(bx),Math.ceil(1340)) : bx > 1340 ? new IntIterator(Math.ceil(1340),Math.ceil(bx)) : new IntIterator(Math.floor(1340),Math.ceil(1340));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - 1340;
		var _g1 = cy > y ? cy > y ? new IntIterator(y > y ? Math.floor(y) : Math.floor(y),Math.ceil(cy)) : new IntIterator(Math.floor(y),Math.ceil(y)) : y > y ? new IntIterator(cy > y ? Math.floor(y) : Math.ceil(cy),Math.ceil(y)) : new IntIterator(Math.floor(cy),Math.ceil(y));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var aA = 255;
	var rA = 81;
	var gA = 81;
	var bA = 93;
	var aB = 255;
	var rB = 138;
	var gB = 118;
	var bB = 118;
	var aC = 255;
	var rC = 81;
	var gC = 81;
	var bC = 93;
	var bcx = bx - 1340;
	var bcy = cy - cy;
	var acx = bx - 1340;
	var acy = y - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = 1340 > bx ? 1340 > bx ? new IntIterator(bx > bx ? Math.floor(bx) : Math.floor(bx),Math.ceil(1340)) : new IntIterator(Math.floor(bx),Math.ceil(bx)) : bx > bx ? new IntIterator(1340 > bx ? Math.floor(bx) : Math.ceil(1340),Math.ceil(bx)) : new IntIterator(Math.floor(1340),Math.ceil(bx));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - 1340;
		var _g1 = cy > cy ? cy > y ? new IntIterator(cy > y ? Math.floor(y) : Math.floor(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(y)) : cy > y ? new IntIterator(cy > y ? Math.floor(y) : Math.ceil(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(y));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var x = 1340 + dx;
	var y = 280 + dy;
	var bx = x + fat;
	var cy = y + tall;
	var aA = 255;
	var rA = 84;
	var gA = 89;
	var bA = 81;
	var aB = 255;
	var rB = 138;
	var gB = 118;
	var bB = 118;
	var aC = 255;
	var rC = 81;
	var gC = 81;
	var bC = 93;
	var bcx = bx - x;
	var bcy = y - cy;
	var acx = x - x;
	var acy = y - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = x > bx ? x > x ? new IntIterator(bx > x ? Math.floor(x) : Math.floor(bx),Math.ceil(x)) : new IntIterator(Math.floor(bx),Math.ceil(x)) : bx > x ? new IntIterator(x > x ? Math.floor(x) : Math.ceil(x),Math.ceil(bx)) : new IntIterator(Math.floor(x),Math.ceil(x));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - x;
		var _g1 = cy > y ? cy > y ? new IntIterator(y > y ? Math.floor(y) : Math.floor(y),Math.ceil(cy)) : new IntIterator(Math.floor(y),Math.ceil(y)) : y > y ? new IntIterator(cy > y ? Math.floor(y) : Math.ceil(cy),Math.ceil(y)) : new IntIterator(Math.floor(cy),Math.ceil(y));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var aA = 255;
	var rA = 117;
	var gA = 117;
	var bA = 103;
	var aB = 255;
	var rB = 84;
	var gB = 89;
	var bB = 81;
	var aC = 255;
	var rC = 81;
	var gC = 81;
	var bC = 93;
	var bcx = bx - x;
	var bcy = cy - cy;
	var acx = bx - x;
	var acy = y - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = x > bx ? x > bx ? new IntIterator(bx > bx ? Math.floor(bx) : Math.floor(bx),Math.ceil(x)) : new IntIterator(Math.floor(bx),Math.ceil(bx)) : bx > bx ? new IntIterator(x > bx ? Math.floor(bx) : Math.ceil(x),Math.ceil(bx)) : new IntIterator(Math.floor(x),Math.ceil(bx));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - x;
		var _g1 = cy > cy ? cy > y ? new IntIterator(cy > y ? Math.floor(y) : Math.floor(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(y)) : cy > y ? new IntIterator(cy > y ? Math.floor(y) : Math.ceil(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(y));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var y = 280 + dy;
	var bx = farX + rightRadius;
	var cy = y + tall;
	var aA = 255;
	var rA = 84;
	var gA = 89;
	var bA = 81;
	var aB = 255;
	var rB = 84;
	var gB = 89;
	var bB = 81;
	var aC = 255;
	var rC = 117;
	var gC = 117;
	var bC = 103;
	var bcx = bx - farX;
	var bcy = y - cy;
	var acx = farX - farX;
	var acy = y - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = farX > bx ? farX > farX ? new IntIterator(bx > farX ? Math.floor(farX) : Math.floor(bx),Math.ceil(farX)) : new IntIterator(Math.floor(bx),Math.ceil(farX)) : bx > farX ? new IntIterator(farX > farX ? Math.floor(farX) : Math.ceil(farX),Math.ceil(bx)) : new IntIterator(Math.floor(farX),Math.ceil(farX));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - farX;
		var _g1 = cy > y ? cy > y ? new IntIterator(y > y ? Math.floor(y) : Math.floor(y),Math.ceil(cy)) : new IntIterator(Math.floor(y),Math.ceil(y)) : y > y ? new IntIterator(cy > y ? Math.floor(y) : Math.ceil(cy),Math.ceil(y)) : new IntIterator(Math.floor(cy),Math.ceil(y));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var aA = 255;
	var rA = 117;
	var gA = 117;
	var bA = 103;
	var aB = 255;
	var rB = 84;
	var gB = 89;
	var bB = 81;
	var aC = 255;
	var rC = 117;
	var gC = 117;
	var bC = 103;
	var bcx = bx - farX;
	var bcy = cy - cy;
	var acx = bx - farX;
	var acy = y - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = farX > bx ? farX > bx ? new IntIterator(bx > bx ? Math.floor(bx) : Math.floor(bx),Math.ceil(farX)) : new IntIterator(Math.floor(bx),Math.ceil(bx)) : bx > bx ? new IntIterator(farX > bx ? Math.floor(bx) : Math.ceil(farX),Math.ceil(bx)) : new IntIterator(Math.floor(farX),Math.ceil(bx));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - farX;
		var _g1 = cy > cy ? cy > y ? new IntIterator(cy > y ? Math.floor(y) : Math.floor(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(y)) : cy > y ? new IntIterator(cy > y ? Math.floor(y) : Math.ceil(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(y));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var cx = 1340 + dx;
	var targetError = 1.05;
	if(targetError == null) {
		targetError = 1.05;
	}
	var targetError1 = targetError;
	if(targetError1 == null) {
		targetError1 = 1.05;
	}
	var rSmall = dx > bottomRadius ? bottomRadius : dx;
	var targetE = targetError1;
	if(targetE == null) {
		targetE = 1.05;
	}
	var result = Math.ceil(Math.PI / Math.acos(1 - targetE / rSmall));
	var noSides = result < 12 ? 12 : result > 500 ? 500 : result;
	var sides = Math.ceil(noSides / 4) * 4;
	var theta = 2 * Math.PI / sides;
	var omega = Math.PI / 2;
	var quarter = sides / 4 | 0;
	var lastX = 0.;
	var lastY = 0.;
	lastX = cx + dx * Math.cos(sides * theta + omega);
	lastY = lowerY + bottomRadius * Math.sin(sides * theta + omega);
	var _g = 0;
	var _g1 = quarter + 1;
	while(_g < _g1) {
		var i = _g++;
		var nextX = cx + dx * Math.cos(i * theta + 0.0001 + omega);
		var nextY = lowerY + bottomRadius * Math.sin(i * theta + 0.0001 + omega);
		var bx = lastX;
		var by = lastY;
		var cx1 = nextX;
		var cy = nextY;
		var adjustWinding = cx * by - bx * lowerY + (bx * cy - cx1 * by) + (cx1 * lowerY - cx * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx1;
			by = cy;
			cx1 = bx_;
			cy = by_;
		}
		var s0 = lowerY * cx1 - cx * cy;
		var sx = cy - lowerY;
		var sy = cx - cx1;
		var t0 = cx * by - lowerY * bx;
		var tx = lowerY - by;
		var ty = bx - cx;
		var A = -by * cx1 + lowerY * (-bx + cx1) + cx * (by - cy) + bx * cy;
		var ii = lowerY > by ? lowerY > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(lowerY)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(lowerY > cy ? Math.floor(cy) : Math.ceil(lowerY),Math.ceil(by)) : new IntIterator(Math.floor(lowerY),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g2 = cx > bx ? cx > cx1 ? new IntIterator(bx > cx1 ? Math.floor(cx1) : Math.floor(bx),Math.ceil(cx)) : new IntIterator(Math.floor(bx),Math.ceil(cx1)) : bx > cx1 ? new IntIterator(cx > cx1 ? Math.floor(cx1) : Math.ceil(cx),Math.ceil(bx)) : new IntIterator(Math.floor(cx),Math.ceil(cx1));
		while(_g2.min < _g2.max) {
			var x = _g2.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this2 = -11447971;
					var c = this2;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this3 = p.image[location];
						var this4 = this3;
						var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
						var this6 = this5 >> 24 & 255;
						var a1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this5 >> 16 & 255;
						var r1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this5 >> 8 & 255;
						var g1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = this5 & 255;
						var b1 = this9 == 0 ? 0. : this9 / 255;
						var this10 = 255;
						var a2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = 81;
						var r2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = 81;
						var g2 = this12 == 0 ? 0. : this12 / 255;
						var this13 = 93;
						var b2 = this13 == 0 ? 0. : this13 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g3 << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		lastX = nextX;
		lastY = nextY;
	}
	var x = 1340 + dx;
	var bx = x + fat;
	var cy = lowerY + bottomRadius;
	var aA = 255;
	var rA = 117;
	var gA = 117;
	var bA = 103;
	var aB = 255;
	var rB = 81;
	var gB = 81;
	var bB = 93;
	var aC = 255;
	var rC = 81;
	var gC = 81;
	var bC = 93;
	var bcx = bx - x;
	var bcy = lowerY - cy;
	var acx = x - x;
	var acy = lowerY - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = x > bx ? x > x ? new IntIterator(bx > x ? Math.floor(x) : Math.floor(bx),Math.ceil(x)) : new IntIterator(Math.floor(bx),Math.ceil(x)) : bx > x ? new IntIterator(x > x ? Math.floor(x) : Math.ceil(x),Math.ceil(bx)) : new IntIterator(Math.floor(x),Math.ceil(x));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - x;
		var _g1 = cy > lowerY ? cy > lowerY ? new IntIterator(lowerY > lowerY ? Math.floor(lowerY) : Math.floor(lowerY),Math.ceil(cy)) : new IntIterator(Math.floor(lowerY),Math.ceil(lowerY)) : lowerY > lowerY ? new IntIterator(cy > lowerY ? Math.floor(lowerY) : Math.ceil(cy),Math.ceil(lowerY)) : new IntIterator(Math.floor(cy),Math.ceil(lowerY));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var aA = 255;
	var rA = 117;
	var gA = 117;
	var bA = 103;
	var aB = 255;
	var rB = 117;
	var gB = 117;
	var bB = 103;
	var aC = 255;
	var rC = 81;
	var gC = 81;
	var bC = 93;
	var bcx = bx - x;
	var bcy = cy - cy;
	var acx = bx - x;
	var acy = lowerY - cy;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var _g = x > bx ? x > bx ? new IntIterator(bx > bx ? Math.floor(bx) : Math.floor(bx),Math.ceil(x)) : new IntIterator(Math.floor(bx),Math.ceil(bx)) : bx > bx ? new IntIterator(x > bx ? Math.floor(bx) : Math.ceil(x),Math.ceil(bx)) : new IntIterator(Math.floor(x),Math.ceil(bx));
	while(_g.min < _g.max) {
		var px = _g.min++;
		var pcx = px - x;
		var _g1 = cy > cy ? cy > lowerY ? new IntIterator(cy > lowerY ? Math.floor(lowerY) : Math.floor(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(lowerY)) : cy > lowerY ? new IntIterator(cy > lowerY ? Math.floor(lowerY) : Math.ceil(cy),Math.ceil(cy)) : new IntIterator(Math.floor(cy),Math.ceil(lowerY));
		while(_g1.min < _g1.max) {
			var py = _g1.min++;
			var pcy = py - cy;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var this1 = i;
				var a = this1;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var this2 = i1;
				var r = this2;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var this3 = i2;
				var g1 = this3;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var this4 = i3;
				var b = this4;
				var location = p.useVirtualPos ? (py - p.virtualY) * p.width + px - p.virtualX | 0 : py * p.width + px | 0;
				if(p.transparent && a < 254) {
					var this5 = p.image[location];
					var this6 = this5;
					var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
					var rhs = a << 24 | r << 16 | g1 << 8 | b;
					var this7 = old >> 24 & 255;
					var a1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = old >> 16 & 255;
					var r1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = old >> 8 & 255;
					var g11 = this9 == 0 ? 0. : this9 / 255;
					var this10 = old & 255;
					var b1 = this10 == 0 ? 0. : this10 / 255;
					var this11 = rhs >> 24 & 255;
					var a2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = rhs >> 16 & 255;
					var r2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = rhs >> 8 & 255;
					var g2 = this13 == 0 ? 0. : this13 / 255;
					var this14 = rhs & 255;
					var b2 = this14 == 0 ? 0. : this14 / 255;
					var a3 = a1 * (1 - a2);
					var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
					var g3 = 255 * (g11 * a3 + g2 * a2) | 0;
					var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
					var a4 = 255 * (a3 + a2) | 0;
					var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[location] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
				}
			}
		}
	}
	var targetError = 1.05;
	if(targetError == null) {
		targetError = 1.05;
	}
	var targetError1 = targetError;
	if(targetError1 == null) {
		targetError1 = 1.05;
	}
	var rSmall = rightRadius > bottomRadius ? bottomRadius : rightRadius;
	var targetE = targetError1;
	if(targetE == null) {
		targetE = 1.05;
	}
	var result = Math.ceil(Math.PI / Math.acos(1 - targetE / rSmall));
	var noSides = result < 12 ? 12 : result > 500 ? 500 : result;
	var sides = Math.ceil(noSides / 4) * 4;
	var theta = 2 * Math.PI / sides;
	var omega = 0.;
	var quarter = sides / 4 | 0;
	var lastX = 0.;
	var lastY = 0.;
	lastX = farX + rightRadius * Math.cos(sides * theta + omega);
	lastY = lowerY + bottomRadius * Math.sin(sides * theta + omega);
	var _g = 0;
	var _g1 = quarter + 1;
	while(_g < _g1) {
		var i = _g++;
		var nextX = farX + rightRadius * Math.cos(i * theta + 0.0001 + omega);
		var nextY = lowerY + bottomRadius * Math.sin(i * theta + 0.0001 + omega);
		var bx = lastX;
		var by = lastY;
		var cx = nextX;
		var cy = nextY;
		var adjustWinding = farX * by - bx * lowerY + (bx * cy - cx * by) + (cx * lowerY - farX * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy;
			cx = bx_;
			cy = by_;
		}
		var s0 = lowerY * cx - farX * cy;
		var sx = cy - lowerY;
		var sy = farX - cx;
		var t0 = farX * by - lowerY * bx;
		var tx = lowerY - by;
		var ty = bx - farX;
		var A = -by * cx + lowerY * (-bx + cx) + farX * (by - cy) + bx * cy;
		var ii = lowerY > by ? lowerY > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(lowerY)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(lowerY > cy ? Math.floor(cy) : Math.ceil(lowerY),Math.ceil(by)) : new IntIterator(Math.floor(lowerY),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g2 = farX > bx ? farX > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(farX)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(farX > cx ? Math.floor(cx) : Math.ceil(farX),Math.ceil(bx)) : new IntIterator(Math.floor(farX),Math.ceil(cx));
		while(_g2.min < _g2.max) {
			var x = _g2.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this2 = -9079449;
					var c = this2;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this3 = p.image[location];
						var this4 = this3;
						var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
						var this6 = this5 >> 24 & 255;
						var a1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this5 >> 16 & 255;
						var r1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this5 >> 8 & 255;
						var g1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = this5 & 255;
						var b1 = this9 == 0 ? 0. : this9 / 255;
						var this10 = 255;
						var a2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = 117;
						var r2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = 117;
						var g2 = this12 == 0 ? 0. : this12 / 255;
						var this13 = 103;
						var b2 = this13 == 0 ? 0. : this13 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g3 << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		lastX = nextX;
		lastY = nextY;
	}
	var ctx = g.me;
	if(p.useMask && p.mask != null) {
		var w = p.width;
		var h = p.height;
		var this1 = new Uint32Array(w * h | 0);
		var this2 = new pixelimage_ImageStruct(w,h,this1);
		var temp = this2;
		var _g = 0;
		var _g1 = p.image.length;
		while(_g < _g1) {
			var i = _g++;
			var this1 = p.image[i];
			var p0 = this1;
			var this2 = p.mask.image[i];
			var m1 = this2;
			var value;
			if(m1 == 0) {
				var this3 = p0;
				value = this3;
			} else {
				var this4 = m1 >> 24 & 255;
				var m0 = this4 == 0 ? 0. : this4 / 255;
				var this5 = m1 >> 16 & 255;
				var m11 = this5 == 0 ? 0. : this5 / 255;
				var this6 = m1 >> 8 & 255;
				var m2 = this6 == 0 ? 0. : this6 / 255;
				var this7 = m1 & 255;
				var m3 = this7 == 0 ? 0. : this7 / 255;
				var ch0 = (1. - m0) * (p0 >> 24 & 255) | 0;
				var ch1 = (1. - m11) * (p0 >> 16 & 255) | 0;
				var ch2 = (1. - m2) * (p0 >> 8 & 255) | 0;
				var ch3 = (1. - m3) * (p0 & 255) | 0;
				value = Math.round(ch0 * 255) << 24 | Math.round(ch1 * 255) << 16 | Math.round(ch2 * 255) << 8 | Math.round(ch3 * 255);
			}
			temp.image[i] = value;
		}
		var dataimg = temp.image;
		var data = new Uint8ClampedArray(new Uint8Array(dataimg.buffer).buffer);
		var imageData = new ImageData(data,p.width,p.height);
		if(p.useVirtualPos) {
			ctx.putImageData(imageData,0 - p.virtualX,0 - p.virtualY);
		} else {
			ctx.putImageData(imageData,0,0);
		}
	} else {
		var dataimg = p.image;
		var data = new Uint8ClampedArray(new Uint8Array(dataimg.buffer).buffer);
		var imageData = new ImageData(data,p.width,p.height);
		if(p.useVirtualPos) {
			ctx.putImageData(imageData,0 - p.virtualX,0 - p.virtualY);
		} else {
			ctx.putImageData(imageData,0,0);
		}
	}
};
pixelimage_DemoUse.__name__ = true;
pixelimage_DemoUse.prototype = {
	drawRadials: function(p) {
		var gx = -0.25;
		var gy = -0.25;
		if(gy == null) {
			gy = 0;
		}
		if(gx == null) {
			gx = 0;
		}
		var w = Math.ceil(500);
		var h = Math.ceil(300);
		var this1 = new Uint32Array(w * h | 0);
		var this2 = new pixelimage_ImageStruct(w,h,this1);
		var temp = this2;
		var rx = 250.;
		var ry = 150.;
		temp.transparent = false;
		var p1 = 0;
		var xx = p1;
		var q = 0;
		var maxX = 500;
		var maxY = 300;
		while(true) {
			var x = p1++;
			var this1 = -16727809;
			var c = this1;
			if((c >> 24 & 255) < 254 && temp.transparent) {
				var location = temp.useVirtualPos ? (q - temp.virtualY) * temp.width + x - temp.virtualX | 0 : q * temp.width + x | 0;
				var this2 = temp.image[location];
				var this3 = this2;
				var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
				var this5 = this4 >> 24 & 255;
				var a1 = this5 == 0 ? 0. : this5 / 255;
				var this6 = this4 >> 16 & 255;
				var r1 = this6 == 0 ? 0. : this6 / 255;
				var this7 = this4 >> 8 & 255;
				var g1 = this7 == 0 ? 0. : this7 / 255;
				var this8 = this4 & 255;
				var b1 = this8 == 0 ? 0. : this8 / 255;
				var this9 = 255;
				var a2 = this9 == 0 ? 0. : this9 / 255;
				var this10 = 0;
				var r2 = this10 == 0 ? 0. : this10 / 255;
				var this11 = 192;
				var g2 = this11 == 0 ? 0. : this11 / 255;
				var this12 = 255;
				var b2 = this12 == 0 ? 0. : this12 / 255;
				var a3 = a1 * (1 - a2);
				var r = 255 * (r1 * a3 + r2 * a2) | 0;
				var g = 255 * (g1 * a3 + g2 * a2) | 0;
				var b = 255 * (b1 * a3 + b2 * a2) | 0;
				var a = 255 * (a3 + a2) | 0;
				var blended = a << 24 | r << 16 | g << 8 | b;
				temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
			} else {
				temp.image[temp.useVirtualPos ? (q - temp.virtualY) * temp.width + x - temp.virtualX | 0 : q * temp.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
			}
			if(p1 > maxX) {
				p1 = xx;
				++q;
			}
			if(q > maxY) {
				break;
			}
		}
		var gx1 = gx;
		var gy1 = gy;
		if(gy1 == null) {
			gy1 = 0.;
		}
		if(gx1 == null) {
			gx1 = 0.;
		}
		var rSmall = rx > ry ? ry : rx;
		var targetE = 1.05;
		if(targetE == null) {
			targetE = 1.05;
		}
		var result = Math.ceil(Math.PI / Math.acos(1 - targetE / rSmall));
		var noSides = result < 12 ? 12 : result > 500 ? 500 : result;
		var gx = gx1;
		var gy = gy1;
		var phi = 0;
		var sides = noSides;
		if(sides == null) {
			sides = 36;
		}
		if(phi == null) {
			phi = 0.;
		}
		if(gy == null) {
			gy = 0;
		}
		if(gx == null) {
			gx = 0;
		}
		if(gx < -1.) {
			gx = -1;
		}
		if(gx > 1.) {
			gx = 1;
		}
		if(gy < -1.) {
			gy = -1.;
		}
		if(gy > 1.) {
			gy = 1;
		}
		var mx = rx + gx * rx;
		var my = ry + gy * ry;
		var theta = 2 * Math.PI / sides;
		var omega = 0.;
		var lastX = 0.;
		var lastY = 0.;
		if(phi != 0) {
			lastX = rx * Math.cos(sides * theta + omega) * Math.cos(phi) - ry * Math.sin(sides * theta + omega) * Math.sin(phi) + rx;
			lastY = rx * Math.cos(sides * theta + omega) * Math.sin(phi) + ry * Math.sin(sides * theta + omega) * Math.cos(phi) + ry;
		} else {
			lastX = rx + rx * Math.cos(sides * theta + omega);
			lastY = ry + ry * Math.sin(sides * theta + omega);
		}
		if(phi != 0) {
			var cphi = Math.cos(phi);
			var sphi = Math.sin(phi);
			var _g = 0;
			var _g1 = sides + 1;
			while(_g < _g1) {
				var i = _g++;
				var stheta = Math.sin(i * theta + omega);
				var ctheta = Math.cos(i * theta + omega);
				var nextX = rx * ctheta * cphi - ry * stheta * sphi + rx;
				var nextY = rx * ctheta * sphi + ry * stheta * cphi + ry;
				var aA = 255;
				var rA = 0;
				var gA = 192;
				var bA = 255;
				var aB = 255;
				var rB = 192;
				var gB = 255;
				var bB = 0;
				var aC = 255;
				var rC = 0;
				var gC = 192;
				var bC = 255;
				var bcx = lastX - nextX;
				var bcy = lastY - nextY;
				var acx = mx - nextX;
				var acy = my - nextY;
				var dot11 = bcx * bcx + bcy * bcy;
				var dot12 = bcx * acx + bcy * acy;
				var dot22 = acx * acx + acy * acy;
				var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
				var _g2 = nextX > lastX ? nextX > mx ? new IntIterator(lastX > mx ? Math.floor(mx) : Math.floor(lastX),Math.ceil(nextX)) : new IntIterator(Math.floor(lastX),Math.ceil(mx)) : lastX > mx ? new IntIterator(nextX > mx ? Math.floor(mx) : Math.ceil(nextX),Math.ceil(lastX)) : new IntIterator(Math.floor(nextX),Math.ceil(mx));
				while(_g2.min < _g2.max) {
					var px = _g2.min++;
					var pcx = px - nextX;
					var _g3 = nextY > lastY ? nextY > my ? new IntIterator(lastY > my ? Math.floor(my) : Math.floor(lastY),Math.ceil(nextY)) : new IntIterator(Math.floor(lastY),Math.ceil(my)) : lastY > my ? new IntIterator(nextY > my ? Math.floor(my) : Math.ceil(nextY),Math.ceil(lastY)) : new IntIterator(Math.floor(nextY),Math.ceil(my));
					while(_g3.min < _g3.max) {
						var py = _g3.min++;
						var pcy = py - nextY;
						var dot31 = pcx * bcx + pcy * bcy;
						var dot32 = pcx * acx + pcy * acy;
						var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
						var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
						var ratioC = 1.0 - ratioB - ratioA;
						if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
							var i1 = aA * ratioA + aB * ratioB + aC * ratioC | 0;
							if(i1 > 255) {
								i1 = 255;
							}
							if(i1 < 0) {
								i1 = 0;
							}
							var this1 = i1;
							var a = this1;
							var i2 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
							if(i2 > 255) {
								i2 = 255;
							}
							if(i2 < 0) {
								i2 = 0;
							}
							var this2 = i2;
							var r = this2;
							var i3 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
							if(i3 > 255) {
								i3 = 255;
							}
							if(i3 < 0) {
								i3 = 0;
							}
							var this3 = i3;
							var g = this3;
							var i4 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
							if(i4 > 255) {
								i4 = 255;
							}
							if(i4 < 0) {
								i4 = 0;
							}
							var this4 = i4;
							var b = this4;
							var location = temp.useVirtualPos ? (py - temp.virtualY) * temp.width + px - temp.virtualX | 0 : py * temp.width + px | 0;
							if(temp.transparent && a < 254) {
								var this5 = temp.image[location];
								var this6 = this5;
								var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
								var rhs = a << 24 | r << 16 | g << 8 | b;
								var this7 = old >> 24 & 255;
								var a1 = this7 == 0 ? 0. : this7 / 255;
								var this8 = old >> 16 & 255;
								var r1 = this8 == 0 ? 0. : this8 / 255;
								var this9 = old >> 8 & 255;
								var g1 = this9 == 0 ? 0. : this9 / 255;
								var this10 = old & 255;
								var b1 = this10 == 0 ? 0. : this10 / 255;
								var this11 = rhs >> 24 & 255;
								var a2 = this11 == 0 ? 0. : this11 / 255;
								var this12 = rhs >> 16 & 255;
								var r2 = this12 == 0 ? 0. : this12 / 255;
								var this13 = rhs >> 8 & 255;
								var g2 = this13 == 0 ? 0. : this13 / 255;
								var this14 = rhs & 255;
								var b2 = this14 == 0 ? 0. : this14 / 255;
								var a3 = a1 * (1 - a2);
								var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
								var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
								var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
								var a4 = 255 * (a3 + a2) | 0;
								var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
								temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
							} else {
								temp.image[location] = temp.isLittle ? a << 24 | b << 16 | g << 8 | r : a << 24 | r << 16 | g << 8 | b;
							}
						}
					}
				}
				lastX = nextX;
				lastY = nextY;
			}
		} else {
			var _g = 0;
			var _g1 = sides + 1;
			while(_g < _g1) {
				var i = _g++;
				var nextX = rx + rx * Math.cos(i * theta + omega);
				var nextY = ry + ry * Math.sin(i * theta + omega);
				var aA = 255;
				var rA = 0;
				var gA = 192;
				var bA = 255;
				var aB = 255;
				var rB = 192;
				var gB = 255;
				var bB = 0;
				var aC = 255;
				var rC = 0;
				var gC = 192;
				var bC = 255;
				var bcx = lastX - nextX;
				var bcy = lastY - nextY;
				var acx = mx - nextX;
				var acy = my - nextY;
				var dot11 = bcx * bcx + bcy * bcy;
				var dot12 = bcx * acx + bcy * acy;
				var dot22 = acx * acx + acy * acy;
				var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
				var _g2 = nextX > lastX ? nextX > mx ? new IntIterator(lastX > mx ? Math.floor(mx) : Math.floor(lastX),Math.ceil(nextX)) : new IntIterator(Math.floor(lastX),Math.ceil(mx)) : lastX > mx ? new IntIterator(nextX > mx ? Math.floor(mx) : Math.ceil(nextX),Math.ceil(lastX)) : new IntIterator(Math.floor(nextX),Math.ceil(mx));
				while(_g2.min < _g2.max) {
					var px = _g2.min++;
					var pcx = px - nextX;
					var _g3 = nextY > lastY ? nextY > my ? new IntIterator(lastY > my ? Math.floor(my) : Math.floor(lastY),Math.ceil(nextY)) : new IntIterator(Math.floor(lastY),Math.ceil(my)) : lastY > my ? new IntIterator(nextY > my ? Math.floor(my) : Math.ceil(nextY),Math.ceil(lastY)) : new IntIterator(Math.floor(nextY),Math.ceil(my));
					while(_g3.min < _g3.max) {
						var py = _g3.min++;
						var pcy = py - nextY;
						var dot31 = pcx * bcx + pcy * bcy;
						var dot32 = pcx * acx + pcy * acy;
						var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
						var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
						var ratioC = 1.0 - ratioB - ratioA;
						if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
							var i1 = aA * ratioA + aB * ratioB + aC * ratioC | 0;
							if(i1 > 255) {
								i1 = 255;
							}
							if(i1 < 0) {
								i1 = 0;
							}
							var this1 = i1;
							var a = this1;
							var i2 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
							if(i2 > 255) {
								i2 = 255;
							}
							if(i2 < 0) {
								i2 = 0;
							}
							var this2 = i2;
							var r = this2;
							var i3 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
							if(i3 > 255) {
								i3 = 255;
							}
							if(i3 < 0) {
								i3 = 0;
							}
							var this3 = i3;
							var g = this3;
							var i4 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
							if(i4 > 255) {
								i4 = 255;
							}
							if(i4 < 0) {
								i4 = 0;
							}
							var this4 = i4;
							var b = this4;
							var location = temp.useVirtualPos ? (py - temp.virtualY) * temp.width + px - temp.virtualX | 0 : py * temp.width + px | 0;
							if(temp.transparent && a < 254) {
								var this5 = temp.image[location];
								var this6 = this5;
								var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
								var rhs = a << 24 | r << 16 | g << 8 | b;
								var this7 = old >> 24 & 255;
								var a1 = this7 == 0 ? 0. : this7 / 255;
								var this8 = old >> 16 & 255;
								var r1 = this8 == 0 ? 0. : this8 / 255;
								var this9 = old >> 8 & 255;
								var g1 = this9 == 0 ? 0. : this9 / 255;
								var this10 = old & 255;
								var b1 = this10 == 0 ? 0. : this10 / 255;
								var this11 = rhs >> 24 & 255;
								var a2 = this11 == 0 ? 0. : this11 / 255;
								var this12 = rhs >> 16 & 255;
								var r2 = this12 == 0 ? 0. : this12 / 255;
								var this13 = rhs >> 8 & 255;
								var g2 = this13 == 0 ? 0. : this13 / 255;
								var this14 = rhs & 255;
								var b2 = this14 == 0 ? 0. : this14 / 255;
								var a3 = a1 * (1 - a2);
								var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
								var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
								var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
								var a4 = 255 * (a3 + a2) | 0;
								var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
								temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
							} else {
								temp.image[location] = temp.isLittle ? a << 24 | b << 16 | g << 8 | r : a << 24 | r << 16 | g << 8 | b;
							}
						}
					}
				}
				lastX = nextX;
				lastY = nextY;
			}
		}
		var x = 150;
		var y = 150;
		var _g = 0;
		var _g1 = temp.height;
		while(_g < _g1) {
			var dy = _g++;
			var _g2 = 0;
			var _g3 = temp.width;
			while(_g2 < _g3) {
				var dx = _g2++;
				var c = temp.image[temp.useVirtualPos ? (dy - temp.virtualY) * temp.width + dx - temp.virtualX | 0 : dy * temp.width + dx | 0];
				var col = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
				if(temp.useMask && temp.mask != null) {
					var this1 = temp.mask;
					var c1 = this1.image[this1.useVirtualPos ? (dy - this1.virtualY) * this1.width + dx - this1.virtualX | 0 : dy * this1.width + dx | 0];
					var this2 = pixelimage_Endian_isLittleEndian ? (c1 >> 24 & 255) << 24 | (c1 & 255) << 16 | (c1 >> 8 & 255) << 8 | c1 >> 16 & 255 : c1;
					var maskPixel = this2;
					var this3 = col;
					var this4 = this3;
					if(maskPixel == 0) {
						var this5 = this4;
						col = this5;
					} else {
						var this6 = maskPixel >> 24 & 255;
						var m0 = this6 == 0 ? 0. : this6 / 255;
						var this7 = maskPixel >> 16 & 255;
						var m1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = maskPixel >> 8 & 255;
						var m2 = this8 == 0 ? 0. : this8 / 255;
						var this9 = maskPixel & 255;
						var m3 = this9 == 0 ? 0. : this9 / 255;
						var ch0 = (1. - m0) * (this4 >> 24 & 255) | 0;
						var ch1 = (1. - m1) * (this4 >> 16 & 255) | 0;
						var ch2 = (1. - m2) * (this4 >> 8 & 255) | 0;
						var ch3 = (1. - m3) * (this4 & 255) | 0;
						col = Math.round(ch0 * 255) << 24 | Math.round(ch1 * 255) << 16 | Math.round(ch2 * 255) << 8 | Math.round(ch3 * 255);
					}
				}
				if(col != 0) {
					var x1 = x + dx;
					var y1 = y + dy;
					var this10 = col;
					var c2 = this10;
					if((c2 >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y1 - p.virtualY) * p.width + x1 - p.virtualX | 0 : y1 * p.width + x1 | 0;
						var this11 = p.image[location];
						var this12 = this11;
						var this13 = pixelimage_Endian_isLittleEndian ? (this12 >> 24 & 255) << 24 | (this12 & 255) << 16 | (this12 >> 8 & 255) << 8 | this12 >> 16 & 255 : this12;
						var this14 = this13 >> 24 & 255;
						var a1 = this14 == 0 ? 0. : this14 / 255;
						var this15 = this13 >> 16 & 255;
						var r1 = this15 == 0 ? 0. : this15 / 255;
						var this16 = this13 >> 8 & 255;
						var g1 = this16 == 0 ? 0. : this16 / 255;
						var this17 = this13 & 255;
						var b1 = this17 == 0 ? 0. : this17 / 255;
						var this18 = col >> 24 & 255;
						var a2 = this18 == 0 ? 0. : this18 / 255;
						var this19 = col >> 16 & 255;
						var r2 = this19 == 0 ? 0. : this19 / 255;
						var this20 = col >> 8 & 255;
						var g2 = this20 == 0 ? 0. : this20 / 255;
						var this21 = col & 255;
						var b2 = this21 == 0 ? 0. : this21 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y1 - p.virtualY) * p.width + x1 - p.virtualX | 0 : y1 * p.width + x1 | 0] = pixelimage_Endian_isLittleEndian ? (c2 >> 24 & 255) << 24 | (c2 & 255) << 16 | (c2 >> 8 & 255) << 8 | c2 >> 16 & 255 : c2;
					}
				}
			}
		}
		temp = null;
		var gx = -0.75;
		var gy = -0.75;
		var phi = Math.PI / 6;
		if(phi == null) {
			phi = 0;
		}
		if(gy == null) {
			gy = 0.;
		}
		if(gx == null) {
			gx = 0.;
		}
		var rSmall = 200;
		var rLarge = 290;
		var rDif = rLarge - rSmall;
		var targetE = 1.05;
		if(targetE == null) {
			targetE = 1.05;
		}
		var result = Math.ceil(Math.PI / Math.acos(1 - targetE / rSmall));
		var noSides = result < 12 ? 12 : result > 500 ? 500 : result;
		var temp;
		if(phi == 0) {
			var w = 580 | 0;
			var h = 400 | 0;
			var this1 = new Uint32Array(w * h | 0);
			var this2 = new pixelimage_ImageStruct(w,h,this1);
			temp = this2;
		} else {
			var w = 2 * rLarge + rDif | 0;
			var h = 2 * rLarge + rDif | 0;
			var this1 = new Uint32Array(w * h | 0);
			var this2 = new pixelimage_ImageStruct(w,h,this1);
			temp = this2;
		}
		temp.transparent = false;
		if(phi == 0) {
			var gx1 = gx;
			var gy1 = gy;
			var phi1 = phi;
			var sides = noSides;
			if(sides == null) {
				sides = 36;
			}
			if(phi1 == null) {
				phi1 = 0.;
			}
			if(gy1 == null) {
				gy1 = 0;
			}
			if(gx1 == null) {
				gx1 = 0;
			}
			if(gx1 < -1.) {
				gx1 = -1;
			}
			if(gx1 > 1.) {
				gx1 = 1;
			}
			if(gy1 < -1.) {
				gy1 = -1.;
			}
			if(gy1 > 1.) {
				gy1 = 1;
			}
			var mx = 290 + gx1 * 290;
			var my = 200 + gy1 * 200;
			var theta = 2 * Math.PI / sides;
			var omega = 0.;
			var lastX = 0.;
			var lastY = 0.;
			if(phi1 != 0) {
				lastX = 290 * Math.cos(sides * theta + omega) * Math.cos(phi1) - 200 * Math.sin(sides * theta + omega) * Math.sin(phi1) + 290;
				lastY = 290 * Math.cos(sides * theta + omega) * Math.sin(phi1) + 200 * Math.sin(sides * theta + omega) * Math.cos(phi1) + 200;
			} else {
				lastX = 290 + 290 * Math.cos(sides * theta + omega);
				lastY = 200 + 200 * Math.sin(sides * theta + omega);
			}
			if(phi1 != 0) {
				var cphi = Math.cos(phi1);
				var sphi = Math.sin(phi1);
				var _g = 0;
				var _g1 = sides + 1;
				while(_g < _g1) {
					var i = _g++;
					var stheta = Math.sin(i * theta + omega);
					var ctheta = Math.cos(i * theta + omega);
					var nextX = 290 * ctheta * cphi - 200 * stheta * sphi + 290;
					var nextY = 290 * ctheta * sphi + 200 * stheta * cphi + 200;
					var aA = 255;
					var rA = 58;
					var gA = 32;
					var bA = 175;
					var aB = 255;
					var rB = 225;
					var gB = 0;
					var bB = 255;
					var aC = 255;
					var rC = 58;
					var gC = 32;
					var bC = 175;
					var bcx = lastX - nextX;
					var bcy = lastY - nextY;
					var acx = mx - nextX;
					var acy = my - nextY;
					var dot11 = bcx * bcx + bcy * bcy;
					var dot12 = bcx * acx + bcy * acy;
					var dot22 = acx * acx + acy * acy;
					var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
					var _g2 = nextX > lastX ? nextX > mx ? new IntIterator(lastX > mx ? Math.floor(mx) : Math.floor(lastX),Math.ceil(nextX)) : new IntIterator(Math.floor(lastX),Math.ceil(mx)) : lastX > mx ? new IntIterator(nextX > mx ? Math.floor(mx) : Math.ceil(nextX),Math.ceil(lastX)) : new IntIterator(Math.floor(nextX),Math.ceil(mx));
					while(_g2.min < _g2.max) {
						var px = _g2.min++;
						var pcx = px - nextX;
						var _g3 = nextY > lastY ? nextY > my ? new IntIterator(lastY > my ? Math.floor(my) : Math.floor(lastY),Math.ceil(nextY)) : new IntIterator(Math.floor(lastY),Math.ceil(my)) : lastY > my ? new IntIterator(nextY > my ? Math.floor(my) : Math.ceil(nextY),Math.ceil(lastY)) : new IntIterator(Math.floor(nextY),Math.ceil(my));
						while(_g3.min < _g3.max) {
							var py = _g3.min++;
							var pcy = py - nextY;
							var dot31 = pcx * bcx + pcy * bcy;
							var dot32 = pcx * acx + pcy * acy;
							var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
							var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
							var ratioC = 1.0 - ratioB - ratioA;
							if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
								var i1 = aA * ratioA + aB * ratioB + aC * ratioC | 0;
								if(i1 > 255) {
									i1 = 255;
								}
								if(i1 < 0) {
									i1 = 0;
								}
								var this1 = i1;
								var a = this1;
								var i2 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
								if(i2 > 255) {
									i2 = 255;
								}
								if(i2 < 0) {
									i2 = 0;
								}
								var this2 = i2;
								var r = this2;
								var i3 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
								if(i3 > 255) {
									i3 = 255;
								}
								if(i3 < 0) {
									i3 = 0;
								}
								var this3 = i3;
								var g = this3;
								var i4 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
								if(i4 > 255) {
									i4 = 255;
								}
								if(i4 < 0) {
									i4 = 0;
								}
								var this4 = i4;
								var b = this4;
								var location = temp.useVirtualPos ? (py - temp.virtualY) * temp.width + px - temp.virtualX | 0 : py * temp.width + px | 0;
								if(temp.transparent && a < 254) {
									var this5 = temp.image[location];
									var this6 = this5;
									var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
									var rhs = a << 24 | r << 16 | g << 8 | b;
									var this7 = old >> 24 & 255;
									var a1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = old >> 16 & 255;
									var r1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = old >> 8 & 255;
									var g1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = old & 255;
									var b1 = this10 == 0 ? 0. : this10 / 255;
									var this11 = rhs >> 24 & 255;
									var a2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = rhs >> 16 & 255;
									var r2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = rhs >> 8 & 255;
									var g2 = this13 == 0 ? 0. : this13 / 255;
									var this14 = rhs & 255;
									var b2 = this14 == 0 ? 0. : this14 / 255;
									var a3 = a1 * (1 - a2);
									var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
									var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
									var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
									var a4 = 255 * (a3 + a2) | 0;
									var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[location] = temp.isLittle ? a << 24 | b << 16 | g << 8 | r : a << 24 | r << 16 | g << 8 | b;
								}
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			} else {
				var _g = 0;
				var _g1 = sides + 1;
				while(_g < _g1) {
					var i = _g++;
					var nextX = 290 + 290 * Math.cos(i * theta + omega);
					var nextY = 200 + 200 * Math.sin(i * theta + omega);
					var aA = 255;
					var rA = 58;
					var gA = 32;
					var bA = 175;
					var aB = 255;
					var rB = 225;
					var gB = 0;
					var bB = 255;
					var aC = 255;
					var rC = 58;
					var gC = 32;
					var bC = 175;
					var bcx = lastX - nextX;
					var bcy = lastY - nextY;
					var acx = mx - nextX;
					var acy = my - nextY;
					var dot11 = bcx * bcx + bcy * bcy;
					var dot12 = bcx * acx + bcy * acy;
					var dot22 = acx * acx + acy * acy;
					var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
					var _g2 = nextX > lastX ? nextX > mx ? new IntIterator(lastX > mx ? Math.floor(mx) : Math.floor(lastX),Math.ceil(nextX)) : new IntIterator(Math.floor(lastX),Math.ceil(mx)) : lastX > mx ? new IntIterator(nextX > mx ? Math.floor(mx) : Math.ceil(nextX),Math.ceil(lastX)) : new IntIterator(Math.floor(nextX),Math.ceil(mx));
					while(_g2.min < _g2.max) {
						var px = _g2.min++;
						var pcx = px - nextX;
						var _g3 = nextY > lastY ? nextY > my ? new IntIterator(lastY > my ? Math.floor(my) : Math.floor(lastY),Math.ceil(nextY)) : new IntIterator(Math.floor(lastY),Math.ceil(my)) : lastY > my ? new IntIterator(nextY > my ? Math.floor(my) : Math.ceil(nextY),Math.ceil(lastY)) : new IntIterator(Math.floor(nextY),Math.ceil(my));
						while(_g3.min < _g3.max) {
							var py = _g3.min++;
							var pcy = py - nextY;
							var dot31 = pcx * bcx + pcy * bcy;
							var dot32 = pcx * acx + pcy * acy;
							var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
							var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
							var ratioC = 1.0 - ratioB - ratioA;
							if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
								var i1 = aA * ratioA + aB * ratioB + aC * ratioC | 0;
								if(i1 > 255) {
									i1 = 255;
								}
								if(i1 < 0) {
									i1 = 0;
								}
								var this1 = i1;
								var a = this1;
								var i2 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
								if(i2 > 255) {
									i2 = 255;
								}
								if(i2 < 0) {
									i2 = 0;
								}
								var this2 = i2;
								var r = this2;
								var i3 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
								if(i3 > 255) {
									i3 = 255;
								}
								if(i3 < 0) {
									i3 = 0;
								}
								var this3 = i3;
								var g = this3;
								var i4 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
								if(i4 > 255) {
									i4 = 255;
								}
								if(i4 < 0) {
									i4 = 0;
								}
								var this4 = i4;
								var b = this4;
								var location = temp.useVirtualPos ? (py - temp.virtualY) * temp.width + px - temp.virtualX | 0 : py * temp.width + px | 0;
								if(temp.transparent && a < 254) {
									var this5 = temp.image[location];
									var this6 = this5;
									var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
									var rhs = a << 24 | r << 16 | g << 8 | b;
									var this7 = old >> 24 & 255;
									var a1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = old >> 16 & 255;
									var r1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = old >> 8 & 255;
									var g1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = old & 255;
									var b1 = this10 == 0 ? 0. : this10 / 255;
									var this11 = rhs >> 24 & 255;
									var a2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = rhs >> 16 & 255;
									var r2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = rhs >> 8 & 255;
									var g2 = this13 == 0 ? 0. : this13 / 255;
									var this14 = rhs & 255;
									var b2 = this14 == 0 ? 0. : this14 / 255;
									var a3 = a1 * (1 - a2);
									var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
									var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
									var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
									var a4 = 255 * (a3 + a2) | 0;
									var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[location] = temp.isLittle ? a << 24 | b << 16 | g << 8 | r : a << 24 | r << 16 | g << 8 | b;
								}
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			}
		} else {
			var cx = 290 + rDif;
			var cy = 200 + rDif;
			var gx1 = gx;
			var gy1 = gy;
			var phi1 = phi;
			var sides = noSides;
			if(sides == null) {
				sides = 36;
			}
			if(phi1 == null) {
				phi1 = 0.;
			}
			if(gy1 == null) {
				gy1 = 0;
			}
			if(gx1 == null) {
				gx1 = 0;
			}
			if(gx1 < -1.) {
				gx1 = -1;
			}
			if(gx1 > 1.) {
				gx1 = 1;
			}
			if(gy1 < -1.) {
				gy1 = -1.;
			}
			if(gy1 > 1.) {
				gy1 = 1;
			}
			var mx = cx + gx1 * 290;
			var my = cy + gy1 * 200;
			var theta = 2 * Math.PI / sides;
			var omega = 0.;
			var lastX = 0.;
			var lastY = 0.;
			if(phi1 != 0) {
				lastX = 290 * Math.cos(sides * theta + omega) * Math.cos(phi1) - 200 * Math.sin(sides * theta + omega) * Math.sin(phi1) + cx;
				lastY = 290 * Math.cos(sides * theta + omega) * Math.sin(phi1) + 200 * Math.sin(sides * theta + omega) * Math.cos(phi1) + cy;
			} else {
				lastX = cx + 290 * Math.cos(sides * theta + omega);
				lastY = cy + 200 * Math.sin(sides * theta + omega);
			}
			if(phi1 != 0) {
				var cphi = Math.cos(phi1);
				var sphi = Math.sin(phi1);
				var _g = 0;
				var _g1 = sides + 1;
				while(_g < _g1) {
					var i = _g++;
					var stheta = Math.sin(i * theta + omega);
					var ctheta = Math.cos(i * theta + omega);
					var nextX = 290 * ctheta * cphi - 200 * stheta * sphi + cx;
					var nextY = 290 * ctheta * sphi + 200 * stheta * cphi + cy;
					var aA = 255;
					var rA = 58;
					var gA = 32;
					var bA = 175;
					var aB = 255;
					var rB = 225;
					var gB = 0;
					var bB = 255;
					var aC = 255;
					var rC = 58;
					var gC = 32;
					var bC = 175;
					var bcx = lastX - nextX;
					var bcy = lastY - nextY;
					var acx = mx - nextX;
					var acy = my - nextY;
					var dot11 = bcx * bcx + bcy * bcy;
					var dot12 = bcx * acx + bcy * acy;
					var dot22 = acx * acx + acy * acy;
					var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
					var _g2 = nextX > lastX ? nextX > mx ? new IntIterator(lastX > mx ? Math.floor(mx) : Math.floor(lastX),Math.ceil(nextX)) : new IntIterator(Math.floor(lastX),Math.ceil(mx)) : lastX > mx ? new IntIterator(nextX > mx ? Math.floor(mx) : Math.ceil(nextX),Math.ceil(lastX)) : new IntIterator(Math.floor(nextX),Math.ceil(mx));
					while(_g2.min < _g2.max) {
						var px = _g2.min++;
						var pcx = px - nextX;
						var _g3 = nextY > lastY ? nextY > my ? new IntIterator(lastY > my ? Math.floor(my) : Math.floor(lastY),Math.ceil(nextY)) : new IntIterator(Math.floor(lastY),Math.ceil(my)) : lastY > my ? new IntIterator(nextY > my ? Math.floor(my) : Math.ceil(nextY),Math.ceil(lastY)) : new IntIterator(Math.floor(nextY),Math.ceil(my));
						while(_g3.min < _g3.max) {
							var py = _g3.min++;
							var pcy = py - nextY;
							var dot31 = pcx * bcx + pcy * bcy;
							var dot32 = pcx * acx + pcy * acy;
							var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
							var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
							var ratioC = 1.0 - ratioB - ratioA;
							if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
								var i1 = aA * ratioA + aB * ratioB + aC * ratioC | 0;
								if(i1 > 255) {
									i1 = 255;
								}
								if(i1 < 0) {
									i1 = 0;
								}
								var this1 = i1;
								var a = this1;
								var i2 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
								if(i2 > 255) {
									i2 = 255;
								}
								if(i2 < 0) {
									i2 = 0;
								}
								var this2 = i2;
								var r = this2;
								var i3 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
								if(i3 > 255) {
									i3 = 255;
								}
								if(i3 < 0) {
									i3 = 0;
								}
								var this3 = i3;
								var g = this3;
								var i4 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
								if(i4 > 255) {
									i4 = 255;
								}
								if(i4 < 0) {
									i4 = 0;
								}
								var this4 = i4;
								var b = this4;
								var location = temp.useVirtualPos ? (py - temp.virtualY) * temp.width + px - temp.virtualX | 0 : py * temp.width + px | 0;
								if(temp.transparent && a < 254) {
									var this5 = temp.image[location];
									var this6 = this5;
									var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
									var rhs = a << 24 | r << 16 | g << 8 | b;
									var this7 = old >> 24 & 255;
									var a1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = old >> 16 & 255;
									var r1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = old >> 8 & 255;
									var g1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = old & 255;
									var b1 = this10 == 0 ? 0. : this10 / 255;
									var this11 = rhs >> 24 & 255;
									var a2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = rhs >> 16 & 255;
									var r2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = rhs >> 8 & 255;
									var g2 = this13 == 0 ? 0. : this13 / 255;
									var this14 = rhs & 255;
									var b2 = this14 == 0 ? 0. : this14 / 255;
									var a3 = a1 * (1 - a2);
									var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
									var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
									var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
									var a4 = 255 * (a3 + a2) | 0;
									var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[location] = temp.isLittle ? a << 24 | b << 16 | g << 8 | r : a << 24 | r << 16 | g << 8 | b;
								}
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			} else {
				var _g = 0;
				var _g1 = sides + 1;
				while(_g < _g1) {
					var i = _g++;
					var nextX = cx + 290 * Math.cos(i * theta + omega);
					var nextY = cy + 200 * Math.sin(i * theta + omega);
					var aA = 255;
					var rA = 58;
					var gA = 32;
					var bA = 175;
					var aB = 255;
					var rB = 225;
					var gB = 0;
					var bB = 255;
					var aC = 255;
					var rC = 58;
					var gC = 32;
					var bC = 175;
					var bcx = lastX - nextX;
					var bcy = lastY - nextY;
					var acx = mx - nextX;
					var acy = my - nextY;
					var dot11 = bcx * bcx + bcy * bcy;
					var dot12 = bcx * acx + bcy * acy;
					var dot22 = acx * acx + acy * acy;
					var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
					var _g2 = nextX > lastX ? nextX > mx ? new IntIterator(lastX > mx ? Math.floor(mx) : Math.floor(lastX),Math.ceil(nextX)) : new IntIterator(Math.floor(lastX),Math.ceil(mx)) : lastX > mx ? new IntIterator(nextX > mx ? Math.floor(mx) : Math.ceil(nextX),Math.ceil(lastX)) : new IntIterator(Math.floor(nextX),Math.ceil(mx));
					while(_g2.min < _g2.max) {
						var px = _g2.min++;
						var pcx = px - nextX;
						var _g3 = nextY > lastY ? nextY > my ? new IntIterator(lastY > my ? Math.floor(my) : Math.floor(lastY),Math.ceil(nextY)) : new IntIterator(Math.floor(lastY),Math.ceil(my)) : lastY > my ? new IntIterator(nextY > my ? Math.floor(my) : Math.ceil(nextY),Math.ceil(lastY)) : new IntIterator(Math.floor(nextY),Math.ceil(my));
						while(_g3.min < _g3.max) {
							var py = _g3.min++;
							var pcy = py - nextY;
							var dot31 = pcx * bcx + pcy * bcy;
							var dot32 = pcx * acx + pcy * acy;
							var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
							var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
							var ratioC = 1.0 - ratioB - ratioA;
							if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
								var i1 = aA * ratioA + aB * ratioB + aC * ratioC | 0;
								if(i1 > 255) {
									i1 = 255;
								}
								if(i1 < 0) {
									i1 = 0;
								}
								var this1 = i1;
								var a = this1;
								var i2 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
								if(i2 > 255) {
									i2 = 255;
								}
								if(i2 < 0) {
									i2 = 0;
								}
								var this2 = i2;
								var r = this2;
								var i3 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
								if(i3 > 255) {
									i3 = 255;
								}
								if(i3 < 0) {
									i3 = 0;
								}
								var this3 = i3;
								var g = this3;
								var i4 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
								if(i4 > 255) {
									i4 = 255;
								}
								if(i4 < 0) {
									i4 = 0;
								}
								var this4 = i4;
								var b = this4;
								var location = temp.useVirtualPos ? (py - temp.virtualY) * temp.width + px - temp.virtualX | 0 : py * temp.width + px | 0;
								if(temp.transparent && a < 254) {
									var this5 = temp.image[location];
									var this6 = this5;
									var old = pixelimage_Endian_isLittleEndian ? (this6 >> 24 & 255) << 24 | (this6 & 255) << 16 | (this6 >> 8 & 255) << 8 | this6 >> 16 & 255 : this6;
									var rhs = a << 24 | r << 16 | g << 8 | b;
									var this7 = old >> 24 & 255;
									var a1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = old >> 16 & 255;
									var r1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = old >> 8 & 255;
									var g1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = old & 255;
									var b1 = this10 == 0 ? 0. : this10 / 255;
									var this11 = rhs >> 24 & 255;
									var a2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = rhs >> 16 & 255;
									var r2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = rhs >> 8 & 255;
									var g2 = this13 == 0 ? 0. : this13 / 255;
									var this14 = rhs & 255;
									var b2 = this14 == 0 ? 0. : this14 / 255;
									var a3 = a1 * (1 - a2);
									var r3 = 255 * (r1 * a3 + r2 * a2) | 0;
									var g3 = 255 * (g1 * a3 + g2 * a2) | 0;
									var b3 = 255 * (b1 * a3 + b2 * a2) | 0;
									var a4 = 255 * (a3 + a2) | 0;
									var blended = a4 << 24 | r3 << 16 | g3 << 8 | b3;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[location] = temp.isLittle ? a << 24 | b << 16 | g << 8 | r : a << 24 | r << 16 | g << 8 | b;
								}
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			}
		}
		var rx2 = 190;
		var ry2 = 100;
		rSmall = 200;
		if(phi == 0) {
			var phi1 = phi;
			var sides = noSides;
			if(sides == null) {
				sides = 36;
			}
			if(phi1 == null) {
				phi1 = 0.;
			}
			var phi2 = phi1;
			var sides1 = sides;
			var cornerUp = true;
			if(cornerUp == null) {
				cornerUp = true;
			}
			if(sides1 == null) {
				sides1 = 36;
			}
			if(phi2 == null) {
				phi2 = 0.;
			}
			var theta = 2 * Math.PI / sides1;
			var omega;
			if(cornerUp) {
				omega = 0.;
			} else if((sides1 / 2 | 0) == sides1 / 2) {
				omega = Math.PI / sides1;
			} else {
				var v = sides1 / 2 - 0.5;
				omega = (v / 2 | 0) == v / 2 ? 0.5 * Math.PI / sides1 - Math.PI : 0.5 * Math.PI / sides1;
			}
			var lastX = 0.;
			var lastY = 0.;
			if(phi2 != 0) {
				lastX = rx2 * Math.cos(sides1 * theta + omega) * Math.cos(phi2) - ry2 * Math.sin(sides1 * theta + omega) * Math.sin(phi2) + 290;
				lastY = rx2 * Math.cos(sides1 * theta + omega) * Math.sin(phi2) + ry2 * Math.sin(sides1 * theta + omega) * Math.cos(phi2) + 200;
			} else {
				lastX = 290 + rx2 * Math.cos(sides1 * theta + omega);
				lastY = 200 + ry2 * Math.sin(sides1 * theta + omega);
			}
			if(phi2 != 0) {
				var cphi = Math.cos(phi2);
				var sphi = Math.sin(phi2);
				var _g = 0;
				var _g1 = sides1 + 1;
				while(_g < _g1) {
					var i = _g++;
					var stheta = Math.sin(i * theta + omega);
					var ctheta = Math.cos(i * theta + omega);
					var nextX = rx2 * ctheta * cphi - ry2 * stheta * sphi + 290;
					var nextY = rx2 * ctheta * sphi + ry2 * stheta * cphi + 200;
					var bx = lastX;
					var by = lastY;
					var cx = nextX;
					var cy = nextY;
					var adjustWinding = 290 * by - bx * 200 + (bx * cy - cx * by) + (cx * 200 - 290 * cy) > 0;
					if(!adjustWinding) {
						var bx_ = bx;
						var by_ = by;
						bx = cx;
						by = cy;
						cx = bx_;
						cy = by_;
					}
					var s0 = 200 * cx - 290 * cy;
					var sx = cy - 200;
					var sy = 290 - cx;
					var t0 = 290 * by - 200 * bx;
					var tx = 200 - by;
					var ty = bx - 290;
					var A = -by * cx + 200 * (-bx + cx) + 290 * (by - cy) + bx * cy;
					var ii = 200 > by ? 200 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(200)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(200 > cy ? Math.floor(cy) : Math.ceil(200),Math.ceil(by)) : new IntIterator(Math.floor(200),Math.ceil(cy));
					var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
					var yIter3 = this1;
					var foundY = false;
					var s = 0.;
					var t = 0.;
					var sxx = 0.;
					var txx = 0.;
					var _g2 = 290 > bx ? 290 > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(290)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(290 > cx ? Math.floor(cx) : Math.ceil(290),Math.ceil(bx)) : new IntIterator(Math.floor(290),Math.ceil(cx));
					while(_g2.min < _g2.max) {
						var x = _g2.min++;
						sxx = sx * x;
						txx = tx * x;
						foundY = false;
						var _g_min = yIter3.start;
						var _g_max = yIter3.max;
						while(_g_min < _g_max) {
							var y = _g_min++;
							s = s0 + sxx + sy * y;
							t = t0 + txx + ty * y;
							if(s <= 0 || t <= 0) {
								if(foundY) {
									break;
								}
							} else if(s + t < A) {
								var this2 = 0;
								var c = this2;
								if((c >> 24 & 255) < 254 && temp.transparent) {
									var location = temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0;
									var this3 = temp.image[location];
									var this4 = this3;
									var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
									var this6 = this5 >> 24 & 255;
									var a1 = this6 == 0 ? 0. : this6 / 255;
									var this7 = this5 >> 16 & 255;
									var r1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = this5 >> 8 & 255;
									var g1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = this5 & 255;
									var b1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = 0;
									var a2 = this10 == 0 ? 0. : this10 / 255;
									var this11 = 0;
									var r2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = 0;
									var g2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = 0;
									var b2 = this13 == 0 ? 0. : this13 / 255;
									var a3 = a1 * (1 - a2);
									var r = 255 * (r1 * a3 + r2 * a2) | 0;
									var g = 255 * (g1 * a3 + g2 * a2) | 0;
									var b = 255 * (b1 * a3 + b2 * a2) | 0;
									var a = 255 * (a3 + a2) | 0;
									var blended = a << 24 | r << 16 | g << 8 | b;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
								}
								foundY = true;
							} else if(foundY) {
								break;
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			} else {
				var _g = 0;
				var _g1 = sides1 + 1;
				while(_g < _g1) {
					var i = _g++;
					var nextX = 290 + rx2 * Math.cos(i * theta + omega);
					var nextY = 200 + ry2 * Math.sin(i * theta + omega);
					var bx = lastX;
					var by = lastY;
					var cx = nextX;
					var cy = nextY;
					var adjustWinding = 290 * by - bx * 200 + (bx * cy - cx * by) + (cx * 200 - 290 * cy) > 0;
					if(!adjustWinding) {
						var bx_ = bx;
						var by_ = by;
						bx = cx;
						by = cy;
						cx = bx_;
						cy = by_;
					}
					var s0 = 200 * cx - 290 * cy;
					var sx = cy - 200;
					var sy = 290 - cx;
					var t0 = 290 * by - 200 * bx;
					var tx = 200 - by;
					var ty = bx - 290;
					var A = -by * cx + 200 * (-bx + cx) + 290 * (by - cy) + bx * cy;
					var ii = 200 > by ? 200 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(200)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(200 > cy ? Math.floor(cy) : Math.ceil(200),Math.ceil(by)) : new IntIterator(Math.floor(200),Math.ceil(cy));
					var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
					var yIter3 = this1;
					var foundY = false;
					var s = 0.;
					var t = 0.;
					var sxx = 0.;
					var txx = 0.;
					var _g2 = 290 > bx ? 290 > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(290)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(290 > cx ? Math.floor(cx) : Math.ceil(290),Math.ceil(bx)) : new IntIterator(Math.floor(290),Math.ceil(cx));
					while(_g2.min < _g2.max) {
						var x = _g2.min++;
						sxx = sx * x;
						txx = tx * x;
						foundY = false;
						var _g_min = yIter3.start;
						var _g_max = yIter3.max;
						while(_g_min < _g_max) {
							var y = _g_min++;
							s = s0 + sxx + sy * y;
							t = t0 + txx + ty * y;
							if(s <= 0 || t <= 0) {
								if(foundY) {
									break;
								}
							} else if(s + t < A) {
								var this2 = 0;
								var c = this2;
								if((c >> 24 & 255) < 254 && temp.transparent) {
									var location = temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0;
									var this3 = temp.image[location];
									var this4 = this3;
									var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
									var this6 = this5 >> 24 & 255;
									var a1 = this6 == 0 ? 0. : this6 / 255;
									var this7 = this5 >> 16 & 255;
									var r1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = this5 >> 8 & 255;
									var g1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = this5 & 255;
									var b1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = 0;
									var a2 = this10 == 0 ? 0. : this10 / 255;
									var this11 = 0;
									var r2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = 0;
									var g2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = 0;
									var b2 = this13 == 0 ? 0. : this13 / 255;
									var a3 = a1 * (1 - a2);
									var r = 255 * (r1 * a3 + r2 * a2) | 0;
									var g = 255 * (g1 * a3 + g2 * a2) | 0;
									var b = 255 * (b1 * a3 + b2 * a2) | 0;
									var a = 255 * (a3 + a2) | 0;
									var blended = a << 24 | r << 16 | g << 8 | b;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
								}
								foundY = true;
							} else if(foundY) {
								break;
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			}
			var x = 310 | 0;
			var y = 450 | 0;
			var _g = 0;
			var _g1 = temp.height;
			while(_g < _g1) {
				var dy = _g++;
				var _g2 = 0;
				var _g3 = temp.width;
				while(_g2 < _g3) {
					var dx = _g2++;
					var c = temp.image[temp.useVirtualPos ? (dy - temp.virtualY) * temp.width + dx - temp.virtualX | 0 : dy * temp.width + dx | 0];
					var col = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					if(temp.useMask && temp.mask != null) {
						var this1 = temp.mask;
						var c1 = this1.image[this1.useVirtualPos ? (dy - this1.virtualY) * this1.width + dx - this1.virtualX | 0 : dy * this1.width + dx | 0];
						var this2 = pixelimage_Endian_isLittleEndian ? (c1 >> 24 & 255) << 24 | (c1 & 255) << 16 | (c1 >> 8 & 255) << 8 | c1 >> 16 & 255 : c1;
						var maskPixel = this2;
						var this3 = col;
						var this4 = this3;
						if(maskPixel == 0) {
							var this5 = this4;
							col = this5;
						} else {
							var this6 = maskPixel >> 24 & 255;
							var m0 = this6 == 0 ? 0. : this6 / 255;
							var this7 = maskPixel >> 16 & 255;
							var m1 = this7 == 0 ? 0. : this7 / 255;
							var this8 = maskPixel >> 8 & 255;
							var m2 = this8 == 0 ? 0. : this8 / 255;
							var this9 = maskPixel & 255;
							var m3 = this9 == 0 ? 0. : this9 / 255;
							var ch0 = (1. - m0) * (this4 >> 24 & 255) | 0;
							var ch1 = (1. - m1) * (this4 >> 16 & 255) | 0;
							var ch2 = (1. - m2) * (this4 >> 8 & 255) | 0;
							var ch3 = (1. - m3) * (this4 & 255) | 0;
							col = Math.round(ch0 * 255) << 24 | Math.round(ch1 * 255) << 16 | Math.round(ch2 * 255) << 8 | Math.round(ch3 * 255);
						}
					}
					if(col != 0) {
						var x1 = x + dx;
						var y1 = y + dy;
						var this10 = col;
						var c2 = this10;
						if((c2 >> 24 & 255) < 254 && p.transparent) {
							var location = p.useVirtualPos ? (y1 - p.virtualY) * p.width + x1 - p.virtualX | 0 : y1 * p.width + x1 | 0;
							var this11 = p.image[location];
							var this12 = this11;
							var this13 = pixelimage_Endian_isLittleEndian ? (this12 >> 24 & 255) << 24 | (this12 & 255) << 16 | (this12 >> 8 & 255) << 8 | this12 >> 16 & 255 : this12;
							var this14 = this13 >> 24 & 255;
							var a1 = this14 == 0 ? 0. : this14 / 255;
							var this15 = this13 >> 16 & 255;
							var r1 = this15 == 0 ? 0. : this15 / 255;
							var this16 = this13 >> 8 & 255;
							var g1 = this16 == 0 ? 0. : this16 / 255;
							var this17 = this13 & 255;
							var b1 = this17 == 0 ? 0. : this17 / 255;
							var this18 = col >> 24 & 255;
							var a2 = this18 == 0 ? 0. : this18 / 255;
							var this19 = col >> 16 & 255;
							var r2 = this19 == 0 ? 0. : this19 / 255;
							var this20 = col >> 8 & 255;
							var g2 = this20 == 0 ? 0. : this20 / 255;
							var this21 = col & 255;
							var b2 = this21 == 0 ? 0. : this21 / 255;
							var a3 = a1 * (1 - a2);
							var r = 255 * (r1 * a3 + r2 * a2) | 0;
							var g = 255 * (g1 * a3 + g2 * a2) | 0;
							var b = 255 * (b1 * a3 + b2 * a2) | 0;
							var a = 255 * (a3 + a2) | 0;
							var blended = a << 24 | r << 16 | g << 8 | b;
							p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
						} else {
							p.image[p.useVirtualPos ? (y1 - p.virtualY) * p.width + x1 - p.virtualX | 0 : y1 * p.width + x1 | 0] = pixelimage_Endian_isLittleEndian ? (c2 >> 24 & 255) << 24 | (c2 & 255) << 16 | (c2 >> 8 & 255) << 8 | c2 >> 16 & 255 : c2;
						}
					}
				}
			}
		} else {
			var cx = 290 + rDif;
			var cy = 200 + rDif;
			var phi1 = phi;
			var sides = noSides;
			if(sides == null) {
				sides = 36;
			}
			if(phi1 == null) {
				phi1 = 0.;
			}
			var phi = phi1;
			var sides1 = sides;
			var cornerUp = true;
			if(cornerUp == null) {
				cornerUp = true;
			}
			if(sides1 == null) {
				sides1 = 36;
			}
			if(phi == null) {
				phi = 0.;
			}
			var theta = 2 * Math.PI / sides1;
			var omega;
			if(cornerUp) {
				omega = 0.;
			} else if((sides1 / 2 | 0) == sides1 / 2) {
				omega = Math.PI / sides1;
			} else {
				var v = sides1 / 2 - 0.5;
				omega = (v / 2 | 0) == v / 2 ? 0.5 * Math.PI / sides1 - Math.PI : 0.5 * Math.PI / sides1;
			}
			var lastX = 0.;
			var lastY = 0.;
			if(phi != 0) {
				lastX = rx2 * Math.cos(sides1 * theta + omega) * Math.cos(phi) - ry2 * Math.sin(sides1 * theta + omega) * Math.sin(phi) + cx;
				lastY = rx2 * Math.cos(sides1 * theta + omega) * Math.sin(phi) + ry2 * Math.sin(sides1 * theta + omega) * Math.cos(phi) + cy;
			} else {
				lastX = cx + rx2 * Math.cos(sides1 * theta + omega);
				lastY = cy + ry2 * Math.sin(sides1 * theta + omega);
			}
			if(phi != 0) {
				var cphi = Math.cos(phi);
				var sphi = Math.sin(phi);
				var _g = 0;
				var _g1 = sides1 + 1;
				while(_g < _g1) {
					var i = _g++;
					var stheta = Math.sin(i * theta + omega);
					var ctheta = Math.cos(i * theta + omega);
					var nextX = rx2 * ctheta * cphi - ry2 * stheta * sphi + cx;
					var nextY = rx2 * ctheta * sphi + ry2 * stheta * cphi + cy;
					var bx = lastX;
					var by = lastY;
					var cx1 = nextX;
					var cy1 = nextY;
					var adjustWinding = cx * by - bx * cy + (bx * cy1 - cx1 * by) + (cx1 * cy - cx * cy1) > 0;
					if(!adjustWinding) {
						var bx_ = bx;
						var by_ = by;
						bx = cx1;
						by = cy1;
						cx1 = bx_;
						cy1 = by_;
					}
					var s0 = cy * cx1 - cx * cy1;
					var sx = cy1 - cy;
					var sy = cx - cx1;
					var t0 = cx * by - cy * bx;
					var tx = cy - by;
					var ty = bx - cx;
					var A = -by * cx1 + cy * (-bx + cx1) + cx * (by - cy1) + bx * cy1;
					var ii = cy > by ? cy > cy1 ? new IntIterator(by > cy1 ? Math.floor(cy1) : Math.floor(by),Math.ceil(cy)) : new IntIterator(Math.floor(by),Math.ceil(cy1)) : by > cy1 ? new IntIterator(cy > cy1 ? Math.floor(cy1) : Math.ceil(cy),Math.ceil(by)) : new IntIterator(Math.floor(cy),Math.ceil(cy1));
					var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
					var yIter3 = this1;
					var foundY = false;
					var s = 0.;
					var t = 0.;
					var sxx = 0.;
					var txx = 0.;
					var _g2 = cx > bx ? cx > cx1 ? new IntIterator(bx > cx1 ? Math.floor(cx1) : Math.floor(bx),Math.ceil(cx)) : new IntIterator(Math.floor(bx),Math.ceil(cx1)) : bx > cx1 ? new IntIterator(cx > cx1 ? Math.floor(cx1) : Math.ceil(cx),Math.ceil(bx)) : new IntIterator(Math.floor(cx),Math.ceil(cx1));
					while(_g2.min < _g2.max) {
						var x = _g2.min++;
						sxx = sx * x;
						txx = tx * x;
						foundY = false;
						var _g_min = yIter3.start;
						var _g_max = yIter3.max;
						while(_g_min < _g_max) {
							var y = _g_min++;
							s = s0 + sxx + sy * y;
							t = t0 + txx + ty * y;
							if(s <= 0 || t <= 0) {
								if(foundY) {
									break;
								}
							} else if(s + t < A) {
								var this2 = 0;
								var c = this2;
								if((c >> 24 & 255) < 254 && temp.transparent) {
									var location = temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0;
									var this3 = temp.image[location];
									var this4 = this3;
									var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
									var this6 = this5 >> 24 & 255;
									var a1 = this6 == 0 ? 0. : this6 / 255;
									var this7 = this5 >> 16 & 255;
									var r1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = this5 >> 8 & 255;
									var g1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = this5 & 255;
									var b1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = 0;
									var a2 = this10 == 0 ? 0. : this10 / 255;
									var this11 = 0;
									var r2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = 0;
									var g2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = 0;
									var b2 = this13 == 0 ? 0. : this13 / 255;
									var a3 = a1 * (1 - a2);
									var r = 255 * (r1 * a3 + r2 * a2) | 0;
									var g = 255 * (g1 * a3 + g2 * a2) | 0;
									var b = 255 * (b1 * a3 + b2 * a2) | 0;
									var a = 255 * (a3 + a2) | 0;
									var blended = a << 24 | r << 16 | g << 8 | b;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
								}
								foundY = true;
							} else if(foundY) {
								break;
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			} else {
				var _g = 0;
				var _g1 = sides1 + 1;
				while(_g < _g1) {
					var i = _g++;
					var nextX = cx + rx2 * Math.cos(i * theta + omega);
					var nextY = cy + ry2 * Math.sin(i * theta + omega);
					var bx = lastX;
					var by = lastY;
					var cx1 = nextX;
					var cy1 = nextY;
					var adjustWinding = cx * by - bx * cy + (bx * cy1 - cx1 * by) + (cx1 * cy - cx * cy1) > 0;
					if(!adjustWinding) {
						var bx_ = bx;
						var by_ = by;
						bx = cx1;
						by = cy1;
						cx1 = bx_;
						cy1 = by_;
					}
					var s0 = cy * cx1 - cx * cy1;
					var sx = cy1 - cy;
					var sy = cx - cx1;
					var t0 = cx * by - cy * bx;
					var tx = cy - by;
					var ty = bx - cx;
					var A = -by * cx1 + cy * (-bx + cx1) + cx * (by - cy1) + bx * cy1;
					var ii = cy > by ? cy > cy1 ? new IntIterator(by > cy1 ? Math.floor(cy1) : Math.floor(by),Math.ceil(cy)) : new IntIterator(Math.floor(by),Math.ceil(cy1)) : by > cy1 ? new IntIterator(cy > cy1 ? Math.floor(cy1) : Math.ceil(cy),Math.ceil(by)) : new IntIterator(Math.floor(cy),Math.ceil(cy1));
					var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
					var yIter3 = this1;
					var foundY = false;
					var s = 0.;
					var t = 0.;
					var sxx = 0.;
					var txx = 0.;
					var _g2 = cx > bx ? cx > cx1 ? new IntIterator(bx > cx1 ? Math.floor(cx1) : Math.floor(bx),Math.ceil(cx)) : new IntIterator(Math.floor(bx),Math.ceil(cx1)) : bx > cx1 ? new IntIterator(cx > cx1 ? Math.floor(cx1) : Math.ceil(cx),Math.ceil(bx)) : new IntIterator(Math.floor(cx),Math.ceil(cx1));
					while(_g2.min < _g2.max) {
						var x = _g2.min++;
						sxx = sx * x;
						txx = tx * x;
						foundY = false;
						var _g_min = yIter3.start;
						var _g_max = yIter3.max;
						while(_g_min < _g_max) {
							var y = _g_min++;
							s = s0 + sxx + sy * y;
							t = t0 + txx + ty * y;
							if(s <= 0 || t <= 0) {
								if(foundY) {
									break;
								}
							} else if(s + t < A) {
								var this2 = 0;
								var c = this2;
								if((c >> 24 & 255) < 254 && temp.transparent) {
									var location = temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0;
									var this3 = temp.image[location];
									var this4 = this3;
									var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
									var this6 = this5 >> 24 & 255;
									var a1 = this6 == 0 ? 0. : this6 / 255;
									var this7 = this5 >> 16 & 255;
									var r1 = this7 == 0 ? 0. : this7 / 255;
									var this8 = this5 >> 8 & 255;
									var g1 = this8 == 0 ? 0. : this8 / 255;
									var this9 = this5 & 255;
									var b1 = this9 == 0 ? 0. : this9 / 255;
									var this10 = 0;
									var a2 = this10 == 0 ? 0. : this10 / 255;
									var this11 = 0;
									var r2 = this11 == 0 ? 0. : this11 / 255;
									var this12 = 0;
									var g2 = this12 == 0 ? 0. : this12 / 255;
									var this13 = 0;
									var b2 = this13 == 0 ? 0. : this13 / 255;
									var a3 = a1 * (1 - a2);
									var r = 255 * (r1 * a3 + r2 * a2) | 0;
									var g = 255 * (g1 * a3 + g2 * a2) | 0;
									var b = 255 * (b1 * a3 + b2 * a2) | 0;
									var a = 255 * (a3 + a2) | 0;
									var blended = a << 24 | r << 16 | g << 8 | b;
									temp.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
								} else {
									temp.image[temp.useVirtualPos ? (y - temp.virtualY) * temp.width + x - temp.virtualX | 0 : y * temp.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
								}
								foundY = true;
							} else if(foundY) {
								break;
							}
						}
					}
					lastX = nextX;
					lastY = nextY;
				}
			}
			var x = 310 - rDif | 0;
			var y = 450 - rDif | 0;
			var _g = 0;
			var _g1 = temp.height;
			while(_g < _g1) {
				var dy = _g++;
				var _g2 = 0;
				var _g3 = temp.width;
				while(_g2 < _g3) {
					var dx = _g2++;
					var c = temp.image[temp.useVirtualPos ? (dy - temp.virtualY) * temp.width + dx - temp.virtualX | 0 : dy * temp.width + dx | 0];
					var col = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					if(temp.useMask && temp.mask != null) {
						var this1 = temp.mask;
						var c1 = this1.image[this1.useVirtualPos ? (dy - this1.virtualY) * this1.width + dx - this1.virtualX | 0 : dy * this1.width + dx | 0];
						var this2 = pixelimage_Endian_isLittleEndian ? (c1 >> 24 & 255) << 24 | (c1 & 255) << 16 | (c1 >> 8 & 255) << 8 | c1 >> 16 & 255 : c1;
						var maskPixel = this2;
						var this3 = col;
						var this4 = this3;
						if(maskPixel == 0) {
							var this5 = this4;
							col = this5;
						} else {
							var this6 = maskPixel >> 24 & 255;
							var m0 = this6 == 0 ? 0. : this6 / 255;
							var this7 = maskPixel >> 16 & 255;
							var m1 = this7 == 0 ? 0. : this7 / 255;
							var this8 = maskPixel >> 8 & 255;
							var m2 = this8 == 0 ? 0. : this8 / 255;
							var this9 = maskPixel & 255;
							var m3 = this9 == 0 ? 0. : this9 / 255;
							var ch0 = (1. - m0) * (this4 >> 24 & 255) | 0;
							var ch1 = (1. - m1) * (this4 >> 16 & 255) | 0;
							var ch2 = (1. - m2) * (this4 >> 8 & 255) | 0;
							var ch3 = (1. - m3) * (this4 & 255) | 0;
							col = Math.round(ch0 * 255) << 24 | Math.round(ch1 * 255) << 16 | Math.round(ch2 * 255) << 8 | Math.round(ch3 * 255);
						}
					}
					if(col != 0) {
						var x1 = x + dx;
						var y1 = y + dy;
						var this10 = col;
						var c2 = this10;
						if((c2 >> 24 & 255) < 254 && p.transparent) {
							var location = p.useVirtualPos ? (y1 - p.virtualY) * p.width + x1 - p.virtualX | 0 : y1 * p.width + x1 | 0;
							var this11 = p.image[location];
							var this12 = this11;
							var this13 = pixelimage_Endian_isLittleEndian ? (this12 >> 24 & 255) << 24 | (this12 & 255) << 16 | (this12 >> 8 & 255) << 8 | this12 >> 16 & 255 : this12;
							var this14 = this13 >> 24 & 255;
							var a1 = this14 == 0 ? 0. : this14 / 255;
							var this15 = this13 >> 16 & 255;
							var r1 = this15 == 0 ? 0. : this15 / 255;
							var this16 = this13 >> 8 & 255;
							var g1 = this16 == 0 ? 0. : this16 / 255;
							var this17 = this13 & 255;
							var b1 = this17 == 0 ? 0. : this17 / 255;
							var this18 = col >> 24 & 255;
							var a2 = this18 == 0 ? 0. : this18 / 255;
							var this19 = col >> 16 & 255;
							var r2 = this19 == 0 ? 0. : this19 / 255;
							var this20 = col >> 8 & 255;
							var g2 = this20 == 0 ? 0. : this20 / 255;
							var this21 = col & 255;
							var b2 = this21 == 0 ? 0. : this21 / 255;
							var a3 = a1 * (1 - a2);
							var r = 255 * (r1 * a3 + r2 * a2) | 0;
							var g = 255 * (g1 * a3 + g2 * a2) | 0;
							var b = 255 * (b1 * a3 + b2 * a2) | 0;
							var a = 255 * (a3 + a2) | 0;
							var blended = a << 24 | r << 16 | g << 8 | b;
							p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
						} else {
							p.image[p.useVirtualPos ? (y1 - p.virtualY) * p.width + x1 - p.virtualX | 0 : y1 * p.width + x1 | 0] = pixelimage_Endian_isLittleEndian ? (c2 >> 24 & 255) << 24 | (c2 & 255) << 16 | (c2 >> 8 & 255) << 8 | c2 >> 16 & 255 : c2;
						}
					}
				}
			}
		}
		temp = null;
	}
	,drawGridMask: function(p) {
		if(p.mask == null) {
			var w = p.width;
			var h = p.height;
			var this1 = new Uint32Array(w * h | 0);
			var this2 = new pixelimage_ImageStruct(w,h,this1);
			p.mask = this2;
			p.mask.transparent = false;
			var this1 = p.mask;
			var p1 = 0;
			var xx = p1;
			var q = 0;
			var maxX = p.width | 0;
			var maxY = p.height | 0;
			while(true) {
				var x = p1++;
				var this2 = 0;
				var c = this2;
				if((c >> 24 & 255) < 254 && this1.transparent) {
					var location = this1.useVirtualPos ? (q - this1.virtualY) * this1.width + x - this1.virtualX | 0 : q * this1.width + x | 0;
					var this3 = this1.image[location];
					var this4 = this3;
					var this5 = pixelimage_Endian_isLittleEndian ? (this4 >> 24 & 255) << 24 | (this4 & 255) << 16 | (this4 >> 8 & 255) << 8 | this4 >> 16 & 255 : this4;
					var this6 = this5 >> 24 & 255;
					var a1 = this6 == 0 ? 0. : this6 / 255;
					var this7 = this5 >> 16 & 255;
					var r1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = this5 >> 8 & 255;
					var g1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = this5 & 255;
					var b1 = this9 == 0 ? 0. : this9 / 255;
					var this10 = 0;
					var a2 = this10 == 0 ? 0. : this10 / 255;
					var this11 = 0;
					var r2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = 0;
					var g2 = this12 == 0 ? 0. : this12 / 255;
					var this13 = 0;
					var b2 = this13 == 0 ? 0. : this13 / 255;
					var a3 = a1 * (1 - a2);
					var r = 255 * (r1 * a3 + r2 * a2) | 0;
					var g = 255 * (g1 * a3 + g2 * a2) | 0;
					var b = 255 * (b1 * a3 + b2 * a2) | 0;
					var a = 255 * (a3 + a2) | 0;
					var blended = a << 24 | r << 16 | g << 8 | b;
					this1.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					this1.image[this1.useVirtualPos ? (q - this1.virtualY) * this1.width + x - this1.virtualX | 0 : q * this1.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
				}
				if(p1 > maxX) {
					p1 = xx;
					++q;
				}
				if(q > maxY) {
					break;
				}
			}
		}
		p.useMask = true;
		var pimage = p.mask;
		var pixelShape = pimage;
		var h_ = 2300;
		var w_ = 3000;
		var _g = 0;
		var _g1 = 31;
		while(_g < _g1) {
			var i = _g++;
			var x = 150 + i * 100 - 1.25;
			var p = x | 0;
			var xx = p;
			var q = 150;
			var maxX = x + 2.5 | 0;
			var maxY = 150 + h_ | 0;
			while(true) {
				var x1 = p++;
				var this1 = 218103807;
				var c = this1;
				if((c >> 24 & 255) < 254 && pixelShape.transparent) {
					var location = pixelShape.useVirtualPos ? (q - pixelShape.virtualY) * pixelShape.width + x1 - pixelShape.virtualX | 0 : q * pixelShape.width + x1 | 0;
					var this2 = pixelShape.image[location];
					var this3 = this2;
					var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
					var this5 = this4 >> 24 & 255;
					var a1 = this5 == 0 ? 0. : this5 / 255;
					var this6 = this4 >> 16 & 255;
					var r1 = this6 == 0 ? 0. : this6 / 255;
					var this7 = this4 >> 8 & 255;
					var g1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = this4 & 255;
					var b1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = 12;
					var a2 = this9 == 0 ? 0. : this9 / 255;
					var this10 = 255;
					var r2 = this10 == 0 ? 0. : this10 / 255;
					var this11 = 255;
					var g2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = 255;
					var b2 = this12 == 0 ? 0. : this12 / 255;
					var a3 = a1 * (1 - a2);
					var r = 255 * (r1 * a3 + r2 * a2) | 0;
					var g = 255 * (g1 * a3 + g2 * a2) | 0;
					var b = 255 * (b1 * a3 + b2 * a2) | 0;
					var a = 255 * (a3 + a2) | 0;
					var blended = a << 24 | r << 16 | g << 8 | b;
					pixelShape.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					pixelShape.image[pixelShape.useVirtualPos ? (q - pixelShape.virtualY) * pixelShape.width + x1 - pixelShape.virtualX | 0 : q * pixelShape.width + x1 | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
				}
				if(p > maxX) {
					p = xx;
					++q;
				}
				if(q > maxY) {
					break;
				}
			}
		}
		var _g = 0;
		var _g1 = 24;
		while(_g < _g1) {
			var i = _g++;
			var y = 150 + i * 100 - 1.25;
			var p = 150;
			var xx = p;
			var q = y | 0;
			var maxX = 150 + w_ | 0;
			var maxY = y + 2.5 | 0;
			while(true) {
				var x = p++;
				var this1 = 218103807;
				var c = this1;
				if((c >> 24 & 255) < 254 && pixelShape.transparent) {
					var location = pixelShape.useVirtualPos ? (q - pixelShape.virtualY) * pixelShape.width + x - pixelShape.virtualX | 0 : q * pixelShape.width + x | 0;
					var this2 = pixelShape.image[location];
					var this3 = this2;
					var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
					var this5 = this4 >> 24 & 255;
					var a1 = this5 == 0 ? 0. : this5 / 255;
					var this6 = this4 >> 16 & 255;
					var r1 = this6 == 0 ? 0. : this6 / 255;
					var this7 = this4 >> 8 & 255;
					var g1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = this4 & 255;
					var b1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = 12;
					var a2 = this9 == 0 ? 0. : this9 / 255;
					var this10 = 255;
					var r2 = this10 == 0 ? 0. : this10 / 255;
					var this11 = 255;
					var g2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = 255;
					var b2 = this12 == 0 ? 0. : this12 / 255;
					var a3 = a1 * (1 - a2);
					var r = 255 * (r1 * a3 + r2 * a2) | 0;
					var g = 255 * (g1 * a3 + g2 * a2) | 0;
					var b = 255 * (b1 * a3 + b2 * a2) | 0;
					var a = 255 * (a3 + a2) | 0;
					var blended = a << 24 | r << 16 | g << 8 | b;
					pixelShape.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					pixelShape.image[pixelShape.useVirtualPos ? (q - pixelShape.virtualY) * pixelShape.width + x - pixelShape.virtualX | 0 : q * pixelShape.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
				}
				if(p > maxX) {
					p = xx;
					++q;
				}
				if(q > maxY) {
					break;
				}
			}
		}
	}
	,drawGrid: function(p) {
		var h_ = 2300;
		var w_ = 3000;
		var _g = 0;
		var _g1 = 31;
		while(_g < _g1) {
			var i = _g++;
			var x = 100 + i * 100 - 1.25;
			var p1 = x | 0;
			var xx = p1;
			var q = 100;
			var maxX = x + 2.5 | 0;
			var maxY = 100 + h_ | 0;
			while(true) {
				var x1 = p1++;
				var this1 = -16764160;
				var c = this1;
				if((c >> 24 & 255) < 254 && p.transparent) {
					var location = p.useVirtualPos ? (q - p.virtualY) * p.width + x1 - p.virtualX | 0 : q * p.width + x1 | 0;
					var this2 = p.image[location];
					var this3 = this2;
					var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
					var this5 = this4 >> 24 & 255;
					var a1 = this5 == 0 ? 0. : this5 / 255;
					var this6 = this4 >> 16 & 255;
					var r1 = this6 == 0 ? 0. : this6 / 255;
					var this7 = this4 >> 8 & 255;
					var g1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = this4 & 255;
					var b1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = 255;
					var a2 = this9 == 0 ? 0. : this9 / 255;
					var this10 = 0;
					var r2 = this10 == 0 ? 0. : this10 / 255;
					var this11 = 51;
					var g2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = 0;
					var b2 = this12 == 0 ? 0. : this12 / 255;
					var a3 = a1 * (1 - a2);
					var r = 255 * (r1 * a3 + r2 * a2) | 0;
					var g = 255 * (g1 * a3 + g2 * a2) | 0;
					var b = 255 * (b1 * a3 + b2 * a2) | 0;
					var a = 255 * (a3 + a2) | 0;
					var blended = a << 24 | r << 16 | g << 8 | b;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[p.useVirtualPos ? (q - p.virtualY) * p.width + x1 - p.virtualX | 0 : q * p.width + x1 | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
				}
				if(p1 > maxX) {
					p1 = xx;
					++q;
				}
				if(q > maxY) {
					break;
				}
			}
		}
		var _g = 0;
		var _g1 = 24;
		while(_g < _g1) {
			var i = _g++;
			var y = 100 + i * 100 - 1.25;
			var p1 = 100;
			var xx = p1;
			var q = y | 0;
			var maxX = 100 + w_ | 0;
			var maxY = y + 2.5 | 0;
			while(true) {
				var x = p1++;
				var this1 = -16764160;
				var c = this1;
				if((c >> 24 & 255) < 254 && p.transparent) {
					var location = p.useVirtualPos ? (q - p.virtualY) * p.width + x - p.virtualX | 0 : q * p.width + x | 0;
					var this2 = p.image[location];
					var this3 = this2;
					var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
					var this5 = this4 >> 24 & 255;
					var a1 = this5 == 0 ? 0. : this5 / 255;
					var this6 = this4 >> 16 & 255;
					var r1 = this6 == 0 ? 0. : this6 / 255;
					var this7 = this4 >> 8 & 255;
					var g1 = this7 == 0 ? 0. : this7 / 255;
					var this8 = this4 & 255;
					var b1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = 255;
					var a2 = this9 == 0 ? 0. : this9 / 255;
					var this10 = 0;
					var r2 = this10 == 0 ? 0. : this10 / 255;
					var this11 = 51;
					var g2 = this11 == 0 ? 0. : this11 / 255;
					var this12 = 0;
					var b2 = this12 == 0 ? 0. : this12 / 255;
					var a3 = a1 * (1 - a2);
					var r = 255 * (r1 * a3 + r2 * a2) | 0;
					var g = 255 * (g1 * a3 + g2 * a2) | 0;
					var b = 255 * (b1 * a3 + b2 * a2) | 0;
					var a = 255 * (a3 + a2) | 0;
					var blended = a << 24 | r << 16 | g << 8 | b;
					p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
				} else {
					p.image[p.useVirtualPos ? (q - p.virtualY) * p.width + x - p.virtualX | 0 : q * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
				}
				if(p1 > maxX) {
					p1 = xx;
					++q;
				}
				if(q > maxY) {
					break;
				}
			}
		}
	}
	,drawAlphaTriangle: function(p) {
		var a_0 = 871366848;
		var a_1 = -1712324416;
		var a_2 = -1427111744;
		var a_3 = -856686400;
		var a_4 = -286261056;
		var gap = 200;
		var ax = 100 + 0 * gap;
		var bx = 300 + 0 * gap;
		var by = 1200;
		var cx = 500 + 0 * gap;
		var cy = 1000;
		var color = a_0;
		var adjustWinding = ax * by - bx * 900 + (bx * cy - cx * by) + (cx * 900 - ax * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy;
			cx = bx_;
			cy = by_;
		}
		var s0 = 900 * cx - ax * cy;
		var sx = cy - 900;
		var sy = ax - cx;
		var t0 = ax * by - 900 * bx;
		var tx = 900 - by;
		var ty = bx - ax;
		var A = -by * cx + 900 * (-bx + cx) + ax * (by - cy) + bx * cy;
		var ii = 900 > by ? 900 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(900)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(900 > cy ? Math.floor(cy) : Math.ceil(900),Math.ceil(by)) : new IntIterator(Math.floor(900),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g = ax > bx ? ax > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(ax)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(ax > cx ? Math.floor(cx) : Math.ceil(ax),Math.ceil(bx)) : new IntIterator(Math.floor(ax),Math.ceil(cx));
		while(_g.min < _g.max) {
			var x = _g.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this1 = color;
					var c = this1;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this2 = p.image[location];
						var this3 = this2;
						var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
						var this5 = this4 >> 24 & 255;
						var a1 = this5 == 0 ? 0. : this5 / 255;
						var this6 = this4 >> 16 & 255;
						var r1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this4 >> 8 & 255;
						var g1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this4 & 255;
						var b1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = color >> 24 & 255;
						var a2 = this9 == 0 ? 0. : this9 / 255;
						var this10 = color >> 16 & 255;
						var r2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = color >> 8 & 255;
						var g2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = color & 255;
						var b2 = this12 == 0 ? 0. : this12 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		var ax = 100 + gap;
		var bx = 300 + gap;
		var by = 1200;
		var cx = 500 + gap;
		var cy = 1000;
		var color = a_1;
		var adjustWinding = ax * by - bx * 900 + (bx * cy - cx * by) + (cx * 900 - ax * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy;
			cx = bx_;
			cy = by_;
		}
		var s0 = 900 * cx - ax * cy;
		var sx = cy - 900;
		var sy = ax - cx;
		var t0 = ax * by - 900 * bx;
		var tx = 900 - by;
		var ty = bx - ax;
		var A = -by * cx + 900 * (-bx + cx) + ax * (by - cy) + bx * cy;
		var ii = 900 > by ? 900 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(900)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(900 > cy ? Math.floor(cy) : Math.ceil(900),Math.ceil(by)) : new IntIterator(Math.floor(900),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g = ax > bx ? ax > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(ax)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(ax > cx ? Math.floor(cx) : Math.ceil(ax),Math.ceil(bx)) : new IntIterator(Math.floor(ax),Math.ceil(cx));
		while(_g.min < _g.max) {
			var x = _g.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this1 = color;
					var c = this1;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this2 = p.image[location];
						var this3 = this2;
						var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
						var this5 = this4 >> 24 & 255;
						var a1 = this5 == 0 ? 0. : this5 / 255;
						var this6 = this4 >> 16 & 255;
						var r1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this4 >> 8 & 255;
						var g1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this4 & 255;
						var b1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = color >> 24 & 255;
						var a2 = this9 == 0 ? 0. : this9 / 255;
						var this10 = color >> 16 & 255;
						var r2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = color >> 8 & 255;
						var g2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = color & 255;
						var b2 = this12 == 0 ? 0. : this12 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		var ax = 100 + 2 * gap;
		var bx = 300 + 2 * gap;
		var by = 1200;
		var cx = 500 + 2 * gap;
		var cy = 1000;
		var color = a_2;
		var adjustWinding = ax * by - bx * 900 + (bx * cy - cx * by) + (cx * 900 - ax * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy;
			cx = bx_;
			cy = by_;
		}
		var s0 = 900 * cx - ax * cy;
		var sx = cy - 900;
		var sy = ax - cx;
		var t0 = ax * by - 900 * bx;
		var tx = 900 - by;
		var ty = bx - ax;
		var A = -by * cx + 900 * (-bx + cx) + ax * (by - cy) + bx * cy;
		var ii = 900 > by ? 900 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(900)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(900 > cy ? Math.floor(cy) : Math.ceil(900),Math.ceil(by)) : new IntIterator(Math.floor(900),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g = ax > bx ? ax > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(ax)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(ax > cx ? Math.floor(cx) : Math.ceil(ax),Math.ceil(bx)) : new IntIterator(Math.floor(ax),Math.ceil(cx));
		while(_g.min < _g.max) {
			var x = _g.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this1 = color;
					var c = this1;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this2 = p.image[location];
						var this3 = this2;
						var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
						var this5 = this4 >> 24 & 255;
						var a1 = this5 == 0 ? 0. : this5 / 255;
						var this6 = this4 >> 16 & 255;
						var r1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this4 >> 8 & 255;
						var g1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this4 & 255;
						var b1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = color >> 24 & 255;
						var a2 = this9 == 0 ? 0. : this9 / 255;
						var this10 = color >> 16 & 255;
						var r2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = color >> 8 & 255;
						var g2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = color & 255;
						var b2 = this12 == 0 ? 0. : this12 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		var ax = 100 + 3 * gap;
		var bx = 300 + 3 * gap;
		var by = 1200;
		var cx = 500 + 3 * gap;
		var cy = 1000;
		var color = a_3;
		var adjustWinding = ax * by - bx * 900 + (bx * cy - cx * by) + (cx * 900 - ax * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy;
			cx = bx_;
			cy = by_;
		}
		var s0 = 900 * cx - ax * cy;
		var sx = cy - 900;
		var sy = ax - cx;
		var t0 = ax * by - 900 * bx;
		var tx = 900 - by;
		var ty = bx - ax;
		var A = -by * cx + 900 * (-bx + cx) + ax * (by - cy) + bx * cy;
		var ii = 900 > by ? 900 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(900)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(900 > cy ? Math.floor(cy) : Math.ceil(900),Math.ceil(by)) : new IntIterator(Math.floor(900),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g = ax > bx ? ax > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(ax)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(ax > cx ? Math.floor(cx) : Math.ceil(ax),Math.ceil(bx)) : new IntIterator(Math.floor(ax),Math.ceil(cx));
		while(_g.min < _g.max) {
			var x = _g.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this1 = color;
					var c = this1;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this2 = p.image[location];
						var this3 = this2;
						var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
						var this5 = this4 >> 24 & 255;
						var a1 = this5 == 0 ? 0. : this5 / 255;
						var this6 = this4 >> 16 & 255;
						var r1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this4 >> 8 & 255;
						var g1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this4 & 255;
						var b1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = color >> 24 & 255;
						var a2 = this9 == 0 ? 0. : this9 / 255;
						var this10 = color >> 16 & 255;
						var r2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = color >> 8 & 255;
						var g2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = color & 255;
						var b2 = this12 == 0 ? 0. : this12 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
		var ax = 100 + 4 * gap;
		var bx = 300 + 4 * gap;
		var by = 1200;
		var cx = 500 + 4 * gap;
		var cy = 1000;
		var color = a_4;
		var adjustWinding = ax * by - bx * 900 + (bx * cy - cx * by) + (cx * 900 - ax * cy) > 0;
		if(!adjustWinding) {
			var bx_ = bx;
			var by_ = by;
			bx = cx;
			by = cy;
			cx = bx_;
			cy = by_;
		}
		var s0 = 900 * cx - ax * cy;
		var sx = cy - 900;
		var sy = ax - cx;
		var t0 = ax * by - 900 * bx;
		var tx = 900 - by;
		var ty = bx - ax;
		var A = -by * cx + 900 * (-bx + cx) + ax * (by - cy) + bx * cy;
		var ii = 900 > by ? 900 > cy ? new IntIterator(by > cy ? Math.floor(cy) : Math.floor(by),Math.ceil(900)) : new IntIterator(Math.floor(by),Math.ceil(cy)) : by > cy ? new IntIterator(900 > cy ? Math.floor(cy) : Math.ceil(900),Math.ceil(by)) : new IntIterator(Math.floor(900),Math.ceil(cy));
		var this1 = new pixelimage_iter_IntIterStart(ii.min,ii.max);
		var yIter3 = this1;
		var foundY = false;
		var s = 0.;
		var t = 0.;
		var sxx = 0.;
		var txx = 0.;
		var _g = ax > bx ? ax > cx ? new IntIterator(bx > cx ? Math.floor(cx) : Math.floor(bx),Math.ceil(ax)) : new IntIterator(Math.floor(bx),Math.ceil(cx)) : bx > cx ? new IntIterator(ax > cx ? Math.floor(cx) : Math.ceil(ax),Math.ceil(bx)) : new IntIterator(Math.floor(ax),Math.ceil(cx));
		while(_g.min < _g.max) {
			var x = _g.min++;
			sxx = sx * x;
			txx = tx * x;
			foundY = false;
			var _g_min = yIter3.start;
			var _g_max = yIter3.max;
			while(_g_min < _g_max) {
				var y = _g_min++;
				s = s0 + sxx + sy * y;
				t = t0 + txx + ty * y;
				if(s <= 0 || t <= 0) {
					if(foundY) {
						break;
					}
				} else if(s + t < A) {
					var this1 = color;
					var c = this1;
					if((c >> 24 & 255) < 254 && p.transparent) {
						var location = p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0;
						var this2 = p.image[location];
						var this3 = this2;
						var this4 = pixelimage_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
						var this5 = this4 >> 24 & 255;
						var a1 = this5 == 0 ? 0. : this5 / 255;
						var this6 = this4 >> 16 & 255;
						var r1 = this6 == 0 ? 0. : this6 / 255;
						var this7 = this4 >> 8 & 255;
						var g1 = this7 == 0 ? 0. : this7 / 255;
						var this8 = this4 & 255;
						var b1 = this8 == 0 ? 0. : this8 / 255;
						var this9 = color >> 24 & 255;
						var a2 = this9 == 0 ? 0. : this9 / 255;
						var this10 = color >> 16 & 255;
						var r2 = this10 == 0 ? 0. : this10 / 255;
						var this11 = color >> 8 & 255;
						var g2 = this11 == 0 ? 0. : this11 / 255;
						var this12 = color & 255;
						var b2 = this12 == 0 ? 0. : this12 / 255;
						var a3 = a1 * (1 - a2);
						var r = 255 * (r1 * a3 + r2 * a2) | 0;
						var g = 255 * (g1 * a3 + g2 * a2) | 0;
						var b = 255 * (b1 * a3 + b2 * a2) | 0;
						var a = 255 * (a3 + a2) | 0;
						var blended = a << 24 | r << 16 | g << 8 | b;
						p.image[location] = pixelimage_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended;
					} else {
						p.image[p.useVirtualPos ? (y - p.virtualY) * p.width + x - p.virtualX | 0 : y * p.width + x | 0] = pixelimage_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
					}
					foundY = true;
				} else if(foundY) {
					break;
				}
			}
		}
	}
};
function pixelimage_DemoUse_main() {
	new pixelimage_DemoUse();
}
var pixelimage_ImageStruct = function(width,height,image) {
	this.useMask = false;
	this.useVirtualPos = false;
	this.virtualY = 0;
	this.virtualX = 0;
	this.transparent = false;
	this.width = width;
	this.height = height;
	this.image = image;
	this.isLittle = pixelimage_Endian_isLittleEndian;
	this.transparent = false;
};
pixelimage_ImageStruct.__name__ = true;
var pixelimage_Pixelimage = {};
pixelimage_Pixelimage.setRelativePosition = function(this1,x,y,update) {
	if(update == null) {
		update = false;
	}
	this1.useVirtualPos = true;
	if(x < 0) {
		x = 0;
	}
	if(y < 0) {
		y = 0;
	}
	this1.virtualX = x;
	this1.virtualY = y;
};
var pixelimage_iter_IntIterStart = function(min_,max_) {
	this.start = min_;
	this.max = max_;
};
pixelimage_iter_IntIterStart.__name__ = true;
var vision_ds_Line2D = function(start,end) {
	this.end = new vision_ds_Point2D(0,0);
	this.start = new vision_ds_Point2D(0,0);
	this.start.x = start.x;
	this.start.y = start.y;
	this.end.x = end.x;
	this.end.y = end.y;
	var x = end.x - start.x;
	var y = end.y - start.y;
	this.radians = Math.atan2(x,y);
	this.slope = Math.tan(this.radians);
	this.degrees = this.radians * 180 / Math.PI;
};
vision_ds_Line2D.__name__ = true;
vision_ds_Line2D.prototype = {
	toString: function() {
		return "\n (" + Std.string(this.start) + ".x, " + Std.string(this.start) + ".y) --> (" + Std.string(this.end) + ".x, " + Std.string(this.end) + ".y)";
	}
};
var vision_ds_Point2D = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
vision_ds_Point2D.__name__ = true;
vision_ds_Point2D.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
var pixelimage_Endian_isLittleEndian = (function($this) {
	var $r;
	var a8 = new Uint8Array(4);
	var a32 = new Uint32Array(a8.buffer)[0] = -3407855;
	$r = a8[0] != 255;
	return $r;
}(this));
pixelimage_DemoUse_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
