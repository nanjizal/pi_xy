// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy_algo_RectanglePixel
#include <pi_xy/algo/RectanglePixel.h>
#endif
#ifndef INCLUDED_pi_xy_algo__RectanglePixel_RectanglePixel_Fields_
#include <pi_xy/algo/_RectanglePixel/RectanglePixel_Fields_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_71de4c20581a1a6e_91_new,"pi_xy.algo.RectanglePixel","new",0xf038897d,"pi_xy.algo.RectanglePixel.new","pi_xy/algo/RectanglePixel.hx",91,0xf418ac33)
namespace pi_xy{
namespace algo{

void RectanglePixel_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_71de4c20581a1a6e_91_new)
HXDLIN(  91)		this->_fillRadialRect = ::pi_xy::algo::_RectanglePixel::RectanglePixel_Fields__obj::fillRadialRect_dyn();
            	}

Dynamic RectanglePixel_obj::__CreateEmpty() { return new RectanglePixel_obj; }

void *RectanglePixel_obj::_hx_vtable = 0;

Dynamic RectanglePixel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RectanglePixel_obj > _hx_result = new RectanglePixel_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RectanglePixel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e2c4891;
}


::hx::ObjectPtr< RectanglePixel_obj > RectanglePixel_obj::__new() {
	::hx::ObjectPtr< RectanglePixel_obj > __this = new RectanglePixel_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< RectanglePixel_obj > RectanglePixel_obj::__alloc(::hx::Ctx *_hx_ctx) {
	RectanglePixel_obj *__this = (RectanglePixel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RectanglePixel_obj), true, "pi_xy.algo.RectanglePixel"));
	*(void **)__this = RectanglePixel_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RectanglePixel_obj::RectanglePixel_obj()
{
}

void RectanglePixel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RectanglePixel);
	HX_MARK_MEMBER_NAME(_fillRadialRect,"_fillRadialRect");
	HX_MARK_END_CLASS();
}

void RectanglePixel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_fillRadialRect,"_fillRadialRect");
}

::hx::Val RectanglePixel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"_fillRadialRect") ) { return ::hx::Val( _fillRadialRect ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RectanglePixel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"_fillRadialRect") ) { _fillRadialRect=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RectanglePixel_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(RectanglePixel_obj,_fillRadialRect),HX_("_fillRadialRect",a5,10,b5,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RectanglePixel_obj_sStaticStorageInfo = 0;
#endif

static ::String RectanglePixel_obj_sMemberFields[] = {
	HX_("_fillRadialRect",a5,10,b5,aa),
	::String(null()) };

::hx::Class RectanglePixel_obj::__mClass;

void RectanglePixel_obj::__register()
{
	RectanglePixel_obj _hx_dummy;
	RectanglePixel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.RectanglePixel",0b,07,85,07);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RectanglePixel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RectanglePixel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectanglePixel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectanglePixel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
