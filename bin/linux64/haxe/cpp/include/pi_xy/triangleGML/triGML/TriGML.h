// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_triangleGML_triGML_TriGML
#define INCLUDED_pi_xy_triangleGML_triGML_TriGML

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(pi_xy,triangleGML,triGML,ShapeInterface)
HX_DECLARE_CLASS3(pi_xy,triangleGML,triGML,TriGML)

namespace pi_xy{
namespace triangleGML{
namespace triGML{


class HXCPP_CLASS_ATTRIBUTES TriGML_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TriGML_obj OBJ_;
		TriGML_obj();

	public:
		enum { _hx_ClassId = 0x7552a34d };

		void __construct( ::Dynamic drawTool, ::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pi_xy.triangleGML.triGML.TriGML")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pi_xy.triangleGML.triGML.TriGML"); }

		//~TriGML_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TriGML",3b,fb,45,7f); }

		 ::Dynamic drawTool;
		 ::Xml xml;
		Float offX;
		Float offY;
		::Array< ::Dynamic> shapes;
		 ::haxe::ds::StringMap imageResource;
		 ::Dynamic addImage(::String name, ::Dynamic imageTool);
		::Dynamic addImage_dyn();

		 ::pi_xy::triangleGML::triGML::TriGML addShape(::String str,::hx::Null< Float >  x,::hx::Null< Float >  y);
		::Dynamic addShape_dyn();

		void process();
		::Dynamic process_dyn();

		void processShape( ::Xml x);
		::Dynamic processShape_dyn();

		void processAttribute(::String att,::String value,::Dynamic shape);
		::Dynamic processAttribute_dyn();

		void render();
		::Dynamic render_dyn();

		virtual ::Dynamic getTriangleGML(::String nodeName) { return 0; }
		::Dynamic getTriangleGML_dyn();
};

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML

#endif /* INCLUDED_pi_xy_triangleGML_triGML_TriGML */ 
