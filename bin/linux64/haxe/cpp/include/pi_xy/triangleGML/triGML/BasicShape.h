// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#define INCLUDED_pi_xy_triangleGML_triGML_BasicShape

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
HX_DECLARE_CLASS3(pi_xy,triangleGML,triGML,BasicShape)
HX_DECLARE_CLASS3(pi_xy,triangleGML,triGML,GroupShape)
HX_DECLARE_CLASS3(pi_xy,triangleGML,triGML,ShapeInterface)

namespace pi_xy{
namespace triangleGML{
namespace triGML{


class HXCPP_CLASS_ATTRIBUTES BasicShape_obj : public  ::pi_xy::triangleGML::triGML::GroupShape_obj
{
	public:
		typedef  ::pi_xy::triangleGML::triGML::GroupShape_obj super;
		typedef BasicShape_obj OBJ_;
		BasicShape_obj();

	public:
		enum { _hx_ClassId = 0x7ff8cec5 };

		void __construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pi_xy.triangleGML.triGML.BasicShape")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pi_xy.triangleGML.triGML.BasicShape"); }

		//~BasicShape_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BasicShape",b3,b5,41,e5); }

		static void __boot();
		static Float dashLength;
		static Float gapLength;
		int strokeColor;
		Float strokeWidth;
		::Array< ::String > strokeDashGapArray;
		virtual void setParameter(::String name,::String value);

};

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML

#endif /* INCLUDED_pi_xy_triangleGML_triGML_BasicShape */ 
