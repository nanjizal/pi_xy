// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_display_FrameLabel
#include <nme/display/FrameLabel.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a0a961d48fd8b557_9_new,"nme.display.FrameLabel","new",0x522a8fed,"nme.display.FrameLabel.new","nme/display/FrameLabel.hx",9,0x8ed029e1)
namespace nme{
namespace display{

void FrameLabel_obj::__construct(::String inName,int inFrame){
            	HX_STACKFRAME(&_hx_pos_a0a961d48fd8b557_9_new)
HXLINE(  10)		super::__construct(null());
HXLINE(  11)		this->name = inName;
HXLINE(  12)		this->frame = inFrame;
            	}

Dynamic FrameLabel_obj::__CreateEmpty() { return new FrameLabel_obj; }

void *FrameLabel_obj::_hx_vtable = 0;

Dynamic FrameLabel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FrameLabel_obj > _hx_result = new FrameLabel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FrameLabel_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x21f8cdcf;
	}
}


::hx::ObjectPtr< FrameLabel_obj > FrameLabel_obj::__new(::String inName,int inFrame) {
	::hx::ObjectPtr< FrameLabel_obj > __this = new FrameLabel_obj();
	__this->__construct(inName,inFrame);
	return __this;
}

::hx::ObjectPtr< FrameLabel_obj > FrameLabel_obj::__alloc(::hx::Ctx *_hx_ctx,::String inName,int inFrame) {
	FrameLabel_obj *__this = (FrameLabel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FrameLabel_obj), true, "nme.display.FrameLabel"));
	*(void **)__this = FrameLabel_obj::_hx_vtable;
	__this->__construct(inName,inFrame);
	return __this;
}

FrameLabel_obj::FrameLabel_obj()
{
}

void FrameLabel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FrameLabel);
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(name,"name");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FrameLabel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(name,"name");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FrameLabel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return ::hx::Val( frame ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FrameLabel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FrameLabel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("frame",2d,78,83,06));
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FrameLabel_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FrameLabel_obj,frame),HX_("frame",2d,78,83,06)},
	{::hx::fsString,(int)offsetof(FrameLabel_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FrameLabel_obj_sStaticStorageInfo = 0;
#endif

static ::String FrameLabel_obj_sMemberFields[] = {
	HX_("frame",2d,78,83,06),
	HX_("name",4b,72,ff,48),
	::String(null()) };

::hx::Class FrameLabel_obj::__mClass;

void FrameLabel_obj::__register()
{
	FrameLabel_obj _hx_dummy;
	FrameLabel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.FrameLabel",7b,15,77,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FrameLabel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FrameLabel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FrameLabel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FrameLabel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace display
