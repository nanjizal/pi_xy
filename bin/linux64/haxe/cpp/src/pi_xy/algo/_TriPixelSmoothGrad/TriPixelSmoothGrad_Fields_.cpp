// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__HitTriScalar_HitTriScalar_Impl_
#include <pi_xy/algo/_HitTriScalar/HitTriScalar_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__TriPixelSmoothGrad_TriPixelSmoothGrad_Fields_
#include <pi_xy/algo/_TriPixelSmoothGrad/TriPixelSmoothGrad_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c88345def33277a9_19_lineXYGradPentBary,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_","lineXYGradPentBary",0x08bcef48,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_.lineXYGradPentBary","pi_xy/algo/TriPixelSmoothGrad.hx",19,0x55d4f1b3)
HX_LOCAL_STACK_FRAME(_hx_pos_c88345def33277a9_31_lineGradPentBary,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_","lineGradPentBary",0x69495ec7,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_.lineGradPentBary","pi_xy/algo/TriPixelSmoothGrad.hx",31,0x55d4f1b3)
HX_LOCAL_STACK_FRAME(_hx_pos_c88345def33277a9_40_quadGradPentBary,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_","quadGradPentBary",0x2077f01a,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_.quadGradPentBary","pi_xy/algo/TriPixelSmoothGrad.hx",40,0x55d4f1b3)
HX_LOCAL_STACK_FRAME(_hx_pos_c88345def33277a9_52_triGradPentBaryBottom,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_","triGradPentBaryBottom",0xd1d8adc1,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_.triGradPentBaryBottom","pi_xy/algo/TriPixelSmoothGrad.hx",52,0x55d4f1b3)
HX_LOCAL_STACK_FRAME(_hx_pos_c88345def33277a9_77_triGradPentBaryTop,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_","triGradPentBaryTop",0x8ae59dff,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_.triGradPentBaryTop","pi_xy/algo/TriPixelSmoothGrad.hx",77,0x55d4f1b3)
HX_LOCAL_STACK_FRAME(_hx_pos_c88345def33277a9_105_triGradPentBary,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_","triGradPentBary",0x662bc636,"pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_.triGradPentBary","pi_xy/algo/TriPixelSmoothGrad.hx",105,0x55d4f1b3)
namespace pi_xy{
namespace algo{
namespace _TriPixelSmoothGrad{

void TriPixelSmoothGrad_Fields__obj::__construct() { }

Dynamic TriPixelSmoothGrad_Fields__obj::__CreateEmpty() { return new TriPixelSmoothGrad_Fields__obj; }

void *TriPixelSmoothGrad_Fields__obj::_hx_vtable = 0;

Dynamic TriPixelSmoothGrad_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriPixelSmoothGrad_Fields__obj > _hx_result = new TriPixelSmoothGrad_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TriPixelSmoothGrad_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4944027e;
}

 ::pi_xy::algo::HitQuad TriPixelSmoothGrad_Fields__obj::lineXYGradPentBary( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int colorA,int colorB,int colorC,int colorD,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_c88345def33277a9_19_lineXYGradPentBary)
HXLINE(  20)		Float _hx___px = px;
HXDLIN(  20)		Float _hx___py = py;
HXDLIN(  20)		Float _hx___qx = qx;
HXDLIN(  20)		Float _hx___qy = qy;
HXDLIN(  20)		Float _hx___thick = thick;
HXLINE(  21)		Float o = (_hx___qy - _hx___py);
HXDLIN(  21)		Float a = (_hx___qx - _hx___px);
HXDLIN(  21)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN(  21)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN(  21)		Float lineInfo_px = _hx___px;
HXDLIN(  21)		Float lineInfo_py = _hx___py;
HXDLIN(  21)		Float lineInfo_thick = _hx___thick;
HXDLIN(  21)		Float lineInfo_long = h;
HXDLIN(  21)		Float lineInfo_theta = theta;
HXDLIN(  21)		Float radius = (lineInfo_thick / ( (Float)(2) ));
HXDLIN(  21)		Float dx = ((Float)0.1);
HXDLIN(  21)		Float dy = radius;
HXDLIN(  21)		Float cx = lineInfo_long;
HXDLIN(  21)		Float cy = radius;
HXDLIN(  21)		Float bx = lineInfo_long;
HXDLIN(  21)		Float by = -(radius);
HXDLIN(  21)		Float ax = ((Float)0.1);
HXDLIN(  21)		Float ay = -(radius);
HXDLIN(  21)		Float quadPoints_ax = ax;
HXDLIN(  21)		Float quadPoints_ay = ay;
HXDLIN(  21)		Float quadPoints_bx = bx;
HXDLIN(  21)		Float quadPoints_by = by;
HXDLIN(  21)		Float quadPoints_cx = cx;
HXDLIN(  21)		Float quadPoints_cy = cy;
HXDLIN(  21)		Float quadPoints_dx = dx;
HXDLIN(  21)		Float quadPoints_dy = dy;
HXDLIN(  21)		Float sin = ::Math_obj::sin(lineInfo_theta);
HXDLIN(  21)		Float cos = ::Math_obj::cos(lineInfo_theta);
HXDLIN(  21)		Float centreX = lineInfo_px;
HXDLIN(  21)		Float centreY = lineInfo_py;
HXDLIN(  21)		Float temp = ((Float)0.);
HXLINE( 108)		temp = (centreX + ((quadPoints_ax * cos) - (quadPoints_ay * sin)));
HXLINE(  21)		quadPoints_ay = (centreY + ((quadPoints_ay * cos) + (quadPoints_ax * sin)));
HXDLIN(  21)		quadPoints_ax = temp;
HXLINE( 112)		temp = (centreX + ((quadPoints_bx * cos) - (quadPoints_by * sin)));
HXLINE(  21)		quadPoints_by = (centreY + ((quadPoints_by * cos) + (quadPoints_bx * sin)));
HXDLIN(  21)		quadPoints_bx = temp;
HXLINE( 116)		temp = (centreX + ((quadPoints_cx * cos) - (quadPoints_cy * sin)));
HXLINE(  21)		quadPoints_cy = (centreY + ((quadPoints_cy * cos) + (quadPoints_cx * sin)));
HXDLIN(  21)		quadPoints_cx = temp;
HXLINE( 120)		temp = (centreX + ((quadPoints_dx * cos) - (quadPoints_dy * sin)));
HXLINE(  21)		quadPoints_dy = (centreY + ((quadPoints_dy * cos) + (quadPoints_dx * sin)));
HXDLIN(  21)		quadPoints_dx = temp;
HXLINE(  22)		{
HXLINE(  22)			Float ax1 = quadPoints_ax;
HXDLIN(  22)			Float ay1 = quadPoints_ay;
HXDLIN(  22)			Float bx1 = quadPoints_bx;
HXDLIN(  22)			Float by1 = quadPoints_by;
HXDLIN(  22)			Float cx1 = quadPoints_dx;
HXDLIN(  22)			Float cy1 = quadPoints_dy;
HXDLIN(  22)			bool softAB = true;
HXDLIN(  22)			bool softBC = false;
HXDLIN(  22)			bool softCA = true;
HXDLIN(  22)			bool adjustWinding = (((((ax1 * by1) - (bx1 * ay1)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay1) - (ax1 * cy1))) > 0);
HXDLIN(  22)			if (!(adjustWinding)) {
HXLINE(  22)				Float bx_ = bx1;
HXDLIN(  22)				Float by_ = by1;
HXLINE(  62)				bx1 = cx1;
HXLINE(  63)				by1 = cy1;
HXLINE(  64)				cx1 = bx_;
HXLINE(  65)				cy1 = by_;
            			}
HXLINE(  22)			{
HXLINE(  22)				int aA = ((colorB >> 24) & 255);
HXDLIN(  22)				int rA = ((colorB >> 16) & 255);
HXDLIN(  22)				int gA = ((colorB >> 8) & 255);
HXDLIN(  22)				int bA = (colorB & 255);
HXDLIN(  22)				int aB = ((colorA >> 24) & 255);
HXDLIN(  22)				int rB = ((colorA >> 16) & 255);
HXDLIN(  22)				int gB = ((colorA >> 8) & 255);
HXDLIN(  22)				int bB = (colorA & 255);
HXDLIN(  22)				int aC = ((colorD >> 24) & 255);
HXDLIN(  22)				int rC = ((colorD >> 16) & 255);
HXDLIN(  22)				int gC = ((colorD >> 8) & 255);
HXDLIN(  22)				int bC = (colorD & 255);
HXDLIN(  22)				int a1 = 0;
HXDLIN(  22)				int r = 0;
HXDLIN(  22)				int g = 0;
HXDLIN(  22)				int b = 0;
HXDLIN(  22)				 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,true);
HXDLIN(  22)				 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN(  22)				 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN(  22)				Float barycentric_dot22;
HXDLIN(  22)				Float barycentric_dot12;
HXDLIN(  22)				Float barycentric_dot11;
HXDLIN(  22)				Float barycentric_denom1;
HXDLIN(  22)				Float barycentric_bcy;
HXDLIN(  22)				Float barycentric_bcx;
HXDLIN(  22)				Float barycentric_acy;
HXDLIN(  22)				Float barycentric_acx;
HXDLIN(  22)				Float barycentric_ax = hitTriScalar->ax;
HXDLIN(  22)				Float barycentric_ay = hitTriScalar->ay;
HXDLIN(  22)				Float barycentric_bx = hitTriScalar->bx;
HXDLIN(  22)				Float barycentric_by = hitTriScalar->by;
HXDLIN(  22)				Float barycentric_cx = hitTriScalar->cx;
HXDLIN(  22)				Float barycentric_cy = hitTriScalar->cy;
HXDLIN(  22)				bool barycentric_preCalculated = true;
HXDLIN(  22)				{
HXLINE(  22)					barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN(  22)					barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN(  22)					barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN(  22)					barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN(  22)					Float ax2 = barycentric_bcx;
HXDLIN(  22)					Float ay2 = barycentric_bcy;
HXDLIN(  22)					barycentric_dot11 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  22)					barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN(  22)					Float ax3 = barycentric_acx;
HXDLIN(  22)					Float ay3 = barycentric_acy;
HXDLIN(  22)					barycentric_dot22 = ((ax3 * ax3) + (ay3 * ay3));
HXDLIN(  22)					barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN(  22)					Float a2 = barycentric_ax;
HXDLIN(  22)					Float b1 = barycentric_bx;
HXDLIN(  22)					Float c = barycentric_cx;
HXDLIN(  22)					if ((a2 > b1)) {
HXLINE(  22)						if ((a2 > c)) {
HXLINE(  22)							int min;
HXDLIN(  22)							if ((b1 > c)) {
HXLINE(  22)								min = ::Math_obj::floor(c);
            							}
            							else {
HXLINE(  22)								min = ::Math_obj::floor(b1);
            							}
HXDLIN(  22)							int ii_min = min;
HXDLIN(  22)							int ii_max = ::Math_obj::ceil(a2);
HXDLIN(  22)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            						}
            						else {
HXLINE(  22)							int ii_min1 = ::Math_obj::floor(b1);
HXDLIN(  22)							int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  22)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            						}
            					}
            					else {
HXLINE(  22)						if ((b1 > c)) {
HXLINE(  22)							int min1;
HXDLIN(  22)							if ((a2 > c)) {
HXLINE(  22)								min1 = ::Math_obj::floor(c);
            							}
            							else {
HXLINE(  22)								min1 = ::Math_obj::ceil(a2);
            							}
HXDLIN(  22)							int ii_min2 = min1;
HXDLIN(  22)							int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN(  22)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            						}
            						else {
HXLINE(  22)							int ii_min3 = ::Math_obj::floor(a2);
HXDLIN(  22)							int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  22)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            						}
            					}
HXDLIN(  22)					Float a3 = barycentric_ay;
HXDLIN(  22)					Float b2 = barycentric_by;
HXDLIN(  22)					Float c1 = barycentric_cy;
HXDLIN(  22)					if ((a3 > b2)) {
HXLINE(  22)						if ((a3 > c1)) {
HXLINE(  22)							int min2;
HXDLIN(  22)							if ((b2 > c1)) {
HXLINE(  22)								min2 = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE(  22)								min2 = ::Math_obj::floor(b2);
            							}
HXDLIN(  22)							int ii_min4 = min2;
HXDLIN(  22)							int ii_max4 = ::Math_obj::ceil(a3);
HXDLIN(  22)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            						}
            						else {
HXLINE(  22)							int ii_min5 = ::Math_obj::floor(b2);
HXDLIN(  22)							int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  22)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            						}
            					}
            					else {
HXLINE(  22)						if ((b2 > c1)) {
HXLINE(  22)							int min3;
HXDLIN(  22)							if ((a3 > c1)) {
HXLINE(  22)								min3 = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE(  22)								min3 = ::Math_obj::ceil(a3);
            							}
HXDLIN(  22)							int ii_min6 = min3;
HXDLIN(  22)							int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN(  22)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            						}
            						else {
HXLINE(  22)							int ii_min7 = ::Math_obj::floor(a3);
HXDLIN(  22)							int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  22)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            						}
            					}
            				}
HXDLIN(  22)				Float scaleA;
HXDLIN(  22)				bool scaleA1;
HXDLIN(  22)				if (!(softAB)) {
HXLINE(  22)					scaleA1 = softCA;
            				}
            				else {
HXLINE(  22)					scaleA1 = true;
            				}
HXDLIN(  22)				if (scaleA1) {
HXLINE(  22)					scaleA = ((Float)1.5);
            				}
            				else {
HXLINE(  22)					scaleA = ((Float)1.);
            				}
HXDLIN(  22)				Float scaleB;
HXDLIN(  22)				bool scaleB1;
HXDLIN(  22)				if (!(softAB)) {
HXLINE(  22)					scaleB1 = softBC;
            				}
            				else {
HXLINE(  22)					scaleB1 = true;
            				}
HXDLIN(  22)				if (scaleB1) {
HXLINE(  22)					scaleB = ((Float)1.5);
            				}
            				else {
HXLINE(  22)					scaleB = ((Float)1.);
            				}
HXDLIN(  22)				Float scaleC;
HXDLIN(  22)				bool scaleC1;
HXDLIN(  22)				if (!(softBC)) {
HXLINE(  22)					scaleC1 = softCA;
            				}
            				else {
HXLINE(  22)					scaleC1 = true;
            				}
HXDLIN(  22)				if (scaleC1) {
HXLINE(  22)					scaleC = ((Float)1.5);
            				}
            				else {
HXLINE(  22)					scaleC = ((Float)1.);
            				}
HXDLIN(  22)				Float x0 = ((Float)0.);
HXDLIN(  22)				Float y0 = ((Float)0.);
HXDLIN(  22)				bool isScaledA = true;
HXDLIN(  22)				bool isScaledB = true;
HXDLIN(  22)				bool isScaledC = true;
HXDLIN(  22)				if (isScaledA) {
HXLINE(  22)					if (isScaledB) {
HXLINE(  22)						if (isScaledC) {
HXLINE(  82)							x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)							y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x0 = hitTriScalar->cx;
HXLINE(  80)							y0 = hitTriScalar->cy;
            						}
            					}
            					else {
HXLINE(  22)						if (isScaledC) {
HXLINE(  76)							x0 = hitTriScalar->bx;
HXLINE(  77)							y0 = hitTriScalar->by;
            						}
            						else {
HXLINE(  73)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            						}
            					}
            				}
            				else {
HXLINE(  22)					if (isScaledB) {
HXLINE(  22)						if (isScaledC) {
HXLINE(  70)							x0 = hitTriScalar->ax;
HXLINE(  71)							y0 = hitTriScalar->ay;
            						}
            						else {
HXLINE(  67)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            						}
            					}
            					else {
HXLINE(  22)						if (isScaledC) {
HXLINE(  64)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            						}
            						else {
HXLINE(  61)							x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)							y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  22)				Float ax_;
HXDLIN(  22)				if (isScaledA) {
HXLINE(  22)					Float point = hitTriScalar->ax;
HXDLIN(  22)					point = (point - x0);
HXDLIN(  22)					point = (point * ((Float)0.999));
HXDLIN(  22)					point = (point + x0);
HXDLIN(  22)					ax_ = point;
            				}
            				else {
HXLINE(  22)					ax_ = hitTriScalar->ax;
            				}
HXDLIN(  22)				Float ay_;
HXDLIN(  22)				if (isScaledA) {
HXLINE(  22)					Float point1 = hitTriScalar->ay;
HXDLIN(  22)					point1 = (point1 - y0);
HXDLIN(  22)					point1 = (point1 * ((Float)0.999));
HXDLIN(  22)					point1 = (point1 + y0);
HXDLIN(  22)					ay_ = point1;
            				}
            				else {
HXLINE(  22)					ay_ = hitTriScalar->ay;
            				}
HXDLIN(  22)				Float bx_1;
HXDLIN(  22)				if (isScaledB) {
HXLINE(  22)					Float point2 = hitTriScalar->bx;
HXDLIN(  22)					point2 = (point2 - x0);
HXDLIN(  22)					point2 = (point2 * ((Float)0.999));
HXDLIN(  22)					point2 = (point2 + x0);
HXDLIN(  22)					bx_1 = point2;
            				}
            				else {
HXLINE(  22)					bx_1 = hitTriScalar->bx;
            				}
HXDLIN(  22)				Float by_1;
HXDLIN(  22)				if (isScaledB) {
HXLINE(  22)					Float point3 = hitTriScalar->by;
HXDLIN(  22)					point3 = (point3 - y0);
HXDLIN(  22)					point3 = (point3 * ((Float)0.999));
HXDLIN(  22)					point3 = (point3 + y0);
HXDLIN(  22)					by_1 = point3;
            				}
            				else {
HXLINE(  22)					by_1 = hitTriScalar->by;
            				}
HXDLIN(  22)				Float cx_;
HXDLIN(  22)				if (isScaledC) {
HXLINE(  22)					Float point4 = hitTriScalar->cx;
HXDLIN(  22)					point4 = (point4 - x0);
HXDLIN(  22)					point4 = (point4 * ((Float)0.999));
HXDLIN(  22)					point4 = (point4 + x0);
HXDLIN(  22)					cx_ = point4;
            				}
            				else {
HXLINE(  22)					cx_ = hitTriScalar->cx;
            				}
HXDLIN(  22)				Float cy_;
HXDLIN(  22)				if (isScaledC) {
HXLINE(  22)					Float point5 = hitTriScalar->cy;
HXDLIN(  22)					point5 = (point5 - y0);
HXDLIN(  22)					point5 = (point5 * ((Float)0.999));
HXDLIN(  22)					point5 = (point5 + y0);
HXDLIN(  22)					cy_ = point5;
            				}
            				else {
HXLINE(  22)					cy_ = hitTriScalar->cy;
            				}
HXDLIN(  22)				 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_1,by_1,cx_,cy_,true);
HXDLIN(  22)				Float x01 = ((Float)0.);
HXDLIN(  22)				Float y01 = ((Float)0.);
HXDLIN(  22)				bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN(  22)				bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN(  22)				bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN(  22)				if (isScaledA1) {
HXLINE(  22)					if (isScaledB1) {
HXLINE(  22)						if (isScaledC1) {
HXLINE(  82)							x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)							y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x01 = scaled->cx;
HXLINE(  80)							y01 = scaled->cy;
            						}
            					}
            					else {
HXLINE(  22)						if (isScaledC1) {
HXLINE(  76)							x01 = scaled->bx;
HXLINE(  77)							y01 = scaled->by;
            						}
            						else {
HXLINE(  73)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            						}
            					}
            				}
            				else {
HXLINE(  22)					if (isScaledB1) {
HXLINE(  22)						if (isScaledC1) {
HXLINE(  70)							x01 = scaled->ax;
HXLINE(  71)							y01 = scaled->ay;
            						}
            						else {
HXLINE(  67)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            						}
            					}
            					else {
HXLINE(  22)						if (isScaledC1) {
HXLINE(  64)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            						}
            						else {
HXLINE(  61)							x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)							y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  22)				Float ax_1;
HXDLIN(  22)				if (isScaledA1) {
HXLINE(  22)					Float point6 = scaled->ax;
HXDLIN(  22)					point6 = (point6 - x01);
HXDLIN(  22)					point6 = (point6 * scaleA);
HXDLIN(  22)					point6 = (point6 + x01);
HXDLIN(  22)					ax_1 = point6;
            				}
            				else {
HXLINE(  22)					ax_1 = scaled->ax;
            				}
HXDLIN(  22)				Float ay_1;
HXDLIN(  22)				if (isScaledA1) {
HXLINE(  22)					Float point7 = scaled->ay;
HXDLIN(  22)					point7 = (point7 - y01);
HXDLIN(  22)					point7 = (point7 * scaleA);
HXDLIN(  22)					point7 = (point7 + y01);
HXDLIN(  22)					ay_1 = point7;
            				}
            				else {
HXLINE(  22)					ay_1 = scaled->ay;
            				}
HXDLIN(  22)				Float bx_2;
HXDLIN(  22)				if (isScaledB1) {
HXLINE(  22)					Float point8 = scaled->bx;
HXDLIN(  22)					point8 = (point8 - x01);
HXDLIN(  22)					point8 = (point8 * scaleB);
HXDLIN(  22)					point8 = (point8 + x01);
HXDLIN(  22)					bx_2 = point8;
            				}
            				else {
HXLINE(  22)					bx_2 = scaled->bx;
            				}
HXDLIN(  22)				Float by_2;
HXDLIN(  22)				if (isScaledB1) {
HXLINE(  22)					Float point9 = scaled->by;
HXDLIN(  22)					point9 = (point9 - y01);
HXDLIN(  22)					point9 = (point9 * scaleB);
HXDLIN(  22)					point9 = (point9 + y01);
HXDLIN(  22)					by_2 = point9;
            				}
            				else {
HXLINE(  22)					by_2 = scaled->by;
            				}
HXDLIN(  22)				Float cx_1;
HXDLIN(  22)				if (isScaledC1) {
HXLINE(  22)					Float point10 = scaled->cx;
HXDLIN(  22)					point10 = (point10 - x01);
HXDLIN(  22)					point10 = (point10 * scaleC);
HXDLIN(  22)					point10 = (point10 + x01);
HXDLIN(  22)					cx_1 = point10;
            				}
            				else {
HXLINE(  22)					cx_1 = scaled->cx;
            				}
HXDLIN(  22)				Float cy_1;
HXDLIN(  22)				if (isScaledC1) {
HXLINE(  22)					Float point11 = scaled->cy;
HXDLIN(  22)					point11 = (point11 - y01);
HXDLIN(  22)					point11 = (point11 * scaleC);
HXDLIN(  22)					point11 = (point11 + y01);
HXDLIN(  22)					cy_1 = point11;
            				}
            				else {
HXLINE(  22)					cy_1 = scaled->cy;
            				}
HXDLIN(  22)				scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_2,by_2,cx_1,cy_1,true);
HXDLIN(  22)				{
HXLINE(  22)					 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN(  22)					int _g_min = this1->start;
HXDLIN(  22)					int _g_max = this1->max;
HXDLIN(  22)					while((_g_min < _g_max)){
HXLINE(  22)						_g_min = (_g_min + 1);
HXDLIN(  22)						int px1 = (_g_min - 1);
HXDLIN(  22)						{
HXLINE(  22)							 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN(  22)							int _g_min1 = this2->start;
HXDLIN(  22)							int _g_max1 = this2->max;
HXDLIN(  22)							while((_g_min1 < _g_max1)){
HXLINE(  22)								_g_min1 = (_g_min1 + 1);
HXDLIN(  22)								int py1 = (_g_min1 - 1);
HXDLIN(  22)								Float pcx = (( (Float)(px1) ) - barycentric_cx);
HXDLIN(  22)								Float pcy = (( (Float)(py1) ) - barycentric_cy);
HXDLIN(  22)								Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN(  22)								Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN(  22)								Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN(  22)								Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN(  22)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  22)								Float ratios_ratioA = ratioA;
HXDLIN(  22)								Float ratios_ratioB = ratioB;
HXDLIN(  22)								Float ratios_ratioC = ratioC;
HXDLIN(  22)								Float v;
HXDLIN(  22)								if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  22)									v = ratios_ratioA;
            								}
            								else {
HXLINE(  22)									v = ratios_ratioB;
            								}
HXDLIN(  22)								Float min_;
HXDLIN(  22)								if ((v < ratios_ratioC)) {
HXLINE(  22)									min_ = v;
            								}
            								else {
HXLINE(  22)									min_ = ratios_ratioC;
            								}
HXDLIN(  22)								bool isSoft;
HXDLIN(  22)								if (softAB) {
HXLINE(  22)									if (softBC) {
HXLINE(  22)										if (softCA) {
HXLINE(  22)											isSoft = true;
            										}
            										else {
HXLINE(  22)											if ((min_ != ratios_ratioB)) {
HXLINE(  22)												Float v1;
HXDLIN(  22)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  22)													v1 = ratios_ratioA;
            												}
            												else {
HXLINE(  22)													v1 = ratios_ratioB;
            												}
HXDLIN(  22)												Float isSoft1;
HXDLIN(  22)												if ((v1 < ratios_ratioC)) {
HXLINE(  22)													isSoft1 = v1;
            												}
            												else {
HXLINE(  22)													isSoft1 = ratios_ratioC;
            												}
HXDLIN(  22)												isSoft = (isSoft1 == ratios_ratioC);
            											}
            											else {
HXLINE(  22)												isSoft = true;
            											}
            										}
            									}
            									else {
HXLINE(  22)										if (softCA) {
HXLINE(  22)											if ((min_ != ratios_ratioA)) {
HXLINE(  22)												Float v2;
HXDLIN(  22)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  22)													v2 = ratios_ratioA;
            												}
            												else {
HXLINE(  22)													v2 = ratios_ratioB;
            												}
HXDLIN(  22)												Float isSoft2;
HXDLIN(  22)												if ((v2 < ratios_ratioC)) {
HXLINE(  22)													isSoft2 = v2;
            												}
            												else {
HXLINE(  22)													isSoft2 = ratios_ratioC;
            												}
HXDLIN(  22)												isSoft = (isSoft2 == ratios_ratioC);
            											}
            											else {
HXLINE(  22)												isSoft = true;
            											}
            										}
            										else {
HXLINE(  22)											isSoft = (min_ == ratios_ratioC);
            										}
            									}
            								}
            								else {
HXLINE(  22)									if (softBC) {
HXLINE(  22)										if (softCA) {
HXLINE(  22)											if ((min_ != ratios_ratioA)) {
HXLINE(  22)												Float v3;
HXDLIN(  22)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  22)													v3 = ratios_ratioA;
            												}
            												else {
HXLINE(  22)													v3 = ratios_ratioB;
            												}
HXDLIN(  22)												Float isSoft3;
HXDLIN(  22)												if ((v3 < ratios_ratioC)) {
HXLINE(  22)													isSoft3 = v3;
            												}
            												else {
HXLINE(  22)													isSoft3 = ratios_ratioC;
            												}
HXDLIN(  22)												isSoft = (isSoft3 == ratios_ratioB);
            											}
            											else {
HXLINE(  22)												isSoft = true;
            											}
            										}
            										else {
HXLINE(  22)											isSoft = (min_ == ratios_ratioB);
            										}
            									}
            									else {
HXLINE(  22)										if (softCA) {
HXLINE(  22)											isSoft = (min_ == ratios_ratioA);
            										}
            										else {
HXLINE(  22)											isSoft = false;
            										}
            									}
            								}
HXDLIN(  22)								Float x02 = ((Float)-0.0739127852035666);
HXDLIN(  22)								Float y02 = ((Float)0.703233176253404202);
HXDLIN(  22)								Float x1 = ((Float)-0.353553390593273564);
HXDLIN(  22)								Float y1 = ((Float)0.61237243569579447);
HXDLIN(  22)								Float x2 = ((Float)-0.572061402817684139);
HXDLIN(  22)								Float y2 = ((Float)0.415626937777453465);
HXDLIN(  22)								Float x3 = ((Float)-0.691654801480225401);
HXDLIN(  22)								Float y3 = ((Float)0.147015766465198733);
HXDLIN(  22)								Float x4 = ((Float)-0.691654801480225512);
HXDLIN(  22)								Float y4 = ((Float)-0.147015766465198261);
HXDLIN(  22)								Float averageX = ((Float)0.);
HXDLIN(  22)								Float averageY = ((Float)0.);
HXDLIN(  22)								int hits = 0;
HXDLIN(  22)								Float fractionTotal = ((Float)0.);
HXDLIN(  22)								Float x = (px1 + x02);
HXDLIN(  22)								Float y = (py1 + y02);
HXDLIN(  22)								bool _hx_tmp;
HXDLIN(  22)								bool _hx_tmp1;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN(  22)								bool _hx_tmp2;
HXDLIN(  22)								if ((x > (this3->start - 1))) {
HXLINE(  22)									_hx_tmp2 = (x < (this3->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp2 = false;
            								}
HXDLIN(  22)								if (_hx_tmp2) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN(  22)									if ((y > (this4->start - 1))) {
HXLINE(  22)										_hx_tmp1 = (y < (this4->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp1 = false;
            								}
HXDLIN(  22)								if (_hx_tmp1) {
HXLINE(  22)									Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN(  22)									Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN(  22)									bool _hx_tmp3;
HXDLIN(  22)									if (!((s <= 0))) {
HXLINE(  22)										_hx_tmp3 = (t <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp3 = true;
            									}
HXDLIN(  22)									if (_hx_tmp3) {
HXLINE(  22)										_hx_tmp = false;
            									}
            									else {
HXLINE(  22)										if (((s + t) < hitTriScalar->A)) {
HXLINE(  22)											_hx_tmp = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp = false;
            								}
HXDLIN(  22)								if (_hx_tmp) {
HXLINE(  22)									hits = (hits + 1);
HXDLIN(  22)									averageX = (averageX + x02);
HXDLIN(  22)									averageY = (averageY + y02);
HXDLIN(  22)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  22)								Float x5 = (px1 + x1);
HXDLIN(  22)								Float y5 = (py1 + y1);
HXDLIN(  22)								bool _hx_tmp4;
HXDLIN(  22)								bool _hx_tmp5;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN(  22)								bool _hx_tmp6;
HXDLIN(  22)								if ((x5 > (this5->start - 1))) {
HXLINE(  22)									_hx_tmp6 = (x5 < (this5->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp6 = false;
            								}
HXDLIN(  22)								if (_hx_tmp6) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN(  22)									if ((y5 > (this6->start - 1))) {
HXLINE(  22)										_hx_tmp5 = (y5 < (this6->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp5 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp5 = false;
            								}
HXDLIN(  22)								if (_hx_tmp5) {
HXLINE(  22)									Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN(  22)									Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN(  22)									bool _hx_tmp7;
HXDLIN(  22)									if (!((s1 <= 0))) {
HXLINE(  22)										_hx_tmp7 = (t1 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp7 = true;
            									}
HXDLIN(  22)									if (_hx_tmp7) {
HXLINE(  22)										_hx_tmp4 = false;
            									}
            									else {
HXLINE(  22)										if (((s1 + t1) < hitTriScalar->A)) {
HXLINE(  22)											_hx_tmp4 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp4 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp4 = false;
            								}
HXDLIN(  22)								if (_hx_tmp4) {
HXLINE(  22)									hits = (hits + 1);
HXDLIN(  22)									averageX = (averageX + x1);
HXDLIN(  22)									averageY = (averageY + y1);
HXDLIN(  22)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  22)								Float x6 = (px1 + x2);
HXDLIN(  22)								Float y6 = (py1 + y2);
HXDLIN(  22)								bool _hx_tmp8;
HXDLIN(  22)								bool _hx_tmp9;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN(  22)								bool _hx_tmp10;
HXDLIN(  22)								if ((x6 > (this7->start - 1))) {
HXLINE(  22)									_hx_tmp10 = (x6 < (this7->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp10 = false;
            								}
HXDLIN(  22)								if (_hx_tmp10) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN(  22)									if ((y6 > (this8->start - 1))) {
HXLINE(  22)										_hx_tmp9 = (y6 < (this8->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp9 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp9 = false;
            								}
HXDLIN(  22)								if (_hx_tmp9) {
HXLINE(  22)									Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN(  22)									Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN(  22)									bool _hx_tmp11;
HXDLIN(  22)									if (!((s2 <= 0))) {
HXLINE(  22)										_hx_tmp11 = (t2 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp11 = true;
            									}
HXDLIN(  22)									if (_hx_tmp11) {
HXLINE(  22)										_hx_tmp8 = false;
            									}
            									else {
HXLINE(  22)										if (((s2 + t2) < hitTriScalar->A)) {
HXLINE(  22)											_hx_tmp8 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp8 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp8 = false;
            								}
HXDLIN(  22)								if (_hx_tmp8) {
HXLINE(  22)									hits = (hits + 1);
HXDLIN(  22)									averageX = (averageX + x2);
HXDLIN(  22)									averageY = (averageY + y2);
HXDLIN(  22)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  22)								Float x7 = (px1 + x3);
HXDLIN(  22)								Float y7 = (py1 + y3);
HXDLIN(  22)								bool _hx_tmp12;
HXDLIN(  22)								bool _hx_tmp13;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN(  22)								bool _hx_tmp14;
HXDLIN(  22)								if ((x7 > (this9->start - 1))) {
HXLINE(  22)									_hx_tmp14 = (x7 < (this9->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp14 = false;
            								}
HXDLIN(  22)								if (_hx_tmp14) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN(  22)									if ((y7 > (this10->start - 1))) {
HXLINE(  22)										_hx_tmp13 = (y7 < (this10->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp13 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp13 = false;
            								}
HXDLIN(  22)								if (_hx_tmp13) {
HXLINE(  22)									Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN(  22)									Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN(  22)									bool _hx_tmp15;
HXDLIN(  22)									if (!((s3 <= 0))) {
HXLINE(  22)										_hx_tmp15 = (t3 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp15 = true;
            									}
HXDLIN(  22)									if (_hx_tmp15) {
HXLINE(  22)										_hx_tmp12 = false;
            									}
            									else {
HXLINE(  22)										if (((s3 + t3) < hitTriScalar->A)) {
HXLINE(  22)											_hx_tmp12 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp12 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp12 = false;
            								}
HXDLIN(  22)								if (_hx_tmp12) {
HXLINE(  22)									hits = (hits + 1);
HXDLIN(  22)									averageX = (averageX + x3);
HXDLIN(  22)									averageY = (averageY + y3);
HXDLIN(  22)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  22)								Float x8 = (px1 + x4);
HXDLIN(  22)								Float y8 = (py1 + y4);
HXDLIN(  22)								bool _hx_tmp16;
HXDLIN(  22)								bool _hx_tmp17;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN(  22)								bool _hx_tmp18;
HXDLIN(  22)								if ((x8 > (this11->start - 1))) {
HXLINE(  22)									_hx_tmp18 = (x8 < (this11->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp18 = false;
            								}
HXDLIN(  22)								if (_hx_tmp18) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN(  22)									if ((y8 > (this12->start - 1))) {
HXLINE(  22)										_hx_tmp17 = (y8 < (this12->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp17 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp17 = false;
            								}
HXDLIN(  22)								if (_hx_tmp17) {
HXLINE(  22)									Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN(  22)									Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN(  22)									bool _hx_tmp19;
HXDLIN(  22)									if (!((s4 <= 0))) {
HXLINE(  22)										_hx_tmp19 = (t4 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp19 = true;
            									}
HXDLIN(  22)									if (_hx_tmp19) {
HXLINE(  22)										_hx_tmp16 = false;
            									}
            									else {
HXLINE(  22)										if (((s4 + t4) < hitTriScalar->A)) {
HXLINE(  22)											_hx_tmp16 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp16 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp16 = false;
            								}
HXDLIN(  22)								if (_hx_tmp16) {
HXLINE(  22)									hits = (hits + 1);
HXDLIN(  22)									averageX = (averageX + x4);
HXDLIN(  22)									averageY = (averageY + y4);
HXDLIN(  22)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  22)								if ((hits != 0)) {
HXLINE( 244)									averageX = (px1 + (averageX / ( (Float)(hits) )));
HXLINE( 245)									averageY = (py1 + (averageY / ( (Float)(hits) )));
            								}
            								else {
HXLINE( 247)									averageX = ( (Float)(px1) );
HXLINE( 248)									averageY = ( (Float)(py1) );
            								}
HXLINE(  22)								Float fractionTotal1 = fractionTotal;
HXDLIN(  22)								Float sampleData_fractionTotal = fractionTotal1;
HXDLIN(  22)								Float sampleData_averageX = averageX;
HXDLIN(  22)								Float sampleData_averageY = averageY;
HXDLIN(  22)								bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXDLIN(  22)								Float aScale = sampleData_fractionTotal;
HXDLIN(  22)								if (!((aScale > ((Float)0.9)))) {
HXLINE(  22)									aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            								}
HXLINE( 142)								a1 = 0;
HXLINE( 143)								r = 0;
HXLINE( 144)								g = 0;
HXLINE( 145)								b = 0;
HXLINE(  22)								if (isSoft) {
HXLINE(  22)									if (!(sampleData_notHit)) {
HXLINE(  22)										Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN(  22)										Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN(  22)										Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN(  22)										Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN(  22)										Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN(  22)										Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN(  22)										Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  22)										Float ratiosAvg_ratioA = ratioA1;
HXDLIN(  22)										Float ratiosAvg_ratioB = ratioB1;
HXDLIN(  22)										Float ratiosAvg_ratioC = ratioC1;
HXDLIN(  22)										Float ratioA_ = ratiosAvg_ratioA;
HXDLIN(  22)										Float ratioB_ = ratiosAvg_ratioB;
HXDLIN(  22)										Float ratioC_ = ratiosAvg_ratioC;
HXDLIN(  22)										int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN(  22)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  22)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE( 152)										a1 = i;
HXLINE(  22)										int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN(  22)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  22)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE( 153)										r = i1;
HXLINE(  22)										int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN(  22)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  22)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE( 154)										g = i2;
HXLINE(  22)										int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN(  22)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  22)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE( 155)										b = i3;
HXLINE(  22)										{
HXLINE(  22)											int a4;
HXDLIN(  22)											if ((aScale > ((Float)0.9))) {
HXLINE(  22)												a4 = a1;
            											}
            											else {
HXLINE(  22)												int i4 = ::Std_obj::_hx_int((( (Float)(a1) ) * aScale));
HXDLIN(  22)												if ((i4 > 255)) {
HXLINE(  24)													i4 = 255;
            												}
HXLINE(  22)												if ((i4 < 0)) {
HXLINE(  25)													i4 = 0;
            												}
HXLINE(  22)												a4 = i4;
            											}
HXDLIN(  22)											int location;
HXDLIN(  22)											if (pixelImage->useVirtualPos) {
HXLINE(  22)												location = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  22)												location = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            											}
HXDLIN(  22)											bool _hx_tmp20;
HXDLIN(  22)											if (pixelImage->transparent) {
HXLINE(  22)												_hx_tmp20 = (a4 < 254);
            											}
            											else {
HXLINE(  22)												_hx_tmp20 = false;
            											}
HXDLIN(  22)											if (_hx_tmp20) {
HXLINE(  22)												int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  22)												int old;
HXDLIN(  22)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)													old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            												}
            												else {
HXLINE(  22)													old = this13;
            												}
HXDLIN(  22)												int rhs = ((((a4 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  22)												Float a11;
HXDLIN(  22)												int this14 = ((old >> 24) & 255);
HXDLIN(  22)												if ((this14 == 0)) {
HXLINE(  22)													a11 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float r1;
HXDLIN(  22)												int this15 = ((old >> 16) & 255);
HXDLIN(  22)												if ((this15 == 0)) {
HXLINE(  22)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float g1;
HXDLIN(  22)												int this16 = ((old >> 8) & 255);
HXDLIN(  22)												if ((this16 == 0)) {
HXLINE(  22)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float b11;
HXDLIN(  22)												int this17 = (old & 255);
HXDLIN(  22)												if ((this17 == 0)) {
HXLINE(  22)													b11 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float a21;
HXDLIN(  22)												int this18 = ((rhs >> 24) & 255);
HXDLIN(  22)												if ((this18 == 0)) {
HXLINE(  22)													a21 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float r2;
HXDLIN(  22)												int this19 = ((rhs >> 16) & 255);
HXDLIN(  22)												if ((this19 == 0)) {
HXLINE(  22)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float g2;
HXDLIN(  22)												int this20 = ((rhs >> 8) & 255);
HXDLIN(  22)												if ((this20 == 0)) {
HXLINE(  22)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float b21;
HXDLIN(  22)												int this21 = (rhs & 255);
HXDLIN(  22)												if ((this21 == 0)) {
HXLINE(  22)													b21 = ((Float)0.);
            												}
            												else {
HXLINE(  22)													b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            												}
HXDLIN(  22)												Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  22)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN(  22)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN(  22)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  22)												int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  22)												int blended = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  22)												{
HXLINE(  22)													int _hx_tmp21;
HXDLIN(  22)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)														_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  22)														_hx_tmp21 = blended;
            													}
HXDLIN(  22)													::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            												}
            											}
            											else {
HXLINE(  22)												int value;
HXDLIN(  22)												if (pixelImage->isLittle) {
HXLINE(  22)													value = ((((a4 << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  22)													value = ((((a4 << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  22)												::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            											}
            										}
            									}
            								}
            								else {
HXLINE(  22)									Float ratioA2 = ratios_ratioA;
HXDLIN(  22)									Float ratioB2 = ratios_ratioB;
HXDLIN(  22)									Float ratioC2 = ratios_ratioC;
HXDLIN(  22)									Float hitTotal = sampleData_fractionTotal;
HXDLIN(  22)									if (!(sampleData_notHit)) {
HXLINE(  22)										Float x03 = ((Float)-0.0739127852035666);
HXDLIN(  22)										Float y03 = ((Float)0.703233176253404202);
HXDLIN(  22)										Float x11 = ((Float)-0.353553390593273564);
HXDLIN(  22)										Float y11 = ((Float)0.61237243569579447);
HXDLIN(  22)										Float x21 = ((Float)-0.572061402817684139);
HXDLIN(  22)										Float y21 = ((Float)0.415626937777453465);
HXDLIN(  22)										Float x31 = ((Float)-0.691654801480225401);
HXDLIN(  22)										Float y31 = ((Float)0.147015766465198733);
HXDLIN(  22)										Float x41 = ((Float)-0.691654801480225512);
HXDLIN(  22)										Float y41 = ((Float)-0.147015766465198261);
HXDLIN(  22)										Float averageX1 = ((Float)0.);
HXDLIN(  22)										Float averageY1 = ((Float)0.);
HXDLIN(  22)										int hits1 = 0;
HXDLIN(  22)										Float fractionTotal2 = ((Float)0.);
HXDLIN(  22)										Float x9 = (px1 + x03);
HXDLIN(  22)										Float y9 = (py1 + y03);
HXDLIN(  22)										bool _hx_tmp22;
HXDLIN(  22)										bool _hx_tmp23;
HXDLIN(  22)										 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN(  22)										bool _hx_tmp24;
HXDLIN(  22)										if ((x9 > (this22->start - 1))) {
HXLINE(  22)											_hx_tmp24 = (x9 < (this22->max + 1));
            										}
            										else {
HXLINE(  22)											_hx_tmp24 = false;
            										}
HXDLIN(  22)										if (_hx_tmp24) {
HXLINE(  22)											 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN(  22)											if ((y9 > (this23->start - 1))) {
HXLINE(  22)												_hx_tmp23 = (y9 < (this23->max + 1));
            											}
            											else {
HXLINE(  22)												_hx_tmp23 = false;
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp23 = false;
            										}
HXDLIN(  22)										if (_hx_tmp23) {
HXLINE(  22)											Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN(  22)											Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN(  22)											bool _hx_tmp25;
HXDLIN(  22)											if (!((s5 <= 0))) {
HXLINE(  22)												_hx_tmp25 = (t5 <= 0);
            											}
            											else {
HXLINE(  22)												_hx_tmp25 = true;
            											}
HXDLIN(  22)											if (_hx_tmp25) {
HXLINE(  22)												_hx_tmp22 = false;
            											}
            											else {
HXLINE(  22)												if (((s5 + t5) < scaled->A)) {
HXLINE(  22)													_hx_tmp22 = true;
            												}
            												else {
HXLINE(  22)													_hx_tmp22 = false;
            												}
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp22 = false;
            										}
HXDLIN(  22)										if (_hx_tmp22) {
HXLINE(  22)											hits1 = (hits1 + 1);
HXDLIN(  22)											averageX1 = (averageX1 + x03);
HXDLIN(  22)											averageY1 = (averageY1 + y03);
HXDLIN(  22)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  22)										Float x10 = (px1 + x11);
HXDLIN(  22)										Float y10 = (py1 + y11);
HXDLIN(  22)										bool _hx_tmp26;
HXDLIN(  22)										bool _hx_tmp27;
HXDLIN(  22)										 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN(  22)										bool _hx_tmp28;
HXDLIN(  22)										if ((x10 > (this24->start - 1))) {
HXLINE(  22)											_hx_tmp28 = (x10 < (this24->max + 1));
            										}
            										else {
HXLINE(  22)											_hx_tmp28 = false;
            										}
HXDLIN(  22)										if (_hx_tmp28) {
HXLINE(  22)											 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN(  22)											if ((y10 > (this25->start - 1))) {
HXLINE(  22)												_hx_tmp27 = (y10 < (this25->max + 1));
            											}
            											else {
HXLINE(  22)												_hx_tmp27 = false;
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp27 = false;
            										}
HXDLIN(  22)										if (_hx_tmp27) {
HXLINE(  22)											Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN(  22)											Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN(  22)											bool _hx_tmp29;
HXDLIN(  22)											if (!((s6 <= 0))) {
HXLINE(  22)												_hx_tmp29 = (t6 <= 0);
            											}
            											else {
HXLINE(  22)												_hx_tmp29 = true;
            											}
HXDLIN(  22)											if (_hx_tmp29) {
HXLINE(  22)												_hx_tmp26 = false;
            											}
            											else {
HXLINE(  22)												if (((s6 + t6) < scaled->A)) {
HXLINE(  22)													_hx_tmp26 = true;
            												}
            												else {
HXLINE(  22)													_hx_tmp26 = false;
            												}
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp26 = false;
            										}
HXDLIN(  22)										if (_hx_tmp26) {
HXLINE(  22)											hits1 = (hits1 + 1);
HXDLIN(  22)											averageX1 = (averageX1 + x11);
HXDLIN(  22)											averageY1 = (averageY1 + y11);
HXDLIN(  22)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  22)										Float x12 = (px1 + x21);
HXDLIN(  22)										Float y12 = (py1 + y21);
HXDLIN(  22)										bool _hx_tmp30;
HXDLIN(  22)										bool _hx_tmp31;
HXDLIN(  22)										 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN(  22)										bool _hx_tmp32;
HXDLIN(  22)										if ((x12 > (this26->start - 1))) {
HXLINE(  22)											_hx_tmp32 = (x12 < (this26->max + 1));
            										}
            										else {
HXLINE(  22)											_hx_tmp32 = false;
            										}
HXDLIN(  22)										if (_hx_tmp32) {
HXLINE(  22)											 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN(  22)											if ((y12 > (this27->start - 1))) {
HXLINE(  22)												_hx_tmp31 = (y12 < (this27->max + 1));
            											}
            											else {
HXLINE(  22)												_hx_tmp31 = false;
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp31 = false;
            										}
HXDLIN(  22)										if (_hx_tmp31) {
HXLINE(  22)											Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN(  22)											Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN(  22)											bool _hx_tmp33;
HXDLIN(  22)											if (!((s7 <= 0))) {
HXLINE(  22)												_hx_tmp33 = (t7 <= 0);
            											}
            											else {
HXLINE(  22)												_hx_tmp33 = true;
            											}
HXDLIN(  22)											if (_hx_tmp33) {
HXLINE(  22)												_hx_tmp30 = false;
            											}
            											else {
HXLINE(  22)												if (((s7 + t7) < scaled->A)) {
HXLINE(  22)													_hx_tmp30 = true;
            												}
            												else {
HXLINE(  22)													_hx_tmp30 = false;
            												}
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp30 = false;
            										}
HXDLIN(  22)										if (_hx_tmp30) {
HXLINE(  22)											hits1 = (hits1 + 1);
HXDLIN(  22)											averageX1 = (averageX1 + x21);
HXDLIN(  22)											averageY1 = (averageY1 + y21);
HXDLIN(  22)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  22)										Float x13 = (px1 + x31);
HXDLIN(  22)										Float y13 = (py1 + y31);
HXDLIN(  22)										bool _hx_tmp34;
HXDLIN(  22)										bool _hx_tmp35;
HXDLIN(  22)										 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN(  22)										bool _hx_tmp36;
HXDLIN(  22)										if ((x13 > (this28->start - 1))) {
HXLINE(  22)											_hx_tmp36 = (x13 < (this28->max + 1));
            										}
            										else {
HXLINE(  22)											_hx_tmp36 = false;
            										}
HXDLIN(  22)										if (_hx_tmp36) {
HXLINE(  22)											 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN(  22)											if ((y13 > (this29->start - 1))) {
HXLINE(  22)												_hx_tmp35 = (y13 < (this29->max + 1));
            											}
            											else {
HXLINE(  22)												_hx_tmp35 = false;
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp35 = false;
            										}
HXDLIN(  22)										if (_hx_tmp35) {
HXLINE(  22)											Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN(  22)											Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN(  22)											bool _hx_tmp37;
HXDLIN(  22)											if (!((s8 <= 0))) {
HXLINE(  22)												_hx_tmp37 = (t8 <= 0);
            											}
            											else {
HXLINE(  22)												_hx_tmp37 = true;
            											}
HXDLIN(  22)											if (_hx_tmp37) {
HXLINE(  22)												_hx_tmp34 = false;
            											}
            											else {
HXLINE(  22)												if (((s8 + t8) < scaled->A)) {
HXLINE(  22)													_hx_tmp34 = true;
            												}
            												else {
HXLINE(  22)													_hx_tmp34 = false;
            												}
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp34 = false;
            										}
HXDLIN(  22)										if (_hx_tmp34) {
HXLINE(  22)											hits1 = (hits1 + 1);
HXDLIN(  22)											averageX1 = (averageX1 + x31);
HXDLIN(  22)											averageY1 = (averageY1 + y31);
HXDLIN(  22)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  22)										Float x14 = (px1 + x41);
HXDLIN(  22)										Float y14 = (py1 + y41);
HXDLIN(  22)										bool _hx_tmp38;
HXDLIN(  22)										bool _hx_tmp39;
HXDLIN(  22)										 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN(  22)										bool _hx_tmp40;
HXDLIN(  22)										if ((x14 > (this30->start - 1))) {
HXLINE(  22)											_hx_tmp40 = (x14 < (this30->max + 1));
            										}
            										else {
HXLINE(  22)											_hx_tmp40 = false;
            										}
HXDLIN(  22)										if (_hx_tmp40) {
HXLINE(  22)											 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN(  22)											if ((y14 > (this31->start - 1))) {
HXLINE(  22)												_hx_tmp39 = (y14 < (this31->max + 1));
            											}
            											else {
HXLINE(  22)												_hx_tmp39 = false;
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp39 = false;
            										}
HXDLIN(  22)										if (_hx_tmp39) {
HXLINE(  22)											Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN(  22)											Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN(  22)											bool _hx_tmp41;
HXDLIN(  22)											if (!((s9 <= 0))) {
HXLINE(  22)												_hx_tmp41 = (t9 <= 0);
            											}
            											else {
HXLINE(  22)												_hx_tmp41 = true;
            											}
HXDLIN(  22)											if (_hx_tmp41) {
HXLINE(  22)												_hx_tmp38 = false;
            											}
            											else {
HXLINE(  22)												if (((s9 + t9) < scaled->A)) {
HXLINE(  22)													_hx_tmp38 = true;
            												}
            												else {
HXLINE(  22)													_hx_tmp38 = false;
            												}
            											}
            										}
            										else {
HXLINE(  22)											_hx_tmp38 = false;
            										}
HXDLIN(  22)										if (_hx_tmp38) {
HXLINE(  22)											hits1 = (hits1 + 1);
HXDLIN(  22)											averageX1 = (averageX1 + x41);
HXDLIN(  22)											averageY1 = (averageY1 + y41);
HXDLIN(  22)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  22)										if ((hits1 != 0)) {
HXLINE( 244)											averageX1 = (px1 + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)											averageY1 = (py1 + (averageY1 / ( (Float)(hits1) )));
            										}
            										else {
HXLINE( 247)											averageX1 = ( (Float)(px1) );
HXLINE( 248)											averageY1 = ( (Float)(py1) );
            										}
HXLINE(  22)										Float fractionTotal3 = fractionTotal2;
HXDLIN(  22)										Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN(  22)										Float sampleScaled_averageX = averageX1;
HXDLIN(  22)										Float sampleScaled_averageY = averageY1;
HXDLIN(  22)										bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXDLIN(  22)										Float scaledTotal = sampleScaled_fractionTotal;
HXDLIN(  22)										bool _hx_tmp42;
HXDLIN(  22)										if (!((scaledTotal > hitTotal))) {
HXLINE(  22)											_hx_tmp42 = (hitTotal == ((Float)1.));
            										}
            										else {
HXLINE(  22)											_hx_tmp42 = true;
            										}
HXDLIN(  22)										if (_hx_tmp42) {
HXLINE(  22)											Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN(  22)											Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN(  22)											Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN(  22)											Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN(  22)											Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN(  22)											Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN(  22)											Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  22)											Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN(  22)											Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN(  22)											Float ratiosAvg_ratioC1 = ratioC3;
HXDLIN(  22)											Float ratioA_1 = ratiosAvg_ratioA1;
HXDLIN(  22)											Float ratioB_1 = ratiosAvg_ratioB1;
HXDLIN(  22)											Float ratioC_1 = ratiosAvg_ratioC1;
HXDLIN(  22)											int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN(  22)											if ((i5 > 255)) {
HXLINE(  24)												i5 = 255;
            											}
HXLINE(  22)											if ((i5 < 0)) {
HXLINE(  25)												i5 = 0;
            											}
HXLINE( 187)											a1 = i5;
HXLINE(  22)											int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN(  22)											if ((i6 > 255)) {
HXLINE(  24)												i6 = 255;
            											}
HXLINE(  22)											if ((i6 < 0)) {
HXLINE(  25)												i6 = 0;
            											}
HXLINE( 188)											r = i6;
HXLINE(  22)											int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN(  22)											if ((i7 > 255)) {
HXLINE(  24)												i7 = 255;
            											}
HXLINE(  22)											if ((i7 < 0)) {
HXLINE(  25)												i7 = 0;
            											}
HXLINE( 189)											g = i7;
HXLINE(  22)											int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN(  22)											if ((i8 > 255)) {
HXLINE(  24)												i8 = 255;
            											}
HXLINE(  22)											if ((i8 < 0)) {
HXLINE(  25)												i8 = 0;
            											}
HXLINE( 190)											b = i8;
HXLINE(  22)											{
HXLINE(  22)												int location1;
HXDLIN(  22)												if (pixelImage->useVirtualPos) {
HXLINE(  22)													location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  22)													location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            												}
HXDLIN(  22)												bool _hx_tmp43;
HXDLIN(  22)												if (pixelImage->transparent) {
HXLINE(  22)													_hx_tmp43 = (a1 < 254);
            												}
            												else {
HXLINE(  22)													_hx_tmp43 = false;
            												}
HXDLIN(  22)												if (_hx_tmp43) {
HXLINE(  22)													int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  22)													int old1;
HXDLIN(  22)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)														old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            													}
            													else {
HXLINE(  22)														old1 = this32;
            													}
HXDLIN(  22)													int rhs1 = ((((a1 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  22)													Float a12;
HXDLIN(  22)													int this33 = ((old1 >> 24) & 255);
HXDLIN(  22)													if ((this33 == 0)) {
HXLINE(  22)														a12 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float r11;
HXDLIN(  22)													int this34 = ((old1 >> 16) & 255);
HXDLIN(  22)													if ((this34 == 0)) {
HXLINE(  22)														r11 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float g11;
HXDLIN(  22)													int this35 = ((old1 >> 8) & 255);
HXDLIN(  22)													if ((this35 == 0)) {
HXLINE(  22)														g11 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float b12;
HXDLIN(  22)													int this36 = (old1 & 255);
HXDLIN(  22)													if ((this36 == 0)) {
HXLINE(  22)														b12 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float a22;
HXDLIN(  22)													int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  22)													if ((this37 == 0)) {
HXLINE(  22)														a22 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float r21;
HXDLIN(  22)													int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  22)													if ((this38 == 0)) {
HXLINE(  22)														r21 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float g21;
HXDLIN(  22)													int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  22)													if ((this39 == 0)) {
HXLINE(  22)														g21 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float b22;
HXDLIN(  22)													int this40 = (rhs1 & 255);
HXDLIN(  22)													if ((this40 == 0)) {
HXLINE(  22)														b22 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  22)													int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN(  22)													int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN(  22)													int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  22)													int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  22)													int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  22)													{
HXLINE(  22)														int _hx_tmp44;
HXDLIN(  22)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)															_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            														}
            														else {
HXLINE(  22)															_hx_tmp44 = blended1;
            														}
HXDLIN(  22)														::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            													}
            												}
            												else {
HXLINE(  22)													int value1;
HXDLIN(  22)													if (pixelImage->isLittle) {
HXLINE(  22)														value1 = ((((a1 << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  22)														value1 = ((((a1 << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  22)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            												}
            											}
            										}
            										else {
HXLINE(  22)											Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN(  22)											Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN(  22)											Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN(  22)											Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN(  22)											Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN(  22)											Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN(  22)											Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  22)											Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN(  22)											Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN(  22)											Float ratiosAvg_ratioC2 = ratioC4;
HXDLIN(  22)											Float ratioA_2 = ratiosAvg_ratioA2;
HXDLIN(  22)											Float ratioB_2 = ratiosAvg_ratioB2;
HXDLIN(  22)											Float ratioC_2 = ratiosAvg_ratioC2;
HXDLIN(  22)											int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN(  22)											if ((i9 > 255)) {
HXLINE(  24)												i9 = 255;
            											}
HXLINE(  22)											if ((i9 < 0)) {
HXLINE(  25)												i9 = 0;
            											}
HXLINE( 198)											a1 = i9;
HXLINE(  22)											int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN(  22)											if ((i10 > 255)) {
HXLINE(  24)												i10 = 255;
            											}
HXLINE(  22)											if ((i10 < 0)) {
HXLINE(  25)												i10 = 0;
            											}
HXLINE( 199)											r = i10;
HXLINE(  22)											int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN(  22)											if ((i11 > 255)) {
HXLINE(  24)												i11 = 255;
            											}
HXLINE(  22)											if ((i11 < 0)) {
HXLINE(  25)												i11 = 0;
            											}
HXLINE( 200)											g = i11;
HXLINE(  22)											int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN(  22)											if ((i12 > 255)) {
HXLINE(  24)												i12 = 255;
            											}
HXLINE(  22)											if ((i12 < 0)) {
HXLINE(  25)												i12 = 0;
            											}
HXLINE( 201)											b = i12;
HXLINE(  22)											{
HXLINE(  22)												int a7;
HXDLIN(  22)												if ((aScale > ((Float)0.9))) {
HXLINE(  22)													a7 = a1;
            												}
            												else {
HXLINE(  22)													int i13 = ::Std_obj::_hx_int((( (Float)(a1) ) * aScale));
HXDLIN(  22)													if ((i13 > 255)) {
HXLINE(  24)														i13 = 255;
            													}
HXLINE(  22)													if ((i13 < 0)) {
HXLINE(  25)														i13 = 0;
            													}
HXLINE(  22)													a7 = i13;
            												}
HXDLIN(  22)												int location2;
HXDLIN(  22)												if (pixelImage->useVirtualPos) {
HXLINE(  22)													location2 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  22)													location2 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            												}
HXDLIN(  22)												bool _hx_tmp45;
HXDLIN(  22)												if (pixelImage->transparent) {
HXLINE(  22)													_hx_tmp45 = (a7 < 254);
            												}
            												else {
HXLINE(  22)													_hx_tmp45 = false;
            												}
HXDLIN(  22)												if (_hx_tmp45) {
HXLINE(  22)													int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  22)													int old2;
HXDLIN(  22)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)														old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            													}
            													else {
HXLINE(  22)														old2 = this41;
            													}
HXDLIN(  22)													int rhs2 = ((((a7 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  22)													Float a13;
HXDLIN(  22)													int this42 = ((old2 >> 24) & 255);
HXDLIN(  22)													if ((this42 == 0)) {
HXLINE(  22)														a13 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float r12;
HXDLIN(  22)													int this43 = ((old2 >> 16) & 255);
HXDLIN(  22)													if ((this43 == 0)) {
HXLINE(  22)														r12 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float g12;
HXDLIN(  22)													int this44 = ((old2 >> 8) & 255);
HXDLIN(  22)													if ((this44 == 0)) {
HXLINE(  22)														g12 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float b13;
HXDLIN(  22)													int this45 = (old2 & 255);
HXDLIN(  22)													if ((this45 == 0)) {
HXLINE(  22)														b13 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float a23;
HXDLIN(  22)													int this46 = ((rhs2 >> 24) & 255);
HXDLIN(  22)													if ((this46 == 0)) {
HXLINE(  22)														a23 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float r22;
HXDLIN(  22)													int this47 = ((rhs2 >> 16) & 255);
HXDLIN(  22)													if ((this47 == 0)) {
HXLINE(  22)														r22 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float g22;
HXDLIN(  22)													int this48 = ((rhs2 >> 8) & 255);
HXDLIN(  22)													if ((this48 == 0)) {
HXLINE(  22)														g22 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float b23;
HXDLIN(  22)													int this49 = (rhs2 & 255);
HXDLIN(  22)													if ((this49 == 0)) {
HXLINE(  22)														b23 = ((Float)0.);
            													}
            													else {
HXLINE(  22)														b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN(  22)													Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  22)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN(  22)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN(  22)													int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  22)													int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  22)													int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  22)													{
HXLINE(  22)														int _hx_tmp46;
HXDLIN(  22)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)															_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE(  22)															_hx_tmp46 = blended2;
            														}
HXDLIN(  22)														::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            													}
            												}
            												else {
HXLINE(  22)													int value2;
HXDLIN(  22)													if (pixelImage->isLittle) {
HXLINE(  22)														value2 = ((((a7 << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  22)														value2 = ((((a7 << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  22)													::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  22)				if ((hasHit == false)) {
HXLINE(  22)					 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,true);
            				}
            			}
            		}
HXDLIN(  22)		Float ax4 = quadPoints_bx;
HXDLIN(  22)		Float ay4 = quadPoints_by;
HXDLIN(  22)		Float bx2 = quadPoints_cx;
HXDLIN(  22)		Float by2 = quadPoints_cy;
HXDLIN(  22)		Float cx2 = quadPoints_dx;
HXDLIN(  22)		Float cy2 = quadPoints_dy;
HXDLIN(  22)		bool softAB1 = true;
HXDLIN(  22)		bool softBC1 = true;
HXDLIN(  22)		bool softCA1 = false;
HXDLIN(  22)		bool adjustWinding1 = (((((ax4 * by2) - (bx2 * ay4)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay4) - (ax4 * cy2))) > 0);
HXDLIN(  22)		if (!(adjustWinding1)) {
HXLINE(  22)			Float bx_3 = bx2;
HXDLIN(  22)			Float by_3 = by2;
HXLINE(  87)			bx2 = cx2;
HXLINE(  88)			by2 = cy2;
HXLINE(  89)			cx2 = bx_3;
HXLINE(  90)			cy2 = by_3;
            		}
HXLINE(  22)		int aA1 = ((colorC >> 24) & 255);
HXDLIN(  22)		int rA1 = ((colorC >> 16) & 255);
HXDLIN(  22)		int gA1 = ((colorC >> 8) & 255);
HXDLIN(  22)		int bA1 = (colorC & 255);
HXDLIN(  22)		int aB1 = ((colorB >> 24) & 255);
HXDLIN(  22)		int rB1 = ((colorB >> 16) & 255);
HXDLIN(  22)		int gB1 = ((colorB >> 8) & 255);
HXDLIN(  22)		int bB1 = (colorB & 255);
HXDLIN(  22)		int aC1 = ((colorD >> 24) & 255);
HXDLIN(  22)		int rC1 = ((colorD >> 16) & 255);
HXDLIN(  22)		int gC1 = ((colorD >> 8) & 255);
HXDLIN(  22)		int bC1 = (colorD & 255);
HXDLIN(  22)		int a9 = 0;
HXDLIN(  22)		int r6 = 0;
HXDLIN(  22)		int g6 = 0;
HXDLIN(  22)		int b6 = 0;
HXDLIN(  22)		 ::pi_xy::algo::HitTri hitTriScalar1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax4,ay4,bx2,by2,cx2,cy2,true);
HXDLIN(  22)		 ::pi_xy::iter::IntIterStart barycentric_yIter31;
HXDLIN(  22)		 ::pi_xy::iter::IntIterStart barycentric_xIter31;
HXDLIN(  22)		Float barycentric_dot221;
HXDLIN(  22)		Float barycentric_dot121;
HXDLIN(  22)		Float barycentric_dot111;
HXDLIN(  22)		Float barycentric_denom11;
HXDLIN(  22)		Float barycentric_bcy1;
HXDLIN(  22)		Float barycentric_bcx1;
HXDLIN(  22)		Float barycentric_acy1;
HXDLIN(  22)		Float barycentric_acx1;
HXDLIN(  22)		Float barycentric_ax1 = hitTriScalar1->ax;
HXDLIN(  22)		Float barycentric_ay1 = hitTriScalar1->ay;
HXDLIN(  22)		Float barycentric_bx1 = hitTriScalar1->bx;
HXDLIN(  22)		Float barycentric_by1 = hitTriScalar1->by;
HXDLIN(  22)		Float barycentric_cx1 = hitTriScalar1->cx;
HXDLIN(  22)		Float barycentric_cy1 = hitTriScalar1->cy;
HXDLIN(  22)		bool barycentric_preCalculated1 = true;
HXDLIN(  22)		{
HXLINE(  22)			barycentric_bcx1 = (barycentric_bx1 - barycentric_cx1);
HXDLIN(  22)			barycentric_bcy1 = (barycentric_by1 - barycentric_cy1);
HXDLIN(  22)			barycentric_acx1 = (barycentric_ax1 - barycentric_cx1);
HXDLIN(  22)			barycentric_acy1 = (barycentric_ay1 - barycentric_cy1);
HXDLIN(  22)			Float ax5 = barycentric_bcx1;
HXDLIN(  22)			Float ay5 = barycentric_bcy1;
HXDLIN(  22)			barycentric_dot111 = ((ax5 * ax5) + (ay5 * ay5));
HXDLIN(  22)			barycentric_dot121 = ((barycentric_bcx1 * barycentric_acx1) + (barycentric_bcy1 * barycentric_acy1));
HXDLIN(  22)			Float ax6 = barycentric_acx1;
HXDLIN(  22)			Float ay6 = barycentric_acy1;
HXDLIN(  22)			barycentric_dot221 = ((ax6 * ax6) + (ay6 * ay6));
HXDLIN(  22)			barycentric_denom11 = (( (Float)(1) ) / ((barycentric_dot111 * barycentric_dot221) - (barycentric_dot121 * barycentric_dot121)));
HXDLIN(  22)			Float a10 = barycentric_ax1;
HXDLIN(  22)			Float b7 = barycentric_bx1;
HXDLIN(  22)			Float c2 = barycentric_cx1;
HXDLIN(  22)			if ((a10 > b7)) {
HXLINE(  22)				if ((a10 > c2)) {
HXLINE(  22)					int min4;
HXDLIN(  22)					if ((b7 > c2)) {
HXLINE(  22)						min4 = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE(  22)						min4 = ::Math_obj::floor(b7);
            					}
HXDLIN(  22)					int ii_min8 = min4;
HXDLIN(  22)					int ii_max8 = ::Math_obj::ceil(a10);
HXDLIN(  22)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE(  22)					int ii_min9 = ::Math_obj::floor(b7);
HXDLIN(  22)					int ii_max9 = ::Math_obj::ceil(c2);
HXDLIN(  22)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE(  22)				if ((b7 > c2)) {
HXLINE(  22)					int min5;
HXDLIN(  22)					if ((a10 > c2)) {
HXLINE(  22)						min5 = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE(  22)						min5 = ::Math_obj::ceil(a10);
            					}
HXDLIN(  22)					int ii_min10 = min5;
HXDLIN(  22)					int ii_max10 = ::Math_obj::ceil(b7);
HXDLIN(  22)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE(  22)					int ii_min11 = ::Math_obj::floor(a10);
HXDLIN(  22)					int ii_max11 = ::Math_obj::ceil(c2);
HXDLIN(  22)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  22)			Float a14 = barycentric_ay1;
HXDLIN(  22)			Float b8 = barycentric_by1;
HXDLIN(  22)			Float c3 = barycentric_cy1;
HXDLIN(  22)			if ((a14 > b8)) {
HXLINE(  22)				if ((a14 > c3)) {
HXLINE(  22)					int min6;
HXDLIN(  22)					if ((b8 > c3)) {
HXLINE(  22)						min6 = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE(  22)						min6 = ::Math_obj::floor(b8);
            					}
HXDLIN(  22)					int ii_min12 = min6;
HXDLIN(  22)					int ii_max12 = ::Math_obj::ceil(a14);
HXDLIN(  22)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE(  22)					int ii_min13 = ::Math_obj::floor(b8);
HXDLIN(  22)					int ii_max13 = ::Math_obj::ceil(c3);
HXDLIN(  22)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE(  22)				if ((b8 > c3)) {
HXLINE(  22)					int min7;
HXDLIN(  22)					if ((a14 > c3)) {
HXLINE(  22)						min7 = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE(  22)						min7 = ::Math_obj::ceil(a14);
            					}
HXDLIN(  22)					int ii_min14 = min7;
HXDLIN(  22)					int ii_max14 = ::Math_obj::ceil(b8);
HXDLIN(  22)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE(  22)					int ii_min15 = ::Math_obj::floor(a14);
HXDLIN(  22)					int ii_max15 = ::Math_obj::ceil(c3);
HXDLIN(  22)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
            		}
HXDLIN(  22)		Float scaleA2;
HXDLIN(  22)		bool scaleA3;
HXDLIN(  22)		if (!(softAB1)) {
HXLINE(  22)			scaleA3 = softCA1;
            		}
            		else {
HXLINE(  22)			scaleA3 = true;
            		}
HXDLIN(  22)		if (scaleA3) {
HXLINE(  22)			scaleA2 = ((Float)1.5);
            		}
            		else {
HXLINE(  22)			scaleA2 = ((Float)1.);
            		}
HXDLIN(  22)		Float scaleB2;
HXDLIN(  22)		bool scaleB3;
HXDLIN(  22)		if (!(softAB1)) {
HXLINE(  22)			scaleB3 = softBC1;
            		}
            		else {
HXLINE(  22)			scaleB3 = true;
            		}
HXDLIN(  22)		if (scaleB3) {
HXLINE(  22)			scaleB2 = ((Float)1.5);
            		}
            		else {
HXLINE(  22)			scaleB2 = ((Float)1.);
            		}
HXDLIN(  22)		Float scaleC2;
HXDLIN(  22)		bool scaleC3;
HXDLIN(  22)		if (!(softBC1)) {
HXLINE(  22)			scaleC3 = softCA1;
            		}
            		else {
HXLINE(  22)			scaleC3 = true;
            		}
HXDLIN(  22)		if (scaleC3) {
HXLINE(  22)			scaleC2 = ((Float)1.5);
            		}
            		else {
HXLINE(  22)			scaleC2 = ((Float)1.);
            		}
HXDLIN(  22)		Float x04 = ((Float)0.);
HXDLIN(  22)		Float y04 = ((Float)0.);
HXDLIN(  22)		bool isScaledA2 = true;
HXDLIN(  22)		bool isScaledB2 = true;
HXDLIN(  22)		bool isScaledC2 = true;
HXDLIN(  22)		if (isScaledA2) {
HXLINE(  22)			if (isScaledB2) {
HXLINE(  22)				if (isScaledC2) {
HXLINE(  82)					x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  83)					y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x04 = hitTriScalar1->cx;
HXLINE(  80)					y04 = hitTriScalar1->cy;
            				}
            			}
            			else {
HXLINE(  22)				if (isScaledC2) {
HXLINE(  76)					x04 = hitTriScalar1->bx;
HXLINE(  77)					y04 = hitTriScalar1->by;
            				}
            				else {
HXLINE(  73)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar1);
HXLINE(  74)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar1);
            				}
            			}
            		}
            		else {
HXLINE(  22)			if (isScaledB2) {
HXLINE(  22)				if (isScaledC2) {
HXLINE(  70)					x04 = hitTriScalar1->ax;
HXLINE(  71)					y04 = hitTriScalar1->ay;
            				}
            				else {
HXLINE(  67)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar1);
HXLINE(  68)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar1);
            				}
            			}
            			else {
HXLINE(  22)				if (isScaledC2) {
HXLINE(  64)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar1);
HXLINE(  65)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar1);
            				}
            				else {
HXLINE(  61)					x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  62)					y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  22)		Float ax_2;
HXDLIN(  22)		if (isScaledA2) {
HXLINE(  22)			Float point12 = hitTriScalar1->ax;
HXDLIN(  22)			point12 = (point12 - x04);
HXDLIN(  22)			point12 = (point12 * ((Float)0.999));
HXDLIN(  22)			point12 = (point12 + x04);
HXDLIN(  22)			ax_2 = point12;
            		}
            		else {
HXLINE(  22)			ax_2 = hitTriScalar1->ax;
            		}
HXDLIN(  22)		Float ay_2;
HXDLIN(  22)		if (isScaledA2) {
HXLINE(  22)			Float point13 = hitTriScalar1->ay;
HXDLIN(  22)			point13 = (point13 - y04);
HXDLIN(  22)			point13 = (point13 * ((Float)0.999));
HXDLIN(  22)			point13 = (point13 + y04);
HXDLIN(  22)			ay_2 = point13;
            		}
            		else {
HXLINE(  22)			ay_2 = hitTriScalar1->ay;
            		}
HXDLIN(  22)		Float bx_4;
HXDLIN(  22)		if (isScaledB2) {
HXLINE(  22)			Float point14 = hitTriScalar1->bx;
HXDLIN(  22)			point14 = (point14 - x04);
HXDLIN(  22)			point14 = (point14 * ((Float)0.999));
HXDLIN(  22)			point14 = (point14 + x04);
HXDLIN(  22)			bx_4 = point14;
            		}
            		else {
HXLINE(  22)			bx_4 = hitTriScalar1->bx;
            		}
HXDLIN(  22)		Float by_4;
HXDLIN(  22)		if (isScaledB2) {
HXLINE(  22)			Float point15 = hitTriScalar1->by;
HXDLIN(  22)			point15 = (point15 - y04);
HXDLIN(  22)			point15 = (point15 * ((Float)0.999));
HXDLIN(  22)			point15 = (point15 + y04);
HXDLIN(  22)			by_4 = point15;
            		}
            		else {
HXLINE(  22)			by_4 = hitTriScalar1->by;
            		}
HXDLIN(  22)		Float cx_2;
HXDLIN(  22)		if (isScaledC2) {
HXLINE(  22)			Float point16 = hitTriScalar1->cx;
HXDLIN(  22)			point16 = (point16 - x04);
HXDLIN(  22)			point16 = (point16 * ((Float)0.999));
HXDLIN(  22)			point16 = (point16 + x04);
HXDLIN(  22)			cx_2 = point16;
            		}
            		else {
HXLINE(  22)			cx_2 = hitTriScalar1->cx;
            		}
HXDLIN(  22)		Float cy_2;
HXDLIN(  22)		if (isScaledC2) {
HXLINE(  22)			Float point17 = hitTriScalar1->cy;
HXDLIN(  22)			point17 = (point17 - y04);
HXDLIN(  22)			point17 = (point17 * ((Float)0.999));
HXDLIN(  22)			point17 = (point17 + y04);
HXDLIN(  22)			cy_2 = point17;
            		}
            		else {
HXLINE(  22)			cy_2 = hitTriScalar1->cy;
            		}
HXDLIN(  22)		 ::pi_xy::algo::HitTri scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_2,ay_2,bx_4,by_4,cx_2,cy_2,true);
HXDLIN(  22)		Float x05 = ((Float)0.);
HXDLIN(  22)		Float y05 = ((Float)0.);
HXDLIN(  22)		bool isScaledA3 = (scaleA2 != ((Float)1.));
HXDLIN(  22)		bool isScaledB3 = (scaleB2 != ((Float)1.));
HXDLIN(  22)		bool isScaledC3 = (scaleC2 != ((Float)1.));
HXDLIN(  22)		if (isScaledA3) {
HXLINE(  22)			if (isScaledB3) {
HXLINE(  22)				if (isScaledC3) {
HXLINE(  82)					x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  83)					y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x05 = scaled1->cx;
HXLINE(  80)					y05 = scaled1->cy;
            				}
            			}
            			else {
HXLINE(  22)				if (isScaledC3) {
HXLINE(  76)					x05 = scaled1->bx;
HXLINE(  77)					y05 = scaled1->by;
            				}
            				else {
HXLINE(  73)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled1);
HXLINE(  74)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled1);
            				}
            			}
            		}
            		else {
HXLINE(  22)			if (isScaledB3) {
HXLINE(  22)				if (isScaledC3) {
HXLINE(  70)					x05 = scaled1->ax;
HXLINE(  71)					y05 = scaled1->ay;
            				}
            				else {
HXLINE(  67)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled1);
HXLINE(  68)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled1);
            				}
            			}
            			else {
HXLINE(  22)				if (isScaledC3) {
HXLINE(  64)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled1);
HXLINE(  65)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled1);
            				}
            				else {
HXLINE(  61)					x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  62)					y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  22)		Float ax_3;
HXDLIN(  22)		if (isScaledA3) {
HXLINE(  22)			Float point18 = scaled1->ax;
HXDLIN(  22)			point18 = (point18 - x05);
HXDLIN(  22)			point18 = (point18 * scaleA2);
HXDLIN(  22)			point18 = (point18 + x05);
HXDLIN(  22)			ax_3 = point18;
            		}
            		else {
HXLINE(  22)			ax_3 = scaled1->ax;
            		}
HXDLIN(  22)		Float ay_3;
HXDLIN(  22)		if (isScaledA3) {
HXLINE(  22)			Float point19 = scaled1->ay;
HXDLIN(  22)			point19 = (point19 - y05);
HXDLIN(  22)			point19 = (point19 * scaleA2);
HXDLIN(  22)			point19 = (point19 + y05);
HXDLIN(  22)			ay_3 = point19;
            		}
            		else {
HXLINE(  22)			ay_3 = scaled1->ay;
            		}
HXDLIN(  22)		Float bx_5;
HXDLIN(  22)		if (isScaledB3) {
HXLINE(  22)			Float point20 = scaled1->bx;
HXDLIN(  22)			point20 = (point20 - x05);
HXDLIN(  22)			point20 = (point20 * scaleB2);
HXDLIN(  22)			point20 = (point20 + x05);
HXDLIN(  22)			bx_5 = point20;
            		}
            		else {
HXLINE(  22)			bx_5 = scaled1->bx;
            		}
HXDLIN(  22)		Float by_5;
HXDLIN(  22)		if (isScaledB3) {
HXLINE(  22)			Float point21 = scaled1->by;
HXDLIN(  22)			point21 = (point21 - y05);
HXDLIN(  22)			point21 = (point21 * scaleB2);
HXDLIN(  22)			point21 = (point21 + y05);
HXDLIN(  22)			by_5 = point21;
            		}
            		else {
HXLINE(  22)			by_5 = scaled1->by;
            		}
HXDLIN(  22)		Float cx_3;
HXDLIN(  22)		if (isScaledC3) {
HXLINE(  22)			Float point22 = scaled1->cx;
HXDLIN(  22)			point22 = (point22 - x05);
HXDLIN(  22)			point22 = (point22 * scaleC2);
HXDLIN(  22)			point22 = (point22 + x05);
HXDLIN(  22)			cx_3 = point22;
            		}
            		else {
HXLINE(  22)			cx_3 = scaled1->cx;
            		}
HXDLIN(  22)		Float cy_3;
HXDLIN(  22)		if (isScaledC3) {
HXLINE(  22)			Float point23 = scaled1->cy;
HXDLIN(  22)			point23 = (point23 - y05);
HXDLIN(  22)			point23 = (point23 * scaleC2);
HXDLIN(  22)			point23 = (point23 + y05);
HXDLIN(  22)			cy_3 = point23;
            		}
            		else {
HXLINE(  22)			cy_3 = scaled1->cy;
            		}
HXDLIN(  22)		scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_3,ay_3,bx_5,by_5,cx_3,cy_3,true);
HXDLIN(  22)		{
HXLINE(  22)			 ::pi_xy::iter::IntIterStart this50 = hitTriScalar1->xIter3;
HXDLIN(  22)			int _g_min2 = this50->start;
HXDLIN(  22)			int _g_max2 = this50->max;
HXDLIN(  22)			while((_g_min2 < _g_max2)){
HXLINE(  22)				_g_min2 = (_g_min2 + 1);
HXDLIN(  22)				int px2 = (_g_min2 - 1);
HXDLIN(  22)				{
HXLINE(  22)					 ::pi_xy::iter::IntIterStart this51 = hitTriScalar1->yIter3;
HXDLIN(  22)					int _g_min3 = this51->start;
HXDLIN(  22)					int _g_max3 = this51->max;
HXDLIN(  22)					while((_g_min3 < _g_max3)){
HXLINE(  22)						_g_min3 = (_g_min3 + 1);
HXDLIN(  22)						int py2 = (_g_min3 - 1);
HXDLIN(  22)						Float pcx4 = (( (Float)(px2) ) - barycentric_cx1);
HXDLIN(  22)						Float pcy4 = (( (Float)(py2) ) - barycentric_cy1);
HXDLIN(  22)						Float dot314 = ((pcx4 * barycentric_bcx1) + (pcy4 * barycentric_bcy1));
HXDLIN(  22)						Float dot324 = ((pcx4 * barycentric_acx1) + (pcy4 * barycentric_acy1));
HXDLIN(  22)						Float ratioA5 = (((barycentric_dot221 * dot314) - (barycentric_dot121 * dot324)) * barycentric_denom11);
HXDLIN(  22)						Float ratioB5 = (((barycentric_dot111 * dot324) - (barycentric_dot121 * dot314)) * barycentric_denom11);
HXDLIN(  22)						Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  22)						Float ratios_ratioA1 = ratioA5;
HXDLIN(  22)						Float ratios_ratioB1 = ratioB5;
HXDLIN(  22)						Float ratios_ratioC1 = ratioC5;
HXDLIN(  22)						Float v5;
HXDLIN(  22)						if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  22)							v5 = ratios_ratioA1;
            						}
            						else {
HXLINE(  22)							v5 = ratios_ratioB1;
            						}
HXDLIN(  22)						Float min_1;
HXDLIN(  22)						if ((v5 < ratios_ratioC1)) {
HXLINE(  22)							min_1 = v5;
            						}
            						else {
HXLINE(  22)							min_1 = ratios_ratioC1;
            						}
HXDLIN(  22)						bool isSoft4;
HXDLIN(  22)						if (softAB1) {
HXLINE(  22)							if (softBC1) {
HXLINE(  22)								if (softCA1) {
HXLINE(  22)									isSoft4 = true;
            								}
            								else {
HXLINE(  22)									if ((min_1 != ratios_ratioB1)) {
HXLINE(  22)										Float v6;
HXDLIN(  22)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  22)											v6 = ratios_ratioA1;
            										}
            										else {
HXLINE(  22)											v6 = ratios_ratioB1;
            										}
HXDLIN(  22)										Float isSoft5;
HXDLIN(  22)										if ((v6 < ratios_ratioC1)) {
HXLINE(  22)											isSoft5 = v6;
            										}
            										else {
HXLINE(  22)											isSoft5 = ratios_ratioC1;
            										}
HXDLIN(  22)										isSoft4 = (isSoft5 == ratios_ratioC1);
            									}
            									else {
HXLINE(  22)										isSoft4 = true;
            									}
            								}
            							}
            							else {
HXLINE(  22)								if (softCA1) {
HXLINE(  22)									if ((min_1 != ratios_ratioA1)) {
HXLINE(  22)										Float v7;
HXDLIN(  22)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  22)											v7 = ratios_ratioA1;
            										}
            										else {
HXLINE(  22)											v7 = ratios_ratioB1;
            										}
HXDLIN(  22)										Float isSoft6;
HXDLIN(  22)										if ((v7 < ratios_ratioC1)) {
HXLINE(  22)											isSoft6 = v7;
            										}
            										else {
HXLINE(  22)											isSoft6 = ratios_ratioC1;
            										}
HXDLIN(  22)										isSoft4 = (isSoft6 == ratios_ratioC1);
            									}
            									else {
HXLINE(  22)										isSoft4 = true;
            									}
            								}
            								else {
HXLINE(  22)									isSoft4 = (min_1 == ratios_ratioC1);
            								}
            							}
            						}
            						else {
HXLINE(  22)							if (softBC1) {
HXLINE(  22)								if (softCA1) {
HXLINE(  22)									if ((min_1 != ratios_ratioA1)) {
HXLINE(  22)										Float v8;
HXDLIN(  22)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  22)											v8 = ratios_ratioA1;
            										}
            										else {
HXLINE(  22)											v8 = ratios_ratioB1;
            										}
HXDLIN(  22)										Float isSoft7;
HXDLIN(  22)										if ((v8 < ratios_ratioC1)) {
HXLINE(  22)											isSoft7 = v8;
            										}
            										else {
HXLINE(  22)											isSoft7 = ratios_ratioC1;
            										}
HXDLIN(  22)										isSoft4 = (isSoft7 == ratios_ratioB1);
            									}
            									else {
HXLINE(  22)										isSoft4 = true;
            									}
            								}
            								else {
HXLINE(  22)									isSoft4 = (min_1 == ratios_ratioB1);
            								}
            							}
            							else {
HXLINE(  22)								if (softCA1) {
HXLINE(  22)									isSoft4 = (min_1 == ratios_ratioA1);
            								}
            								else {
HXLINE(  22)									isSoft4 = false;
            								}
            							}
            						}
HXDLIN(  22)						Float x06 = ((Float)-0.0739127852035666);
HXDLIN(  22)						Float y06 = ((Float)0.703233176253404202);
HXDLIN(  22)						Float x15 = ((Float)-0.353553390593273564);
HXDLIN(  22)						Float y15 = ((Float)0.61237243569579447);
HXDLIN(  22)						Float x22 = ((Float)-0.572061402817684139);
HXDLIN(  22)						Float y22 = ((Float)0.415626937777453465);
HXDLIN(  22)						Float x32 = ((Float)-0.691654801480225401);
HXDLIN(  22)						Float y32 = ((Float)0.147015766465198733);
HXDLIN(  22)						Float x42 = ((Float)-0.691654801480225512);
HXDLIN(  22)						Float y42 = ((Float)-0.147015766465198261);
HXDLIN(  22)						Float averageX2 = ((Float)0.);
HXDLIN(  22)						Float averageY2 = ((Float)0.);
HXDLIN(  22)						int hits2 = 0;
HXDLIN(  22)						Float fractionTotal4 = ((Float)0.);
HXDLIN(  22)						Float x16 = (px2 + x06);
HXDLIN(  22)						Float y16 = (py2 + y06);
HXDLIN(  22)						bool _hx_tmp47;
HXDLIN(  22)						bool _hx_tmp48;
HXDLIN(  22)						 ::pi_xy::iter::IntIterStart this52 = hitTriScalar1->xIter3;
HXDLIN(  22)						bool _hx_tmp49;
HXDLIN(  22)						if ((x16 > (this52->start - 1))) {
HXLINE(  22)							_hx_tmp49 = (x16 < (this52->max + 1));
            						}
            						else {
HXLINE(  22)							_hx_tmp49 = false;
            						}
HXDLIN(  22)						if (_hx_tmp49) {
HXLINE(  22)							 ::pi_xy::iter::IntIterStart this53 = hitTriScalar1->yIter3;
HXDLIN(  22)							if ((y16 > (this53->start - 1))) {
HXLINE(  22)								_hx_tmp48 = (y16 < (this53->max + 1));
            							}
            							else {
HXLINE(  22)								_hx_tmp48 = false;
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp48 = false;
            						}
HXDLIN(  22)						if (_hx_tmp48) {
HXLINE(  22)							Float s10 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x16)) + (hitTriScalar1->sy * y16));
HXDLIN(  22)							Float t10 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x16)) + (hitTriScalar1->ty * y16));
HXDLIN(  22)							bool _hx_tmp50;
HXDLIN(  22)							if (!((s10 <= 0))) {
HXLINE(  22)								_hx_tmp50 = (t10 <= 0);
            							}
            							else {
HXLINE(  22)								_hx_tmp50 = true;
            							}
HXDLIN(  22)							if (_hx_tmp50) {
HXLINE(  22)								_hx_tmp47 = false;
            							}
            							else {
HXLINE(  22)								if (((s10 + t10) < hitTriScalar1->A)) {
HXLINE(  22)									_hx_tmp47 = true;
            								}
            								else {
HXLINE(  22)									_hx_tmp47 = false;
            								}
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp47 = false;
            						}
HXDLIN(  22)						if (_hx_tmp47) {
HXLINE(  22)							hits2 = (hits2 + 1);
HXDLIN(  22)							averageX2 = (averageX2 + x06);
HXDLIN(  22)							averageY2 = (averageY2 + y06);
HXDLIN(  22)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  22)						Float x17 = (px2 + x15);
HXDLIN(  22)						Float y17 = (py2 + y15);
HXDLIN(  22)						bool _hx_tmp51;
HXDLIN(  22)						bool _hx_tmp52;
HXDLIN(  22)						 ::pi_xy::iter::IntIterStart this54 = hitTriScalar1->xIter3;
HXDLIN(  22)						bool _hx_tmp53;
HXDLIN(  22)						if ((x17 > (this54->start - 1))) {
HXLINE(  22)							_hx_tmp53 = (x17 < (this54->max + 1));
            						}
            						else {
HXLINE(  22)							_hx_tmp53 = false;
            						}
HXDLIN(  22)						if (_hx_tmp53) {
HXLINE(  22)							 ::pi_xy::iter::IntIterStart this55 = hitTriScalar1->yIter3;
HXDLIN(  22)							if ((y17 > (this55->start - 1))) {
HXLINE(  22)								_hx_tmp52 = (y17 < (this55->max + 1));
            							}
            							else {
HXLINE(  22)								_hx_tmp52 = false;
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp52 = false;
            						}
HXDLIN(  22)						if (_hx_tmp52) {
HXLINE(  22)							Float s11 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x17)) + (hitTriScalar1->sy * y17));
HXDLIN(  22)							Float t11 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x17)) + (hitTriScalar1->ty * y17));
HXDLIN(  22)							bool _hx_tmp54;
HXDLIN(  22)							if (!((s11 <= 0))) {
HXLINE(  22)								_hx_tmp54 = (t11 <= 0);
            							}
            							else {
HXLINE(  22)								_hx_tmp54 = true;
            							}
HXDLIN(  22)							if (_hx_tmp54) {
HXLINE(  22)								_hx_tmp51 = false;
            							}
            							else {
HXLINE(  22)								if (((s11 + t11) < hitTriScalar1->A)) {
HXLINE(  22)									_hx_tmp51 = true;
            								}
            								else {
HXLINE(  22)									_hx_tmp51 = false;
            								}
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp51 = false;
            						}
HXDLIN(  22)						if (_hx_tmp51) {
HXLINE(  22)							hits2 = (hits2 + 1);
HXDLIN(  22)							averageX2 = (averageX2 + x15);
HXDLIN(  22)							averageY2 = (averageY2 + y15);
HXDLIN(  22)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  22)						Float x18 = (px2 + x22);
HXDLIN(  22)						Float y18 = (py2 + y22);
HXDLIN(  22)						bool _hx_tmp55;
HXDLIN(  22)						bool _hx_tmp56;
HXDLIN(  22)						 ::pi_xy::iter::IntIterStart this56 = hitTriScalar1->xIter3;
HXDLIN(  22)						bool _hx_tmp57;
HXDLIN(  22)						if ((x18 > (this56->start - 1))) {
HXLINE(  22)							_hx_tmp57 = (x18 < (this56->max + 1));
            						}
            						else {
HXLINE(  22)							_hx_tmp57 = false;
            						}
HXDLIN(  22)						if (_hx_tmp57) {
HXLINE(  22)							 ::pi_xy::iter::IntIterStart this57 = hitTriScalar1->yIter3;
HXDLIN(  22)							if ((y18 > (this57->start - 1))) {
HXLINE(  22)								_hx_tmp56 = (y18 < (this57->max + 1));
            							}
            							else {
HXLINE(  22)								_hx_tmp56 = false;
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp56 = false;
            						}
HXDLIN(  22)						if (_hx_tmp56) {
HXLINE(  22)							Float s12 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x18)) + (hitTriScalar1->sy * y18));
HXDLIN(  22)							Float t12 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x18)) + (hitTriScalar1->ty * y18));
HXDLIN(  22)							bool _hx_tmp58;
HXDLIN(  22)							if (!((s12 <= 0))) {
HXLINE(  22)								_hx_tmp58 = (t12 <= 0);
            							}
            							else {
HXLINE(  22)								_hx_tmp58 = true;
            							}
HXDLIN(  22)							if (_hx_tmp58) {
HXLINE(  22)								_hx_tmp55 = false;
            							}
            							else {
HXLINE(  22)								if (((s12 + t12) < hitTriScalar1->A)) {
HXLINE(  22)									_hx_tmp55 = true;
            								}
            								else {
HXLINE(  22)									_hx_tmp55 = false;
            								}
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp55 = false;
            						}
HXDLIN(  22)						if (_hx_tmp55) {
HXLINE(  22)							hits2 = (hits2 + 1);
HXDLIN(  22)							averageX2 = (averageX2 + x22);
HXDLIN(  22)							averageY2 = (averageY2 + y22);
HXDLIN(  22)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  22)						Float x19 = (px2 + x32);
HXDLIN(  22)						Float y19 = (py2 + y32);
HXDLIN(  22)						bool _hx_tmp59;
HXDLIN(  22)						bool _hx_tmp60;
HXDLIN(  22)						 ::pi_xy::iter::IntIterStart this58 = hitTriScalar1->xIter3;
HXDLIN(  22)						bool _hx_tmp61;
HXDLIN(  22)						if ((x19 > (this58->start - 1))) {
HXLINE(  22)							_hx_tmp61 = (x19 < (this58->max + 1));
            						}
            						else {
HXLINE(  22)							_hx_tmp61 = false;
            						}
HXDLIN(  22)						if (_hx_tmp61) {
HXLINE(  22)							 ::pi_xy::iter::IntIterStart this59 = hitTriScalar1->yIter3;
HXDLIN(  22)							if ((y19 > (this59->start - 1))) {
HXLINE(  22)								_hx_tmp60 = (y19 < (this59->max + 1));
            							}
            							else {
HXLINE(  22)								_hx_tmp60 = false;
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp60 = false;
            						}
HXDLIN(  22)						if (_hx_tmp60) {
HXLINE(  22)							Float s13 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x19)) + (hitTriScalar1->sy * y19));
HXDLIN(  22)							Float t13 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x19)) + (hitTriScalar1->ty * y19));
HXDLIN(  22)							bool _hx_tmp62;
HXDLIN(  22)							if (!((s13 <= 0))) {
HXLINE(  22)								_hx_tmp62 = (t13 <= 0);
            							}
            							else {
HXLINE(  22)								_hx_tmp62 = true;
            							}
HXDLIN(  22)							if (_hx_tmp62) {
HXLINE(  22)								_hx_tmp59 = false;
            							}
            							else {
HXLINE(  22)								if (((s13 + t13) < hitTriScalar1->A)) {
HXLINE(  22)									_hx_tmp59 = true;
            								}
            								else {
HXLINE(  22)									_hx_tmp59 = false;
            								}
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp59 = false;
            						}
HXDLIN(  22)						if (_hx_tmp59) {
HXLINE(  22)							hits2 = (hits2 + 1);
HXDLIN(  22)							averageX2 = (averageX2 + x32);
HXDLIN(  22)							averageY2 = (averageY2 + y32);
HXDLIN(  22)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  22)						Float x20 = (px2 + x42);
HXDLIN(  22)						Float y20 = (py2 + y42);
HXDLIN(  22)						bool _hx_tmp63;
HXDLIN(  22)						bool _hx_tmp64;
HXDLIN(  22)						 ::pi_xy::iter::IntIterStart this60 = hitTriScalar1->xIter3;
HXDLIN(  22)						bool _hx_tmp65;
HXDLIN(  22)						if ((x20 > (this60->start - 1))) {
HXLINE(  22)							_hx_tmp65 = (x20 < (this60->max + 1));
            						}
            						else {
HXLINE(  22)							_hx_tmp65 = false;
            						}
HXDLIN(  22)						if (_hx_tmp65) {
HXLINE(  22)							 ::pi_xy::iter::IntIterStart this61 = hitTriScalar1->yIter3;
HXDLIN(  22)							if ((y20 > (this61->start - 1))) {
HXLINE(  22)								_hx_tmp64 = (y20 < (this61->max + 1));
            							}
            							else {
HXLINE(  22)								_hx_tmp64 = false;
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp64 = false;
            						}
HXDLIN(  22)						if (_hx_tmp64) {
HXLINE(  22)							Float s14 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x20)) + (hitTriScalar1->sy * y20));
HXDLIN(  22)							Float t14 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x20)) + (hitTriScalar1->ty * y20));
HXDLIN(  22)							bool _hx_tmp66;
HXDLIN(  22)							if (!((s14 <= 0))) {
HXLINE(  22)								_hx_tmp66 = (t14 <= 0);
            							}
            							else {
HXLINE(  22)								_hx_tmp66 = true;
            							}
HXDLIN(  22)							if (_hx_tmp66) {
HXLINE(  22)								_hx_tmp63 = false;
            							}
            							else {
HXLINE(  22)								if (((s14 + t14) < hitTriScalar1->A)) {
HXLINE(  22)									_hx_tmp63 = true;
            								}
            								else {
HXLINE(  22)									_hx_tmp63 = false;
            								}
            							}
            						}
            						else {
HXLINE(  22)							_hx_tmp63 = false;
            						}
HXDLIN(  22)						if (_hx_tmp63) {
HXLINE(  22)							hits2 = (hits2 + 1);
HXDLIN(  22)							averageX2 = (averageX2 + x42);
HXDLIN(  22)							averageY2 = (averageY2 + y42);
HXDLIN(  22)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  22)						if ((hits2 != 0)) {
HXLINE( 244)							averageX2 = (px2 + (averageX2 / ( (Float)(hits2) )));
HXLINE( 245)							averageY2 = (py2 + (averageY2 / ( (Float)(hits2) )));
            						}
            						else {
HXLINE( 247)							averageX2 = ( (Float)(px2) );
HXLINE( 248)							averageY2 = ( (Float)(py2) );
            						}
HXLINE(  22)						Float fractionTotal5 = fractionTotal4;
HXDLIN(  22)						Float sampleData_fractionTotal1 = fractionTotal5;
HXDLIN(  22)						Float sampleData_averageX1 = averageX2;
HXDLIN(  22)						Float sampleData_averageY1 = averageY2;
HXDLIN(  22)						bool sampleData_notHit1 = (fractionTotal5 == ((Float)0.));
HXDLIN(  22)						Float aScale1 = sampleData_fractionTotal1;
HXDLIN(  22)						if (!((aScale1 > ((Float)0.9)))) {
HXLINE(  22)							aScale1 = ((aScale1 * ((Float)0.8)) + ((Float)0.2));
            						}
HXLINE( 142)						a9 = 0;
HXLINE( 143)						r6 = 0;
HXLINE( 144)						g6 = 0;
HXLINE( 145)						b6 = 0;
HXLINE(  22)						if (isSoft4) {
HXLINE(  22)							if (!(sampleData_notHit1)) {
HXLINE(  22)								Float pcx5 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  22)								Float pcy5 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  22)								Float dot315 = ((pcx5 * barycentric_bcx1) + (pcy5 * barycentric_bcy1));
HXDLIN(  22)								Float dot325 = ((pcx5 * barycentric_acx1) + (pcy5 * barycentric_acy1));
HXDLIN(  22)								Float ratioA6 = (((barycentric_dot221 * dot315) - (barycentric_dot121 * dot325)) * barycentric_denom11);
HXDLIN(  22)								Float ratioB6 = (((barycentric_dot111 * dot325) - (barycentric_dot121 * dot315)) * barycentric_denom11);
HXDLIN(  22)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN(  22)								Float ratiosAvg_ratioA3 = ratioA6;
HXDLIN(  22)								Float ratiosAvg_ratioB3 = ratioB6;
HXDLIN(  22)								Float ratiosAvg_ratioC3 = ratioC6;
HXDLIN(  22)								Float ratioA_3 = ratiosAvg_ratioA3;
HXDLIN(  22)								Float ratioB_3 = ratiosAvg_ratioB3;
HXDLIN(  22)								Float ratioC_3 = ratiosAvg_ratioC3;
HXDLIN(  22)								int i14 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_3) + (( (Float)(aB1) ) * ratioB_3)) + (( (Float)(aC1) ) * ratioC_3)));
HXDLIN(  22)								if ((i14 > 255)) {
HXLINE(  24)									i14 = 255;
            								}
HXLINE(  22)								if ((i14 < 0)) {
HXLINE(  25)									i14 = 0;
            								}
HXLINE( 152)								a9 = i14;
HXLINE(  22)								int i15 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_3) + (( (Float)(rB1) ) * ratioB_3)) + (( (Float)(rC1) ) * ratioC_3)));
HXDLIN(  22)								if ((i15 > 255)) {
HXLINE(  24)									i15 = 255;
            								}
HXLINE(  22)								if ((i15 < 0)) {
HXLINE(  25)									i15 = 0;
            								}
HXLINE( 153)								r6 = i15;
HXLINE(  22)								int i16 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_3) + (( (Float)(gB1) ) * ratioB_3)) + (( (Float)(gC1) ) * ratioC_3)));
HXDLIN(  22)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE(  22)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 154)								g6 = i16;
HXLINE(  22)								int i17 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_3) + (( (Float)(bB1) ) * ratioB_3)) + (( (Float)(bC1) ) * ratioC_3)));
HXDLIN(  22)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE(  22)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 155)								b6 = i17;
HXLINE(  22)								{
HXLINE(  22)									int a15;
HXDLIN(  22)									if ((aScale1 > ((Float)0.9))) {
HXLINE(  22)										a15 = a9;
            									}
            									else {
HXLINE(  22)										int i18 = ::Std_obj::_hx_int((( (Float)(a9) ) * aScale1));
HXDLIN(  22)										if ((i18 > 255)) {
HXLINE(  24)											i18 = 255;
            										}
HXLINE(  22)										if ((i18 < 0)) {
HXLINE(  25)											i18 = 0;
            										}
HXLINE(  22)										a15 = i18;
            									}
HXDLIN(  22)									int location3;
HXDLIN(  22)									if (pixelImage->useVirtualPos) {
HXLINE(  22)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  22)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN(  22)									bool _hx_tmp67;
HXDLIN(  22)									if (pixelImage->transparent) {
HXLINE(  22)										_hx_tmp67 = (a15 < 254);
            									}
            									else {
HXLINE(  22)										_hx_tmp67 = false;
            									}
HXDLIN(  22)									if (_hx_tmp67) {
HXLINE(  22)										int this62 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  22)										int old3;
HXDLIN(  22)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)											old3 = ((((((this62 >> 24) & 255) << 24) | ((this62 & 255) << 16)) | (((this62 >> 8) & 255) << 8)) | ((this62 >> 16) & 255));
            										}
            										else {
HXLINE(  22)											old3 = this62;
            										}
HXDLIN(  22)										int rhs3 = ((((a15 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  22)										Float a16;
HXDLIN(  22)										int this63 = ((old3 >> 24) & 255);
HXDLIN(  22)										if ((this63 == 0)) {
HXLINE(  22)											a16 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											a16 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float r13;
HXDLIN(  22)										int this64 = ((old3 >> 16) & 255);
HXDLIN(  22)										if ((this64 == 0)) {
HXLINE(  22)											r13 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											r13 = (( (Float)(this64) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float g13;
HXDLIN(  22)										int this65 = ((old3 >> 8) & 255);
HXDLIN(  22)										if ((this65 == 0)) {
HXLINE(  22)											g13 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											g13 = (( (Float)(this65) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float b14;
HXDLIN(  22)										int this66 = (old3 & 255);
HXDLIN(  22)										if ((this66 == 0)) {
HXLINE(  22)											b14 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											b14 = (( (Float)(this66) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float a24;
HXDLIN(  22)										int this67 = ((rhs3 >> 24) & 255);
HXDLIN(  22)										if ((this67 == 0)) {
HXLINE(  22)											a24 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											a24 = (( (Float)(this67) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float r23;
HXDLIN(  22)										int this68 = ((rhs3 >> 16) & 255);
HXDLIN(  22)										if ((this68 == 0)) {
HXLINE(  22)											r23 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											r23 = (( (Float)(this68) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float g23;
HXDLIN(  22)										int this69 = ((rhs3 >> 8) & 255);
HXDLIN(  22)										if ((this69 == 0)) {
HXLINE(  22)											g23 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											g23 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float b24;
HXDLIN(  22)										int this70 = (rhs3 & 255);
HXDLIN(  22)										if ((this70 == 0)) {
HXLINE(  22)											b24 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											b24 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN(  22)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a34) + (r23 * a24))));
HXDLIN(  22)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a34) + (g23 * a24))));
HXDLIN(  22)										int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN(  22)										int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  22)										int blended3 = ((((a17 << 24) | (r7 << 16)) | (g7 << 8)) | b9);
HXDLIN(  22)										{
HXLINE(  22)											int _hx_tmp68;
HXDLIN(  22)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)												_hx_tmp68 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE(  22)												_hx_tmp68 = blended3;
            											}
HXDLIN(  22)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp68);
            										}
            									}
            									else {
HXLINE(  22)										int value3;
HXDLIN(  22)										if (pixelImage->isLittle) {
HXLINE(  22)											value3 = ((((a15 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE(  22)											value3 = ((((a15 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            										}
HXDLIN(  22)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value3);
            									}
            								}
            							}
            						}
            						else {
HXLINE(  22)							Float ratioA7 = ratios_ratioA1;
HXDLIN(  22)							Float ratioB7 = ratios_ratioB1;
HXDLIN(  22)							Float ratioC7 = ratios_ratioC1;
HXDLIN(  22)							Float hitTotal1 = sampleData_fractionTotal1;
HXDLIN(  22)							if (!(sampleData_notHit1)) {
HXLINE(  22)								Float x07 = ((Float)-0.0739127852035666);
HXDLIN(  22)								Float y07 = ((Float)0.703233176253404202);
HXDLIN(  22)								Float x110 = ((Float)-0.353553390593273564);
HXDLIN(  22)								Float y110 = ((Float)0.61237243569579447);
HXDLIN(  22)								Float x23 = ((Float)-0.572061402817684139);
HXDLIN(  22)								Float y23 = ((Float)0.415626937777453465);
HXDLIN(  22)								Float x33 = ((Float)-0.691654801480225401);
HXDLIN(  22)								Float y33 = ((Float)0.147015766465198733);
HXDLIN(  22)								Float x43 = ((Float)-0.691654801480225512);
HXDLIN(  22)								Float y43 = ((Float)-0.147015766465198261);
HXDLIN(  22)								Float averageX3 = ((Float)0.);
HXDLIN(  22)								Float averageY3 = ((Float)0.);
HXDLIN(  22)								int hits3 = 0;
HXDLIN(  22)								Float fractionTotal6 = ((Float)0.);
HXDLIN(  22)								Float x24 = (px2 + x07);
HXDLIN(  22)								Float y24 = (py2 + y07);
HXDLIN(  22)								bool _hx_tmp69;
HXDLIN(  22)								bool _hx_tmp70;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this71 = scaled1->xIter3;
HXDLIN(  22)								bool _hx_tmp71;
HXDLIN(  22)								if ((x24 > (this71->start - 1))) {
HXLINE(  22)									_hx_tmp71 = (x24 < (this71->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp71 = false;
            								}
HXDLIN(  22)								if (_hx_tmp71) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this72 = scaled1->yIter3;
HXDLIN(  22)									if ((y24 > (this72->start - 1))) {
HXLINE(  22)										_hx_tmp70 = (y24 < (this72->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp70 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp70 = false;
            								}
HXDLIN(  22)								if (_hx_tmp70) {
HXLINE(  22)									Float s15 = ((scaled1->s0 + (scaled1->sx * x24)) + (scaled1->sy * y24));
HXDLIN(  22)									Float t15 = ((scaled1->t0 + (scaled1->tx * x24)) + (scaled1->ty * y24));
HXDLIN(  22)									bool _hx_tmp72;
HXDLIN(  22)									if (!((s15 <= 0))) {
HXLINE(  22)										_hx_tmp72 = (t15 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp72 = true;
            									}
HXDLIN(  22)									if (_hx_tmp72) {
HXLINE(  22)										_hx_tmp69 = false;
            									}
            									else {
HXLINE(  22)										if (((s15 + t15) < scaled1->A)) {
HXLINE(  22)											_hx_tmp69 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp69 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp69 = false;
            								}
HXDLIN(  22)								if (_hx_tmp69) {
HXLINE(  22)									hits3 = (hits3 + 1);
HXDLIN(  22)									averageX3 = (averageX3 + x07);
HXDLIN(  22)									averageY3 = (averageY3 + y07);
HXDLIN(  22)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  22)								Float x25 = (px2 + x110);
HXDLIN(  22)								Float y25 = (py2 + y110);
HXDLIN(  22)								bool _hx_tmp73;
HXDLIN(  22)								bool _hx_tmp74;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this73 = scaled1->xIter3;
HXDLIN(  22)								bool _hx_tmp75;
HXDLIN(  22)								if ((x25 > (this73->start - 1))) {
HXLINE(  22)									_hx_tmp75 = (x25 < (this73->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp75 = false;
            								}
HXDLIN(  22)								if (_hx_tmp75) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this74 = scaled1->yIter3;
HXDLIN(  22)									if ((y25 > (this74->start - 1))) {
HXLINE(  22)										_hx_tmp74 = (y25 < (this74->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp74 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp74 = false;
            								}
HXDLIN(  22)								if (_hx_tmp74) {
HXLINE(  22)									Float s16 = ((scaled1->s0 + (scaled1->sx * x25)) + (scaled1->sy * y25));
HXDLIN(  22)									Float t16 = ((scaled1->t0 + (scaled1->tx * x25)) + (scaled1->ty * y25));
HXDLIN(  22)									bool _hx_tmp76;
HXDLIN(  22)									if (!((s16 <= 0))) {
HXLINE(  22)										_hx_tmp76 = (t16 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp76 = true;
            									}
HXDLIN(  22)									if (_hx_tmp76) {
HXLINE(  22)										_hx_tmp73 = false;
            									}
            									else {
HXLINE(  22)										if (((s16 + t16) < scaled1->A)) {
HXLINE(  22)											_hx_tmp73 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp73 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp73 = false;
            								}
HXDLIN(  22)								if (_hx_tmp73) {
HXLINE(  22)									hits3 = (hits3 + 1);
HXDLIN(  22)									averageX3 = (averageX3 + x110);
HXDLIN(  22)									averageY3 = (averageY3 + y110);
HXDLIN(  22)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  22)								Float x26 = (px2 + x23);
HXDLIN(  22)								Float y26 = (py2 + y23);
HXDLIN(  22)								bool _hx_tmp77;
HXDLIN(  22)								bool _hx_tmp78;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this75 = scaled1->xIter3;
HXDLIN(  22)								bool _hx_tmp79;
HXDLIN(  22)								if ((x26 > (this75->start - 1))) {
HXLINE(  22)									_hx_tmp79 = (x26 < (this75->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp79 = false;
            								}
HXDLIN(  22)								if (_hx_tmp79) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this76 = scaled1->yIter3;
HXDLIN(  22)									if ((y26 > (this76->start - 1))) {
HXLINE(  22)										_hx_tmp78 = (y26 < (this76->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp78 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp78 = false;
            								}
HXDLIN(  22)								if (_hx_tmp78) {
HXLINE(  22)									Float s17 = ((scaled1->s0 + (scaled1->sx * x26)) + (scaled1->sy * y26));
HXDLIN(  22)									Float t17 = ((scaled1->t0 + (scaled1->tx * x26)) + (scaled1->ty * y26));
HXDLIN(  22)									bool _hx_tmp80;
HXDLIN(  22)									if (!((s17 <= 0))) {
HXLINE(  22)										_hx_tmp80 = (t17 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp80 = true;
            									}
HXDLIN(  22)									if (_hx_tmp80) {
HXLINE(  22)										_hx_tmp77 = false;
            									}
            									else {
HXLINE(  22)										if (((s17 + t17) < scaled1->A)) {
HXLINE(  22)											_hx_tmp77 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp77 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp77 = false;
            								}
HXDLIN(  22)								if (_hx_tmp77) {
HXLINE(  22)									hits3 = (hits3 + 1);
HXDLIN(  22)									averageX3 = (averageX3 + x23);
HXDLIN(  22)									averageY3 = (averageY3 + y23);
HXDLIN(  22)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  22)								Float x27 = (px2 + x33);
HXDLIN(  22)								Float y27 = (py2 + y33);
HXDLIN(  22)								bool _hx_tmp81;
HXDLIN(  22)								bool _hx_tmp82;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this77 = scaled1->xIter3;
HXDLIN(  22)								bool _hx_tmp83;
HXDLIN(  22)								if ((x27 > (this77->start - 1))) {
HXLINE(  22)									_hx_tmp83 = (x27 < (this77->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp83 = false;
            								}
HXDLIN(  22)								if (_hx_tmp83) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this78 = scaled1->yIter3;
HXDLIN(  22)									if ((y27 > (this78->start - 1))) {
HXLINE(  22)										_hx_tmp82 = (y27 < (this78->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp82 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp82 = false;
            								}
HXDLIN(  22)								if (_hx_tmp82) {
HXLINE(  22)									Float s18 = ((scaled1->s0 + (scaled1->sx * x27)) + (scaled1->sy * y27));
HXDLIN(  22)									Float t18 = ((scaled1->t0 + (scaled1->tx * x27)) + (scaled1->ty * y27));
HXDLIN(  22)									bool _hx_tmp84;
HXDLIN(  22)									if (!((s18 <= 0))) {
HXLINE(  22)										_hx_tmp84 = (t18 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp84 = true;
            									}
HXDLIN(  22)									if (_hx_tmp84) {
HXLINE(  22)										_hx_tmp81 = false;
            									}
            									else {
HXLINE(  22)										if (((s18 + t18) < scaled1->A)) {
HXLINE(  22)											_hx_tmp81 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp81 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp81 = false;
            								}
HXDLIN(  22)								if (_hx_tmp81) {
HXLINE(  22)									hits3 = (hits3 + 1);
HXDLIN(  22)									averageX3 = (averageX3 + x33);
HXDLIN(  22)									averageY3 = (averageY3 + y33);
HXDLIN(  22)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  22)								Float x28 = (px2 + x43);
HXDLIN(  22)								Float y28 = (py2 + y43);
HXDLIN(  22)								bool _hx_tmp85;
HXDLIN(  22)								bool _hx_tmp86;
HXDLIN(  22)								 ::pi_xy::iter::IntIterStart this79 = scaled1->xIter3;
HXDLIN(  22)								bool _hx_tmp87;
HXDLIN(  22)								if ((x28 > (this79->start - 1))) {
HXLINE(  22)									_hx_tmp87 = (x28 < (this79->max + 1));
            								}
            								else {
HXLINE(  22)									_hx_tmp87 = false;
            								}
HXDLIN(  22)								if (_hx_tmp87) {
HXLINE(  22)									 ::pi_xy::iter::IntIterStart this80 = scaled1->yIter3;
HXDLIN(  22)									if ((y28 > (this80->start - 1))) {
HXLINE(  22)										_hx_tmp86 = (y28 < (this80->max + 1));
            									}
            									else {
HXLINE(  22)										_hx_tmp86 = false;
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp86 = false;
            								}
HXDLIN(  22)								if (_hx_tmp86) {
HXLINE(  22)									Float s19 = ((scaled1->s0 + (scaled1->sx * x28)) + (scaled1->sy * y28));
HXDLIN(  22)									Float t19 = ((scaled1->t0 + (scaled1->tx * x28)) + (scaled1->ty * y28));
HXDLIN(  22)									bool _hx_tmp88;
HXDLIN(  22)									if (!((s19 <= 0))) {
HXLINE(  22)										_hx_tmp88 = (t19 <= 0);
            									}
            									else {
HXLINE(  22)										_hx_tmp88 = true;
            									}
HXDLIN(  22)									if (_hx_tmp88) {
HXLINE(  22)										_hx_tmp85 = false;
            									}
            									else {
HXLINE(  22)										if (((s19 + t19) < scaled1->A)) {
HXLINE(  22)											_hx_tmp85 = true;
            										}
            										else {
HXLINE(  22)											_hx_tmp85 = false;
            										}
            									}
            								}
            								else {
HXLINE(  22)									_hx_tmp85 = false;
            								}
HXDLIN(  22)								if (_hx_tmp85) {
HXLINE(  22)									hits3 = (hits3 + 1);
HXDLIN(  22)									averageX3 = (averageX3 + x43);
HXDLIN(  22)									averageY3 = (averageY3 + y43);
HXDLIN(  22)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  22)								if ((hits3 != 0)) {
HXLINE( 244)									averageX3 = (px2 + (averageX3 / ( (Float)(hits3) )));
HXLINE( 245)									averageY3 = (py2 + (averageY3 / ( (Float)(hits3) )));
            								}
            								else {
HXLINE( 247)									averageX3 = ( (Float)(px2) );
HXLINE( 248)									averageY3 = ( (Float)(py2) );
            								}
HXLINE(  22)								Float fractionTotal7 = fractionTotal6;
HXDLIN(  22)								Float sampleScaled_fractionTotal1 = fractionTotal7;
HXDLIN(  22)								Float sampleScaled_averageX1 = averageX3;
HXDLIN(  22)								Float sampleScaled_averageY1 = averageY3;
HXDLIN(  22)								bool sampleScaled_notHit1 = (fractionTotal7 == ((Float)0.));
HXDLIN(  22)								Float scaledTotal1 = sampleScaled_fractionTotal1;
HXDLIN(  22)								bool _hx_tmp89;
HXDLIN(  22)								if (!((scaledTotal1 > hitTotal1))) {
HXLINE(  22)									_hx_tmp89 = (hitTotal1 == ((Float)1.));
            								}
            								else {
HXLINE(  22)									_hx_tmp89 = true;
            								}
HXDLIN(  22)								if (_hx_tmp89) {
HXLINE(  22)									Float pcx6 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  22)									Float pcy6 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  22)									Float dot316 = ((pcx6 * barycentric_bcx1) + (pcy6 * barycentric_bcy1));
HXDLIN(  22)									Float dot326 = ((pcx6 * barycentric_acx1) + (pcy6 * barycentric_acy1));
HXDLIN(  22)									Float ratioA8 = (((barycentric_dot221 * dot316) - (barycentric_dot121 * dot326)) * barycentric_denom11);
HXDLIN(  22)									Float ratioB8 = (((barycentric_dot111 * dot326) - (barycentric_dot121 * dot316)) * barycentric_denom11);
HXDLIN(  22)									Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN(  22)									Float ratiosAvg_ratioA4 = ratioA8;
HXDLIN(  22)									Float ratiosAvg_ratioB4 = ratioB8;
HXDLIN(  22)									Float ratiosAvg_ratioC4 = ratioC8;
HXDLIN(  22)									Float ratioA_4 = ratiosAvg_ratioA4;
HXDLIN(  22)									Float ratioB_4 = ratiosAvg_ratioB4;
HXDLIN(  22)									Float ratioC_4 = ratiosAvg_ratioC4;
HXDLIN(  22)									int i19 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_4) + (( (Float)(aB1) ) * ratioB_4)) + (( (Float)(aC1) ) * ratioC_4)));
HXDLIN(  22)									if ((i19 > 255)) {
HXLINE(  24)										i19 = 255;
            									}
HXLINE(  22)									if ((i19 < 0)) {
HXLINE(  25)										i19 = 0;
            									}
HXLINE( 187)									a9 = i19;
HXLINE(  22)									int i20 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_4) + (( (Float)(rB1) ) * ratioB_4)) + (( (Float)(rC1) ) * ratioC_4)));
HXDLIN(  22)									if ((i20 > 255)) {
HXLINE(  24)										i20 = 255;
            									}
HXLINE(  22)									if ((i20 < 0)) {
HXLINE(  25)										i20 = 0;
            									}
HXLINE( 188)									r6 = i20;
HXLINE(  22)									int i21 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_4) + (( (Float)(gB1) ) * ratioB_4)) + (( (Float)(gC1) ) * ratioC_4)));
HXDLIN(  22)									if ((i21 > 255)) {
HXLINE(  24)										i21 = 255;
            									}
HXLINE(  22)									if ((i21 < 0)) {
HXLINE(  25)										i21 = 0;
            									}
HXLINE( 189)									g6 = i21;
HXLINE(  22)									int i22 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_4) + (( (Float)(bB1) ) * ratioB_4)) + (( (Float)(bC1) ) * ratioC_4)));
HXDLIN(  22)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE(  22)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE( 190)									b6 = i22;
HXLINE(  22)									{
HXLINE(  22)										int location4;
HXDLIN(  22)										if (pixelImage->useVirtualPos) {
HXLINE(  22)											location4 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  22)											location4 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            										}
HXDLIN(  22)										bool _hx_tmp90;
HXDLIN(  22)										if (pixelImage->transparent) {
HXLINE(  22)											_hx_tmp90 = (a9 < 254);
            										}
            										else {
HXLINE(  22)											_hx_tmp90 = false;
            										}
HXDLIN(  22)										if (_hx_tmp90) {
HXLINE(  22)											int this81 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN(  22)											int old4;
HXDLIN(  22)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)												old4 = ((((((this81 >> 24) & 255) << 24) | ((this81 & 255) << 16)) | (((this81 >> 8) & 255) << 8)) | ((this81 >> 16) & 255));
            											}
            											else {
HXLINE(  22)												old4 = this81;
            											}
HXDLIN(  22)											int rhs4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  22)											Float a18;
HXDLIN(  22)											int this82 = ((old4 >> 24) & 255);
HXDLIN(  22)											if ((this82 == 0)) {
HXLINE(  22)												a18 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												a18 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float r14;
HXDLIN(  22)											int this83 = ((old4 >> 16) & 255);
HXDLIN(  22)											if ((this83 == 0)) {
HXLINE(  22)												r14 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												r14 = (( (Float)(this83) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float g14;
HXDLIN(  22)											int this84 = ((old4 >> 8) & 255);
HXDLIN(  22)											if ((this84 == 0)) {
HXLINE(  22)												g14 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												g14 = (( (Float)(this84) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float b15;
HXDLIN(  22)											int this85 = (old4 & 255);
HXDLIN(  22)											if ((this85 == 0)) {
HXLINE(  22)												b15 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												b15 = (( (Float)(this85) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float a25;
HXDLIN(  22)											int this86 = ((rhs4 >> 24) & 255);
HXDLIN(  22)											if ((this86 == 0)) {
HXLINE(  22)												a25 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												a25 = (( (Float)(this86) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float r24;
HXDLIN(  22)											int this87 = ((rhs4 >> 16) & 255);
HXDLIN(  22)											if ((this87 == 0)) {
HXLINE(  22)												r24 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												r24 = (( (Float)(this87) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float g24;
HXDLIN(  22)											int this88 = ((rhs4 >> 8) & 255);
HXDLIN(  22)											if ((this88 == 0)) {
HXLINE(  22)												g24 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												g24 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float b25;
HXDLIN(  22)											int this89 = (rhs4 & 255);
HXDLIN(  22)											if ((this89 == 0)) {
HXLINE(  22)												b25 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												b25 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float a35 = (a18 * (( (Float)(1) ) - a25));
HXDLIN(  22)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a35) + (r24 * a25))));
HXDLIN(  22)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a35) + (g24 * a25))));
HXDLIN(  22)											int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN(  22)											int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  22)											int blended4 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b10);
HXDLIN(  22)											{
HXLINE(  22)												int _hx_tmp91;
HXDLIN(  22)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)													_hx_tmp91 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE(  22)													_hx_tmp91 = blended4;
            												}
HXDLIN(  22)												::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp91);
            											}
            										}
            										else {
HXLINE(  22)											int value4;
HXDLIN(  22)											if (pixelImage->isLittle) {
HXLINE(  22)												value4 = ((((a9 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  22)												value4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            											}
HXDLIN(  22)											::iterMagic::Iimg_obj::set(pixelImage->image,location4,value4);
            										}
            									}
            								}
            								else {
HXLINE(  22)									Float pcx7 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  22)									Float pcy7 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  22)									Float dot317 = ((pcx7 * barycentric_bcx1) + (pcy7 * barycentric_bcy1));
HXDLIN(  22)									Float dot327 = ((pcx7 * barycentric_acx1) + (pcy7 * barycentric_acy1));
HXDLIN(  22)									Float ratioA9 = (((barycentric_dot221 * dot317) - (barycentric_dot121 * dot327)) * barycentric_denom11);
HXDLIN(  22)									Float ratioB9 = (((barycentric_dot111 * dot327) - (barycentric_dot121 * dot317)) * barycentric_denom11);
HXDLIN(  22)									Float ratioC9 = ((((Float)1.0) - ratioB9) - ratioA9);
HXDLIN(  22)									Float ratiosAvg_ratioA5 = ratioA9;
HXDLIN(  22)									Float ratiosAvg_ratioB5 = ratioB9;
HXDLIN(  22)									Float ratiosAvg_ratioC5 = ratioC9;
HXDLIN(  22)									Float ratioA_5 = ratiosAvg_ratioA5;
HXDLIN(  22)									Float ratioB_5 = ratiosAvg_ratioB5;
HXDLIN(  22)									Float ratioC_5 = ratiosAvg_ratioC5;
HXDLIN(  22)									int i23 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_5) + (( (Float)(aB1) ) * ratioB_5)) + (( (Float)(aC1) ) * ratioC_5)));
HXDLIN(  22)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE(  22)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE( 198)									a9 = i23;
HXLINE(  22)									int i24 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_5) + (( (Float)(rB1) ) * ratioB_5)) + (( (Float)(rC1) ) * ratioC_5)));
HXDLIN(  22)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE(  22)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE( 199)									r6 = i24;
HXLINE(  22)									int i25 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_5) + (( (Float)(gB1) ) * ratioB_5)) + (( (Float)(gC1) ) * ratioC_5)));
HXDLIN(  22)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE(  22)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE( 200)									g6 = i25;
HXLINE(  22)									int i26 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_5) + (( (Float)(bB1) ) * ratioB_5)) + (( (Float)(bC1) ) * ratioC_5)));
HXDLIN(  22)									if ((i26 > 255)) {
HXLINE(  24)										i26 = 255;
            									}
HXLINE(  22)									if ((i26 < 0)) {
HXLINE(  25)										i26 = 0;
            									}
HXLINE( 201)									b6 = i26;
HXLINE(  22)									{
HXLINE(  22)										int a20;
HXDLIN(  22)										if ((aScale1 > ((Float)0.9))) {
HXLINE(  22)											a20 = a9;
            										}
            										else {
HXLINE(  22)											int i27 = ::Std_obj::_hx_int((( (Float)(a9) ) * aScale1));
HXDLIN(  22)											if ((i27 > 255)) {
HXLINE(  24)												i27 = 255;
            											}
HXLINE(  22)											if ((i27 < 0)) {
HXLINE(  25)												i27 = 0;
            											}
HXLINE(  22)											a20 = i27;
            										}
HXDLIN(  22)										int location5;
HXDLIN(  22)										if (pixelImage->useVirtualPos) {
HXLINE(  22)											location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  22)											location5 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            										}
HXDLIN(  22)										bool _hx_tmp92;
HXDLIN(  22)										if (pixelImage->transparent) {
HXLINE(  22)											_hx_tmp92 = (a20 < 254);
            										}
            										else {
HXLINE(  22)											_hx_tmp92 = false;
            										}
HXDLIN(  22)										if (_hx_tmp92) {
HXLINE(  22)											int this90 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  22)											int old5;
HXDLIN(  22)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)												old5 = ((((((this90 >> 24) & 255) << 24) | ((this90 & 255) << 16)) | (((this90 >> 8) & 255) << 8)) | ((this90 >> 16) & 255));
            											}
            											else {
HXLINE(  22)												old5 = this90;
            											}
HXDLIN(  22)											int rhs5 = ((((a20 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  22)											Float a110;
HXDLIN(  22)											int this91 = ((old5 >> 24) & 255);
HXDLIN(  22)											if ((this91 == 0)) {
HXLINE(  22)												a110 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float r15;
HXDLIN(  22)											int this92 = ((old5 >> 16) & 255);
HXDLIN(  22)											if ((this92 == 0)) {
HXLINE(  22)												r15 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float g15;
HXDLIN(  22)											int this93 = ((old5 >> 8) & 255);
HXDLIN(  22)											if ((this93 == 0)) {
HXLINE(  22)												g15 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float b16;
HXDLIN(  22)											int this94 = (old5 & 255);
HXDLIN(  22)											if ((this94 == 0)) {
HXLINE(  22)												b16 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												b16 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float a26;
HXDLIN(  22)											int this95 = ((rhs5 >> 24) & 255);
HXDLIN(  22)											if ((this95 == 0)) {
HXLINE(  22)												a26 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												a26 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float r25;
HXDLIN(  22)											int this96 = ((rhs5 >> 16) & 255);
HXDLIN(  22)											if ((this96 == 0)) {
HXLINE(  22)												r25 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float g25;
HXDLIN(  22)											int this97 = ((rhs5 >> 8) & 255);
HXDLIN(  22)											if ((this97 == 0)) {
HXLINE(  22)												g25 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float b26;
HXDLIN(  22)											int this98 = (rhs5 & 255);
HXDLIN(  22)											if ((this98 == 0)) {
HXLINE(  22)												b26 = ((Float)0.);
            											}
            											else {
HXLINE(  22)												b26 = (( (Float)(this98) ) / ( (Float)(255) ));
            											}
HXDLIN(  22)											Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  22)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a36) + (r25 * a26))));
HXDLIN(  22)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a36) + (g25 * a26))));
HXDLIN(  22)											int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a36) + (b26 * a26))));
HXDLIN(  22)											int a27 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  22)											int blended5 = ((((a27 << 24) | (r9 << 16)) | (g9 << 8)) | b17);
HXDLIN(  22)											{
HXLINE(  22)												int _hx_tmp93;
HXDLIN(  22)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)													_hx_tmp93 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXLINE(  22)													_hx_tmp93 = blended5;
            												}
HXDLIN(  22)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp93);
            											}
            										}
            										else {
HXLINE(  22)											int value5;
HXDLIN(  22)											if (pixelImage->isLittle) {
HXLINE(  22)												value5 = ((((a20 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  22)												value5 = ((((a20 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            											}
HXDLIN(  22)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,value5);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  22)		 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  22)		 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  22)		Float v_ty;
HXDLIN(  22)		Float v_tx;
HXDLIN(  22)		Float v_t0;
HXDLIN(  22)		Float v_sy;
HXDLIN(  22)		Float v_sx;
HXDLIN(  22)		Float v_s0;
HXDLIN(  22)		Float v_A;
HXDLIN(  22)		Float ax7 = ax4;
HXDLIN(  22)		Float ay7 = ay4;
HXDLIN(  22)		 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  22)		Float bx3 = bx2;
HXDLIN(  22)		Float by3 = by2;
HXDLIN(  22)		Float cx3 = cx2;
HXDLIN(  22)		Float cy3 = cy2;
HXDLIN(  22)		bool adjustWinding2 = (((((ax7 * by3) - (bx3 * ay7)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay7) - (ax7 * cy3))) > 0);
HXDLIN(  22)		if (!(adjustWinding2)) {
HXLINE(  22)			Float bx_6 = bx3;
HXDLIN(  22)			Float by_6 = by3;
HXLINE(  24)			bx3 = cx3;
HXLINE(  25)			by3 = cy3;
HXLINE(  26)			cx3 = bx_6;
HXLINE(  27)			cy3 = by_6;
            		}
HXLINE(  22)		Float v_ax = ax7;
HXDLIN(  22)		Float v_ay = ay7;
HXDLIN(  22)		Float v_bx = bx3;
HXDLIN(  22)		Float v_by = by3;
HXDLIN(  22)		Float v_cx = cx3;
HXDLIN(  22)		Float v_cy = cy3;
HXDLIN(  22)		bool v_preCalculated = true;
HXDLIN(  22)		{
HXLINE(  22)			v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  22)			v_sx = (v_cy - v_ay);
HXDLIN(  22)			v_sy = (v_ax - v_cx);
HXDLIN(  22)			v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  22)			v_tx = (v_ay - v_by);
HXDLIN(  22)			v_ty = (v_bx - v_ax);
HXDLIN(  22)			v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  22)			Float a28 = v_ax;
HXDLIN(  22)			Float b18 = v_bx;
HXDLIN(  22)			Float c4 = v_cx;
HXDLIN(  22)			if ((a28 > b18)) {
HXLINE(  22)				if ((a28 > c4)) {
HXLINE(  22)					int min8;
HXDLIN(  22)					if ((b18 > c4)) {
HXLINE(  22)						min8 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE(  22)						min8 = ::Math_obj::floor(b18);
            					}
HXDLIN(  22)					int ii_min16 = min8;
HXDLIN(  22)					int ii_max16 = ::Math_obj::ceil(a28);
HXDLIN(  22)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE(  22)					int ii_min17 = ::Math_obj::floor(b18);
HXDLIN(  22)					int ii_max17 = ::Math_obj::ceil(c4);
HXDLIN(  22)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE(  22)				if ((b18 > c4)) {
HXLINE(  22)					int min9;
HXDLIN(  22)					if ((a28 > c4)) {
HXLINE(  22)						min9 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE(  22)						min9 = ::Math_obj::ceil(a28);
            					}
HXDLIN(  22)					int ii_min18 = min9;
HXDLIN(  22)					int ii_max18 = ::Math_obj::ceil(b18);
HXDLIN(  22)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE(  22)					int ii_min19 = ::Math_obj::floor(a28);
HXDLIN(  22)					int ii_max19 = ::Math_obj::ceil(c4);
HXDLIN(  22)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN(  22)			Float a29 = v_ay;
HXDLIN(  22)			Float b19 = v_by;
HXDLIN(  22)			Float c5 = v_cy;
HXDLIN(  22)			if ((a29 > b19)) {
HXLINE(  22)				if ((a29 > c5)) {
HXLINE(  22)					int min10;
HXDLIN(  22)					if ((b19 > c5)) {
HXLINE(  22)						min10 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE(  22)						min10 = ::Math_obj::floor(b19);
            					}
HXDLIN(  22)					int ii_min20 = min10;
HXDLIN(  22)					int ii_max20 = ::Math_obj::ceil(a29);
HXDLIN(  22)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE(  22)					int ii_min21 = ::Math_obj::floor(b19);
HXDLIN(  22)					int ii_max21 = ::Math_obj::ceil(c5);
HXDLIN(  22)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE(  22)				if ((b19 > c5)) {
HXLINE(  22)					int min11;
HXDLIN(  22)					if ((a29 > c5)) {
HXLINE(  22)						min11 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE(  22)						min11 = ::Math_obj::ceil(a29);
            					}
HXDLIN(  22)					int ii_min22 = min11;
HXDLIN(  22)					int ii_max22 = ::Math_obj::ceil(b19);
HXDLIN(  22)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE(  22)					int ii_min23 = ::Math_obj::floor(a29);
HXDLIN(  22)					int ii_max23 = ::Math_obj::ceil(c5);
HXDLIN(  22)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
            		}
HXDLIN(  22)		return  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,quadPoints_ax,quadPoints_ay,quadPoints_bx,quadPoints_by,quadPoints_cx,quadPoints_cy,quadPoints_dx,quadPoints_dy,hasHit);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(TriPixelSmoothGrad_Fields__obj,lineXYGradPentBary,return )

 ::pi_xy::algo::HitQuad TriPixelSmoothGrad_Fields__obj::lineGradPentBary( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float thick,Float h,Float theta,int colorA,int colorB,int colorC,int colorD,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_c88345def33277a9_31_lineGradPentBary)
HXLINE(  32)		Float lineInfo_px = px;
HXDLIN(  32)		Float lineInfo_py = py;
HXDLIN(  32)		Float lineInfo_thick = thick;
HXDLIN(  32)		Float lineInfo_long = h;
HXDLIN(  32)		Float lineInfo_theta = theta;
HXLINE(  33)		Float radius = (lineInfo_thick / ( (Float)(2) ));
HXDLIN(  33)		Float dx = ((Float)0.1);
HXDLIN(  33)		Float dy = radius;
HXDLIN(  33)		Float cx = lineInfo_long;
HXDLIN(  33)		Float cy = radius;
HXDLIN(  33)		Float bx = lineInfo_long;
HXDLIN(  33)		Float by = -(radius);
HXDLIN(  33)		Float ax = ((Float)0.1);
HXDLIN(  33)		Float ay = -(radius);
HXDLIN(  33)		Float quadPoints_ax = ax;
HXDLIN(  33)		Float quadPoints_ay = ay;
HXDLIN(  33)		Float quadPoints_bx = bx;
HXDLIN(  33)		Float quadPoints_by = by;
HXDLIN(  33)		Float quadPoints_cx = cx;
HXDLIN(  33)		Float quadPoints_cy = cy;
HXDLIN(  33)		Float quadPoints_dx = dx;
HXDLIN(  33)		Float quadPoints_dy = dy;
HXDLIN(  33)		Float sin = ::Math_obj::sin(lineInfo_theta);
HXDLIN(  33)		Float cos = ::Math_obj::cos(lineInfo_theta);
HXDLIN(  33)		Float centreX = lineInfo_px;
HXDLIN(  33)		Float centreY = lineInfo_py;
HXDLIN(  33)		Float temp = ((Float)0.);
HXLINE( 108)		temp = (centreX + ((quadPoints_ax * cos) - (quadPoints_ay * sin)));
HXLINE(  33)		quadPoints_ay = (centreY + ((quadPoints_ay * cos) + (quadPoints_ax * sin)));
HXDLIN(  33)		quadPoints_ax = temp;
HXLINE( 112)		temp = (centreX + ((quadPoints_bx * cos) - (quadPoints_by * sin)));
HXLINE(  33)		quadPoints_by = (centreY + ((quadPoints_by * cos) + (quadPoints_bx * sin)));
HXDLIN(  33)		quadPoints_bx = temp;
HXLINE( 116)		temp = (centreX + ((quadPoints_cx * cos) - (quadPoints_cy * sin)));
HXLINE(  33)		quadPoints_cy = (centreY + ((quadPoints_cy * cos) + (quadPoints_cx * sin)));
HXDLIN(  33)		quadPoints_cx = temp;
HXLINE( 120)		temp = (centreX + ((quadPoints_dx * cos) - (quadPoints_dy * sin)));
HXLINE(  33)		quadPoints_dy = (centreY + ((quadPoints_dy * cos) + (quadPoints_dx * sin)));
HXDLIN(  33)		quadPoints_dx = temp;
HXLINE(  34)		{
HXLINE(  34)			Float ax1 = quadPoints_ax;
HXDLIN(  34)			Float ay1 = quadPoints_ay;
HXDLIN(  34)			Float bx1 = quadPoints_bx;
HXDLIN(  34)			Float by1 = quadPoints_by;
HXDLIN(  34)			Float cx1 = quadPoints_dx;
HXDLIN(  34)			Float cy1 = quadPoints_dy;
HXDLIN(  34)			bool softAB = true;
HXDLIN(  34)			bool softBC = false;
HXDLIN(  34)			bool softCA = true;
HXDLIN(  34)			bool adjustWinding = (((((ax1 * by1) - (bx1 * ay1)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay1) - (ax1 * cy1))) > 0);
HXDLIN(  34)			if (!(adjustWinding)) {
HXLINE(  34)				Float bx_ = bx1;
HXDLIN(  34)				Float by_ = by1;
HXLINE(  62)				bx1 = cx1;
HXLINE(  63)				by1 = cy1;
HXLINE(  64)				cx1 = bx_;
HXLINE(  65)				cy1 = by_;
            			}
HXLINE(  34)			{
HXLINE(  34)				int aA = ((colorB >> 24) & 255);
HXDLIN(  34)				int rA = ((colorB >> 16) & 255);
HXDLIN(  34)				int gA = ((colorB >> 8) & 255);
HXDLIN(  34)				int bA = (colorB & 255);
HXDLIN(  34)				int aB = ((colorA >> 24) & 255);
HXDLIN(  34)				int rB = ((colorA >> 16) & 255);
HXDLIN(  34)				int gB = ((colorA >> 8) & 255);
HXDLIN(  34)				int bB = (colorA & 255);
HXDLIN(  34)				int aC = ((colorD >> 24) & 255);
HXDLIN(  34)				int rC = ((colorD >> 16) & 255);
HXDLIN(  34)				int gC = ((colorD >> 8) & 255);
HXDLIN(  34)				int bC = (colorD & 255);
HXDLIN(  34)				int a = 0;
HXDLIN(  34)				int r = 0;
HXDLIN(  34)				int g = 0;
HXDLIN(  34)				int b = 0;
HXDLIN(  34)				 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,true);
HXDLIN(  34)				 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN(  34)				 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN(  34)				Float barycentric_dot22;
HXDLIN(  34)				Float barycentric_dot12;
HXDLIN(  34)				Float barycentric_dot11;
HXDLIN(  34)				Float barycentric_denom1;
HXDLIN(  34)				Float barycentric_bcy;
HXDLIN(  34)				Float barycentric_bcx;
HXDLIN(  34)				Float barycentric_acy;
HXDLIN(  34)				Float barycentric_acx;
HXDLIN(  34)				Float barycentric_ax = hitTriScalar->ax;
HXDLIN(  34)				Float barycentric_ay = hitTriScalar->ay;
HXDLIN(  34)				Float barycentric_bx = hitTriScalar->bx;
HXDLIN(  34)				Float barycentric_by = hitTriScalar->by;
HXDLIN(  34)				Float barycentric_cx = hitTriScalar->cx;
HXDLIN(  34)				Float barycentric_cy = hitTriScalar->cy;
HXDLIN(  34)				bool barycentric_preCalculated = true;
HXDLIN(  34)				{
HXLINE(  34)					barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN(  34)					barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN(  34)					barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN(  34)					barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN(  34)					Float ax2 = barycentric_bcx;
HXDLIN(  34)					Float ay2 = barycentric_bcy;
HXDLIN(  34)					barycentric_dot11 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  34)					barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN(  34)					Float ax3 = barycentric_acx;
HXDLIN(  34)					Float ay3 = barycentric_acy;
HXDLIN(  34)					barycentric_dot22 = ((ax3 * ax3) + (ay3 * ay3));
HXDLIN(  34)					barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN(  34)					Float a1 = barycentric_ax;
HXDLIN(  34)					Float b1 = barycentric_bx;
HXDLIN(  34)					Float c = barycentric_cx;
HXDLIN(  34)					if ((a1 > b1)) {
HXLINE(  34)						if ((a1 > c)) {
HXLINE(  34)							int min;
HXDLIN(  34)							if ((b1 > c)) {
HXLINE(  34)								min = ::Math_obj::floor(c);
            							}
            							else {
HXLINE(  34)								min = ::Math_obj::floor(b1);
            							}
HXDLIN(  34)							int ii_min = min;
HXDLIN(  34)							int ii_max = ::Math_obj::ceil(a1);
HXDLIN(  34)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            						}
            						else {
HXLINE(  34)							int ii_min1 = ::Math_obj::floor(b1);
HXDLIN(  34)							int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  34)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            						}
            					}
            					else {
HXLINE(  34)						if ((b1 > c)) {
HXLINE(  34)							int min1;
HXDLIN(  34)							if ((a1 > c)) {
HXLINE(  34)								min1 = ::Math_obj::floor(c);
            							}
            							else {
HXLINE(  34)								min1 = ::Math_obj::ceil(a1);
            							}
HXDLIN(  34)							int ii_min2 = min1;
HXDLIN(  34)							int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN(  34)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            						}
            						else {
HXLINE(  34)							int ii_min3 = ::Math_obj::floor(a1);
HXDLIN(  34)							int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  34)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            						}
            					}
HXDLIN(  34)					Float a2 = barycentric_ay;
HXDLIN(  34)					Float b2 = barycentric_by;
HXDLIN(  34)					Float c1 = barycentric_cy;
HXDLIN(  34)					if ((a2 > b2)) {
HXLINE(  34)						if ((a2 > c1)) {
HXLINE(  34)							int min2;
HXDLIN(  34)							if ((b2 > c1)) {
HXLINE(  34)								min2 = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE(  34)								min2 = ::Math_obj::floor(b2);
            							}
HXDLIN(  34)							int ii_min4 = min2;
HXDLIN(  34)							int ii_max4 = ::Math_obj::ceil(a2);
HXDLIN(  34)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            						}
            						else {
HXLINE(  34)							int ii_min5 = ::Math_obj::floor(b2);
HXDLIN(  34)							int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  34)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            						}
            					}
            					else {
HXLINE(  34)						if ((b2 > c1)) {
HXLINE(  34)							int min3;
HXDLIN(  34)							if ((a2 > c1)) {
HXLINE(  34)								min3 = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE(  34)								min3 = ::Math_obj::ceil(a2);
            							}
HXDLIN(  34)							int ii_min6 = min3;
HXDLIN(  34)							int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN(  34)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            						}
            						else {
HXLINE(  34)							int ii_min7 = ::Math_obj::floor(a2);
HXDLIN(  34)							int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  34)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            						}
            					}
            				}
HXDLIN(  34)				Float scaleA;
HXDLIN(  34)				bool scaleA1;
HXDLIN(  34)				if (!(softAB)) {
HXLINE(  34)					scaleA1 = softCA;
            				}
            				else {
HXLINE(  34)					scaleA1 = true;
            				}
HXDLIN(  34)				if (scaleA1) {
HXLINE(  34)					scaleA = ((Float)1.5);
            				}
            				else {
HXLINE(  34)					scaleA = ((Float)1.);
            				}
HXDLIN(  34)				Float scaleB;
HXDLIN(  34)				bool scaleB1;
HXDLIN(  34)				if (!(softAB)) {
HXLINE(  34)					scaleB1 = softBC;
            				}
            				else {
HXLINE(  34)					scaleB1 = true;
            				}
HXDLIN(  34)				if (scaleB1) {
HXLINE(  34)					scaleB = ((Float)1.5);
            				}
            				else {
HXLINE(  34)					scaleB = ((Float)1.);
            				}
HXDLIN(  34)				Float scaleC;
HXDLIN(  34)				bool scaleC1;
HXDLIN(  34)				if (!(softBC)) {
HXLINE(  34)					scaleC1 = softCA;
            				}
            				else {
HXLINE(  34)					scaleC1 = true;
            				}
HXDLIN(  34)				if (scaleC1) {
HXLINE(  34)					scaleC = ((Float)1.5);
            				}
            				else {
HXLINE(  34)					scaleC = ((Float)1.);
            				}
HXDLIN(  34)				Float x0 = ((Float)0.);
HXDLIN(  34)				Float y0 = ((Float)0.);
HXDLIN(  34)				bool isScaledA = true;
HXDLIN(  34)				bool isScaledB = true;
HXDLIN(  34)				bool isScaledC = true;
HXDLIN(  34)				if (isScaledA) {
HXLINE(  34)					if (isScaledB) {
HXLINE(  34)						if (isScaledC) {
HXLINE(  82)							x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)							y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x0 = hitTriScalar->cx;
HXLINE(  80)							y0 = hitTriScalar->cy;
            						}
            					}
            					else {
HXLINE(  34)						if (isScaledC) {
HXLINE(  76)							x0 = hitTriScalar->bx;
HXLINE(  77)							y0 = hitTriScalar->by;
            						}
            						else {
HXLINE(  73)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            						}
            					}
            				}
            				else {
HXLINE(  34)					if (isScaledB) {
HXLINE(  34)						if (isScaledC) {
HXLINE(  70)							x0 = hitTriScalar->ax;
HXLINE(  71)							y0 = hitTriScalar->ay;
            						}
            						else {
HXLINE(  67)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            						}
            					}
            					else {
HXLINE(  34)						if (isScaledC) {
HXLINE(  64)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            						}
            						else {
HXLINE(  61)							x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)							y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  34)				Float ax_;
HXDLIN(  34)				if (isScaledA) {
HXLINE(  34)					Float point = hitTriScalar->ax;
HXDLIN(  34)					point = (point - x0);
HXDLIN(  34)					point = (point * ((Float)0.999));
HXDLIN(  34)					point = (point + x0);
HXDLIN(  34)					ax_ = point;
            				}
            				else {
HXLINE(  34)					ax_ = hitTriScalar->ax;
            				}
HXDLIN(  34)				Float ay_;
HXDLIN(  34)				if (isScaledA) {
HXLINE(  34)					Float point1 = hitTriScalar->ay;
HXDLIN(  34)					point1 = (point1 - y0);
HXDLIN(  34)					point1 = (point1 * ((Float)0.999));
HXDLIN(  34)					point1 = (point1 + y0);
HXDLIN(  34)					ay_ = point1;
            				}
            				else {
HXLINE(  34)					ay_ = hitTriScalar->ay;
            				}
HXDLIN(  34)				Float bx_1;
HXDLIN(  34)				if (isScaledB) {
HXLINE(  34)					Float point2 = hitTriScalar->bx;
HXDLIN(  34)					point2 = (point2 - x0);
HXDLIN(  34)					point2 = (point2 * ((Float)0.999));
HXDLIN(  34)					point2 = (point2 + x0);
HXDLIN(  34)					bx_1 = point2;
            				}
            				else {
HXLINE(  34)					bx_1 = hitTriScalar->bx;
            				}
HXDLIN(  34)				Float by_1;
HXDLIN(  34)				if (isScaledB) {
HXLINE(  34)					Float point3 = hitTriScalar->by;
HXDLIN(  34)					point3 = (point3 - y0);
HXDLIN(  34)					point3 = (point3 * ((Float)0.999));
HXDLIN(  34)					point3 = (point3 + y0);
HXDLIN(  34)					by_1 = point3;
            				}
            				else {
HXLINE(  34)					by_1 = hitTriScalar->by;
            				}
HXDLIN(  34)				Float cx_;
HXDLIN(  34)				if (isScaledC) {
HXLINE(  34)					Float point4 = hitTriScalar->cx;
HXDLIN(  34)					point4 = (point4 - x0);
HXDLIN(  34)					point4 = (point4 * ((Float)0.999));
HXDLIN(  34)					point4 = (point4 + x0);
HXDLIN(  34)					cx_ = point4;
            				}
            				else {
HXLINE(  34)					cx_ = hitTriScalar->cx;
            				}
HXDLIN(  34)				Float cy_;
HXDLIN(  34)				if (isScaledC) {
HXLINE(  34)					Float point5 = hitTriScalar->cy;
HXDLIN(  34)					point5 = (point5 - y0);
HXDLIN(  34)					point5 = (point5 * ((Float)0.999));
HXDLIN(  34)					point5 = (point5 + y0);
HXDLIN(  34)					cy_ = point5;
            				}
            				else {
HXLINE(  34)					cy_ = hitTriScalar->cy;
            				}
HXDLIN(  34)				 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_1,by_1,cx_,cy_,true);
HXDLIN(  34)				Float x01 = ((Float)0.);
HXDLIN(  34)				Float y01 = ((Float)0.);
HXDLIN(  34)				bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN(  34)				bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN(  34)				bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN(  34)				if (isScaledA1) {
HXLINE(  34)					if (isScaledB1) {
HXLINE(  34)						if (isScaledC1) {
HXLINE(  82)							x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)							y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x01 = scaled->cx;
HXLINE(  80)							y01 = scaled->cy;
            						}
            					}
            					else {
HXLINE(  34)						if (isScaledC1) {
HXLINE(  76)							x01 = scaled->bx;
HXLINE(  77)							y01 = scaled->by;
            						}
            						else {
HXLINE(  73)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            						}
            					}
            				}
            				else {
HXLINE(  34)					if (isScaledB1) {
HXLINE(  34)						if (isScaledC1) {
HXLINE(  70)							x01 = scaled->ax;
HXLINE(  71)							y01 = scaled->ay;
            						}
            						else {
HXLINE(  67)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            						}
            					}
            					else {
HXLINE(  34)						if (isScaledC1) {
HXLINE(  64)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            						}
            						else {
HXLINE(  61)							x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)							y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  34)				Float ax_1;
HXDLIN(  34)				if (isScaledA1) {
HXLINE(  34)					Float point6 = scaled->ax;
HXDLIN(  34)					point6 = (point6 - x01);
HXDLIN(  34)					point6 = (point6 * scaleA);
HXDLIN(  34)					point6 = (point6 + x01);
HXDLIN(  34)					ax_1 = point6;
            				}
            				else {
HXLINE(  34)					ax_1 = scaled->ax;
            				}
HXDLIN(  34)				Float ay_1;
HXDLIN(  34)				if (isScaledA1) {
HXLINE(  34)					Float point7 = scaled->ay;
HXDLIN(  34)					point7 = (point7 - y01);
HXDLIN(  34)					point7 = (point7 * scaleA);
HXDLIN(  34)					point7 = (point7 + y01);
HXDLIN(  34)					ay_1 = point7;
            				}
            				else {
HXLINE(  34)					ay_1 = scaled->ay;
            				}
HXDLIN(  34)				Float bx_2;
HXDLIN(  34)				if (isScaledB1) {
HXLINE(  34)					Float point8 = scaled->bx;
HXDLIN(  34)					point8 = (point8 - x01);
HXDLIN(  34)					point8 = (point8 * scaleB);
HXDLIN(  34)					point8 = (point8 + x01);
HXDLIN(  34)					bx_2 = point8;
            				}
            				else {
HXLINE(  34)					bx_2 = scaled->bx;
            				}
HXDLIN(  34)				Float by_2;
HXDLIN(  34)				if (isScaledB1) {
HXLINE(  34)					Float point9 = scaled->by;
HXDLIN(  34)					point9 = (point9 - y01);
HXDLIN(  34)					point9 = (point9 * scaleB);
HXDLIN(  34)					point9 = (point9 + y01);
HXDLIN(  34)					by_2 = point9;
            				}
            				else {
HXLINE(  34)					by_2 = scaled->by;
            				}
HXDLIN(  34)				Float cx_1;
HXDLIN(  34)				if (isScaledC1) {
HXLINE(  34)					Float point10 = scaled->cx;
HXDLIN(  34)					point10 = (point10 - x01);
HXDLIN(  34)					point10 = (point10 * scaleC);
HXDLIN(  34)					point10 = (point10 + x01);
HXDLIN(  34)					cx_1 = point10;
            				}
            				else {
HXLINE(  34)					cx_1 = scaled->cx;
            				}
HXDLIN(  34)				Float cy_1;
HXDLIN(  34)				if (isScaledC1) {
HXLINE(  34)					Float point11 = scaled->cy;
HXDLIN(  34)					point11 = (point11 - y01);
HXDLIN(  34)					point11 = (point11 * scaleC);
HXDLIN(  34)					point11 = (point11 + y01);
HXDLIN(  34)					cy_1 = point11;
            				}
            				else {
HXLINE(  34)					cy_1 = scaled->cy;
            				}
HXDLIN(  34)				scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_2,by_2,cx_1,cy_1,true);
HXDLIN(  34)				{
HXLINE(  34)					 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN(  34)					int _g_min = this1->start;
HXDLIN(  34)					int _g_max = this1->max;
HXDLIN(  34)					while((_g_min < _g_max)){
HXLINE(  34)						_g_min = (_g_min + 1);
HXDLIN(  34)						int px1 = (_g_min - 1);
HXDLIN(  34)						{
HXLINE(  34)							 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN(  34)							int _g_min1 = this2->start;
HXDLIN(  34)							int _g_max1 = this2->max;
HXDLIN(  34)							while((_g_min1 < _g_max1)){
HXLINE(  34)								_g_min1 = (_g_min1 + 1);
HXDLIN(  34)								int py1 = (_g_min1 - 1);
HXDLIN(  34)								Float pcx = (( (Float)(px1) ) - barycentric_cx);
HXDLIN(  34)								Float pcy = (( (Float)(py1) ) - barycentric_cy);
HXDLIN(  34)								Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN(  34)								Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN(  34)								Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN(  34)								Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN(  34)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  34)								Float ratios_ratioA = ratioA;
HXDLIN(  34)								Float ratios_ratioB = ratioB;
HXDLIN(  34)								Float ratios_ratioC = ratioC;
HXDLIN(  34)								Float v;
HXDLIN(  34)								if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  34)									v = ratios_ratioA;
            								}
            								else {
HXLINE(  34)									v = ratios_ratioB;
            								}
HXDLIN(  34)								Float min_;
HXDLIN(  34)								if ((v < ratios_ratioC)) {
HXLINE(  34)									min_ = v;
            								}
            								else {
HXLINE(  34)									min_ = ratios_ratioC;
            								}
HXDLIN(  34)								bool isSoft;
HXDLIN(  34)								if (softAB) {
HXLINE(  34)									if (softBC) {
HXLINE(  34)										if (softCA) {
HXLINE(  34)											isSoft = true;
            										}
            										else {
HXLINE(  34)											if ((min_ != ratios_ratioB)) {
HXLINE(  34)												Float v1;
HXDLIN(  34)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  34)													v1 = ratios_ratioA;
            												}
            												else {
HXLINE(  34)													v1 = ratios_ratioB;
            												}
HXDLIN(  34)												Float isSoft1;
HXDLIN(  34)												if ((v1 < ratios_ratioC)) {
HXLINE(  34)													isSoft1 = v1;
            												}
            												else {
HXLINE(  34)													isSoft1 = ratios_ratioC;
            												}
HXDLIN(  34)												isSoft = (isSoft1 == ratios_ratioC);
            											}
            											else {
HXLINE(  34)												isSoft = true;
            											}
            										}
            									}
            									else {
HXLINE(  34)										if (softCA) {
HXLINE(  34)											if ((min_ != ratios_ratioA)) {
HXLINE(  34)												Float v2;
HXDLIN(  34)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  34)													v2 = ratios_ratioA;
            												}
            												else {
HXLINE(  34)													v2 = ratios_ratioB;
            												}
HXDLIN(  34)												Float isSoft2;
HXDLIN(  34)												if ((v2 < ratios_ratioC)) {
HXLINE(  34)													isSoft2 = v2;
            												}
            												else {
HXLINE(  34)													isSoft2 = ratios_ratioC;
            												}
HXDLIN(  34)												isSoft = (isSoft2 == ratios_ratioC);
            											}
            											else {
HXLINE(  34)												isSoft = true;
            											}
            										}
            										else {
HXLINE(  34)											isSoft = (min_ == ratios_ratioC);
            										}
            									}
            								}
            								else {
HXLINE(  34)									if (softBC) {
HXLINE(  34)										if (softCA) {
HXLINE(  34)											if ((min_ != ratios_ratioA)) {
HXLINE(  34)												Float v3;
HXDLIN(  34)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  34)													v3 = ratios_ratioA;
            												}
            												else {
HXLINE(  34)													v3 = ratios_ratioB;
            												}
HXDLIN(  34)												Float isSoft3;
HXDLIN(  34)												if ((v3 < ratios_ratioC)) {
HXLINE(  34)													isSoft3 = v3;
            												}
            												else {
HXLINE(  34)													isSoft3 = ratios_ratioC;
            												}
HXDLIN(  34)												isSoft = (isSoft3 == ratios_ratioB);
            											}
            											else {
HXLINE(  34)												isSoft = true;
            											}
            										}
            										else {
HXLINE(  34)											isSoft = (min_ == ratios_ratioB);
            										}
            									}
            									else {
HXLINE(  34)										if (softCA) {
HXLINE(  34)											isSoft = (min_ == ratios_ratioA);
            										}
            										else {
HXLINE(  34)											isSoft = false;
            										}
            									}
            								}
HXDLIN(  34)								Float x02 = ((Float)-0.0739127852035666);
HXDLIN(  34)								Float y02 = ((Float)0.703233176253404202);
HXDLIN(  34)								Float x1 = ((Float)-0.353553390593273564);
HXDLIN(  34)								Float y1 = ((Float)0.61237243569579447);
HXDLIN(  34)								Float x2 = ((Float)-0.572061402817684139);
HXDLIN(  34)								Float y2 = ((Float)0.415626937777453465);
HXDLIN(  34)								Float x3 = ((Float)-0.691654801480225401);
HXDLIN(  34)								Float y3 = ((Float)0.147015766465198733);
HXDLIN(  34)								Float x4 = ((Float)-0.691654801480225512);
HXDLIN(  34)								Float y4 = ((Float)-0.147015766465198261);
HXDLIN(  34)								Float averageX = ((Float)0.);
HXDLIN(  34)								Float averageY = ((Float)0.);
HXDLIN(  34)								int hits = 0;
HXDLIN(  34)								Float fractionTotal = ((Float)0.);
HXDLIN(  34)								Float x = (px1 + x02);
HXDLIN(  34)								Float y = (py1 + y02);
HXDLIN(  34)								bool _hx_tmp;
HXDLIN(  34)								bool _hx_tmp1;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN(  34)								bool _hx_tmp2;
HXDLIN(  34)								if ((x > (this3->start - 1))) {
HXLINE(  34)									_hx_tmp2 = (x < (this3->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp2 = false;
            								}
HXDLIN(  34)								if (_hx_tmp2) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN(  34)									if ((y > (this4->start - 1))) {
HXLINE(  34)										_hx_tmp1 = (y < (this4->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp1 = false;
            								}
HXDLIN(  34)								if (_hx_tmp1) {
HXLINE(  34)									Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN(  34)									Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN(  34)									bool _hx_tmp3;
HXDLIN(  34)									if (!((s <= 0))) {
HXLINE(  34)										_hx_tmp3 = (t <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp3 = true;
            									}
HXDLIN(  34)									if (_hx_tmp3) {
HXLINE(  34)										_hx_tmp = false;
            									}
            									else {
HXLINE(  34)										if (((s + t) < hitTriScalar->A)) {
HXLINE(  34)											_hx_tmp = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp = false;
            								}
HXDLIN(  34)								if (_hx_tmp) {
HXLINE(  34)									hits = (hits + 1);
HXDLIN(  34)									averageX = (averageX + x02);
HXDLIN(  34)									averageY = (averageY + y02);
HXDLIN(  34)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  34)								Float x5 = (px1 + x1);
HXDLIN(  34)								Float y5 = (py1 + y1);
HXDLIN(  34)								bool _hx_tmp4;
HXDLIN(  34)								bool _hx_tmp5;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN(  34)								bool _hx_tmp6;
HXDLIN(  34)								if ((x5 > (this5->start - 1))) {
HXLINE(  34)									_hx_tmp6 = (x5 < (this5->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp6 = false;
            								}
HXDLIN(  34)								if (_hx_tmp6) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN(  34)									if ((y5 > (this6->start - 1))) {
HXLINE(  34)										_hx_tmp5 = (y5 < (this6->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp5 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp5 = false;
            								}
HXDLIN(  34)								if (_hx_tmp5) {
HXLINE(  34)									Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN(  34)									Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN(  34)									bool _hx_tmp7;
HXDLIN(  34)									if (!((s1 <= 0))) {
HXLINE(  34)										_hx_tmp7 = (t1 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp7 = true;
            									}
HXDLIN(  34)									if (_hx_tmp7) {
HXLINE(  34)										_hx_tmp4 = false;
            									}
            									else {
HXLINE(  34)										if (((s1 + t1) < hitTriScalar->A)) {
HXLINE(  34)											_hx_tmp4 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp4 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp4 = false;
            								}
HXDLIN(  34)								if (_hx_tmp4) {
HXLINE(  34)									hits = (hits + 1);
HXDLIN(  34)									averageX = (averageX + x1);
HXDLIN(  34)									averageY = (averageY + y1);
HXDLIN(  34)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  34)								Float x6 = (px1 + x2);
HXDLIN(  34)								Float y6 = (py1 + y2);
HXDLIN(  34)								bool _hx_tmp8;
HXDLIN(  34)								bool _hx_tmp9;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN(  34)								bool _hx_tmp10;
HXDLIN(  34)								if ((x6 > (this7->start - 1))) {
HXLINE(  34)									_hx_tmp10 = (x6 < (this7->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp10 = false;
            								}
HXDLIN(  34)								if (_hx_tmp10) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN(  34)									if ((y6 > (this8->start - 1))) {
HXLINE(  34)										_hx_tmp9 = (y6 < (this8->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp9 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp9 = false;
            								}
HXDLIN(  34)								if (_hx_tmp9) {
HXLINE(  34)									Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN(  34)									Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN(  34)									bool _hx_tmp11;
HXDLIN(  34)									if (!((s2 <= 0))) {
HXLINE(  34)										_hx_tmp11 = (t2 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp11 = true;
            									}
HXDLIN(  34)									if (_hx_tmp11) {
HXLINE(  34)										_hx_tmp8 = false;
            									}
            									else {
HXLINE(  34)										if (((s2 + t2) < hitTriScalar->A)) {
HXLINE(  34)											_hx_tmp8 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp8 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp8 = false;
            								}
HXDLIN(  34)								if (_hx_tmp8) {
HXLINE(  34)									hits = (hits + 1);
HXDLIN(  34)									averageX = (averageX + x2);
HXDLIN(  34)									averageY = (averageY + y2);
HXDLIN(  34)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  34)								Float x7 = (px1 + x3);
HXDLIN(  34)								Float y7 = (py1 + y3);
HXDLIN(  34)								bool _hx_tmp12;
HXDLIN(  34)								bool _hx_tmp13;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN(  34)								bool _hx_tmp14;
HXDLIN(  34)								if ((x7 > (this9->start - 1))) {
HXLINE(  34)									_hx_tmp14 = (x7 < (this9->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp14 = false;
            								}
HXDLIN(  34)								if (_hx_tmp14) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN(  34)									if ((y7 > (this10->start - 1))) {
HXLINE(  34)										_hx_tmp13 = (y7 < (this10->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp13 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp13 = false;
            								}
HXDLIN(  34)								if (_hx_tmp13) {
HXLINE(  34)									Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN(  34)									Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN(  34)									bool _hx_tmp15;
HXDLIN(  34)									if (!((s3 <= 0))) {
HXLINE(  34)										_hx_tmp15 = (t3 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp15 = true;
            									}
HXDLIN(  34)									if (_hx_tmp15) {
HXLINE(  34)										_hx_tmp12 = false;
            									}
            									else {
HXLINE(  34)										if (((s3 + t3) < hitTriScalar->A)) {
HXLINE(  34)											_hx_tmp12 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp12 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp12 = false;
            								}
HXDLIN(  34)								if (_hx_tmp12) {
HXLINE(  34)									hits = (hits + 1);
HXDLIN(  34)									averageX = (averageX + x3);
HXDLIN(  34)									averageY = (averageY + y3);
HXDLIN(  34)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  34)								Float x8 = (px1 + x4);
HXDLIN(  34)								Float y8 = (py1 + y4);
HXDLIN(  34)								bool _hx_tmp16;
HXDLIN(  34)								bool _hx_tmp17;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN(  34)								bool _hx_tmp18;
HXDLIN(  34)								if ((x8 > (this11->start - 1))) {
HXLINE(  34)									_hx_tmp18 = (x8 < (this11->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp18 = false;
            								}
HXDLIN(  34)								if (_hx_tmp18) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN(  34)									if ((y8 > (this12->start - 1))) {
HXLINE(  34)										_hx_tmp17 = (y8 < (this12->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp17 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp17 = false;
            								}
HXDLIN(  34)								if (_hx_tmp17) {
HXLINE(  34)									Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN(  34)									Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN(  34)									bool _hx_tmp19;
HXDLIN(  34)									if (!((s4 <= 0))) {
HXLINE(  34)										_hx_tmp19 = (t4 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp19 = true;
            									}
HXDLIN(  34)									if (_hx_tmp19) {
HXLINE(  34)										_hx_tmp16 = false;
            									}
            									else {
HXLINE(  34)										if (((s4 + t4) < hitTriScalar->A)) {
HXLINE(  34)											_hx_tmp16 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp16 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp16 = false;
            								}
HXDLIN(  34)								if (_hx_tmp16) {
HXLINE(  34)									hits = (hits + 1);
HXDLIN(  34)									averageX = (averageX + x4);
HXDLIN(  34)									averageY = (averageY + y4);
HXDLIN(  34)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  34)								if ((hits != 0)) {
HXLINE( 244)									averageX = (px1 + (averageX / ( (Float)(hits) )));
HXLINE( 245)									averageY = (py1 + (averageY / ( (Float)(hits) )));
            								}
            								else {
HXLINE( 247)									averageX = ( (Float)(px1) );
HXLINE( 248)									averageY = ( (Float)(py1) );
            								}
HXLINE(  34)								Float fractionTotal1 = fractionTotal;
HXDLIN(  34)								Float sampleData_fractionTotal = fractionTotal1;
HXDLIN(  34)								Float sampleData_averageX = averageX;
HXDLIN(  34)								Float sampleData_averageY = averageY;
HXDLIN(  34)								bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXDLIN(  34)								Float aScale = sampleData_fractionTotal;
HXDLIN(  34)								if (!((aScale > ((Float)0.9)))) {
HXLINE(  34)									aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            								}
HXLINE( 142)								a = 0;
HXLINE( 143)								r = 0;
HXLINE( 144)								g = 0;
HXLINE( 145)								b = 0;
HXLINE(  34)								if (isSoft) {
HXLINE(  34)									if (!(sampleData_notHit)) {
HXLINE(  34)										Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN(  34)										Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN(  34)										Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN(  34)										Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN(  34)										Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN(  34)										Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN(  34)										Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  34)										Float ratiosAvg_ratioA = ratioA1;
HXDLIN(  34)										Float ratiosAvg_ratioB = ratioB1;
HXDLIN(  34)										Float ratiosAvg_ratioC = ratioC1;
HXDLIN(  34)										Float ratioA_ = ratiosAvg_ratioA;
HXDLIN(  34)										Float ratioB_ = ratiosAvg_ratioB;
HXDLIN(  34)										Float ratioC_ = ratiosAvg_ratioC;
HXDLIN(  34)										int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN(  34)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  34)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE( 152)										a = i;
HXLINE(  34)										int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN(  34)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  34)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE( 153)										r = i1;
HXLINE(  34)										int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN(  34)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  34)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE( 154)										g = i2;
HXLINE(  34)										int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN(  34)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  34)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE( 155)										b = i3;
HXLINE(  34)										{
HXLINE(  34)											int a3;
HXDLIN(  34)											if ((aScale > ((Float)0.9))) {
HXLINE(  34)												a3 = a;
            											}
            											else {
HXLINE(  34)												int i4 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  34)												if ((i4 > 255)) {
HXLINE(  24)													i4 = 255;
            												}
HXLINE(  34)												if ((i4 < 0)) {
HXLINE(  25)													i4 = 0;
            												}
HXLINE(  34)												a3 = i4;
            											}
HXDLIN(  34)											int location;
HXDLIN(  34)											if (pixelImage->useVirtualPos) {
HXLINE(  34)												location = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  34)												location = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            											}
HXDLIN(  34)											bool _hx_tmp20;
HXDLIN(  34)											if (pixelImage->transparent) {
HXLINE(  34)												_hx_tmp20 = (a3 < 254);
            											}
            											else {
HXLINE(  34)												_hx_tmp20 = false;
            											}
HXDLIN(  34)											if (_hx_tmp20) {
HXLINE(  34)												int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  34)												int old;
HXDLIN(  34)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)													old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            												}
            												else {
HXLINE(  34)													old = this13;
            												}
HXDLIN(  34)												int rhs = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  34)												Float a11;
HXDLIN(  34)												int this14 = ((old >> 24) & 255);
HXDLIN(  34)												if ((this14 == 0)) {
HXLINE(  34)													a11 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float r1;
HXDLIN(  34)												int this15 = ((old >> 16) & 255);
HXDLIN(  34)												if ((this15 == 0)) {
HXLINE(  34)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float g1;
HXDLIN(  34)												int this16 = ((old >> 8) & 255);
HXDLIN(  34)												if ((this16 == 0)) {
HXLINE(  34)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float b11;
HXDLIN(  34)												int this17 = (old & 255);
HXDLIN(  34)												if ((this17 == 0)) {
HXLINE(  34)													b11 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float a21;
HXDLIN(  34)												int this18 = ((rhs >> 24) & 255);
HXDLIN(  34)												if ((this18 == 0)) {
HXLINE(  34)													a21 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float r2;
HXDLIN(  34)												int this19 = ((rhs >> 16) & 255);
HXDLIN(  34)												if ((this19 == 0)) {
HXLINE(  34)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float g2;
HXDLIN(  34)												int this20 = ((rhs >> 8) & 255);
HXDLIN(  34)												if ((this20 == 0)) {
HXLINE(  34)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float b21;
HXDLIN(  34)												int this21 = (rhs & 255);
HXDLIN(  34)												if ((this21 == 0)) {
HXLINE(  34)													b21 = ((Float)0.);
            												}
            												else {
HXLINE(  34)													b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            												}
HXDLIN(  34)												Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  34)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN(  34)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN(  34)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  34)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  34)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  34)												{
HXLINE(  34)													int _hx_tmp21;
HXDLIN(  34)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)														_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  34)														_hx_tmp21 = blended;
            													}
HXDLIN(  34)													::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            												}
            											}
            											else {
HXLINE(  34)												int value;
HXDLIN(  34)												if (pixelImage->isLittle) {
HXLINE(  34)													value = ((((a3 << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  34)													value = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  34)												::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            											}
            										}
            									}
            								}
            								else {
HXLINE(  34)									Float ratioA2 = ratios_ratioA;
HXDLIN(  34)									Float ratioB2 = ratios_ratioB;
HXDLIN(  34)									Float ratioC2 = ratios_ratioC;
HXDLIN(  34)									Float hitTotal = sampleData_fractionTotal;
HXDLIN(  34)									if (!(sampleData_notHit)) {
HXLINE(  34)										Float x03 = ((Float)-0.0739127852035666);
HXDLIN(  34)										Float y03 = ((Float)0.703233176253404202);
HXDLIN(  34)										Float x11 = ((Float)-0.353553390593273564);
HXDLIN(  34)										Float y11 = ((Float)0.61237243569579447);
HXDLIN(  34)										Float x21 = ((Float)-0.572061402817684139);
HXDLIN(  34)										Float y21 = ((Float)0.415626937777453465);
HXDLIN(  34)										Float x31 = ((Float)-0.691654801480225401);
HXDLIN(  34)										Float y31 = ((Float)0.147015766465198733);
HXDLIN(  34)										Float x41 = ((Float)-0.691654801480225512);
HXDLIN(  34)										Float y41 = ((Float)-0.147015766465198261);
HXDLIN(  34)										Float averageX1 = ((Float)0.);
HXDLIN(  34)										Float averageY1 = ((Float)0.);
HXDLIN(  34)										int hits1 = 0;
HXDLIN(  34)										Float fractionTotal2 = ((Float)0.);
HXDLIN(  34)										Float x9 = (px1 + x03);
HXDLIN(  34)										Float y9 = (py1 + y03);
HXDLIN(  34)										bool _hx_tmp22;
HXDLIN(  34)										bool _hx_tmp23;
HXDLIN(  34)										 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN(  34)										bool _hx_tmp24;
HXDLIN(  34)										if ((x9 > (this22->start - 1))) {
HXLINE(  34)											_hx_tmp24 = (x9 < (this22->max + 1));
            										}
            										else {
HXLINE(  34)											_hx_tmp24 = false;
            										}
HXDLIN(  34)										if (_hx_tmp24) {
HXLINE(  34)											 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN(  34)											if ((y9 > (this23->start - 1))) {
HXLINE(  34)												_hx_tmp23 = (y9 < (this23->max + 1));
            											}
            											else {
HXLINE(  34)												_hx_tmp23 = false;
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp23 = false;
            										}
HXDLIN(  34)										if (_hx_tmp23) {
HXLINE(  34)											Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN(  34)											Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN(  34)											bool _hx_tmp25;
HXDLIN(  34)											if (!((s5 <= 0))) {
HXLINE(  34)												_hx_tmp25 = (t5 <= 0);
            											}
            											else {
HXLINE(  34)												_hx_tmp25 = true;
            											}
HXDLIN(  34)											if (_hx_tmp25) {
HXLINE(  34)												_hx_tmp22 = false;
            											}
            											else {
HXLINE(  34)												if (((s5 + t5) < scaled->A)) {
HXLINE(  34)													_hx_tmp22 = true;
            												}
            												else {
HXLINE(  34)													_hx_tmp22 = false;
            												}
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp22 = false;
            										}
HXDLIN(  34)										if (_hx_tmp22) {
HXLINE(  34)											hits1 = (hits1 + 1);
HXDLIN(  34)											averageX1 = (averageX1 + x03);
HXDLIN(  34)											averageY1 = (averageY1 + y03);
HXDLIN(  34)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  34)										Float x10 = (px1 + x11);
HXDLIN(  34)										Float y10 = (py1 + y11);
HXDLIN(  34)										bool _hx_tmp26;
HXDLIN(  34)										bool _hx_tmp27;
HXDLIN(  34)										 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN(  34)										bool _hx_tmp28;
HXDLIN(  34)										if ((x10 > (this24->start - 1))) {
HXLINE(  34)											_hx_tmp28 = (x10 < (this24->max + 1));
            										}
            										else {
HXLINE(  34)											_hx_tmp28 = false;
            										}
HXDLIN(  34)										if (_hx_tmp28) {
HXLINE(  34)											 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN(  34)											if ((y10 > (this25->start - 1))) {
HXLINE(  34)												_hx_tmp27 = (y10 < (this25->max + 1));
            											}
            											else {
HXLINE(  34)												_hx_tmp27 = false;
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp27 = false;
            										}
HXDLIN(  34)										if (_hx_tmp27) {
HXLINE(  34)											Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN(  34)											Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN(  34)											bool _hx_tmp29;
HXDLIN(  34)											if (!((s6 <= 0))) {
HXLINE(  34)												_hx_tmp29 = (t6 <= 0);
            											}
            											else {
HXLINE(  34)												_hx_tmp29 = true;
            											}
HXDLIN(  34)											if (_hx_tmp29) {
HXLINE(  34)												_hx_tmp26 = false;
            											}
            											else {
HXLINE(  34)												if (((s6 + t6) < scaled->A)) {
HXLINE(  34)													_hx_tmp26 = true;
            												}
            												else {
HXLINE(  34)													_hx_tmp26 = false;
            												}
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp26 = false;
            										}
HXDLIN(  34)										if (_hx_tmp26) {
HXLINE(  34)											hits1 = (hits1 + 1);
HXDLIN(  34)											averageX1 = (averageX1 + x11);
HXDLIN(  34)											averageY1 = (averageY1 + y11);
HXDLIN(  34)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  34)										Float x12 = (px1 + x21);
HXDLIN(  34)										Float y12 = (py1 + y21);
HXDLIN(  34)										bool _hx_tmp30;
HXDLIN(  34)										bool _hx_tmp31;
HXDLIN(  34)										 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN(  34)										bool _hx_tmp32;
HXDLIN(  34)										if ((x12 > (this26->start - 1))) {
HXLINE(  34)											_hx_tmp32 = (x12 < (this26->max + 1));
            										}
            										else {
HXLINE(  34)											_hx_tmp32 = false;
            										}
HXDLIN(  34)										if (_hx_tmp32) {
HXLINE(  34)											 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN(  34)											if ((y12 > (this27->start - 1))) {
HXLINE(  34)												_hx_tmp31 = (y12 < (this27->max + 1));
            											}
            											else {
HXLINE(  34)												_hx_tmp31 = false;
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp31 = false;
            										}
HXDLIN(  34)										if (_hx_tmp31) {
HXLINE(  34)											Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN(  34)											Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN(  34)											bool _hx_tmp33;
HXDLIN(  34)											if (!((s7 <= 0))) {
HXLINE(  34)												_hx_tmp33 = (t7 <= 0);
            											}
            											else {
HXLINE(  34)												_hx_tmp33 = true;
            											}
HXDLIN(  34)											if (_hx_tmp33) {
HXLINE(  34)												_hx_tmp30 = false;
            											}
            											else {
HXLINE(  34)												if (((s7 + t7) < scaled->A)) {
HXLINE(  34)													_hx_tmp30 = true;
            												}
            												else {
HXLINE(  34)													_hx_tmp30 = false;
            												}
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp30 = false;
            										}
HXDLIN(  34)										if (_hx_tmp30) {
HXLINE(  34)											hits1 = (hits1 + 1);
HXDLIN(  34)											averageX1 = (averageX1 + x21);
HXDLIN(  34)											averageY1 = (averageY1 + y21);
HXDLIN(  34)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  34)										Float x13 = (px1 + x31);
HXDLIN(  34)										Float y13 = (py1 + y31);
HXDLIN(  34)										bool _hx_tmp34;
HXDLIN(  34)										bool _hx_tmp35;
HXDLIN(  34)										 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN(  34)										bool _hx_tmp36;
HXDLIN(  34)										if ((x13 > (this28->start - 1))) {
HXLINE(  34)											_hx_tmp36 = (x13 < (this28->max + 1));
            										}
            										else {
HXLINE(  34)											_hx_tmp36 = false;
            										}
HXDLIN(  34)										if (_hx_tmp36) {
HXLINE(  34)											 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN(  34)											if ((y13 > (this29->start - 1))) {
HXLINE(  34)												_hx_tmp35 = (y13 < (this29->max + 1));
            											}
            											else {
HXLINE(  34)												_hx_tmp35 = false;
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp35 = false;
            										}
HXDLIN(  34)										if (_hx_tmp35) {
HXLINE(  34)											Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN(  34)											Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN(  34)											bool _hx_tmp37;
HXDLIN(  34)											if (!((s8 <= 0))) {
HXLINE(  34)												_hx_tmp37 = (t8 <= 0);
            											}
            											else {
HXLINE(  34)												_hx_tmp37 = true;
            											}
HXDLIN(  34)											if (_hx_tmp37) {
HXLINE(  34)												_hx_tmp34 = false;
            											}
            											else {
HXLINE(  34)												if (((s8 + t8) < scaled->A)) {
HXLINE(  34)													_hx_tmp34 = true;
            												}
            												else {
HXLINE(  34)													_hx_tmp34 = false;
            												}
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp34 = false;
            										}
HXDLIN(  34)										if (_hx_tmp34) {
HXLINE(  34)											hits1 = (hits1 + 1);
HXDLIN(  34)											averageX1 = (averageX1 + x31);
HXDLIN(  34)											averageY1 = (averageY1 + y31);
HXDLIN(  34)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  34)										Float x14 = (px1 + x41);
HXDLIN(  34)										Float y14 = (py1 + y41);
HXDLIN(  34)										bool _hx_tmp38;
HXDLIN(  34)										bool _hx_tmp39;
HXDLIN(  34)										 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN(  34)										bool _hx_tmp40;
HXDLIN(  34)										if ((x14 > (this30->start - 1))) {
HXLINE(  34)											_hx_tmp40 = (x14 < (this30->max + 1));
            										}
            										else {
HXLINE(  34)											_hx_tmp40 = false;
            										}
HXDLIN(  34)										if (_hx_tmp40) {
HXLINE(  34)											 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN(  34)											if ((y14 > (this31->start - 1))) {
HXLINE(  34)												_hx_tmp39 = (y14 < (this31->max + 1));
            											}
            											else {
HXLINE(  34)												_hx_tmp39 = false;
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp39 = false;
            										}
HXDLIN(  34)										if (_hx_tmp39) {
HXLINE(  34)											Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN(  34)											Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN(  34)											bool _hx_tmp41;
HXDLIN(  34)											if (!((s9 <= 0))) {
HXLINE(  34)												_hx_tmp41 = (t9 <= 0);
            											}
            											else {
HXLINE(  34)												_hx_tmp41 = true;
            											}
HXDLIN(  34)											if (_hx_tmp41) {
HXLINE(  34)												_hx_tmp38 = false;
            											}
            											else {
HXLINE(  34)												if (((s9 + t9) < scaled->A)) {
HXLINE(  34)													_hx_tmp38 = true;
            												}
            												else {
HXLINE(  34)													_hx_tmp38 = false;
            												}
            											}
            										}
            										else {
HXLINE(  34)											_hx_tmp38 = false;
            										}
HXDLIN(  34)										if (_hx_tmp38) {
HXLINE(  34)											hits1 = (hits1 + 1);
HXDLIN(  34)											averageX1 = (averageX1 + x41);
HXDLIN(  34)											averageY1 = (averageY1 + y41);
HXDLIN(  34)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  34)										if ((hits1 != 0)) {
HXLINE( 244)											averageX1 = (px1 + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)											averageY1 = (py1 + (averageY1 / ( (Float)(hits1) )));
            										}
            										else {
HXLINE( 247)											averageX1 = ( (Float)(px1) );
HXLINE( 248)											averageY1 = ( (Float)(py1) );
            										}
HXLINE(  34)										Float fractionTotal3 = fractionTotal2;
HXDLIN(  34)										Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN(  34)										Float sampleScaled_averageX = averageX1;
HXDLIN(  34)										Float sampleScaled_averageY = averageY1;
HXDLIN(  34)										bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXDLIN(  34)										Float scaledTotal = sampleScaled_fractionTotal;
HXDLIN(  34)										bool _hx_tmp42;
HXDLIN(  34)										if (!((scaledTotal > hitTotal))) {
HXLINE(  34)											_hx_tmp42 = (hitTotal == ((Float)1.));
            										}
            										else {
HXLINE(  34)											_hx_tmp42 = true;
            										}
HXDLIN(  34)										if (_hx_tmp42) {
HXLINE(  34)											Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN(  34)											Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN(  34)											Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN(  34)											Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN(  34)											Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN(  34)											Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN(  34)											Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  34)											Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN(  34)											Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN(  34)											Float ratiosAvg_ratioC1 = ratioC3;
HXDLIN(  34)											Float ratioA_1 = ratiosAvg_ratioA1;
HXDLIN(  34)											Float ratioB_1 = ratiosAvg_ratioB1;
HXDLIN(  34)											Float ratioC_1 = ratiosAvg_ratioC1;
HXDLIN(  34)											int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN(  34)											if ((i5 > 255)) {
HXLINE(  24)												i5 = 255;
            											}
HXLINE(  34)											if ((i5 < 0)) {
HXLINE(  25)												i5 = 0;
            											}
HXLINE( 187)											a = i5;
HXLINE(  34)											int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN(  34)											if ((i6 > 255)) {
HXLINE(  24)												i6 = 255;
            											}
HXLINE(  34)											if ((i6 < 0)) {
HXLINE(  25)												i6 = 0;
            											}
HXLINE( 188)											r = i6;
HXLINE(  34)											int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN(  34)											if ((i7 > 255)) {
HXLINE(  24)												i7 = 255;
            											}
HXLINE(  34)											if ((i7 < 0)) {
HXLINE(  25)												i7 = 0;
            											}
HXLINE( 189)											g = i7;
HXLINE(  34)											int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN(  34)											if ((i8 > 255)) {
HXLINE(  24)												i8 = 255;
            											}
HXLINE(  34)											if ((i8 < 0)) {
HXLINE(  25)												i8 = 0;
            											}
HXLINE( 190)											b = i8;
HXLINE(  34)											{
HXLINE(  34)												int location1;
HXDLIN(  34)												if (pixelImage->useVirtualPos) {
HXLINE(  34)													location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  34)													location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            												}
HXDLIN(  34)												bool _hx_tmp43;
HXDLIN(  34)												if (pixelImage->transparent) {
HXLINE(  34)													_hx_tmp43 = (a < 254);
            												}
            												else {
HXLINE(  34)													_hx_tmp43 = false;
            												}
HXDLIN(  34)												if (_hx_tmp43) {
HXLINE(  34)													int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  34)													int old1;
HXDLIN(  34)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)														old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            													}
            													else {
HXLINE(  34)														old1 = this32;
            													}
HXDLIN(  34)													int rhs1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  34)													Float a12;
HXDLIN(  34)													int this33 = ((old1 >> 24) & 255);
HXDLIN(  34)													if ((this33 == 0)) {
HXLINE(  34)														a12 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float r11;
HXDLIN(  34)													int this34 = ((old1 >> 16) & 255);
HXDLIN(  34)													if ((this34 == 0)) {
HXLINE(  34)														r11 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float g11;
HXDLIN(  34)													int this35 = ((old1 >> 8) & 255);
HXDLIN(  34)													if ((this35 == 0)) {
HXLINE(  34)														g11 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float b12;
HXDLIN(  34)													int this36 = (old1 & 255);
HXDLIN(  34)													if ((this36 == 0)) {
HXLINE(  34)														b12 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float a22;
HXDLIN(  34)													int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  34)													if ((this37 == 0)) {
HXLINE(  34)														a22 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float r21;
HXDLIN(  34)													int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  34)													if ((this38 == 0)) {
HXLINE(  34)														r21 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float g21;
HXDLIN(  34)													int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  34)													if ((this39 == 0)) {
HXLINE(  34)														g21 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float b22;
HXDLIN(  34)													int this40 = (rhs1 & 255);
HXDLIN(  34)													if ((this40 == 0)) {
HXLINE(  34)														b22 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  34)													int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN(  34)													int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN(  34)													int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  34)													int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  34)													int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  34)													{
HXLINE(  34)														int _hx_tmp44;
HXDLIN(  34)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)															_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            														}
            														else {
HXLINE(  34)															_hx_tmp44 = blended1;
            														}
HXDLIN(  34)														::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            													}
            												}
            												else {
HXLINE(  34)													int value1;
HXDLIN(  34)													if (pixelImage->isLittle) {
HXLINE(  34)														value1 = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  34)														value1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  34)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            												}
            											}
            										}
            										else {
HXLINE(  34)											Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN(  34)											Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN(  34)											Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN(  34)											Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN(  34)											Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN(  34)											Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN(  34)											Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  34)											Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN(  34)											Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN(  34)											Float ratiosAvg_ratioC2 = ratioC4;
HXDLIN(  34)											Float ratioA_2 = ratiosAvg_ratioA2;
HXDLIN(  34)											Float ratioB_2 = ratiosAvg_ratioB2;
HXDLIN(  34)											Float ratioC_2 = ratiosAvg_ratioC2;
HXDLIN(  34)											int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN(  34)											if ((i9 > 255)) {
HXLINE(  24)												i9 = 255;
            											}
HXLINE(  34)											if ((i9 < 0)) {
HXLINE(  25)												i9 = 0;
            											}
HXLINE( 198)											a = i9;
HXLINE(  34)											int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN(  34)											if ((i10 > 255)) {
HXLINE(  24)												i10 = 255;
            											}
HXLINE(  34)											if ((i10 < 0)) {
HXLINE(  25)												i10 = 0;
            											}
HXLINE( 199)											r = i10;
HXLINE(  34)											int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN(  34)											if ((i11 > 255)) {
HXLINE(  24)												i11 = 255;
            											}
HXLINE(  34)											if ((i11 < 0)) {
HXLINE(  25)												i11 = 0;
            											}
HXLINE( 200)											g = i11;
HXLINE(  34)											int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN(  34)											if ((i12 > 255)) {
HXLINE(  24)												i12 = 255;
            											}
HXLINE(  34)											if ((i12 < 0)) {
HXLINE(  25)												i12 = 0;
            											}
HXLINE( 201)											b = i12;
HXLINE(  34)											{
HXLINE(  34)												int a6;
HXDLIN(  34)												if ((aScale > ((Float)0.9))) {
HXLINE(  34)													a6 = a;
            												}
            												else {
HXLINE(  34)													int i13 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  34)													if ((i13 > 255)) {
HXLINE(  24)														i13 = 255;
            													}
HXLINE(  34)													if ((i13 < 0)) {
HXLINE(  25)														i13 = 0;
            													}
HXLINE(  34)													a6 = i13;
            												}
HXDLIN(  34)												int location2;
HXDLIN(  34)												if (pixelImage->useVirtualPos) {
HXLINE(  34)													location2 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  34)													location2 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            												}
HXDLIN(  34)												bool _hx_tmp45;
HXDLIN(  34)												if (pixelImage->transparent) {
HXLINE(  34)													_hx_tmp45 = (a6 < 254);
            												}
            												else {
HXLINE(  34)													_hx_tmp45 = false;
            												}
HXDLIN(  34)												if (_hx_tmp45) {
HXLINE(  34)													int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  34)													int old2;
HXDLIN(  34)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)														old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            													}
            													else {
HXLINE(  34)														old2 = this41;
            													}
HXDLIN(  34)													int rhs2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  34)													Float a13;
HXDLIN(  34)													int this42 = ((old2 >> 24) & 255);
HXDLIN(  34)													if ((this42 == 0)) {
HXLINE(  34)														a13 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float r12;
HXDLIN(  34)													int this43 = ((old2 >> 16) & 255);
HXDLIN(  34)													if ((this43 == 0)) {
HXLINE(  34)														r12 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float g12;
HXDLIN(  34)													int this44 = ((old2 >> 8) & 255);
HXDLIN(  34)													if ((this44 == 0)) {
HXLINE(  34)														g12 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float b13;
HXDLIN(  34)													int this45 = (old2 & 255);
HXDLIN(  34)													if ((this45 == 0)) {
HXLINE(  34)														b13 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float a23;
HXDLIN(  34)													int this46 = ((rhs2 >> 24) & 255);
HXDLIN(  34)													if ((this46 == 0)) {
HXLINE(  34)														a23 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float r22;
HXDLIN(  34)													int this47 = ((rhs2 >> 16) & 255);
HXDLIN(  34)													if ((this47 == 0)) {
HXLINE(  34)														r22 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float g22;
HXDLIN(  34)													int this48 = ((rhs2 >> 8) & 255);
HXDLIN(  34)													if ((this48 == 0)) {
HXLINE(  34)														g22 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float b23;
HXDLIN(  34)													int this49 = (rhs2 & 255);
HXDLIN(  34)													if ((this49 == 0)) {
HXLINE(  34)														b23 = ((Float)0.);
            													}
            													else {
HXLINE(  34)														b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN(  34)													Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  34)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN(  34)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN(  34)													int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  34)													int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  34)													int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  34)													{
HXLINE(  34)														int _hx_tmp46;
HXDLIN(  34)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)															_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE(  34)															_hx_tmp46 = blended2;
            														}
HXDLIN(  34)														::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            													}
            												}
            												else {
HXLINE(  34)													int value2;
HXDLIN(  34)													if (pixelImage->isLittle) {
HXLINE(  34)														value2 = ((((a6 << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  34)														value2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  34)													::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  34)				if ((hasHit == false)) {
HXLINE(  34)					 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,true);
            				}
            			}
            		}
HXDLIN(  34)		Float ax4 = quadPoints_bx;
HXDLIN(  34)		Float ay4 = quadPoints_by;
HXDLIN(  34)		Float bx2 = quadPoints_cx;
HXDLIN(  34)		Float by2 = quadPoints_cy;
HXDLIN(  34)		Float cx2 = quadPoints_dx;
HXDLIN(  34)		Float cy2 = quadPoints_dy;
HXDLIN(  34)		bool softAB1 = true;
HXDLIN(  34)		bool softBC1 = true;
HXDLIN(  34)		bool softCA1 = false;
HXDLIN(  34)		bool adjustWinding1 = (((((ax4 * by2) - (bx2 * ay4)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay4) - (ax4 * cy2))) > 0);
HXDLIN(  34)		if (!(adjustWinding1)) {
HXLINE(  34)			Float bx_3 = bx2;
HXDLIN(  34)			Float by_3 = by2;
HXLINE(  87)			bx2 = cx2;
HXLINE(  88)			by2 = cy2;
HXLINE(  89)			cx2 = bx_3;
HXLINE(  90)			cy2 = by_3;
            		}
HXLINE(  34)		int aA1 = ((colorC >> 24) & 255);
HXDLIN(  34)		int rA1 = ((colorC >> 16) & 255);
HXDLIN(  34)		int gA1 = ((colorC >> 8) & 255);
HXDLIN(  34)		int bA1 = (colorC & 255);
HXDLIN(  34)		int aB1 = ((colorB >> 24) & 255);
HXDLIN(  34)		int rB1 = ((colorB >> 16) & 255);
HXDLIN(  34)		int gB1 = ((colorB >> 8) & 255);
HXDLIN(  34)		int bB1 = (colorB & 255);
HXDLIN(  34)		int aC1 = ((colorD >> 24) & 255);
HXDLIN(  34)		int rC1 = ((colorD >> 16) & 255);
HXDLIN(  34)		int gC1 = ((colorD >> 8) & 255);
HXDLIN(  34)		int bC1 = (colorD & 255);
HXDLIN(  34)		int a8 = 0;
HXDLIN(  34)		int r6 = 0;
HXDLIN(  34)		int g6 = 0;
HXDLIN(  34)		int b6 = 0;
HXDLIN(  34)		 ::pi_xy::algo::HitTri hitTriScalar1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax4,ay4,bx2,by2,cx2,cy2,true);
HXDLIN(  34)		 ::pi_xy::iter::IntIterStart barycentric_yIter31;
HXDLIN(  34)		 ::pi_xy::iter::IntIterStart barycentric_xIter31;
HXDLIN(  34)		Float barycentric_dot221;
HXDLIN(  34)		Float barycentric_dot121;
HXDLIN(  34)		Float barycentric_dot111;
HXDLIN(  34)		Float barycentric_denom11;
HXDLIN(  34)		Float barycentric_bcy1;
HXDLIN(  34)		Float barycentric_bcx1;
HXDLIN(  34)		Float barycentric_acy1;
HXDLIN(  34)		Float barycentric_acx1;
HXDLIN(  34)		Float barycentric_ax1 = hitTriScalar1->ax;
HXDLIN(  34)		Float barycentric_ay1 = hitTriScalar1->ay;
HXDLIN(  34)		Float barycentric_bx1 = hitTriScalar1->bx;
HXDLIN(  34)		Float barycentric_by1 = hitTriScalar1->by;
HXDLIN(  34)		Float barycentric_cx1 = hitTriScalar1->cx;
HXDLIN(  34)		Float barycentric_cy1 = hitTriScalar1->cy;
HXDLIN(  34)		bool barycentric_preCalculated1 = true;
HXDLIN(  34)		{
HXLINE(  34)			barycentric_bcx1 = (barycentric_bx1 - barycentric_cx1);
HXDLIN(  34)			barycentric_bcy1 = (barycentric_by1 - barycentric_cy1);
HXDLIN(  34)			barycentric_acx1 = (barycentric_ax1 - barycentric_cx1);
HXDLIN(  34)			barycentric_acy1 = (barycentric_ay1 - barycentric_cy1);
HXDLIN(  34)			Float ax5 = barycentric_bcx1;
HXDLIN(  34)			Float ay5 = barycentric_bcy1;
HXDLIN(  34)			barycentric_dot111 = ((ax5 * ax5) + (ay5 * ay5));
HXDLIN(  34)			barycentric_dot121 = ((barycentric_bcx1 * barycentric_acx1) + (barycentric_bcy1 * barycentric_acy1));
HXDLIN(  34)			Float ax6 = barycentric_acx1;
HXDLIN(  34)			Float ay6 = barycentric_acy1;
HXDLIN(  34)			barycentric_dot221 = ((ax6 * ax6) + (ay6 * ay6));
HXDLIN(  34)			barycentric_denom11 = (( (Float)(1) ) / ((barycentric_dot111 * barycentric_dot221) - (barycentric_dot121 * barycentric_dot121)));
HXDLIN(  34)			Float a9 = barycentric_ax1;
HXDLIN(  34)			Float b7 = barycentric_bx1;
HXDLIN(  34)			Float c2 = barycentric_cx1;
HXDLIN(  34)			if ((a9 > b7)) {
HXLINE(  34)				if ((a9 > c2)) {
HXLINE(  34)					int min4;
HXDLIN(  34)					if ((b7 > c2)) {
HXLINE(  34)						min4 = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE(  34)						min4 = ::Math_obj::floor(b7);
            					}
HXDLIN(  34)					int ii_min8 = min4;
HXDLIN(  34)					int ii_max8 = ::Math_obj::ceil(a9);
HXDLIN(  34)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE(  34)					int ii_min9 = ::Math_obj::floor(b7);
HXDLIN(  34)					int ii_max9 = ::Math_obj::ceil(c2);
HXDLIN(  34)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE(  34)				if ((b7 > c2)) {
HXLINE(  34)					int min5;
HXDLIN(  34)					if ((a9 > c2)) {
HXLINE(  34)						min5 = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE(  34)						min5 = ::Math_obj::ceil(a9);
            					}
HXDLIN(  34)					int ii_min10 = min5;
HXDLIN(  34)					int ii_max10 = ::Math_obj::ceil(b7);
HXDLIN(  34)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE(  34)					int ii_min11 = ::Math_obj::floor(a9);
HXDLIN(  34)					int ii_max11 = ::Math_obj::ceil(c2);
HXDLIN(  34)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  34)			Float a10 = barycentric_ay1;
HXDLIN(  34)			Float b8 = barycentric_by1;
HXDLIN(  34)			Float c3 = barycentric_cy1;
HXDLIN(  34)			if ((a10 > b8)) {
HXLINE(  34)				if ((a10 > c3)) {
HXLINE(  34)					int min6;
HXDLIN(  34)					if ((b8 > c3)) {
HXLINE(  34)						min6 = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE(  34)						min6 = ::Math_obj::floor(b8);
            					}
HXDLIN(  34)					int ii_min12 = min6;
HXDLIN(  34)					int ii_max12 = ::Math_obj::ceil(a10);
HXDLIN(  34)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE(  34)					int ii_min13 = ::Math_obj::floor(b8);
HXDLIN(  34)					int ii_max13 = ::Math_obj::ceil(c3);
HXDLIN(  34)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE(  34)				if ((b8 > c3)) {
HXLINE(  34)					int min7;
HXDLIN(  34)					if ((a10 > c3)) {
HXLINE(  34)						min7 = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE(  34)						min7 = ::Math_obj::ceil(a10);
            					}
HXDLIN(  34)					int ii_min14 = min7;
HXDLIN(  34)					int ii_max14 = ::Math_obj::ceil(b8);
HXDLIN(  34)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE(  34)					int ii_min15 = ::Math_obj::floor(a10);
HXDLIN(  34)					int ii_max15 = ::Math_obj::ceil(c3);
HXDLIN(  34)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
            		}
HXDLIN(  34)		Float scaleA2;
HXDLIN(  34)		bool scaleA3;
HXDLIN(  34)		if (!(softAB1)) {
HXLINE(  34)			scaleA3 = softCA1;
            		}
            		else {
HXLINE(  34)			scaleA3 = true;
            		}
HXDLIN(  34)		if (scaleA3) {
HXLINE(  34)			scaleA2 = ((Float)1.5);
            		}
            		else {
HXLINE(  34)			scaleA2 = ((Float)1.);
            		}
HXDLIN(  34)		Float scaleB2;
HXDLIN(  34)		bool scaleB3;
HXDLIN(  34)		if (!(softAB1)) {
HXLINE(  34)			scaleB3 = softBC1;
            		}
            		else {
HXLINE(  34)			scaleB3 = true;
            		}
HXDLIN(  34)		if (scaleB3) {
HXLINE(  34)			scaleB2 = ((Float)1.5);
            		}
            		else {
HXLINE(  34)			scaleB2 = ((Float)1.);
            		}
HXDLIN(  34)		Float scaleC2;
HXDLIN(  34)		bool scaleC3;
HXDLIN(  34)		if (!(softBC1)) {
HXLINE(  34)			scaleC3 = softCA1;
            		}
            		else {
HXLINE(  34)			scaleC3 = true;
            		}
HXDLIN(  34)		if (scaleC3) {
HXLINE(  34)			scaleC2 = ((Float)1.5);
            		}
            		else {
HXLINE(  34)			scaleC2 = ((Float)1.);
            		}
HXDLIN(  34)		Float x04 = ((Float)0.);
HXDLIN(  34)		Float y04 = ((Float)0.);
HXDLIN(  34)		bool isScaledA2 = true;
HXDLIN(  34)		bool isScaledB2 = true;
HXDLIN(  34)		bool isScaledC2 = true;
HXDLIN(  34)		if (isScaledA2) {
HXLINE(  34)			if (isScaledB2) {
HXLINE(  34)				if (isScaledC2) {
HXLINE(  82)					x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  83)					y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x04 = hitTriScalar1->cx;
HXLINE(  80)					y04 = hitTriScalar1->cy;
            				}
            			}
            			else {
HXLINE(  34)				if (isScaledC2) {
HXLINE(  76)					x04 = hitTriScalar1->bx;
HXLINE(  77)					y04 = hitTriScalar1->by;
            				}
            				else {
HXLINE(  73)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar1);
HXLINE(  74)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar1);
            				}
            			}
            		}
            		else {
HXLINE(  34)			if (isScaledB2) {
HXLINE(  34)				if (isScaledC2) {
HXLINE(  70)					x04 = hitTriScalar1->ax;
HXLINE(  71)					y04 = hitTriScalar1->ay;
            				}
            				else {
HXLINE(  67)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar1);
HXLINE(  68)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar1);
            				}
            			}
            			else {
HXLINE(  34)				if (isScaledC2) {
HXLINE(  64)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar1);
HXLINE(  65)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar1);
            				}
            				else {
HXLINE(  61)					x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  62)					y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  34)		Float ax_2;
HXDLIN(  34)		if (isScaledA2) {
HXLINE(  34)			Float point12 = hitTriScalar1->ax;
HXDLIN(  34)			point12 = (point12 - x04);
HXDLIN(  34)			point12 = (point12 * ((Float)0.999));
HXDLIN(  34)			point12 = (point12 + x04);
HXDLIN(  34)			ax_2 = point12;
            		}
            		else {
HXLINE(  34)			ax_2 = hitTriScalar1->ax;
            		}
HXDLIN(  34)		Float ay_2;
HXDLIN(  34)		if (isScaledA2) {
HXLINE(  34)			Float point13 = hitTriScalar1->ay;
HXDLIN(  34)			point13 = (point13 - y04);
HXDLIN(  34)			point13 = (point13 * ((Float)0.999));
HXDLIN(  34)			point13 = (point13 + y04);
HXDLIN(  34)			ay_2 = point13;
            		}
            		else {
HXLINE(  34)			ay_2 = hitTriScalar1->ay;
            		}
HXDLIN(  34)		Float bx_4;
HXDLIN(  34)		if (isScaledB2) {
HXLINE(  34)			Float point14 = hitTriScalar1->bx;
HXDLIN(  34)			point14 = (point14 - x04);
HXDLIN(  34)			point14 = (point14 * ((Float)0.999));
HXDLIN(  34)			point14 = (point14 + x04);
HXDLIN(  34)			bx_4 = point14;
            		}
            		else {
HXLINE(  34)			bx_4 = hitTriScalar1->bx;
            		}
HXDLIN(  34)		Float by_4;
HXDLIN(  34)		if (isScaledB2) {
HXLINE(  34)			Float point15 = hitTriScalar1->by;
HXDLIN(  34)			point15 = (point15 - y04);
HXDLIN(  34)			point15 = (point15 * ((Float)0.999));
HXDLIN(  34)			point15 = (point15 + y04);
HXDLIN(  34)			by_4 = point15;
            		}
            		else {
HXLINE(  34)			by_4 = hitTriScalar1->by;
            		}
HXDLIN(  34)		Float cx_2;
HXDLIN(  34)		if (isScaledC2) {
HXLINE(  34)			Float point16 = hitTriScalar1->cx;
HXDLIN(  34)			point16 = (point16 - x04);
HXDLIN(  34)			point16 = (point16 * ((Float)0.999));
HXDLIN(  34)			point16 = (point16 + x04);
HXDLIN(  34)			cx_2 = point16;
            		}
            		else {
HXLINE(  34)			cx_2 = hitTriScalar1->cx;
            		}
HXDLIN(  34)		Float cy_2;
HXDLIN(  34)		if (isScaledC2) {
HXLINE(  34)			Float point17 = hitTriScalar1->cy;
HXDLIN(  34)			point17 = (point17 - y04);
HXDLIN(  34)			point17 = (point17 * ((Float)0.999));
HXDLIN(  34)			point17 = (point17 + y04);
HXDLIN(  34)			cy_2 = point17;
            		}
            		else {
HXLINE(  34)			cy_2 = hitTriScalar1->cy;
            		}
HXDLIN(  34)		 ::pi_xy::algo::HitTri scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_2,ay_2,bx_4,by_4,cx_2,cy_2,true);
HXDLIN(  34)		Float x05 = ((Float)0.);
HXDLIN(  34)		Float y05 = ((Float)0.);
HXDLIN(  34)		bool isScaledA3 = (scaleA2 != ((Float)1.));
HXDLIN(  34)		bool isScaledB3 = (scaleB2 != ((Float)1.));
HXDLIN(  34)		bool isScaledC3 = (scaleC2 != ((Float)1.));
HXDLIN(  34)		if (isScaledA3) {
HXLINE(  34)			if (isScaledB3) {
HXLINE(  34)				if (isScaledC3) {
HXLINE(  82)					x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  83)					y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x05 = scaled1->cx;
HXLINE(  80)					y05 = scaled1->cy;
            				}
            			}
            			else {
HXLINE(  34)				if (isScaledC3) {
HXLINE(  76)					x05 = scaled1->bx;
HXLINE(  77)					y05 = scaled1->by;
            				}
            				else {
HXLINE(  73)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled1);
HXLINE(  74)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled1);
            				}
            			}
            		}
            		else {
HXLINE(  34)			if (isScaledB3) {
HXLINE(  34)				if (isScaledC3) {
HXLINE(  70)					x05 = scaled1->ax;
HXLINE(  71)					y05 = scaled1->ay;
            				}
            				else {
HXLINE(  67)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled1);
HXLINE(  68)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled1);
            				}
            			}
            			else {
HXLINE(  34)				if (isScaledC3) {
HXLINE(  64)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled1);
HXLINE(  65)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled1);
            				}
            				else {
HXLINE(  61)					x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  62)					y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  34)		Float ax_3;
HXDLIN(  34)		if (isScaledA3) {
HXLINE(  34)			Float point18 = scaled1->ax;
HXDLIN(  34)			point18 = (point18 - x05);
HXDLIN(  34)			point18 = (point18 * scaleA2);
HXDLIN(  34)			point18 = (point18 + x05);
HXDLIN(  34)			ax_3 = point18;
            		}
            		else {
HXLINE(  34)			ax_3 = scaled1->ax;
            		}
HXDLIN(  34)		Float ay_3;
HXDLIN(  34)		if (isScaledA3) {
HXLINE(  34)			Float point19 = scaled1->ay;
HXDLIN(  34)			point19 = (point19 - y05);
HXDLIN(  34)			point19 = (point19 * scaleA2);
HXDLIN(  34)			point19 = (point19 + y05);
HXDLIN(  34)			ay_3 = point19;
            		}
            		else {
HXLINE(  34)			ay_3 = scaled1->ay;
            		}
HXDLIN(  34)		Float bx_5;
HXDLIN(  34)		if (isScaledB3) {
HXLINE(  34)			Float point20 = scaled1->bx;
HXDLIN(  34)			point20 = (point20 - x05);
HXDLIN(  34)			point20 = (point20 * scaleB2);
HXDLIN(  34)			point20 = (point20 + x05);
HXDLIN(  34)			bx_5 = point20;
            		}
            		else {
HXLINE(  34)			bx_5 = scaled1->bx;
            		}
HXDLIN(  34)		Float by_5;
HXDLIN(  34)		if (isScaledB3) {
HXLINE(  34)			Float point21 = scaled1->by;
HXDLIN(  34)			point21 = (point21 - y05);
HXDLIN(  34)			point21 = (point21 * scaleB2);
HXDLIN(  34)			point21 = (point21 + y05);
HXDLIN(  34)			by_5 = point21;
            		}
            		else {
HXLINE(  34)			by_5 = scaled1->by;
            		}
HXDLIN(  34)		Float cx_3;
HXDLIN(  34)		if (isScaledC3) {
HXLINE(  34)			Float point22 = scaled1->cx;
HXDLIN(  34)			point22 = (point22 - x05);
HXDLIN(  34)			point22 = (point22 * scaleC2);
HXDLIN(  34)			point22 = (point22 + x05);
HXDLIN(  34)			cx_3 = point22;
            		}
            		else {
HXLINE(  34)			cx_3 = scaled1->cx;
            		}
HXDLIN(  34)		Float cy_3;
HXDLIN(  34)		if (isScaledC3) {
HXLINE(  34)			Float point23 = scaled1->cy;
HXDLIN(  34)			point23 = (point23 - y05);
HXDLIN(  34)			point23 = (point23 * scaleC2);
HXDLIN(  34)			point23 = (point23 + y05);
HXDLIN(  34)			cy_3 = point23;
            		}
            		else {
HXLINE(  34)			cy_3 = scaled1->cy;
            		}
HXDLIN(  34)		scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_3,ay_3,bx_5,by_5,cx_3,cy_3,true);
HXDLIN(  34)		{
HXLINE(  34)			 ::pi_xy::iter::IntIterStart this50 = hitTriScalar1->xIter3;
HXDLIN(  34)			int _g_min2 = this50->start;
HXDLIN(  34)			int _g_max2 = this50->max;
HXDLIN(  34)			while((_g_min2 < _g_max2)){
HXLINE(  34)				_g_min2 = (_g_min2 + 1);
HXDLIN(  34)				int px2 = (_g_min2 - 1);
HXDLIN(  34)				{
HXLINE(  34)					 ::pi_xy::iter::IntIterStart this51 = hitTriScalar1->yIter3;
HXDLIN(  34)					int _g_min3 = this51->start;
HXDLIN(  34)					int _g_max3 = this51->max;
HXDLIN(  34)					while((_g_min3 < _g_max3)){
HXLINE(  34)						_g_min3 = (_g_min3 + 1);
HXDLIN(  34)						int py2 = (_g_min3 - 1);
HXDLIN(  34)						Float pcx4 = (( (Float)(px2) ) - barycentric_cx1);
HXDLIN(  34)						Float pcy4 = (( (Float)(py2) ) - barycentric_cy1);
HXDLIN(  34)						Float dot314 = ((pcx4 * barycentric_bcx1) + (pcy4 * barycentric_bcy1));
HXDLIN(  34)						Float dot324 = ((pcx4 * barycentric_acx1) + (pcy4 * barycentric_acy1));
HXDLIN(  34)						Float ratioA5 = (((barycentric_dot221 * dot314) - (barycentric_dot121 * dot324)) * barycentric_denom11);
HXDLIN(  34)						Float ratioB5 = (((barycentric_dot111 * dot324) - (barycentric_dot121 * dot314)) * barycentric_denom11);
HXDLIN(  34)						Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  34)						Float ratios_ratioA1 = ratioA5;
HXDLIN(  34)						Float ratios_ratioB1 = ratioB5;
HXDLIN(  34)						Float ratios_ratioC1 = ratioC5;
HXDLIN(  34)						Float v5;
HXDLIN(  34)						if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  34)							v5 = ratios_ratioA1;
            						}
            						else {
HXLINE(  34)							v5 = ratios_ratioB1;
            						}
HXDLIN(  34)						Float min_1;
HXDLIN(  34)						if ((v5 < ratios_ratioC1)) {
HXLINE(  34)							min_1 = v5;
            						}
            						else {
HXLINE(  34)							min_1 = ratios_ratioC1;
            						}
HXDLIN(  34)						bool isSoft4;
HXDLIN(  34)						if (softAB1) {
HXLINE(  34)							if (softBC1) {
HXLINE(  34)								if (softCA1) {
HXLINE(  34)									isSoft4 = true;
            								}
            								else {
HXLINE(  34)									if ((min_1 != ratios_ratioB1)) {
HXLINE(  34)										Float v6;
HXDLIN(  34)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  34)											v6 = ratios_ratioA1;
            										}
            										else {
HXLINE(  34)											v6 = ratios_ratioB1;
            										}
HXDLIN(  34)										Float isSoft5;
HXDLIN(  34)										if ((v6 < ratios_ratioC1)) {
HXLINE(  34)											isSoft5 = v6;
            										}
            										else {
HXLINE(  34)											isSoft5 = ratios_ratioC1;
            										}
HXDLIN(  34)										isSoft4 = (isSoft5 == ratios_ratioC1);
            									}
            									else {
HXLINE(  34)										isSoft4 = true;
            									}
            								}
            							}
            							else {
HXLINE(  34)								if (softCA1) {
HXLINE(  34)									if ((min_1 != ratios_ratioA1)) {
HXLINE(  34)										Float v7;
HXDLIN(  34)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  34)											v7 = ratios_ratioA1;
            										}
            										else {
HXLINE(  34)											v7 = ratios_ratioB1;
            										}
HXDLIN(  34)										Float isSoft6;
HXDLIN(  34)										if ((v7 < ratios_ratioC1)) {
HXLINE(  34)											isSoft6 = v7;
            										}
            										else {
HXLINE(  34)											isSoft6 = ratios_ratioC1;
            										}
HXDLIN(  34)										isSoft4 = (isSoft6 == ratios_ratioC1);
            									}
            									else {
HXLINE(  34)										isSoft4 = true;
            									}
            								}
            								else {
HXLINE(  34)									isSoft4 = (min_1 == ratios_ratioC1);
            								}
            							}
            						}
            						else {
HXLINE(  34)							if (softBC1) {
HXLINE(  34)								if (softCA1) {
HXLINE(  34)									if ((min_1 != ratios_ratioA1)) {
HXLINE(  34)										Float v8;
HXDLIN(  34)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  34)											v8 = ratios_ratioA1;
            										}
            										else {
HXLINE(  34)											v8 = ratios_ratioB1;
            										}
HXDLIN(  34)										Float isSoft7;
HXDLIN(  34)										if ((v8 < ratios_ratioC1)) {
HXLINE(  34)											isSoft7 = v8;
            										}
            										else {
HXLINE(  34)											isSoft7 = ratios_ratioC1;
            										}
HXDLIN(  34)										isSoft4 = (isSoft7 == ratios_ratioB1);
            									}
            									else {
HXLINE(  34)										isSoft4 = true;
            									}
            								}
            								else {
HXLINE(  34)									isSoft4 = (min_1 == ratios_ratioB1);
            								}
            							}
            							else {
HXLINE(  34)								if (softCA1) {
HXLINE(  34)									isSoft4 = (min_1 == ratios_ratioA1);
            								}
            								else {
HXLINE(  34)									isSoft4 = false;
            								}
            							}
            						}
HXDLIN(  34)						Float x06 = ((Float)-0.0739127852035666);
HXDLIN(  34)						Float y06 = ((Float)0.703233176253404202);
HXDLIN(  34)						Float x15 = ((Float)-0.353553390593273564);
HXDLIN(  34)						Float y15 = ((Float)0.61237243569579447);
HXDLIN(  34)						Float x22 = ((Float)-0.572061402817684139);
HXDLIN(  34)						Float y22 = ((Float)0.415626937777453465);
HXDLIN(  34)						Float x32 = ((Float)-0.691654801480225401);
HXDLIN(  34)						Float y32 = ((Float)0.147015766465198733);
HXDLIN(  34)						Float x42 = ((Float)-0.691654801480225512);
HXDLIN(  34)						Float y42 = ((Float)-0.147015766465198261);
HXDLIN(  34)						Float averageX2 = ((Float)0.);
HXDLIN(  34)						Float averageY2 = ((Float)0.);
HXDLIN(  34)						int hits2 = 0;
HXDLIN(  34)						Float fractionTotal4 = ((Float)0.);
HXDLIN(  34)						Float x16 = (px2 + x06);
HXDLIN(  34)						Float y16 = (py2 + y06);
HXDLIN(  34)						bool _hx_tmp47;
HXDLIN(  34)						bool _hx_tmp48;
HXDLIN(  34)						 ::pi_xy::iter::IntIterStart this52 = hitTriScalar1->xIter3;
HXDLIN(  34)						bool _hx_tmp49;
HXDLIN(  34)						if ((x16 > (this52->start - 1))) {
HXLINE(  34)							_hx_tmp49 = (x16 < (this52->max + 1));
            						}
            						else {
HXLINE(  34)							_hx_tmp49 = false;
            						}
HXDLIN(  34)						if (_hx_tmp49) {
HXLINE(  34)							 ::pi_xy::iter::IntIterStart this53 = hitTriScalar1->yIter3;
HXDLIN(  34)							if ((y16 > (this53->start - 1))) {
HXLINE(  34)								_hx_tmp48 = (y16 < (this53->max + 1));
            							}
            							else {
HXLINE(  34)								_hx_tmp48 = false;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp48 = false;
            						}
HXDLIN(  34)						if (_hx_tmp48) {
HXLINE(  34)							Float s10 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x16)) + (hitTriScalar1->sy * y16));
HXDLIN(  34)							Float t10 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x16)) + (hitTriScalar1->ty * y16));
HXDLIN(  34)							bool _hx_tmp50;
HXDLIN(  34)							if (!((s10 <= 0))) {
HXLINE(  34)								_hx_tmp50 = (t10 <= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp50 = true;
            							}
HXDLIN(  34)							if (_hx_tmp50) {
HXLINE(  34)								_hx_tmp47 = false;
            							}
            							else {
HXLINE(  34)								if (((s10 + t10) < hitTriScalar1->A)) {
HXLINE(  34)									_hx_tmp47 = true;
            								}
            								else {
HXLINE(  34)									_hx_tmp47 = false;
            								}
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp47 = false;
            						}
HXDLIN(  34)						if (_hx_tmp47) {
HXLINE(  34)							hits2 = (hits2 + 1);
HXDLIN(  34)							averageX2 = (averageX2 + x06);
HXDLIN(  34)							averageY2 = (averageY2 + y06);
HXDLIN(  34)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  34)						Float x17 = (px2 + x15);
HXDLIN(  34)						Float y17 = (py2 + y15);
HXDLIN(  34)						bool _hx_tmp51;
HXDLIN(  34)						bool _hx_tmp52;
HXDLIN(  34)						 ::pi_xy::iter::IntIterStart this54 = hitTriScalar1->xIter3;
HXDLIN(  34)						bool _hx_tmp53;
HXDLIN(  34)						if ((x17 > (this54->start - 1))) {
HXLINE(  34)							_hx_tmp53 = (x17 < (this54->max + 1));
            						}
            						else {
HXLINE(  34)							_hx_tmp53 = false;
            						}
HXDLIN(  34)						if (_hx_tmp53) {
HXLINE(  34)							 ::pi_xy::iter::IntIterStart this55 = hitTriScalar1->yIter3;
HXDLIN(  34)							if ((y17 > (this55->start - 1))) {
HXLINE(  34)								_hx_tmp52 = (y17 < (this55->max + 1));
            							}
            							else {
HXLINE(  34)								_hx_tmp52 = false;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp52 = false;
            						}
HXDLIN(  34)						if (_hx_tmp52) {
HXLINE(  34)							Float s11 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x17)) + (hitTriScalar1->sy * y17));
HXDLIN(  34)							Float t11 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x17)) + (hitTriScalar1->ty * y17));
HXDLIN(  34)							bool _hx_tmp54;
HXDLIN(  34)							if (!((s11 <= 0))) {
HXLINE(  34)								_hx_tmp54 = (t11 <= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp54 = true;
            							}
HXDLIN(  34)							if (_hx_tmp54) {
HXLINE(  34)								_hx_tmp51 = false;
            							}
            							else {
HXLINE(  34)								if (((s11 + t11) < hitTriScalar1->A)) {
HXLINE(  34)									_hx_tmp51 = true;
            								}
            								else {
HXLINE(  34)									_hx_tmp51 = false;
            								}
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp51 = false;
            						}
HXDLIN(  34)						if (_hx_tmp51) {
HXLINE(  34)							hits2 = (hits2 + 1);
HXDLIN(  34)							averageX2 = (averageX2 + x15);
HXDLIN(  34)							averageY2 = (averageY2 + y15);
HXDLIN(  34)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  34)						Float x18 = (px2 + x22);
HXDLIN(  34)						Float y18 = (py2 + y22);
HXDLIN(  34)						bool _hx_tmp55;
HXDLIN(  34)						bool _hx_tmp56;
HXDLIN(  34)						 ::pi_xy::iter::IntIterStart this56 = hitTriScalar1->xIter3;
HXDLIN(  34)						bool _hx_tmp57;
HXDLIN(  34)						if ((x18 > (this56->start - 1))) {
HXLINE(  34)							_hx_tmp57 = (x18 < (this56->max + 1));
            						}
            						else {
HXLINE(  34)							_hx_tmp57 = false;
            						}
HXDLIN(  34)						if (_hx_tmp57) {
HXLINE(  34)							 ::pi_xy::iter::IntIterStart this57 = hitTriScalar1->yIter3;
HXDLIN(  34)							if ((y18 > (this57->start - 1))) {
HXLINE(  34)								_hx_tmp56 = (y18 < (this57->max + 1));
            							}
            							else {
HXLINE(  34)								_hx_tmp56 = false;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp56 = false;
            						}
HXDLIN(  34)						if (_hx_tmp56) {
HXLINE(  34)							Float s12 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x18)) + (hitTriScalar1->sy * y18));
HXDLIN(  34)							Float t12 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x18)) + (hitTriScalar1->ty * y18));
HXDLIN(  34)							bool _hx_tmp58;
HXDLIN(  34)							if (!((s12 <= 0))) {
HXLINE(  34)								_hx_tmp58 = (t12 <= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp58 = true;
            							}
HXDLIN(  34)							if (_hx_tmp58) {
HXLINE(  34)								_hx_tmp55 = false;
            							}
            							else {
HXLINE(  34)								if (((s12 + t12) < hitTriScalar1->A)) {
HXLINE(  34)									_hx_tmp55 = true;
            								}
            								else {
HXLINE(  34)									_hx_tmp55 = false;
            								}
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp55 = false;
            						}
HXDLIN(  34)						if (_hx_tmp55) {
HXLINE(  34)							hits2 = (hits2 + 1);
HXDLIN(  34)							averageX2 = (averageX2 + x22);
HXDLIN(  34)							averageY2 = (averageY2 + y22);
HXDLIN(  34)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  34)						Float x19 = (px2 + x32);
HXDLIN(  34)						Float y19 = (py2 + y32);
HXDLIN(  34)						bool _hx_tmp59;
HXDLIN(  34)						bool _hx_tmp60;
HXDLIN(  34)						 ::pi_xy::iter::IntIterStart this58 = hitTriScalar1->xIter3;
HXDLIN(  34)						bool _hx_tmp61;
HXDLIN(  34)						if ((x19 > (this58->start - 1))) {
HXLINE(  34)							_hx_tmp61 = (x19 < (this58->max + 1));
            						}
            						else {
HXLINE(  34)							_hx_tmp61 = false;
            						}
HXDLIN(  34)						if (_hx_tmp61) {
HXLINE(  34)							 ::pi_xy::iter::IntIterStart this59 = hitTriScalar1->yIter3;
HXDLIN(  34)							if ((y19 > (this59->start - 1))) {
HXLINE(  34)								_hx_tmp60 = (y19 < (this59->max + 1));
            							}
            							else {
HXLINE(  34)								_hx_tmp60 = false;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp60 = false;
            						}
HXDLIN(  34)						if (_hx_tmp60) {
HXLINE(  34)							Float s13 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x19)) + (hitTriScalar1->sy * y19));
HXDLIN(  34)							Float t13 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x19)) + (hitTriScalar1->ty * y19));
HXDLIN(  34)							bool _hx_tmp62;
HXDLIN(  34)							if (!((s13 <= 0))) {
HXLINE(  34)								_hx_tmp62 = (t13 <= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp62 = true;
            							}
HXDLIN(  34)							if (_hx_tmp62) {
HXLINE(  34)								_hx_tmp59 = false;
            							}
            							else {
HXLINE(  34)								if (((s13 + t13) < hitTriScalar1->A)) {
HXLINE(  34)									_hx_tmp59 = true;
            								}
            								else {
HXLINE(  34)									_hx_tmp59 = false;
            								}
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp59 = false;
            						}
HXDLIN(  34)						if (_hx_tmp59) {
HXLINE(  34)							hits2 = (hits2 + 1);
HXDLIN(  34)							averageX2 = (averageX2 + x32);
HXDLIN(  34)							averageY2 = (averageY2 + y32);
HXDLIN(  34)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  34)						Float x20 = (px2 + x42);
HXDLIN(  34)						Float y20 = (py2 + y42);
HXDLIN(  34)						bool _hx_tmp63;
HXDLIN(  34)						bool _hx_tmp64;
HXDLIN(  34)						 ::pi_xy::iter::IntIterStart this60 = hitTriScalar1->xIter3;
HXDLIN(  34)						bool _hx_tmp65;
HXDLIN(  34)						if ((x20 > (this60->start - 1))) {
HXLINE(  34)							_hx_tmp65 = (x20 < (this60->max + 1));
            						}
            						else {
HXLINE(  34)							_hx_tmp65 = false;
            						}
HXDLIN(  34)						if (_hx_tmp65) {
HXLINE(  34)							 ::pi_xy::iter::IntIterStart this61 = hitTriScalar1->yIter3;
HXDLIN(  34)							if ((y20 > (this61->start - 1))) {
HXLINE(  34)								_hx_tmp64 = (y20 < (this61->max + 1));
            							}
            							else {
HXLINE(  34)								_hx_tmp64 = false;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp64 = false;
            						}
HXDLIN(  34)						if (_hx_tmp64) {
HXLINE(  34)							Float s14 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x20)) + (hitTriScalar1->sy * y20));
HXDLIN(  34)							Float t14 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x20)) + (hitTriScalar1->ty * y20));
HXDLIN(  34)							bool _hx_tmp66;
HXDLIN(  34)							if (!((s14 <= 0))) {
HXLINE(  34)								_hx_tmp66 = (t14 <= 0);
            							}
            							else {
HXLINE(  34)								_hx_tmp66 = true;
            							}
HXDLIN(  34)							if (_hx_tmp66) {
HXLINE(  34)								_hx_tmp63 = false;
            							}
            							else {
HXLINE(  34)								if (((s14 + t14) < hitTriScalar1->A)) {
HXLINE(  34)									_hx_tmp63 = true;
            								}
            								else {
HXLINE(  34)									_hx_tmp63 = false;
            								}
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp63 = false;
            						}
HXDLIN(  34)						if (_hx_tmp63) {
HXLINE(  34)							hits2 = (hits2 + 1);
HXDLIN(  34)							averageX2 = (averageX2 + x42);
HXDLIN(  34)							averageY2 = (averageY2 + y42);
HXDLIN(  34)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  34)						if ((hits2 != 0)) {
HXLINE( 244)							averageX2 = (px2 + (averageX2 / ( (Float)(hits2) )));
HXLINE( 245)							averageY2 = (py2 + (averageY2 / ( (Float)(hits2) )));
            						}
            						else {
HXLINE( 247)							averageX2 = ( (Float)(px2) );
HXLINE( 248)							averageY2 = ( (Float)(py2) );
            						}
HXLINE(  34)						Float fractionTotal5 = fractionTotal4;
HXDLIN(  34)						Float sampleData_fractionTotal1 = fractionTotal5;
HXDLIN(  34)						Float sampleData_averageX1 = averageX2;
HXDLIN(  34)						Float sampleData_averageY1 = averageY2;
HXDLIN(  34)						bool sampleData_notHit1 = (fractionTotal5 == ((Float)0.));
HXDLIN(  34)						Float aScale1 = sampleData_fractionTotal1;
HXDLIN(  34)						if (!((aScale1 > ((Float)0.9)))) {
HXLINE(  34)							aScale1 = ((aScale1 * ((Float)0.8)) + ((Float)0.2));
            						}
HXLINE( 142)						a8 = 0;
HXLINE( 143)						r6 = 0;
HXLINE( 144)						g6 = 0;
HXLINE( 145)						b6 = 0;
HXLINE(  34)						if (isSoft4) {
HXLINE(  34)							if (!(sampleData_notHit1)) {
HXLINE(  34)								Float pcx5 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  34)								Float pcy5 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  34)								Float dot315 = ((pcx5 * barycentric_bcx1) + (pcy5 * barycentric_bcy1));
HXDLIN(  34)								Float dot325 = ((pcx5 * barycentric_acx1) + (pcy5 * barycentric_acy1));
HXDLIN(  34)								Float ratioA6 = (((barycentric_dot221 * dot315) - (barycentric_dot121 * dot325)) * barycentric_denom11);
HXDLIN(  34)								Float ratioB6 = (((barycentric_dot111 * dot325) - (barycentric_dot121 * dot315)) * barycentric_denom11);
HXDLIN(  34)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN(  34)								Float ratiosAvg_ratioA3 = ratioA6;
HXDLIN(  34)								Float ratiosAvg_ratioB3 = ratioB6;
HXDLIN(  34)								Float ratiosAvg_ratioC3 = ratioC6;
HXDLIN(  34)								Float ratioA_3 = ratiosAvg_ratioA3;
HXDLIN(  34)								Float ratioB_3 = ratiosAvg_ratioB3;
HXDLIN(  34)								Float ratioC_3 = ratiosAvg_ratioC3;
HXDLIN(  34)								int i14 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_3) + (( (Float)(aB1) ) * ratioB_3)) + (( (Float)(aC1) ) * ratioC_3)));
HXDLIN(  34)								if ((i14 > 255)) {
HXLINE(  24)									i14 = 255;
            								}
HXLINE(  34)								if ((i14 < 0)) {
HXLINE(  25)									i14 = 0;
            								}
HXLINE( 152)								a8 = i14;
HXLINE(  34)								int i15 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_3) + (( (Float)(rB1) ) * ratioB_3)) + (( (Float)(rC1) ) * ratioC_3)));
HXDLIN(  34)								if ((i15 > 255)) {
HXLINE(  24)									i15 = 255;
            								}
HXLINE(  34)								if ((i15 < 0)) {
HXLINE(  25)									i15 = 0;
            								}
HXLINE( 153)								r6 = i15;
HXLINE(  34)								int i16 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_3) + (( (Float)(gB1) ) * ratioB_3)) + (( (Float)(gC1) ) * ratioC_3)));
HXDLIN(  34)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE(  34)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 154)								g6 = i16;
HXLINE(  34)								int i17 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_3) + (( (Float)(bB1) ) * ratioB_3)) + (( (Float)(bC1) ) * ratioC_3)));
HXDLIN(  34)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE(  34)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 155)								b6 = i17;
HXLINE(  34)								{
HXLINE(  34)									int a14;
HXDLIN(  34)									if ((aScale1 > ((Float)0.9))) {
HXLINE(  34)										a14 = a8;
            									}
            									else {
HXLINE(  34)										int i18 = ::Std_obj::_hx_int((( (Float)(a8) ) * aScale1));
HXDLIN(  34)										if ((i18 > 255)) {
HXLINE(  24)											i18 = 255;
            										}
HXLINE(  34)										if ((i18 < 0)) {
HXLINE(  25)											i18 = 0;
            										}
HXLINE(  34)										a14 = i18;
            									}
HXDLIN(  34)									int location3;
HXDLIN(  34)									if (pixelImage->useVirtualPos) {
HXLINE(  34)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  34)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN(  34)									bool _hx_tmp67;
HXDLIN(  34)									if (pixelImage->transparent) {
HXLINE(  34)										_hx_tmp67 = (a14 < 254);
            									}
            									else {
HXLINE(  34)										_hx_tmp67 = false;
            									}
HXDLIN(  34)									if (_hx_tmp67) {
HXLINE(  34)										int this62 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  34)										int old3;
HXDLIN(  34)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)											old3 = ((((((this62 >> 24) & 255) << 24) | ((this62 & 255) << 16)) | (((this62 >> 8) & 255) << 8)) | ((this62 >> 16) & 255));
            										}
            										else {
HXLINE(  34)											old3 = this62;
            										}
HXDLIN(  34)										int rhs3 = ((((a14 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  34)										Float a15;
HXDLIN(  34)										int this63 = ((old3 >> 24) & 255);
HXDLIN(  34)										if ((this63 == 0)) {
HXLINE(  34)											a15 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											a15 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float r13;
HXDLIN(  34)										int this64 = ((old3 >> 16) & 255);
HXDLIN(  34)										if ((this64 == 0)) {
HXLINE(  34)											r13 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											r13 = (( (Float)(this64) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float g13;
HXDLIN(  34)										int this65 = ((old3 >> 8) & 255);
HXDLIN(  34)										if ((this65 == 0)) {
HXLINE(  34)											g13 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											g13 = (( (Float)(this65) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float b14;
HXDLIN(  34)										int this66 = (old3 & 255);
HXDLIN(  34)										if ((this66 == 0)) {
HXLINE(  34)											b14 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											b14 = (( (Float)(this66) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float a24;
HXDLIN(  34)										int this67 = ((rhs3 >> 24) & 255);
HXDLIN(  34)										if ((this67 == 0)) {
HXLINE(  34)											a24 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											a24 = (( (Float)(this67) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float r23;
HXDLIN(  34)										int this68 = ((rhs3 >> 16) & 255);
HXDLIN(  34)										if ((this68 == 0)) {
HXLINE(  34)											r23 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											r23 = (( (Float)(this68) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float g23;
HXDLIN(  34)										int this69 = ((rhs3 >> 8) & 255);
HXDLIN(  34)										if ((this69 == 0)) {
HXLINE(  34)											g23 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											g23 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float b24;
HXDLIN(  34)										int this70 = (rhs3 & 255);
HXDLIN(  34)										if ((this70 == 0)) {
HXLINE(  34)											b24 = ((Float)0.);
            										}
            										else {
HXLINE(  34)											b24 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN(  34)										Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  34)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a34) + (r23 * a24))));
HXDLIN(  34)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a34) + (g23 * a24))));
HXDLIN(  34)										int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN(  34)										int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  34)										int blended3 = ((((a16 << 24) | (r7 << 16)) | (g7 << 8)) | b9);
HXDLIN(  34)										{
HXLINE(  34)											int _hx_tmp68;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												_hx_tmp68 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE(  34)												_hx_tmp68 = blended3;
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp68);
            										}
            									}
            									else {
HXLINE(  34)										int value3;
HXDLIN(  34)										if (pixelImage->isLittle) {
HXLINE(  34)											value3 = ((((a14 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE(  34)											value3 = ((((a14 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            										}
HXDLIN(  34)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value3);
            									}
            								}
            							}
            						}
            						else {
HXLINE(  34)							Float ratioA7 = ratios_ratioA1;
HXDLIN(  34)							Float ratioB7 = ratios_ratioB1;
HXDLIN(  34)							Float ratioC7 = ratios_ratioC1;
HXDLIN(  34)							Float hitTotal1 = sampleData_fractionTotal1;
HXDLIN(  34)							if (!(sampleData_notHit1)) {
HXLINE(  34)								Float x07 = ((Float)-0.0739127852035666);
HXDLIN(  34)								Float y07 = ((Float)0.703233176253404202);
HXDLIN(  34)								Float x110 = ((Float)-0.353553390593273564);
HXDLIN(  34)								Float y110 = ((Float)0.61237243569579447);
HXDLIN(  34)								Float x23 = ((Float)-0.572061402817684139);
HXDLIN(  34)								Float y23 = ((Float)0.415626937777453465);
HXDLIN(  34)								Float x33 = ((Float)-0.691654801480225401);
HXDLIN(  34)								Float y33 = ((Float)0.147015766465198733);
HXDLIN(  34)								Float x43 = ((Float)-0.691654801480225512);
HXDLIN(  34)								Float y43 = ((Float)-0.147015766465198261);
HXDLIN(  34)								Float averageX3 = ((Float)0.);
HXDLIN(  34)								Float averageY3 = ((Float)0.);
HXDLIN(  34)								int hits3 = 0;
HXDLIN(  34)								Float fractionTotal6 = ((Float)0.);
HXDLIN(  34)								Float x24 = (px2 + x07);
HXDLIN(  34)								Float y24 = (py2 + y07);
HXDLIN(  34)								bool _hx_tmp69;
HXDLIN(  34)								bool _hx_tmp70;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this71 = scaled1->xIter3;
HXDLIN(  34)								bool _hx_tmp71;
HXDLIN(  34)								if ((x24 > (this71->start - 1))) {
HXLINE(  34)									_hx_tmp71 = (x24 < (this71->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp71 = false;
            								}
HXDLIN(  34)								if (_hx_tmp71) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this72 = scaled1->yIter3;
HXDLIN(  34)									if ((y24 > (this72->start - 1))) {
HXLINE(  34)										_hx_tmp70 = (y24 < (this72->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp70 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp70 = false;
            								}
HXDLIN(  34)								if (_hx_tmp70) {
HXLINE(  34)									Float s15 = ((scaled1->s0 + (scaled1->sx * x24)) + (scaled1->sy * y24));
HXDLIN(  34)									Float t15 = ((scaled1->t0 + (scaled1->tx * x24)) + (scaled1->ty * y24));
HXDLIN(  34)									bool _hx_tmp72;
HXDLIN(  34)									if (!((s15 <= 0))) {
HXLINE(  34)										_hx_tmp72 = (t15 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp72 = true;
            									}
HXDLIN(  34)									if (_hx_tmp72) {
HXLINE(  34)										_hx_tmp69 = false;
            									}
            									else {
HXLINE(  34)										if (((s15 + t15) < scaled1->A)) {
HXLINE(  34)											_hx_tmp69 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp69 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp69 = false;
            								}
HXDLIN(  34)								if (_hx_tmp69) {
HXLINE(  34)									hits3 = (hits3 + 1);
HXDLIN(  34)									averageX3 = (averageX3 + x07);
HXDLIN(  34)									averageY3 = (averageY3 + y07);
HXDLIN(  34)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  34)								Float x25 = (px2 + x110);
HXDLIN(  34)								Float y25 = (py2 + y110);
HXDLIN(  34)								bool _hx_tmp73;
HXDLIN(  34)								bool _hx_tmp74;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this73 = scaled1->xIter3;
HXDLIN(  34)								bool _hx_tmp75;
HXDLIN(  34)								if ((x25 > (this73->start - 1))) {
HXLINE(  34)									_hx_tmp75 = (x25 < (this73->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp75 = false;
            								}
HXDLIN(  34)								if (_hx_tmp75) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this74 = scaled1->yIter3;
HXDLIN(  34)									if ((y25 > (this74->start - 1))) {
HXLINE(  34)										_hx_tmp74 = (y25 < (this74->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp74 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp74 = false;
            								}
HXDLIN(  34)								if (_hx_tmp74) {
HXLINE(  34)									Float s16 = ((scaled1->s0 + (scaled1->sx * x25)) + (scaled1->sy * y25));
HXDLIN(  34)									Float t16 = ((scaled1->t0 + (scaled1->tx * x25)) + (scaled1->ty * y25));
HXDLIN(  34)									bool _hx_tmp76;
HXDLIN(  34)									if (!((s16 <= 0))) {
HXLINE(  34)										_hx_tmp76 = (t16 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp76 = true;
            									}
HXDLIN(  34)									if (_hx_tmp76) {
HXLINE(  34)										_hx_tmp73 = false;
            									}
            									else {
HXLINE(  34)										if (((s16 + t16) < scaled1->A)) {
HXLINE(  34)											_hx_tmp73 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp73 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp73 = false;
            								}
HXDLIN(  34)								if (_hx_tmp73) {
HXLINE(  34)									hits3 = (hits3 + 1);
HXDLIN(  34)									averageX3 = (averageX3 + x110);
HXDLIN(  34)									averageY3 = (averageY3 + y110);
HXDLIN(  34)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  34)								Float x26 = (px2 + x23);
HXDLIN(  34)								Float y26 = (py2 + y23);
HXDLIN(  34)								bool _hx_tmp77;
HXDLIN(  34)								bool _hx_tmp78;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this75 = scaled1->xIter3;
HXDLIN(  34)								bool _hx_tmp79;
HXDLIN(  34)								if ((x26 > (this75->start - 1))) {
HXLINE(  34)									_hx_tmp79 = (x26 < (this75->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp79 = false;
            								}
HXDLIN(  34)								if (_hx_tmp79) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this76 = scaled1->yIter3;
HXDLIN(  34)									if ((y26 > (this76->start - 1))) {
HXLINE(  34)										_hx_tmp78 = (y26 < (this76->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp78 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp78 = false;
            								}
HXDLIN(  34)								if (_hx_tmp78) {
HXLINE(  34)									Float s17 = ((scaled1->s0 + (scaled1->sx * x26)) + (scaled1->sy * y26));
HXDLIN(  34)									Float t17 = ((scaled1->t0 + (scaled1->tx * x26)) + (scaled1->ty * y26));
HXDLIN(  34)									bool _hx_tmp80;
HXDLIN(  34)									if (!((s17 <= 0))) {
HXLINE(  34)										_hx_tmp80 = (t17 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp80 = true;
            									}
HXDLIN(  34)									if (_hx_tmp80) {
HXLINE(  34)										_hx_tmp77 = false;
            									}
            									else {
HXLINE(  34)										if (((s17 + t17) < scaled1->A)) {
HXLINE(  34)											_hx_tmp77 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp77 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp77 = false;
            								}
HXDLIN(  34)								if (_hx_tmp77) {
HXLINE(  34)									hits3 = (hits3 + 1);
HXDLIN(  34)									averageX3 = (averageX3 + x23);
HXDLIN(  34)									averageY3 = (averageY3 + y23);
HXDLIN(  34)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  34)								Float x27 = (px2 + x33);
HXDLIN(  34)								Float y27 = (py2 + y33);
HXDLIN(  34)								bool _hx_tmp81;
HXDLIN(  34)								bool _hx_tmp82;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this77 = scaled1->xIter3;
HXDLIN(  34)								bool _hx_tmp83;
HXDLIN(  34)								if ((x27 > (this77->start - 1))) {
HXLINE(  34)									_hx_tmp83 = (x27 < (this77->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp83 = false;
            								}
HXDLIN(  34)								if (_hx_tmp83) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this78 = scaled1->yIter3;
HXDLIN(  34)									if ((y27 > (this78->start - 1))) {
HXLINE(  34)										_hx_tmp82 = (y27 < (this78->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp82 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp82 = false;
            								}
HXDLIN(  34)								if (_hx_tmp82) {
HXLINE(  34)									Float s18 = ((scaled1->s0 + (scaled1->sx * x27)) + (scaled1->sy * y27));
HXDLIN(  34)									Float t18 = ((scaled1->t0 + (scaled1->tx * x27)) + (scaled1->ty * y27));
HXDLIN(  34)									bool _hx_tmp84;
HXDLIN(  34)									if (!((s18 <= 0))) {
HXLINE(  34)										_hx_tmp84 = (t18 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp84 = true;
            									}
HXDLIN(  34)									if (_hx_tmp84) {
HXLINE(  34)										_hx_tmp81 = false;
            									}
            									else {
HXLINE(  34)										if (((s18 + t18) < scaled1->A)) {
HXLINE(  34)											_hx_tmp81 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp81 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp81 = false;
            								}
HXDLIN(  34)								if (_hx_tmp81) {
HXLINE(  34)									hits3 = (hits3 + 1);
HXDLIN(  34)									averageX3 = (averageX3 + x33);
HXDLIN(  34)									averageY3 = (averageY3 + y33);
HXDLIN(  34)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  34)								Float x28 = (px2 + x43);
HXDLIN(  34)								Float y28 = (py2 + y43);
HXDLIN(  34)								bool _hx_tmp85;
HXDLIN(  34)								bool _hx_tmp86;
HXDLIN(  34)								 ::pi_xy::iter::IntIterStart this79 = scaled1->xIter3;
HXDLIN(  34)								bool _hx_tmp87;
HXDLIN(  34)								if ((x28 > (this79->start - 1))) {
HXLINE(  34)									_hx_tmp87 = (x28 < (this79->max + 1));
            								}
            								else {
HXLINE(  34)									_hx_tmp87 = false;
            								}
HXDLIN(  34)								if (_hx_tmp87) {
HXLINE(  34)									 ::pi_xy::iter::IntIterStart this80 = scaled1->yIter3;
HXDLIN(  34)									if ((y28 > (this80->start - 1))) {
HXLINE(  34)										_hx_tmp86 = (y28 < (this80->max + 1));
            									}
            									else {
HXLINE(  34)										_hx_tmp86 = false;
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp86 = false;
            								}
HXDLIN(  34)								if (_hx_tmp86) {
HXLINE(  34)									Float s19 = ((scaled1->s0 + (scaled1->sx * x28)) + (scaled1->sy * y28));
HXDLIN(  34)									Float t19 = ((scaled1->t0 + (scaled1->tx * x28)) + (scaled1->ty * y28));
HXDLIN(  34)									bool _hx_tmp88;
HXDLIN(  34)									if (!((s19 <= 0))) {
HXLINE(  34)										_hx_tmp88 = (t19 <= 0);
            									}
            									else {
HXLINE(  34)										_hx_tmp88 = true;
            									}
HXDLIN(  34)									if (_hx_tmp88) {
HXLINE(  34)										_hx_tmp85 = false;
            									}
            									else {
HXLINE(  34)										if (((s19 + t19) < scaled1->A)) {
HXLINE(  34)											_hx_tmp85 = true;
            										}
            										else {
HXLINE(  34)											_hx_tmp85 = false;
            										}
            									}
            								}
            								else {
HXLINE(  34)									_hx_tmp85 = false;
            								}
HXDLIN(  34)								if (_hx_tmp85) {
HXLINE(  34)									hits3 = (hits3 + 1);
HXDLIN(  34)									averageX3 = (averageX3 + x43);
HXDLIN(  34)									averageY3 = (averageY3 + y43);
HXDLIN(  34)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  34)								if ((hits3 != 0)) {
HXLINE( 244)									averageX3 = (px2 + (averageX3 / ( (Float)(hits3) )));
HXLINE( 245)									averageY3 = (py2 + (averageY3 / ( (Float)(hits3) )));
            								}
            								else {
HXLINE( 247)									averageX3 = ( (Float)(px2) );
HXLINE( 248)									averageY3 = ( (Float)(py2) );
            								}
HXLINE(  34)								Float fractionTotal7 = fractionTotal6;
HXDLIN(  34)								Float sampleScaled_fractionTotal1 = fractionTotal7;
HXDLIN(  34)								Float sampleScaled_averageX1 = averageX3;
HXDLIN(  34)								Float sampleScaled_averageY1 = averageY3;
HXDLIN(  34)								bool sampleScaled_notHit1 = (fractionTotal7 == ((Float)0.));
HXDLIN(  34)								Float scaledTotal1 = sampleScaled_fractionTotal1;
HXDLIN(  34)								bool _hx_tmp89;
HXDLIN(  34)								if (!((scaledTotal1 > hitTotal1))) {
HXLINE(  34)									_hx_tmp89 = (hitTotal1 == ((Float)1.));
            								}
            								else {
HXLINE(  34)									_hx_tmp89 = true;
            								}
HXDLIN(  34)								if (_hx_tmp89) {
HXLINE(  34)									Float pcx6 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  34)									Float pcy6 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  34)									Float dot316 = ((pcx6 * barycentric_bcx1) + (pcy6 * barycentric_bcy1));
HXDLIN(  34)									Float dot326 = ((pcx6 * barycentric_acx1) + (pcy6 * barycentric_acy1));
HXDLIN(  34)									Float ratioA8 = (((barycentric_dot221 * dot316) - (barycentric_dot121 * dot326)) * barycentric_denom11);
HXDLIN(  34)									Float ratioB8 = (((barycentric_dot111 * dot326) - (barycentric_dot121 * dot316)) * barycentric_denom11);
HXDLIN(  34)									Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN(  34)									Float ratiosAvg_ratioA4 = ratioA8;
HXDLIN(  34)									Float ratiosAvg_ratioB4 = ratioB8;
HXDLIN(  34)									Float ratiosAvg_ratioC4 = ratioC8;
HXDLIN(  34)									Float ratioA_4 = ratiosAvg_ratioA4;
HXDLIN(  34)									Float ratioB_4 = ratiosAvg_ratioB4;
HXDLIN(  34)									Float ratioC_4 = ratiosAvg_ratioC4;
HXDLIN(  34)									int i19 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_4) + (( (Float)(aB1) ) * ratioB_4)) + (( (Float)(aC1) ) * ratioC_4)));
HXDLIN(  34)									if ((i19 > 255)) {
HXLINE(  24)										i19 = 255;
            									}
HXLINE(  34)									if ((i19 < 0)) {
HXLINE(  25)										i19 = 0;
            									}
HXLINE( 187)									a8 = i19;
HXLINE(  34)									int i20 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_4) + (( (Float)(rB1) ) * ratioB_4)) + (( (Float)(rC1) ) * ratioC_4)));
HXDLIN(  34)									if ((i20 > 255)) {
HXLINE(  24)										i20 = 255;
            									}
HXLINE(  34)									if ((i20 < 0)) {
HXLINE(  25)										i20 = 0;
            									}
HXLINE( 188)									r6 = i20;
HXLINE(  34)									int i21 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_4) + (( (Float)(gB1) ) * ratioB_4)) + (( (Float)(gC1) ) * ratioC_4)));
HXDLIN(  34)									if ((i21 > 255)) {
HXLINE(  24)										i21 = 255;
            									}
HXLINE(  34)									if ((i21 < 0)) {
HXLINE(  25)										i21 = 0;
            									}
HXLINE( 189)									g6 = i21;
HXLINE(  34)									int i22 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_4) + (( (Float)(bB1) ) * ratioB_4)) + (( (Float)(bC1) ) * ratioC_4)));
HXDLIN(  34)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE(  34)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE( 190)									b6 = i22;
HXLINE(  34)									{
HXLINE(  34)										int location4;
HXDLIN(  34)										if (pixelImage->useVirtualPos) {
HXLINE(  34)											location4 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  34)											location4 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            										}
HXDLIN(  34)										bool _hx_tmp90;
HXDLIN(  34)										if (pixelImage->transparent) {
HXLINE(  34)											_hx_tmp90 = (a8 < 254);
            										}
            										else {
HXLINE(  34)											_hx_tmp90 = false;
            										}
HXDLIN(  34)										if (_hx_tmp90) {
HXLINE(  34)											int this81 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN(  34)											int old4;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												old4 = ((((((this81 >> 24) & 255) << 24) | ((this81 & 255) << 16)) | (((this81 >> 8) & 255) << 8)) | ((this81 >> 16) & 255));
            											}
            											else {
HXLINE(  34)												old4 = this81;
            											}
HXDLIN(  34)											int rhs4 = ((((a8 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  34)											Float a17;
HXDLIN(  34)											int this82 = ((old4 >> 24) & 255);
HXDLIN(  34)											if ((this82 == 0)) {
HXLINE(  34)												a17 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												a17 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float r14;
HXDLIN(  34)											int this83 = ((old4 >> 16) & 255);
HXDLIN(  34)											if ((this83 == 0)) {
HXLINE(  34)												r14 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												r14 = (( (Float)(this83) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float g14;
HXDLIN(  34)											int this84 = ((old4 >> 8) & 255);
HXDLIN(  34)											if ((this84 == 0)) {
HXLINE(  34)												g14 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												g14 = (( (Float)(this84) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float b15;
HXDLIN(  34)											int this85 = (old4 & 255);
HXDLIN(  34)											if ((this85 == 0)) {
HXLINE(  34)												b15 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												b15 = (( (Float)(this85) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float a25;
HXDLIN(  34)											int this86 = ((rhs4 >> 24) & 255);
HXDLIN(  34)											if ((this86 == 0)) {
HXLINE(  34)												a25 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												a25 = (( (Float)(this86) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float r24;
HXDLIN(  34)											int this87 = ((rhs4 >> 16) & 255);
HXDLIN(  34)											if ((this87 == 0)) {
HXLINE(  34)												r24 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												r24 = (( (Float)(this87) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float g24;
HXDLIN(  34)											int this88 = ((rhs4 >> 8) & 255);
HXDLIN(  34)											if ((this88 == 0)) {
HXLINE(  34)												g24 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												g24 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float b25;
HXDLIN(  34)											int this89 = (rhs4 & 255);
HXDLIN(  34)											if ((this89 == 0)) {
HXLINE(  34)												b25 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												b25 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float a35 = (a17 * (( (Float)(1) ) - a25));
HXDLIN(  34)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a35) + (r24 * a25))));
HXDLIN(  34)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a35) + (g24 * a25))));
HXDLIN(  34)											int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN(  34)											int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  34)											int blended4 = ((((a18 << 24) | (r8 << 16)) | (g8 << 8)) | b10);
HXDLIN(  34)											{
HXLINE(  34)												int _hx_tmp91;
HXDLIN(  34)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)													_hx_tmp91 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE(  34)													_hx_tmp91 = blended4;
            												}
HXDLIN(  34)												::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp91);
            											}
            										}
            										else {
HXLINE(  34)											int value4;
HXDLIN(  34)											if (pixelImage->isLittle) {
HXLINE(  34)												value4 = ((((a8 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  34)												value4 = ((((a8 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(pixelImage->image,location4,value4);
            										}
            									}
            								}
            								else {
HXLINE(  34)									Float pcx7 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  34)									Float pcy7 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  34)									Float dot317 = ((pcx7 * barycentric_bcx1) + (pcy7 * barycentric_bcy1));
HXDLIN(  34)									Float dot327 = ((pcx7 * barycentric_acx1) + (pcy7 * barycentric_acy1));
HXDLIN(  34)									Float ratioA9 = (((barycentric_dot221 * dot317) - (barycentric_dot121 * dot327)) * barycentric_denom11);
HXDLIN(  34)									Float ratioB9 = (((barycentric_dot111 * dot327) - (barycentric_dot121 * dot317)) * barycentric_denom11);
HXDLIN(  34)									Float ratioC9 = ((((Float)1.0) - ratioB9) - ratioA9);
HXDLIN(  34)									Float ratiosAvg_ratioA5 = ratioA9;
HXDLIN(  34)									Float ratiosAvg_ratioB5 = ratioB9;
HXDLIN(  34)									Float ratiosAvg_ratioC5 = ratioC9;
HXDLIN(  34)									Float ratioA_5 = ratiosAvg_ratioA5;
HXDLIN(  34)									Float ratioB_5 = ratiosAvg_ratioB5;
HXDLIN(  34)									Float ratioC_5 = ratiosAvg_ratioC5;
HXDLIN(  34)									int i23 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_5) + (( (Float)(aB1) ) * ratioB_5)) + (( (Float)(aC1) ) * ratioC_5)));
HXDLIN(  34)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE(  34)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE( 198)									a8 = i23;
HXLINE(  34)									int i24 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_5) + (( (Float)(rB1) ) * ratioB_5)) + (( (Float)(rC1) ) * ratioC_5)));
HXDLIN(  34)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE(  34)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE( 199)									r6 = i24;
HXLINE(  34)									int i25 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_5) + (( (Float)(gB1) ) * ratioB_5)) + (( (Float)(gC1) ) * ratioC_5)));
HXDLIN(  34)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE(  34)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE( 200)									g6 = i25;
HXLINE(  34)									int i26 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_5) + (( (Float)(bB1) ) * ratioB_5)) + (( (Float)(bC1) ) * ratioC_5)));
HXDLIN(  34)									if ((i26 > 255)) {
HXLINE(  24)										i26 = 255;
            									}
HXLINE(  34)									if ((i26 < 0)) {
HXLINE(  25)										i26 = 0;
            									}
HXLINE( 201)									b6 = i26;
HXLINE(  34)									{
HXLINE(  34)										int a19;
HXDLIN(  34)										if ((aScale1 > ((Float)0.9))) {
HXLINE(  34)											a19 = a8;
            										}
            										else {
HXLINE(  34)											int i27 = ::Std_obj::_hx_int((( (Float)(a8) ) * aScale1));
HXDLIN(  34)											if ((i27 > 255)) {
HXLINE(  24)												i27 = 255;
            											}
HXLINE(  34)											if ((i27 < 0)) {
HXLINE(  25)												i27 = 0;
            											}
HXLINE(  34)											a19 = i27;
            										}
HXDLIN(  34)										int location5;
HXDLIN(  34)										if (pixelImage->useVirtualPos) {
HXLINE(  34)											location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  34)											location5 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            										}
HXDLIN(  34)										bool _hx_tmp92;
HXDLIN(  34)										if (pixelImage->transparent) {
HXLINE(  34)											_hx_tmp92 = (a19 < 254);
            										}
            										else {
HXLINE(  34)											_hx_tmp92 = false;
            										}
HXDLIN(  34)										if (_hx_tmp92) {
HXLINE(  34)											int this90 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  34)											int old5;
HXDLIN(  34)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)												old5 = ((((((this90 >> 24) & 255) << 24) | ((this90 & 255) << 16)) | (((this90 >> 8) & 255) << 8)) | ((this90 >> 16) & 255));
            											}
            											else {
HXLINE(  34)												old5 = this90;
            											}
HXDLIN(  34)											int rhs5 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  34)											Float a110;
HXDLIN(  34)											int this91 = ((old5 >> 24) & 255);
HXDLIN(  34)											if ((this91 == 0)) {
HXLINE(  34)												a110 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float r15;
HXDLIN(  34)											int this92 = ((old5 >> 16) & 255);
HXDLIN(  34)											if ((this92 == 0)) {
HXLINE(  34)												r15 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float g15;
HXDLIN(  34)											int this93 = ((old5 >> 8) & 255);
HXDLIN(  34)											if ((this93 == 0)) {
HXLINE(  34)												g15 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float b16;
HXDLIN(  34)											int this94 = (old5 & 255);
HXDLIN(  34)											if ((this94 == 0)) {
HXLINE(  34)												b16 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												b16 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float a26;
HXDLIN(  34)											int this95 = ((rhs5 >> 24) & 255);
HXDLIN(  34)											if ((this95 == 0)) {
HXLINE(  34)												a26 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												a26 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float r25;
HXDLIN(  34)											int this96 = ((rhs5 >> 16) & 255);
HXDLIN(  34)											if ((this96 == 0)) {
HXLINE(  34)												r25 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float g25;
HXDLIN(  34)											int this97 = ((rhs5 >> 8) & 255);
HXDLIN(  34)											if ((this97 == 0)) {
HXLINE(  34)												g25 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float b26;
HXDLIN(  34)											int this98 = (rhs5 & 255);
HXDLIN(  34)											if ((this98 == 0)) {
HXLINE(  34)												b26 = ((Float)0.);
            											}
            											else {
HXLINE(  34)												b26 = (( (Float)(this98) ) / ( (Float)(255) ));
            											}
HXDLIN(  34)											Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  34)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a36) + (r25 * a26))));
HXDLIN(  34)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a36) + (g25 * a26))));
HXDLIN(  34)											int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a36) + (b26 * a26))));
HXDLIN(  34)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  34)											int blended5 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b17);
HXDLIN(  34)											{
HXLINE(  34)												int _hx_tmp93;
HXDLIN(  34)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  34)													_hx_tmp93 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXLINE(  34)													_hx_tmp93 = blended5;
            												}
HXDLIN(  34)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp93);
            											}
            										}
            										else {
HXLINE(  34)											int value5;
HXDLIN(  34)											if (pixelImage->isLittle) {
HXLINE(  34)												value5 = ((((a19 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  34)												value5 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            											}
HXDLIN(  34)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,value5);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  34)		 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  34)		 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  34)		Float v_ty;
HXDLIN(  34)		Float v_tx;
HXDLIN(  34)		Float v_t0;
HXDLIN(  34)		Float v_sy;
HXDLIN(  34)		Float v_sx;
HXDLIN(  34)		Float v_s0;
HXDLIN(  34)		Float v_A;
HXDLIN(  34)		Float ax7 = ax4;
HXDLIN(  34)		Float ay7 = ay4;
HXDLIN(  34)		 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  34)		Float bx3 = bx2;
HXDLIN(  34)		Float by3 = by2;
HXDLIN(  34)		Float cx3 = cx2;
HXDLIN(  34)		Float cy3 = cy2;
HXDLIN(  34)		bool adjustWinding2 = (((((ax7 * by3) - (bx3 * ay7)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay7) - (ax7 * cy3))) > 0);
HXDLIN(  34)		if (!(adjustWinding2)) {
HXLINE(  34)			Float bx_6 = bx3;
HXDLIN(  34)			Float by_6 = by3;
HXLINE(  24)			bx3 = cx3;
HXLINE(  25)			by3 = cy3;
HXLINE(  26)			cx3 = bx_6;
HXLINE(  27)			cy3 = by_6;
            		}
HXLINE(  34)		Float v_ax = ax7;
HXDLIN(  34)		Float v_ay = ay7;
HXDLIN(  34)		Float v_bx = bx3;
HXDLIN(  34)		Float v_by = by3;
HXDLIN(  34)		Float v_cx = cx3;
HXDLIN(  34)		Float v_cy = cy3;
HXDLIN(  34)		bool v_preCalculated = true;
HXDLIN(  34)		{
HXLINE(  34)			v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  34)			v_sx = (v_cy - v_ay);
HXDLIN(  34)			v_sy = (v_ax - v_cx);
HXDLIN(  34)			v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  34)			v_tx = (v_ay - v_by);
HXDLIN(  34)			v_ty = (v_bx - v_ax);
HXDLIN(  34)			v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  34)			Float a27 = v_ax;
HXDLIN(  34)			Float b18 = v_bx;
HXDLIN(  34)			Float c4 = v_cx;
HXDLIN(  34)			if ((a27 > b18)) {
HXLINE(  34)				if ((a27 > c4)) {
HXLINE(  34)					int min8;
HXDLIN(  34)					if ((b18 > c4)) {
HXLINE(  34)						min8 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE(  34)						min8 = ::Math_obj::floor(b18);
            					}
HXDLIN(  34)					int ii_min16 = min8;
HXDLIN(  34)					int ii_max16 = ::Math_obj::ceil(a27);
HXDLIN(  34)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE(  34)					int ii_min17 = ::Math_obj::floor(b18);
HXDLIN(  34)					int ii_max17 = ::Math_obj::ceil(c4);
HXDLIN(  34)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE(  34)				if ((b18 > c4)) {
HXLINE(  34)					int min9;
HXDLIN(  34)					if ((a27 > c4)) {
HXLINE(  34)						min9 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE(  34)						min9 = ::Math_obj::ceil(a27);
            					}
HXDLIN(  34)					int ii_min18 = min9;
HXDLIN(  34)					int ii_max18 = ::Math_obj::ceil(b18);
HXDLIN(  34)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE(  34)					int ii_min19 = ::Math_obj::floor(a27);
HXDLIN(  34)					int ii_max19 = ::Math_obj::ceil(c4);
HXDLIN(  34)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN(  34)			Float a28 = v_ay;
HXDLIN(  34)			Float b19 = v_by;
HXDLIN(  34)			Float c5 = v_cy;
HXDLIN(  34)			if ((a28 > b19)) {
HXLINE(  34)				if ((a28 > c5)) {
HXLINE(  34)					int min10;
HXDLIN(  34)					if ((b19 > c5)) {
HXLINE(  34)						min10 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE(  34)						min10 = ::Math_obj::floor(b19);
            					}
HXDLIN(  34)					int ii_min20 = min10;
HXDLIN(  34)					int ii_max20 = ::Math_obj::ceil(a28);
HXDLIN(  34)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE(  34)					int ii_min21 = ::Math_obj::floor(b19);
HXDLIN(  34)					int ii_max21 = ::Math_obj::ceil(c5);
HXDLIN(  34)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE(  34)				if ((b19 > c5)) {
HXLINE(  34)					int min11;
HXDLIN(  34)					if ((a28 > c5)) {
HXLINE(  34)						min11 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE(  34)						min11 = ::Math_obj::ceil(a28);
            					}
HXDLIN(  34)					int ii_min22 = min11;
HXDLIN(  34)					int ii_max22 = ::Math_obj::ceil(b19);
HXDLIN(  34)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE(  34)					int ii_min23 = ::Math_obj::floor(a28);
HXDLIN(  34)					int ii_max23 = ::Math_obj::ceil(c5);
HXDLIN(  34)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
            		}
HXDLIN(  34)		return  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,quadPoints_ax,quadPoints_ay,quadPoints_bx,quadPoints_by,quadPoints_cx,quadPoints_cy,quadPoints_dx,quadPoints_dy,hasHit);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(TriPixelSmoothGrad_Fields__obj,lineGradPentBary,return )

 ::pi_xy::algo::HitQuad TriPixelSmoothGrad_Fields__obj::quadGradPentBary( ::pi_xy::ImageStruct pixelImage, ::pi_xy::algo::QuadPoints_ q,int colorA,int colorB,int colorC,int colorD,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_c88345def33277a9_40_quadGradPentBary)
HXLINE(  43)		{
HXLINE(  43)			Float ax = q->ax;
HXDLIN(  43)			Float ay = q->ay;
HXDLIN(  43)			Float bx = q->bx;
HXDLIN(  43)			Float by = q->by;
HXDLIN(  43)			Float cx = q->dx;
HXDLIN(  43)			Float cy = q->dy;
HXDLIN(  43)			bool softAB = true;
HXDLIN(  43)			bool softBC = false;
HXDLIN(  43)			bool softCA = true;
HXDLIN(  43)			bool adjustWinding = (((((ax * by) - (bx * ay)) + ((bx * cy) - (cx * by))) + ((cx * ay) - (ax * cy))) > 0);
HXDLIN(  43)			if (!(adjustWinding)) {
HXLINE(  43)				Float bx_ = bx;
HXDLIN(  43)				Float by_ = by;
HXLINE(  62)				bx = cx;
HXLINE(  63)				by = cy;
HXLINE(  64)				cx = bx_;
HXLINE(  65)				cy = by_;
            			}
HXLINE(  43)			{
HXLINE(  43)				int aA = ((colorB >> 24) & 255);
HXDLIN(  43)				int rA = ((colorB >> 16) & 255);
HXDLIN(  43)				int gA = ((colorB >> 8) & 255);
HXDLIN(  43)				int bA = (colorB & 255);
HXDLIN(  43)				int aB = ((colorA >> 24) & 255);
HXDLIN(  43)				int rB = ((colorA >> 16) & 255);
HXDLIN(  43)				int gB = ((colorA >> 8) & 255);
HXDLIN(  43)				int bB = (colorA & 255);
HXDLIN(  43)				int aC = ((colorD >> 24) & 255);
HXDLIN(  43)				int rC = ((colorD >> 16) & 255);
HXDLIN(  43)				int gC = ((colorD >> 8) & 255);
HXDLIN(  43)				int bC = (colorD & 255);
HXDLIN(  43)				int a = 0;
HXDLIN(  43)				int r = 0;
HXDLIN(  43)				int g = 0;
HXDLIN(  43)				int b = 0;
HXDLIN(  43)				 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  43)				 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN(  43)				 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN(  43)				Float barycentric_dot22;
HXDLIN(  43)				Float barycentric_dot12;
HXDLIN(  43)				Float barycentric_dot11;
HXDLIN(  43)				Float barycentric_denom1;
HXDLIN(  43)				Float barycentric_bcy;
HXDLIN(  43)				Float barycentric_bcx;
HXDLIN(  43)				Float barycentric_acy;
HXDLIN(  43)				Float barycentric_acx;
HXDLIN(  43)				Float barycentric_ax = hitTriScalar->ax;
HXDLIN(  43)				Float barycentric_ay = hitTriScalar->ay;
HXDLIN(  43)				Float barycentric_bx = hitTriScalar->bx;
HXDLIN(  43)				Float barycentric_by = hitTriScalar->by;
HXDLIN(  43)				Float barycentric_cx = hitTriScalar->cx;
HXDLIN(  43)				Float barycentric_cy = hitTriScalar->cy;
HXDLIN(  43)				bool barycentric_preCalculated = true;
HXDLIN(  43)				{
HXLINE(  43)					barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN(  43)					barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN(  43)					barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN(  43)					barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN(  43)					Float ax1 = barycentric_bcx;
HXDLIN(  43)					Float ay1 = barycentric_bcy;
HXDLIN(  43)					barycentric_dot11 = ((ax1 * ax1) + (ay1 * ay1));
HXDLIN(  43)					barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN(  43)					Float ax2 = barycentric_acx;
HXDLIN(  43)					Float ay2 = barycentric_acy;
HXDLIN(  43)					barycentric_dot22 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  43)					barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN(  43)					Float a1 = barycentric_ax;
HXDLIN(  43)					Float b1 = barycentric_bx;
HXDLIN(  43)					Float c = barycentric_cx;
HXDLIN(  43)					if ((a1 > b1)) {
HXLINE(  43)						if ((a1 > c)) {
HXLINE(  43)							int min;
HXDLIN(  43)							if ((b1 > c)) {
HXLINE(  43)								min = ::Math_obj::floor(c);
            							}
            							else {
HXLINE(  43)								min = ::Math_obj::floor(b1);
            							}
HXDLIN(  43)							int ii_min = min;
HXDLIN(  43)							int ii_max = ::Math_obj::ceil(a1);
HXDLIN(  43)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            						}
            						else {
HXLINE(  43)							int ii_min1 = ::Math_obj::floor(b1);
HXDLIN(  43)							int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  43)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            						}
            					}
            					else {
HXLINE(  43)						if ((b1 > c)) {
HXLINE(  43)							int min1;
HXDLIN(  43)							if ((a1 > c)) {
HXLINE(  43)								min1 = ::Math_obj::floor(c);
            							}
            							else {
HXLINE(  43)								min1 = ::Math_obj::ceil(a1);
            							}
HXDLIN(  43)							int ii_min2 = min1;
HXDLIN(  43)							int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN(  43)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            						}
            						else {
HXLINE(  43)							int ii_min3 = ::Math_obj::floor(a1);
HXDLIN(  43)							int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  43)							barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            						}
            					}
HXDLIN(  43)					Float a2 = barycentric_ay;
HXDLIN(  43)					Float b2 = barycentric_by;
HXDLIN(  43)					Float c1 = barycentric_cy;
HXDLIN(  43)					if ((a2 > b2)) {
HXLINE(  43)						if ((a2 > c1)) {
HXLINE(  43)							int min2;
HXDLIN(  43)							if ((b2 > c1)) {
HXLINE(  43)								min2 = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE(  43)								min2 = ::Math_obj::floor(b2);
            							}
HXDLIN(  43)							int ii_min4 = min2;
HXDLIN(  43)							int ii_max4 = ::Math_obj::ceil(a2);
HXDLIN(  43)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            						}
            						else {
HXLINE(  43)							int ii_min5 = ::Math_obj::floor(b2);
HXDLIN(  43)							int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  43)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            						}
            					}
            					else {
HXLINE(  43)						if ((b2 > c1)) {
HXLINE(  43)							int min3;
HXDLIN(  43)							if ((a2 > c1)) {
HXLINE(  43)								min3 = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE(  43)								min3 = ::Math_obj::ceil(a2);
            							}
HXDLIN(  43)							int ii_min6 = min3;
HXDLIN(  43)							int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN(  43)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            						}
            						else {
HXLINE(  43)							int ii_min7 = ::Math_obj::floor(a2);
HXDLIN(  43)							int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  43)							barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            						}
            					}
            				}
HXDLIN(  43)				Float scaleA;
HXDLIN(  43)				bool scaleA1;
HXDLIN(  43)				if (!(softAB)) {
HXLINE(  43)					scaleA1 = softCA;
            				}
            				else {
HXLINE(  43)					scaleA1 = true;
            				}
HXDLIN(  43)				if (scaleA1) {
HXLINE(  43)					scaleA = ((Float)1.5);
            				}
            				else {
HXLINE(  43)					scaleA = ((Float)1.);
            				}
HXDLIN(  43)				Float scaleB;
HXDLIN(  43)				bool scaleB1;
HXDLIN(  43)				if (!(softAB)) {
HXLINE(  43)					scaleB1 = softBC;
            				}
            				else {
HXLINE(  43)					scaleB1 = true;
            				}
HXDLIN(  43)				if (scaleB1) {
HXLINE(  43)					scaleB = ((Float)1.5);
            				}
            				else {
HXLINE(  43)					scaleB = ((Float)1.);
            				}
HXDLIN(  43)				Float scaleC;
HXDLIN(  43)				bool scaleC1;
HXDLIN(  43)				if (!(softBC)) {
HXLINE(  43)					scaleC1 = softCA;
            				}
            				else {
HXLINE(  43)					scaleC1 = true;
            				}
HXDLIN(  43)				if (scaleC1) {
HXLINE(  43)					scaleC = ((Float)1.5);
            				}
            				else {
HXLINE(  43)					scaleC = ((Float)1.);
            				}
HXDLIN(  43)				Float x0 = ((Float)0.);
HXDLIN(  43)				Float y0 = ((Float)0.);
HXDLIN(  43)				bool isScaledA = true;
HXDLIN(  43)				bool isScaledB = true;
HXDLIN(  43)				bool isScaledC = true;
HXDLIN(  43)				if (isScaledA) {
HXLINE(  43)					if (isScaledB) {
HXLINE(  43)						if (isScaledC) {
HXLINE(  82)							x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)							y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x0 = hitTriScalar->cx;
HXLINE(  80)							y0 = hitTriScalar->cy;
            						}
            					}
            					else {
HXLINE(  43)						if (isScaledC) {
HXLINE(  76)							x0 = hitTriScalar->bx;
HXLINE(  77)							y0 = hitTriScalar->by;
            						}
            						else {
HXLINE(  73)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            						}
            					}
            				}
            				else {
HXLINE(  43)					if (isScaledB) {
HXLINE(  43)						if (isScaledC) {
HXLINE(  70)							x0 = hitTriScalar->ax;
HXLINE(  71)							y0 = hitTriScalar->ay;
            						}
            						else {
HXLINE(  67)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            						}
            					}
            					else {
HXLINE(  43)						if (isScaledC) {
HXLINE(  64)							x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)							y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            						}
            						else {
HXLINE(  61)							x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)							y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  43)				Float ax_;
HXDLIN(  43)				if (isScaledA) {
HXLINE(  43)					Float point = hitTriScalar->ax;
HXDLIN(  43)					point = (point - x0);
HXDLIN(  43)					point = (point * ((Float)0.999));
HXDLIN(  43)					point = (point + x0);
HXDLIN(  43)					ax_ = point;
            				}
            				else {
HXLINE(  43)					ax_ = hitTriScalar->ax;
            				}
HXDLIN(  43)				Float ay_;
HXDLIN(  43)				if (isScaledA) {
HXLINE(  43)					Float point1 = hitTriScalar->ay;
HXDLIN(  43)					point1 = (point1 - y0);
HXDLIN(  43)					point1 = (point1 * ((Float)0.999));
HXDLIN(  43)					point1 = (point1 + y0);
HXDLIN(  43)					ay_ = point1;
            				}
            				else {
HXLINE(  43)					ay_ = hitTriScalar->ay;
            				}
HXDLIN(  43)				Float bx_1;
HXDLIN(  43)				if (isScaledB) {
HXLINE(  43)					Float point2 = hitTriScalar->bx;
HXDLIN(  43)					point2 = (point2 - x0);
HXDLIN(  43)					point2 = (point2 * ((Float)0.999));
HXDLIN(  43)					point2 = (point2 + x0);
HXDLIN(  43)					bx_1 = point2;
            				}
            				else {
HXLINE(  43)					bx_1 = hitTriScalar->bx;
            				}
HXDLIN(  43)				Float by_1;
HXDLIN(  43)				if (isScaledB) {
HXLINE(  43)					Float point3 = hitTriScalar->by;
HXDLIN(  43)					point3 = (point3 - y0);
HXDLIN(  43)					point3 = (point3 * ((Float)0.999));
HXDLIN(  43)					point3 = (point3 + y0);
HXDLIN(  43)					by_1 = point3;
            				}
            				else {
HXLINE(  43)					by_1 = hitTriScalar->by;
            				}
HXDLIN(  43)				Float cx_;
HXDLIN(  43)				if (isScaledC) {
HXLINE(  43)					Float point4 = hitTriScalar->cx;
HXDLIN(  43)					point4 = (point4 - x0);
HXDLIN(  43)					point4 = (point4 * ((Float)0.999));
HXDLIN(  43)					point4 = (point4 + x0);
HXDLIN(  43)					cx_ = point4;
            				}
            				else {
HXLINE(  43)					cx_ = hitTriScalar->cx;
            				}
HXDLIN(  43)				Float cy_;
HXDLIN(  43)				if (isScaledC) {
HXLINE(  43)					Float point5 = hitTriScalar->cy;
HXDLIN(  43)					point5 = (point5 - y0);
HXDLIN(  43)					point5 = (point5 * ((Float)0.999));
HXDLIN(  43)					point5 = (point5 + y0);
HXDLIN(  43)					cy_ = point5;
            				}
            				else {
HXLINE(  43)					cy_ = hitTriScalar->cy;
            				}
HXDLIN(  43)				 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_1,by_1,cx_,cy_,true);
HXDLIN(  43)				Float x01 = ((Float)0.);
HXDLIN(  43)				Float y01 = ((Float)0.);
HXDLIN(  43)				bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN(  43)				bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN(  43)				bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN(  43)				if (isScaledA1) {
HXLINE(  43)					if (isScaledB1) {
HXLINE(  43)						if (isScaledC1) {
HXLINE(  82)							x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)							y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x01 = scaled->cx;
HXLINE(  80)							y01 = scaled->cy;
            						}
            					}
            					else {
HXLINE(  43)						if (isScaledC1) {
HXLINE(  76)							x01 = scaled->bx;
HXLINE(  77)							y01 = scaled->by;
            						}
            						else {
HXLINE(  73)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            						}
            					}
            				}
            				else {
HXLINE(  43)					if (isScaledB1) {
HXLINE(  43)						if (isScaledC1) {
HXLINE(  70)							x01 = scaled->ax;
HXLINE(  71)							y01 = scaled->ay;
            						}
            						else {
HXLINE(  67)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            						}
            					}
            					else {
HXLINE(  43)						if (isScaledC1) {
HXLINE(  64)							x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)							y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            						}
            						else {
HXLINE(  61)							x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)							y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  43)				Float ax_1;
HXDLIN(  43)				if (isScaledA1) {
HXLINE(  43)					Float point6 = scaled->ax;
HXDLIN(  43)					point6 = (point6 - x01);
HXDLIN(  43)					point6 = (point6 * scaleA);
HXDLIN(  43)					point6 = (point6 + x01);
HXDLIN(  43)					ax_1 = point6;
            				}
            				else {
HXLINE(  43)					ax_1 = scaled->ax;
            				}
HXDLIN(  43)				Float ay_1;
HXDLIN(  43)				if (isScaledA1) {
HXLINE(  43)					Float point7 = scaled->ay;
HXDLIN(  43)					point7 = (point7 - y01);
HXDLIN(  43)					point7 = (point7 * scaleA);
HXDLIN(  43)					point7 = (point7 + y01);
HXDLIN(  43)					ay_1 = point7;
            				}
            				else {
HXLINE(  43)					ay_1 = scaled->ay;
            				}
HXDLIN(  43)				Float bx_2;
HXDLIN(  43)				if (isScaledB1) {
HXLINE(  43)					Float point8 = scaled->bx;
HXDLIN(  43)					point8 = (point8 - x01);
HXDLIN(  43)					point8 = (point8 * scaleB);
HXDLIN(  43)					point8 = (point8 + x01);
HXDLIN(  43)					bx_2 = point8;
            				}
            				else {
HXLINE(  43)					bx_2 = scaled->bx;
            				}
HXDLIN(  43)				Float by_2;
HXDLIN(  43)				if (isScaledB1) {
HXLINE(  43)					Float point9 = scaled->by;
HXDLIN(  43)					point9 = (point9 - y01);
HXDLIN(  43)					point9 = (point9 * scaleB);
HXDLIN(  43)					point9 = (point9 + y01);
HXDLIN(  43)					by_2 = point9;
            				}
            				else {
HXLINE(  43)					by_2 = scaled->by;
            				}
HXDLIN(  43)				Float cx_1;
HXDLIN(  43)				if (isScaledC1) {
HXLINE(  43)					Float point10 = scaled->cx;
HXDLIN(  43)					point10 = (point10 - x01);
HXDLIN(  43)					point10 = (point10 * scaleC);
HXDLIN(  43)					point10 = (point10 + x01);
HXDLIN(  43)					cx_1 = point10;
            				}
            				else {
HXLINE(  43)					cx_1 = scaled->cx;
            				}
HXDLIN(  43)				Float cy_1;
HXDLIN(  43)				if (isScaledC1) {
HXLINE(  43)					Float point11 = scaled->cy;
HXDLIN(  43)					point11 = (point11 - y01);
HXDLIN(  43)					point11 = (point11 * scaleC);
HXDLIN(  43)					point11 = (point11 + y01);
HXDLIN(  43)					cy_1 = point11;
            				}
            				else {
HXLINE(  43)					cy_1 = scaled->cy;
            				}
HXDLIN(  43)				scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_2,by_2,cx_1,cy_1,true);
HXDLIN(  43)				{
HXLINE(  43)					 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN(  43)					int _g_min = this1->start;
HXDLIN(  43)					int _g_max = this1->max;
HXDLIN(  43)					while((_g_min < _g_max)){
HXLINE(  43)						_g_min = (_g_min + 1);
HXDLIN(  43)						int px = (_g_min - 1);
HXDLIN(  43)						{
HXLINE(  43)							 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN(  43)							int _g_min1 = this2->start;
HXDLIN(  43)							int _g_max1 = this2->max;
HXDLIN(  43)							while((_g_min1 < _g_max1)){
HXLINE(  43)								_g_min1 = (_g_min1 + 1);
HXDLIN(  43)								int py = (_g_min1 - 1);
HXDLIN(  43)								Float pcx = (( (Float)(px) ) - barycentric_cx);
HXDLIN(  43)								Float pcy = (( (Float)(py) ) - barycentric_cy);
HXDLIN(  43)								Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN(  43)								Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN(  43)								Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN(  43)								Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN(  43)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  43)								Float ratios_ratioA = ratioA;
HXDLIN(  43)								Float ratios_ratioB = ratioB;
HXDLIN(  43)								Float ratios_ratioC = ratioC;
HXDLIN(  43)								Float v;
HXDLIN(  43)								if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  43)									v = ratios_ratioA;
            								}
            								else {
HXLINE(  43)									v = ratios_ratioB;
            								}
HXDLIN(  43)								Float min_;
HXDLIN(  43)								if ((v < ratios_ratioC)) {
HXLINE(  43)									min_ = v;
            								}
            								else {
HXLINE(  43)									min_ = ratios_ratioC;
            								}
HXDLIN(  43)								bool isSoft;
HXDLIN(  43)								if (softAB) {
HXLINE(  43)									if (softBC) {
HXLINE(  43)										if (softCA) {
HXLINE(  43)											isSoft = true;
            										}
            										else {
HXLINE(  43)											if ((min_ != ratios_ratioB)) {
HXLINE(  43)												Float v1;
HXDLIN(  43)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  43)													v1 = ratios_ratioA;
            												}
            												else {
HXLINE(  43)													v1 = ratios_ratioB;
            												}
HXDLIN(  43)												Float isSoft1;
HXDLIN(  43)												if ((v1 < ratios_ratioC)) {
HXLINE(  43)													isSoft1 = v1;
            												}
            												else {
HXLINE(  43)													isSoft1 = ratios_ratioC;
            												}
HXDLIN(  43)												isSoft = (isSoft1 == ratios_ratioC);
            											}
            											else {
HXLINE(  43)												isSoft = true;
            											}
            										}
            									}
            									else {
HXLINE(  43)										if (softCA) {
HXLINE(  43)											if ((min_ != ratios_ratioA)) {
HXLINE(  43)												Float v2;
HXDLIN(  43)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  43)													v2 = ratios_ratioA;
            												}
            												else {
HXLINE(  43)													v2 = ratios_ratioB;
            												}
HXDLIN(  43)												Float isSoft2;
HXDLIN(  43)												if ((v2 < ratios_ratioC)) {
HXLINE(  43)													isSoft2 = v2;
            												}
            												else {
HXLINE(  43)													isSoft2 = ratios_ratioC;
            												}
HXDLIN(  43)												isSoft = (isSoft2 == ratios_ratioC);
            											}
            											else {
HXLINE(  43)												isSoft = true;
            											}
            										}
            										else {
HXLINE(  43)											isSoft = (min_ == ratios_ratioC);
            										}
            									}
            								}
            								else {
HXLINE(  43)									if (softBC) {
HXLINE(  43)										if (softCA) {
HXLINE(  43)											if ((min_ != ratios_ratioA)) {
HXLINE(  43)												Float v3;
HXDLIN(  43)												if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  43)													v3 = ratios_ratioA;
            												}
            												else {
HXLINE(  43)													v3 = ratios_ratioB;
            												}
HXDLIN(  43)												Float isSoft3;
HXDLIN(  43)												if ((v3 < ratios_ratioC)) {
HXLINE(  43)													isSoft3 = v3;
            												}
            												else {
HXLINE(  43)													isSoft3 = ratios_ratioC;
            												}
HXDLIN(  43)												isSoft = (isSoft3 == ratios_ratioB);
            											}
            											else {
HXLINE(  43)												isSoft = true;
            											}
            										}
            										else {
HXLINE(  43)											isSoft = (min_ == ratios_ratioB);
            										}
            									}
            									else {
HXLINE(  43)										if (softCA) {
HXLINE(  43)											isSoft = (min_ == ratios_ratioA);
            										}
            										else {
HXLINE(  43)											isSoft = false;
            										}
            									}
            								}
HXDLIN(  43)								Float x02 = ((Float)-0.0739127852035666);
HXDLIN(  43)								Float y02 = ((Float)0.703233176253404202);
HXDLIN(  43)								Float x1 = ((Float)-0.353553390593273564);
HXDLIN(  43)								Float y1 = ((Float)0.61237243569579447);
HXDLIN(  43)								Float x2 = ((Float)-0.572061402817684139);
HXDLIN(  43)								Float y2 = ((Float)0.415626937777453465);
HXDLIN(  43)								Float x3 = ((Float)-0.691654801480225401);
HXDLIN(  43)								Float y3 = ((Float)0.147015766465198733);
HXDLIN(  43)								Float x4 = ((Float)-0.691654801480225512);
HXDLIN(  43)								Float y4 = ((Float)-0.147015766465198261);
HXDLIN(  43)								Float averageX = ((Float)0.);
HXDLIN(  43)								Float averageY = ((Float)0.);
HXDLIN(  43)								int hits = 0;
HXDLIN(  43)								Float fractionTotal = ((Float)0.);
HXDLIN(  43)								Float x = (px + x02);
HXDLIN(  43)								Float y = (py + y02);
HXDLIN(  43)								bool _hx_tmp;
HXDLIN(  43)								bool _hx_tmp1;
HXDLIN(  43)								 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN(  43)								bool _hx_tmp2;
HXDLIN(  43)								if ((x > (this3->start - 1))) {
HXLINE(  43)									_hx_tmp2 = (x < (this3->max + 1));
            								}
            								else {
HXLINE(  43)									_hx_tmp2 = false;
            								}
HXDLIN(  43)								if (_hx_tmp2) {
HXLINE(  43)									 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN(  43)									if ((y > (this4->start - 1))) {
HXLINE(  43)										_hx_tmp1 = (y < (this4->max + 1));
            									}
            									else {
HXLINE(  43)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp1 = false;
            								}
HXDLIN(  43)								if (_hx_tmp1) {
HXLINE(  43)									Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN(  43)									Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN(  43)									bool _hx_tmp3;
HXDLIN(  43)									if (!((s <= 0))) {
HXLINE(  43)										_hx_tmp3 = (t <= 0);
            									}
            									else {
HXLINE(  43)										_hx_tmp3 = true;
            									}
HXDLIN(  43)									if (_hx_tmp3) {
HXLINE(  43)										_hx_tmp = false;
            									}
            									else {
HXLINE(  43)										if (((s + t) < hitTriScalar->A)) {
HXLINE(  43)											_hx_tmp = true;
            										}
            										else {
HXLINE(  43)											_hx_tmp = false;
            										}
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp = false;
            								}
HXDLIN(  43)								if (_hx_tmp) {
HXLINE(  43)									hits = (hits + 1);
HXDLIN(  43)									averageX = (averageX + x02);
HXDLIN(  43)									averageY = (averageY + y02);
HXDLIN(  43)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  43)								Float x5 = (px + x1);
HXDLIN(  43)								Float y5 = (py + y1);
HXDLIN(  43)								bool _hx_tmp4;
HXDLIN(  43)								bool _hx_tmp5;
HXDLIN(  43)								 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN(  43)								bool _hx_tmp6;
HXDLIN(  43)								if ((x5 > (this5->start - 1))) {
HXLINE(  43)									_hx_tmp6 = (x5 < (this5->max + 1));
            								}
            								else {
HXLINE(  43)									_hx_tmp6 = false;
            								}
HXDLIN(  43)								if (_hx_tmp6) {
HXLINE(  43)									 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN(  43)									if ((y5 > (this6->start - 1))) {
HXLINE(  43)										_hx_tmp5 = (y5 < (this6->max + 1));
            									}
            									else {
HXLINE(  43)										_hx_tmp5 = false;
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp5 = false;
            								}
HXDLIN(  43)								if (_hx_tmp5) {
HXLINE(  43)									Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN(  43)									Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN(  43)									bool _hx_tmp7;
HXDLIN(  43)									if (!((s1 <= 0))) {
HXLINE(  43)										_hx_tmp7 = (t1 <= 0);
            									}
            									else {
HXLINE(  43)										_hx_tmp7 = true;
            									}
HXDLIN(  43)									if (_hx_tmp7) {
HXLINE(  43)										_hx_tmp4 = false;
            									}
            									else {
HXLINE(  43)										if (((s1 + t1) < hitTriScalar->A)) {
HXLINE(  43)											_hx_tmp4 = true;
            										}
            										else {
HXLINE(  43)											_hx_tmp4 = false;
            										}
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp4 = false;
            								}
HXDLIN(  43)								if (_hx_tmp4) {
HXLINE(  43)									hits = (hits + 1);
HXDLIN(  43)									averageX = (averageX + x1);
HXDLIN(  43)									averageY = (averageY + y1);
HXDLIN(  43)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  43)								Float x6 = (px + x2);
HXDLIN(  43)								Float y6 = (py + y2);
HXDLIN(  43)								bool _hx_tmp8;
HXDLIN(  43)								bool _hx_tmp9;
HXDLIN(  43)								 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN(  43)								bool _hx_tmp10;
HXDLIN(  43)								if ((x6 > (this7->start - 1))) {
HXLINE(  43)									_hx_tmp10 = (x6 < (this7->max + 1));
            								}
            								else {
HXLINE(  43)									_hx_tmp10 = false;
            								}
HXDLIN(  43)								if (_hx_tmp10) {
HXLINE(  43)									 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN(  43)									if ((y6 > (this8->start - 1))) {
HXLINE(  43)										_hx_tmp9 = (y6 < (this8->max + 1));
            									}
            									else {
HXLINE(  43)										_hx_tmp9 = false;
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp9 = false;
            								}
HXDLIN(  43)								if (_hx_tmp9) {
HXLINE(  43)									Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN(  43)									Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN(  43)									bool _hx_tmp11;
HXDLIN(  43)									if (!((s2 <= 0))) {
HXLINE(  43)										_hx_tmp11 = (t2 <= 0);
            									}
            									else {
HXLINE(  43)										_hx_tmp11 = true;
            									}
HXDLIN(  43)									if (_hx_tmp11) {
HXLINE(  43)										_hx_tmp8 = false;
            									}
            									else {
HXLINE(  43)										if (((s2 + t2) < hitTriScalar->A)) {
HXLINE(  43)											_hx_tmp8 = true;
            										}
            										else {
HXLINE(  43)											_hx_tmp8 = false;
            										}
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp8 = false;
            								}
HXDLIN(  43)								if (_hx_tmp8) {
HXLINE(  43)									hits = (hits + 1);
HXDLIN(  43)									averageX = (averageX + x2);
HXDLIN(  43)									averageY = (averageY + y2);
HXDLIN(  43)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  43)								Float x7 = (px + x3);
HXDLIN(  43)								Float y7 = (py + y3);
HXDLIN(  43)								bool _hx_tmp12;
HXDLIN(  43)								bool _hx_tmp13;
HXDLIN(  43)								 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN(  43)								bool _hx_tmp14;
HXDLIN(  43)								if ((x7 > (this9->start - 1))) {
HXLINE(  43)									_hx_tmp14 = (x7 < (this9->max + 1));
            								}
            								else {
HXLINE(  43)									_hx_tmp14 = false;
            								}
HXDLIN(  43)								if (_hx_tmp14) {
HXLINE(  43)									 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN(  43)									if ((y7 > (this10->start - 1))) {
HXLINE(  43)										_hx_tmp13 = (y7 < (this10->max + 1));
            									}
            									else {
HXLINE(  43)										_hx_tmp13 = false;
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp13 = false;
            								}
HXDLIN(  43)								if (_hx_tmp13) {
HXLINE(  43)									Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN(  43)									Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN(  43)									bool _hx_tmp15;
HXDLIN(  43)									if (!((s3 <= 0))) {
HXLINE(  43)										_hx_tmp15 = (t3 <= 0);
            									}
            									else {
HXLINE(  43)										_hx_tmp15 = true;
            									}
HXDLIN(  43)									if (_hx_tmp15) {
HXLINE(  43)										_hx_tmp12 = false;
            									}
            									else {
HXLINE(  43)										if (((s3 + t3) < hitTriScalar->A)) {
HXLINE(  43)											_hx_tmp12 = true;
            										}
            										else {
HXLINE(  43)											_hx_tmp12 = false;
            										}
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp12 = false;
            								}
HXDLIN(  43)								if (_hx_tmp12) {
HXLINE(  43)									hits = (hits + 1);
HXDLIN(  43)									averageX = (averageX + x3);
HXDLIN(  43)									averageY = (averageY + y3);
HXDLIN(  43)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  43)								Float x8 = (px + x4);
HXDLIN(  43)								Float y8 = (py + y4);
HXDLIN(  43)								bool _hx_tmp16;
HXDLIN(  43)								bool _hx_tmp17;
HXDLIN(  43)								 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN(  43)								bool _hx_tmp18;
HXDLIN(  43)								if ((x8 > (this11->start - 1))) {
HXLINE(  43)									_hx_tmp18 = (x8 < (this11->max + 1));
            								}
            								else {
HXLINE(  43)									_hx_tmp18 = false;
            								}
HXDLIN(  43)								if (_hx_tmp18) {
HXLINE(  43)									 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN(  43)									if ((y8 > (this12->start - 1))) {
HXLINE(  43)										_hx_tmp17 = (y8 < (this12->max + 1));
            									}
            									else {
HXLINE(  43)										_hx_tmp17 = false;
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp17 = false;
            								}
HXDLIN(  43)								if (_hx_tmp17) {
HXLINE(  43)									Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN(  43)									Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN(  43)									bool _hx_tmp19;
HXDLIN(  43)									if (!((s4 <= 0))) {
HXLINE(  43)										_hx_tmp19 = (t4 <= 0);
            									}
            									else {
HXLINE(  43)										_hx_tmp19 = true;
            									}
HXDLIN(  43)									if (_hx_tmp19) {
HXLINE(  43)										_hx_tmp16 = false;
            									}
            									else {
HXLINE(  43)										if (((s4 + t4) < hitTriScalar->A)) {
HXLINE(  43)											_hx_tmp16 = true;
            										}
            										else {
HXLINE(  43)											_hx_tmp16 = false;
            										}
            									}
            								}
            								else {
HXLINE(  43)									_hx_tmp16 = false;
            								}
HXDLIN(  43)								if (_hx_tmp16) {
HXLINE(  43)									hits = (hits + 1);
HXDLIN(  43)									averageX = (averageX + x4);
HXDLIN(  43)									averageY = (averageY + y4);
HXDLIN(  43)									fractionTotal = (fractionTotal + ((Float)0.2));
            								}
HXDLIN(  43)								if ((hits != 0)) {
HXLINE( 244)									averageX = (px + (averageX / ( (Float)(hits) )));
HXLINE( 245)									averageY = (py + (averageY / ( (Float)(hits) )));
            								}
            								else {
HXLINE( 247)									averageX = ( (Float)(px) );
HXLINE( 248)									averageY = ( (Float)(py) );
            								}
HXLINE(  43)								Float fractionTotal1 = fractionTotal;
HXDLIN(  43)								Float sampleData_fractionTotal = fractionTotal1;
HXDLIN(  43)								Float sampleData_averageX = averageX;
HXDLIN(  43)								Float sampleData_averageY = averageY;
HXDLIN(  43)								bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXDLIN(  43)								Float aScale = sampleData_fractionTotal;
HXDLIN(  43)								if (!((aScale > ((Float)0.9)))) {
HXLINE(  43)									aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            								}
HXLINE( 142)								a = 0;
HXLINE( 143)								r = 0;
HXLINE( 144)								g = 0;
HXLINE( 145)								b = 0;
HXLINE(  43)								if (isSoft) {
HXLINE(  43)									if (!(sampleData_notHit)) {
HXLINE(  43)										Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN(  43)										Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN(  43)										Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN(  43)										Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN(  43)										Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN(  43)										Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN(  43)										Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  43)										Float ratiosAvg_ratioA = ratioA1;
HXDLIN(  43)										Float ratiosAvg_ratioB = ratioB1;
HXDLIN(  43)										Float ratiosAvg_ratioC = ratioC1;
HXDLIN(  43)										Float ratioA_ = ratiosAvg_ratioA;
HXDLIN(  43)										Float ratioB_ = ratiosAvg_ratioB;
HXDLIN(  43)										Float ratioC_ = ratiosAvg_ratioC;
HXDLIN(  43)										int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN(  43)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  43)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE( 152)										a = i;
HXLINE(  43)										int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN(  43)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  43)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE( 153)										r = i1;
HXLINE(  43)										int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN(  43)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  43)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE( 154)										g = i2;
HXLINE(  43)										int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN(  43)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  43)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE( 155)										b = i3;
HXLINE(  43)										{
HXLINE(  43)											int a3;
HXDLIN(  43)											if ((aScale > ((Float)0.9))) {
HXLINE(  43)												a3 = a;
            											}
            											else {
HXLINE(  43)												int i4 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  43)												if ((i4 > 255)) {
HXLINE(  24)													i4 = 255;
            												}
HXLINE(  43)												if ((i4 < 0)) {
HXLINE(  25)													i4 = 0;
            												}
HXLINE(  43)												a3 = i4;
            											}
HXDLIN(  43)											int location;
HXDLIN(  43)											if (pixelImage->useVirtualPos) {
HXLINE(  43)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  43)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            											}
HXDLIN(  43)											bool _hx_tmp20;
HXDLIN(  43)											if (pixelImage->transparent) {
HXLINE(  43)												_hx_tmp20 = (a3 < 254);
            											}
            											else {
HXLINE(  43)												_hx_tmp20 = false;
            											}
HXDLIN(  43)											if (_hx_tmp20) {
HXLINE(  43)												int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  43)												int old;
HXDLIN(  43)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)													old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            												}
            												else {
HXLINE(  43)													old = this13;
            												}
HXDLIN(  43)												int rhs = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  43)												Float a11;
HXDLIN(  43)												int this14 = ((old >> 24) & 255);
HXDLIN(  43)												if ((this14 == 0)) {
HXLINE(  43)													a11 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float r1;
HXDLIN(  43)												int this15 = ((old >> 16) & 255);
HXDLIN(  43)												if ((this15 == 0)) {
HXLINE(  43)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float g1;
HXDLIN(  43)												int this16 = ((old >> 8) & 255);
HXDLIN(  43)												if ((this16 == 0)) {
HXLINE(  43)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float b11;
HXDLIN(  43)												int this17 = (old & 255);
HXDLIN(  43)												if ((this17 == 0)) {
HXLINE(  43)													b11 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float a21;
HXDLIN(  43)												int this18 = ((rhs >> 24) & 255);
HXDLIN(  43)												if ((this18 == 0)) {
HXLINE(  43)													a21 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float r2;
HXDLIN(  43)												int this19 = ((rhs >> 16) & 255);
HXDLIN(  43)												if ((this19 == 0)) {
HXLINE(  43)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float g2;
HXDLIN(  43)												int this20 = ((rhs >> 8) & 255);
HXDLIN(  43)												if ((this20 == 0)) {
HXLINE(  43)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float b21;
HXDLIN(  43)												int this21 = (rhs & 255);
HXDLIN(  43)												if ((this21 == 0)) {
HXLINE(  43)													b21 = ((Float)0.);
            												}
            												else {
HXLINE(  43)													b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            												}
HXDLIN(  43)												Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  43)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN(  43)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN(  43)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  43)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  43)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  43)												{
HXLINE(  43)													int _hx_tmp21;
HXDLIN(  43)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)														_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  43)														_hx_tmp21 = blended;
            													}
HXDLIN(  43)													::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            												}
            											}
            											else {
HXLINE(  43)												int value;
HXDLIN(  43)												if (pixelImage->isLittle) {
HXLINE(  43)													value = ((((a3 << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  43)													value = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  43)												::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            											}
            										}
            									}
            								}
            								else {
HXLINE(  43)									Float ratioA2 = ratios_ratioA;
HXDLIN(  43)									Float ratioB2 = ratios_ratioB;
HXDLIN(  43)									Float ratioC2 = ratios_ratioC;
HXDLIN(  43)									Float hitTotal = sampleData_fractionTotal;
HXDLIN(  43)									if (!(sampleData_notHit)) {
HXLINE(  43)										Float x03 = ((Float)-0.0739127852035666);
HXDLIN(  43)										Float y03 = ((Float)0.703233176253404202);
HXDLIN(  43)										Float x11 = ((Float)-0.353553390593273564);
HXDLIN(  43)										Float y11 = ((Float)0.61237243569579447);
HXDLIN(  43)										Float x21 = ((Float)-0.572061402817684139);
HXDLIN(  43)										Float y21 = ((Float)0.415626937777453465);
HXDLIN(  43)										Float x31 = ((Float)-0.691654801480225401);
HXDLIN(  43)										Float y31 = ((Float)0.147015766465198733);
HXDLIN(  43)										Float x41 = ((Float)-0.691654801480225512);
HXDLIN(  43)										Float y41 = ((Float)-0.147015766465198261);
HXDLIN(  43)										Float averageX1 = ((Float)0.);
HXDLIN(  43)										Float averageY1 = ((Float)0.);
HXDLIN(  43)										int hits1 = 0;
HXDLIN(  43)										Float fractionTotal2 = ((Float)0.);
HXDLIN(  43)										Float x9 = (px + x03);
HXDLIN(  43)										Float y9 = (py + y03);
HXDLIN(  43)										bool _hx_tmp22;
HXDLIN(  43)										bool _hx_tmp23;
HXDLIN(  43)										 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN(  43)										bool _hx_tmp24;
HXDLIN(  43)										if ((x9 > (this22->start - 1))) {
HXLINE(  43)											_hx_tmp24 = (x9 < (this22->max + 1));
            										}
            										else {
HXLINE(  43)											_hx_tmp24 = false;
            										}
HXDLIN(  43)										if (_hx_tmp24) {
HXLINE(  43)											 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN(  43)											if ((y9 > (this23->start - 1))) {
HXLINE(  43)												_hx_tmp23 = (y9 < (this23->max + 1));
            											}
            											else {
HXLINE(  43)												_hx_tmp23 = false;
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp23 = false;
            										}
HXDLIN(  43)										if (_hx_tmp23) {
HXLINE(  43)											Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN(  43)											Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN(  43)											bool _hx_tmp25;
HXDLIN(  43)											if (!((s5 <= 0))) {
HXLINE(  43)												_hx_tmp25 = (t5 <= 0);
            											}
            											else {
HXLINE(  43)												_hx_tmp25 = true;
            											}
HXDLIN(  43)											if (_hx_tmp25) {
HXLINE(  43)												_hx_tmp22 = false;
            											}
            											else {
HXLINE(  43)												if (((s5 + t5) < scaled->A)) {
HXLINE(  43)													_hx_tmp22 = true;
            												}
            												else {
HXLINE(  43)													_hx_tmp22 = false;
            												}
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp22 = false;
            										}
HXDLIN(  43)										if (_hx_tmp22) {
HXLINE(  43)											hits1 = (hits1 + 1);
HXDLIN(  43)											averageX1 = (averageX1 + x03);
HXDLIN(  43)											averageY1 = (averageY1 + y03);
HXDLIN(  43)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  43)										Float x10 = (px + x11);
HXDLIN(  43)										Float y10 = (py + y11);
HXDLIN(  43)										bool _hx_tmp26;
HXDLIN(  43)										bool _hx_tmp27;
HXDLIN(  43)										 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN(  43)										bool _hx_tmp28;
HXDLIN(  43)										if ((x10 > (this24->start - 1))) {
HXLINE(  43)											_hx_tmp28 = (x10 < (this24->max + 1));
            										}
            										else {
HXLINE(  43)											_hx_tmp28 = false;
            										}
HXDLIN(  43)										if (_hx_tmp28) {
HXLINE(  43)											 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN(  43)											if ((y10 > (this25->start - 1))) {
HXLINE(  43)												_hx_tmp27 = (y10 < (this25->max + 1));
            											}
            											else {
HXLINE(  43)												_hx_tmp27 = false;
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp27 = false;
            										}
HXDLIN(  43)										if (_hx_tmp27) {
HXLINE(  43)											Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN(  43)											Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN(  43)											bool _hx_tmp29;
HXDLIN(  43)											if (!((s6 <= 0))) {
HXLINE(  43)												_hx_tmp29 = (t6 <= 0);
            											}
            											else {
HXLINE(  43)												_hx_tmp29 = true;
            											}
HXDLIN(  43)											if (_hx_tmp29) {
HXLINE(  43)												_hx_tmp26 = false;
            											}
            											else {
HXLINE(  43)												if (((s6 + t6) < scaled->A)) {
HXLINE(  43)													_hx_tmp26 = true;
            												}
            												else {
HXLINE(  43)													_hx_tmp26 = false;
            												}
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp26 = false;
            										}
HXDLIN(  43)										if (_hx_tmp26) {
HXLINE(  43)											hits1 = (hits1 + 1);
HXDLIN(  43)											averageX1 = (averageX1 + x11);
HXDLIN(  43)											averageY1 = (averageY1 + y11);
HXDLIN(  43)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  43)										Float x12 = (px + x21);
HXDLIN(  43)										Float y12 = (py + y21);
HXDLIN(  43)										bool _hx_tmp30;
HXDLIN(  43)										bool _hx_tmp31;
HXDLIN(  43)										 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN(  43)										bool _hx_tmp32;
HXDLIN(  43)										if ((x12 > (this26->start - 1))) {
HXLINE(  43)											_hx_tmp32 = (x12 < (this26->max + 1));
            										}
            										else {
HXLINE(  43)											_hx_tmp32 = false;
            										}
HXDLIN(  43)										if (_hx_tmp32) {
HXLINE(  43)											 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN(  43)											if ((y12 > (this27->start - 1))) {
HXLINE(  43)												_hx_tmp31 = (y12 < (this27->max + 1));
            											}
            											else {
HXLINE(  43)												_hx_tmp31 = false;
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp31 = false;
            										}
HXDLIN(  43)										if (_hx_tmp31) {
HXLINE(  43)											Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN(  43)											Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN(  43)											bool _hx_tmp33;
HXDLIN(  43)											if (!((s7 <= 0))) {
HXLINE(  43)												_hx_tmp33 = (t7 <= 0);
            											}
            											else {
HXLINE(  43)												_hx_tmp33 = true;
            											}
HXDLIN(  43)											if (_hx_tmp33) {
HXLINE(  43)												_hx_tmp30 = false;
            											}
            											else {
HXLINE(  43)												if (((s7 + t7) < scaled->A)) {
HXLINE(  43)													_hx_tmp30 = true;
            												}
            												else {
HXLINE(  43)													_hx_tmp30 = false;
            												}
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp30 = false;
            										}
HXDLIN(  43)										if (_hx_tmp30) {
HXLINE(  43)											hits1 = (hits1 + 1);
HXDLIN(  43)											averageX1 = (averageX1 + x21);
HXDLIN(  43)											averageY1 = (averageY1 + y21);
HXDLIN(  43)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  43)										Float x13 = (px + x31);
HXDLIN(  43)										Float y13 = (py + y31);
HXDLIN(  43)										bool _hx_tmp34;
HXDLIN(  43)										bool _hx_tmp35;
HXDLIN(  43)										 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN(  43)										bool _hx_tmp36;
HXDLIN(  43)										if ((x13 > (this28->start - 1))) {
HXLINE(  43)											_hx_tmp36 = (x13 < (this28->max + 1));
            										}
            										else {
HXLINE(  43)											_hx_tmp36 = false;
            										}
HXDLIN(  43)										if (_hx_tmp36) {
HXLINE(  43)											 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN(  43)											if ((y13 > (this29->start - 1))) {
HXLINE(  43)												_hx_tmp35 = (y13 < (this29->max + 1));
            											}
            											else {
HXLINE(  43)												_hx_tmp35 = false;
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp35 = false;
            										}
HXDLIN(  43)										if (_hx_tmp35) {
HXLINE(  43)											Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN(  43)											Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN(  43)											bool _hx_tmp37;
HXDLIN(  43)											if (!((s8 <= 0))) {
HXLINE(  43)												_hx_tmp37 = (t8 <= 0);
            											}
            											else {
HXLINE(  43)												_hx_tmp37 = true;
            											}
HXDLIN(  43)											if (_hx_tmp37) {
HXLINE(  43)												_hx_tmp34 = false;
            											}
            											else {
HXLINE(  43)												if (((s8 + t8) < scaled->A)) {
HXLINE(  43)													_hx_tmp34 = true;
            												}
            												else {
HXLINE(  43)													_hx_tmp34 = false;
            												}
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp34 = false;
            										}
HXDLIN(  43)										if (_hx_tmp34) {
HXLINE(  43)											hits1 = (hits1 + 1);
HXDLIN(  43)											averageX1 = (averageX1 + x31);
HXDLIN(  43)											averageY1 = (averageY1 + y31);
HXDLIN(  43)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  43)										Float x14 = (px + x41);
HXDLIN(  43)										Float y14 = (py + y41);
HXDLIN(  43)										bool _hx_tmp38;
HXDLIN(  43)										bool _hx_tmp39;
HXDLIN(  43)										 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN(  43)										bool _hx_tmp40;
HXDLIN(  43)										if ((x14 > (this30->start - 1))) {
HXLINE(  43)											_hx_tmp40 = (x14 < (this30->max + 1));
            										}
            										else {
HXLINE(  43)											_hx_tmp40 = false;
            										}
HXDLIN(  43)										if (_hx_tmp40) {
HXLINE(  43)											 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN(  43)											if ((y14 > (this31->start - 1))) {
HXLINE(  43)												_hx_tmp39 = (y14 < (this31->max + 1));
            											}
            											else {
HXLINE(  43)												_hx_tmp39 = false;
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp39 = false;
            										}
HXDLIN(  43)										if (_hx_tmp39) {
HXLINE(  43)											Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN(  43)											Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN(  43)											bool _hx_tmp41;
HXDLIN(  43)											if (!((s9 <= 0))) {
HXLINE(  43)												_hx_tmp41 = (t9 <= 0);
            											}
            											else {
HXLINE(  43)												_hx_tmp41 = true;
            											}
HXDLIN(  43)											if (_hx_tmp41) {
HXLINE(  43)												_hx_tmp38 = false;
            											}
            											else {
HXLINE(  43)												if (((s9 + t9) < scaled->A)) {
HXLINE(  43)													_hx_tmp38 = true;
            												}
            												else {
HXLINE(  43)													_hx_tmp38 = false;
            												}
            											}
            										}
            										else {
HXLINE(  43)											_hx_tmp38 = false;
            										}
HXDLIN(  43)										if (_hx_tmp38) {
HXLINE(  43)											hits1 = (hits1 + 1);
HXDLIN(  43)											averageX1 = (averageX1 + x41);
HXDLIN(  43)											averageY1 = (averageY1 + y41);
HXDLIN(  43)											fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            										}
HXDLIN(  43)										if ((hits1 != 0)) {
HXLINE( 244)											averageX1 = (px + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)											averageY1 = (py + (averageY1 / ( (Float)(hits1) )));
            										}
            										else {
HXLINE( 247)											averageX1 = ( (Float)(px) );
HXLINE( 248)											averageY1 = ( (Float)(py) );
            										}
HXLINE(  43)										Float fractionTotal3 = fractionTotal2;
HXDLIN(  43)										Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN(  43)										Float sampleScaled_averageX = averageX1;
HXDLIN(  43)										Float sampleScaled_averageY = averageY1;
HXDLIN(  43)										bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXDLIN(  43)										Float scaledTotal = sampleScaled_fractionTotal;
HXDLIN(  43)										bool _hx_tmp42;
HXDLIN(  43)										if (!((scaledTotal > hitTotal))) {
HXLINE(  43)											_hx_tmp42 = (hitTotal == ((Float)1.));
            										}
            										else {
HXLINE(  43)											_hx_tmp42 = true;
            										}
HXDLIN(  43)										if (_hx_tmp42) {
HXLINE(  43)											Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN(  43)											Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN(  43)											Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN(  43)											Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN(  43)											Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN(  43)											Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN(  43)											Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  43)											Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN(  43)											Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN(  43)											Float ratiosAvg_ratioC1 = ratioC3;
HXDLIN(  43)											Float ratioA_1 = ratiosAvg_ratioA1;
HXDLIN(  43)											Float ratioB_1 = ratiosAvg_ratioB1;
HXDLIN(  43)											Float ratioC_1 = ratiosAvg_ratioC1;
HXDLIN(  43)											int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN(  43)											if ((i5 > 255)) {
HXLINE(  24)												i5 = 255;
            											}
HXLINE(  43)											if ((i5 < 0)) {
HXLINE(  25)												i5 = 0;
            											}
HXLINE( 187)											a = i5;
HXLINE(  43)											int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN(  43)											if ((i6 > 255)) {
HXLINE(  24)												i6 = 255;
            											}
HXLINE(  43)											if ((i6 < 0)) {
HXLINE(  25)												i6 = 0;
            											}
HXLINE( 188)											r = i6;
HXLINE(  43)											int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN(  43)											if ((i7 > 255)) {
HXLINE(  24)												i7 = 255;
            											}
HXLINE(  43)											if ((i7 < 0)) {
HXLINE(  25)												i7 = 0;
            											}
HXLINE( 189)											g = i7;
HXLINE(  43)											int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN(  43)											if ((i8 > 255)) {
HXLINE(  24)												i8 = 255;
            											}
HXLINE(  43)											if ((i8 < 0)) {
HXLINE(  25)												i8 = 0;
            											}
HXLINE( 190)											b = i8;
HXLINE(  43)											{
HXLINE(  43)												int location1;
HXDLIN(  43)												if (pixelImage->useVirtualPos) {
HXLINE(  43)													location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  43)													location1 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            												}
HXDLIN(  43)												bool _hx_tmp43;
HXDLIN(  43)												if (pixelImage->transparent) {
HXLINE(  43)													_hx_tmp43 = (a < 254);
            												}
            												else {
HXLINE(  43)													_hx_tmp43 = false;
            												}
HXDLIN(  43)												if (_hx_tmp43) {
HXLINE(  43)													int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  43)													int old1;
HXDLIN(  43)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)														old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            													}
            													else {
HXLINE(  43)														old1 = this32;
            													}
HXDLIN(  43)													int rhs1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  43)													Float a12;
HXDLIN(  43)													int this33 = ((old1 >> 24) & 255);
HXDLIN(  43)													if ((this33 == 0)) {
HXLINE(  43)														a12 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float r11;
HXDLIN(  43)													int this34 = ((old1 >> 16) & 255);
HXDLIN(  43)													if ((this34 == 0)) {
HXLINE(  43)														r11 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float g11;
HXDLIN(  43)													int this35 = ((old1 >> 8) & 255);
HXDLIN(  43)													if ((this35 == 0)) {
HXLINE(  43)														g11 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float b12;
HXDLIN(  43)													int this36 = (old1 & 255);
HXDLIN(  43)													if ((this36 == 0)) {
HXLINE(  43)														b12 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float a22;
HXDLIN(  43)													int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  43)													if ((this37 == 0)) {
HXLINE(  43)														a22 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float r21;
HXDLIN(  43)													int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  43)													if ((this38 == 0)) {
HXLINE(  43)														r21 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float g21;
HXDLIN(  43)													int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  43)													if ((this39 == 0)) {
HXLINE(  43)														g21 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float b22;
HXDLIN(  43)													int this40 = (rhs1 & 255);
HXDLIN(  43)													if ((this40 == 0)) {
HXLINE(  43)														b22 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  43)													int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN(  43)													int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN(  43)													int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  43)													int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  43)													int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  43)													{
HXLINE(  43)														int _hx_tmp44;
HXDLIN(  43)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)															_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            														}
            														else {
HXLINE(  43)															_hx_tmp44 = blended1;
            														}
HXDLIN(  43)														::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            													}
            												}
            												else {
HXLINE(  43)													int value1;
HXDLIN(  43)													if (pixelImage->isLittle) {
HXLINE(  43)														value1 = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  43)														value1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  43)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            												}
            											}
            										}
            										else {
HXLINE(  43)											Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN(  43)											Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN(  43)											Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN(  43)											Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN(  43)											Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN(  43)											Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN(  43)											Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  43)											Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN(  43)											Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN(  43)											Float ratiosAvg_ratioC2 = ratioC4;
HXDLIN(  43)											Float ratioA_2 = ratiosAvg_ratioA2;
HXDLIN(  43)											Float ratioB_2 = ratiosAvg_ratioB2;
HXDLIN(  43)											Float ratioC_2 = ratiosAvg_ratioC2;
HXDLIN(  43)											int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN(  43)											if ((i9 > 255)) {
HXLINE(  24)												i9 = 255;
            											}
HXLINE(  43)											if ((i9 < 0)) {
HXLINE(  25)												i9 = 0;
            											}
HXLINE( 198)											a = i9;
HXLINE(  43)											int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN(  43)											if ((i10 > 255)) {
HXLINE(  24)												i10 = 255;
            											}
HXLINE(  43)											if ((i10 < 0)) {
HXLINE(  25)												i10 = 0;
            											}
HXLINE( 199)											r = i10;
HXLINE(  43)											int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN(  43)											if ((i11 > 255)) {
HXLINE(  24)												i11 = 255;
            											}
HXLINE(  43)											if ((i11 < 0)) {
HXLINE(  25)												i11 = 0;
            											}
HXLINE( 200)											g = i11;
HXLINE(  43)											int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN(  43)											if ((i12 > 255)) {
HXLINE(  24)												i12 = 255;
            											}
HXLINE(  43)											if ((i12 < 0)) {
HXLINE(  25)												i12 = 0;
            											}
HXLINE( 201)											b = i12;
HXLINE(  43)											{
HXLINE(  43)												int a6;
HXDLIN(  43)												if ((aScale > ((Float)0.9))) {
HXLINE(  43)													a6 = a;
            												}
            												else {
HXLINE(  43)													int i13 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  43)													if ((i13 > 255)) {
HXLINE(  24)														i13 = 255;
            													}
HXLINE(  43)													if ((i13 < 0)) {
HXLINE(  25)														i13 = 0;
            													}
HXLINE(  43)													a6 = i13;
            												}
HXDLIN(  43)												int location2;
HXDLIN(  43)												if (pixelImage->useVirtualPos) {
HXLINE(  43)													location2 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  43)													location2 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            												}
HXDLIN(  43)												bool _hx_tmp45;
HXDLIN(  43)												if (pixelImage->transparent) {
HXLINE(  43)													_hx_tmp45 = (a6 < 254);
            												}
            												else {
HXLINE(  43)													_hx_tmp45 = false;
            												}
HXDLIN(  43)												if (_hx_tmp45) {
HXLINE(  43)													int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  43)													int old2;
HXDLIN(  43)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)														old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            													}
            													else {
HXLINE(  43)														old2 = this41;
            													}
HXDLIN(  43)													int rhs2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  43)													Float a13;
HXDLIN(  43)													int this42 = ((old2 >> 24) & 255);
HXDLIN(  43)													if ((this42 == 0)) {
HXLINE(  43)														a13 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float r12;
HXDLIN(  43)													int this43 = ((old2 >> 16) & 255);
HXDLIN(  43)													if ((this43 == 0)) {
HXLINE(  43)														r12 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float g12;
HXDLIN(  43)													int this44 = ((old2 >> 8) & 255);
HXDLIN(  43)													if ((this44 == 0)) {
HXLINE(  43)														g12 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float b13;
HXDLIN(  43)													int this45 = (old2 & 255);
HXDLIN(  43)													if ((this45 == 0)) {
HXLINE(  43)														b13 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float a23;
HXDLIN(  43)													int this46 = ((rhs2 >> 24) & 255);
HXDLIN(  43)													if ((this46 == 0)) {
HXLINE(  43)														a23 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float r22;
HXDLIN(  43)													int this47 = ((rhs2 >> 16) & 255);
HXDLIN(  43)													if ((this47 == 0)) {
HXLINE(  43)														r22 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float g22;
HXDLIN(  43)													int this48 = ((rhs2 >> 8) & 255);
HXDLIN(  43)													if ((this48 == 0)) {
HXLINE(  43)														g22 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float b23;
HXDLIN(  43)													int this49 = (rhs2 & 255);
HXDLIN(  43)													if ((this49 == 0)) {
HXLINE(  43)														b23 = ((Float)0.);
            													}
            													else {
HXLINE(  43)														b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN(  43)													Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  43)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN(  43)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN(  43)													int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  43)													int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  43)													int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  43)													{
HXLINE(  43)														int _hx_tmp46;
HXDLIN(  43)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)															_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE(  43)															_hx_tmp46 = blended2;
            														}
HXDLIN(  43)														::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            													}
            												}
            												else {
HXLINE(  43)													int value2;
HXDLIN(  43)													if (pixelImage->isLittle) {
HXLINE(  43)														value2 = ((((a6 << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  43)														value2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  43)													::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  43)				if ((hasHit == false)) {
HXLINE(  43)					 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
            				}
            			}
            		}
HXLINE(  44)		Float ax3 = q->bx;
HXDLIN(  44)		Float ay3 = q->by;
HXDLIN(  44)		Float bx1 = q->cx;
HXDLIN(  44)		Float by1 = q->cy;
HXDLIN(  44)		Float cx1 = q->dx;
HXDLIN(  44)		Float cy1 = q->dy;
HXDLIN(  44)		bool softAB1 = true;
HXDLIN(  44)		bool softBC1 = true;
HXDLIN(  44)		bool softCA1 = false;
HXDLIN(  44)		bool adjustWinding1 = (((((ax3 * by1) - (bx1 * ay3)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay3) - (ax3 * cy1))) > 0);
HXDLIN(  44)		if (!(adjustWinding1)) {
HXLINE(  44)			Float bx_3 = bx1;
HXDLIN(  44)			Float by_3 = by1;
HXLINE(  87)			bx1 = cx1;
HXLINE(  88)			by1 = cy1;
HXLINE(  89)			cx1 = bx_3;
HXLINE(  90)			cy1 = by_3;
            		}
HXLINE(  44)		int aA1 = ((colorC >> 24) & 255);
HXDLIN(  44)		int rA1 = ((colorC >> 16) & 255);
HXDLIN(  44)		int gA1 = ((colorC >> 8) & 255);
HXDLIN(  44)		int bA1 = (colorC & 255);
HXDLIN(  44)		int aB1 = ((colorB >> 24) & 255);
HXDLIN(  44)		int rB1 = ((colorB >> 16) & 255);
HXDLIN(  44)		int gB1 = ((colorB >> 8) & 255);
HXDLIN(  44)		int bB1 = (colorB & 255);
HXDLIN(  44)		int aC1 = ((colorD >> 24) & 255);
HXDLIN(  44)		int rC1 = ((colorD >> 16) & 255);
HXDLIN(  44)		int gC1 = ((colorD >> 8) & 255);
HXDLIN(  44)		int bC1 = (colorD & 255);
HXDLIN(  44)		int a8 = 0;
HXDLIN(  44)		int r6 = 0;
HXDLIN(  44)		int g6 = 0;
HXDLIN(  44)		int b6 = 0;
HXDLIN(  44)		 ::pi_xy::algo::HitTri hitTriScalar1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax3,ay3,bx1,by1,cx1,cy1,true);
HXDLIN(  44)		 ::pi_xy::iter::IntIterStart barycentric_yIter31;
HXDLIN(  44)		 ::pi_xy::iter::IntIterStart barycentric_xIter31;
HXDLIN(  44)		Float barycentric_dot221;
HXDLIN(  44)		Float barycentric_dot121;
HXDLIN(  44)		Float barycentric_dot111;
HXDLIN(  44)		Float barycentric_denom11;
HXDLIN(  44)		Float barycentric_bcy1;
HXDLIN(  44)		Float barycentric_bcx1;
HXDLIN(  44)		Float barycentric_acy1;
HXDLIN(  44)		Float barycentric_acx1;
HXDLIN(  44)		Float barycentric_ax1 = hitTriScalar1->ax;
HXDLIN(  44)		Float barycentric_ay1 = hitTriScalar1->ay;
HXDLIN(  44)		Float barycentric_bx1 = hitTriScalar1->bx;
HXDLIN(  44)		Float barycentric_by1 = hitTriScalar1->by;
HXDLIN(  44)		Float barycentric_cx1 = hitTriScalar1->cx;
HXDLIN(  44)		Float barycentric_cy1 = hitTriScalar1->cy;
HXDLIN(  44)		bool barycentric_preCalculated1 = true;
HXDLIN(  44)		{
HXLINE(  44)			barycentric_bcx1 = (barycentric_bx1 - barycentric_cx1);
HXDLIN(  44)			barycentric_bcy1 = (barycentric_by1 - barycentric_cy1);
HXDLIN(  44)			barycentric_acx1 = (barycentric_ax1 - barycentric_cx1);
HXDLIN(  44)			barycentric_acy1 = (barycentric_ay1 - barycentric_cy1);
HXDLIN(  44)			Float ax4 = barycentric_bcx1;
HXDLIN(  44)			Float ay4 = barycentric_bcy1;
HXDLIN(  44)			barycentric_dot111 = ((ax4 * ax4) + (ay4 * ay4));
HXDLIN(  44)			barycentric_dot121 = ((barycentric_bcx1 * barycentric_acx1) + (barycentric_bcy1 * barycentric_acy1));
HXDLIN(  44)			Float ax5 = barycentric_acx1;
HXDLIN(  44)			Float ay5 = barycentric_acy1;
HXDLIN(  44)			barycentric_dot221 = ((ax5 * ax5) + (ay5 * ay5));
HXDLIN(  44)			barycentric_denom11 = (( (Float)(1) ) / ((barycentric_dot111 * barycentric_dot221) - (barycentric_dot121 * barycentric_dot121)));
HXDLIN(  44)			Float a9 = barycentric_ax1;
HXDLIN(  44)			Float b7 = barycentric_bx1;
HXDLIN(  44)			Float c2 = barycentric_cx1;
HXDLIN(  44)			if ((a9 > b7)) {
HXLINE(  44)				if ((a9 > c2)) {
HXLINE(  44)					int min4;
HXDLIN(  44)					if ((b7 > c2)) {
HXLINE(  44)						min4 = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE(  44)						min4 = ::Math_obj::floor(b7);
            					}
HXDLIN(  44)					int ii_min8 = min4;
HXDLIN(  44)					int ii_max8 = ::Math_obj::ceil(a9);
HXDLIN(  44)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE(  44)					int ii_min9 = ::Math_obj::floor(b7);
HXDLIN(  44)					int ii_max9 = ::Math_obj::ceil(c2);
HXDLIN(  44)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE(  44)				if ((b7 > c2)) {
HXLINE(  44)					int min5;
HXDLIN(  44)					if ((a9 > c2)) {
HXLINE(  44)						min5 = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE(  44)						min5 = ::Math_obj::ceil(a9);
            					}
HXDLIN(  44)					int ii_min10 = min5;
HXDLIN(  44)					int ii_max10 = ::Math_obj::ceil(b7);
HXDLIN(  44)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE(  44)					int ii_min11 = ::Math_obj::floor(a9);
HXDLIN(  44)					int ii_max11 = ::Math_obj::ceil(c2);
HXDLIN(  44)					barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  44)			Float a10 = barycentric_ay1;
HXDLIN(  44)			Float b8 = barycentric_by1;
HXDLIN(  44)			Float c3 = barycentric_cy1;
HXDLIN(  44)			if ((a10 > b8)) {
HXLINE(  44)				if ((a10 > c3)) {
HXLINE(  44)					int min6;
HXDLIN(  44)					if ((b8 > c3)) {
HXLINE(  44)						min6 = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE(  44)						min6 = ::Math_obj::floor(b8);
            					}
HXDLIN(  44)					int ii_min12 = min6;
HXDLIN(  44)					int ii_max12 = ::Math_obj::ceil(a10);
HXDLIN(  44)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE(  44)					int ii_min13 = ::Math_obj::floor(b8);
HXDLIN(  44)					int ii_max13 = ::Math_obj::ceil(c3);
HXDLIN(  44)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE(  44)				if ((b8 > c3)) {
HXLINE(  44)					int min7;
HXDLIN(  44)					if ((a10 > c3)) {
HXLINE(  44)						min7 = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE(  44)						min7 = ::Math_obj::ceil(a10);
            					}
HXDLIN(  44)					int ii_min14 = min7;
HXDLIN(  44)					int ii_max14 = ::Math_obj::ceil(b8);
HXDLIN(  44)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE(  44)					int ii_min15 = ::Math_obj::floor(a10);
HXDLIN(  44)					int ii_max15 = ::Math_obj::ceil(c3);
HXDLIN(  44)					barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
            		}
HXDLIN(  44)		Float scaleA2;
HXDLIN(  44)		bool scaleA3;
HXDLIN(  44)		if (!(softAB1)) {
HXLINE(  44)			scaleA3 = softCA1;
            		}
            		else {
HXLINE(  44)			scaleA3 = true;
            		}
HXDLIN(  44)		if (scaleA3) {
HXLINE(  44)			scaleA2 = ((Float)1.5);
            		}
            		else {
HXLINE(  44)			scaleA2 = ((Float)1.);
            		}
HXDLIN(  44)		Float scaleB2;
HXDLIN(  44)		bool scaleB3;
HXDLIN(  44)		if (!(softAB1)) {
HXLINE(  44)			scaleB3 = softBC1;
            		}
            		else {
HXLINE(  44)			scaleB3 = true;
            		}
HXDLIN(  44)		if (scaleB3) {
HXLINE(  44)			scaleB2 = ((Float)1.5);
            		}
            		else {
HXLINE(  44)			scaleB2 = ((Float)1.);
            		}
HXDLIN(  44)		Float scaleC2;
HXDLIN(  44)		bool scaleC3;
HXDLIN(  44)		if (!(softBC1)) {
HXLINE(  44)			scaleC3 = softCA1;
            		}
            		else {
HXLINE(  44)			scaleC3 = true;
            		}
HXDLIN(  44)		if (scaleC3) {
HXLINE(  44)			scaleC2 = ((Float)1.5);
            		}
            		else {
HXLINE(  44)			scaleC2 = ((Float)1.);
            		}
HXDLIN(  44)		Float x04 = ((Float)0.);
HXDLIN(  44)		Float y04 = ((Float)0.);
HXDLIN(  44)		bool isScaledA2 = true;
HXDLIN(  44)		bool isScaledB2 = true;
HXDLIN(  44)		bool isScaledC2 = true;
HXDLIN(  44)		if (isScaledA2) {
HXLINE(  44)			if (isScaledB2) {
HXLINE(  44)				if (isScaledC2) {
HXLINE(  82)					x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  83)					y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x04 = hitTriScalar1->cx;
HXLINE(  80)					y04 = hitTriScalar1->cy;
            				}
            			}
            			else {
HXLINE(  44)				if (isScaledC2) {
HXLINE(  76)					x04 = hitTriScalar1->bx;
HXLINE(  77)					y04 = hitTriScalar1->by;
            				}
            				else {
HXLINE(  73)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar1);
HXLINE(  74)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar1);
            				}
            			}
            		}
            		else {
HXLINE(  44)			if (isScaledB2) {
HXLINE(  44)				if (isScaledC2) {
HXLINE(  70)					x04 = hitTriScalar1->ax;
HXLINE(  71)					y04 = hitTriScalar1->ay;
            				}
            				else {
HXLINE(  67)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar1);
HXLINE(  68)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar1);
            				}
            			}
            			else {
HXLINE(  44)				if (isScaledC2) {
HXLINE(  64)					x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar1);
HXLINE(  65)					y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar1);
            				}
            				else {
HXLINE(  61)					x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  62)					y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  44)		Float ax_2;
HXDLIN(  44)		if (isScaledA2) {
HXLINE(  44)			Float point12 = hitTriScalar1->ax;
HXDLIN(  44)			point12 = (point12 - x04);
HXDLIN(  44)			point12 = (point12 * ((Float)0.999));
HXDLIN(  44)			point12 = (point12 + x04);
HXDLIN(  44)			ax_2 = point12;
            		}
            		else {
HXLINE(  44)			ax_2 = hitTriScalar1->ax;
            		}
HXDLIN(  44)		Float ay_2;
HXDLIN(  44)		if (isScaledA2) {
HXLINE(  44)			Float point13 = hitTriScalar1->ay;
HXDLIN(  44)			point13 = (point13 - y04);
HXDLIN(  44)			point13 = (point13 * ((Float)0.999));
HXDLIN(  44)			point13 = (point13 + y04);
HXDLIN(  44)			ay_2 = point13;
            		}
            		else {
HXLINE(  44)			ay_2 = hitTriScalar1->ay;
            		}
HXDLIN(  44)		Float bx_4;
HXDLIN(  44)		if (isScaledB2) {
HXLINE(  44)			Float point14 = hitTriScalar1->bx;
HXDLIN(  44)			point14 = (point14 - x04);
HXDLIN(  44)			point14 = (point14 * ((Float)0.999));
HXDLIN(  44)			point14 = (point14 + x04);
HXDLIN(  44)			bx_4 = point14;
            		}
            		else {
HXLINE(  44)			bx_4 = hitTriScalar1->bx;
            		}
HXDLIN(  44)		Float by_4;
HXDLIN(  44)		if (isScaledB2) {
HXLINE(  44)			Float point15 = hitTriScalar1->by;
HXDLIN(  44)			point15 = (point15 - y04);
HXDLIN(  44)			point15 = (point15 * ((Float)0.999));
HXDLIN(  44)			point15 = (point15 + y04);
HXDLIN(  44)			by_4 = point15;
            		}
            		else {
HXLINE(  44)			by_4 = hitTriScalar1->by;
            		}
HXDLIN(  44)		Float cx_2;
HXDLIN(  44)		if (isScaledC2) {
HXLINE(  44)			Float point16 = hitTriScalar1->cx;
HXDLIN(  44)			point16 = (point16 - x04);
HXDLIN(  44)			point16 = (point16 * ((Float)0.999));
HXDLIN(  44)			point16 = (point16 + x04);
HXDLIN(  44)			cx_2 = point16;
            		}
            		else {
HXLINE(  44)			cx_2 = hitTriScalar1->cx;
            		}
HXDLIN(  44)		Float cy_2;
HXDLIN(  44)		if (isScaledC2) {
HXLINE(  44)			Float point17 = hitTriScalar1->cy;
HXDLIN(  44)			point17 = (point17 - y04);
HXDLIN(  44)			point17 = (point17 * ((Float)0.999));
HXDLIN(  44)			point17 = (point17 + y04);
HXDLIN(  44)			cy_2 = point17;
            		}
            		else {
HXLINE(  44)			cy_2 = hitTriScalar1->cy;
            		}
HXDLIN(  44)		 ::pi_xy::algo::HitTri scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_2,ay_2,bx_4,by_4,cx_2,cy_2,true);
HXDLIN(  44)		Float x05 = ((Float)0.);
HXDLIN(  44)		Float y05 = ((Float)0.);
HXDLIN(  44)		bool isScaledA3 = (scaleA2 != ((Float)1.));
HXDLIN(  44)		bool isScaledB3 = (scaleB2 != ((Float)1.));
HXDLIN(  44)		bool isScaledC3 = (scaleC2 != ((Float)1.));
HXDLIN(  44)		if (isScaledA3) {
HXLINE(  44)			if (isScaledB3) {
HXLINE(  44)				if (isScaledC3) {
HXLINE(  82)					x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  83)					y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x05 = scaled1->cx;
HXLINE(  80)					y05 = scaled1->cy;
            				}
            			}
            			else {
HXLINE(  44)				if (isScaledC3) {
HXLINE(  76)					x05 = scaled1->bx;
HXLINE(  77)					y05 = scaled1->by;
            				}
            				else {
HXLINE(  73)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled1);
HXLINE(  74)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled1);
            				}
            			}
            		}
            		else {
HXLINE(  44)			if (isScaledB3) {
HXLINE(  44)				if (isScaledC3) {
HXLINE(  70)					x05 = scaled1->ax;
HXLINE(  71)					y05 = scaled1->ay;
            				}
            				else {
HXLINE(  67)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled1);
HXLINE(  68)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled1);
            				}
            			}
            			else {
HXLINE(  44)				if (isScaledC3) {
HXLINE(  64)					x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled1);
HXLINE(  65)					y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled1);
            				}
            				else {
HXLINE(  61)					x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  62)					y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  44)		Float ax_3;
HXDLIN(  44)		if (isScaledA3) {
HXLINE(  44)			Float point18 = scaled1->ax;
HXDLIN(  44)			point18 = (point18 - x05);
HXDLIN(  44)			point18 = (point18 * scaleA2);
HXDLIN(  44)			point18 = (point18 + x05);
HXDLIN(  44)			ax_3 = point18;
            		}
            		else {
HXLINE(  44)			ax_3 = scaled1->ax;
            		}
HXDLIN(  44)		Float ay_3;
HXDLIN(  44)		if (isScaledA3) {
HXLINE(  44)			Float point19 = scaled1->ay;
HXDLIN(  44)			point19 = (point19 - y05);
HXDLIN(  44)			point19 = (point19 * scaleA2);
HXDLIN(  44)			point19 = (point19 + y05);
HXDLIN(  44)			ay_3 = point19;
            		}
            		else {
HXLINE(  44)			ay_3 = scaled1->ay;
            		}
HXDLIN(  44)		Float bx_5;
HXDLIN(  44)		if (isScaledB3) {
HXLINE(  44)			Float point20 = scaled1->bx;
HXDLIN(  44)			point20 = (point20 - x05);
HXDLIN(  44)			point20 = (point20 * scaleB2);
HXDLIN(  44)			point20 = (point20 + x05);
HXDLIN(  44)			bx_5 = point20;
            		}
            		else {
HXLINE(  44)			bx_5 = scaled1->bx;
            		}
HXDLIN(  44)		Float by_5;
HXDLIN(  44)		if (isScaledB3) {
HXLINE(  44)			Float point21 = scaled1->by;
HXDLIN(  44)			point21 = (point21 - y05);
HXDLIN(  44)			point21 = (point21 * scaleB2);
HXDLIN(  44)			point21 = (point21 + y05);
HXDLIN(  44)			by_5 = point21;
            		}
            		else {
HXLINE(  44)			by_5 = scaled1->by;
            		}
HXDLIN(  44)		Float cx_3;
HXDLIN(  44)		if (isScaledC3) {
HXLINE(  44)			Float point22 = scaled1->cx;
HXDLIN(  44)			point22 = (point22 - x05);
HXDLIN(  44)			point22 = (point22 * scaleC2);
HXDLIN(  44)			point22 = (point22 + x05);
HXDLIN(  44)			cx_3 = point22;
            		}
            		else {
HXLINE(  44)			cx_3 = scaled1->cx;
            		}
HXDLIN(  44)		Float cy_3;
HXDLIN(  44)		if (isScaledC3) {
HXLINE(  44)			Float point23 = scaled1->cy;
HXDLIN(  44)			point23 = (point23 - y05);
HXDLIN(  44)			point23 = (point23 * scaleC2);
HXDLIN(  44)			point23 = (point23 + y05);
HXDLIN(  44)			cy_3 = point23;
            		}
            		else {
HXLINE(  44)			cy_3 = scaled1->cy;
            		}
HXDLIN(  44)		scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_3,ay_3,bx_5,by_5,cx_3,cy_3,true);
HXDLIN(  44)		{
HXLINE(  44)			 ::pi_xy::iter::IntIterStart this50 = hitTriScalar1->xIter3;
HXDLIN(  44)			int _g_min2 = this50->start;
HXDLIN(  44)			int _g_max2 = this50->max;
HXDLIN(  44)			while((_g_min2 < _g_max2)){
HXLINE(  44)				_g_min2 = (_g_min2 + 1);
HXDLIN(  44)				int px1 = (_g_min2 - 1);
HXDLIN(  44)				{
HXLINE(  44)					 ::pi_xy::iter::IntIterStart this51 = hitTriScalar1->yIter3;
HXDLIN(  44)					int _g_min3 = this51->start;
HXDLIN(  44)					int _g_max3 = this51->max;
HXDLIN(  44)					while((_g_min3 < _g_max3)){
HXLINE(  44)						_g_min3 = (_g_min3 + 1);
HXDLIN(  44)						int py1 = (_g_min3 - 1);
HXDLIN(  44)						Float pcx4 = (( (Float)(px1) ) - barycentric_cx1);
HXDLIN(  44)						Float pcy4 = (( (Float)(py1) ) - barycentric_cy1);
HXDLIN(  44)						Float dot314 = ((pcx4 * barycentric_bcx1) + (pcy4 * barycentric_bcy1));
HXDLIN(  44)						Float dot324 = ((pcx4 * barycentric_acx1) + (pcy4 * barycentric_acy1));
HXDLIN(  44)						Float ratioA5 = (((barycentric_dot221 * dot314) - (barycentric_dot121 * dot324)) * barycentric_denom11);
HXDLIN(  44)						Float ratioB5 = (((barycentric_dot111 * dot324) - (barycentric_dot121 * dot314)) * barycentric_denom11);
HXDLIN(  44)						Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  44)						Float ratios_ratioA1 = ratioA5;
HXDLIN(  44)						Float ratios_ratioB1 = ratioB5;
HXDLIN(  44)						Float ratios_ratioC1 = ratioC5;
HXDLIN(  44)						Float v5;
HXDLIN(  44)						if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  44)							v5 = ratios_ratioA1;
            						}
            						else {
HXLINE(  44)							v5 = ratios_ratioB1;
            						}
HXDLIN(  44)						Float min_1;
HXDLIN(  44)						if ((v5 < ratios_ratioC1)) {
HXLINE(  44)							min_1 = v5;
            						}
            						else {
HXLINE(  44)							min_1 = ratios_ratioC1;
            						}
HXDLIN(  44)						bool isSoft4;
HXDLIN(  44)						if (softAB1) {
HXLINE(  44)							if (softBC1) {
HXLINE(  44)								if (softCA1) {
HXLINE(  44)									isSoft4 = true;
            								}
            								else {
HXLINE(  44)									if ((min_1 != ratios_ratioB1)) {
HXLINE(  44)										Float v6;
HXDLIN(  44)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  44)											v6 = ratios_ratioA1;
            										}
            										else {
HXLINE(  44)											v6 = ratios_ratioB1;
            										}
HXDLIN(  44)										Float isSoft5;
HXDLIN(  44)										if ((v6 < ratios_ratioC1)) {
HXLINE(  44)											isSoft5 = v6;
            										}
            										else {
HXLINE(  44)											isSoft5 = ratios_ratioC1;
            										}
HXDLIN(  44)										isSoft4 = (isSoft5 == ratios_ratioC1);
            									}
            									else {
HXLINE(  44)										isSoft4 = true;
            									}
            								}
            							}
            							else {
HXLINE(  44)								if (softCA1) {
HXLINE(  44)									if ((min_1 != ratios_ratioA1)) {
HXLINE(  44)										Float v7;
HXDLIN(  44)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  44)											v7 = ratios_ratioA1;
            										}
            										else {
HXLINE(  44)											v7 = ratios_ratioB1;
            										}
HXDLIN(  44)										Float isSoft6;
HXDLIN(  44)										if ((v7 < ratios_ratioC1)) {
HXLINE(  44)											isSoft6 = v7;
            										}
            										else {
HXLINE(  44)											isSoft6 = ratios_ratioC1;
            										}
HXDLIN(  44)										isSoft4 = (isSoft6 == ratios_ratioC1);
            									}
            									else {
HXLINE(  44)										isSoft4 = true;
            									}
            								}
            								else {
HXLINE(  44)									isSoft4 = (min_1 == ratios_ratioC1);
            								}
            							}
            						}
            						else {
HXLINE(  44)							if (softBC1) {
HXLINE(  44)								if (softCA1) {
HXLINE(  44)									if ((min_1 != ratios_ratioA1)) {
HXLINE(  44)										Float v8;
HXDLIN(  44)										if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  44)											v8 = ratios_ratioA1;
            										}
            										else {
HXLINE(  44)											v8 = ratios_ratioB1;
            										}
HXDLIN(  44)										Float isSoft7;
HXDLIN(  44)										if ((v8 < ratios_ratioC1)) {
HXLINE(  44)											isSoft7 = v8;
            										}
            										else {
HXLINE(  44)											isSoft7 = ratios_ratioC1;
            										}
HXDLIN(  44)										isSoft4 = (isSoft7 == ratios_ratioB1);
            									}
            									else {
HXLINE(  44)										isSoft4 = true;
            									}
            								}
            								else {
HXLINE(  44)									isSoft4 = (min_1 == ratios_ratioB1);
            								}
            							}
            							else {
HXLINE(  44)								if (softCA1) {
HXLINE(  44)									isSoft4 = (min_1 == ratios_ratioA1);
            								}
            								else {
HXLINE(  44)									isSoft4 = false;
            								}
            							}
            						}
HXDLIN(  44)						Float x06 = ((Float)-0.0739127852035666);
HXDLIN(  44)						Float y06 = ((Float)0.703233176253404202);
HXDLIN(  44)						Float x15 = ((Float)-0.353553390593273564);
HXDLIN(  44)						Float y15 = ((Float)0.61237243569579447);
HXDLIN(  44)						Float x22 = ((Float)-0.572061402817684139);
HXDLIN(  44)						Float y22 = ((Float)0.415626937777453465);
HXDLIN(  44)						Float x32 = ((Float)-0.691654801480225401);
HXDLIN(  44)						Float y32 = ((Float)0.147015766465198733);
HXDLIN(  44)						Float x42 = ((Float)-0.691654801480225512);
HXDLIN(  44)						Float y42 = ((Float)-0.147015766465198261);
HXDLIN(  44)						Float averageX2 = ((Float)0.);
HXDLIN(  44)						Float averageY2 = ((Float)0.);
HXDLIN(  44)						int hits2 = 0;
HXDLIN(  44)						Float fractionTotal4 = ((Float)0.);
HXDLIN(  44)						Float x16 = (px1 + x06);
HXDLIN(  44)						Float y16 = (py1 + y06);
HXDLIN(  44)						bool _hx_tmp47;
HXDLIN(  44)						bool _hx_tmp48;
HXDLIN(  44)						 ::pi_xy::iter::IntIterStart this52 = hitTriScalar1->xIter3;
HXDLIN(  44)						bool _hx_tmp49;
HXDLIN(  44)						if ((x16 > (this52->start - 1))) {
HXLINE(  44)							_hx_tmp49 = (x16 < (this52->max + 1));
            						}
            						else {
HXLINE(  44)							_hx_tmp49 = false;
            						}
HXDLIN(  44)						if (_hx_tmp49) {
HXLINE(  44)							 ::pi_xy::iter::IntIterStart this53 = hitTriScalar1->yIter3;
HXDLIN(  44)							if ((y16 > (this53->start - 1))) {
HXLINE(  44)								_hx_tmp48 = (y16 < (this53->max + 1));
            							}
            							else {
HXLINE(  44)								_hx_tmp48 = false;
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp48 = false;
            						}
HXDLIN(  44)						if (_hx_tmp48) {
HXLINE(  44)							Float s10 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x16)) + (hitTriScalar1->sy * y16));
HXDLIN(  44)							Float t10 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x16)) + (hitTriScalar1->ty * y16));
HXDLIN(  44)							bool _hx_tmp50;
HXDLIN(  44)							if (!((s10 <= 0))) {
HXLINE(  44)								_hx_tmp50 = (t10 <= 0);
            							}
            							else {
HXLINE(  44)								_hx_tmp50 = true;
            							}
HXDLIN(  44)							if (_hx_tmp50) {
HXLINE(  44)								_hx_tmp47 = false;
            							}
            							else {
HXLINE(  44)								if (((s10 + t10) < hitTriScalar1->A)) {
HXLINE(  44)									_hx_tmp47 = true;
            								}
            								else {
HXLINE(  44)									_hx_tmp47 = false;
            								}
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp47 = false;
            						}
HXDLIN(  44)						if (_hx_tmp47) {
HXLINE(  44)							hits2 = (hits2 + 1);
HXDLIN(  44)							averageX2 = (averageX2 + x06);
HXDLIN(  44)							averageY2 = (averageY2 + y06);
HXDLIN(  44)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  44)						Float x17 = (px1 + x15);
HXDLIN(  44)						Float y17 = (py1 + y15);
HXDLIN(  44)						bool _hx_tmp51;
HXDLIN(  44)						bool _hx_tmp52;
HXDLIN(  44)						 ::pi_xy::iter::IntIterStart this54 = hitTriScalar1->xIter3;
HXDLIN(  44)						bool _hx_tmp53;
HXDLIN(  44)						if ((x17 > (this54->start - 1))) {
HXLINE(  44)							_hx_tmp53 = (x17 < (this54->max + 1));
            						}
            						else {
HXLINE(  44)							_hx_tmp53 = false;
            						}
HXDLIN(  44)						if (_hx_tmp53) {
HXLINE(  44)							 ::pi_xy::iter::IntIterStart this55 = hitTriScalar1->yIter3;
HXDLIN(  44)							if ((y17 > (this55->start - 1))) {
HXLINE(  44)								_hx_tmp52 = (y17 < (this55->max + 1));
            							}
            							else {
HXLINE(  44)								_hx_tmp52 = false;
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp52 = false;
            						}
HXDLIN(  44)						if (_hx_tmp52) {
HXLINE(  44)							Float s11 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x17)) + (hitTriScalar1->sy * y17));
HXDLIN(  44)							Float t11 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x17)) + (hitTriScalar1->ty * y17));
HXDLIN(  44)							bool _hx_tmp54;
HXDLIN(  44)							if (!((s11 <= 0))) {
HXLINE(  44)								_hx_tmp54 = (t11 <= 0);
            							}
            							else {
HXLINE(  44)								_hx_tmp54 = true;
            							}
HXDLIN(  44)							if (_hx_tmp54) {
HXLINE(  44)								_hx_tmp51 = false;
            							}
            							else {
HXLINE(  44)								if (((s11 + t11) < hitTriScalar1->A)) {
HXLINE(  44)									_hx_tmp51 = true;
            								}
            								else {
HXLINE(  44)									_hx_tmp51 = false;
            								}
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp51 = false;
            						}
HXDLIN(  44)						if (_hx_tmp51) {
HXLINE(  44)							hits2 = (hits2 + 1);
HXDLIN(  44)							averageX2 = (averageX2 + x15);
HXDLIN(  44)							averageY2 = (averageY2 + y15);
HXDLIN(  44)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  44)						Float x18 = (px1 + x22);
HXDLIN(  44)						Float y18 = (py1 + y22);
HXDLIN(  44)						bool _hx_tmp55;
HXDLIN(  44)						bool _hx_tmp56;
HXDLIN(  44)						 ::pi_xy::iter::IntIterStart this56 = hitTriScalar1->xIter3;
HXDLIN(  44)						bool _hx_tmp57;
HXDLIN(  44)						if ((x18 > (this56->start - 1))) {
HXLINE(  44)							_hx_tmp57 = (x18 < (this56->max + 1));
            						}
            						else {
HXLINE(  44)							_hx_tmp57 = false;
            						}
HXDLIN(  44)						if (_hx_tmp57) {
HXLINE(  44)							 ::pi_xy::iter::IntIterStart this57 = hitTriScalar1->yIter3;
HXDLIN(  44)							if ((y18 > (this57->start - 1))) {
HXLINE(  44)								_hx_tmp56 = (y18 < (this57->max + 1));
            							}
            							else {
HXLINE(  44)								_hx_tmp56 = false;
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp56 = false;
            						}
HXDLIN(  44)						if (_hx_tmp56) {
HXLINE(  44)							Float s12 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x18)) + (hitTriScalar1->sy * y18));
HXDLIN(  44)							Float t12 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x18)) + (hitTriScalar1->ty * y18));
HXDLIN(  44)							bool _hx_tmp58;
HXDLIN(  44)							if (!((s12 <= 0))) {
HXLINE(  44)								_hx_tmp58 = (t12 <= 0);
            							}
            							else {
HXLINE(  44)								_hx_tmp58 = true;
            							}
HXDLIN(  44)							if (_hx_tmp58) {
HXLINE(  44)								_hx_tmp55 = false;
            							}
            							else {
HXLINE(  44)								if (((s12 + t12) < hitTriScalar1->A)) {
HXLINE(  44)									_hx_tmp55 = true;
            								}
            								else {
HXLINE(  44)									_hx_tmp55 = false;
            								}
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp55 = false;
            						}
HXDLIN(  44)						if (_hx_tmp55) {
HXLINE(  44)							hits2 = (hits2 + 1);
HXDLIN(  44)							averageX2 = (averageX2 + x22);
HXDLIN(  44)							averageY2 = (averageY2 + y22);
HXDLIN(  44)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  44)						Float x19 = (px1 + x32);
HXDLIN(  44)						Float y19 = (py1 + y32);
HXDLIN(  44)						bool _hx_tmp59;
HXDLIN(  44)						bool _hx_tmp60;
HXDLIN(  44)						 ::pi_xy::iter::IntIterStart this58 = hitTriScalar1->xIter3;
HXDLIN(  44)						bool _hx_tmp61;
HXDLIN(  44)						if ((x19 > (this58->start - 1))) {
HXLINE(  44)							_hx_tmp61 = (x19 < (this58->max + 1));
            						}
            						else {
HXLINE(  44)							_hx_tmp61 = false;
            						}
HXDLIN(  44)						if (_hx_tmp61) {
HXLINE(  44)							 ::pi_xy::iter::IntIterStart this59 = hitTriScalar1->yIter3;
HXDLIN(  44)							if ((y19 > (this59->start - 1))) {
HXLINE(  44)								_hx_tmp60 = (y19 < (this59->max + 1));
            							}
            							else {
HXLINE(  44)								_hx_tmp60 = false;
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp60 = false;
            						}
HXDLIN(  44)						if (_hx_tmp60) {
HXLINE(  44)							Float s13 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x19)) + (hitTriScalar1->sy * y19));
HXDLIN(  44)							Float t13 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x19)) + (hitTriScalar1->ty * y19));
HXDLIN(  44)							bool _hx_tmp62;
HXDLIN(  44)							if (!((s13 <= 0))) {
HXLINE(  44)								_hx_tmp62 = (t13 <= 0);
            							}
            							else {
HXLINE(  44)								_hx_tmp62 = true;
            							}
HXDLIN(  44)							if (_hx_tmp62) {
HXLINE(  44)								_hx_tmp59 = false;
            							}
            							else {
HXLINE(  44)								if (((s13 + t13) < hitTriScalar1->A)) {
HXLINE(  44)									_hx_tmp59 = true;
            								}
            								else {
HXLINE(  44)									_hx_tmp59 = false;
            								}
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp59 = false;
            						}
HXDLIN(  44)						if (_hx_tmp59) {
HXLINE(  44)							hits2 = (hits2 + 1);
HXDLIN(  44)							averageX2 = (averageX2 + x32);
HXDLIN(  44)							averageY2 = (averageY2 + y32);
HXDLIN(  44)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  44)						Float x20 = (px1 + x42);
HXDLIN(  44)						Float y20 = (py1 + y42);
HXDLIN(  44)						bool _hx_tmp63;
HXDLIN(  44)						bool _hx_tmp64;
HXDLIN(  44)						 ::pi_xy::iter::IntIterStart this60 = hitTriScalar1->xIter3;
HXDLIN(  44)						bool _hx_tmp65;
HXDLIN(  44)						if ((x20 > (this60->start - 1))) {
HXLINE(  44)							_hx_tmp65 = (x20 < (this60->max + 1));
            						}
            						else {
HXLINE(  44)							_hx_tmp65 = false;
            						}
HXDLIN(  44)						if (_hx_tmp65) {
HXLINE(  44)							 ::pi_xy::iter::IntIterStart this61 = hitTriScalar1->yIter3;
HXDLIN(  44)							if ((y20 > (this61->start - 1))) {
HXLINE(  44)								_hx_tmp64 = (y20 < (this61->max + 1));
            							}
            							else {
HXLINE(  44)								_hx_tmp64 = false;
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp64 = false;
            						}
HXDLIN(  44)						if (_hx_tmp64) {
HXLINE(  44)							Float s14 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x20)) + (hitTriScalar1->sy * y20));
HXDLIN(  44)							Float t14 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x20)) + (hitTriScalar1->ty * y20));
HXDLIN(  44)							bool _hx_tmp66;
HXDLIN(  44)							if (!((s14 <= 0))) {
HXLINE(  44)								_hx_tmp66 = (t14 <= 0);
            							}
            							else {
HXLINE(  44)								_hx_tmp66 = true;
            							}
HXDLIN(  44)							if (_hx_tmp66) {
HXLINE(  44)								_hx_tmp63 = false;
            							}
            							else {
HXLINE(  44)								if (((s14 + t14) < hitTriScalar1->A)) {
HXLINE(  44)									_hx_tmp63 = true;
            								}
            								else {
HXLINE(  44)									_hx_tmp63 = false;
            								}
            							}
            						}
            						else {
HXLINE(  44)							_hx_tmp63 = false;
            						}
HXDLIN(  44)						if (_hx_tmp63) {
HXLINE(  44)							hits2 = (hits2 + 1);
HXDLIN(  44)							averageX2 = (averageX2 + x42);
HXDLIN(  44)							averageY2 = (averageY2 + y42);
HXDLIN(  44)							fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            						}
HXDLIN(  44)						if ((hits2 != 0)) {
HXLINE( 244)							averageX2 = (px1 + (averageX2 / ( (Float)(hits2) )));
HXLINE( 245)							averageY2 = (py1 + (averageY2 / ( (Float)(hits2) )));
            						}
            						else {
HXLINE( 247)							averageX2 = ( (Float)(px1) );
HXLINE( 248)							averageY2 = ( (Float)(py1) );
            						}
HXLINE(  44)						Float fractionTotal5 = fractionTotal4;
HXDLIN(  44)						Float sampleData_fractionTotal1 = fractionTotal5;
HXDLIN(  44)						Float sampleData_averageX1 = averageX2;
HXDLIN(  44)						Float sampleData_averageY1 = averageY2;
HXDLIN(  44)						bool sampleData_notHit1 = (fractionTotal5 == ((Float)0.));
HXDLIN(  44)						Float aScale1 = sampleData_fractionTotal1;
HXDLIN(  44)						if (!((aScale1 > ((Float)0.9)))) {
HXLINE(  44)							aScale1 = ((aScale1 * ((Float)0.8)) + ((Float)0.2));
            						}
HXLINE( 142)						a8 = 0;
HXLINE( 143)						r6 = 0;
HXLINE( 144)						g6 = 0;
HXLINE( 145)						b6 = 0;
HXLINE(  44)						if (isSoft4) {
HXLINE(  44)							if (!(sampleData_notHit1)) {
HXLINE(  44)								Float pcx5 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  44)								Float pcy5 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  44)								Float dot315 = ((pcx5 * barycentric_bcx1) + (pcy5 * barycentric_bcy1));
HXDLIN(  44)								Float dot325 = ((pcx5 * barycentric_acx1) + (pcy5 * barycentric_acy1));
HXDLIN(  44)								Float ratioA6 = (((barycentric_dot221 * dot315) - (barycentric_dot121 * dot325)) * barycentric_denom11);
HXDLIN(  44)								Float ratioB6 = (((barycentric_dot111 * dot325) - (barycentric_dot121 * dot315)) * barycentric_denom11);
HXDLIN(  44)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN(  44)								Float ratiosAvg_ratioA3 = ratioA6;
HXDLIN(  44)								Float ratiosAvg_ratioB3 = ratioB6;
HXDLIN(  44)								Float ratiosAvg_ratioC3 = ratioC6;
HXDLIN(  44)								Float ratioA_3 = ratiosAvg_ratioA3;
HXDLIN(  44)								Float ratioB_3 = ratiosAvg_ratioB3;
HXDLIN(  44)								Float ratioC_3 = ratiosAvg_ratioC3;
HXDLIN(  44)								int i14 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_3) + (( (Float)(aB1) ) * ratioB_3)) + (( (Float)(aC1) ) * ratioC_3)));
HXDLIN(  44)								if ((i14 > 255)) {
HXLINE(  24)									i14 = 255;
            								}
HXLINE(  44)								if ((i14 < 0)) {
HXLINE(  25)									i14 = 0;
            								}
HXLINE( 152)								a8 = i14;
HXLINE(  44)								int i15 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_3) + (( (Float)(rB1) ) * ratioB_3)) + (( (Float)(rC1) ) * ratioC_3)));
HXDLIN(  44)								if ((i15 > 255)) {
HXLINE(  24)									i15 = 255;
            								}
HXLINE(  44)								if ((i15 < 0)) {
HXLINE(  25)									i15 = 0;
            								}
HXLINE( 153)								r6 = i15;
HXLINE(  44)								int i16 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_3) + (( (Float)(gB1) ) * ratioB_3)) + (( (Float)(gC1) ) * ratioC_3)));
HXDLIN(  44)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE(  44)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 154)								g6 = i16;
HXLINE(  44)								int i17 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_3) + (( (Float)(bB1) ) * ratioB_3)) + (( (Float)(bC1) ) * ratioC_3)));
HXDLIN(  44)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE(  44)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 155)								b6 = i17;
HXLINE(  44)								{
HXLINE(  44)									int a14;
HXDLIN(  44)									if ((aScale1 > ((Float)0.9))) {
HXLINE(  44)										a14 = a8;
            									}
            									else {
HXLINE(  44)										int i18 = ::Std_obj::_hx_int((( (Float)(a8) ) * aScale1));
HXDLIN(  44)										if ((i18 > 255)) {
HXLINE(  24)											i18 = 255;
            										}
HXLINE(  44)										if ((i18 < 0)) {
HXLINE(  25)											i18 = 0;
            										}
HXLINE(  44)										a14 = i18;
            									}
HXDLIN(  44)									int location3;
HXDLIN(  44)									if (pixelImage->useVirtualPos) {
HXLINE(  44)										location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  44)										location3 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN(  44)									bool _hx_tmp67;
HXDLIN(  44)									if (pixelImage->transparent) {
HXLINE(  44)										_hx_tmp67 = (a14 < 254);
            									}
            									else {
HXLINE(  44)										_hx_tmp67 = false;
            									}
HXDLIN(  44)									if (_hx_tmp67) {
HXLINE(  44)										int this62 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  44)										int old3;
HXDLIN(  44)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)											old3 = ((((((this62 >> 24) & 255) << 24) | ((this62 & 255) << 16)) | (((this62 >> 8) & 255) << 8)) | ((this62 >> 16) & 255));
            										}
            										else {
HXLINE(  44)											old3 = this62;
            										}
HXDLIN(  44)										int rhs3 = ((((a14 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  44)										Float a15;
HXDLIN(  44)										int this63 = ((old3 >> 24) & 255);
HXDLIN(  44)										if ((this63 == 0)) {
HXLINE(  44)											a15 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											a15 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float r13;
HXDLIN(  44)										int this64 = ((old3 >> 16) & 255);
HXDLIN(  44)										if ((this64 == 0)) {
HXLINE(  44)											r13 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											r13 = (( (Float)(this64) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float g13;
HXDLIN(  44)										int this65 = ((old3 >> 8) & 255);
HXDLIN(  44)										if ((this65 == 0)) {
HXLINE(  44)											g13 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											g13 = (( (Float)(this65) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float b14;
HXDLIN(  44)										int this66 = (old3 & 255);
HXDLIN(  44)										if ((this66 == 0)) {
HXLINE(  44)											b14 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											b14 = (( (Float)(this66) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float a24;
HXDLIN(  44)										int this67 = ((rhs3 >> 24) & 255);
HXDLIN(  44)										if ((this67 == 0)) {
HXLINE(  44)											a24 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											a24 = (( (Float)(this67) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float r23;
HXDLIN(  44)										int this68 = ((rhs3 >> 16) & 255);
HXDLIN(  44)										if ((this68 == 0)) {
HXLINE(  44)											r23 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											r23 = (( (Float)(this68) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float g23;
HXDLIN(  44)										int this69 = ((rhs3 >> 8) & 255);
HXDLIN(  44)										if ((this69 == 0)) {
HXLINE(  44)											g23 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											g23 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float b24;
HXDLIN(  44)										int this70 = (rhs3 & 255);
HXDLIN(  44)										if ((this70 == 0)) {
HXLINE(  44)											b24 = ((Float)0.);
            										}
            										else {
HXLINE(  44)											b24 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN(  44)										Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  44)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a34) + (r23 * a24))));
HXDLIN(  44)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a34) + (g23 * a24))));
HXDLIN(  44)										int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN(  44)										int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  44)										int blended3 = ((((a16 << 24) | (r7 << 16)) | (g7 << 8)) | b9);
HXDLIN(  44)										{
HXLINE(  44)											int _hx_tmp68;
HXDLIN(  44)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)												_hx_tmp68 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE(  44)												_hx_tmp68 = blended3;
            											}
HXDLIN(  44)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp68);
            										}
            									}
            									else {
HXLINE(  44)										int value3;
HXDLIN(  44)										if (pixelImage->isLittle) {
HXLINE(  44)											value3 = ((((a14 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE(  44)											value3 = ((((a14 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            										}
HXDLIN(  44)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value3);
            									}
            								}
            							}
            						}
            						else {
HXLINE(  44)							Float ratioA7 = ratios_ratioA1;
HXDLIN(  44)							Float ratioB7 = ratios_ratioB1;
HXDLIN(  44)							Float ratioC7 = ratios_ratioC1;
HXDLIN(  44)							Float hitTotal1 = sampleData_fractionTotal1;
HXDLIN(  44)							if (!(sampleData_notHit1)) {
HXLINE(  44)								Float x07 = ((Float)-0.0739127852035666);
HXDLIN(  44)								Float y07 = ((Float)0.703233176253404202);
HXDLIN(  44)								Float x110 = ((Float)-0.353553390593273564);
HXDLIN(  44)								Float y110 = ((Float)0.61237243569579447);
HXDLIN(  44)								Float x23 = ((Float)-0.572061402817684139);
HXDLIN(  44)								Float y23 = ((Float)0.415626937777453465);
HXDLIN(  44)								Float x33 = ((Float)-0.691654801480225401);
HXDLIN(  44)								Float y33 = ((Float)0.147015766465198733);
HXDLIN(  44)								Float x43 = ((Float)-0.691654801480225512);
HXDLIN(  44)								Float y43 = ((Float)-0.147015766465198261);
HXDLIN(  44)								Float averageX3 = ((Float)0.);
HXDLIN(  44)								Float averageY3 = ((Float)0.);
HXDLIN(  44)								int hits3 = 0;
HXDLIN(  44)								Float fractionTotal6 = ((Float)0.);
HXDLIN(  44)								Float x24 = (px1 + x07);
HXDLIN(  44)								Float y24 = (py1 + y07);
HXDLIN(  44)								bool _hx_tmp69;
HXDLIN(  44)								bool _hx_tmp70;
HXDLIN(  44)								 ::pi_xy::iter::IntIterStart this71 = scaled1->xIter3;
HXDLIN(  44)								bool _hx_tmp71;
HXDLIN(  44)								if ((x24 > (this71->start - 1))) {
HXLINE(  44)									_hx_tmp71 = (x24 < (this71->max + 1));
            								}
            								else {
HXLINE(  44)									_hx_tmp71 = false;
            								}
HXDLIN(  44)								if (_hx_tmp71) {
HXLINE(  44)									 ::pi_xy::iter::IntIterStart this72 = scaled1->yIter3;
HXDLIN(  44)									if ((y24 > (this72->start - 1))) {
HXLINE(  44)										_hx_tmp70 = (y24 < (this72->max + 1));
            									}
            									else {
HXLINE(  44)										_hx_tmp70 = false;
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp70 = false;
            								}
HXDLIN(  44)								if (_hx_tmp70) {
HXLINE(  44)									Float s15 = ((scaled1->s0 + (scaled1->sx * x24)) + (scaled1->sy * y24));
HXDLIN(  44)									Float t15 = ((scaled1->t0 + (scaled1->tx * x24)) + (scaled1->ty * y24));
HXDLIN(  44)									bool _hx_tmp72;
HXDLIN(  44)									if (!((s15 <= 0))) {
HXLINE(  44)										_hx_tmp72 = (t15 <= 0);
            									}
            									else {
HXLINE(  44)										_hx_tmp72 = true;
            									}
HXDLIN(  44)									if (_hx_tmp72) {
HXLINE(  44)										_hx_tmp69 = false;
            									}
            									else {
HXLINE(  44)										if (((s15 + t15) < scaled1->A)) {
HXLINE(  44)											_hx_tmp69 = true;
            										}
            										else {
HXLINE(  44)											_hx_tmp69 = false;
            										}
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp69 = false;
            								}
HXDLIN(  44)								if (_hx_tmp69) {
HXLINE(  44)									hits3 = (hits3 + 1);
HXDLIN(  44)									averageX3 = (averageX3 + x07);
HXDLIN(  44)									averageY3 = (averageY3 + y07);
HXDLIN(  44)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  44)								Float x25 = (px1 + x110);
HXDLIN(  44)								Float y25 = (py1 + y110);
HXDLIN(  44)								bool _hx_tmp73;
HXDLIN(  44)								bool _hx_tmp74;
HXDLIN(  44)								 ::pi_xy::iter::IntIterStart this73 = scaled1->xIter3;
HXDLIN(  44)								bool _hx_tmp75;
HXDLIN(  44)								if ((x25 > (this73->start - 1))) {
HXLINE(  44)									_hx_tmp75 = (x25 < (this73->max + 1));
            								}
            								else {
HXLINE(  44)									_hx_tmp75 = false;
            								}
HXDLIN(  44)								if (_hx_tmp75) {
HXLINE(  44)									 ::pi_xy::iter::IntIterStart this74 = scaled1->yIter3;
HXDLIN(  44)									if ((y25 > (this74->start - 1))) {
HXLINE(  44)										_hx_tmp74 = (y25 < (this74->max + 1));
            									}
            									else {
HXLINE(  44)										_hx_tmp74 = false;
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp74 = false;
            								}
HXDLIN(  44)								if (_hx_tmp74) {
HXLINE(  44)									Float s16 = ((scaled1->s0 + (scaled1->sx * x25)) + (scaled1->sy * y25));
HXDLIN(  44)									Float t16 = ((scaled1->t0 + (scaled1->tx * x25)) + (scaled1->ty * y25));
HXDLIN(  44)									bool _hx_tmp76;
HXDLIN(  44)									if (!((s16 <= 0))) {
HXLINE(  44)										_hx_tmp76 = (t16 <= 0);
            									}
            									else {
HXLINE(  44)										_hx_tmp76 = true;
            									}
HXDLIN(  44)									if (_hx_tmp76) {
HXLINE(  44)										_hx_tmp73 = false;
            									}
            									else {
HXLINE(  44)										if (((s16 + t16) < scaled1->A)) {
HXLINE(  44)											_hx_tmp73 = true;
            										}
            										else {
HXLINE(  44)											_hx_tmp73 = false;
            										}
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp73 = false;
            								}
HXDLIN(  44)								if (_hx_tmp73) {
HXLINE(  44)									hits3 = (hits3 + 1);
HXDLIN(  44)									averageX3 = (averageX3 + x110);
HXDLIN(  44)									averageY3 = (averageY3 + y110);
HXDLIN(  44)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  44)								Float x26 = (px1 + x23);
HXDLIN(  44)								Float y26 = (py1 + y23);
HXDLIN(  44)								bool _hx_tmp77;
HXDLIN(  44)								bool _hx_tmp78;
HXDLIN(  44)								 ::pi_xy::iter::IntIterStart this75 = scaled1->xIter3;
HXDLIN(  44)								bool _hx_tmp79;
HXDLIN(  44)								if ((x26 > (this75->start - 1))) {
HXLINE(  44)									_hx_tmp79 = (x26 < (this75->max + 1));
            								}
            								else {
HXLINE(  44)									_hx_tmp79 = false;
            								}
HXDLIN(  44)								if (_hx_tmp79) {
HXLINE(  44)									 ::pi_xy::iter::IntIterStart this76 = scaled1->yIter3;
HXDLIN(  44)									if ((y26 > (this76->start - 1))) {
HXLINE(  44)										_hx_tmp78 = (y26 < (this76->max + 1));
            									}
            									else {
HXLINE(  44)										_hx_tmp78 = false;
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp78 = false;
            								}
HXDLIN(  44)								if (_hx_tmp78) {
HXLINE(  44)									Float s17 = ((scaled1->s0 + (scaled1->sx * x26)) + (scaled1->sy * y26));
HXDLIN(  44)									Float t17 = ((scaled1->t0 + (scaled1->tx * x26)) + (scaled1->ty * y26));
HXDLIN(  44)									bool _hx_tmp80;
HXDLIN(  44)									if (!((s17 <= 0))) {
HXLINE(  44)										_hx_tmp80 = (t17 <= 0);
            									}
            									else {
HXLINE(  44)										_hx_tmp80 = true;
            									}
HXDLIN(  44)									if (_hx_tmp80) {
HXLINE(  44)										_hx_tmp77 = false;
            									}
            									else {
HXLINE(  44)										if (((s17 + t17) < scaled1->A)) {
HXLINE(  44)											_hx_tmp77 = true;
            										}
            										else {
HXLINE(  44)											_hx_tmp77 = false;
            										}
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp77 = false;
            								}
HXDLIN(  44)								if (_hx_tmp77) {
HXLINE(  44)									hits3 = (hits3 + 1);
HXDLIN(  44)									averageX3 = (averageX3 + x23);
HXDLIN(  44)									averageY3 = (averageY3 + y23);
HXDLIN(  44)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  44)								Float x27 = (px1 + x33);
HXDLIN(  44)								Float y27 = (py1 + y33);
HXDLIN(  44)								bool _hx_tmp81;
HXDLIN(  44)								bool _hx_tmp82;
HXDLIN(  44)								 ::pi_xy::iter::IntIterStart this77 = scaled1->xIter3;
HXDLIN(  44)								bool _hx_tmp83;
HXDLIN(  44)								if ((x27 > (this77->start - 1))) {
HXLINE(  44)									_hx_tmp83 = (x27 < (this77->max + 1));
            								}
            								else {
HXLINE(  44)									_hx_tmp83 = false;
            								}
HXDLIN(  44)								if (_hx_tmp83) {
HXLINE(  44)									 ::pi_xy::iter::IntIterStart this78 = scaled1->yIter3;
HXDLIN(  44)									if ((y27 > (this78->start - 1))) {
HXLINE(  44)										_hx_tmp82 = (y27 < (this78->max + 1));
            									}
            									else {
HXLINE(  44)										_hx_tmp82 = false;
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp82 = false;
            								}
HXDLIN(  44)								if (_hx_tmp82) {
HXLINE(  44)									Float s18 = ((scaled1->s0 + (scaled1->sx * x27)) + (scaled1->sy * y27));
HXDLIN(  44)									Float t18 = ((scaled1->t0 + (scaled1->tx * x27)) + (scaled1->ty * y27));
HXDLIN(  44)									bool _hx_tmp84;
HXDLIN(  44)									if (!((s18 <= 0))) {
HXLINE(  44)										_hx_tmp84 = (t18 <= 0);
            									}
            									else {
HXLINE(  44)										_hx_tmp84 = true;
            									}
HXDLIN(  44)									if (_hx_tmp84) {
HXLINE(  44)										_hx_tmp81 = false;
            									}
            									else {
HXLINE(  44)										if (((s18 + t18) < scaled1->A)) {
HXLINE(  44)											_hx_tmp81 = true;
            										}
            										else {
HXLINE(  44)											_hx_tmp81 = false;
            										}
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp81 = false;
            								}
HXDLIN(  44)								if (_hx_tmp81) {
HXLINE(  44)									hits3 = (hits3 + 1);
HXDLIN(  44)									averageX3 = (averageX3 + x33);
HXDLIN(  44)									averageY3 = (averageY3 + y33);
HXDLIN(  44)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  44)								Float x28 = (px1 + x43);
HXDLIN(  44)								Float y28 = (py1 + y43);
HXDLIN(  44)								bool _hx_tmp85;
HXDLIN(  44)								bool _hx_tmp86;
HXDLIN(  44)								 ::pi_xy::iter::IntIterStart this79 = scaled1->xIter3;
HXDLIN(  44)								bool _hx_tmp87;
HXDLIN(  44)								if ((x28 > (this79->start - 1))) {
HXLINE(  44)									_hx_tmp87 = (x28 < (this79->max + 1));
            								}
            								else {
HXLINE(  44)									_hx_tmp87 = false;
            								}
HXDLIN(  44)								if (_hx_tmp87) {
HXLINE(  44)									 ::pi_xy::iter::IntIterStart this80 = scaled1->yIter3;
HXDLIN(  44)									if ((y28 > (this80->start - 1))) {
HXLINE(  44)										_hx_tmp86 = (y28 < (this80->max + 1));
            									}
            									else {
HXLINE(  44)										_hx_tmp86 = false;
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp86 = false;
            								}
HXDLIN(  44)								if (_hx_tmp86) {
HXLINE(  44)									Float s19 = ((scaled1->s0 + (scaled1->sx * x28)) + (scaled1->sy * y28));
HXDLIN(  44)									Float t19 = ((scaled1->t0 + (scaled1->tx * x28)) + (scaled1->ty * y28));
HXDLIN(  44)									bool _hx_tmp88;
HXDLIN(  44)									if (!((s19 <= 0))) {
HXLINE(  44)										_hx_tmp88 = (t19 <= 0);
            									}
            									else {
HXLINE(  44)										_hx_tmp88 = true;
            									}
HXDLIN(  44)									if (_hx_tmp88) {
HXLINE(  44)										_hx_tmp85 = false;
            									}
            									else {
HXLINE(  44)										if (((s19 + t19) < scaled1->A)) {
HXLINE(  44)											_hx_tmp85 = true;
            										}
            										else {
HXLINE(  44)											_hx_tmp85 = false;
            										}
            									}
            								}
            								else {
HXLINE(  44)									_hx_tmp85 = false;
            								}
HXDLIN(  44)								if (_hx_tmp85) {
HXLINE(  44)									hits3 = (hits3 + 1);
HXDLIN(  44)									averageX3 = (averageX3 + x43);
HXDLIN(  44)									averageY3 = (averageY3 + y43);
HXDLIN(  44)									fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            								}
HXDLIN(  44)								if ((hits3 != 0)) {
HXLINE( 244)									averageX3 = (px1 + (averageX3 / ( (Float)(hits3) )));
HXLINE( 245)									averageY3 = (py1 + (averageY3 / ( (Float)(hits3) )));
            								}
            								else {
HXLINE( 247)									averageX3 = ( (Float)(px1) );
HXLINE( 248)									averageY3 = ( (Float)(py1) );
            								}
HXLINE(  44)								Float fractionTotal7 = fractionTotal6;
HXDLIN(  44)								Float sampleScaled_fractionTotal1 = fractionTotal7;
HXDLIN(  44)								Float sampleScaled_averageX1 = averageX3;
HXDLIN(  44)								Float sampleScaled_averageY1 = averageY3;
HXDLIN(  44)								bool sampleScaled_notHit1 = (fractionTotal7 == ((Float)0.));
HXDLIN(  44)								Float scaledTotal1 = sampleScaled_fractionTotal1;
HXDLIN(  44)								bool _hx_tmp89;
HXDLIN(  44)								if (!((scaledTotal1 > hitTotal1))) {
HXLINE(  44)									_hx_tmp89 = (hitTotal1 == ((Float)1.));
            								}
            								else {
HXLINE(  44)									_hx_tmp89 = true;
            								}
HXDLIN(  44)								if (_hx_tmp89) {
HXLINE(  44)									Float pcx6 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  44)									Float pcy6 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  44)									Float dot316 = ((pcx6 * barycentric_bcx1) + (pcy6 * barycentric_bcy1));
HXDLIN(  44)									Float dot326 = ((pcx6 * barycentric_acx1) + (pcy6 * barycentric_acy1));
HXDLIN(  44)									Float ratioA8 = (((barycentric_dot221 * dot316) - (barycentric_dot121 * dot326)) * barycentric_denom11);
HXDLIN(  44)									Float ratioB8 = (((barycentric_dot111 * dot326) - (barycentric_dot121 * dot316)) * barycentric_denom11);
HXDLIN(  44)									Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN(  44)									Float ratiosAvg_ratioA4 = ratioA8;
HXDLIN(  44)									Float ratiosAvg_ratioB4 = ratioB8;
HXDLIN(  44)									Float ratiosAvg_ratioC4 = ratioC8;
HXDLIN(  44)									Float ratioA_4 = ratiosAvg_ratioA4;
HXDLIN(  44)									Float ratioB_4 = ratiosAvg_ratioB4;
HXDLIN(  44)									Float ratioC_4 = ratiosAvg_ratioC4;
HXDLIN(  44)									int i19 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_4) + (( (Float)(aB1) ) * ratioB_4)) + (( (Float)(aC1) ) * ratioC_4)));
HXDLIN(  44)									if ((i19 > 255)) {
HXLINE(  24)										i19 = 255;
            									}
HXLINE(  44)									if ((i19 < 0)) {
HXLINE(  25)										i19 = 0;
            									}
HXLINE( 187)									a8 = i19;
HXLINE(  44)									int i20 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_4) + (( (Float)(rB1) ) * ratioB_4)) + (( (Float)(rC1) ) * ratioC_4)));
HXDLIN(  44)									if ((i20 > 255)) {
HXLINE(  24)										i20 = 255;
            									}
HXLINE(  44)									if ((i20 < 0)) {
HXLINE(  25)										i20 = 0;
            									}
HXLINE( 188)									r6 = i20;
HXLINE(  44)									int i21 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_4) + (( (Float)(gB1) ) * ratioB_4)) + (( (Float)(gC1) ) * ratioC_4)));
HXDLIN(  44)									if ((i21 > 255)) {
HXLINE(  24)										i21 = 255;
            									}
HXLINE(  44)									if ((i21 < 0)) {
HXLINE(  25)										i21 = 0;
            									}
HXLINE( 189)									g6 = i21;
HXLINE(  44)									int i22 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_4) + (( (Float)(bB1) ) * ratioB_4)) + (( (Float)(bC1) ) * ratioC_4)));
HXDLIN(  44)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE(  44)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE( 190)									b6 = i22;
HXLINE(  44)									{
HXLINE(  44)										int location4;
HXDLIN(  44)										if (pixelImage->useVirtualPos) {
HXLINE(  44)											location4 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  44)											location4 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            										}
HXDLIN(  44)										bool _hx_tmp90;
HXDLIN(  44)										if (pixelImage->transparent) {
HXLINE(  44)											_hx_tmp90 = (a8 < 254);
            										}
            										else {
HXLINE(  44)											_hx_tmp90 = false;
            										}
HXDLIN(  44)										if (_hx_tmp90) {
HXLINE(  44)											int this81 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN(  44)											int old4;
HXDLIN(  44)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)												old4 = ((((((this81 >> 24) & 255) << 24) | ((this81 & 255) << 16)) | (((this81 >> 8) & 255) << 8)) | ((this81 >> 16) & 255));
            											}
            											else {
HXLINE(  44)												old4 = this81;
            											}
HXDLIN(  44)											int rhs4 = ((((a8 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  44)											Float a17;
HXDLIN(  44)											int this82 = ((old4 >> 24) & 255);
HXDLIN(  44)											if ((this82 == 0)) {
HXLINE(  44)												a17 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												a17 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float r14;
HXDLIN(  44)											int this83 = ((old4 >> 16) & 255);
HXDLIN(  44)											if ((this83 == 0)) {
HXLINE(  44)												r14 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												r14 = (( (Float)(this83) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float g14;
HXDLIN(  44)											int this84 = ((old4 >> 8) & 255);
HXDLIN(  44)											if ((this84 == 0)) {
HXLINE(  44)												g14 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												g14 = (( (Float)(this84) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float b15;
HXDLIN(  44)											int this85 = (old4 & 255);
HXDLIN(  44)											if ((this85 == 0)) {
HXLINE(  44)												b15 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												b15 = (( (Float)(this85) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float a25;
HXDLIN(  44)											int this86 = ((rhs4 >> 24) & 255);
HXDLIN(  44)											if ((this86 == 0)) {
HXLINE(  44)												a25 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												a25 = (( (Float)(this86) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float r24;
HXDLIN(  44)											int this87 = ((rhs4 >> 16) & 255);
HXDLIN(  44)											if ((this87 == 0)) {
HXLINE(  44)												r24 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												r24 = (( (Float)(this87) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float g24;
HXDLIN(  44)											int this88 = ((rhs4 >> 8) & 255);
HXDLIN(  44)											if ((this88 == 0)) {
HXLINE(  44)												g24 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												g24 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float b25;
HXDLIN(  44)											int this89 = (rhs4 & 255);
HXDLIN(  44)											if ((this89 == 0)) {
HXLINE(  44)												b25 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												b25 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float a35 = (a17 * (( (Float)(1) ) - a25));
HXDLIN(  44)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a35) + (r24 * a25))));
HXDLIN(  44)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a35) + (g24 * a25))));
HXDLIN(  44)											int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN(  44)											int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  44)											int blended4 = ((((a18 << 24) | (r8 << 16)) | (g8 << 8)) | b10);
HXDLIN(  44)											{
HXLINE(  44)												int _hx_tmp91;
HXDLIN(  44)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)													_hx_tmp91 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE(  44)													_hx_tmp91 = blended4;
            												}
HXDLIN(  44)												::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp91);
            											}
            										}
            										else {
HXLINE(  44)											int value4;
HXDLIN(  44)											if (pixelImage->isLittle) {
HXLINE(  44)												value4 = ((((a8 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  44)												value4 = ((((a8 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            											}
HXDLIN(  44)											::iterMagic::Iimg_obj::set(pixelImage->image,location4,value4);
            										}
            									}
            								}
            								else {
HXLINE(  44)									Float pcx7 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  44)									Float pcy7 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  44)									Float dot317 = ((pcx7 * barycentric_bcx1) + (pcy7 * barycentric_bcy1));
HXDLIN(  44)									Float dot327 = ((pcx7 * barycentric_acx1) + (pcy7 * barycentric_acy1));
HXDLIN(  44)									Float ratioA9 = (((barycentric_dot221 * dot317) - (barycentric_dot121 * dot327)) * barycentric_denom11);
HXDLIN(  44)									Float ratioB9 = (((barycentric_dot111 * dot327) - (barycentric_dot121 * dot317)) * barycentric_denom11);
HXDLIN(  44)									Float ratioC9 = ((((Float)1.0) - ratioB9) - ratioA9);
HXDLIN(  44)									Float ratiosAvg_ratioA5 = ratioA9;
HXDLIN(  44)									Float ratiosAvg_ratioB5 = ratioB9;
HXDLIN(  44)									Float ratiosAvg_ratioC5 = ratioC9;
HXDLIN(  44)									Float ratioA_5 = ratiosAvg_ratioA5;
HXDLIN(  44)									Float ratioB_5 = ratiosAvg_ratioB5;
HXDLIN(  44)									Float ratioC_5 = ratiosAvg_ratioC5;
HXDLIN(  44)									int i23 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_5) + (( (Float)(aB1) ) * ratioB_5)) + (( (Float)(aC1) ) * ratioC_5)));
HXDLIN(  44)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE(  44)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE( 198)									a8 = i23;
HXLINE(  44)									int i24 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_5) + (( (Float)(rB1) ) * ratioB_5)) + (( (Float)(rC1) ) * ratioC_5)));
HXDLIN(  44)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE(  44)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE( 199)									r6 = i24;
HXLINE(  44)									int i25 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_5) + (( (Float)(gB1) ) * ratioB_5)) + (( (Float)(gC1) ) * ratioC_5)));
HXDLIN(  44)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE(  44)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE( 200)									g6 = i25;
HXLINE(  44)									int i26 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_5) + (( (Float)(bB1) ) * ratioB_5)) + (( (Float)(bC1) ) * ratioC_5)));
HXDLIN(  44)									if ((i26 > 255)) {
HXLINE(  24)										i26 = 255;
            									}
HXLINE(  44)									if ((i26 < 0)) {
HXLINE(  25)										i26 = 0;
            									}
HXLINE( 201)									b6 = i26;
HXLINE(  44)									{
HXLINE(  44)										int a19;
HXDLIN(  44)										if ((aScale1 > ((Float)0.9))) {
HXLINE(  44)											a19 = a8;
            										}
            										else {
HXLINE(  44)											int i27 = ::Std_obj::_hx_int((( (Float)(a8) ) * aScale1));
HXDLIN(  44)											if ((i27 > 255)) {
HXLINE(  24)												i27 = 255;
            											}
HXLINE(  44)											if ((i27 < 0)) {
HXLINE(  25)												i27 = 0;
            											}
HXLINE(  44)											a19 = i27;
            										}
HXDLIN(  44)										int location5;
HXDLIN(  44)										if (pixelImage->useVirtualPos) {
HXLINE(  44)											location5 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  44)											location5 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            										}
HXDLIN(  44)										bool _hx_tmp92;
HXDLIN(  44)										if (pixelImage->transparent) {
HXLINE(  44)											_hx_tmp92 = (a19 < 254);
            										}
            										else {
HXLINE(  44)											_hx_tmp92 = false;
            										}
HXDLIN(  44)										if (_hx_tmp92) {
HXLINE(  44)											int this90 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  44)											int old5;
HXDLIN(  44)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)												old5 = ((((((this90 >> 24) & 255) << 24) | ((this90 & 255) << 16)) | (((this90 >> 8) & 255) << 8)) | ((this90 >> 16) & 255));
            											}
            											else {
HXLINE(  44)												old5 = this90;
            											}
HXDLIN(  44)											int rhs5 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  44)											Float a110;
HXDLIN(  44)											int this91 = ((old5 >> 24) & 255);
HXDLIN(  44)											if ((this91 == 0)) {
HXLINE(  44)												a110 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float r15;
HXDLIN(  44)											int this92 = ((old5 >> 16) & 255);
HXDLIN(  44)											if ((this92 == 0)) {
HXLINE(  44)												r15 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float g15;
HXDLIN(  44)											int this93 = ((old5 >> 8) & 255);
HXDLIN(  44)											if ((this93 == 0)) {
HXLINE(  44)												g15 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float b16;
HXDLIN(  44)											int this94 = (old5 & 255);
HXDLIN(  44)											if ((this94 == 0)) {
HXLINE(  44)												b16 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												b16 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float a26;
HXDLIN(  44)											int this95 = ((rhs5 >> 24) & 255);
HXDLIN(  44)											if ((this95 == 0)) {
HXLINE(  44)												a26 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												a26 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float r25;
HXDLIN(  44)											int this96 = ((rhs5 >> 16) & 255);
HXDLIN(  44)											if ((this96 == 0)) {
HXLINE(  44)												r25 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float g25;
HXDLIN(  44)											int this97 = ((rhs5 >> 8) & 255);
HXDLIN(  44)											if ((this97 == 0)) {
HXLINE(  44)												g25 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float b26;
HXDLIN(  44)											int this98 = (rhs5 & 255);
HXDLIN(  44)											if ((this98 == 0)) {
HXLINE(  44)												b26 = ((Float)0.);
            											}
            											else {
HXLINE(  44)												b26 = (( (Float)(this98) ) / ( (Float)(255) ));
            											}
HXDLIN(  44)											Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  44)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a36) + (r25 * a26))));
HXDLIN(  44)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a36) + (g25 * a26))));
HXDLIN(  44)											int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a36) + (b26 * a26))));
HXDLIN(  44)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  44)											int blended5 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b17);
HXDLIN(  44)											{
HXLINE(  44)												int _hx_tmp93;
HXDLIN(  44)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)													_hx_tmp93 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXLINE(  44)													_hx_tmp93 = blended5;
            												}
HXDLIN(  44)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp93);
            											}
            										}
            										else {
HXLINE(  44)											int value5;
HXDLIN(  44)											if (pixelImage->isLittle) {
HXLINE(  44)												value5 = ((((a19 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            											}
            											else {
HXLINE(  44)												value5 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            											}
HXDLIN(  44)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,value5);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  44)		 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  44)		 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  44)		Float v_ty;
HXDLIN(  44)		Float v_tx;
HXDLIN(  44)		Float v_t0;
HXDLIN(  44)		Float v_sy;
HXDLIN(  44)		Float v_sx;
HXDLIN(  44)		Float v_s0;
HXDLIN(  44)		Float v_A;
HXDLIN(  44)		Float ax6 = ax3;
HXDLIN(  44)		Float ay6 = ay3;
HXDLIN(  44)		 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  44)		Float bx2 = bx1;
HXDLIN(  44)		Float by2 = by1;
HXDLIN(  44)		Float cx2 = cx1;
HXDLIN(  44)		Float cy2 = cy1;
HXDLIN(  44)		bool adjustWinding2 = (((((ax6 * by2) - (bx2 * ay6)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay6) - (ax6 * cy2))) > 0);
HXDLIN(  44)		if (!(adjustWinding2)) {
HXLINE(  44)			Float bx_6 = bx2;
HXDLIN(  44)			Float by_6 = by2;
HXLINE(  24)			bx2 = cx2;
HXLINE(  25)			by2 = cy2;
HXLINE(  26)			cx2 = bx_6;
HXLINE(  27)			cy2 = by_6;
            		}
HXLINE(  44)		Float v_ax = ax6;
HXDLIN(  44)		Float v_ay = ay6;
HXDLIN(  44)		Float v_bx = bx2;
HXDLIN(  44)		Float v_by = by2;
HXDLIN(  44)		Float v_cx = cx2;
HXDLIN(  44)		Float v_cy = cy2;
HXDLIN(  44)		bool v_preCalculated = true;
HXDLIN(  44)		{
HXLINE(  44)			v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  44)			v_sx = (v_cy - v_ay);
HXDLIN(  44)			v_sy = (v_ax - v_cx);
HXDLIN(  44)			v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  44)			v_tx = (v_ay - v_by);
HXDLIN(  44)			v_ty = (v_bx - v_ax);
HXDLIN(  44)			v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  44)			Float a27 = v_ax;
HXDLIN(  44)			Float b18 = v_bx;
HXDLIN(  44)			Float c4 = v_cx;
HXDLIN(  44)			if ((a27 > b18)) {
HXLINE(  44)				if ((a27 > c4)) {
HXLINE(  44)					int min8;
HXDLIN(  44)					if ((b18 > c4)) {
HXLINE(  44)						min8 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE(  44)						min8 = ::Math_obj::floor(b18);
            					}
HXDLIN(  44)					int ii_min16 = min8;
HXDLIN(  44)					int ii_max16 = ::Math_obj::ceil(a27);
HXDLIN(  44)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE(  44)					int ii_min17 = ::Math_obj::floor(b18);
HXDLIN(  44)					int ii_max17 = ::Math_obj::ceil(c4);
HXDLIN(  44)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE(  44)				if ((b18 > c4)) {
HXLINE(  44)					int min9;
HXDLIN(  44)					if ((a27 > c4)) {
HXLINE(  44)						min9 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE(  44)						min9 = ::Math_obj::ceil(a27);
            					}
HXDLIN(  44)					int ii_min18 = min9;
HXDLIN(  44)					int ii_max18 = ::Math_obj::ceil(b18);
HXDLIN(  44)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE(  44)					int ii_min19 = ::Math_obj::floor(a27);
HXDLIN(  44)					int ii_max19 = ::Math_obj::ceil(c4);
HXDLIN(  44)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN(  44)			Float a28 = v_ay;
HXDLIN(  44)			Float b19 = v_by;
HXDLIN(  44)			Float c5 = v_cy;
HXDLIN(  44)			if ((a28 > b19)) {
HXLINE(  44)				if ((a28 > c5)) {
HXLINE(  44)					int min10;
HXDLIN(  44)					if ((b19 > c5)) {
HXLINE(  44)						min10 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE(  44)						min10 = ::Math_obj::floor(b19);
            					}
HXDLIN(  44)					int ii_min20 = min10;
HXDLIN(  44)					int ii_max20 = ::Math_obj::ceil(a28);
HXDLIN(  44)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE(  44)					int ii_min21 = ::Math_obj::floor(b19);
HXDLIN(  44)					int ii_max21 = ::Math_obj::ceil(c5);
HXDLIN(  44)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE(  44)				if ((b19 > c5)) {
HXLINE(  44)					int min11;
HXDLIN(  44)					if ((a28 > c5)) {
HXLINE(  44)						min11 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE(  44)						min11 = ::Math_obj::ceil(a28);
            					}
HXDLIN(  44)					int ii_min22 = min11;
HXDLIN(  44)					int ii_max22 = ::Math_obj::ceil(b19);
HXDLIN(  44)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE(  44)					int ii_min23 = ::Math_obj::floor(a28);
HXDLIN(  44)					int ii_max23 = ::Math_obj::ceil(c5);
HXDLIN(  44)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
            		}
HXLINE(  45)		return  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,q->ax,q->ay,q->bx,q->by,q->cx,q->cy,q->dx,q->dy,hasHit);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(TriPixelSmoothGrad_Fields__obj,quadGradPentBary,return )

 ::pi_xy::algo::HitTri TriPixelSmoothGrad_Fields__obj::triGradPentBaryBottom( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,int colorA,Float bx,Float by,int colorB,Float cx,Float cy,int colorC,::hx::Null< bool >  __o_hasHit,::hx::Null< bool >  __o_hasUndo){
            		bool hasHit = __o_hasHit.Default(false);
            		bool hasUndo = __o_hasUndo.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_c88345def33277a9_52_triGradPentBaryBottom)
HXLINE(  55)		bool softAB = true;
HXLINE(  56)		bool softBC = false;
HXLINE(  57)		bool softCA = true;
HXLINE(  58)		bool adjustWinding = (((((ax * by) - (bx * ay)) + ((bx * cy) - (cx * by))) + ((cx * ay) - (ax * cy))) > 0);
HXLINE(  59)		if (!(adjustWinding)) {
HXLINE(  60)			Float bx_ = bx;
HXLINE(  61)			Float by_ = by;
HXLINE(  62)			bx = cx;
HXLINE(  63)			by = cy;
HXLINE(  64)			cx = bx_;
HXLINE(  65)			cy = by_;
HXLINE(  66)			bool softAB1 = true;
HXLINE(  67)			bool softBC1 = true;
HXLINE(  68)			bool softCA1 = false;
            		}
HXLINE(  70)		int aA = ((colorB >> 24) & 255);
HXDLIN(  70)		int rA = ((colorB >> 16) & 255);
HXDLIN(  70)		int gA = ((colorB >> 8) & 255);
HXDLIN(  70)		int bA = (colorB & 255);
HXDLIN(  70)		int aB = ((colorA >> 24) & 255);
HXDLIN(  70)		int rB = ((colorA >> 16) & 255);
HXDLIN(  70)		int gB = ((colorA >> 8) & 255);
HXDLIN(  70)		int bB = (colorA & 255);
HXDLIN(  70)		int aC = ((colorC >> 24) & 255);
HXDLIN(  70)		int rC = ((colorC >> 16) & 255);
HXDLIN(  70)		int gC = ((colorC >> 8) & 255);
HXDLIN(  70)		int bC = (colorC & 255);
HXDLIN(  70)		int a = 0;
HXDLIN(  70)		int r = 0;
HXDLIN(  70)		int g = 0;
HXDLIN(  70)		int b = 0;
HXDLIN(  70)		 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  70)		 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN(  70)		 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN(  70)		Float barycentric_dot22;
HXDLIN(  70)		Float barycentric_dot12;
HXDLIN(  70)		Float barycentric_dot11;
HXDLIN(  70)		Float barycentric_denom1;
HXDLIN(  70)		Float barycentric_bcy;
HXDLIN(  70)		Float barycentric_bcx;
HXDLIN(  70)		Float barycentric_acy;
HXDLIN(  70)		Float barycentric_acx;
HXDLIN(  70)		Float barycentric_ax = hitTriScalar->ax;
HXDLIN(  70)		Float barycentric_ay = hitTriScalar->ay;
HXDLIN(  70)		Float barycentric_bx = hitTriScalar->bx;
HXDLIN(  70)		Float barycentric_by = hitTriScalar->by;
HXDLIN(  70)		Float barycentric_cx = hitTriScalar->cx;
HXDLIN(  70)		Float barycentric_cy = hitTriScalar->cy;
HXDLIN(  70)		bool barycentric_preCalculated = true;
HXDLIN(  70)		{
HXLINE(  70)			barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN(  70)			barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN(  70)			barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN(  70)			barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN(  70)			Float ax1 = barycentric_bcx;
HXDLIN(  70)			Float ay1 = barycentric_bcy;
HXDLIN(  70)			barycentric_dot11 = ((ax1 * ax1) + (ay1 * ay1));
HXDLIN(  70)			barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN(  70)			Float ax2 = barycentric_acx;
HXDLIN(  70)			Float ay2 = barycentric_acy;
HXDLIN(  70)			barycentric_dot22 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  70)			barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN(  70)			Float a1 = barycentric_ax;
HXDLIN(  70)			Float b1 = barycentric_bx;
HXDLIN(  70)			Float c = barycentric_cx;
HXDLIN(  70)			if ((a1 > b1)) {
HXLINE(  70)				if ((a1 > c)) {
HXLINE(  70)					int min;
HXDLIN(  70)					if ((b1 > c)) {
HXLINE(  70)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  70)						min = ::Math_obj::floor(b1);
            					}
HXDLIN(  70)					int ii_min = min;
HXDLIN(  70)					int ii_max = ::Math_obj::ceil(a1);
HXDLIN(  70)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE(  70)					int ii_min1 = ::Math_obj::floor(b1);
HXDLIN(  70)					int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  70)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE(  70)				if ((b1 > c)) {
HXLINE(  70)					int min1;
HXDLIN(  70)					if ((a1 > c)) {
HXLINE(  70)						min1 = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  70)						min1 = ::Math_obj::ceil(a1);
            					}
HXDLIN(  70)					int ii_min2 = min1;
HXDLIN(  70)					int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN(  70)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE(  70)					int ii_min3 = ::Math_obj::floor(a1);
HXDLIN(  70)					int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  70)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  70)			Float a2 = barycentric_ay;
HXDLIN(  70)			Float b2 = barycentric_by;
HXDLIN(  70)			Float c1 = barycentric_cy;
HXDLIN(  70)			if ((a2 > b2)) {
HXLINE(  70)				if ((a2 > c1)) {
HXLINE(  70)					int min2;
HXDLIN(  70)					if ((b2 > c1)) {
HXLINE(  70)						min2 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  70)						min2 = ::Math_obj::floor(b2);
            					}
HXDLIN(  70)					int ii_min4 = min2;
HXDLIN(  70)					int ii_max4 = ::Math_obj::ceil(a2);
HXDLIN(  70)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE(  70)					int ii_min5 = ::Math_obj::floor(b2);
HXDLIN(  70)					int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  70)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE(  70)				if ((b2 > c1)) {
HXLINE(  70)					int min3;
HXDLIN(  70)					if ((a2 > c1)) {
HXLINE(  70)						min3 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  70)						min3 = ::Math_obj::ceil(a2);
            					}
HXDLIN(  70)					int ii_min6 = min3;
HXDLIN(  70)					int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN(  70)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE(  70)					int ii_min7 = ::Math_obj::floor(a2);
HXDLIN(  70)					int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  70)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
            		}
HXDLIN(  70)		Float scaleA;
HXDLIN(  70)		bool scaleA1;
HXDLIN(  70)		if (!(softAB)) {
HXLINE(  70)			scaleA1 = softCA;
            		}
            		else {
HXLINE(  70)			scaleA1 = true;
            		}
HXDLIN(  70)		if (scaleA1) {
HXLINE(  70)			scaleA = ((Float)1.5);
            		}
            		else {
HXLINE(  70)			scaleA = ((Float)1.);
            		}
HXDLIN(  70)		Float scaleB;
HXDLIN(  70)		bool scaleB1;
HXDLIN(  70)		if (!(softAB)) {
HXLINE(  70)			scaleB1 = softBC;
            		}
            		else {
HXLINE(  70)			scaleB1 = true;
            		}
HXDLIN(  70)		if (scaleB1) {
HXLINE(  70)			scaleB = ((Float)1.5);
            		}
            		else {
HXLINE(  70)			scaleB = ((Float)1.);
            		}
HXDLIN(  70)		Float scaleC;
HXDLIN(  70)		bool scaleC1;
HXDLIN(  70)		if (!(softBC)) {
HXLINE(  70)			scaleC1 = softCA;
            		}
            		else {
HXLINE(  70)			scaleC1 = true;
            		}
HXDLIN(  70)		if (scaleC1) {
HXLINE(  70)			scaleC = ((Float)1.5);
            		}
            		else {
HXLINE(  70)			scaleC = ((Float)1.);
            		}
HXDLIN(  70)		Float x0 = ((Float)0.);
HXDLIN(  70)		Float y0 = ((Float)0.);
HXDLIN(  70)		bool isScaledA = true;
HXDLIN(  70)		bool isScaledB = true;
HXDLIN(  70)		bool isScaledC = true;
HXDLIN(  70)		if (isScaledA) {
HXLINE(  70)			if (isScaledB) {
HXLINE(  70)				if (isScaledC) {
HXLINE(  82)					x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)					y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x0 = hitTriScalar->cx;
HXLINE(  80)					y0 = hitTriScalar->cy;
            				}
            			}
            			else {
HXLINE(  70)				if (isScaledC) {
HXLINE(  76)					x0 = hitTriScalar->bx;
HXLINE(  77)					y0 = hitTriScalar->by;
            				}
            				else {
HXLINE(  73)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            				}
            			}
            		}
            		else {
HXLINE(  70)			if (isScaledB) {
HXLINE(  70)				if (isScaledC) {
HXLINE(  70)					x0 = hitTriScalar->ax;
HXLINE(  71)					y0 = hitTriScalar->ay;
            				}
            				else {
HXLINE(  67)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            				}
            			}
            			else {
HXLINE(  70)				if (isScaledC) {
HXLINE(  64)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            				}
            				else {
HXLINE(  61)					x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)					y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  70)		Float ax_;
HXDLIN(  70)		if (isScaledA) {
HXLINE(  70)			Float point = hitTriScalar->ax;
HXDLIN(  70)			point = (point - x0);
HXDLIN(  70)			point = (point * ((Float)0.999));
HXDLIN(  70)			point = (point + x0);
HXDLIN(  70)			ax_ = point;
            		}
            		else {
HXLINE(  70)			ax_ = hitTriScalar->ax;
            		}
HXDLIN(  70)		Float ay_;
HXDLIN(  70)		if (isScaledA) {
HXLINE(  70)			Float point1 = hitTriScalar->ay;
HXDLIN(  70)			point1 = (point1 - y0);
HXDLIN(  70)			point1 = (point1 * ((Float)0.999));
HXDLIN(  70)			point1 = (point1 + y0);
HXDLIN(  70)			ay_ = point1;
            		}
            		else {
HXLINE(  70)			ay_ = hitTriScalar->ay;
            		}
HXDLIN(  70)		Float bx_1;
HXDLIN(  70)		if (isScaledB) {
HXLINE(  70)			Float point2 = hitTriScalar->bx;
HXDLIN(  70)			point2 = (point2 - x0);
HXDLIN(  70)			point2 = (point2 * ((Float)0.999));
HXDLIN(  70)			point2 = (point2 + x0);
HXDLIN(  70)			bx_1 = point2;
            		}
            		else {
HXLINE(  70)			bx_1 = hitTriScalar->bx;
            		}
HXDLIN(  70)		Float by_1;
HXDLIN(  70)		if (isScaledB) {
HXLINE(  70)			Float point3 = hitTriScalar->by;
HXDLIN(  70)			point3 = (point3 - y0);
HXDLIN(  70)			point3 = (point3 * ((Float)0.999));
HXDLIN(  70)			point3 = (point3 + y0);
HXDLIN(  70)			by_1 = point3;
            		}
            		else {
HXLINE(  70)			by_1 = hitTriScalar->by;
            		}
HXDLIN(  70)		Float cx_;
HXDLIN(  70)		if (isScaledC) {
HXLINE(  70)			Float point4 = hitTriScalar->cx;
HXDLIN(  70)			point4 = (point4 - x0);
HXDLIN(  70)			point4 = (point4 * ((Float)0.999));
HXDLIN(  70)			point4 = (point4 + x0);
HXDLIN(  70)			cx_ = point4;
            		}
            		else {
HXLINE(  70)			cx_ = hitTriScalar->cx;
            		}
HXDLIN(  70)		Float cy_;
HXDLIN(  70)		if (isScaledC) {
HXLINE(  70)			Float point5 = hitTriScalar->cy;
HXDLIN(  70)			point5 = (point5 - y0);
HXDLIN(  70)			point5 = (point5 * ((Float)0.999));
HXDLIN(  70)			point5 = (point5 + y0);
HXDLIN(  70)			cy_ = point5;
            		}
            		else {
HXLINE(  70)			cy_ = hitTriScalar->cy;
            		}
HXDLIN(  70)		 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_1,by_1,cx_,cy_,true);
HXDLIN(  70)		Float x01 = ((Float)0.);
HXDLIN(  70)		Float y01 = ((Float)0.);
HXDLIN(  70)		bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN(  70)		bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN(  70)		bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN(  70)		if (isScaledA1) {
HXLINE(  70)			if (isScaledB1) {
HXLINE(  70)				if (isScaledC1) {
HXLINE(  82)					x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)					y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x01 = scaled->cx;
HXLINE(  80)					y01 = scaled->cy;
            				}
            			}
            			else {
HXLINE(  70)				if (isScaledC1) {
HXLINE(  76)					x01 = scaled->bx;
HXLINE(  77)					y01 = scaled->by;
            				}
            				else {
HXLINE(  73)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            				}
            			}
            		}
            		else {
HXLINE(  70)			if (isScaledB1) {
HXLINE(  70)				if (isScaledC1) {
HXLINE(  70)					x01 = scaled->ax;
HXLINE(  71)					y01 = scaled->ay;
            				}
            				else {
HXLINE(  67)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            				}
            			}
            			else {
HXLINE(  70)				if (isScaledC1) {
HXLINE(  64)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            				}
            				else {
HXLINE(  61)					x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)					y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  70)		Float ax_1;
HXDLIN(  70)		if (isScaledA1) {
HXLINE(  70)			Float point6 = scaled->ax;
HXDLIN(  70)			point6 = (point6 - x01);
HXDLIN(  70)			point6 = (point6 * scaleA);
HXDLIN(  70)			point6 = (point6 + x01);
HXDLIN(  70)			ax_1 = point6;
            		}
            		else {
HXLINE(  70)			ax_1 = scaled->ax;
            		}
HXDLIN(  70)		Float ay_1;
HXDLIN(  70)		if (isScaledA1) {
HXLINE(  70)			Float point7 = scaled->ay;
HXDLIN(  70)			point7 = (point7 - y01);
HXDLIN(  70)			point7 = (point7 * scaleA);
HXDLIN(  70)			point7 = (point7 + y01);
HXDLIN(  70)			ay_1 = point7;
            		}
            		else {
HXLINE(  70)			ay_1 = scaled->ay;
            		}
HXDLIN(  70)		Float bx_2;
HXDLIN(  70)		if (isScaledB1) {
HXLINE(  70)			Float point8 = scaled->bx;
HXDLIN(  70)			point8 = (point8 - x01);
HXDLIN(  70)			point8 = (point8 * scaleB);
HXDLIN(  70)			point8 = (point8 + x01);
HXDLIN(  70)			bx_2 = point8;
            		}
            		else {
HXLINE(  70)			bx_2 = scaled->bx;
            		}
HXDLIN(  70)		Float by_2;
HXDLIN(  70)		if (isScaledB1) {
HXLINE(  70)			Float point9 = scaled->by;
HXDLIN(  70)			point9 = (point9 - y01);
HXDLIN(  70)			point9 = (point9 * scaleB);
HXDLIN(  70)			point9 = (point9 + y01);
HXDLIN(  70)			by_2 = point9;
            		}
            		else {
HXLINE(  70)			by_2 = scaled->by;
            		}
HXDLIN(  70)		Float cx_1;
HXDLIN(  70)		if (isScaledC1) {
HXLINE(  70)			Float point10 = scaled->cx;
HXDLIN(  70)			point10 = (point10 - x01);
HXDLIN(  70)			point10 = (point10 * scaleC);
HXDLIN(  70)			point10 = (point10 + x01);
HXDLIN(  70)			cx_1 = point10;
            		}
            		else {
HXLINE(  70)			cx_1 = scaled->cx;
            		}
HXDLIN(  70)		Float cy_1;
HXDLIN(  70)		if (isScaledC1) {
HXLINE(  70)			Float point11 = scaled->cy;
HXDLIN(  70)			point11 = (point11 - y01);
HXDLIN(  70)			point11 = (point11 * scaleC);
HXDLIN(  70)			point11 = (point11 + y01);
HXDLIN(  70)			cy_1 = point11;
            		}
            		else {
HXLINE(  70)			cy_1 = scaled->cy;
            		}
HXDLIN(  70)		scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_2,by_2,cx_1,cy_1,true);
HXDLIN(  70)		{
HXLINE(  70)			 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN(  70)			int _g_min = this1->start;
HXDLIN(  70)			int _g_max = this1->max;
HXDLIN(  70)			while((_g_min < _g_max)){
HXLINE(  70)				_g_min = (_g_min + 1);
HXDLIN(  70)				int px = (_g_min - 1);
HXDLIN(  70)				{
HXLINE(  70)					 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN(  70)					int _g_min1 = this2->start;
HXDLIN(  70)					int _g_max1 = this2->max;
HXDLIN(  70)					while((_g_min1 < _g_max1)){
HXLINE(  70)						_g_min1 = (_g_min1 + 1);
HXDLIN(  70)						int py = (_g_min1 - 1);
HXDLIN(  70)						Float pcx = (( (Float)(px) ) - barycentric_cx);
HXDLIN(  70)						Float pcy = (( (Float)(py) ) - barycentric_cy);
HXDLIN(  70)						Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN(  70)						Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN(  70)						Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN(  70)						Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN(  70)						Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  70)						Float ratios_ratioA = ratioA;
HXDLIN(  70)						Float ratios_ratioB = ratioB;
HXDLIN(  70)						Float ratios_ratioC = ratioC;
HXDLIN(  70)						Float v;
HXDLIN(  70)						if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  70)							v = ratios_ratioA;
            						}
            						else {
HXLINE(  70)							v = ratios_ratioB;
            						}
HXDLIN(  70)						Float min_;
HXDLIN(  70)						if ((v < ratios_ratioC)) {
HXLINE(  70)							min_ = v;
            						}
            						else {
HXLINE(  70)							min_ = ratios_ratioC;
            						}
HXDLIN(  70)						bool isSoft;
HXDLIN(  70)						if (softAB) {
HXLINE(  70)							if (softBC) {
HXLINE(  70)								if (softCA) {
HXLINE(  70)									isSoft = true;
            								}
            								else {
HXLINE(  70)									if ((min_ != ratios_ratioB)) {
HXLINE(  70)										Float v1;
HXDLIN(  70)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  70)											v1 = ratios_ratioA;
            										}
            										else {
HXLINE(  70)											v1 = ratios_ratioB;
            										}
HXDLIN(  70)										Float isSoft1;
HXDLIN(  70)										if ((v1 < ratios_ratioC)) {
HXLINE(  70)											isSoft1 = v1;
            										}
            										else {
HXLINE(  70)											isSoft1 = ratios_ratioC;
            										}
HXDLIN(  70)										isSoft = (isSoft1 == ratios_ratioC);
            									}
            									else {
HXLINE(  70)										isSoft = true;
            									}
            								}
            							}
            							else {
HXLINE(  70)								if (softCA) {
HXLINE(  70)									if ((min_ != ratios_ratioA)) {
HXLINE(  70)										Float v2;
HXDLIN(  70)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  70)											v2 = ratios_ratioA;
            										}
            										else {
HXLINE(  70)											v2 = ratios_ratioB;
            										}
HXDLIN(  70)										Float isSoft2;
HXDLIN(  70)										if ((v2 < ratios_ratioC)) {
HXLINE(  70)											isSoft2 = v2;
            										}
            										else {
HXLINE(  70)											isSoft2 = ratios_ratioC;
            										}
HXDLIN(  70)										isSoft = (isSoft2 == ratios_ratioC);
            									}
            									else {
HXLINE(  70)										isSoft = true;
            									}
            								}
            								else {
HXLINE(  70)									isSoft = (min_ == ratios_ratioC);
            								}
            							}
            						}
            						else {
HXLINE(  70)							if (softBC) {
HXLINE(  70)								if (softCA) {
HXLINE(  70)									if ((min_ != ratios_ratioA)) {
HXLINE(  70)										Float v3;
HXDLIN(  70)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  70)											v3 = ratios_ratioA;
            										}
            										else {
HXLINE(  70)											v3 = ratios_ratioB;
            										}
HXDLIN(  70)										Float isSoft3;
HXDLIN(  70)										if ((v3 < ratios_ratioC)) {
HXLINE(  70)											isSoft3 = v3;
            										}
            										else {
HXLINE(  70)											isSoft3 = ratios_ratioC;
            										}
HXDLIN(  70)										isSoft = (isSoft3 == ratios_ratioB);
            									}
            									else {
HXLINE(  70)										isSoft = true;
            									}
            								}
            								else {
HXLINE(  70)									isSoft = (min_ == ratios_ratioB);
            								}
            							}
            							else {
HXLINE(  70)								if (softCA) {
HXLINE(  70)									isSoft = (min_ == ratios_ratioA);
            								}
            								else {
HXLINE(  70)									isSoft = false;
            								}
            							}
            						}
HXDLIN(  70)						Float x02 = ((Float)-0.0739127852035666);
HXDLIN(  70)						Float y02 = ((Float)0.703233176253404202);
HXDLIN(  70)						Float x1 = ((Float)-0.353553390593273564);
HXDLIN(  70)						Float y1 = ((Float)0.61237243569579447);
HXDLIN(  70)						Float x2 = ((Float)-0.572061402817684139);
HXDLIN(  70)						Float y2 = ((Float)0.415626937777453465);
HXDLIN(  70)						Float x3 = ((Float)-0.691654801480225401);
HXDLIN(  70)						Float y3 = ((Float)0.147015766465198733);
HXDLIN(  70)						Float x4 = ((Float)-0.691654801480225512);
HXDLIN(  70)						Float y4 = ((Float)-0.147015766465198261);
HXDLIN(  70)						Float averageX = ((Float)0.);
HXDLIN(  70)						Float averageY = ((Float)0.);
HXDLIN(  70)						int hits = 0;
HXDLIN(  70)						Float fractionTotal = ((Float)0.);
HXDLIN(  70)						Float x = (px + x02);
HXDLIN(  70)						Float y = (py + y02);
HXDLIN(  70)						bool _hx_tmp;
HXDLIN(  70)						bool _hx_tmp1;
HXDLIN(  70)						 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN(  70)						bool _hx_tmp2;
HXDLIN(  70)						if ((x > (this3->start - 1))) {
HXLINE(  70)							_hx_tmp2 = (x < (this3->max + 1));
            						}
            						else {
HXLINE(  70)							_hx_tmp2 = false;
            						}
HXDLIN(  70)						if (_hx_tmp2) {
HXLINE(  70)							 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN(  70)							if ((y > (this4->start - 1))) {
HXLINE(  70)								_hx_tmp1 = (y < (this4->max + 1));
            							}
            							else {
HXLINE(  70)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp1 = false;
            						}
HXDLIN(  70)						if (_hx_tmp1) {
HXLINE(  70)							Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN(  70)							Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN(  70)							bool _hx_tmp3;
HXDLIN(  70)							if (!((s <= 0))) {
HXLINE(  70)								_hx_tmp3 = (t <= 0);
            							}
            							else {
HXLINE(  70)								_hx_tmp3 = true;
            							}
HXDLIN(  70)							if (_hx_tmp3) {
HXLINE(  70)								_hx_tmp = false;
            							}
            							else {
HXLINE(  70)								if (((s + t) < hitTriScalar->A)) {
HXLINE(  70)									_hx_tmp = true;
            								}
            								else {
HXLINE(  70)									_hx_tmp = false;
            								}
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp = false;
            						}
HXDLIN(  70)						if (_hx_tmp) {
HXLINE(  70)							hits = (hits + 1);
HXDLIN(  70)							averageX = (averageX + x02);
HXDLIN(  70)							averageY = (averageY + y02);
HXDLIN(  70)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  70)						Float x5 = (px + x1);
HXDLIN(  70)						Float y5 = (py + y1);
HXDLIN(  70)						bool _hx_tmp4;
HXDLIN(  70)						bool _hx_tmp5;
HXDLIN(  70)						 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN(  70)						bool _hx_tmp6;
HXDLIN(  70)						if ((x5 > (this5->start - 1))) {
HXLINE(  70)							_hx_tmp6 = (x5 < (this5->max + 1));
            						}
            						else {
HXLINE(  70)							_hx_tmp6 = false;
            						}
HXDLIN(  70)						if (_hx_tmp6) {
HXLINE(  70)							 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN(  70)							if ((y5 > (this6->start - 1))) {
HXLINE(  70)								_hx_tmp5 = (y5 < (this6->max + 1));
            							}
            							else {
HXLINE(  70)								_hx_tmp5 = false;
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp5 = false;
            						}
HXDLIN(  70)						if (_hx_tmp5) {
HXLINE(  70)							Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN(  70)							Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN(  70)							bool _hx_tmp7;
HXDLIN(  70)							if (!((s1 <= 0))) {
HXLINE(  70)								_hx_tmp7 = (t1 <= 0);
            							}
            							else {
HXLINE(  70)								_hx_tmp7 = true;
            							}
HXDLIN(  70)							if (_hx_tmp7) {
HXLINE(  70)								_hx_tmp4 = false;
            							}
            							else {
HXLINE(  70)								if (((s1 + t1) < hitTriScalar->A)) {
HXLINE(  70)									_hx_tmp4 = true;
            								}
            								else {
HXLINE(  70)									_hx_tmp4 = false;
            								}
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp4 = false;
            						}
HXDLIN(  70)						if (_hx_tmp4) {
HXLINE(  70)							hits = (hits + 1);
HXDLIN(  70)							averageX = (averageX + x1);
HXDLIN(  70)							averageY = (averageY + y1);
HXDLIN(  70)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  70)						Float x6 = (px + x2);
HXDLIN(  70)						Float y6 = (py + y2);
HXDLIN(  70)						bool _hx_tmp8;
HXDLIN(  70)						bool _hx_tmp9;
HXDLIN(  70)						 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN(  70)						bool _hx_tmp10;
HXDLIN(  70)						if ((x6 > (this7->start - 1))) {
HXLINE(  70)							_hx_tmp10 = (x6 < (this7->max + 1));
            						}
            						else {
HXLINE(  70)							_hx_tmp10 = false;
            						}
HXDLIN(  70)						if (_hx_tmp10) {
HXLINE(  70)							 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN(  70)							if ((y6 > (this8->start - 1))) {
HXLINE(  70)								_hx_tmp9 = (y6 < (this8->max + 1));
            							}
            							else {
HXLINE(  70)								_hx_tmp9 = false;
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp9 = false;
            						}
HXDLIN(  70)						if (_hx_tmp9) {
HXLINE(  70)							Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN(  70)							Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN(  70)							bool _hx_tmp11;
HXDLIN(  70)							if (!((s2 <= 0))) {
HXLINE(  70)								_hx_tmp11 = (t2 <= 0);
            							}
            							else {
HXLINE(  70)								_hx_tmp11 = true;
            							}
HXDLIN(  70)							if (_hx_tmp11) {
HXLINE(  70)								_hx_tmp8 = false;
            							}
            							else {
HXLINE(  70)								if (((s2 + t2) < hitTriScalar->A)) {
HXLINE(  70)									_hx_tmp8 = true;
            								}
            								else {
HXLINE(  70)									_hx_tmp8 = false;
            								}
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp8 = false;
            						}
HXDLIN(  70)						if (_hx_tmp8) {
HXLINE(  70)							hits = (hits + 1);
HXDLIN(  70)							averageX = (averageX + x2);
HXDLIN(  70)							averageY = (averageY + y2);
HXDLIN(  70)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  70)						Float x7 = (px + x3);
HXDLIN(  70)						Float y7 = (py + y3);
HXDLIN(  70)						bool _hx_tmp12;
HXDLIN(  70)						bool _hx_tmp13;
HXDLIN(  70)						 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN(  70)						bool _hx_tmp14;
HXDLIN(  70)						if ((x7 > (this9->start - 1))) {
HXLINE(  70)							_hx_tmp14 = (x7 < (this9->max + 1));
            						}
            						else {
HXLINE(  70)							_hx_tmp14 = false;
            						}
HXDLIN(  70)						if (_hx_tmp14) {
HXLINE(  70)							 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN(  70)							if ((y7 > (this10->start - 1))) {
HXLINE(  70)								_hx_tmp13 = (y7 < (this10->max + 1));
            							}
            							else {
HXLINE(  70)								_hx_tmp13 = false;
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp13 = false;
            						}
HXDLIN(  70)						if (_hx_tmp13) {
HXLINE(  70)							Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN(  70)							Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN(  70)							bool _hx_tmp15;
HXDLIN(  70)							if (!((s3 <= 0))) {
HXLINE(  70)								_hx_tmp15 = (t3 <= 0);
            							}
            							else {
HXLINE(  70)								_hx_tmp15 = true;
            							}
HXDLIN(  70)							if (_hx_tmp15) {
HXLINE(  70)								_hx_tmp12 = false;
            							}
            							else {
HXLINE(  70)								if (((s3 + t3) < hitTriScalar->A)) {
HXLINE(  70)									_hx_tmp12 = true;
            								}
            								else {
HXLINE(  70)									_hx_tmp12 = false;
            								}
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp12 = false;
            						}
HXDLIN(  70)						if (_hx_tmp12) {
HXLINE(  70)							hits = (hits + 1);
HXDLIN(  70)							averageX = (averageX + x3);
HXDLIN(  70)							averageY = (averageY + y3);
HXDLIN(  70)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  70)						Float x8 = (px + x4);
HXDLIN(  70)						Float y8 = (py + y4);
HXDLIN(  70)						bool _hx_tmp16;
HXDLIN(  70)						bool _hx_tmp17;
HXDLIN(  70)						 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN(  70)						bool _hx_tmp18;
HXDLIN(  70)						if ((x8 > (this11->start - 1))) {
HXLINE(  70)							_hx_tmp18 = (x8 < (this11->max + 1));
            						}
            						else {
HXLINE(  70)							_hx_tmp18 = false;
            						}
HXDLIN(  70)						if (_hx_tmp18) {
HXLINE(  70)							 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN(  70)							if ((y8 > (this12->start - 1))) {
HXLINE(  70)								_hx_tmp17 = (y8 < (this12->max + 1));
            							}
            							else {
HXLINE(  70)								_hx_tmp17 = false;
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp17 = false;
            						}
HXDLIN(  70)						if (_hx_tmp17) {
HXLINE(  70)							Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN(  70)							Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN(  70)							bool _hx_tmp19;
HXDLIN(  70)							if (!((s4 <= 0))) {
HXLINE(  70)								_hx_tmp19 = (t4 <= 0);
            							}
            							else {
HXLINE(  70)								_hx_tmp19 = true;
            							}
HXDLIN(  70)							if (_hx_tmp19) {
HXLINE(  70)								_hx_tmp16 = false;
            							}
            							else {
HXLINE(  70)								if (((s4 + t4) < hitTriScalar->A)) {
HXLINE(  70)									_hx_tmp16 = true;
            								}
            								else {
HXLINE(  70)									_hx_tmp16 = false;
            								}
            							}
            						}
            						else {
HXLINE(  70)							_hx_tmp16 = false;
            						}
HXDLIN(  70)						if (_hx_tmp16) {
HXLINE(  70)							hits = (hits + 1);
HXDLIN(  70)							averageX = (averageX + x4);
HXDLIN(  70)							averageY = (averageY + y4);
HXDLIN(  70)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  70)						if ((hits != 0)) {
HXLINE( 244)							averageX = (px + (averageX / ( (Float)(hits) )));
HXLINE( 245)							averageY = (py + (averageY / ( (Float)(hits) )));
            						}
            						else {
HXLINE( 247)							averageX = ( (Float)(px) );
HXLINE( 248)							averageY = ( (Float)(py) );
            						}
HXLINE(  70)						Float fractionTotal1 = fractionTotal;
HXDLIN(  70)						Float sampleData_fractionTotal = fractionTotal1;
HXDLIN(  70)						Float sampleData_averageX = averageX;
HXDLIN(  70)						Float sampleData_averageY = averageY;
HXDLIN(  70)						bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXDLIN(  70)						Float aScale = sampleData_fractionTotal;
HXDLIN(  70)						if (!((aScale > ((Float)0.9)))) {
HXLINE(  70)							aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            						}
HXLINE( 142)						a = 0;
HXLINE( 143)						r = 0;
HXLINE( 144)						g = 0;
HXLINE( 145)						b = 0;
HXLINE(  70)						if (isSoft) {
HXLINE(  70)							if (!(sampleData_notHit)) {
HXLINE(  70)								Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN(  70)								Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN(  70)								Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN(  70)								Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN(  70)								Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN(  70)								Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN(  70)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  70)								Float ratiosAvg_ratioA = ratioA1;
HXDLIN(  70)								Float ratiosAvg_ratioB = ratioB1;
HXDLIN(  70)								Float ratiosAvg_ratioC = ratioC1;
HXDLIN(  70)								Float ratioA_ = ratiosAvg_ratioA;
HXDLIN(  70)								Float ratioB_ = ratiosAvg_ratioB;
HXDLIN(  70)								Float ratioC_ = ratiosAvg_ratioC;
HXDLIN(  70)								int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN(  70)								if ((i > 255)) {
HXLINE(  24)									i = 255;
            								}
HXLINE(  70)								if ((i < 0)) {
HXLINE(  25)									i = 0;
            								}
HXLINE( 152)								a = i;
HXLINE(  70)								int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN(  70)								if ((i1 > 255)) {
HXLINE(  24)									i1 = 255;
            								}
HXLINE(  70)								if ((i1 < 0)) {
HXLINE(  25)									i1 = 0;
            								}
HXLINE( 153)								r = i1;
HXLINE(  70)								int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN(  70)								if ((i2 > 255)) {
HXLINE(  24)									i2 = 255;
            								}
HXLINE(  70)								if ((i2 < 0)) {
HXLINE(  25)									i2 = 0;
            								}
HXLINE( 154)								g = i2;
HXLINE(  70)								int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN(  70)								if ((i3 > 255)) {
HXLINE(  24)									i3 = 255;
            								}
HXLINE(  70)								if ((i3 < 0)) {
HXLINE(  25)									i3 = 0;
            								}
HXLINE( 155)								b = i3;
HXLINE(  70)								{
HXLINE(  70)									int a3;
HXDLIN(  70)									if ((aScale > ((Float)0.9))) {
HXLINE(  70)										a3 = a;
            									}
            									else {
HXLINE(  70)										int i4 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  70)										if ((i4 > 255)) {
HXLINE(  24)											i4 = 255;
            										}
HXLINE(  70)										if ((i4 < 0)) {
HXLINE(  25)											i4 = 0;
            										}
HXLINE(  70)										a3 = i4;
            									}
HXDLIN(  70)									int location;
HXDLIN(  70)									if (pixelImage->useVirtualPos) {
HXLINE(  70)										location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  70)										location = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            									}
HXDLIN(  70)									bool _hx_tmp20;
HXDLIN(  70)									if (pixelImage->transparent) {
HXLINE(  70)										_hx_tmp20 = (a3 < 254);
            									}
            									else {
HXLINE(  70)										_hx_tmp20 = false;
            									}
HXDLIN(  70)									if (_hx_tmp20) {
HXLINE(  70)										int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  70)										int old;
HXDLIN(  70)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  70)											old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            										}
            										else {
HXLINE(  70)											old = this13;
            										}
HXDLIN(  70)										int rhs = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  70)										Float a11;
HXDLIN(  70)										int this14 = ((old >> 24) & 255);
HXDLIN(  70)										if ((this14 == 0)) {
HXLINE(  70)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float r1;
HXDLIN(  70)										int this15 = ((old >> 16) & 255);
HXDLIN(  70)										if ((this15 == 0)) {
HXLINE(  70)											r1 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float g1;
HXDLIN(  70)										int this16 = ((old >> 8) & 255);
HXDLIN(  70)										if ((this16 == 0)) {
HXLINE(  70)											g1 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float b11;
HXDLIN(  70)										int this17 = (old & 255);
HXDLIN(  70)										if ((this17 == 0)) {
HXLINE(  70)											b11 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float a21;
HXDLIN(  70)										int this18 = ((rhs >> 24) & 255);
HXDLIN(  70)										if ((this18 == 0)) {
HXLINE(  70)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float r2;
HXDLIN(  70)										int this19 = ((rhs >> 16) & 255);
HXDLIN(  70)										if ((this19 == 0)) {
HXLINE(  70)											r2 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float g2;
HXDLIN(  70)										int this20 = ((rhs >> 8) & 255);
HXDLIN(  70)										if ((this20 == 0)) {
HXLINE(  70)											g2 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float b21;
HXDLIN(  70)										int this21 = (rhs & 255);
HXDLIN(  70)										if ((this21 == 0)) {
HXLINE(  70)											b21 = ((Float)0.);
            										}
            										else {
HXLINE(  70)											b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            										}
HXDLIN(  70)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  70)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN(  70)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN(  70)										int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  70)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  70)										int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  70)										{
HXLINE(  70)											int _hx_tmp21;
HXDLIN(  70)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  70)												_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE(  70)												_hx_tmp21 = blended;
            											}
HXDLIN(  70)											::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            										}
            									}
            									else {
HXLINE(  70)										int value;
HXDLIN(  70)										if (pixelImage->isLittle) {
HXLINE(  70)											value = ((((a3 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE(  70)											value = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN(  70)										::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            									}
            								}
            							}
            						}
            						else {
HXLINE(  70)							Float ratioA2 = ratios_ratioA;
HXDLIN(  70)							Float ratioB2 = ratios_ratioB;
HXDLIN(  70)							Float ratioC2 = ratios_ratioC;
HXDLIN(  70)							Float hitTotal = sampleData_fractionTotal;
HXDLIN(  70)							if (!(sampleData_notHit)) {
HXLINE(  70)								Float x03 = ((Float)-0.0739127852035666);
HXDLIN(  70)								Float y03 = ((Float)0.703233176253404202);
HXDLIN(  70)								Float x11 = ((Float)-0.353553390593273564);
HXDLIN(  70)								Float y11 = ((Float)0.61237243569579447);
HXDLIN(  70)								Float x21 = ((Float)-0.572061402817684139);
HXDLIN(  70)								Float y21 = ((Float)0.415626937777453465);
HXDLIN(  70)								Float x31 = ((Float)-0.691654801480225401);
HXDLIN(  70)								Float y31 = ((Float)0.147015766465198733);
HXDLIN(  70)								Float x41 = ((Float)-0.691654801480225512);
HXDLIN(  70)								Float y41 = ((Float)-0.147015766465198261);
HXDLIN(  70)								Float averageX1 = ((Float)0.);
HXDLIN(  70)								Float averageY1 = ((Float)0.);
HXDLIN(  70)								int hits1 = 0;
HXDLIN(  70)								Float fractionTotal2 = ((Float)0.);
HXDLIN(  70)								Float x9 = (px + x03);
HXDLIN(  70)								Float y9 = (py + y03);
HXDLIN(  70)								bool _hx_tmp22;
HXDLIN(  70)								bool _hx_tmp23;
HXDLIN(  70)								 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN(  70)								bool _hx_tmp24;
HXDLIN(  70)								if ((x9 > (this22->start - 1))) {
HXLINE(  70)									_hx_tmp24 = (x9 < (this22->max + 1));
            								}
            								else {
HXLINE(  70)									_hx_tmp24 = false;
            								}
HXDLIN(  70)								if (_hx_tmp24) {
HXLINE(  70)									 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN(  70)									if ((y9 > (this23->start - 1))) {
HXLINE(  70)										_hx_tmp23 = (y9 < (this23->max + 1));
            									}
            									else {
HXLINE(  70)										_hx_tmp23 = false;
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp23 = false;
            								}
HXDLIN(  70)								if (_hx_tmp23) {
HXLINE(  70)									Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN(  70)									Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN(  70)									bool _hx_tmp25;
HXDLIN(  70)									if (!((s5 <= 0))) {
HXLINE(  70)										_hx_tmp25 = (t5 <= 0);
            									}
            									else {
HXLINE(  70)										_hx_tmp25 = true;
            									}
HXDLIN(  70)									if (_hx_tmp25) {
HXLINE(  70)										_hx_tmp22 = false;
            									}
            									else {
HXLINE(  70)										if (((s5 + t5) < scaled->A)) {
HXLINE(  70)											_hx_tmp22 = true;
            										}
            										else {
HXLINE(  70)											_hx_tmp22 = false;
            										}
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp22 = false;
            								}
HXDLIN(  70)								if (_hx_tmp22) {
HXLINE(  70)									hits1 = (hits1 + 1);
HXDLIN(  70)									averageX1 = (averageX1 + x03);
HXDLIN(  70)									averageY1 = (averageY1 + y03);
HXDLIN(  70)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  70)								Float x10 = (px + x11);
HXDLIN(  70)								Float y10 = (py + y11);
HXDLIN(  70)								bool _hx_tmp26;
HXDLIN(  70)								bool _hx_tmp27;
HXDLIN(  70)								 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN(  70)								bool _hx_tmp28;
HXDLIN(  70)								if ((x10 > (this24->start - 1))) {
HXLINE(  70)									_hx_tmp28 = (x10 < (this24->max + 1));
            								}
            								else {
HXLINE(  70)									_hx_tmp28 = false;
            								}
HXDLIN(  70)								if (_hx_tmp28) {
HXLINE(  70)									 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN(  70)									if ((y10 > (this25->start - 1))) {
HXLINE(  70)										_hx_tmp27 = (y10 < (this25->max + 1));
            									}
            									else {
HXLINE(  70)										_hx_tmp27 = false;
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp27 = false;
            								}
HXDLIN(  70)								if (_hx_tmp27) {
HXLINE(  70)									Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN(  70)									Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN(  70)									bool _hx_tmp29;
HXDLIN(  70)									if (!((s6 <= 0))) {
HXLINE(  70)										_hx_tmp29 = (t6 <= 0);
            									}
            									else {
HXLINE(  70)										_hx_tmp29 = true;
            									}
HXDLIN(  70)									if (_hx_tmp29) {
HXLINE(  70)										_hx_tmp26 = false;
            									}
            									else {
HXLINE(  70)										if (((s6 + t6) < scaled->A)) {
HXLINE(  70)											_hx_tmp26 = true;
            										}
            										else {
HXLINE(  70)											_hx_tmp26 = false;
            										}
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp26 = false;
            								}
HXDLIN(  70)								if (_hx_tmp26) {
HXLINE(  70)									hits1 = (hits1 + 1);
HXDLIN(  70)									averageX1 = (averageX1 + x11);
HXDLIN(  70)									averageY1 = (averageY1 + y11);
HXDLIN(  70)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  70)								Float x12 = (px + x21);
HXDLIN(  70)								Float y12 = (py + y21);
HXDLIN(  70)								bool _hx_tmp30;
HXDLIN(  70)								bool _hx_tmp31;
HXDLIN(  70)								 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN(  70)								bool _hx_tmp32;
HXDLIN(  70)								if ((x12 > (this26->start - 1))) {
HXLINE(  70)									_hx_tmp32 = (x12 < (this26->max + 1));
            								}
            								else {
HXLINE(  70)									_hx_tmp32 = false;
            								}
HXDLIN(  70)								if (_hx_tmp32) {
HXLINE(  70)									 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN(  70)									if ((y12 > (this27->start - 1))) {
HXLINE(  70)										_hx_tmp31 = (y12 < (this27->max + 1));
            									}
            									else {
HXLINE(  70)										_hx_tmp31 = false;
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp31 = false;
            								}
HXDLIN(  70)								if (_hx_tmp31) {
HXLINE(  70)									Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN(  70)									Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN(  70)									bool _hx_tmp33;
HXDLIN(  70)									if (!((s7 <= 0))) {
HXLINE(  70)										_hx_tmp33 = (t7 <= 0);
            									}
            									else {
HXLINE(  70)										_hx_tmp33 = true;
            									}
HXDLIN(  70)									if (_hx_tmp33) {
HXLINE(  70)										_hx_tmp30 = false;
            									}
            									else {
HXLINE(  70)										if (((s7 + t7) < scaled->A)) {
HXLINE(  70)											_hx_tmp30 = true;
            										}
            										else {
HXLINE(  70)											_hx_tmp30 = false;
            										}
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp30 = false;
            								}
HXDLIN(  70)								if (_hx_tmp30) {
HXLINE(  70)									hits1 = (hits1 + 1);
HXDLIN(  70)									averageX1 = (averageX1 + x21);
HXDLIN(  70)									averageY1 = (averageY1 + y21);
HXDLIN(  70)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  70)								Float x13 = (px + x31);
HXDLIN(  70)								Float y13 = (py + y31);
HXDLIN(  70)								bool _hx_tmp34;
HXDLIN(  70)								bool _hx_tmp35;
HXDLIN(  70)								 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN(  70)								bool _hx_tmp36;
HXDLIN(  70)								if ((x13 > (this28->start - 1))) {
HXLINE(  70)									_hx_tmp36 = (x13 < (this28->max + 1));
            								}
            								else {
HXLINE(  70)									_hx_tmp36 = false;
            								}
HXDLIN(  70)								if (_hx_tmp36) {
HXLINE(  70)									 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN(  70)									if ((y13 > (this29->start - 1))) {
HXLINE(  70)										_hx_tmp35 = (y13 < (this29->max + 1));
            									}
            									else {
HXLINE(  70)										_hx_tmp35 = false;
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp35 = false;
            								}
HXDLIN(  70)								if (_hx_tmp35) {
HXLINE(  70)									Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN(  70)									Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN(  70)									bool _hx_tmp37;
HXDLIN(  70)									if (!((s8 <= 0))) {
HXLINE(  70)										_hx_tmp37 = (t8 <= 0);
            									}
            									else {
HXLINE(  70)										_hx_tmp37 = true;
            									}
HXDLIN(  70)									if (_hx_tmp37) {
HXLINE(  70)										_hx_tmp34 = false;
            									}
            									else {
HXLINE(  70)										if (((s8 + t8) < scaled->A)) {
HXLINE(  70)											_hx_tmp34 = true;
            										}
            										else {
HXLINE(  70)											_hx_tmp34 = false;
            										}
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp34 = false;
            								}
HXDLIN(  70)								if (_hx_tmp34) {
HXLINE(  70)									hits1 = (hits1 + 1);
HXDLIN(  70)									averageX1 = (averageX1 + x31);
HXDLIN(  70)									averageY1 = (averageY1 + y31);
HXDLIN(  70)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  70)								Float x14 = (px + x41);
HXDLIN(  70)								Float y14 = (py + y41);
HXDLIN(  70)								bool _hx_tmp38;
HXDLIN(  70)								bool _hx_tmp39;
HXDLIN(  70)								 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN(  70)								bool _hx_tmp40;
HXDLIN(  70)								if ((x14 > (this30->start - 1))) {
HXLINE(  70)									_hx_tmp40 = (x14 < (this30->max + 1));
            								}
            								else {
HXLINE(  70)									_hx_tmp40 = false;
            								}
HXDLIN(  70)								if (_hx_tmp40) {
HXLINE(  70)									 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN(  70)									if ((y14 > (this31->start - 1))) {
HXLINE(  70)										_hx_tmp39 = (y14 < (this31->max + 1));
            									}
            									else {
HXLINE(  70)										_hx_tmp39 = false;
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp39 = false;
            								}
HXDLIN(  70)								if (_hx_tmp39) {
HXLINE(  70)									Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN(  70)									Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN(  70)									bool _hx_tmp41;
HXDLIN(  70)									if (!((s9 <= 0))) {
HXLINE(  70)										_hx_tmp41 = (t9 <= 0);
            									}
            									else {
HXLINE(  70)										_hx_tmp41 = true;
            									}
HXDLIN(  70)									if (_hx_tmp41) {
HXLINE(  70)										_hx_tmp38 = false;
            									}
            									else {
HXLINE(  70)										if (((s9 + t9) < scaled->A)) {
HXLINE(  70)											_hx_tmp38 = true;
            										}
            										else {
HXLINE(  70)											_hx_tmp38 = false;
            										}
            									}
            								}
            								else {
HXLINE(  70)									_hx_tmp38 = false;
            								}
HXDLIN(  70)								if (_hx_tmp38) {
HXLINE(  70)									hits1 = (hits1 + 1);
HXDLIN(  70)									averageX1 = (averageX1 + x41);
HXDLIN(  70)									averageY1 = (averageY1 + y41);
HXDLIN(  70)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  70)								if ((hits1 != 0)) {
HXLINE( 244)									averageX1 = (px + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)									averageY1 = (py + (averageY1 / ( (Float)(hits1) )));
            								}
            								else {
HXLINE( 247)									averageX1 = ( (Float)(px) );
HXLINE( 248)									averageY1 = ( (Float)(py) );
            								}
HXLINE(  70)								Float fractionTotal3 = fractionTotal2;
HXDLIN(  70)								Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN(  70)								Float sampleScaled_averageX = averageX1;
HXDLIN(  70)								Float sampleScaled_averageY = averageY1;
HXDLIN(  70)								bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXDLIN(  70)								Float scaledTotal = sampleScaled_fractionTotal;
HXDLIN(  70)								bool _hx_tmp42;
HXDLIN(  70)								if (!((scaledTotal > hitTotal))) {
HXLINE(  70)									_hx_tmp42 = (hitTotal == ((Float)1.));
            								}
            								else {
HXLINE(  70)									_hx_tmp42 = true;
            								}
HXDLIN(  70)								if (_hx_tmp42) {
HXLINE(  70)									Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN(  70)									Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN(  70)									Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN(  70)									Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN(  70)									Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN(  70)									Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN(  70)									Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  70)									Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN(  70)									Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN(  70)									Float ratiosAvg_ratioC1 = ratioC3;
HXDLIN(  70)									Float ratioA_1 = ratiosAvg_ratioA1;
HXDLIN(  70)									Float ratioB_1 = ratiosAvg_ratioB1;
HXDLIN(  70)									Float ratioC_1 = ratiosAvg_ratioC1;
HXDLIN(  70)									int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN(  70)									if ((i5 > 255)) {
HXLINE(  24)										i5 = 255;
            									}
HXLINE(  70)									if ((i5 < 0)) {
HXLINE(  25)										i5 = 0;
            									}
HXLINE( 187)									a = i5;
HXLINE(  70)									int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN(  70)									if ((i6 > 255)) {
HXLINE(  24)										i6 = 255;
            									}
HXLINE(  70)									if ((i6 < 0)) {
HXLINE(  25)										i6 = 0;
            									}
HXLINE( 188)									r = i6;
HXLINE(  70)									int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN(  70)									if ((i7 > 255)) {
HXLINE(  24)										i7 = 255;
            									}
HXLINE(  70)									if ((i7 < 0)) {
HXLINE(  25)										i7 = 0;
            									}
HXLINE( 189)									g = i7;
HXLINE(  70)									int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN(  70)									if ((i8 > 255)) {
HXLINE(  24)										i8 = 255;
            									}
HXLINE(  70)									if ((i8 < 0)) {
HXLINE(  25)										i8 = 0;
            									}
HXLINE( 190)									b = i8;
HXLINE(  70)									{
HXLINE(  70)										int location1;
HXDLIN(  70)										if (pixelImage->useVirtualPos) {
HXLINE(  70)											location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  70)											location1 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            										}
HXDLIN(  70)										bool _hx_tmp43;
HXDLIN(  70)										if (pixelImage->transparent) {
HXLINE(  70)											_hx_tmp43 = (a < 254);
            										}
            										else {
HXLINE(  70)											_hx_tmp43 = false;
            										}
HXDLIN(  70)										if (_hx_tmp43) {
HXLINE(  70)											int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  70)											int old1;
HXDLIN(  70)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  70)												old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            											}
            											else {
HXLINE(  70)												old1 = this32;
            											}
HXDLIN(  70)											int rhs1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  70)											Float a12;
HXDLIN(  70)											int this33 = ((old1 >> 24) & 255);
HXDLIN(  70)											if ((this33 == 0)) {
HXLINE(  70)												a12 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float r11;
HXDLIN(  70)											int this34 = ((old1 >> 16) & 255);
HXDLIN(  70)											if ((this34 == 0)) {
HXLINE(  70)												r11 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float g11;
HXDLIN(  70)											int this35 = ((old1 >> 8) & 255);
HXDLIN(  70)											if ((this35 == 0)) {
HXLINE(  70)												g11 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float b12;
HXDLIN(  70)											int this36 = (old1 & 255);
HXDLIN(  70)											if ((this36 == 0)) {
HXLINE(  70)												b12 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float a22;
HXDLIN(  70)											int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  70)											if ((this37 == 0)) {
HXLINE(  70)												a22 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float r21;
HXDLIN(  70)											int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  70)											if ((this38 == 0)) {
HXLINE(  70)												r21 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float g21;
HXDLIN(  70)											int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  70)											if ((this39 == 0)) {
HXLINE(  70)												g21 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float b22;
HXDLIN(  70)											int this40 = (rhs1 & 255);
HXDLIN(  70)											if ((this40 == 0)) {
HXLINE(  70)												b22 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  70)											int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN(  70)											int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN(  70)											int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  70)											int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  70)											int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  70)											{
HXLINE(  70)												int _hx_tmp44;
HXDLIN(  70)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  70)													_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            												}
            												else {
HXLINE(  70)													_hx_tmp44 = blended1;
            												}
HXDLIN(  70)												::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            											}
            										}
            										else {
HXLINE(  70)											int value1;
HXDLIN(  70)											if (pixelImage->isLittle) {
HXLINE(  70)												value1 = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE(  70)												value1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN(  70)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            										}
            									}
            								}
            								else {
HXLINE(  70)									Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN(  70)									Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN(  70)									Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN(  70)									Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN(  70)									Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN(  70)									Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN(  70)									Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  70)									Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN(  70)									Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN(  70)									Float ratiosAvg_ratioC2 = ratioC4;
HXDLIN(  70)									Float ratioA_2 = ratiosAvg_ratioA2;
HXDLIN(  70)									Float ratioB_2 = ratiosAvg_ratioB2;
HXDLIN(  70)									Float ratioC_2 = ratiosAvg_ratioC2;
HXDLIN(  70)									int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN(  70)									if ((i9 > 255)) {
HXLINE(  24)										i9 = 255;
            									}
HXLINE(  70)									if ((i9 < 0)) {
HXLINE(  25)										i9 = 0;
            									}
HXLINE( 198)									a = i9;
HXLINE(  70)									int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN(  70)									if ((i10 > 255)) {
HXLINE(  24)										i10 = 255;
            									}
HXLINE(  70)									if ((i10 < 0)) {
HXLINE(  25)										i10 = 0;
            									}
HXLINE( 199)									r = i10;
HXLINE(  70)									int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN(  70)									if ((i11 > 255)) {
HXLINE(  24)										i11 = 255;
            									}
HXLINE(  70)									if ((i11 < 0)) {
HXLINE(  25)										i11 = 0;
            									}
HXLINE( 200)									g = i11;
HXLINE(  70)									int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN(  70)									if ((i12 > 255)) {
HXLINE(  24)										i12 = 255;
            									}
HXLINE(  70)									if ((i12 < 0)) {
HXLINE(  25)										i12 = 0;
            									}
HXLINE( 201)									b = i12;
HXLINE(  70)									{
HXLINE(  70)										int a6;
HXDLIN(  70)										if ((aScale > ((Float)0.9))) {
HXLINE(  70)											a6 = a;
            										}
            										else {
HXLINE(  70)											int i13 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  70)											if ((i13 > 255)) {
HXLINE(  24)												i13 = 255;
            											}
HXLINE(  70)											if ((i13 < 0)) {
HXLINE(  25)												i13 = 0;
            											}
HXLINE(  70)											a6 = i13;
            										}
HXDLIN(  70)										int location2;
HXDLIN(  70)										if (pixelImage->useVirtualPos) {
HXLINE(  70)											location2 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  70)											location2 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            										}
HXDLIN(  70)										bool _hx_tmp45;
HXDLIN(  70)										if (pixelImage->transparent) {
HXLINE(  70)											_hx_tmp45 = (a6 < 254);
            										}
            										else {
HXLINE(  70)											_hx_tmp45 = false;
            										}
HXDLIN(  70)										if (_hx_tmp45) {
HXLINE(  70)											int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  70)											int old2;
HXDLIN(  70)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  70)												old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            											}
            											else {
HXLINE(  70)												old2 = this41;
            											}
HXDLIN(  70)											int rhs2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  70)											Float a13;
HXDLIN(  70)											int this42 = ((old2 >> 24) & 255);
HXDLIN(  70)											if ((this42 == 0)) {
HXLINE(  70)												a13 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float r12;
HXDLIN(  70)											int this43 = ((old2 >> 16) & 255);
HXDLIN(  70)											if ((this43 == 0)) {
HXLINE(  70)												r12 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float g12;
HXDLIN(  70)											int this44 = ((old2 >> 8) & 255);
HXDLIN(  70)											if ((this44 == 0)) {
HXLINE(  70)												g12 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float b13;
HXDLIN(  70)											int this45 = (old2 & 255);
HXDLIN(  70)											if ((this45 == 0)) {
HXLINE(  70)												b13 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float a23;
HXDLIN(  70)											int this46 = ((rhs2 >> 24) & 255);
HXDLIN(  70)											if ((this46 == 0)) {
HXLINE(  70)												a23 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float r22;
HXDLIN(  70)											int this47 = ((rhs2 >> 16) & 255);
HXDLIN(  70)											if ((this47 == 0)) {
HXLINE(  70)												r22 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float g22;
HXDLIN(  70)											int this48 = ((rhs2 >> 8) & 255);
HXDLIN(  70)											if ((this48 == 0)) {
HXLINE(  70)												g22 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float b23;
HXDLIN(  70)											int this49 = (rhs2 & 255);
HXDLIN(  70)											if ((this49 == 0)) {
HXLINE(  70)												b23 = ((Float)0.);
            											}
            											else {
HXLINE(  70)												b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN(  70)											Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  70)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN(  70)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN(  70)											int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  70)											int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  70)											int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  70)											{
HXLINE(  70)												int _hx_tmp46;
HXDLIN(  70)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  70)													_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE(  70)													_hx_tmp46 = blended2;
            												}
HXDLIN(  70)												::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            											}
            										}
            										else {
HXLINE(  70)											int value2;
HXDLIN(  70)											if (pixelImage->isLittle) {
HXLINE(  70)												value2 = ((((a6 << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE(  70)												value2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN(  70)											::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  70)		if ((hasHit == false)) {
HXLINE(  70)			 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  70)			return v4;
            		}
            		else {
HXLINE(  70)			return null();
            		}
HXDLIN(  70)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(TriPixelSmoothGrad_Fields__obj,triGradPentBaryBottom,return )

 ::pi_xy::algo::HitTri TriPixelSmoothGrad_Fields__obj::triGradPentBaryTop( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,int colorA,Float bx,Float by,int colorB,Float cx,Float cy,int colorC,::hx::Null< bool >  __o_hasHit,::hx::Null< bool >  __o_hasUndo){
            		bool hasHit = __o_hasHit.Default(false);
            		bool hasUndo = __o_hasUndo.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_c88345def33277a9_77_triGradPentBaryTop)
HXLINE(  80)		bool softAB = true;
HXLINE(  81)		bool softBC = true;
HXLINE(  82)		bool softCA = false;
HXLINE(  83)		bool adjustWinding = (((((ax * by) - (bx * ay)) + ((bx * cy) - (cx * by))) + ((cx * ay) - (ax * cy))) > 0);
HXLINE(  84)		if (!(adjustWinding)) {
HXLINE(  85)			Float bx_ = bx;
HXLINE(  86)			Float by_ = by;
HXLINE(  87)			bx = cx;
HXLINE(  88)			by = cy;
HXLINE(  89)			cx = bx_;
HXLINE(  90)			cy = by_;
HXLINE(  91)			bool softAB1 = true;
HXLINE(  92)			bool softBC1 = false;
HXLINE(  93)			bool softCA1 = true;
            		}
HXLINE(  95)		int aA = ((colorB >> 24) & 255);
HXDLIN(  95)		int rA = ((colorB >> 16) & 255);
HXDLIN(  95)		int gA = ((colorB >> 8) & 255);
HXDLIN(  95)		int bA = (colorB & 255);
HXDLIN(  95)		int aB = ((colorA >> 24) & 255);
HXDLIN(  95)		int rB = ((colorA >> 16) & 255);
HXDLIN(  95)		int gB = ((colorA >> 8) & 255);
HXDLIN(  95)		int bB = (colorA & 255);
HXDLIN(  95)		int aC = ((colorC >> 24) & 255);
HXDLIN(  95)		int rC = ((colorC >> 16) & 255);
HXDLIN(  95)		int gC = ((colorC >> 8) & 255);
HXDLIN(  95)		int bC = (colorC & 255);
HXDLIN(  95)		int a = 0;
HXDLIN(  95)		int r = 0;
HXDLIN(  95)		int g = 0;
HXDLIN(  95)		int b = 0;
HXDLIN(  95)		 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  95)		 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN(  95)		 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN(  95)		Float barycentric_dot22;
HXDLIN(  95)		Float barycentric_dot12;
HXDLIN(  95)		Float barycentric_dot11;
HXDLIN(  95)		Float barycentric_denom1;
HXDLIN(  95)		Float barycentric_bcy;
HXDLIN(  95)		Float barycentric_bcx;
HXDLIN(  95)		Float barycentric_acy;
HXDLIN(  95)		Float barycentric_acx;
HXDLIN(  95)		Float barycentric_ax = hitTriScalar->ax;
HXDLIN(  95)		Float barycentric_ay = hitTriScalar->ay;
HXDLIN(  95)		Float barycentric_bx = hitTriScalar->bx;
HXDLIN(  95)		Float barycentric_by = hitTriScalar->by;
HXDLIN(  95)		Float barycentric_cx = hitTriScalar->cx;
HXDLIN(  95)		Float barycentric_cy = hitTriScalar->cy;
HXDLIN(  95)		bool barycentric_preCalculated = true;
HXDLIN(  95)		{
HXLINE(  95)			barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN(  95)			barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN(  95)			barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN(  95)			barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN(  95)			Float ax1 = barycentric_bcx;
HXDLIN(  95)			Float ay1 = barycentric_bcy;
HXDLIN(  95)			barycentric_dot11 = ((ax1 * ax1) + (ay1 * ay1));
HXDLIN(  95)			barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN(  95)			Float ax2 = barycentric_acx;
HXDLIN(  95)			Float ay2 = barycentric_acy;
HXDLIN(  95)			barycentric_dot22 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  95)			barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN(  95)			Float a1 = barycentric_ax;
HXDLIN(  95)			Float b1 = barycentric_bx;
HXDLIN(  95)			Float c = barycentric_cx;
HXDLIN(  95)			if ((a1 > b1)) {
HXLINE(  95)				if ((a1 > c)) {
HXLINE(  95)					int min;
HXDLIN(  95)					if ((b1 > c)) {
HXLINE(  95)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  95)						min = ::Math_obj::floor(b1);
            					}
HXDLIN(  95)					int ii_min = min;
HXDLIN(  95)					int ii_max = ::Math_obj::ceil(a1);
HXDLIN(  95)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE(  95)					int ii_min1 = ::Math_obj::floor(b1);
HXDLIN(  95)					int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  95)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE(  95)				if ((b1 > c)) {
HXLINE(  95)					int min1;
HXDLIN(  95)					if ((a1 > c)) {
HXLINE(  95)						min1 = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  95)						min1 = ::Math_obj::ceil(a1);
            					}
HXDLIN(  95)					int ii_min2 = min1;
HXDLIN(  95)					int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN(  95)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE(  95)					int ii_min3 = ::Math_obj::floor(a1);
HXDLIN(  95)					int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  95)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  95)			Float a2 = barycentric_ay;
HXDLIN(  95)			Float b2 = barycentric_by;
HXDLIN(  95)			Float c1 = barycentric_cy;
HXDLIN(  95)			if ((a2 > b2)) {
HXLINE(  95)				if ((a2 > c1)) {
HXLINE(  95)					int min2;
HXDLIN(  95)					if ((b2 > c1)) {
HXLINE(  95)						min2 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  95)						min2 = ::Math_obj::floor(b2);
            					}
HXDLIN(  95)					int ii_min4 = min2;
HXDLIN(  95)					int ii_max4 = ::Math_obj::ceil(a2);
HXDLIN(  95)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE(  95)					int ii_min5 = ::Math_obj::floor(b2);
HXDLIN(  95)					int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  95)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE(  95)				if ((b2 > c1)) {
HXLINE(  95)					int min3;
HXDLIN(  95)					if ((a2 > c1)) {
HXLINE(  95)						min3 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  95)						min3 = ::Math_obj::ceil(a2);
            					}
HXDLIN(  95)					int ii_min6 = min3;
HXDLIN(  95)					int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN(  95)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE(  95)					int ii_min7 = ::Math_obj::floor(a2);
HXDLIN(  95)					int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  95)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
            		}
HXDLIN(  95)		Float scaleA;
HXDLIN(  95)		bool scaleA1;
HXDLIN(  95)		if (!(softAB)) {
HXLINE(  95)			scaleA1 = softCA;
            		}
            		else {
HXLINE(  95)			scaleA1 = true;
            		}
HXDLIN(  95)		if (scaleA1) {
HXLINE(  95)			scaleA = ((Float)1.5);
            		}
            		else {
HXLINE(  95)			scaleA = ((Float)1.);
            		}
HXDLIN(  95)		Float scaleB;
HXDLIN(  95)		bool scaleB1;
HXDLIN(  95)		if (!(softAB)) {
HXLINE(  95)			scaleB1 = softBC;
            		}
            		else {
HXLINE(  95)			scaleB1 = true;
            		}
HXDLIN(  95)		if (scaleB1) {
HXLINE(  95)			scaleB = ((Float)1.5);
            		}
            		else {
HXLINE(  95)			scaleB = ((Float)1.);
            		}
HXDLIN(  95)		Float scaleC;
HXDLIN(  95)		bool scaleC1;
HXDLIN(  95)		if (!(softBC)) {
HXLINE(  95)			scaleC1 = softCA;
            		}
            		else {
HXLINE(  95)			scaleC1 = true;
            		}
HXDLIN(  95)		if (scaleC1) {
HXLINE(  95)			scaleC = ((Float)1.5);
            		}
            		else {
HXLINE(  95)			scaleC = ((Float)1.);
            		}
HXDLIN(  95)		Float x0 = ((Float)0.);
HXDLIN(  95)		Float y0 = ((Float)0.);
HXDLIN(  95)		bool isScaledA = true;
HXDLIN(  95)		bool isScaledB = true;
HXDLIN(  95)		bool isScaledC = true;
HXDLIN(  95)		if (isScaledA) {
HXLINE(  95)			if (isScaledB) {
HXLINE(  95)				if (isScaledC) {
HXLINE(  82)					x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)					y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x0 = hitTriScalar->cx;
HXLINE(  80)					y0 = hitTriScalar->cy;
            				}
            			}
            			else {
HXLINE(  95)				if (isScaledC) {
HXLINE(  76)					x0 = hitTriScalar->bx;
HXLINE(  77)					y0 = hitTriScalar->by;
            				}
            				else {
HXLINE(  73)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            				}
            			}
            		}
            		else {
HXLINE(  95)			if (isScaledB) {
HXLINE(  95)				if (isScaledC) {
HXLINE(  70)					x0 = hitTriScalar->ax;
HXLINE(  71)					y0 = hitTriScalar->ay;
            				}
            				else {
HXLINE(  67)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            				}
            			}
            			else {
HXLINE(  95)				if (isScaledC) {
HXLINE(  64)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            				}
            				else {
HXLINE(  61)					x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)					y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  95)		Float ax_;
HXDLIN(  95)		if (isScaledA) {
HXLINE(  95)			Float point = hitTriScalar->ax;
HXDLIN(  95)			point = (point - x0);
HXDLIN(  95)			point = (point * ((Float)0.999));
HXDLIN(  95)			point = (point + x0);
HXDLIN(  95)			ax_ = point;
            		}
            		else {
HXLINE(  95)			ax_ = hitTriScalar->ax;
            		}
HXDLIN(  95)		Float ay_;
HXDLIN(  95)		if (isScaledA) {
HXLINE(  95)			Float point1 = hitTriScalar->ay;
HXDLIN(  95)			point1 = (point1 - y0);
HXDLIN(  95)			point1 = (point1 * ((Float)0.999));
HXDLIN(  95)			point1 = (point1 + y0);
HXDLIN(  95)			ay_ = point1;
            		}
            		else {
HXLINE(  95)			ay_ = hitTriScalar->ay;
            		}
HXDLIN(  95)		Float bx_1;
HXDLIN(  95)		if (isScaledB) {
HXLINE(  95)			Float point2 = hitTriScalar->bx;
HXDLIN(  95)			point2 = (point2 - x0);
HXDLIN(  95)			point2 = (point2 * ((Float)0.999));
HXDLIN(  95)			point2 = (point2 + x0);
HXDLIN(  95)			bx_1 = point2;
            		}
            		else {
HXLINE(  95)			bx_1 = hitTriScalar->bx;
            		}
HXDLIN(  95)		Float by_1;
HXDLIN(  95)		if (isScaledB) {
HXLINE(  95)			Float point3 = hitTriScalar->by;
HXDLIN(  95)			point3 = (point3 - y0);
HXDLIN(  95)			point3 = (point3 * ((Float)0.999));
HXDLIN(  95)			point3 = (point3 + y0);
HXDLIN(  95)			by_1 = point3;
            		}
            		else {
HXLINE(  95)			by_1 = hitTriScalar->by;
            		}
HXDLIN(  95)		Float cx_;
HXDLIN(  95)		if (isScaledC) {
HXLINE(  95)			Float point4 = hitTriScalar->cx;
HXDLIN(  95)			point4 = (point4 - x0);
HXDLIN(  95)			point4 = (point4 * ((Float)0.999));
HXDLIN(  95)			point4 = (point4 + x0);
HXDLIN(  95)			cx_ = point4;
            		}
            		else {
HXLINE(  95)			cx_ = hitTriScalar->cx;
            		}
HXDLIN(  95)		Float cy_;
HXDLIN(  95)		if (isScaledC) {
HXLINE(  95)			Float point5 = hitTriScalar->cy;
HXDLIN(  95)			point5 = (point5 - y0);
HXDLIN(  95)			point5 = (point5 * ((Float)0.999));
HXDLIN(  95)			point5 = (point5 + y0);
HXDLIN(  95)			cy_ = point5;
            		}
            		else {
HXLINE(  95)			cy_ = hitTriScalar->cy;
            		}
HXDLIN(  95)		 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_1,by_1,cx_,cy_,true);
HXDLIN(  95)		Float x01 = ((Float)0.);
HXDLIN(  95)		Float y01 = ((Float)0.);
HXDLIN(  95)		bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN(  95)		bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN(  95)		bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN(  95)		if (isScaledA1) {
HXLINE(  95)			if (isScaledB1) {
HXLINE(  95)				if (isScaledC1) {
HXLINE(  82)					x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)					y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x01 = scaled->cx;
HXLINE(  80)					y01 = scaled->cy;
            				}
            			}
            			else {
HXLINE(  95)				if (isScaledC1) {
HXLINE(  76)					x01 = scaled->bx;
HXLINE(  77)					y01 = scaled->by;
            				}
            				else {
HXLINE(  73)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            				}
            			}
            		}
            		else {
HXLINE(  95)			if (isScaledB1) {
HXLINE(  95)				if (isScaledC1) {
HXLINE(  70)					x01 = scaled->ax;
HXLINE(  71)					y01 = scaled->ay;
            				}
            				else {
HXLINE(  67)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            				}
            			}
            			else {
HXLINE(  95)				if (isScaledC1) {
HXLINE(  64)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            				}
            				else {
HXLINE(  61)					x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)					y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE(  95)		Float ax_1;
HXDLIN(  95)		if (isScaledA1) {
HXLINE(  95)			Float point6 = scaled->ax;
HXDLIN(  95)			point6 = (point6 - x01);
HXDLIN(  95)			point6 = (point6 * scaleA);
HXDLIN(  95)			point6 = (point6 + x01);
HXDLIN(  95)			ax_1 = point6;
            		}
            		else {
HXLINE(  95)			ax_1 = scaled->ax;
            		}
HXDLIN(  95)		Float ay_1;
HXDLIN(  95)		if (isScaledA1) {
HXLINE(  95)			Float point7 = scaled->ay;
HXDLIN(  95)			point7 = (point7 - y01);
HXDLIN(  95)			point7 = (point7 * scaleA);
HXDLIN(  95)			point7 = (point7 + y01);
HXDLIN(  95)			ay_1 = point7;
            		}
            		else {
HXLINE(  95)			ay_1 = scaled->ay;
            		}
HXDLIN(  95)		Float bx_2;
HXDLIN(  95)		if (isScaledB1) {
HXLINE(  95)			Float point8 = scaled->bx;
HXDLIN(  95)			point8 = (point8 - x01);
HXDLIN(  95)			point8 = (point8 * scaleB);
HXDLIN(  95)			point8 = (point8 + x01);
HXDLIN(  95)			bx_2 = point8;
            		}
            		else {
HXLINE(  95)			bx_2 = scaled->bx;
            		}
HXDLIN(  95)		Float by_2;
HXDLIN(  95)		if (isScaledB1) {
HXLINE(  95)			Float point9 = scaled->by;
HXDLIN(  95)			point9 = (point9 - y01);
HXDLIN(  95)			point9 = (point9 * scaleB);
HXDLIN(  95)			point9 = (point9 + y01);
HXDLIN(  95)			by_2 = point9;
            		}
            		else {
HXLINE(  95)			by_2 = scaled->by;
            		}
HXDLIN(  95)		Float cx_1;
HXDLIN(  95)		if (isScaledC1) {
HXLINE(  95)			Float point10 = scaled->cx;
HXDLIN(  95)			point10 = (point10 - x01);
HXDLIN(  95)			point10 = (point10 * scaleC);
HXDLIN(  95)			point10 = (point10 + x01);
HXDLIN(  95)			cx_1 = point10;
            		}
            		else {
HXLINE(  95)			cx_1 = scaled->cx;
            		}
HXDLIN(  95)		Float cy_1;
HXDLIN(  95)		if (isScaledC1) {
HXLINE(  95)			Float point11 = scaled->cy;
HXDLIN(  95)			point11 = (point11 - y01);
HXDLIN(  95)			point11 = (point11 * scaleC);
HXDLIN(  95)			point11 = (point11 + y01);
HXDLIN(  95)			cy_1 = point11;
            		}
            		else {
HXLINE(  95)			cy_1 = scaled->cy;
            		}
HXDLIN(  95)		scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_2,by_2,cx_1,cy_1,true);
HXDLIN(  95)		{
HXLINE(  95)			 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN(  95)			int _g_min = this1->start;
HXDLIN(  95)			int _g_max = this1->max;
HXDLIN(  95)			while((_g_min < _g_max)){
HXLINE(  95)				_g_min = (_g_min + 1);
HXDLIN(  95)				int px = (_g_min - 1);
HXDLIN(  95)				{
HXLINE(  95)					 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN(  95)					int _g_min1 = this2->start;
HXDLIN(  95)					int _g_max1 = this2->max;
HXDLIN(  95)					while((_g_min1 < _g_max1)){
HXLINE(  95)						_g_min1 = (_g_min1 + 1);
HXDLIN(  95)						int py = (_g_min1 - 1);
HXDLIN(  95)						Float pcx = (( (Float)(px) ) - barycentric_cx);
HXDLIN(  95)						Float pcy = (( (Float)(py) ) - barycentric_cy);
HXDLIN(  95)						Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN(  95)						Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN(  95)						Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN(  95)						Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN(  95)						Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  95)						Float ratios_ratioA = ratioA;
HXDLIN(  95)						Float ratios_ratioB = ratioB;
HXDLIN(  95)						Float ratios_ratioC = ratioC;
HXDLIN(  95)						Float v;
HXDLIN(  95)						if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  95)							v = ratios_ratioA;
            						}
            						else {
HXLINE(  95)							v = ratios_ratioB;
            						}
HXDLIN(  95)						Float min_;
HXDLIN(  95)						if ((v < ratios_ratioC)) {
HXLINE(  95)							min_ = v;
            						}
            						else {
HXLINE(  95)							min_ = ratios_ratioC;
            						}
HXDLIN(  95)						bool isSoft;
HXDLIN(  95)						if (softAB) {
HXLINE(  95)							if (softBC) {
HXLINE(  95)								if (softCA) {
HXLINE(  95)									isSoft = true;
            								}
            								else {
HXLINE(  95)									if ((min_ != ratios_ratioB)) {
HXLINE(  95)										Float v1;
HXDLIN(  95)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  95)											v1 = ratios_ratioA;
            										}
            										else {
HXLINE(  95)											v1 = ratios_ratioB;
            										}
HXDLIN(  95)										Float isSoft1;
HXDLIN(  95)										if ((v1 < ratios_ratioC)) {
HXLINE(  95)											isSoft1 = v1;
            										}
            										else {
HXLINE(  95)											isSoft1 = ratios_ratioC;
            										}
HXDLIN(  95)										isSoft = (isSoft1 == ratios_ratioC);
            									}
            									else {
HXLINE(  95)										isSoft = true;
            									}
            								}
            							}
            							else {
HXLINE(  95)								if (softCA) {
HXLINE(  95)									if ((min_ != ratios_ratioA)) {
HXLINE(  95)										Float v2;
HXDLIN(  95)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  95)											v2 = ratios_ratioA;
            										}
            										else {
HXLINE(  95)											v2 = ratios_ratioB;
            										}
HXDLIN(  95)										Float isSoft2;
HXDLIN(  95)										if ((v2 < ratios_ratioC)) {
HXLINE(  95)											isSoft2 = v2;
            										}
            										else {
HXLINE(  95)											isSoft2 = ratios_ratioC;
            										}
HXDLIN(  95)										isSoft = (isSoft2 == ratios_ratioC);
            									}
            									else {
HXLINE(  95)										isSoft = true;
            									}
            								}
            								else {
HXLINE(  95)									isSoft = (min_ == ratios_ratioC);
            								}
            							}
            						}
            						else {
HXLINE(  95)							if (softBC) {
HXLINE(  95)								if (softCA) {
HXLINE(  95)									if ((min_ != ratios_ratioA)) {
HXLINE(  95)										Float v3;
HXDLIN(  95)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  95)											v3 = ratios_ratioA;
            										}
            										else {
HXLINE(  95)											v3 = ratios_ratioB;
            										}
HXDLIN(  95)										Float isSoft3;
HXDLIN(  95)										if ((v3 < ratios_ratioC)) {
HXLINE(  95)											isSoft3 = v3;
            										}
            										else {
HXLINE(  95)											isSoft3 = ratios_ratioC;
            										}
HXDLIN(  95)										isSoft = (isSoft3 == ratios_ratioB);
            									}
            									else {
HXLINE(  95)										isSoft = true;
            									}
            								}
            								else {
HXLINE(  95)									isSoft = (min_ == ratios_ratioB);
            								}
            							}
            							else {
HXLINE(  95)								if (softCA) {
HXLINE(  95)									isSoft = (min_ == ratios_ratioA);
            								}
            								else {
HXLINE(  95)									isSoft = false;
            								}
            							}
            						}
HXDLIN(  95)						Float x02 = ((Float)-0.0739127852035666);
HXDLIN(  95)						Float y02 = ((Float)0.703233176253404202);
HXDLIN(  95)						Float x1 = ((Float)-0.353553390593273564);
HXDLIN(  95)						Float y1 = ((Float)0.61237243569579447);
HXDLIN(  95)						Float x2 = ((Float)-0.572061402817684139);
HXDLIN(  95)						Float y2 = ((Float)0.415626937777453465);
HXDLIN(  95)						Float x3 = ((Float)-0.691654801480225401);
HXDLIN(  95)						Float y3 = ((Float)0.147015766465198733);
HXDLIN(  95)						Float x4 = ((Float)-0.691654801480225512);
HXDLIN(  95)						Float y4 = ((Float)-0.147015766465198261);
HXDLIN(  95)						Float averageX = ((Float)0.);
HXDLIN(  95)						Float averageY = ((Float)0.);
HXDLIN(  95)						int hits = 0;
HXDLIN(  95)						Float fractionTotal = ((Float)0.);
HXDLIN(  95)						Float x = (px + x02);
HXDLIN(  95)						Float y = (py + y02);
HXDLIN(  95)						bool _hx_tmp;
HXDLIN(  95)						bool _hx_tmp1;
HXDLIN(  95)						 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN(  95)						bool _hx_tmp2;
HXDLIN(  95)						if ((x > (this3->start - 1))) {
HXLINE(  95)							_hx_tmp2 = (x < (this3->max + 1));
            						}
            						else {
HXLINE(  95)							_hx_tmp2 = false;
            						}
HXDLIN(  95)						if (_hx_tmp2) {
HXLINE(  95)							 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN(  95)							if ((y > (this4->start - 1))) {
HXLINE(  95)								_hx_tmp1 = (y < (this4->max + 1));
            							}
            							else {
HXLINE(  95)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp1 = false;
            						}
HXDLIN(  95)						if (_hx_tmp1) {
HXLINE(  95)							Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN(  95)							Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN(  95)							bool _hx_tmp3;
HXDLIN(  95)							if (!((s <= 0))) {
HXLINE(  95)								_hx_tmp3 = (t <= 0);
            							}
            							else {
HXLINE(  95)								_hx_tmp3 = true;
            							}
HXDLIN(  95)							if (_hx_tmp3) {
HXLINE(  95)								_hx_tmp = false;
            							}
            							else {
HXLINE(  95)								if (((s + t) < hitTriScalar->A)) {
HXLINE(  95)									_hx_tmp = true;
            								}
            								else {
HXLINE(  95)									_hx_tmp = false;
            								}
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp = false;
            						}
HXDLIN(  95)						if (_hx_tmp) {
HXLINE(  95)							hits = (hits + 1);
HXDLIN(  95)							averageX = (averageX + x02);
HXDLIN(  95)							averageY = (averageY + y02);
HXDLIN(  95)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  95)						Float x5 = (px + x1);
HXDLIN(  95)						Float y5 = (py + y1);
HXDLIN(  95)						bool _hx_tmp4;
HXDLIN(  95)						bool _hx_tmp5;
HXDLIN(  95)						 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN(  95)						bool _hx_tmp6;
HXDLIN(  95)						if ((x5 > (this5->start - 1))) {
HXLINE(  95)							_hx_tmp6 = (x5 < (this5->max + 1));
            						}
            						else {
HXLINE(  95)							_hx_tmp6 = false;
            						}
HXDLIN(  95)						if (_hx_tmp6) {
HXLINE(  95)							 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN(  95)							if ((y5 > (this6->start - 1))) {
HXLINE(  95)								_hx_tmp5 = (y5 < (this6->max + 1));
            							}
            							else {
HXLINE(  95)								_hx_tmp5 = false;
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp5 = false;
            						}
HXDLIN(  95)						if (_hx_tmp5) {
HXLINE(  95)							Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN(  95)							Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN(  95)							bool _hx_tmp7;
HXDLIN(  95)							if (!((s1 <= 0))) {
HXLINE(  95)								_hx_tmp7 = (t1 <= 0);
            							}
            							else {
HXLINE(  95)								_hx_tmp7 = true;
            							}
HXDLIN(  95)							if (_hx_tmp7) {
HXLINE(  95)								_hx_tmp4 = false;
            							}
            							else {
HXLINE(  95)								if (((s1 + t1) < hitTriScalar->A)) {
HXLINE(  95)									_hx_tmp4 = true;
            								}
            								else {
HXLINE(  95)									_hx_tmp4 = false;
            								}
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp4 = false;
            						}
HXDLIN(  95)						if (_hx_tmp4) {
HXLINE(  95)							hits = (hits + 1);
HXDLIN(  95)							averageX = (averageX + x1);
HXDLIN(  95)							averageY = (averageY + y1);
HXDLIN(  95)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  95)						Float x6 = (px + x2);
HXDLIN(  95)						Float y6 = (py + y2);
HXDLIN(  95)						bool _hx_tmp8;
HXDLIN(  95)						bool _hx_tmp9;
HXDLIN(  95)						 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN(  95)						bool _hx_tmp10;
HXDLIN(  95)						if ((x6 > (this7->start - 1))) {
HXLINE(  95)							_hx_tmp10 = (x6 < (this7->max + 1));
            						}
            						else {
HXLINE(  95)							_hx_tmp10 = false;
            						}
HXDLIN(  95)						if (_hx_tmp10) {
HXLINE(  95)							 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN(  95)							if ((y6 > (this8->start - 1))) {
HXLINE(  95)								_hx_tmp9 = (y6 < (this8->max + 1));
            							}
            							else {
HXLINE(  95)								_hx_tmp9 = false;
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp9 = false;
            						}
HXDLIN(  95)						if (_hx_tmp9) {
HXLINE(  95)							Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN(  95)							Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN(  95)							bool _hx_tmp11;
HXDLIN(  95)							if (!((s2 <= 0))) {
HXLINE(  95)								_hx_tmp11 = (t2 <= 0);
            							}
            							else {
HXLINE(  95)								_hx_tmp11 = true;
            							}
HXDLIN(  95)							if (_hx_tmp11) {
HXLINE(  95)								_hx_tmp8 = false;
            							}
            							else {
HXLINE(  95)								if (((s2 + t2) < hitTriScalar->A)) {
HXLINE(  95)									_hx_tmp8 = true;
            								}
            								else {
HXLINE(  95)									_hx_tmp8 = false;
            								}
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp8 = false;
            						}
HXDLIN(  95)						if (_hx_tmp8) {
HXLINE(  95)							hits = (hits + 1);
HXDLIN(  95)							averageX = (averageX + x2);
HXDLIN(  95)							averageY = (averageY + y2);
HXDLIN(  95)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  95)						Float x7 = (px + x3);
HXDLIN(  95)						Float y7 = (py + y3);
HXDLIN(  95)						bool _hx_tmp12;
HXDLIN(  95)						bool _hx_tmp13;
HXDLIN(  95)						 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN(  95)						bool _hx_tmp14;
HXDLIN(  95)						if ((x7 > (this9->start - 1))) {
HXLINE(  95)							_hx_tmp14 = (x7 < (this9->max + 1));
            						}
            						else {
HXLINE(  95)							_hx_tmp14 = false;
            						}
HXDLIN(  95)						if (_hx_tmp14) {
HXLINE(  95)							 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN(  95)							if ((y7 > (this10->start - 1))) {
HXLINE(  95)								_hx_tmp13 = (y7 < (this10->max + 1));
            							}
            							else {
HXLINE(  95)								_hx_tmp13 = false;
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp13 = false;
            						}
HXDLIN(  95)						if (_hx_tmp13) {
HXLINE(  95)							Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN(  95)							Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN(  95)							bool _hx_tmp15;
HXDLIN(  95)							if (!((s3 <= 0))) {
HXLINE(  95)								_hx_tmp15 = (t3 <= 0);
            							}
            							else {
HXLINE(  95)								_hx_tmp15 = true;
            							}
HXDLIN(  95)							if (_hx_tmp15) {
HXLINE(  95)								_hx_tmp12 = false;
            							}
            							else {
HXLINE(  95)								if (((s3 + t3) < hitTriScalar->A)) {
HXLINE(  95)									_hx_tmp12 = true;
            								}
            								else {
HXLINE(  95)									_hx_tmp12 = false;
            								}
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp12 = false;
            						}
HXDLIN(  95)						if (_hx_tmp12) {
HXLINE(  95)							hits = (hits + 1);
HXDLIN(  95)							averageX = (averageX + x3);
HXDLIN(  95)							averageY = (averageY + y3);
HXDLIN(  95)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  95)						Float x8 = (px + x4);
HXDLIN(  95)						Float y8 = (py + y4);
HXDLIN(  95)						bool _hx_tmp16;
HXDLIN(  95)						bool _hx_tmp17;
HXDLIN(  95)						 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN(  95)						bool _hx_tmp18;
HXDLIN(  95)						if ((x8 > (this11->start - 1))) {
HXLINE(  95)							_hx_tmp18 = (x8 < (this11->max + 1));
            						}
            						else {
HXLINE(  95)							_hx_tmp18 = false;
            						}
HXDLIN(  95)						if (_hx_tmp18) {
HXLINE(  95)							 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN(  95)							if ((y8 > (this12->start - 1))) {
HXLINE(  95)								_hx_tmp17 = (y8 < (this12->max + 1));
            							}
            							else {
HXLINE(  95)								_hx_tmp17 = false;
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp17 = false;
            						}
HXDLIN(  95)						if (_hx_tmp17) {
HXLINE(  95)							Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN(  95)							Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN(  95)							bool _hx_tmp19;
HXDLIN(  95)							if (!((s4 <= 0))) {
HXLINE(  95)								_hx_tmp19 = (t4 <= 0);
            							}
            							else {
HXLINE(  95)								_hx_tmp19 = true;
            							}
HXDLIN(  95)							if (_hx_tmp19) {
HXLINE(  95)								_hx_tmp16 = false;
            							}
            							else {
HXLINE(  95)								if (((s4 + t4) < hitTriScalar->A)) {
HXLINE(  95)									_hx_tmp16 = true;
            								}
            								else {
HXLINE(  95)									_hx_tmp16 = false;
            								}
            							}
            						}
            						else {
HXLINE(  95)							_hx_tmp16 = false;
            						}
HXDLIN(  95)						if (_hx_tmp16) {
HXLINE(  95)							hits = (hits + 1);
HXDLIN(  95)							averageX = (averageX + x4);
HXDLIN(  95)							averageY = (averageY + y4);
HXDLIN(  95)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN(  95)						if ((hits != 0)) {
HXLINE( 244)							averageX = (px + (averageX / ( (Float)(hits) )));
HXLINE( 245)							averageY = (py + (averageY / ( (Float)(hits) )));
            						}
            						else {
HXLINE( 247)							averageX = ( (Float)(px) );
HXLINE( 248)							averageY = ( (Float)(py) );
            						}
HXLINE(  95)						Float fractionTotal1 = fractionTotal;
HXDLIN(  95)						Float sampleData_fractionTotal = fractionTotal1;
HXDLIN(  95)						Float sampleData_averageX = averageX;
HXDLIN(  95)						Float sampleData_averageY = averageY;
HXDLIN(  95)						bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXDLIN(  95)						Float aScale = sampleData_fractionTotal;
HXDLIN(  95)						if (!((aScale > ((Float)0.9)))) {
HXLINE(  95)							aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            						}
HXLINE( 142)						a = 0;
HXLINE( 143)						r = 0;
HXLINE( 144)						g = 0;
HXLINE( 145)						b = 0;
HXLINE(  95)						if (isSoft) {
HXLINE(  95)							if (!(sampleData_notHit)) {
HXLINE(  95)								Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN(  95)								Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN(  95)								Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN(  95)								Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN(  95)								Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN(  95)								Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN(  95)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  95)								Float ratiosAvg_ratioA = ratioA1;
HXDLIN(  95)								Float ratiosAvg_ratioB = ratioB1;
HXDLIN(  95)								Float ratiosAvg_ratioC = ratioC1;
HXDLIN(  95)								Float ratioA_ = ratiosAvg_ratioA;
HXDLIN(  95)								Float ratioB_ = ratiosAvg_ratioB;
HXDLIN(  95)								Float ratioC_ = ratiosAvg_ratioC;
HXDLIN(  95)								int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN(  95)								if ((i > 255)) {
HXLINE(  24)									i = 255;
            								}
HXLINE(  95)								if ((i < 0)) {
HXLINE(  25)									i = 0;
            								}
HXLINE( 152)								a = i;
HXLINE(  95)								int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN(  95)								if ((i1 > 255)) {
HXLINE(  24)									i1 = 255;
            								}
HXLINE(  95)								if ((i1 < 0)) {
HXLINE(  25)									i1 = 0;
            								}
HXLINE( 153)								r = i1;
HXLINE(  95)								int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN(  95)								if ((i2 > 255)) {
HXLINE(  24)									i2 = 255;
            								}
HXLINE(  95)								if ((i2 < 0)) {
HXLINE(  25)									i2 = 0;
            								}
HXLINE( 154)								g = i2;
HXLINE(  95)								int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN(  95)								if ((i3 > 255)) {
HXLINE(  24)									i3 = 255;
            								}
HXLINE(  95)								if ((i3 < 0)) {
HXLINE(  25)									i3 = 0;
            								}
HXLINE( 155)								b = i3;
HXLINE(  95)								{
HXLINE(  95)									int a3;
HXDLIN(  95)									if ((aScale > ((Float)0.9))) {
HXLINE(  95)										a3 = a;
            									}
            									else {
HXLINE(  95)										int i4 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  95)										if ((i4 > 255)) {
HXLINE(  24)											i4 = 255;
            										}
HXLINE(  95)										if ((i4 < 0)) {
HXLINE(  25)											i4 = 0;
            										}
HXLINE(  95)										a3 = i4;
            									}
HXDLIN(  95)									int location;
HXDLIN(  95)									if (pixelImage->useVirtualPos) {
HXLINE(  95)										location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  95)										location = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            									}
HXDLIN(  95)									bool _hx_tmp20;
HXDLIN(  95)									if (pixelImage->transparent) {
HXLINE(  95)										_hx_tmp20 = (a3 < 254);
            									}
            									else {
HXLINE(  95)										_hx_tmp20 = false;
            									}
HXDLIN(  95)									if (_hx_tmp20) {
HXLINE(  95)										int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  95)										int old;
HXDLIN(  95)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)											old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            										}
            										else {
HXLINE(  95)											old = this13;
            										}
HXDLIN(  95)										int rhs = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  95)										Float a11;
HXDLIN(  95)										int this14 = ((old >> 24) & 255);
HXDLIN(  95)										if ((this14 == 0)) {
HXLINE(  95)											a11 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float r1;
HXDLIN(  95)										int this15 = ((old >> 16) & 255);
HXDLIN(  95)										if ((this15 == 0)) {
HXLINE(  95)											r1 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float g1;
HXDLIN(  95)										int this16 = ((old >> 8) & 255);
HXDLIN(  95)										if ((this16 == 0)) {
HXLINE(  95)											g1 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float b11;
HXDLIN(  95)										int this17 = (old & 255);
HXDLIN(  95)										if ((this17 == 0)) {
HXLINE(  95)											b11 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float a21;
HXDLIN(  95)										int this18 = ((rhs >> 24) & 255);
HXDLIN(  95)										if ((this18 == 0)) {
HXLINE(  95)											a21 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float r2;
HXDLIN(  95)										int this19 = ((rhs >> 16) & 255);
HXDLIN(  95)										if ((this19 == 0)) {
HXLINE(  95)											r2 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float g2;
HXDLIN(  95)										int this20 = ((rhs >> 8) & 255);
HXDLIN(  95)										if ((this20 == 0)) {
HXLINE(  95)											g2 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float b21;
HXDLIN(  95)										int this21 = (rhs & 255);
HXDLIN(  95)										if ((this21 == 0)) {
HXLINE(  95)											b21 = ((Float)0.);
            										}
            										else {
HXLINE(  95)											b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            										}
HXDLIN(  95)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  95)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN(  95)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN(  95)										int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  95)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  95)										int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  95)										{
HXLINE(  95)											int _hx_tmp21;
HXDLIN(  95)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)												_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE(  95)												_hx_tmp21 = blended;
            											}
HXDLIN(  95)											::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            										}
            									}
            									else {
HXLINE(  95)										int value;
HXDLIN(  95)										if (pixelImage->isLittle) {
HXLINE(  95)											value = ((((a3 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE(  95)											value = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN(  95)										::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            									}
            								}
            							}
            						}
            						else {
HXLINE(  95)							Float ratioA2 = ratios_ratioA;
HXDLIN(  95)							Float ratioB2 = ratios_ratioB;
HXDLIN(  95)							Float ratioC2 = ratios_ratioC;
HXDLIN(  95)							Float hitTotal = sampleData_fractionTotal;
HXDLIN(  95)							if (!(sampleData_notHit)) {
HXLINE(  95)								Float x03 = ((Float)-0.0739127852035666);
HXDLIN(  95)								Float y03 = ((Float)0.703233176253404202);
HXDLIN(  95)								Float x11 = ((Float)-0.353553390593273564);
HXDLIN(  95)								Float y11 = ((Float)0.61237243569579447);
HXDLIN(  95)								Float x21 = ((Float)-0.572061402817684139);
HXDLIN(  95)								Float y21 = ((Float)0.415626937777453465);
HXDLIN(  95)								Float x31 = ((Float)-0.691654801480225401);
HXDLIN(  95)								Float y31 = ((Float)0.147015766465198733);
HXDLIN(  95)								Float x41 = ((Float)-0.691654801480225512);
HXDLIN(  95)								Float y41 = ((Float)-0.147015766465198261);
HXDLIN(  95)								Float averageX1 = ((Float)0.);
HXDLIN(  95)								Float averageY1 = ((Float)0.);
HXDLIN(  95)								int hits1 = 0;
HXDLIN(  95)								Float fractionTotal2 = ((Float)0.);
HXDLIN(  95)								Float x9 = (px + x03);
HXDLIN(  95)								Float y9 = (py + y03);
HXDLIN(  95)								bool _hx_tmp22;
HXDLIN(  95)								bool _hx_tmp23;
HXDLIN(  95)								 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN(  95)								bool _hx_tmp24;
HXDLIN(  95)								if ((x9 > (this22->start - 1))) {
HXLINE(  95)									_hx_tmp24 = (x9 < (this22->max + 1));
            								}
            								else {
HXLINE(  95)									_hx_tmp24 = false;
            								}
HXDLIN(  95)								if (_hx_tmp24) {
HXLINE(  95)									 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN(  95)									if ((y9 > (this23->start - 1))) {
HXLINE(  95)										_hx_tmp23 = (y9 < (this23->max + 1));
            									}
            									else {
HXLINE(  95)										_hx_tmp23 = false;
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp23 = false;
            								}
HXDLIN(  95)								if (_hx_tmp23) {
HXLINE(  95)									Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN(  95)									Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN(  95)									bool _hx_tmp25;
HXDLIN(  95)									if (!((s5 <= 0))) {
HXLINE(  95)										_hx_tmp25 = (t5 <= 0);
            									}
            									else {
HXLINE(  95)										_hx_tmp25 = true;
            									}
HXDLIN(  95)									if (_hx_tmp25) {
HXLINE(  95)										_hx_tmp22 = false;
            									}
            									else {
HXLINE(  95)										if (((s5 + t5) < scaled->A)) {
HXLINE(  95)											_hx_tmp22 = true;
            										}
            										else {
HXLINE(  95)											_hx_tmp22 = false;
            										}
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp22 = false;
            								}
HXDLIN(  95)								if (_hx_tmp22) {
HXLINE(  95)									hits1 = (hits1 + 1);
HXDLIN(  95)									averageX1 = (averageX1 + x03);
HXDLIN(  95)									averageY1 = (averageY1 + y03);
HXDLIN(  95)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  95)								Float x10 = (px + x11);
HXDLIN(  95)								Float y10 = (py + y11);
HXDLIN(  95)								bool _hx_tmp26;
HXDLIN(  95)								bool _hx_tmp27;
HXDLIN(  95)								 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN(  95)								bool _hx_tmp28;
HXDLIN(  95)								if ((x10 > (this24->start - 1))) {
HXLINE(  95)									_hx_tmp28 = (x10 < (this24->max + 1));
            								}
            								else {
HXLINE(  95)									_hx_tmp28 = false;
            								}
HXDLIN(  95)								if (_hx_tmp28) {
HXLINE(  95)									 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN(  95)									if ((y10 > (this25->start - 1))) {
HXLINE(  95)										_hx_tmp27 = (y10 < (this25->max + 1));
            									}
            									else {
HXLINE(  95)										_hx_tmp27 = false;
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp27 = false;
            								}
HXDLIN(  95)								if (_hx_tmp27) {
HXLINE(  95)									Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN(  95)									Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN(  95)									bool _hx_tmp29;
HXDLIN(  95)									if (!((s6 <= 0))) {
HXLINE(  95)										_hx_tmp29 = (t6 <= 0);
            									}
            									else {
HXLINE(  95)										_hx_tmp29 = true;
            									}
HXDLIN(  95)									if (_hx_tmp29) {
HXLINE(  95)										_hx_tmp26 = false;
            									}
            									else {
HXLINE(  95)										if (((s6 + t6) < scaled->A)) {
HXLINE(  95)											_hx_tmp26 = true;
            										}
            										else {
HXLINE(  95)											_hx_tmp26 = false;
            										}
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp26 = false;
            								}
HXDLIN(  95)								if (_hx_tmp26) {
HXLINE(  95)									hits1 = (hits1 + 1);
HXDLIN(  95)									averageX1 = (averageX1 + x11);
HXDLIN(  95)									averageY1 = (averageY1 + y11);
HXDLIN(  95)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  95)								Float x12 = (px + x21);
HXDLIN(  95)								Float y12 = (py + y21);
HXDLIN(  95)								bool _hx_tmp30;
HXDLIN(  95)								bool _hx_tmp31;
HXDLIN(  95)								 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN(  95)								bool _hx_tmp32;
HXDLIN(  95)								if ((x12 > (this26->start - 1))) {
HXLINE(  95)									_hx_tmp32 = (x12 < (this26->max + 1));
            								}
            								else {
HXLINE(  95)									_hx_tmp32 = false;
            								}
HXDLIN(  95)								if (_hx_tmp32) {
HXLINE(  95)									 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN(  95)									if ((y12 > (this27->start - 1))) {
HXLINE(  95)										_hx_tmp31 = (y12 < (this27->max + 1));
            									}
            									else {
HXLINE(  95)										_hx_tmp31 = false;
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp31 = false;
            								}
HXDLIN(  95)								if (_hx_tmp31) {
HXLINE(  95)									Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN(  95)									Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN(  95)									bool _hx_tmp33;
HXDLIN(  95)									if (!((s7 <= 0))) {
HXLINE(  95)										_hx_tmp33 = (t7 <= 0);
            									}
            									else {
HXLINE(  95)										_hx_tmp33 = true;
            									}
HXDLIN(  95)									if (_hx_tmp33) {
HXLINE(  95)										_hx_tmp30 = false;
            									}
            									else {
HXLINE(  95)										if (((s7 + t7) < scaled->A)) {
HXLINE(  95)											_hx_tmp30 = true;
            										}
            										else {
HXLINE(  95)											_hx_tmp30 = false;
            										}
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp30 = false;
            								}
HXDLIN(  95)								if (_hx_tmp30) {
HXLINE(  95)									hits1 = (hits1 + 1);
HXDLIN(  95)									averageX1 = (averageX1 + x21);
HXDLIN(  95)									averageY1 = (averageY1 + y21);
HXDLIN(  95)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  95)								Float x13 = (px + x31);
HXDLIN(  95)								Float y13 = (py + y31);
HXDLIN(  95)								bool _hx_tmp34;
HXDLIN(  95)								bool _hx_tmp35;
HXDLIN(  95)								 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN(  95)								bool _hx_tmp36;
HXDLIN(  95)								if ((x13 > (this28->start - 1))) {
HXLINE(  95)									_hx_tmp36 = (x13 < (this28->max + 1));
            								}
            								else {
HXLINE(  95)									_hx_tmp36 = false;
            								}
HXDLIN(  95)								if (_hx_tmp36) {
HXLINE(  95)									 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN(  95)									if ((y13 > (this29->start - 1))) {
HXLINE(  95)										_hx_tmp35 = (y13 < (this29->max + 1));
            									}
            									else {
HXLINE(  95)										_hx_tmp35 = false;
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp35 = false;
            								}
HXDLIN(  95)								if (_hx_tmp35) {
HXLINE(  95)									Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN(  95)									Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN(  95)									bool _hx_tmp37;
HXDLIN(  95)									if (!((s8 <= 0))) {
HXLINE(  95)										_hx_tmp37 = (t8 <= 0);
            									}
            									else {
HXLINE(  95)										_hx_tmp37 = true;
            									}
HXDLIN(  95)									if (_hx_tmp37) {
HXLINE(  95)										_hx_tmp34 = false;
            									}
            									else {
HXLINE(  95)										if (((s8 + t8) < scaled->A)) {
HXLINE(  95)											_hx_tmp34 = true;
            										}
            										else {
HXLINE(  95)											_hx_tmp34 = false;
            										}
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp34 = false;
            								}
HXDLIN(  95)								if (_hx_tmp34) {
HXLINE(  95)									hits1 = (hits1 + 1);
HXDLIN(  95)									averageX1 = (averageX1 + x31);
HXDLIN(  95)									averageY1 = (averageY1 + y31);
HXDLIN(  95)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  95)								Float x14 = (px + x41);
HXDLIN(  95)								Float y14 = (py + y41);
HXDLIN(  95)								bool _hx_tmp38;
HXDLIN(  95)								bool _hx_tmp39;
HXDLIN(  95)								 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN(  95)								bool _hx_tmp40;
HXDLIN(  95)								if ((x14 > (this30->start - 1))) {
HXLINE(  95)									_hx_tmp40 = (x14 < (this30->max + 1));
            								}
            								else {
HXLINE(  95)									_hx_tmp40 = false;
            								}
HXDLIN(  95)								if (_hx_tmp40) {
HXLINE(  95)									 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN(  95)									if ((y14 > (this31->start - 1))) {
HXLINE(  95)										_hx_tmp39 = (y14 < (this31->max + 1));
            									}
            									else {
HXLINE(  95)										_hx_tmp39 = false;
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp39 = false;
            								}
HXDLIN(  95)								if (_hx_tmp39) {
HXLINE(  95)									Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN(  95)									Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN(  95)									bool _hx_tmp41;
HXDLIN(  95)									if (!((s9 <= 0))) {
HXLINE(  95)										_hx_tmp41 = (t9 <= 0);
            									}
            									else {
HXLINE(  95)										_hx_tmp41 = true;
            									}
HXDLIN(  95)									if (_hx_tmp41) {
HXLINE(  95)										_hx_tmp38 = false;
            									}
            									else {
HXLINE(  95)										if (((s9 + t9) < scaled->A)) {
HXLINE(  95)											_hx_tmp38 = true;
            										}
            										else {
HXLINE(  95)											_hx_tmp38 = false;
            										}
            									}
            								}
            								else {
HXLINE(  95)									_hx_tmp38 = false;
            								}
HXDLIN(  95)								if (_hx_tmp38) {
HXLINE(  95)									hits1 = (hits1 + 1);
HXDLIN(  95)									averageX1 = (averageX1 + x41);
HXDLIN(  95)									averageY1 = (averageY1 + y41);
HXDLIN(  95)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN(  95)								if ((hits1 != 0)) {
HXLINE( 244)									averageX1 = (px + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)									averageY1 = (py + (averageY1 / ( (Float)(hits1) )));
            								}
            								else {
HXLINE( 247)									averageX1 = ( (Float)(px) );
HXLINE( 248)									averageY1 = ( (Float)(py) );
            								}
HXLINE(  95)								Float fractionTotal3 = fractionTotal2;
HXDLIN(  95)								Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN(  95)								Float sampleScaled_averageX = averageX1;
HXDLIN(  95)								Float sampleScaled_averageY = averageY1;
HXDLIN(  95)								bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXDLIN(  95)								Float scaledTotal = sampleScaled_fractionTotal;
HXDLIN(  95)								bool _hx_tmp42;
HXDLIN(  95)								if (!((scaledTotal > hitTotal))) {
HXLINE(  95)									_hx_tmp42 = (hitTotal == ((Float)1.));
            								}
            								else {
HXLINE(  95)									_hx_tmp42 = true;
            								}
HXDLIN(  95)								if (_hx_tmp42) {
HXLINE(  95)									Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN(  95)									Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN(  95)									Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN(  95)									Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN(  95)									Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN(  95)									Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN(  95)									Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  95)									Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN(  95)									Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN(  95)									Float ratiosAvg_ratioC1 = ratioC3;
HXDLIN(  95)									Float ratioA_1 = ratiosAvg_ratioA1;
HXDLIN(  95)									Float ratioB_1 = ratiosAvg_ratioB1;
HXDLIN(  95)									Float ratioC_1 = ratiosAvg_ratioC1;
HXDLIN(  95)									int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN(  95)									if ((i5 > 255)) {
HXLINE(  24)										i5 = 255;
            									}
HXLINE(  95)									if ((i5 < 0)) {
HXLINE(  25)										i5 = 0;
            									}
HXLINE( 187)									a = i5;
HXLINE(  95)									int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN(  95)									if ((i6 > 255)) {
HXLINE(  24)										i6 = 255;
            									}
HXLINE(  95)									if ((i6 < 0)) {
HXLINE(  25)										i6 = 0;
            									}
HXLINE( 188)									r = i6;
HXLINE(  95)									int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN(  95)									if ((i7 > 255)) {
HXLINE(  24)										i7 = 255;
            									}
HXLINE(  95)									if ((i7 < 0)) {
HXLINE(  25)										i7 = 0;
            									}
HXLINE( 189)									g = i7;
HXLINE(  95)									int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN(  95)									if ((i8 > 255)) {
HXLINE(  24)										i8 = 255;
            									}
HXLINE(  95)									if ((i8 < 0)) {
HXLINE(  25)										i8 = 0;
            									}
HXLINE( 190)									b = i8;
HXLINE(  95)									{
HXLINE(  95)										int location1;
HXDLIN(  95)										if (pixelImage->useVirtualPos) {
HXLINE(  95)											location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  95)											location1 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            										}
HXDLIN(  95)										bool _hx_tmp43;
HXDLIN(  95)										if (pixelImage->transparent) {
HXLINE(  95)											_hx_tmp43 = (a < 254);
            										}
            										else {
HXLINE(  95)											_hx_tmp43 = false;
            										}
HXDLIN(  95)										if (_hx_tmp43) {
HXLINE(  95)											int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  95)											int old1;
HXDLIN(  95)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)												old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            											}
            											else {
HXLINE(  95)												old1 = this32;
            											}
HXDLIN(  95)											int rhs1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  95)											Float a12;
HXDLIN(  95)											int this33 = ((old1 >> 24) & 255);
HXDLIN(  95)											if ((this33 == 0)) {
HXLINE(  95)												a12 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float r11;
HXDLIN(  95)											int this34 = ((old1 >> 16) & 255);
HXDLIN(  95)											if ((this34 == 0)) {
HXLINE(  95)												r11 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float g11;
HXDLIN(  95)											int this35 = ((old1 >> 8) & 255);
HXDLIN(  95)											if ((this35 == 0)) {
HXLINE(  95)												g11 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float b12;
HXDLIN(  95)											int this36 = (old1 & 255);
HXDLIN(  95)											if ((this36 == 0)) {
HXLINE(  95)												b12 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float a22;
HXDLIN(  95)											int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  95)											if ((this37 == 0)) {
HXLINE(  95)												a22 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float r21;
HXDLIN(  95)											int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  95)											if ((this38 == 0)) {
HXLINE(  95)												r21 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float g21;
HXDLIN(  95)											int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  95)											if ((this39 == 0)) {
HXLINE(  95)												g21 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float b22;
HXDLIN(  95)											int this40 = (rhs1 & 255);
HXDLIN(  95)											if ((this40 == 0)) {
HXLINE(  95)												b22 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  95)											int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN(  95)											int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN(  95)											int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  95)											int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  95)											int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  95)											{
HXLINE(  95)												int _hx_tmp44;
HXDLIN(  95)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)													_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            												}
            												else {
HXLINE(  95)													_hx_tmp44 = blended1;
            												}
HXDLIN(  95)												::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            											}
            										}
            										else {
HXLINE(  95)											int value1;
HXDLIN(  95)											if (pixelImage->isLittle) {
HXLINE(  95)												value1 = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE(  95)												value1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN(  95)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            										}
            									}
            								}
            								else {
HXLINE(  95)									Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN(  95)									Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN(  95)									Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN(  95)									Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN(  95)									Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN(  95)									Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN(  95)									Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  95)									Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN(  95)									Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN(  95)									Float ratiosAvg_ratioC2 = ratioC4;
HXDLIN(  95)									Float ratioA_2 = ratiosAvg_ratioA2;
HXDLIN(  95)									Float ratioB_2 = ratiosAvg_ratioB2;
HXDLIN(  95)									Float ratioC_2 = ratiosAvg_ratioC2;
HXDLIN(  95)									int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN(  95)									if ((i9 > 255)) {
HXLINE(  24)										i9 = 255;
            									}
HXLINE(  95)									if ((i9 < 0)) {
HXLINE(  25)										i9 = 0;
            									}
HXLINE( 198)									a = i9;
HXLINE(  95)									int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN(  95)									if ((i10 > 255)) {
HXLINE(  24)										i10 = 255;
            									}
HXLINE(  95)									if ((i10 < 0)) {
HXLINE(  25)										i10 = 0;
            									}
HXLINE( 199)									r = i10;
HXLINE(  95)									int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN(  95)									if ((i11 > 255)) {
HXLINE(  24)										i11 = 255;
            									}
HXLINE(  95)									if ((i11 < 0)) {
HXLINE(  25)										i11 = 0;
            									}
HXLINE( 200)									g = i11;
HXLINE(  95)									int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN(  95)									if ((i12 > 255)) {
HXLINE(  24)										i12 = 255;
            									}
HXLINE(  95)									if ((i12 < 0)) {
HXLINE(  25)										i12 = 0;
            									}
HXLINE( 201)									b = i12;
HXLINE(  95)									{
HXLINE(  95)										int a6;
HXDLIN(  95)										if ((aScale > ((Float)0.9))) {
HXLINE(  95)											a6 = a;
            										}
            										else {
HXLINE(  95)											int i13 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN(  95)											if ((i13 > 255)) {
HXLINE(  24)												i13 = 255;
            											}
HXLINE(  95)											if ((i13 < 0)) {
HXLINE(  25)												i13 = 0;
            											}
HXLINE(  95)											a6 = i13;
            										}
HXDLIN(  95)										int location2;
HXDLIN(  95)										if (pixelImage->useVirtualPos) {
HXLINE(  95)											location2 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  95)											location2 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            										}
HXDLIN(  95)										bool _hx_tmp45;
HXDLIN(  95)										if (pixelImage->transparent) {
HXLINE(  95)											_hx_tmp45 = (a6 < 254);
            										}
            										else {
HXLINE(  95)											_hx_tmp45 = false;
            										}
HXDLIN(  95)										if (_hx_tmp45) {
HXLINE(  95)											int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  95)											int old2;
HXDLIN(  95)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)												old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            											}
            											else {
HXLINE(  95)												old2 = this41;
            											}
HXDLIN(  95)											int rhs2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  95)											Float a13;
HXDLIN(  95)											int this42 = ((old2 >> 24) & 255);
HXDLIN(  95)											if ((this42 == 0)) {
HXLINE(  95)												a13 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float r12;
HXDLIN(  95)											int this43 = ((old2 >> 16) & 255);
HXDLIN(  95)											if ((this43 == 0)) {
HXLINE(  95)												r12 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float g12;
HXDLIN(  95)											int this44 = ((old2 >> 8) & 255);
HXDLIN(  95)											if ((this44 == 0)) {
HXLINE(  95)												g12 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float b13;
HXDLIN(  95)											int this45 = (old2 & 255);
HXDLIN(  95)											if ((this45 == 0)) {
HXLINE(  95)												b13 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float a23;
HXDLIN(  95)											int this46 = ((rhs2 >> 24) & 255);
HXDLIN(  95)											if ((this46 == 0)) {
HXLINE(  95)												a23 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float r22;
HXDLIN(  95)											int this47 = ((rhs2 >> 16) & 255);
HXDLIN(  95)											if ((this47 == 0)) {
HXLINE(  95)												r22 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float g22;
HXDLIN(  95)											int this48 = ((rhs2 >> 8) & 255);
HXDLIN(  95)											if ((this48 == 0)) {
HXLINE(  95)												g22 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float b23;
HXDLIN(  95)											int this49 = (rhs2 & 255);
HXDLIN(  95)											if ((this49 == 0)) {
HXLINE(  95)												b23 = ((Float)0.);
            											}
            											else {
HXLINE(  95)												b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN(  95)											Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  95)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN(  95)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN(  95)											int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  95)											int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  95)											int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  95)											{
HXLINE(  95)												int _hx_tmp46;
HXDLIN(  95)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)													_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE(  95)													_hx_tmp46 = blended2;
            												}
HXDLIN(  95)												::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            											}
            										}
            										else {
HXLINE(  95)											int value2;
HXDLIN(  95)											if (pixelImage->isLittle) {
HXLINE(  95)												value2 = ((((a6 << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE(  95)												value2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN(  95)											::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  95)		if ((hasHit == false)) {
HXLINE(  95)			 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  95)			return v4;
            		}
            		else {
HXLINE(  95)			return null();
            		}
HXDLIN(  95)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(TriPixelSmoothGrad_Fields__obj,triGradPentBaryTop,return )

 ::pi_xy::algo::HitTri TriPixelSmoothGrad_Fields__obj::triGradPentBary( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,int colA,Float bx,Float by,int colB,Float cx,Float cy,int colC,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCA,::hx::Null< bool >  __o_hasHit,::hx::Null< bool >  __o_hasUndo){
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCA = __o_softCA.Default(true);
            		bool hasHit = __o_hasHit.Default(false);
            		bool hasUndo = __o_hasUndo.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_c88345def33277a9_105_triGradPentBary)
HXLINE( 107)		int aA = ((colB >> 24) & 255);
HXLINE( 108)		int rA = ((colB >> 16) & 255);
HXLINE( 109)		int gA = ((colB >> 8) & 255);
HXLINE( 110)		int bA = (colB & 255);
HXLINE( 111)		int aB = ((colA >> 24) & 255);
HXLINE( 112)		int rB = ((colA >> 16) & 255);
HXLINE( 113)		int gB = ((colA >> 8) & 255);
HXLINE( 114)		int bB = (colA & 255);
HXLINE( 115)		int aC = ((colC >> 24) & 255);
HXLINE( 116)		int rC = ((colC >> 16) & 255);
HXLINE( 117)		int gC = ((colC >> 8) & 255);
HXLINE( 118)		int bC = (colC & 255);
HXLINE( 120)		int a = 0;
HXLINE( 121)		int r = 0;
HXLINE( 122)		int g = 0;
HXLINE( 123)		int b = 0;
HXLINE( 125)		 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXLINE( 127)		 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN( 127)		 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN( 127)		Float barycentric_dot22;
HXDLIN( 127)		Float barycentric_dot12;
HXDLIN( 127)		Float barycentric_dot11;
HXDLIN( 127)		Float barycentric_denom1;
HXDLIN( 127)		Float barycentric_bcy;
HXDLIN( 127)		Float barycentric_bcx;
HXDLIN( 127)		Float barycentric_acy;
HXDLIN( 127)		Float barycentric_acx;
HXDLIN( 127)		Float barycentric_ax = hitTriScalar->ax;
HXDLIN( 127)		Float barycentric_ay = hitTriScalar->ay;
HXDLIN( 127)		Float barycentric_bx = hitTriScalar->bx;
HXDLIN( 127)		Float barycentric_by = hitTriScalar->by;
HXDLIN( 127)		Float barycentric_cx = hitTriScalar->cx;
HXDLIN( 127)		Float barycentric_cy = hitTriScalar->cy;
HXDLIN( 127)		bool barycentric_preCalculated = true;
HXDLIN( 127)		{
HXLINE( 127)			barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN( 127)			barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN( 127)			barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN( 127)			barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN( 127)			Float ax1 = barycentric_bcx;
HXDLIN( 127)			Float ay1 = barycentric_bcy;
HXDLIN( 127)			barycentric_dot11 = ((ax1 * ax1) + (ay1 * ay1));
HXDLIN( 127)			barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN( 127)			Float ax2 = barycentric_acx;
HXDLIN( 127)			Float ay2 = barycentric_acy;
HXDLIN( 127)			barycentric_dot22 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN( 127)			barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN( 127)			Float a1 = barycentric_ax;
HXDLIN( 127)			Float b1 = barycentric_bx;
HXDLIN( 127)			Float c = barycentric_cx;
HXDLIN( 127)			if ((a1 > b1)) {
HXLINE( 127)				if ((a1 > c)) {
HXLINE( 127)					int min;
HXDLIN( 127)					if ((b1 > c)) {
HXLINE( 127)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE( 127)						min = ::Math_obj::floor(b1);
            					}
HXDLIN( 127)					int ii_min = min;
HXDLIN( 127)					int ii_max = ::Math_obj::ceil(a1);
HXDLIN( 127)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE( 127)					int ii_min1 = ::Math_obj::floor(b1);
HXDLIN( 127)					int ii_max1 = ::Math_obj::ceil(c);
HXDLIN( 127)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE( 127)				if ((b1 > c)) {
HXLINE( 127)					int min1;
HXDLIN( 127)					if ((a1 > c)) {
HXLINE( 127)						min1 = ::Math_obj::floor(c);
            					}
            					else {
HXLINE( 127)						min1 = ::Math_obj::ceil(a1);
            					}
HXDLIN( 127)					int ii_min2 = min1;
HXDLIN( 127)					int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN( 127)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE( 127)					int ii_min3 = ::Math_obj::floor(a1);
HXDLIN( 127)					int ii_max3 = ::Math_obj::ceil(c);
HXDLIN( 127)					barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 127)			Float a2 = barycentric_ay;
HXDLIN( 127)			Float b2 = barycentric_by;
HXDLIN( 127)			Float c1 = barycentric_cy;
HXDLIN( 127)			if ((a2 > b2)) {
HXLINE( 127)				if ((a2 > c1)) {
HXLINE( 127)					int min2;
HXDLIN( 127)					if ((b2 > c1)) {
HXLINE( 127)						min2 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE( 127)						min2 = ::Math_obj::floor(b2);
            					}
HXDLIN( 127)					int ii_min4 = min2;
HXDLIN( 127)					int ii_max4 = ::Math_obj::ceil(a2);
HXDLIN( 127)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE( 127)					int ii_min5 = ::Math_obj::floor(b2);
HXDLIN( 127)					int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN( 127)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE( 127)				if ((b2 > c1)) {
HXLINE( 127)					int min3;
HXDLIN( 127)					if ((a2 > c1)) {
HXLINE( 127)						min3 = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE( 127)						min3 = ::Math_obj::ceil(a2);
            					}
HXDLIN( 127)					int ii_min6 = min3;
HXDLIN( 127)					int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN( 127)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE( 127)					int ii_min7 = ::Math_obj::floor(a2);
HXDLIN( 127)					int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN( 127)					barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
            		}
HXLINE( 128)		Float scaleA;
HXDLIN( 128)		bool scaleA1;
HXDLIN( 128)		if (!(softAB)) {
HXLINE( 128)			scaleA1 = softCA;
            		}
            		else {
HXLINE( 128)			scaleA1 = true;
            		}
HXDLIN( 128)		if (scaleA1) {
HXLINE( 128)			scaleA = ((Float)1.5);
            		}
            		else {
HXLINE( 128)			scaleA = ((Float)1.);
            		}
HXLINE( 129)		Float scaleB;
HXDLIN( 129)		bool scaleB1;
HXDLIN( 129)		if (!(softAB)) {
HXLINE( 129)			scaleB1 = softBC;
            		}
            		else {
HXLINE( 129)			scaleB1 = true;
            		}
HXDLIN( 129)		if (scaleB1) {
HXLINE( 129)			scaleB = ((Float)1.5);
            		}
            		else {
HXLINE( 129)			scaleB = ((Float)1.);
            		}
HXLINE( 130)		Float scaleC;
HXDLIN( 130)		bool scaleC1;
HXDLIN( 130)		if (!(softBC)) {
HXLINE( 130)			scaleC1 = softCA;
            		}
            		else {
HXLINE( 130)			scaleC1 = true;
            		}
HXDLIN( 130)		if (scaleC1) {
HXLINE( 130)			scaleC = ((Float)1.5);
            		}
            		else {
HXLINE( 130)			scaleC = ((Float)1.);
            		}
HXLINE( 132)		Float x0 = ((Float)0.);
HXDLIN( 132)		Float y0 = ((Float)0.);
HXDLIN( 132)		bool isScaledA = true;
HXDLIN( 132)		bool isScaledB = true;
HXDLIN( 132)		bool isScaledC = true;
HXDLIN( 132)		if (isScaledA) {
HXLINE( 132)			if (isScaledB) {
HXLINE( 132)				if (isScaledC) {
HXLINE(  82)					x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)					y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x0 = hitTriScalar->cx;
HXLINE(  80)					y0 = hitTriScalar->cy;
            				}
            			}
            			else {
HXLINE( 132)				if (isScaledC) {
HXLINE(  76)					x0 = hitTriScalar->bx;
HXLINE(  77)					y0 = hitTriScalar->by;
            				}
            				else {
HXLINE(  73)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            				}
            			}
            		}
            		else {
HXLINE( 132)			if (isScaledB) {
HXLINE( 132)				if (isScaledC) {
HXLINE(  70)					x0 = hitTriScalar->ax;
HXLINE(  71)					y0 = hitTriScalar->ay;
            				}
            				else {
HXLINE(  67)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            				}
            			}
            			else {
HXLINE( 132)				if (isScaledC) {
HXLINE(  64)					x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)					y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            				}
            				else {
HXLINE(  61)					x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)					y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE( 132)		Float ax_;
HXDLIN( 132)		if (isScaledA) {
HXLINE( 132)			Float point = hitTriScalar->ax;
HXDLIN( 132)			point = (point - x0);
HXDLIN( 132)			point = (point * ((Float)0.999));
HXDLIN( 132)			point = (point + x0);
HXDLIN( 132)			ax_ = point;
            		}
            		else {
HXLINE( 132)			ax_ = hitTriScalar->ax;
            		}
HXDLIN( 132)		Float ay_;
HXDLIN( 132)		if (isScaledA) {
HXLINE( 132)			Float point1 = hitTriScalar->ay;
HXDLIN( 132)			point1 = (point1 - y0);
HXDLIN( 132)			point1 = (point1 * ((Float)0.999));
HXDLIN( 132)			point1 = (point1 + y0);
HXDLIN( 132)			ay_ = point1;
            		}
            		else {
HXLINE( 132)			ay_ = hitTriScalar->ay;
            		}
HXDLIN( 132)		Float bx_;
HXDLIN( 132)		if (isScaledB) {
HXLINE( 132)			Float point2 = hitTriScalar->bx;
HXDLIN( 132)			point2 = (point2 - x0);
HXDLIN( 132)			point2 = (point2 * ((Float)0.999));
HXDLIN( 132)			point2 = (point2 + x0);
HXDLIN( 132)			bx_ = point2;
            		}
            		else {
HXLINE( 132)			bx_ = hitTriScalar->bx;
            		}
HXDLIN( 132)		Float by_;
HXDLIN( 132)		if (isScaledB) {
HXLINE( 132)			Float point3 = hitTriScalar->by;
HXDLIN( 132)			point3 = (point3 - y0);
HXDLIN( 132)			point3 = (point3 * ((Float)0.999));
HXDLIN( 132)			point3 = (point3 + y0);
HXDLIN( 132)			by_ = point3;
            		}
            		else {
HXLINE( 132)			by_ = hitTriScalar->by;
            		}
HXDLIN( 132)		Float cx_;
HXDLIN( 132)		if (isScaledC) {
HXLINE( 132)			Float point4 = hitTriScalar->cx;
HXDLIN( 132)			point4 = (point4 - x0);
HXDLIN( 132)			point4 = (point4 * ((Float)0.999));
HXDLIN( 132)			point4 = (point4 + x0);
HXDLIN( 132)			cx_ = point4;
            		}
            		else {
HXLINE( 132)			cx_ = hitTriScalar->cx;
            		}
HXDLIN( 132)		Float cy_;
HXDLIN( 132)		if (isScaledC) {
HXLINE( 132)			Float point5 = hitTriScalar->cy;
HXDLIN( 132)			point5 = (point5 - y0);
HXDLIN( 132)			point5 = (point5 * ((Float)0.999));
HXDLIN( 132)			point5 = (point5 + y0);
HXDLIN( 132)			cy_ = point5;
            		}
            		else {
HXLINE( 132)			cy_ = hitTriScalar->cy;
            		}
HXDLIN( 132)		 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_,by_,cx_,cy_,true);
HXLINE( 133)		Float x01 = ((Float)0.);
HXDLIN( 133)		Float y01 = ((Float)0.);
HXDLIN( 133)		bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN( 133)		bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN( 133)		bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN( 133)		if (isScaledA1) {
HXLINE( 133)			if (isScaledB1) {
HXLINE( 133)				if (isScaledC1) {
HXLINE(  82)					x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)					y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            				}
            				else {
HXLINE(  79)					x01 = scaled->cx;
HXLINE(  80)					y01 = scaled->cy;
            				}
            			}
            			else {
HXLINE( 133)				if (isScaledC1) {
HXLINE(  76)					x01 = scaled->bx;
HXLINE(  77)					y01 = scaled->by;
            				}
            				else {
HXLINE(  73)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            				}
            			}
            		}
            		else {
HXLINE( 133)			if (isScaledB1) {
HXLINE( 133)				if (isScaledC1) {
HXLINE(  70)					x01 = scaled->ax;
HXLINE(  71)					y01 = scaled->ay;
            				}
            				else {
HXLINE(  67)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            				}
            			}
            			else {
HXLINE( 133)				if (isScaledC1) {
HXLINE(  64)					x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)					y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            				}
            				else {
HXLINE(  61)					x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)					y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            				}
            			}
            		}
HXLINE( 133)		Float ax_1;
HXDLIN( 133)		if (isScaledA1) {
HXLINE( 133)			Float point6 = scaled->ax;
HXDLIN( 133)			point6 = (point6 - x01);
HXDLIN( 133)			point6 = (point6 * scaleA);
HXDLIN( 133)			point6 = (point6 + x01);
HXDLIN( 133)			ax_1 = point6;
            		}
            		else {
HXLINE( 133)			ax_1 = scaled->ax;
            		}
HXDLIN( 133)		Float ay_1;
HXDLIN( 133)		if (isScaledA1) {
HXLINE( 133)			Float point7 = scaled->ay;
HXDLIN( 133)			point7 = (point7 - y01);
HXDLIN( 133)			point7 = (point7 * scaleA);
HXDLIN( 133)			point7 = (point7 + y01);
HXDLIN( 133)			ay_1 = point7;
            		}
            		else {
HXLINE( 133)			ay_1 = scaled->ay;
            		}
HXDLIN( 133)		Float bx_1;
HXDLIN( 133)		if (isScaledB1) {
HXLINE( 133)			Float point8 = scaled->bx;
HXDLIN( 133)			point8 = (point8 - x01);
HXDLIN( 133)			point8 = (point8 * scaleB);
HXDLIN( 133)			point8 = (point8 + x01);
HXDLIN( 133)			bx_1 = point8;
            		}
            		else {
HXLINE( 133)			bx_1 = scaled->bx;
            		}
HXDLIN( 133)		Float by_1;
HXDLIN( 133)		if (isScaledB1) {
HXLINE( 133)			Float point9 = scaled->by;
HXDLIN( 133)			point9 = (point9 - y01);
HXDLIN( 133)			point9 = (point9 * scaleB);
HXDLIN( 133)			point9 = (point9 + y01);
HXDLIN( 133)			by_1 = point9;
            		}
            		else {
HXLINE( 133)			by_1 = scaled->by;
            		}
HXDLIN( 133)		Float cx_1;
HXDLIN( 133)		if (isScaledC1) {
HXLINE( 133)			Float point10 = scaled->cx;
HXDLIN( 133)			point10 = (point10 - x01);
HXDLIN( 133)			point10 = (point10 * scaleC);
HXDLIN( 133)			point10 = (point10 + x01);
HXDLIN( 133)			cx_1 = point10;
            		}
            		else {
HXLINE( 133)			cx_1 = scaled->cx;
            		}
HXDLIN( 133)		Float cy_1;
HXDLIN( 133)		if (isScaledC1) {
HXLINE( 133)			Float point11 = scaled->cy;
HXDLIN( 133)			point11 = (point11 - y01);
HXDLIN( 133)			point11 = (point11 * scaleC);
HXDLIN( 133)			point11 = (point11 + y01);
HXDLIN( 133)			cy_1 = point11;
            		}
            		else {
HXLINE( 133)			cy_1 = scaled->cy;
            		}
HXDLIN( 133)		scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_1,by_1,cx_1,cy_1,true);
HXLINE( 134)		{
HXLINE( 134)			 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN( 134)			int _g_min = this1->start;
HXDLIN( 134)			int _g_max = this1->max;
HXDLIN( 134)			while((_g_min < _g_max)){
HXLINE( 134)				_g_min = (_g_min + 1);
HXDLIN( 134)				int px = (_g_min - 1);
HXLINE( 136)				{
HXLINE( 136)					 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN( 136)					int _g_min1 = this2->start;
HXDLIN( 136)					int _g_max1 = this2->max;
HXDLIN( 136)					while((_g_min1 < _g_max1)){
HXLINE( 136)						_g_min1 = (_g_min1 + 1);
HXDLIN( 136)						int py = (_g_min1 - 1);
HXLINE( 137)						Float pcx = (( (Float)(px) ) - barycentric_cx);
HXDLIN( 137)						Float pcy = (( (Float)(py) ) - barycentric_cy);
HXDLIN( 137)						Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN( 137)						Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN( 137)						Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN( 137)						Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN( 137)						Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 137)						Float ratios_ratioA = ratioA;
HXDLIN( 137)						Float ratios_ratioB = ratioB;
HXDLIN( 137)						Float ratios_ratioC = ratioC;
HXLINE( 138)						Float v;
HXDLIN( 138)						if ((ratios_ratioA < ratios_ratioB)) {
HXLINE( 138)							v = ratios_ratioA;
            						}
            						else {
HXLINE( 138)							v = ratios_ratioB;
            						}
HXDLIN( 138)						Float min_;
HXDLIN( 138)						if ((v < ratios_ratioC)) {
HXLINE( 138)							min_ = v;
            						}
            						else {
HXLINE( 138)							min_ = ratios_ratioC;
            						}
HXDLIN( 138)						bool isSoft;
HXDLIN( 138)						if (softAB) {
HXLINE( 138)							if (softBC) {
HXLINE( 138)								if (softCA) {
HXLINE( 138)									isSoft = true;
            								}
            								else {
HXLINE( 138)									if ((min_ != ratios_ratioB)) {
HXLINE( 138)										Float v1;
HXDLIN( 138)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE( 138)											v1 = ratios_ratioA;
            										}
            										else {
HXLINE( 138)											v1 = ratios_ratioB;
            										}
HXDLIN( 138)										Float isSoft1;
HXDLIN( 138)										if ((v1 < ratios_ratioC)) {
HXLINE( 138)											isSoft1 = v1;
            										}
            										else {
HXLINE( 138)											isSoft1 = ratios_ratioC;
            										}
HXDLIN( 138)										isSoft = (isSoft1 == ratios_ratioC);
            									}
            									else {
HXLINE( 138)										isSoft = true;
            									}
            								}
            							}
            							else {
HXLINE( 138)								if (softCA) {
HXLINE( 138)									if ((min_ != ratios_ratioA)) {
HXLINE( 138)										Float v2;
HXDLIN( 138)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE( 138)											v2 = ratios_ratioA;
            										}
            										else {
HXLINE( 138)											v2 = ratios_ratioB;
            										}
HXDLIN( 138)										Float isSoft2;
HXDLIN( 138)										if ((v2 < ratios_ratioC)) {
HXLINE( 138)											isSoft2 = v2;
            										}
            										else {
HXLINE( 138)											isSoft2 = ratios_ratioC;
            										}
HXDLIN( 138)										isSoft = (isSoft2 == ratios_ratioC);
            									}
            									else {
HXLINE( 138)										isSoft = true;
            									}
            								}
            								else {
HXLINE( 138)									isSoft = (min_ == ratios_ratioC);
            								}
            							}
            						}
            						else {
HXLINE( 138)							if (softBC) {
HXLINE( 138)								if (softCA) {
HXLINE( 138)									if ((min_ != ratios_ratioA)) {
HXLINE( 138)										Float v3;
HXDLIN( 138)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE( 138)											v3 = ratios_ratioA;
            										}
            										else {
HXLINE( 138)											v3 = ratios_ratioB;
            										}
HXDLIN( 138)										Float isSoft3;
HXDLIN( 138)										if ((v3 < ratios_ratioC)) {
HXLINE( 138)											isSoft3 = v3;
            										}
            										else {
HXLINE( 138)											isSoft3 = ratios_ratioC;
            										}
HXDLIN( 138)										isSoft = (isSoft3 == ratios_ratioB);
            									}
            									else {
HXLINE( 138)										isSoft = true;
            									}
            								}
            								else {
HXLINE( 138)									isSoft = (min_ == ratios_ratioB);
            								}
            							}
            							else {
HXLINE( 138)								if (softCA) {
HXLINE( 138)									isSoft = (min_ == ratios_ratioA);
            								}
            								else {
HXLINE( 138)									isSoft = false;
            								}
            							}
            						}
HXLINE( 139)						Float x02 = ((Float)-0.0739127852035666);
HXDLIN( 139)						Float y02 = ((Float)0.703233176253404202);
HXDLIN( 139)						Float x1 = ((Float)-0.353553390593273564);
HXDLIN( 139)						Float y1 = ((Float)0.61237243569579447);
HXDLIN( 139)						Float x2 = ((Float)-0.572061402817684139);
HXDLIN( 139)						Float y2 = ((Float)0.415626937777453465);
HXDLIN( 139)						Float x3 = ((Float)-0.691654801480225401);
HXDLIN( 139)						Float y3 = ((Float)0.147015766465198733);
HXDLIN( 139)						Float x4 = ((Float)-0.691654801480225512);
HXDLIN( 139)						Float y4 = ((Float)-0.147015766465198261);
HXDLIN( 139)						Float averageX = ((Float)0.);
HXDLIN( 139)						Float averageY = ((Float)0.);
HXDLIN( 139)						int hits = 0;
HXDLIN( 139)						Float fractionTotal = ((Float)0.);
HXDLIN( 139)						Float x = (px + x02);
HXDLIN( 139)						Float y = (py + y02);
HXDLIN( 139)						bool _hx_tmp;
HXDLIN( 139)						bool _hx_tmp1;
HXDLIN( 139)						 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN( 139)						bool _hx_tmp2;
HXDLIN( 139)						if ((x > (this3->start - 1))) {
HXLINE( 139)							_hx_tmp2 = (x < (this3->max + 1));
            						}
            						else {
HXLINE( 139)							_hx_tmp2 = false;
            						}
HXDLIN( 139)						if (_hx_tmp2) {
HXLINE( 139)							 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN( 139)							if ((y > (this4->start - 1))) {
HXLINE( 139)								_hx_tmp1 = (y < (this4->max + 1));
            							}
            							else {
HXLINE( 139)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp1 = false;
            						}
HXDLIN( 139)						if (_hx_tmp1) {
HXLINE( 139)							Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN( 139)							Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN( 139)							bool _hx_tmp3;
HXDLIN( 139)							if (!((s <= 0))) {
HXLINE( 139)								_hx_tmp3 = (t <= 0);
            							}
            							else {
HXLINE( 139)								_hx_tmp3 = true;
            							}
HXDLIN( 139)							if (_hx_tmp3) {
HXLINE( 139)								_hx_tmp = false;
            							}
            							else {
HXLINE( 139)								if (((s + t) < hitTriScalar->A)) {
HXLINE( 139)									_hx_tmp = true;
            								}
            								else {
HXLINE( 139)									_hx_tmp = false;
            								}
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp = false;
            						}
HXDLIN( 139)						if (_hx_tmp) {
HXLINE( 139)							hits = (hits + 1);
HXDLIN( 139)							averageX = (averageX + x02);
HXDLIN( 139)							averageY = (averageY + y02);
HXDLIN( 139)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN( 139)						Float x5 = (px + x1);
HXDLIN( 139)						Float y5 = (py + y1);
HXDLIN( 139)						bool _hx_tmp4;
HXDLIN( 139)						bool _hx_tmp5;
HXDLIN( 139)						 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN( 139)						bool _hx_tmp6;
HXDLIN( 139)						if ((x5 > (this5->start - 1))) {
HXLINE( 139)							_hx_tmp6 = (x5 < (this5->max + 1));
            						}
            						else {
HXLINE( 139)							_hx_tmp6 = false;
            						}
HXDLIN( 139)						if (_hx_tmp6) {
HXLINE( 139)							 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN( 139)							if ((y5 > (this6->start - 1))) {
HXLINE( 139)								_hx_tmp5 = (y5 < (this6->max + 1));
            							}
            							else {
HXLINE( 139)								_hx_tmp5 = false;
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp5 = false;
            						}
HXDLIN( 139)						if (_hx_tmp5) {
HXLINE( 139)							Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN( 139)							Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN( 139)							bool _hx_tmp7;
HXDLIN( 139)							if (!((s1 <= 0))) {
HXLINE( 139)								_hx_tmp7 = (t1 <= 0);
            							}
            							else {
HXLINE( 139)								_hx_tmp7 = true;
            							}
HXDLIN( 139)							if (_hx_tmp7) {
HXLINE( 139)								_hx_tmp4 = false;
            							}
            							else {
HXLINE( 139)								if (((s1 + t1) < hitTriScalar->A)) {
HXLINE( 139)									_hx_tmp4 = true;
            								}
            								else {
HXLINE( 139)									_hx_tmp4 = false;
            								}
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp4 = false;
            						}
HXDLIN( 139)						if (_hx_tmp4) {
HXLINE( 139)							hits = (hits + 1);
HXDLIN( 139)							averageX = (averageX + x1);
HXDLIN( 139)							averageY = (averageY + y1);
HXDLIN( 139)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN( 139)						Float x6 = (px + x2);
HXDLIN( 139)						Float y6 = (py + y2);
HXDLIN( 139)						bool _hx_tmp8;
HXDLIN( 139)						bool _hx_tmp9;
HXDLIN( 139)						 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN( 139)						bool _hx_tmp10;
HXDLIN( 139)						if ((x6 > (this7->start - 1))) {
HXLINE( 139)							_hx_tmp10 = (x6 < (this7->max + 1));
            						}
            						else {
HXLINE( 139)							_hx_tmp10 = false;
            						}
HXDLIN( 139)						if (_hx_tmp10) {
HXLINE( 139)							 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN( 139)							if ((y6 > (this8->start - 1))) {
HXLINE( 139)								_hx_tmp9 = (y6 < (this8->max + 1));
            							}
            							else {
HXLINE( 139)								_hx_tmp9 = false;
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp9 = false;
            						}
HXDLIN( 139)						if (_hx_tmp9) {
HXLINE( 139)							Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN( 139)							Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN( 139)							bool _hx_tmp11;
HXDLIN( 139)							if (!((s2 <= 0))) {
HXLINE( 139)								_hx_tmp11 = (t2 <= 0);
            							}
            							else {
HXLINE( 139)								_hx_tmp11 = true;
            							}
HXDLIN( 139)							if (_hx_tmp11) {
HXLINE( 139)								_hx_tmp8 = false;
            							}
            							else {
HXLINE( 139)								if (((s2 + t2) < hitTriScalar->A)) {
HXLINE( 139)									_hx_tmp8 = true;
            								}
            								else {
HXLINE( 139)									_hx_tmp8 = false;
            								}
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp8 = false;
            						}
HXDLIN( 139)						if (_hx_tmp8) {
HXLINE( 139)							hits = (hits + 1);
HXDLIN( 139)							averageX = (averageX + x2);
HXDLIN( 139)							averageY = (averageY + y2);
HXDLIN( 139)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN( 139)						Float x7 = (px + x3);
HXDLIN( 139)						Float y7 = (py + y3);
HXDLIN( 139)						bool _hx_tmp12;
HXDLIN( 139)						bool _hx_tmp13;
HXDLIN( 139)						 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN( 139)						bool _hx_tmp14;
HXDLIN( 139)						if ((x7 > (this9->start - 1))) {
HXLINE( 139)							_hx_tmp14 = (x7 < (this9->max + 1));
            						}
            						else {
HXLINE( 139)							_hx_tmp14 = false;
            						}
HXDLIN( 139)						if (_hx_tmp14) {
HXLINE( 139)							 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN( 139)							if ((y7 > (this10->start - 1))) {
HXLINE( 139)								_hx_tmp13 = (y7 < (this10->max + 1));
            							}
            							else {
HXLINE( 139)								_hx_tmp13 = false;
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp13 = false;
            						}
HXDLIN( 139)						if (_hx_tmp13) {
HXLINE( 139)							Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN( 139)							Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN( 139)							bool _hx_tmp15;
HXDLIN( 139)							if (!((s3 <= 0))) {
HXLINE( 139)								_hx_tmp15 = (t3 <= 0);
            							}
            							else {
HXLINE( 139)								_hx_tmp15 = true;
            							}
HXDLIN( 139)							if (_hx_tmp15) {
HXLINE( 139)								_hx_tmp12 = false;
            							}
            							else {
HXLINE( 139)								if (((s3 + t3) < hitTriScalar->A)) {
HXLINE( 139)									_hx_tmp12 = true;
            								}
            								else {
HXLINE( 139)									_hx_tmp12 = false;
            								}
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp12 = false;
            						}
HXDLIN( 139)						if (_hx_tmp12) {
HXLINE( 139)							hits = (hits + 1);
HXDLIN( 139)							averageX = (averageX + x3);
HXDLIN( 139)							averageY = (averageY + y3);
HXDLIN( 139)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN( 139)						Float x8 = (px + x4);
HXDLIN( 139)						Float y8 = (py + y4);
HXDLIN( 139)						bool _hx_tmp16;
HXDLIN( 139)						bool _hx_tmp17;
HXDLIN( 139)						 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN( 139)						bool _hx_tmp18;
HXDLIN( 139)						if ((x8 > (this11->start - 1))) {
HXLINE( 139)							_hx_tmp18 = (x8 < (this11->max + 1));
            						}
            						else {
HXLINE( 139)							_hx_tmp18 = false;
            						}
HXDLIN( 139)						if (_hx_tmp18) {
HXLINE( 139)							 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN( 139)							if ((y8 > (this12->start - 1))) {
HXLINE( 139)								_hx_tmp17 = (y8 < (this12->max + 1));
            							}
            							else {
HXLINE( 139)								_hx_tmp17 = false;
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp17 = false;
            						}
HXDLIN( 139)						if (_hx_tmp17) {
HXLINE( 139)							Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN( 139)							Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN( 139)							bool _hx_tmp19;
HXDLIN( 139)							if (!((s4 <= 0))) {
HXLINE( 139)								_hx_tmp19 = (t4 <= 0);
            							}
            							else {
HXLINE( 139)								_hx_tmp19 = true;
            							}
HXDLIN( 139)							if (_hx_tmp19) {
HXLINE( 139)								_hx_tmp16 = false;
            							}
            							else {
HXLINE( 139)								if (((s4 + t4) < hitTriScalar->A)) {
HXLINE( 139)									_hx_tmp16 = true;
            								}
            								else {
HXLINE( 139)									_hx_tmp16 = false;
            								}
            							}
            						}
            						else {
HXLINE( 139)							_hx_tmp16 = false;
            						}
HXDLIN( 139)						if (_hx_tmp16) {
HXLINE( 139)							hits = (hits + 1);
HXDLIN( 139)							averageX = (averageX + x4);
HXDLIN( 139)							averageY = (averageY + y4);
HXDLIN( 139)							fractionTotal = (fractionTotal + ((Float)0.2));
            						}
HXDLIN( 139)						if ((hits != 0)) {
HXLINE( 244)							averageX = (px + (averageX / ( (Float)(hits) )));
HXLINE( 245)							averageY = (py + (averageY / ( (Float)(hits) )));
            						}
            						else {
HXLINE( 247)							averageX = ( (Float)(px) );
HXLINE( 248)							averageY = ( (Float)(py) );
            						}
HXLINE( 139)						Float fractionTotal1 = fractionTotal;
HXDLIN( 139)						Float sampleData_fractionTotal = fractionTotal1;
HXDLIN( 139)						Float sampleData_averageX = averageX;
HXDLIN( 139)						Float sampleData_averageY = averageY;
HXDLIN( 139)						bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXLINE( 140)						Float aScale = sampleData_fractionTotal;
HXLINE( 141)						if (!((aScale > ((Float)0.9)))) {
HXLINE( 141)							aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            						}
HXLINE( 142)						a = 0;
HXLINE( 143)						r = 0;
HXLINE( 144)						g = 0;
HXLINE( 145)						b = 0;
HXLINE( 146)						if (isSoft) {
HXLINE( 147)							if (!(sampleData_notHit)) {
HXLINE( 148)								Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN( 148)								Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN( 148)								Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN( 148)								Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN( 148)								Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN( 148)								Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN( 148)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 148)								Float ratiosAvg_ratioA = ratioA1;
HXDLIN( 148)								Float ratiosAvg_ratioB = ratioB1;
HXDLIN( 148)								Float ratiosAvg_ratioC = ratioC1;
HXLINE( 149)								Float ratioA_ = ratiosAvg_ratioA;
HXLINE( 150)								Float ratioB_ = ratiosAvg_ratioB;
HXLINE( 151)								Float ratioC_ = ratiosAvg_ratioC;
HXLINE( 152)								int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN( 152)								if ((i > 255)) {
HXLINE(  24)									i = 255;
            								}
HXLINE( 152)								if ((i < 0)) {
HXLINE(  25)									i = 0;
            								}
HXLINE( 152)								a = i;
HXLINE( 153)								int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN( 153)								if ((i1 > 255)) {
HXLINE(  24)									i1 = 255;
            								}
HXLINE( 153)								if ((i1 < 0)) {
HXLINE(  25)									i1 = 0;
            								}
HXLINE( 153)								r = i1;
HXLINE( 154)								int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN( 154)								if ((i2 > 255)) {
HXLINE(  24)									i2 = 255;
            								}
HXLINE( 154)								if ((i2 < 0)) {
HXLINE(  25)									i2 = 0;
            								}
HXLINE( 154)								g = i2;
HXLINE( 155)								int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN( 155)								if ((i3 > 255)) {
HXLINE(  24)									i3 = 255;
            								}
HXLINE( 155)								if ((i3 < 0)) {
HXLINE(  25)									i3 = 0;
            								}
HXLINE( 155)								b = i3;
HXLINE( 156)								{
HXLINE( 156)									int a3;
HXLINE( 157)									if ((aScale > ((Float)0.9))) {
HXLINE( 156)										a3 = a;
            									}
            									else {
HXLINE( 157)										int i4 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN( 157)										if ((i4 > 255)) {
HXLINE(  24)											i4 = 255;
            										}
HXLINE( 157)										if ((i4 < 0)) {
HXLINE(  25)											i4 = 0;
            										}
HXLINE( 156)										a3 = i4;
            									}
HXDLIN( 156)									int location;
HXLINE( 158)									if (pixelImage->useVirtualPos) {
HXLINE( 156)										location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 156)										location = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            									}
HXDLIN( 156)									bool _hx_tmp20;
HXDLIN( 156)									if (pixelImage->transparent) {
HXLINE( 156)										_hx_tmp20 = (a3 < 254);
            									}
            									else {
HXLINE( 156)										_hx_tmp20 = false;
            									}
HXDLIN( 156)									if (_hx_tmp20) {
HXLINE( 156)										int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN( 156)										int old;
HXDLIN( 156)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 156)											old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            										}
            										else {
HXLINE( 156)											old = this13;
            										}
HXDLIN( 156)										int rhs = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 156)										Float a11;
HXDLIN( 156)										int this14 = ((old >> 24) & 255);
HXDLIN( 156)										if ((this14 == 0)) {
HXLINE( 156)											a11 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float r1;
HXDLIN( 156)										int this15 = ((old >> 16) & 255);
HXDLIN( 156)										if ((this15 == 0)) {
HXLINE( 156)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float g1;
HXDLIN( 156)										int this16 = ((old >> 8) & 255);
HXDLIN( 156)										if ((this16 == 0)) {
HXLINE( 156)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float b11;
HXDLIN( 156)										int this17 = (old & 255);
HXDLIN( 156)										if ((this17 == 0)) {
HXLINE( 156)											b11 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float a21;
HXDLIN( 156)										int this18 = ((rhs >> 24) & 255);
HXDLIN( 156)										if ((this18 == 0)) {
HXLINE( 156)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float r2;
HXDLIN( 156)										int this19 = ((rhs >> 16) & 255);
HXDLIN( 156)										if ((this19 == 0)) {
HXLINE( 156)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float g2;
HXDLIN( 156)										int this20 = ((rhs >> 8) & 255);
HXDLIN( 156)										if ((this20 == 0)) {
HXLINE( 156)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float b21;
HXDLIN( 156)										int this21 = (rhs & 255);
HXDLIN( 156)										if ((this21 == 0)) {
HXLINE( 156)											b21 = ((Float)0.);
            										}
            										else {
HXLINE( 156)											b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            										}
HXDLIN( 156)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 156)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN( 156)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN( 156)										int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN( 156)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 156)										int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN( 156)										{
HXLINE( 156)											int _hx_tmp21;
HXDLIN( 156)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 156)												_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 156)												_hx_tmp21 = blended;
            											}
HXDLIN( 156)											::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            										}
            									}
            									else {
HXLINE( 156)										int value;
HXDLIN( 156)										if (pixelImage->isLittle) {
HXLINE( 156)											value = ((((a3 << 24) | (b << 16)) | (g << 8)) | r);
            										}
            										else {
HXLINE( 156)											value = ((((a3 << 24) | (r << 16)) | (g << 8)) | b);
            										}
HXDLIN( 156)										::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            									}
            								}
            							}
            						}
            						else {
HXLINE( 162)							Float ratioA2 = ratios_ratioA;
HXLINE( 163)							Float ratioB2 = ratios_ratioB;
HXLINE( 164)							Float ratioC2 = ratios_ratioC;
HXLINE( 173)							Float hitTotal = sampleData_fractionTotal;
HXLINE( 174)							if (!(sampleData_notHit)) {
HXLINE( 177)								Float x03 = ((Float)-0.0739127852035666);
HXDLIN( 177)								Float y03 = ((Float)0.703233176253404202);
HXDLIN( 177)								Float x11 = ((Float)-0.353553390593273564);
HXDLIN( 177)								Float y11 = ((Float)0.61237243569579447);
HXDLIN( 177)								Float x21 = ((Float)-0.572061402817684139);
HXDLIN( 177)								Float y21 = ((Float)0.415626937777453465);
HXDLIN( 177)								Float x31 = ((Float)-0.691654801480225401);
HXDLIN( 177)								Float y31 = ((Float)0.147015766465198733);
HXDLIN( 177)								Float x41 = ((Float)-0.691654801480225512);
HXDLIN( 177)								Float y41 = ((Float)-0.147015766465198261);
HXDLIN( 177)								Float averageX1 = ((Float)0.);
HXDLIN( 177)								Float averageY1 = ((Float)0.);
HXDLIN( 177)								int hits1 = 0;
HXDLIN( 177)								Float fractionTotal2 = ((Float)0.);
HXDLIN( 177)								Float x9 = (px + x03);
HXDLIN( 177)								Float y9 = (py + y03);
HXDLIN( 177)								bool _hx_tmp22;
HXDLIN( 177)								bool _hx_tmp23;
HXDLIN( 177)								 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN( 177)								bool _hx_tmp24;
HXDLIN( 177)								if ((x9 > (this22->start - 1))) {
HXLINE( 177)									_hx_tmp24 = (x9 < (this22->max + 1));
            								}
            								else {
HXLINE( 177)									_hx_tmp24 = false;
            								}
HXDLIN( 177)								if (_hx_tmp24) {
HXLINE( 177)									 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN( 177)									if ((y9 > (this23->start - 1))) {
HXLINE( 177)										_hx_tmp23 = (y9 < (this23->max + 1));
            									}
            									else {
HXLINE( 177)										_hx_tmp23 = false;
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp23 = false;
            								}
HXDLIN( 177)								if (_hx_tmp23) {
HXLINE( 177)									Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN( 177)									Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN( 177)									bool _hx_tmp25;
HXDLIN( 177)									if (!((s5 <= 0))) {
HXLINE( 177)										_hx_tmp25 = (t5 <= 0);
            									}
            									else {
HXLINE( 177)										_hx_tmp25 = true;
            									}
HXDLIN( 177)									if (_hx_tmp25) {
HXLINE( 177)										_hx_tmp22 = false;
            									}
            									else {
HXLINE( 177)										if (((s5 + t5) < scaled->A)) {
HXLINE( 177)											_hx_tmp22 = true;
            										}
            										else {
HXLINE( 177)											_hx_tmp22 = false;
            										}
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp22 = false;
            								}
HXDLIN( 177)								if (_hx_tmp22) {
HXLINE( 177)									hits1 = (hits1 + 1);
HXDLIN( 177)									averageX1 = (averageX1 + x03);
HXDLIN( 177)									averageY1 = (averageY1 + y03);
HXDLIN( 177)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN( 177)								Float x10 = (px + x11);
HXDLIN( 177)								Float y10 = (py + y11);
HXDLIN( 177)								bool _hx_tmp26;
HXDLIN( 177)								bool _hx_tmp27;
HXDLIN( 177)								 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN( 177)								bool _hx_tmp28;
HXDLIN( 177)								if ((x10 > (this24->start - 1))) {
HXLINE( 177)									_hx_tmp28 = (x10 < (this24->max + 1));
            								}
            								else {
HXLINE( 177)									_hx_tmp28 = false;
            								}
HXDLIN( 177)								if (_hx_tmp28) {
HXLINE( 177)									 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN( 177)									if ((y10 > (this25->start - 1))) {
HXLINE( 177)										_hx_tmp27 = (y10 < (this25->max + 1));
            									}
            									else {
HXLINE( 177)										_hx_tmp27 = false;
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp27 = false;
            								}
HXDLIN( 177)								if (_hx_tmp27) {
HXLINE( 177)									Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN( 177)									Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN( 177)									bool _hx_tmp29;
HXDLIN( 177)									if (!((s6 <= 0))) {
HXLINE( 177)										_hx_tmp29 = (t6 <= 0);
            									}
            									else {
HXLINE( 177)										_hx_tmp29 = true;
            									}
HXDLIN( 177)									if (_hx_tmp29) {
HXLINE( 177)										_hx_tmp26 = false;
            									}
            									else {
HXLINE( 177)										if (((s6 + t6) < scaled->A)) {
HXLINE( 177)											_hx_tmp26 = true;
            										}
            										else {
HXLINE( 177)											_hx_tmp26 = false;
            										}
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp26 = false;
            								}
HXDLIN( 177)								if (_hx_tmp26) {
HXLINE( 177)									hits1 = (hits1 + 1);
HXDLIN( 177)									averageX1 = (averageX1 + x11);
HXDLIN( 177)									averageY1 = (averageY1 + y11);
HXDLIN( 177)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN( 177)								Float x12 = (px + x21);
HXDLIN( 177)								Float y12 = (py + y21);
HXDLIN( 177)								bool _hx_tmp30;
HXDLIN( 177)								bool _hx_tmp31;
HXDLIN( 177)								 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN( 177)								bool _hx_tmp32;
HXDLIN( 177)								if ((x12 > (this26->start - 1))) {
HXLINE( 177)									_hx_tmp32 = (x12 < (this26->max + 1));
            								}
            								else {
HXLINE( 177)									_hx_tmp32 = false;
            								}
HXDLIN( 177)								if (_hx_tmp32) {
HXLINE( 177)									 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN( 177)									if ((y12 > (this27->start - 1))) {
HXLINE( 177)										_hx_tmp31 = (y12 < (this27->max + 1));
            									}
            									else {
HXLINE( 177)										_hx_tmp31 = false;
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp31 = false;
            								}
HXDLIN( 177)								if (_hx_tmp31) {
HXLINE( 177)									Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN( 177)									Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN( 177)									bool _hx_tmp33;
HXDLIN( 177)									if (!((s7 <= 0))) {
HXLINE( 177)										_hx_tmp33 = (t7 <= 0);
            									}
            									else {
HXLINE( 177)										_hx_tmp33 = true;
            									}
HXDLIN( 177)									if (_hx_tmp33) {
HXLINE( 177)										_hx_tmp30 = false;
            									}
            									else {
HXLINE( 177)										if (((s7 + t7) < scaled->A)) {
HXLINE( 177)											_hx_tmp30 = true;
            										}
            										else {
HXLINE( 177)											_hx_tmp30 = false;
            										}
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp30 = false;
            								}
HXDLIN( 177)								if (_hx_tmp30) {
HXLINE( 177)									hits1 = (hits1 + 1);
HXDLIN( 177)									averageX1 = (averageX1 + x21);
HXDLIN( 177)									averageY1 = (averageY1 + y21);
HXDLIN( 177)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN( 177)								Float x13 = (px + x31);
HXDLIN( 177)								Float y13 = (py + y31);
HXDLIN( 177)								bool _hx_tmp34;
HXDLIN( 177)								bool _hx_tmp35;
HXDLIN( 177)								 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN( 177)								bool _hx_tmp36;
HXDLIN( 177)								if ((x13 > (this28->start - 1))) {
HXLINE( 177)									_hx_tmp36 = (x13 < (this28->max + 1));
            								}
            								else {
HXLINE( 177)									_hx_tmp36 = false;
            								}
HXDLIN( 177)								if (_hx_tmp36) {
HXLINE( 177)									 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN( 177)									if ((y13 > (this29->start - 1))) {
HXLINE( 177)										_hx_tmp35 = (y13 < (this29->max + 1));
            									}
            									else {
HXLINE( 177)										_hx_tmp35 = false;
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp35 = false;
            								}
HXDLIN( 177)								if (_hx_tmp35) {
HXLINE( 177)									Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN( 177)									Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN( 177)									bool _hx_tmp37;
HXDLIN( 177)									if (!((s8 <= 0))) {
HXLINE( 177)										_hx_tmp37 = (t8 <= 0);
            									}
            									else {
HXLINE( 177)										_hx_tmp37 = true;
            									}
HXDLIN( 177)									if (_hx_tmp37) {
HXLINE( 177)										_hx_tmp34 = false;
            									}
            									else {
HXLINE( 177)										if (((s8 + t8) < scaled->A)) {
HXLINE( 177)											_hx_tmp34 = true;
            										}
            										else {
HXLINE( 177)											_hx_tmp34 = false;
            										}
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp34 = false;
            								}
HXDLIN( 177)								if (_hx_tmp34) {
HXLINE( 177)									hits1 = (hits1 + 1);
HXDLIN( 177)									averageX1 = (averageX1 + x31);
HXDLIN( 177)									averageY1 = (averageY1 + y31);
HXDLIN( 177)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN( 177)								Float x14 = (px + x41);
HXDLIN( 177)								Float y14 = (py + y41);
HXDLIN( 177)								bool _hx_tmp38;
HXDLIN( 177)								bool _hx_tmp39;
HXDLIN( 177)								 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN( 177)								bool _hx_tmp40;
HXDLIN( 177)								if ((x14 > (this30->start - 1))) {
HXLINE( 177)									_hx_tmp40 = (x14 < (this30->max + 1));
            								}
            								else {
HXLINE( 177)									_hx_tmp40 = false;
            								}
HXDLIN( 177)								if (_hx_tmp40) {
HXLINE( 177)									 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN( 177)									if ((y14 > (this31->start - 1))) {
HXLINE( 177)										_hx_tmp39 = (y14 < (this31->max + 1));
            									}
            									else {
HXLINE( 177)										_hx_tmp39 = false;
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp39 = false;
            								}
HXDLIN( 177)								if (_hx_tmp39) {
HXLINE( 177)									Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN( 177)									Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN( 177)									bool _hx_tmp41;
HXDLIN( 177)									if (!((s9 <= 0))) {
HXLINE( 177)										_hx_tmp41 = (t9 <= 0);
            									}
            									else {
HXLINE( 177)										_hx_tmp41 = true;
            									}
HXDLIN( 177)									if (_hx_tmp41) {
HXLINE( 177)										_hx_tmp38 = false;
            									}
            									else {
HXLINE( 177)										if (((s9 + t9) < scaled->A)) {
HXLINE( 177)											_hx_tmp38 = true;
            										}
            										else {
HXLINE( 177)											_hx_tmp38 = false;
            										}
            									}
            								}
            								else {
HXLINE( 177)									_hx_tmp38 = false;
            								}
HXDLIN( 177)								if (_hx_tmp38) {
HXLINE( 177)									hits1 = (hits1 + 1);
HXDLIN( 177)									averageX1 = (averageX1 + x41);
HXDLIN( 177)									averageY1 = (averageY1 + y41);
HXDLIN( 177)									fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            								}
HXDLIN( 177)								if ((hits1 != 0)) {
HXLINE( 244)									averageX1 = (px + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)									averageY1 = (py + (averageY1 / ( (Float)(hits1) )));
            								}
            								else {
HXLINE( 247)									averageX1 = ( (Float)(px) );
HXLINE( 248)									averageY1 = ( (Float)(py) );
            								}
HXLINE( 177)								Float fractionTotal3 = fractionTotal2;
HXDLIN( 177)								Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN( 177)								Float sampleScaled_averageX = averageX1;
HXDLIN( 177)								Float sampleScaled_averageY = averageY1;
HXDLIN( 177)								bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXLINE( 178)								Float scaledTotal = sampleScaled_fractionTotal;
HXLINE( 180)								bool _hx_tmp42;
HXDLIN( 180)								if (!((scaledTotal > hitTotal))) {
HXLINE( 180)									_hx_tmp42 = (hitTotal == ((Float)1.));
            								}
            								else {
HXLINE( 180)									_hx_tmp42 = true;
            								}
HXDLIN( 180)								if (_hx_tmp42) {
HXLINE( 183)									Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN( 183)									Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN( 183)									Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN( 183)									Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN( 183)									Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN( 183)									Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN( 183)									Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 183)									Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN( 183)									Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN( 183)									Float ratiosAvg_ratioC1 = ratioC3;
HXLINE( 184)									Float ratioA_1 = ratiosAvg_ratioA1;
HXLINE( 185)									Float ratioB_1 = ratiosAvg_ratioB1;
HXLINE( 186)									Float ratioC_1 = ratiosAvg_ratioC1;
HXLINE( 187)									int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN( 187)									if ((i5 > 255)) {
HXLINE(  24)										i5 = 255;
            									}
HXLINE( 187)									if ((i5 < 0)) {
HXLINE(  25)										i5 = 0;
            									}
HXLINE( 187)									a = i5;
HXLINE( 188)									int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN( 188)									if ((i6 > 255)) {
HXLINE(  24)										i6 = 255;
            									}
HXLINE( 188)									if ((i6 < 0)) {
HXLINE(  25)										i6 = 0;
            									}
HXLINE( 188)									r = i6;
HXLINE( 189)									int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN( 189)									if ((i7 > 255)) {
HXLINE(  24)										i7 = 255;
            									}
HXLINE( 189)									if ((i7 < 0)) {
HXLINE(  25)										i7 = 0;
            									}
HXLINE( 189)									g = i7;
HXLINE( 190)									int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN( 190)									if ((i8 > 255)) {
HXLINE(  24)										i8 = 255;
            									}
HXLINE( 190)									if ((i8 < 0)) {
HXLINE(  25)										i8 = 0;
            									}
HXLINE( 190)									b = i8;
HXLINE( 191)									{
HXLINE( 191)										int location1;
HXDLIN( 191)										if (pixelImage->useVirtualPos) {
HXLINE( 191)											location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 191)											location1 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            										}
HXDLIN( 191)										bool _hx_tmp43;
HXDLIN( 191)										if (pixelImage->transparent) {
HXLINE( 191)											_hx_tmp43 = (a < 254);
            										}
            										else {
HXLINE( 191)											_hx_tmp43 = false;
            										}
HXDLIN( 191)										if (_hx_tmp43) {
HXLINE( 191)											int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 191)											int old1;
HXDLIN( 191)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)												old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            											}
            											else {
HXLINE( 191)												old1 = this32;
            											}
HXDLIN( 191)											int rhs1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 191)											Float a12;
HXDLIN( 191)											int this33 = ((old1 >> 24) & 255);
HXDLIN( 191)											if ((this33 == 0)) {
HXLINE( 191)												a12 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float r11;
HXDLIN( 191)											int this34 = ((old1 >> 16) & 255);
HXDLIN( 191)											if ((this34 == 0)) {
HXLINE( 191)												r11 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float g11;
HXDLIN( 191)											int this35 = ((old1 >> 8) & 255);
HXDLIN( 191)											if ((this35 == 0)) {
HXLINE( 191)												g11 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float b12;
HXDLIN( 191)											int this36 = (old1 & 255);
HXDLIN( 191)											if ((this36 == 0)) {
HXLINE( 191)												b12 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float a22;
HXDLIN( 191)											int this37 = ((rhs1 >> 24) & 255);
HXDLIN( 191)											if ((this37 == 0)) {
HXLINE( 191)												a22 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float r21;
HXDLIN( 191)											int this38 = ((rhs1 >> 16) & 255);
HXDLIN( 191)											if ((this38 == 0)) {
HXLINE( 191)												r21 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float g21;
HXDLIN( 191)											int this39 = ((rhs1 >> 8) & 255);
HXDLIN( 191)											if ((this39 == 0)) {
HXLINE( 191)												g21 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float b22;
HXDLIN( 191)											int this40 = (rhs1 & 255);
HXDLIN( 191)											if ((this40 == 0)) {
HXLINE( 191)												b22 = ((Float)0.);
            											}
            											else {
HXLINE( 191)												b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 191)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 191)											int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN( 191)											int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN( 191)											int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN( 191)											int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 191)											int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN( 191)											{
HXLINE( 191)												int _hx_tmp44;
HXDLIN( 191)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 191)													_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            												}
            												else {
HXLINE( 191)													_hx_tmp44 = blended1;
            												}
HXDLIN( 191)												::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            											}
            										}
            										else {
HXLINE( 191)											int value1;
HXDLIN( 191)											if (pixelImage->isLittle) {
HXLINE( 191)												value1 = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE( 191)												value1 = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN( 191)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            										}
            									}
            								}
            								else {
HXLINE( 194)									Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN( 194)									Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN( 194)									Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN( 194)									Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN( 194)									Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN( 194)									Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN( 194)									Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 194)									Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN( 194)									Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN( 194)									Float ratiosAvg_ratioC2 = ratioC4;
HXLINE( 195)									Float ratioA_2 = ratiosAvg_ratioA2;
HXLINE( 196)									Float ratioB_2 = ratiosAvg_ratioB2;
HXLINE( 197)									Float ratioC_2 = ratiosAvg_ratioC2;
HXLINE( 198)									int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN( 198)									if ((i9 > 255)) {
HXLINE(  24)										i9 = 255;
            									}
HXLINE( 198)									if ((i9 < 0)) {
HXLINE(  25)										i9 = 0;
            									}
HXLINE( 198)									a = i9;
HXLINE( 199)									int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN( 199)									if ((i10 > 255)) {
HXLINE(  24)										i10 = 255;
            									}
HXLINE( 199)									if ((i10 < 0)) {
HXLINE(  25)										i10 = 0;
            									}
HXLINE( 199)									r = i10;
HXLINE( 200)									int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN( 200)									if ((i11 > 255)) {
HXLINE(  24)										i11 = 255;
            									}
HXLINE( 200)									if ((i11 < 0)) {
HXLINE(  25)										i11 = 0;
            									}
HXLINE( 200)									g = i11;
HXLINE( 201)									int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN( 201)									if ((i12 > 255)) {
HXLINE(  24)										i12 = 255;
            									}
HXLINE( 201)									if ((i12 < 0)) {
HXLINE(  25)										i12 = 0;
            									}
HXLINE( 201)									b = i12;
HXLINE( 202)									{
HXLINE( 202)										int a6;
HXLINE( 203)										if ((aScale > ((Float)0.9))) {
HXLINE( 202)											a6 = a;
            										}
            										else {
HXLINE( 203)											int i13 = ::Std_obj::_hx_int((( (Float)(a) ) * aScale));
HXDLIN( 203)											if ((i13 > 255)) {
HXLINE(  24)												i13 = 255;
            											}
HXLINE( 203)											if ((i13 < 0)) {
HXLINE(  25)												i13 = 0;
            											}
HXLINE( 202)											a6 = i13;
            										}
HXDLIN( 202)										int location2;
HXLINE( 204)										if (pixelImage->useVirtualPos) {
HXLINE( 202)											location2 = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 202)											location2 = ::Std_obj::_hx_int(( (Float)(((py * pixelImage->width) + px)) ));
            										}
HXDLIN( 202)										bool _hx_tmp45;
HXDLIN( 202)										if (pixelImage->transparent) {
HXLINE( 202)											_hx_tmp45 = (a6 < 254);
            										}
            										else {
HXLINE( 202)											_hx_tmp45 = false;
            										}
HXDLIN( 202)										if (_hx_tmp45) {
HXLINE( 202)											int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN( 202)											int old2;
HXDLIN( 202)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 202)												old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            											}
            											else {
HXLINE( 202)												old2 = this41;
            											}
HXDLIN( 202)											int rhs2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 202)											Float a13;
HXDLIN( 202)											int this42 = ((old2 >> 24) & 255);
HXDLIN( 202)											if ((this42 == 0)) {
HXLINE( 202)												a13 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float r12;
HXDLIN( 202)											int this43 = ((old2 >> 16) & 255);
HXDLIN( 202)											if ((this43 == 0)) {
HXLINE( 202)												r12 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float g12;
HXDLIN( 202)											int this44 = ((old2 >> 8) & 255);
HXDLIN( 202)											if ((this44 == 0)) {
HXLINE( 202)												g12 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float b13;
HXDLIN( 202)											int this45 = (old2 & 255);
HXDLIN( 202)											if ((this45 == 0)) {
HXLINE( 202)												b13 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float a23;
HXDLIN( 202)											int this46 = ((rhs2 >> 24) & 255);
HXDLIN( 202)											if ((this46 == 0)) {
HXLINE( 202)												a23 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float r22;
HXDLIN( 202)											int this47 = ((rhs2 >> 16) & 255);
HXDLIN( 202)											if ((this47 == 0)) {
HXLINE( 202)												r22 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float g22;
HXDLIN( 202)											int this48 = ((rhs2 >> 8) & 255);
HXDLIN( 202)											if ((this48 == 0)) {
HXLINE( 202)												g22 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float b23;
HXDLIN( 202)											int this49 = (rhs2 & 255);
HXDLIN( 202)											if ((this49 == 0)) {
HXLINE( 202)												b23 = ((Float)0.);
            											}
            											else {
HXLINE( 202)												b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 202)											Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 202)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN( 202)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN( 202)											int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN( 202)											int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 202)											int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN( 202)											{
HXLINE( 202)												int _hx_tmp46;
HXDLIN( 202)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 202)													_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE( 202)													_hx_tmp46 = blended2;
            												}
HXDLIN( 202)												::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            											}
            										}
            										else {
HXLINE( 202)											int value2;
HXDLIN( 202)											if (pixelImage->isLittle) {
HXLINE( 202)												value2 = ((((a6 << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE( 202)												value2 = ((((a6 << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN( 202)											::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 217)		if ((hasHit == false)) {
HXLINE( 218)			 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXLINE( 224)			return v4;
            		}
            		else {
HXLINE( 226)			return null();
            		}
HXLINE( 217)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC15(TriPixelSmoothGrad_Fields__obj,triGradPentBary,return )


TriPixelSmoothGrad_Fields__obj::TriPixelSmoothGrad_Fields__obj()
{
}

bool TriPixelSmoothGrad_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"triGradPentBary") ) { outValue = triGradPentBary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lineGradPentBary") ) { outValue = lineGradPentBary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadGradPentBary") ) { outValue = quadGradPentBary_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lineXYGradPentBary") ) { outValue = lineXYGradPentBary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triGradPentBaryTop") ) { outValue = triGradPentBaryTop_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"triGradPentBaryBottom") ) { outValue = triGradPentBaryBottom_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TriPixelSmoothGrad_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TriPixelSmoothGrad_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class TriPixelSmoothGrad_Fields__obj::__mClass;

static ::String TriPixelSmoothGrad_Fields__obj_sStaticFields[] = {
	HX_("lineXYGradPentBary",e4,11,ac,1c),
	HX_("lineGradPentBary",63,62,fb,69),
	HX_("quadGradPentBary",b6,f3,29,21),
	HX_("triGradPentBaryBottom",a5,14,a8,7d),
	HX_("triGradPentBaryTop",9b,c0,d4,9e),
	HX_("triGradPentBary",1a,2a,31,ea),
	::String(null())
};

void TriPixelSmoothGrad_Fields__obj::__register()
{
	TriPixelSmoothGrad_Fields__obj _hx_dummy;
	TriPixelSmoothGrad_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_",8a,04,9c,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TriPixelSmoothGrad_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TriPixelSmoothGrad_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TriPixelSmoothGrad_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriPixelSmoothGrad_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriPixelSmoothGrad_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _TriPixelSmoothGrad
