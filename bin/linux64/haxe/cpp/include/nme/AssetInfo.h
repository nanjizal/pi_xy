// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_AssetInfo
#define INCLUDED_nme_AssetInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nme,AlphaMode)
HX_DECLARE_CLASS1(nme,AssetInfo)
HX_DECLARE_CLASS1(nme,AssetType)
HX_DECLARE_CLASS2(nme,utils,WeakRef)

namespace nme{


class HXCPP_CLASS_ATTRIBUTES AssetInfo_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AssetInfo_obj OBJ_;
		AssetInfo_obj();

	public:
		enum { _hx_ClassId = 0x3b58e0d8 };

		void __construct(::String inPath, ::nme::AssetType inType,bool inIsResource,::String inClassName,::String id, ::nme::AlphaMode inAlphaMode);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.AssetInfo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.AssetInfo"); }
		static ::hx::ObjectPtr< AssetInfo_obj > __new(::String inPath, ::nme::AssetType inType,bool inIsResource,::String inClassName,::String id, ::nme::AlphaMode inAlphaMode);
		static ::hx::ObjectPtr< AssetInfo_obj > __alloc(::hx::Ctx *_hx_ctx,::String inPath, ::nme::AssetType inType,bool inIsResource,::String inClassName,::String id, ::nme::AlphaMode inAlphaMode);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AssetInfo_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AssetInfo",5e,66,34,4c); }

		::String path;
		::String className;
		 ::nme::AssetType type;
		 ::nme::utils::WeakRef cache;
		bool isResource;
		 ::nme::AlphaMode alphaMode;
		virtual ::String toString();
		::Dynamic toString_dyn();

		void uncache();
		::Dynamic uncache_dyn();

		 ::Dynamic getCache();
		::Dynamic getCache_dyn();

		void setCache( ::Dynamic inVal,bool inWeak);
		::Dynamic setCache_dyn();

};

} // end namespace nme

#endif /* INCLUDED_nme_AssetInfo */ 
