// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_utils_ArrayBufferView
#define INCLUDED_nme_utils_ArrayBufferView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,utils,ArrayBufferView)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES ArrayBufferView_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ArrayBufferView_obj OBJ_;
		ArrayBufferView_obj();

	public:
		enum { _hx_ClassId = 0x1273bee7 };

		void __construct( ::Dynamic inLengthOrBuffer,::hx::Null< int >  __o_inByteOffset, ::Dynamic inLength);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.utils.ArrayBufferView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.utils.ArrayBufferView"); }
		static ::hx::ObjectPtr< ArrayBufferView_obj > __new( ::Dynamic inLengthOrBuffer,::hx::Null< int >  __o_inByteOffset, ::Dynamic inLength);
		static ::hx::ObjectPtr< ArrayBufferView_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inLengthOrBuffer,::hx::Null< int >  __o_inByteOffset, ::Dynamic inLength);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ArrayBufferView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ArrayBufferView",5e,6e,84,fd); }

		static void __boot();
		static ::String invalidDataIndex;
		 ::nme::utils::ByteArray buffer;
		int byteOffset;
		int byteLength;
		::Array< unsigned char > bytes;
		 ::haxe::io::Bytes toBytes();
		::Dynamic toBytes_dyn();

		void setData( ::nme::utils::ArrayBufferView byteData,int inOffset);
		::Dynamic setData_dyn();

		 ::nme::utils::ByteArray getByteBuffer();
		::Dynamic getByteBuffer_dyn();

		int getStart();
		::Dynamic getStart_dyn();

		int getLength();
		::Dynamic getLength_dyn();

		Float getFloat32(int bytePos);
		::Dynamic getFloat32_dyn();

		void setFloat32(int bytePos,Float v);
		::Dynamic setFloat32_dyn();

		int getUInt8(int bytePos);
		::Dynamic getUInt8_dyn();

		void setUInt8(int bytePos,int v);
		::Dynamic setUInt8_dyn();

		int getInt16(int bytePos);
		::Dynamic getInt16_dyn();

		int getUInt16(int bytePos);
		::Dynamic getUInt16_dyn();

		void setInt16(int bytePos,int v);
		::Dynamic setInt16_dyn();

		void setUInt16(int bytePos,int v);
		::Dynamic setUInt16_dyn();

		int getInt32(int bytePos);
		::Dynamic getInt32_dyn();

		void setInt32(int bytePos,int v);
		::Dynamic setInt32_dyn();

};

} // end namespace nme
} // end namespace utils

#endif /* INCLUDED_nme_utils_ArrayBufferView */ 
