// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_iter__BoundIterator_BoundIterator_Fields_
#include <pi_xy/iter/_BoundIterator/BoundIterator_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_935a8b99451a5e8a_9_boundIterator3,"pi_xy.iter._BoundIterator.BoundIterator_Fields_","boundIterator3",0x4be974f4,"pi_xy.iter._BoundIterator.BoundIterator_Fields_.boundIterator3","pi_xy/iter/BoundIterator.hx",9,0xe7ee53a1)
HX_LOCAL_STACK_FRAME(_hx_pos_935a8b99451a5e8a_27_boundIterator4,"pi_xy.iter._BoundIterator.BoundIterator_Fields_","boundIterator4",0x4be974f5,"pi_xy.iter._BoundIterator.BoundIterator_Fields_.boundIterator4","pi_xy/iter/BoundIterator.hx",27,0xe7ee53a1)
HX_LOCAL_STACK_FRAME(_hx_pos_935a8b99451a5e8a_52_boundIteratorX,"pi_xy.iter._BoundIterator.BoundIterator_Fields_","boundIteratorX",0x4be97519,"pi_xy.iter._BoundIterator.BoundIterator_Fields_.boundIteratorX","pi_xy/iter/BoundIterator.hx",52,0xe7ee53a1)
namespace pi_xy{
namespace iter{
namespace _BoundIterator{

void BoundIterator_Fields__obj::__construct() { }

Dynamic BoundIterator_Fields__obj::__CreateEmpty() { return new BoundIterator_Fields__obj; }

void *BoundIterator_Fields__obj::_hx_vtable = 0;

Dynamic BoundIterator_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BoundIterator_Fields__obj > _hx_result = new BoundIterator_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BoundIterator_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e66762b;
}

 ::pi_xy::iter::IntIterStart BoundIterator_Fields__obj::boundIterator3(Float a,Float b,Float c){
            	HX_GC_STACKFRAME(&_hx_pos_935a8b99451a5e8a_9_boundIterator3)
HXDLIN(   9)		if ((a > b)) {
HXLINE(  10)			if ((a > c)) {
HXLINE(  11)				int min;
HXDLIN(  11)				if ((b > c)) {
HXLINE(  11)					min = ::Math_obj::floor(c);
            				}
            				else {
HXLINE(  11)					min = ::Math_obj::floor(b);
            				}
HXDLIN(  11)				int ii_min = min;
HXDLIN(  11)				int ii_max = ::Math_obj::ceil(a);
HXLINE(  10)				return  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXLINE(  13)				int ii_min1 = ::Math_obj::floor(b);
HXDLIN(  13)				int ii_max1 = ::Math_obj::ceil(c);
HXLINE(  12)				return  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXLINE(  16)			if ((b > c)) {
HXLINE(  17)				int min1;
HXDLIN(  17)				if ((a > c)) {
HXLINE(  17)					min1 = ::Math_obj::floor(c);
            				}
            				else {
HXLINE(  17)					min1 = ::Math_obj::ceil(a);
            				}
HXDLIN(  17)				int ii_min2 = min1;
HXDLIN(  17)				int ii_max2 = ::Math_obj::ceil(b);
HXLINE(  16)				return  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXLINE(  19)				int ii_min3 = ::Math_obj::floor(a);
HXDLIN(  19)				int ii_max3 = ::Math_obj::ceil(c);
HXLINE(  18)				return  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXLINE(   9)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BoundIterator_Fields__obj,boundIterator3,return )

 ::pi_xy::iter::IntIterStart BoundIterator_Fields__obj::boundIterator4(Float a,Float b,Float c,Float d){
            	HX_GC_STACKFRAME(&_hx_pos_935a8b99451a5e8a_27_boundIterator4)
HXLINE(  28)		int min = ::Math_obj::floor(a);
HXLINE(  29)		int max = ::Math_obj::ceil(a);
HXLINE(  30)		if ((b < min)) {
HXLINE(  31)			min = ::Math_obj::floor(b);
            		}
            		else {
HXLINE(  32)			if ((b > max)) {
HXLINE(  33)				max = ::Math_obj::ceil(b);
            			}
            		}
HXLINE(  35)		if ((c < min)) {
HXLINE(  36)			min = ::Math_obj::floor(c);
            		}
            		else {
HXLINE(  37)			if ((c > max)) {
HXLINE(  38)				max = ::Math_obj::ceil(c);
            			}
            		}
HXLINE(  40)		if ((d < min)) {
HXLINE(  41)			min = ::Math_obj::floor(d);
            		}
            		else {
HXLINE(  42)			if ((d > max)) {
HXLINE(  43)				max = ::Math_obj::ceil(d);
            			}
            		}
HXLINE(  45)		int ii_min = min;
HXDLIN(  45)		int ii_max = max;
HXDLIN(  45)		return  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BoundIterator_Fields__obj,boundIterator4,return )

 ::pi_xy::iter::IntIterStart BoundIterator_Fields__obj::boundIteratorX(::Array< Float > pMin,::Array< Float > pMax){
            	HX_GC_STACKFRAME(&_hx_pos_935a8b99451a5e8a_52_boundIteratorX)
HXLINE(  53)		int min = ::Math_obj::floor(pMin->__get(0));
HXLINE(  54)		int max = ::Math_obj::ceil(pMax->__get(0));
HXLINE(  55)		Float v = ((Float)0.);
HXLINE(  56)		{
HXLINE(  56)			int _g = 1;
HXDLIN(  56)			int _g1 = pMin->length;
HXDLIN(  56)			while((_g < _g1)){
HXLINE(  56)				_g = (_g + 1);
HXDLIN(  56)				int i = (_g - 1);
HXLINE(  57)				v = pMin->__get(i);
HXLINE(  58)				if ((v < min)) {
HXLINE(  59)					min = ::Math_obj::floor(v);
            				}
HXLINE(  61)				v = pMax->__get(i);
HXLINE(  62)				if ((v > max)) {
HXLINE(  63)					max = ::Math_obj::ceil(v);
            				}
            			}
            		}
HXLINE(  66)		int ii_min = min;
HXDLIN(  66)		int ii_max = max;
HXDLIN(  66)		return  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BoundIterator_Fields__obj,boundIteratorX,return )


BoundIterator_Fields__obj::BoundIterator_Fields__obj()
{
}

bool BoundIterator_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"boundIterator3") ) { outValue = boundIterator3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boundIterator4") ) { outValue = boundIterator4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boundIteratorX") ) { outValue = boundIteratorX_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BoundIterator_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BoundIterator_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class BoundIterator_Fields__obj::__mClass;

static ::String BoundIterator_Fields__obj_sStaticFields[] = {
	HX_("boundIterator3",67,9e,2f,83),
	HX_("boundIterator4",68,9e,2f,83),
	HX_("boundIteratorX",8c,9e,2f,83),
	::String(null())
};

void BoundIterator_Fields__obj::__register()
{
	BoundIterator_Fields__obj _hx_dummy;
	BoundIterator_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.iter._BoundIterator.BoundIterator_Fields_",41,2f,c4,43);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BoundIterator_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BoundIterator_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BoundIterator_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoundIterator_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoundIterator_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace iter
} // end namespace _BoundIterator
