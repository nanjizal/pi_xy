// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_Loader
#define INCLUDED_nme_display_Loader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,display,BitmapData)
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,Loader)
HX_DECLARE_CLASS2(nme,display,LoaderInfo)
HX_DECLARE_CLASS2(nme,display,Sprite)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,net,URLLoader)
HX_DECLARE_CLASS2(nme,net,URLRequest)
HX_DECLARE_CLASS2(nme,_hx_system,LoaderContext)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Loader_obj : public  ::nme::display::Sprite_obj
{
	public:
		typedef  ::nme::display::Sprite_obj super;
		typedef Loader_obj OBJ_;
		Loader_obj();

	public:
		enum { _hx_ClassId = 0x02dcb893 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.Loader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.Loader"); }
		static ::hx::ObjectPtr< Loader_obj > __new();
		static ::hx::ObjectPtr< Loader_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Loader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Loader",33,bc,03,8d); }

		 ::nme::display::DisplayObject content;
		 ::nme::display::LoaderInfo contentLoaderInfo;
		 ::nme::display::BitmapData nmeImage;
		bool doLoad( ::nme::utils::ByteArray inBytes);
		::Dynamic doLoad_dyn();

		void load( ::nme::net::URLRequest request, ::nme::_hx_system::LoaderContext context);
		::Dynamic load_dyn();

		void loadBytes( ::nme::utils::ByteArray bytes, ::nme::_hx_system::LoaderContext context);
		::Dynamic loadBytes_dyn();

		void unload();
		::Dynamic unload_dyn();

		void onData( ::nme::events::Event event);
		::Dynamic onData_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_Loader */ 
